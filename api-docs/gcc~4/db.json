{"index":"<h1>Using the GNU Compiler Collection (GCC)</h1> This file documents the use of the GNU compilers.  Copyright © 1988-2015 Free Software Foundation, Inc. <p>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with the Invariant Sections being “Funding Free Software”, the Front-Cover Texts being (a) (see below), and with the Back-Cover Texts being (b) (see below). A copy of the license is included in the section entitled “GNU Free Documentation License”. </p>\n<p>(a) The FSF's Front-Cover Text is: </p>\n<p>A GNU Manual </p>\n<p>(b) The FSF's Back-Cover Text is: </p>\n<p>You have freedom to copy and modify this GNU Manual, like GNU software. Copies published by the Free Software Foundation raise funds for GNU development. </p>\n <div class=\"shortcontents\"> <h1>Short Contents</h1> <ul> <li><a href=\"index#toc_Top\">Introduction</a></li> <li><a href=\"index#toc_G_002b_002b-and-GCC\">1 Programming Languages Supported by GCC</a></li> <li><a href=\"index#toc_Standards\">2 Language Standards Supported by GCC</a></li> <li><a href=\"index#toc_Invoking-GCC\">3 GCC Command Options</a></li> <li><a href=\"index#toc_C-Implementation\">4 C Implementation-defined behavior</a></li> <li><a href=\"index#toc_C_002b_002b-Implementation\">5 C++ Implementation-defined behavior</a></li> <li><a href=\"index#toc_C-Extensions\">6 Extensions to the C Language Family</a></li> <li><a href=\"index#toc_C_002b_002b-Extensions\">7 Extensions to the C++ Language</a></li> <li><a href=\"index#toc_Objective_002dC\">8 GNU Objective-C features</a></li> <li><a href=\"index#toc_Compatibility\">9 Binary Compatibility</a></li> <li><a href=\"index#toc_Gcov\">10 <code>gcov</code>—a Test Coverage Program</a></li> <li><a href=\"index#toc_Trouble\">11 Known Causes of Trouble with GCC</a></li> <li><a href=\"index#toc_Bugs\">12 Reporting Bugs</a></li> <li><a href=\"index#toc_Service\">13 How To Get Help with GCC</a></li> <li><a href=\"index#toc_Contributing\">14 Contributing to GCC Development</a></li> <li><a href=\"index#toc_Funding\">Funding Free Software</a></li> <li><a href=\"index#toc_GNU-Project\">The GNU Project and GNU/Linux</a></li> <li><a href=\"index#toc_Copying\">GNU General Public License</a></li> <li><a href=\"index#toc_GNU-Free-Documentation-License\">GNU Free Documentation License</a></li> <li><a href=\"index#toc_Contributors\">Contributors to GCC</a></li> <li><a href=\"index#toc_Option-Index\">Option Index</a></li> <li><a href=\"index#toc_Keyword-Index\">Keyword Index</a></li> </ul> </div> <div class=\"contents\"> <h1>Table of Contents</h1> <ul> <li>\n<a name=\"toc_Top\" href=\"index#Top\" id=\"toc_Top\">Introduction</a> </li>\n<li>\n<a name=\"toc_G_002b_002b-and-GCC\" href=\"g_002b_002b-and-gcc#G_002b_002b-and-GCC\" id=\"toc_G_002b_002b-and-GCC\">1 Programming Languages Supported by GCC</a> </li>\n<li>\n<a name=\"toc_Standards\" href=\"standards#Standards\" id=\"toc_Standards\">2 Language Standards Supported by GCC</a> <ul> <li>\n<a href=\"standards#Standards\">2.1 C language</a> </li>\n<li>\n<a href=\"standards#Standards\">2.2 C++ language</a> </li>\n<li>\n<a href=\"standards#Standards\">2.3 Objective-C and Objective-C++ languages</a> </li>\n<li>\n<a href=\"standards#Standards\">2.4 Go language</a> </li>\n<li>\n<a href=\"standards#Standards\">2.5 References for other languages</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Invoking-GCC\" href=\"invoking-gcc#Invoking-GCC\" id=\"toc_Invoking-GCC\">3 GCC Command Options</a> <ul> <li>\n<a href=\"option-summary#Option-Summary\">3.1 Option Summary</a> </li>\n<li>\n<a href=\"overall-options#Overall-Options\">3.2 Options Controlling the Kind of Output</a> </li>\n<li>\n<a href=\"invoking-g_002b_002b#Invoking-G_002b_002b\">3.3 Compiling C++ Programs</a> </li>\n<li>\n<a href=\"c-dialect-options#C-Dialect-Options\">3.4 Options Controlling C Dialect</a> </li>\n<li>\n<a href=\"c_002b_002b-dialect-options#C_002b_002b-Dialect-Options\">3.5 Options Controlling C++ Dialect</a> </li>\n<li>\n<a href=\"objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options\">3.6 Options Controlling Objective-C and Objective-C++ Dialects</a> </li>\n<li>\n<a href=\"language-independent-options#Language-Independent-Options\">3.7 Options to Control Diagnostic Messages Formatting</a> </li>\n<li>\n<a href=\"warning-options#Warning-Options\">3.8 Options to Request or Suppress Warnings</a> </li>\n<li>\n<a href=\"debugging-options#Debugging-Options\">3.9 Options for Debugging Your Program or GCC</a> </li>\n<li>\n<a href=\"optimize-options#Optimize-Options\">3.10 Options That Control Optimization</a> </li>\n<li>\n<a href=\"preprocessor-options#Preprocessor-Options\">3.11 Options Controlling the Preprocessor</a> </li>\n<li>\n<a href=\"assembler-options#Assembler-Options\">3.12 Passing Options to the Assembler</a> </li>\n<li>\n<a href=\"link-options#Link-Options\">3.13 Options for Linking</a> </li>\n<li>\n<a href=\"directory-options#Directory-Options\">3.14 Options for Directory Search</a> </li>\n<li>\n<a href=\"spec-files#Spec-Files\">3.15 Specifying subprocesses and the switches to pass to them</a> </li>\n<li>\n<a href=\"target-options#Target-Options\">3.16 Specifying Target Machine and Compiler Version</a> </li>\n<li>\n<a href=\"submodel-options#Submodel-Options\">3.17 Hardware Models and Configurations</a> <ul> <li>\n<a href=\"aarch64-options#AArch64-Options\">3.17.1 AArch64 Options</a> <ul> <li>\n<a href=\"aarch64-options#AArch64-Options\">3.17.1.1 <code>-march</code> and <code>-mcpu</code> feature modifiers</a> </li>\n</ul> </li>\n<li>\n<a href=\"adapteva-epiphany-options#Adapteva-Epiphany-Options\">3.17.2 Adapteva Epiphany Options</a> </li>\n<li>\n<a href=\"arc-options#ARC-Options\">3.17.3 ARC Options</a> </li>\n<li>\n<a href=\"arm-options#ARM-Options\">3.17.4 ARM Options</a> </li>\n<li>\n<a href=\"avr-options#AVR-Options\">3.17.5 AVR Options</a> <ul> <li>\n<a href=\"avr-options#AVR-Options\">3.17.5.1 <code>EIND</code> and Devices with more than 128 Ki Bytes of Flash</a> </li>\n<li>\n<a href=\"avr-options#AVR-Options\">3.17.5.2 Handling of the <code>RAMPD</code>, <code>RAMPX</code>, <code>RAMPY</code> and <code>RAMPZ</code> Special Function Registers</a> </li>\n<li>\n<a href=\"avr-options#AVR-Options\">3.17.5.3 AVR Built-in Macros</a> </li>\n</ul> </li>\n<li>\n<a href=\"blackfin-options#Blackfin-Options\">3.17.6 Blackfin Options</a> </li>\n<li>\n<a href=\"c6x-options#C6X-Options\">3.17.7 C6X Options</a> </li>\n<li>\n<a href=\"cris-options#CRIS-Options\">3.17.8 CRIS Options</a> </li>\n<li>\n<a href=\"cr16-options#CR16-Options\">3.17.9 CR16 Options</a> </li>\n<li>\n<a href=\"darwin-options#Darwin-Options\">3.17.10 Darwin Options</a> </li>\n<li>\n<a href=\"dec-alpha-options#DEC-Alpha-Options\">3.17.11 DEC Alpha Options</a> </li>\n<li>\n<a href=\"fr30-options#FR30-Options\">3.17.12 FR30 Options</a> </li>\n<li>\n<a href=\"frv-options#FRV-Options\">3.17.13 FRV Options</a> </li>\n<li>\n<a href=\"gnu_002flinux-options#GNU_002fLinux-Options\">3.17.14 GNU/Linux Options</a> </li>\n<li>\n<a href=\"h8_002f300-options#H8_002f300-Options\">3.17.15 H8/300 Options</a> </li>\n<li>\n<a href=\"hppa-options#HPPA-Options\">3.17.16 HPPA Options</a> </li>\n<li>\n<a href=\"i386-and-x86_002d64-options#i386-and-x86_002d64-Options\">3.17.17 Intel 386 and AMD x86-64 Options</a> </li>\n<li>\n<a href=\"i386-and-x86_002d64-windows-options#i386-and-x86_002d64-Windows-Options\">3.17.18 i386 and x86-64 Windows Options</a> </li>\n<li>\n<a href=\"ia_002d64-options#IA_002d64-Options\">3.17.19 IA-64 Options</a> </li>\n<li>\n<a href=\"lm32-options#LM32-Options\">3.17.20 LM32 Options</a> </li>\n<li>\n<a href=\"m32c-options#M32C-Options\">3.17.21 M32C Options</a> </li>\n<li>\n<a href=\"m32r_002fd-options#M32R_002fD-Options\">3.17.22 M32R/D Options</a> </li>\n<li>\n<a href=\"m680x0-options#M680x0-Options\">3.17.23 M680x0 Options</a> </li>\n<li>\n<a href=\"mcore-options#MCore-Options\">3.17.24 MCore Options</a> </li>\n<li>\n<a href=\"mep-options#MeP-Options\">3.17.25 MeP Options</a> </li>\n<li>\n<a href=\"microblaze-options#MicroBlaze-Options\">3.17.26 MicroBlaze Options</a> </li>\n<li>\n<a href=\"mips-options#MIPS-Options\">3.17.27 MIPS Options</a> </li>\n<li>\n<a href=\"mmix-options#MMIX-Options\">3.17.28 MMIX Options</a> </li>\n<li>\n<a href=\"mn10300-options#MN10300-Options\">3.17.29 MN10300 Options</a> </li>\n<li>\n<a href=\"moxie-options#Moxie-Options\">3.17.30 Moxie Options</a> </li>\n<li>\n<a href=\"msp430-options#MSP430-Options\">3.17.31 MSP430 Options</a> </li>\n<li>\n<a href=\"nds32-options#NDS32-Options\">3.17.32 NDS32 Options</a> </li>\n<li>\n<a href=\"nios-ii-options#Nios-II-Options\">3.17.33 Nios II Options</a> </li>\n<li>\n<a href=\"pdp_002d11-options#PDP_002d11-Options\">3.17.34 PDP-11 Options</a> </li>\n<li>\n<a href=\"picochip-options#picoChip-Options\">3.17.35 picoChip Options</a> </li>\n<li>\n<a href=\"powerpc-options#PowerPC-Options\">3.17.36 PowerPC Options</a> </li>\n<li>\n<a href=\"rl78-options#RL78-Options\">3.17.37 RL78 Options</a> </li>\n<li>\n<a href=\"rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options\">3.17.38 IBM RS/6000 and PowerPC Options</a> </li>\n<li>\n<a href=\"rx-options#RX-Options\">3.17.39 RX Options</a> </li>\n<li>\n<a href=\"s_002f390-and-zseries-options#S_002f390-and-zSeries-Options\">3.17.40 S/390 and zSeries Options</a> </li>\n<li>\n<a href=\"score-options#Score-Options\">3.17.41 Score Options</a> </li>\n<li>\n<a href=\"sh-options#SH-Options\">3.17.42 SH Options</a> </li>\n<li>\n<a href=\"solaris-2-options#Solaris-2-Options\">3.17.43 Solaris 2 Options</a> </li>\n<li>\n<a href=\"sparc-options#SPARC-Options\">3.17.44 SPARC Options</a> </li>\n<li>\n<a href=\"spu-options#SPU-Options\">3.17.45 SPU Options</a> </li>\n<li>\n<a href=\"system-v-options#System-V-Options\">3.17.46 Options for System V</a> </li>\n<li>\n<a href=\"tile_002dgx-options#TILE_002dGx-Options\">3.17.47 TILE-Gx Options</a> </li>\n<li>\n<a href=\"tilepro-options#TILEPro-Options\">3.17.48 TILEPro Options</a> </li>\n<li>\n<a href=\"v850-options#V850-Options\">3.17.49 V850 Options</a> </li>\n<li>\n<a href=\"vax-options#VAX-Options\">3.17.50 VAX Options</a> </li>\n<li>\n<a href=\"vms-options#VMS-Options\">3.17.51 VMS Options</a> </li>\n<li>\n<a href=\"vxworks-options#VxWorks-Options\">3.17.52 VxWorks Options</a> </li>\n<li>\n<a href=\"x86_002d64-options#x86_002d64-Options\">3.17.53 x86-64 Options</a> </li>\n<li>\n<a href=\"xstormy16-options#Xstormy16-Options\">3.17.54 Xstormy16 Options</a> </li>\n<li>\n<a href=\"xtensa-options#Xtensa-Options\">3.17.55 Xtensa Options</a> </li>\n<li>\n<a href=\"zseries-options#zSeries-Options\">3.17.56 zSeries Options</a> </li>\n</ul> </li>\n<li>\n<a href=\"code-gen-options#Code-Gen-Options\">3.18 Options for Code Generation Conventions</a> </li>\n<li>\n<a href=\"environment-variables#Environment-Variables\">3.19 Environment Variables Affecting GCC</a> </li>\n<li>\n<a href=\"precompiled-headers#Precompiled-Headers\">3.20 Using Precompiled Headers</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_C-Implementation\" href=\"c-implementation#C-Implementation\" id=\"toc_C-Implementation\">4 C Implementation-defined behavior</a> <ul> <li>\n<a href=\"translation-implementation#Translation-implementation\">4.1 Translation</a> </li>\n<li>\n<a href=\"environment-implementation#Environment-implementation\">4.2 Environment</a> </li>\n<li>\n<a href=\"identifiers-implementation#Identifiers-implementation\">4.3 Identifiers</a> </li>\n<li>\n<a href=\"characters-implementation#Characters-implementation\">4.4 Characters</a> </li>\n<li>\n<a href=\"integers-implementation#Integers-implementation\">4.5 Integers</a> </li>\n<li>\n<a href=\"floating-point-implementation#Floating-point-implementation\">4.6 Floating point</a> </li>\n<li>\n<a href=\"arrays-and-pointers-implementation#Arrays-and-pointers-implementation\">4.7 Arrays and pointers</a> </li>\n<li>\n<a href=\"hints-implementation#Hints-implementation\">4.8 Hints</a> </li>\n<li>\n<a href=\"structures-unions-enumerations-and-bit_002dfields-implementation#Structures-unions-enumerations-and-bit_002dfields-implementation\">4.9 Structures, unions, enumerations, and bit-fields</a> </li>\n<li>\n<a href=\"qualifiers-implementation#Qualifiers-implementation\">4.10 Qualifiers</a> </li>\n<li>\n<a href=\"declarators-implementation#Declarators-implementation\">4.11 Declarators</a> </li>\n<li>\n<a href=\"statements-implementation#Statements-implementation\">4.12 Statements</a> </li>\n<li>\n<a href=\"preprocessing-directives-implementation#Preprocessing-directives-implementation\">4.13 Preprocessing directives</a> </li>\n<li>\n<a href=\"library-functions-implementation#Library-functions-implementation\">4.14 Library functions</a> </li>\n<li>\n<a href=\"architecture-implementation#Architecture-implementation\">4.15 Architecture</a> </li>\n<li>\n<a href=\"locale_002dspecific-behavior-implementation#Locale_002dspecific-behavior-implementation\">4.16 Locale-specific behavior</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_C_002b_002b-Implementation\" href=\"c_002b_002b-implementation#C_002b_002b-Implementation\" id=\"toc_C_002b_002b-Implementation\">5 C++ Implementation-defined behavior</a> <ul> <li>\n<a href=\"conditionally_002dsupported-behavior#Conditionally_002dsupported-behavior\">5.1 Conditionally-supported behavior</a> </li>\n<li>\n<a href=\"exception-handling#Exception-handling\">5.2 Exception handling</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_C-Extensions\" href=\"c-extensions#C-Extensions\" id=\"toc_C-Extensions\">6 Extensions to the C Language Family</a> <ul> <li>\n<a href=\"statement-exprs#Statement-Exprs\">6.1 Statements and Declarations in Expressions</a> </li>\n<li>\n<a href=\"local-labels#Local-Labels\">6.2 Locally Declared Labels</a> </li>\n<li>\n<a href=\"labels-as-values#Labels-as-Values\">6.3 Labels as Values</a> </li>\n<li>\n<a href=\"nested-functions#Nested-Functions\">6.4 Nested Functions</a> </li>\n<li>\n<a href=\"constructing-calls#Constructing-Calls\">6.5 Constructing Function Calls</a> </li>\n<li>\n<a href=\"typeof#Typeof\">6.6 Referring to a Type with <code>typeof</code></a> </li>\n<li>\n<a href=\"conditionals#Conditionals\">6.7 Conditionals with Omitted Operands</a> </li>\n<li>\n<a href=\"_005f_005fint128#_005f_005fint128\">6.8 128-bit integers</a> </li>\n<li>\n<a href=\"long-long#Long-Long\">6.9 Double-Word Integers</a> </li>\n<li>\n<a href=\"complex#Complex\">6.10 Complex Numbers</a> </li>\n<li>\n<a href=\"floating-types#Floating-Types\">6.11 Additional Floating Types</a> </li>\n<li>\n<a href=\"half_002dprecision#Half_002dPrecision\">6.12 Half-Precision Floating Point</a> </li>\n<li>\n<a href=\"decimal-float#Decimal-Float\">6.13 Decimal Floating Types</a> </li>\n<li>\n<a href=\"hex-floats#Hex-Floats\">6.14 Hex Floats</a> </li>\n<li>\n<a href=\"fixed_002dpoint#Fixed_002dPoint\">6.15 Fixed-Point Types</a> </li>\n<li>\n<a href=\"named-address-spaces#Named-Address-Spaces\">6.16 Named Address Spaces</a> <ul> <li>\n<a href=\"named-address-spaces#Named-Address-Spaces\">6.16.1 AVR Named Address Spaces</a> </li>\n<li>\n<a href=\"named-address-spaces#Named-Address-Spaces\">6.16.2 M32C Named Address Spaces</a> </li>\n<li>\n<a href=\"named-address-spaces#Named-Address-Spaces\">6.16.3 RL78 Named Address Spaces</a> </li>\n<li>\n<a href=\"named-address-spaces#Named-Address-Spaces\">6.16.4 SPU Named Address Spaces</a> </li>\n</ul> </li>\n<li>\n<a href=\"zero-length#Zero-Length\">6.17 Arrays of Length Zero</a> </li>\n<li>\n<a href=\"empty-structures#Empty-Structures\">6.18 Structures With No Members</a> </li>\n<li>\n<a href=\"variable-length#Variable-Length\">6.19 Arrays of Variable Length</a> </li>\n<li>\n<a href=\"variadic-macros#Variadic-Macros\">6.20 Macros with a Variable Number of Arguments.</a> </li>\n<li>\n<a href=\"escaped-newlines#Escaped-Newlines\">6.21 Slightly Looser Rules for Escaped Newlines</a> </li>\n<li>\n<a href=\"subscripting#Subscripting\">6.22 Non-Lvalue Arrays May Have Subscripts</a> </li>\n<li>\n<a href=\"pointer-arith#Pointer-Arith\">6.23 Arithmetic on <code>void</code>- and Function-Pointers</a> </li>\n<li>\n<a href=\"initializers#Initializers\">6.24 Non-Constant Initializers</a> </li>\n<li>\n<a href=\"compound-literals#Compound-Literals\">6.25 Compound Literals</a> </li>\n<li>\n<a href=\"designated-inits#Designated-Inits\">6.26 Designated Initializers</a> </li>\n<li>\n<a href=\"case-ranges#Case-Ranges\">6.27 Case Ranges</a> </li>\n<li>\n<a href=\"cast-to-union#Cast-to-Union\">6.28 Cast to a Union Type</a> </li>\n<li>\n<a href=\"mixed-declarations#Mixed-Declarations\">6.29 Mixed Declarations and Code</a> </li>\n<li>\n<a href=\"function-attributes#Function-Attributes\">6.30 Declaring Attributes of Functions</a> </li>\n<li>\n<a href=\"attribute-syntax#Attribute-Syntax\">6.31 Attribute Syntax</a> </li>\n<li>\n<a href=\"function-prototypes#Function-Prototypes\">6.32 Prototypes and Old-Style Function Definitions</a> </li>\n<li>\n<a href=\"c_002b_002b-comments#C_002b_002b-Comments\">6.33 C++ Style Comments</a> </li>\n<li>\n<a href=\"dollar-signs#Dollar-Signs\">6.34 Dollar Signs in Identifier Names</a> </li>\n<li>\n<a href=\"character-escapes#Character-Escapes\">6.35 The Character &lt;ESC&gt; in Constants</a> </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36 Specifying Attributes of Variables</a> <ul> <li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36.1 AVR Variable Attributes</a> </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36.2 Blackfin Variable Attributes</a> </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36.3 M32R/D Variable Attributes</a> </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36.4 MeP Variable Attributes</a> </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36.5 i386 Variable Attributes</a> </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36.6 PowerPC Variable Attributes</a> </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36.7 SPU Variable Attributes</a> </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">6.36.8 Xstormy16 Variable Attributes</a> </li>\n</ul> </li>\n<li>\n<a href=\"type-attributes#Type-Attributes\">6.37 Specifying Attributes of Types</a> <ul> <li>\n<a href=\"type-attributes#Type-Attributes\">6.37.1 ARM Type Attributes</a> </li>\n<li>\n<a href=\"type-attributes#Type-Attributes\">6.37.2 MeP Type Attributes</a> </li>\n<li>\n<a href=\"type-attributes#Type-Attributes\">6.37.3 i386 Type Attributes</a> </li>\n<li>\n<a href=\"type-attributes#Type-Attributes\">6.37.4 PowerPC Type Attributes</a> </li>\n<li>\n<a href=\"type-attributes#Type-Attributes\">6.37.5 SPU Type Attributes</a> </li>\n</ul> </li>\n<li>\n<a href=\"alignment#Alignment\">6.38 Inquiring on Alignment of Types or Variables</a> </li>\n<li>\n<a href=\"inline#Inline\">6.39 An Inline Function is As Fast As a Macro</a> </li>\n<li>\n<a href=\"volatiles#Volatiles\">6.40 When is a Volatile Object Accessed?</a> </li>\n<li>\n<a href=\"extended-asm#Extended-Asm\">6.41 Assembler Instructions with C Expression Operands</a> <ul> <li>\n<a href=\"extended-asm#Extended-Asm\">6.41.1 Size of an <code>asm</code></a> </li>\n<li>\n<a href=\"extended-asm#Extended-Asm\">6.41.2 i386 floating-point asm operands</a> </li>\n</ul> </li>\n<li>\n<a href=\"constraints#Constraints\">6.42 Constraints for <code>asm</code> Operands</a> <ul> <li>\n<a href=\"simple-constraints#Simple-Constraints\">6.42.1 Simple Constraints</a> </li>\n<li>\n<a href=\"multi_002dalternative#Multi_002dAlternative\">6.42.2 Multiple Alternative Constraints</a> </li>\n<li>\n<a href=\"modifiers#Modifiers\">6.42.3 Constraint Modifier Characters</a> </li>\n<li>\n<a href=\"machine-constraints#Machine-Constraints\">6.42.4 Constraints for Particular Machines</a> </li>\n</ul> </li>\n<li>\n<a href=\"asm-labels#Asm-Labels\">6.43 Controlling Names Used in Assembler Code</a> </li>\n<li>\n<a href=\"explicit-reg-vars#Explicit-Reg-Vars\">6.44 Variables in Specified Registers</a> <ul> <li>\n<a href=\"global-reg-vars#Global-Reg-Vars\">6.44.1 Defining Global Register Variables</a> </li>\n<li>\n<a href=\"local-reg-vars#Local-Reg-Vars\">6.44.2 Specifying Registers for Local Variables</a> </li>\n</ul> </li>\n<li>\n<a href=\"alternate-keywords#Alternate-Keywords\">6.45 Alternate Keywords</a> </li>\n<li>\n<a href=\"incomplete-enums#Incomplete-Enums\">6.46 Incomplete <code>enum</code> Types</a> </li>\n<li>\n<a href=\"function-names#Function-Names\">6.47 Function Names as Strings</a> </li>\n<li>\n<a href=\"return-address#Return-Address\">6.48 Getting the Return or Frame Address of a Function</a> </li>\n<li>\n<a href=\"vector-extensions#Vector-Extensions\">6.49 Using Vector Instructions through Built-in Functions</a> </li>\n<li>\n<a href=\"offsetof#Offsetof\">6.50 Offsetof</a> </li>\n<li>\n<a href=\"_005f_005fsync-builtins#_005f_005fsync-Builtins\">6.51 Legacy __sync Built-in Functions for Atomic Memory Access</a> </li>\n<li>\n<a href=\"_005f_005fatomic-builtins#_005f_005fatomic-Builtins\">6.52 Built-in functions for memory model aware atomic operations</a> </li>\n<li>\n<a href=\"x86-specific-memory-model-extensions-for-transactional-memory#x86-specific-memory-model-extensions-for-transactional-memory\">6.53 x86 specific memory model extensions for transactional memory</a> </li>\n<li>\n<a href=\"object-size-checking#Object-Size-Checking\">6.54 Object Size Checking Built-in Functions</a> </li>\n<li>\n<a href=\"cilk-plus-builtins#Cilk-Plus-Builtins\">6.55 Cilk Plus C/C++ language extension Built-in Functions.</a> </li>\n<li>\n<a href=\"other-builtins#Other-Builtins\">6.56 Other Built-in Functions Provided by GCC</a> </li>\n<li>\n<a href=\"target-builtins#Target-Builtins\">6.57 Built-in Functions Specific to Particular Target Machines</a> <ul> <li>\n<a href=\"alpha-built_002din-functions#Alpha-Built_002din-Functions\">6.57.1 Alpha Built-in Functions</a> </li>\n<li>\n<a href=\"altera-nios-ii-built_002din-functions#Altera-Nios-II-Built_002din-Functions\">6.57.2 Altera Nios II Built-in Functions</a> </li>\n<li>\n<a href=\"arc-built_002din-functions#ARC-Built_002din-Functions\">6.57.3 ARC Built-in Functions</a> </li>\n<li>\n<a href=\"arc-simd-built_002din-functions#ARC-SIMD-Built_002din-Functions\">6.57.4 ARC SIMD Built-in Functions</a> </li>\n<li>\n<a href=\"arm-iwmmxt-built_002din-functions#ARM-iWMMXt-Built_002din-Functions\">6.57.5 ARM iWMMXt Built-in Functions</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6 ARM NEON Intrinsics</a> <ul> <li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.1 Addition</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.2 Multiplication</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.3 Multiply-accumulate</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.4 Multiply-subtract</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.5 Fused-multiply-accumulate</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.6 Fused-multiply-subtract</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.7 Round to integral (to nearest, ties to even)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.8 Round to integral (to nearest, ties away from zero)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.9 Round to integral (towards +Inf)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.10 Round to integral (towards -Inf)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.11 Round to integral (towards 0)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.12 Subtraction</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.13 Comparison (equal-to)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.14 Comparison (greater-than-or-equal-to)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.15 Comparison (less-than-or-equal-to)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.16 Comparison (greater-than)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.17 Comparison (less-than)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.18 Comparison (absolute greater-than-or-equal-to)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.19 Comparison (absolute less-than-or-equal-to)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.20 Comparison (absolute greater-than)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.21 Comparison (absolute less-than)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.22 Test bits</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.23 Absolute difference</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.24 Absolute difference and accumulate</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.25 Maximum</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.26 Minimum</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.27 Pairwise add</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.28 Pairwise add, single_opcode widen and accumulate</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.29 Folding maximum</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.30 Folding minimum</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.31 Reciprocal step</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.32 Vector shift left</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.33 Vector shift left by constant</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.34 Vector shift right by constant</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.35 Vector shift right by constant and accumulate</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.36 Vector shift right and insert</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.37 Vector shift left and insert</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.38 Absolute value</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.39 Negation</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.40 Bitwise not</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.41 Count leading sign bits</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.42 Count leading zeros</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.43 Count number of set bits</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.44 Reciprocal estimate</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.45 Reciprocal square-root estimate</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.46 Get lanes from a vector</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.47 Set lanes in a vector</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.48 Create vector from literal bit pattern</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.49 Set all lanes to the same value</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.50 Combining vectors</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.51 Splitting vectors</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.52 Conversions</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.53 Move, single_opcode narrowing</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.54 Move, single_opcode long</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.55 Table lookup</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.56 Extended table lookup</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.57 Multiply, lane</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.58 Long multiply, lane</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.59 Saturating doubling long multiply, lane</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.60 Saturating doubling multiply high, lane</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.61 Multiply-accumulate, lane</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.62 Multiply-subtract, lane</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.63 Vector multiply by scalar</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.64 Vector long multiply by scalar</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.65 Vector saturating doubling long multiply by scalar</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.66 Vector saturating doubling multiply high by scalar</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.67 Vector multiply-accumulate by scalar</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.68 Vector multiply-subtract by scalar</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.69 Vector extract</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.70 Reverse elements</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.71 Bit selection</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.72 Transpose elements</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.73 Zip elements</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.74 Unzip elements</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.75 Element/structure loads, VLD1 variants</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.76 Element/structure stores, VST1 variants</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.77 Element/structure loads, VLD2 variants</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.78 Element/structure stores, VST2 variants</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.79 Element/structure loads, VLD3 variants</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.80 Element/structure stores, VST3 variants</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.81 Element/structure loads, VLD4 variants</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.82 Element/structure stores, VST4 variants</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.83 Logical operations (AND)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.84 Logical operations (OR)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.85 Logical operations (exclusive OR)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.86 Logical operations (AND-NOT)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.87 Logical operations (OR-NOT)</a> </li>\n<li>\n<a href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">6.57.6.88 Reinterpret casts</a> </li>\n</ul> </li>\n<li>\n<a href=\"arm-acle-intrinsics#ARM-ACLE-Intrinsics\">6.57.7 ARM ACLE Intrinsics</a> <ul> <li>\n<a href=\"arm-acle-intrinsics#ARM-ACLE-Intrinsics\">6.57.7.1 CRC32 intrinsics</a> </li>\n</ul> </li>\n<li>\n<a href=\"avr-built_002din-functions#AVR-Built_002din-Functions\">6.57.8 AVR Built-in Functions</a> </li>\n<li>\n<a href=\"blackfin-built_002din-functions#Blackfin-Built_002din-Functions\">6.57.9 Blackfin Built-in Functions</a> </li>\n<li>\n<a href=\"fr_002dv-built_002din-functions#FR_002dV-Built_002din-Functions\">6.57.10 FR-V Built-in Functions</a> <ul> <li>\n<a href=\"argument-types#Argument-Types\">6.57.10.1 Argument Types</a> </li>\n<li>\n<a href=\"directly_002dmapped-integer-functions#Directly_002dmapped-Integer-Functions\">6.57.10.2 Directly-mapped Integer Functions</a> </li>\n<li>\n<a href=\"directly_002dmapped-media-functions#Directly_002dmapped-Media-Functions\">6.57.10.3 Directly-mapped Media Functions</a> </li>\n<li>\n<a href=\"raw-read_002fwrite-functions#Raw-read_002fwrite-Functions\">6.57.10.4 Raw read/write Functions</a> </li>\n<li>\n<a href=\"other-built_002din-functions#Other-Built_002din-Functions\">6.57.10.5 Other Built-in Functions</a> </li>\n</ul> </li>\n<li>\n<a href=\"x86-built_002din-functions#X86-Built_002din-Functions\">6.57.11 X86 Built-in Functions</a> </li>\n<li>\n<a href=\"x86-transactional-memory-intrinsics#X86-transactional-memory-intrinsics\">6.57.12 X86 transaction memory intrinsics</a> </li>\n<li>\n<a href=\"mips-dsp-built_002din-functions#MIPS-DSP-Built_002din-Functions\">6.57.13 MIPS DSP Built-in Functions</a> </li>\n<li>\n<a href=\"mips-paired_002dsingle-support#MIPS-Paired_002dSingle-Support\">6.57.14 MIPS Paired-Single Support</a> </li>\n<li>\n<a href=\"mips-loongson-built_002din-functions#MIPS-Loongson-Built_002din-Functions\">6.57.15 MIPS Loongson Built-in Functions</a> <ul> <li>\n<a href=\"paired_002dsingle-arithmetic#Paired_002dSingle-Arithmetic\">6.57.15.1 Paired-Single Arithmetic</a> </li>\n<li>\n<a href=\"paired_002dsingle-built_002din-functions#Paired_002dSingle-Built_002din-Functions\">6.57.15.2 Paired-Single Built-in Functions</a> </li>\n<li>\n<a href=\"mips_002d3d-built_002din-functions#MIPS_002d3D-Built_002din-Functions\">6.57.15.3 MIPS-3D Built-in Functions</a> </li>\n</ul> </li>\n<li>\n<a href=\"other-mips-built_002din-functions#Other-MIPS-Built_002din-Functions\">6.57.16 Other MIPS Built-in Functions</a> </li>\n<li>\n<a href=\"msp430-built_002din-functions#MSP430-Built_002din-Functions\">6.57.17 MSP430 Built-in Functions</a> </li>\n<li>\n<a href=\"nds32-built_002din-functions#NDS32-Built_002din-Functions\">6.57.18 NDS32 Built-in Functions</a> </li>\n<li>\n<a href=\"picochip-built_002din-functions#picoChip-Built_002din-Functions\">6.57.19 picoChip Built-in Functions</a> </li>\n<li>\n<a href=\"powerpc-built_002din-functions#PowerPC-Built_002din-Functions\">6.57.20 PowerPC Built-in Functions</a> </li>\n<li>\n<a href=\"powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions\">6.57.21 PowerPC AltiVec Built-in Functions</a> </li>\n<li>\n<a href=\"powerpc-hardware-transactional-memory-built_002din-functions#PowerPC-Hardware-Transactional-Memory-Built_002din-Functions\">6.57.22 PowerPC Hardware Transactional Memory Built-in Functions</a> <ul> <li>\n<a href=\"powerpc-hardware-transactional-memory-built_002din-functions#PowerPC-Hardware-Transactional-Memory-Built_002din-Functions\">6.57.22.1 PowerPC HTM Low Level Built-in Functions</a> </li>\n<li>\n<a href=\"powerpc-hardware-transactional-memory-built_002din-functions#PowerPC-Hardware-Transactional-Memory-Built_002din-Functions\">6.57.22.2 PowerPC HTM High Level Inline Functions</a> </li>\n</ul> </li>\n<li>\n<a href=\"rx-built_002din-functions#RX-Built_002din-Functions\">6.57.23 RX Built-in Functions</a> </li>\n<li>\n<a href=\"s_002f390-system-z-built_002din-functions#S_002f390-System-z-Built_002din-Functions\">6.57.24 S/390 System z Built-in Functions</a> </li>\n<li>\n<a href=\"sh-built_002din-functions#SH-Built_002din-Functions\">6.57.25 SH Built-in Functions</a> </li>\n<li>\n<a href=\"sparc-vis-built_002din-functions#SPARC-VIS-Built_002din-Functions\">6.57.26 SPARC VIS Built-in Functions</a> </li>\n<li>\n<a href=\"spu-built_002din-functions#SPU-Built_002din-Functions\">6.57.27 SPU Built-in Functions</a> </li>\n<li>\n<a href=\"ti-c6x-built_002din-functions#TI-C6X-Built_002din-Functions\">6.57.28 TI C6X Built-in Functions</a> </li>\n<li>\n<a href=\"tile_002dgx-built_002din-functions#TILE_002dGx-Built_002din-Functions\">6.57.29 TILE-Gx Built-in Functions</a> </li>\n<li>\n<a href=\"tilepro-built_002din-functions#TILEPro-Built_002din-Functions\">6.57.30 TILEPro Built-in Functions</a> </li>\n</ul> </li>\n<li>\n<a href=\"target-format-checks#Target-Format-Checks\">6.58 Format Checks Specific to Particular Target Machines</a> <ul> <li>\n<a href=\"solaris-format-checks#Solaris-Format-Checks\">6.58.1 Solaris Format Checks</a> </li>\n<li>\n<a href=\"darwin-format-checks#Darwin-Format-Checks\">6.58.2 Darwin Format Checks</a> </li>\n</ul> </li>\n<li>\n<a href=\"pragmas#Pragmas\">6.59 Pragmas Accepted by GCC</a> <ul> <li>\n<a href=\"arm-pragmas#ARM-Pragmas\">6.59.1 ARM Pragmas</a> </li>\n<li>\n<a href=\"m32c-pragmas#M32C-Pragmas\">6.59.2 M32C Pragmas</a> </li>\n<li>\n<a href=\"mep-pragmas#MeP-Pragmas\">6.59.3 MeP Pragmas</a> </li>\n<li>\n<a href=\"rs_002f6000-and-powerpc-pragmas#RS_002f6000-and-PowerPC-Pragmas\">6.59.4 RS/6000 and PowerPC Pragmas</a> </li>\n<li>\n<a href=\"darwin-pragmas#Darwin-Pragmas\">6.59.5 Darwin Pragmas</a> </li>\n<li>\n<a href=\"solaris-pragmas#Solaris-Pragmas\">6.59.6 Solaris Pragmas</a> </li>\n<li>\n<a href=\"symbol_002drenaming-pragmas#Symbol_002dRenaming-Pragmas\">6.59.7 Symbol-Renaming Pragmas</a> </li>\n<li>\n<a href=\"structure_002dpacking-pragmas#Structure_002dPacking-Pragmas\">6.59.8 Structure-Packing Pragmas</a> </li>\n<li>\n<a href=\"weak-pragmas#Weak-Pragmas\">6.59.9 Weak Pragmas</a> </li>\n<li>\n<a href=\"diagnostic-pragmas#Diagnostic-Pragmas\">6.59.10 Diagnostic Pragmas</a> </li>\n<li>\n<a href=\"visibility-pragmas#Visibility-Pragmas\">6.59.11 Visibility Pragmas</a> </li>\n<li>\n<a href=\"push_002fpop-macro-pragmas#Push_002fPop-Macro-Pragmas\">6.59.12 Push/Pop Macro Pragmas</a> </li>\n<li>\n<a href=\"function-specific-option-pragmas#Function-Specific-Option-Pragmas\">6.59.13 Function Specific Option Pragmas</a> </li>\n<li>\n<a href=\"loop_002dspecific-pragmas#Loop_002dSpecific-Pragmas\">6.59.14 Loop-Specific Pragmas</a> </li>\n</ul> </li>\n<li>\n<a href=\"unnamed-fields#Unnamed-Fields\">6.60 Unnamed struct/union fields within structs/unions</a> </li>\n<li>\n<a href=\"thread_002dlocal#Thread_002dLocal\">6.61 Thread-Local Storage</a> <ul> <li>\n<a href=\"c99-thread_002dlocal-edits#C99-Thread_002dLocal-Edits\">6.61.1 ISO/IEC 9899:1999 Edits for Thread-Local Storage</a> </li>\n<li>\n<a href=\"c_002b_002b98-thread_002dlocal-edits#C_002b_002b98-Thread_002dLocal-Edits\">6.61.2 ISO/IEC 14882:1998 Edits for Thread-Local Storage</a> </li>\n</ul> </li>\n<li>\n<a href=\"binary-constants#Binary-constants\">6.62 Binary constants using the ‘<code>0b</code>’ prefix</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_C_002b_002b-Extensions\" href=\"c_002b_002b-extensions#C_002b_002b-Extensions\" id=\"toc_C_002b_002b-Extensions\">7 Extensions to the C++ Language</a> <ul> <li>\n<a href=\"c_002b_002b-volatiles#C_002b_002b-Volatiles\">7.1 When is a Volatile C++ Object Accessed?</a> </li>\n<li>\n<a href=\"restricted-pointers#Restricted-Pointers\">7.2 Restricting Pointer Aliasing</a> </li>\n<li>\n<a href=\"vague-linkage#Vague-Linkage\">7.3 Vague Linkage</a> </li>\n<li>\n<a href=\"c_002b_002b-interface#C_002b_002b-Interface\">7.4 #pragma interface and implementation</a> </li>\n<li>\n<a href=\"template-instantiation#Template-Instantiation\">7.5 Where's the Template?</a> </li>\n<li>\n<a href=\"bound-member-functions#Bound-member-functions\">7.6 Extracting the function pointer from a bound pointer to member function</a> </li>\n<li>\n<a href=\"c_002b_002b-attributes#C_002b_002b-Attributes\">7.7 C++-Specific Variable, Function, and Type Attributes</a> </li>\n<li>\n<a href=\"function-multiversioning#Function-Multiversioning\">7.8 Function Multiversioning</a> </li>\n<li>\n<a href=\"namespace-association#Namespace-Association\">7.9 Namespace Association</a> </li>\n<li>\n<a href=\"type-traits#Type-Traits\">7.10 Type Traits</a> </li>\n<li>\n<a href=\"java-exceptions#Java-Exceptions\">7.11 Java Exceptions</a> </li>\n<li>\n<a href=\"deprecated-features#Deprecated-Features\">7.12 Deprecated Features</a> </li>\n<li>\n<a href=\"backwards-compatibility#Backwards-Compatibility\">7.13 Backwards Compatibility</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Objective_002dC\" href=\"objective_002dc#Objective_002dC\" id=\"toc_Objective_002dC\">8 GNU Objective-C features</a> <ul> <li>\n<a href=\"gnu-objective_002dc-runtime-api#GNU-Objective_002dC-runtime-API\">8.1 GNU Objective-C runtime API</a> <ul> <li>\n<a href=\"modern-gnu-objective_002dc-runtime-api#Modern-GNU-Objective_002dC-runtime-API\">8.1.1 Modern GNU Objective-C runtime API</a> </li>\n<li>\n<a href=\"traditional-gnu-objective_002dc-runtime-api#Traditional-GNU-Objective_002dC-runtime-API\">8.1.2 Traditional GNU Objective-C runtime API</a> </li>\n</ul> </li>\n<li>\n<a href=\"executing-code-before-main#Executing-code-before-main\">8.2 <code>+load</code>: Executing code before main</a> <ul> <li>\n<a href=\"what-you-can-and-what-you-cannot-do-in-_002bload#What-you-can-and-what-you-cannot-do-in-_002bload\">8.2.1 What you can and what you cannot do in <code>+load</code></a> </li>\n</ul> </li>\n<li>\n<a href=\"type-encoding#Type-encoding\">8.3 Type encoding</a> <ul> <li>\n<a href=\"legacy-type-encoding#Legacy-type-encoding\">8.3.1 Legacy type encoding</a> </li>\n<li>\n<a href=\"_0040encode#_0040encode\">8.3.2 @encode</a> </li>\n<li>\n<a href=\"method-signatures#Method-signatures\">8.3.3 Method signatures</a> </li>\n</ul> </li>\n<li>\n<a href=\"garbage-collection#Garbage-Collection\">8.4 Garbage Collection</a> </li>\n<li>\n<a href=\"constant-string-objects#Constant-string-objects\">8.5 Constant string objects</a> </li>\n<li>\n<a href=\"compatibility_005falias#compatibility_005falias\">8.6 compatibility_alias</a> </li>\n<li>\n<a href=\"exceptions#Exceptions\">8.7 Exceptions</a> </li>\n<li>\n<a href=\"synchronization#Synchronization\">8.8 Synchronization</a> </li>\n<li>\n<a href=\"fast-enumeration#Fast-enumeration\">8.9 Fast enumeration</a> <ul> <li>\n<a href=\"using-fast-enumeration#Using-fast-enumeration\">8.9.1 Using fast enumeration</a> </li>\n<li>\n<a href=\"c99_002dlike-fast-enumeration-syntax#c99_002dlike-fast-enumeration-syntax\">8.9.2 c99-like fast enumeration syntax</a> </li>\n<li>\n<a href=\"fast-enumeration-details#Fast-enumeration-details\">8.9.3 Fast enumeration details</a> </li>\n<li>\n<a href=\"fast-enumeration-protocol#Fast-enumeration-protocol\">8.9.4 Fast enumeration protocol</a> </li>\n</ul> </li>\n<li>\n<a href=\"messaging-with-the-gnu-objective_002dc-runtime#Messaging-with-the-GNU-Objective_002dC-runtime\">8.10 Messaging with the GNU Objective-C runtime</a> <ul> <li>\n<a href=\"dynamically-registering-methods#Dynamically-registering-methods\">8.10.1 Dynamically registering methods</a> </li>\n<li>\n<a href=\"forwarding-hook#Forwarding-hook\">8.10.2 Forwarding hook</a> </li>\n</ul> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Compatibility\" href=\"compatibility#Compatibility\" id=\"toc_Compatibility\">9 Binary Compatibility</a> </li>\n<li>\n<a name=\"toc_Gcov\" href=\"gcov#Gcov\" id=\"toc_Gcov\">10 <code>gcov</code>—a Test Coverage Program</a> <ul> <li>\n<a href=\"gcov-intro#Gcov-Intro\">10.1 Introduction to <code>gcov</code></a> </li>\n<li>\n<a href=\"invoking-gcov#Invoking-Gcov\">10.2 Invoking <code>gcov</code></a> </li>\n<li>\n<a href=\"gcov-and-optimization#Gcov-and-Optimization\">10.3 Using <code>gcov</code> with GCC Optimization</a> </li>\n<li>\n<a href=\"gcov-data-files#Gcov-Data-Files\">10.4 Brief description of <code>gcov</code> data files</a> </li>\n<li>\n<a href=\"cross_002dprofiling#Cross_002dprofiling\">10.5 Data file relocation to support cross-profiling</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Trouble\" href=\"trouble#Trouble\" id=\"toc_Trouble\">11 Known Causes of Trouble with GCC</a> <ul> <li>\n<a href=\"actual-bugs#Actual-Bugs\">11.1 Actual Bugs We Haven't Fixed Yet</a> </li>\n<li>\n<a href=\"interoperation#Interoperation\">11.2 Interoperation</a> </li>\n<li>\n<a href=\"incompatibilities#Incompatibilities\">11.3 Incompatibilities of GCC</a> </li>\n<li>\n<a href=\"fixed-headers#Fixed-Headers\">11.4 Fixed Header Files</a> </li>\n<li>\n<a href=\"standard-libraries#Standard-Libraries\">11.5 Standard Libraries</a> </li>\n<li>\n<a href=\"disappointments#Disappointments\">11.6 Disappointments and Misunderstandings</a> </li>\n<li>\n<a href=\"c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings\">11.7 Common Misunderstandings with GNU C++</a> <ul> <li>\n<a href=\"static-definitions#Static-Definitions\">11.7.1 Declare <em>and</em> Define Static Members</a> </li>\n<li>\n<a href=\"name-lookup#Name-lookup\">11.7.2 Name lookup, templates, and accessing members of base classes</a> </li>\n<li>\n<a href=\"temporaries#Temporaries\">11.7.3 Temporaries May Vanish Before You Expect</a> </li>\n<li>\n<a href=\"copy-assignment#Copy-Assignment\">11.7.4 Implicit Copy-Assignment for Virtual Bases</a> </li>\n</ul> </li>\n<li>\n<a href=\"non_002dbugs#Non_002dbugs\">11.8 Certain Changes We Don't Want to Make</a> </li>\n<li>\n<a href=\"warnings-and-errors#Warnings-and-Errors\">11.9 Warning Messages and Error Messages</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Bugs\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Bugs.html#Bugs\" id=\"toc_Bugs\">12 Reporting Bugs</a> <ul> <li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Bug-Criteria.html#Bug-Criteria\">12.1 Have You Found a Bug?</a> </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Bug-Reporting.html#Bug-Reporting\">12.2 How and where to Report Bugs</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Service\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Service.html#Service\" id=\"toc_Service\">13 How To Get Help with GCC</a> </li>\n<li>\n<a name=\"toc_Contributing\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Contributing.html#Contributing\" id=\"toc_Contributing\">14 Contributing to GCC Development</a> </li>\n<li>\n<a name=\"toc_Funding\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Funding.html#Funding\" id=\"toc_Funding\">Funding Free Software</a> </li>\n<li>\n<a name=\"toc_GNU-Project\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU-Project.html#GNU-Project\" id=\"toc_GNU-Project\">The GNU Project and GNU/Linux</a> </li>\n<li>\n<a name=\"toc_Copying\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Copying.html#Copying\" id=\"toc_Copying\">GNU General Public License</a> </li>\n<li>\n<a name=\"toc_GNU-Free-Documentation-License\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\" id=\"toc_GNU-Free-Documentation-License\">GNU Free Documentation License</a> <ul> <li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\">ADDENDUM: How to use this License for your documents</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Contributors\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Contributors.html#Contributors\" id=\"toc_Contributors\">Contributors to GCC</a> </li>\n<li>\n<a name=\"toc_Option-Index\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Option-Index.html#Option-Index\" id=\"toc_Option-Index\">Option Index</a> </li>\n<li>\n<a name=\"toc_Keyword-Index\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Keyword-Index.html#Keyword-Index\" id=\"toc_Keyword-Index\">Keyword Index</a> </li>\n</ul> </div>  <h1 class=\"unnumbered\" id=\"Top\">Introduction</h1> <p> This manual documents how to use the GNU compilers, as well as their features and incompatibilities, and how to report bugs. It corresponds to the compilers (GCC) version 4.9.3. The internals of the GNU compilers, including how to port them to new targets and some information about how to write front ends for new languages, are documented in a separate manual. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gccint/index.html#Top\">Introduction</a>. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"g_002b_002b-and-gcc#G_002b_002b-and-GCC\">G++ and GCC</a>: You can compile C or C++ programs. </li>\n<li>\n<a accesskey=\"2\" href=\"standards#Standards\">Standards</a>: Language standards supported by GCC. </li>\n<li>\n<a accesskey=\"3\" href=\"invoking-gcc#Invoking-GCC\">Invoking GCC</a>: Command options supported by ‘<code>gcc</code>’. </li>\n<li>\n<a accesskey=\"4\" href=\"c-implementation#C-Implementation\">C Implementation</a>: How GCC implements the ISO C specification. </li>\n<li>\n<a accesskey=\"5\" href=\"c_002b_002b-implementation#C_002b_002b-Implementation\">C++ Implementation</a>: How GCC implements the ISO C++ specification. </li>\n<li>\n<a accesskey=\"6\" href=\"c-extensions#C-Extensions\">C Extensions</a>: GNU extensions to the C language family. </li>\n<li>\n<a accesskey=\"7\" href=\"c_002b_002b-extensions#C_002b_002b-Extensions\">C++ Extensions</a>: GNU extensions to the C++ language. </li>\n<li>\n<a accesskey=\"8\" href=\"objective_002dc#Objective_002dC\">Objective-C</a>: GNU Objective-C runtime features. </li>\n<li>\n<a accesskey=\"9\" href=\"compatibility#Compatibility\">Compatibility</a>: Binary Compatibility </li>\n<li>\n<a href=\"gcov#Gcov\">Gcov</a>: <code>gcov</code>---a test coverage program. </li>\n<li>\n<a href=\"trouble#Trouble\">Trouble</a>: If you have trouble using GCC. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Bugs.html#Bugs\">Bugs</a>: How, why and where to report bugs. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Service.html#Service\">Service</a>: How To Get Help with GCC </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Contributing.html#Contributing\">Contributing</a>: How to contribute to testing and developing GCC. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Funding.html#Funding\">Funding</a>: How to help assure funding for free software. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU-Project.html#GNU-Project\">GNU Project</a>: The GNU Project and GNU/Linux. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Copying.html#Copying\">Copying</a>: GNU General Public License says how you can copy and share GCC. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\">GNU Free Documentation License</a>: How you can copy and share this manual. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Contributors.html#Contributors\">Contributors</a>: People who have contributed to GCC. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Option-Index.html#Option-Index\">Option Index</a>: Index to command line options. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Keyword-Index.html#Keyword-Index\">Keyword Index</a>: Index of concepts and symbol names. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/index.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/index.html</a>\n  </p>\n</div>\n","g_002b_002b-and-gcc":"<h1 class=\"settitle\">Using the GNU Compiler Collection (GCC)</h1>  <h2 class=\"chapter\" id=\"G_002b_002b-and-GCC\">1 Programming Languages Supported by GCC</h2> <p>GCC stands for “GNU Compiler Collection”. GCC is an integrated distribution of compilers for several major programming languages. These languages currently include C, C++, Objective-C, Objective-C++, Java, Fortran, Ada, and Go. </p>\n<p>The abbreviation GCC has multiple meanings in common use. The current official meaning is “GNU Compiler Collection”, which refers generically to the complete suite of tools. The name historically stood for “GNU C Compiler”, and this usage is still common when the emphasis is on compiling C programs. Finally, the name is also used when speaking of the language-independent component of GCC: code shared among the compilers for all supported languages. </p>\n<p>The language-independent component of GCC includes the majority of the optimizers, as well as the “back ends” that generate machine code for various processors. </p>\n<p>The part of a compiler that is specific to a particular language is called the “front end”. In addition to the front ends that are integrated components of GCC, there are several other front ends that are maintained separately. These support languages such as Pascal, Mercury, and COBOL. To use these, they must be built together with GCC proper. </p>\n<p>Most of the compilers for languages other than C have their own names. The C++ compiler is G++, the Ada compiler is GNAT, and so on. When we talk about compiling one of those languages, we might refer to that compiler by its own name, or as GCC. Either is correct. </p>\n<p>Historically, compilers for many languages, including C++ and Fortran, have been implemented as “preprocessors” which emit another high level language such as C. None of the compilers included in GCC are implemented this way; they all generate machine code directly. This sort of preprocessor should not be confused with the C preprocessor, which is an integral feature of the C, C++, Objective-C and Objective-C++ languages.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/G_002b_002b-and-GCC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/G_002b_002b-and-GCC.html</a>\n  </p>\n</div>\n","standards":"<h1 class=\"chapter\" id=\"Standards\">2 Language Standards Supported by GCC</h1> <p>For each language compiled by GCC for which there is a standard, GCC attempts to follow one or more versions of that standard, possibly with some exceptions, and possibly with some extensions. </p>\n<h2 class=\"section\">2.1 C language</h2> <p> GCC supports three versions of the C standard, although support for the most recent version is not yet complete. </p>\n<p>The original ANSI C standard (X3.159-1989) was ratified in 1989 and published in 1990. This standard was ratified as an ISO standard (ISO/IEC 9899:1990) later in 1990. There were no technical differences between these publications, although the sections of the ANSI standard were renumbered and became clauses in the ISO standard. This standard, in both its forms, is commonly known as C89, or occasionally as C90, from the dates of ratification. The ANSI standard, but not the ISO standard, also came with a Rationale document. To select this standard in GCC, use one of the options <code>-ansi</code>, <code>-std=c90</code> or <code>-std=iso9899:1990</code>; to obtain all the diagnostics required by the standard, you should also specify <code>-pedantic</code> (or <code>-pedantic-errors</code> if you want them to be errors rather than warnings). See <a href=\"c-dialect-options#C-Dialect-Options\">Options Controlling C Dialect</a>. </p>\n<p>Errors in the 1990 ISO C standard were corrected in two Technical Corrigenda published in 1994 and 1996. GCC does not support the uncorrected version. </p>\n<p>An amendment to the 1990 standard was published in 1995. This amendment added digraphs and <code>__STDC_VERSION__</code> to the language, but otherwise concerned the library. This amendment is commonly known as AMD1; the amended standard is sometimes known as C94 or C95. To select this standard in GCC, use the option <code>-std=iso9899:199409</code> (with, as for other standard versions, <code>-pedantic</code> to receive all required diagnostics). </p>\n<p>A new edition of the ISO C standard was published in 1999 as ISO/IEC 9899:1999, and is commonly known as C99. GCC has substantially complete support for this standard version; see <a href=\"http://gcc.gnu.org/c99status.html\">http://gcc.gnu.org/c99status.html</a> for details. To select this standard, use <code>-std=c99</code> or <code>-std=iso9899:1999</code>. (While in development, drafts of this standard version were referred to as C9X.) </p>\n<p>Errors in the 1999 ISO C standard were corrected in three Technical Corrigenda published in 2001, 2004 and 2007. GCC does not support the uncorrected version. </p>\n<p>A fourth version of the C standard, known as C11, was published in 2011 as ISO/IEC 9899:2011. GCC has substantially complete support for this standard, enabled with <code>-std=c11</code> or <code>-std=iso9899:2011</code>. (While in development, drafts of this standard version were referred to as C1X.) </p>\n<p>By default, GCC provides some extensions to the C language that on rare occasions conflict with the C standard. See <a href=\"c-extensions#C-Extensions\">Extensions to the C Language Family</a>. Use of the <code>-std</code> options listed above will disable these extensions where they conflict with the C standard version selected. You may also select an extended version of the C language explicitly with <code>-std=gnu90</code> (for C90 with GNU extensions), <code>-std=gnu99</code> (for C99 with GNU extensions) or <code>-std=gnu11</code> (for C11 with GNU extensions). The default, if no C language dialect options are given, is <code>-std=gnu90</code>; this is intended to change to <code>-std=gnu11</code> in some future release. Some features that are part of the C99 standard are accepted as extensions in C90 mode, and some features that are part of the C11 standard are accepted as extensions in C90 and C99 modes. </p>\n<p>The ISO C standard defines (in clause 4) two classes of conforming implementation. A conforming hosted implementation supports the whole standard including all the library facilities; a conforming freestanding implementation is only required to provide certain library facilities: those in <code>&lt;float.h&gt;</code>, <code>&lt;limits.h&gt;</code>, <code>&lt;stdarg.h&gt;</code>, and <code>&lt;stddef.h&gt;</code>; since AMD1, also those in <code>&lt;iso646.h&gt;</code>; since C99, also those in <code>&lt;stdbool.h&gt;</code> and <code>&lt;stdint.h&gt;</code>; and since C11, also those in <code>&lt;stdalign.h&gt;</code> and <code>&lt;stdnoreturn.h&gt;</code>. In addition, complex types, added in C99, are not required for freestanding implementations. The standard also defines two environments for programs, a freestanding environment, required of all implementations and which may not have library facilities beyond those required of freestanding implementations, where the handling of program startup and termination are implementation-defined, and a hosted environment, which is not required, in which all the library facilities are provided and startup is through a function <code>int main (void)</code> or <code>int main (int,\nchar *[])</code>. An OS kernel would be a freestanding environment; a program using the facilities of an operating system would normally be in a hosted implementation. </p>\n<p>GCC aims towards being usable as a conforming freestanding implementation, or as the compiler for a conforming hosted implementation. By default, it will act as the compiler for a hosted implementation, defining <code>__STDC_HOSTED__</code> as <code>1</code> and presuming that when the names of ISO C functions are used, they have the semantics defined in the standard. To make it act as a conforming freestanding implementation for a freestanding environment, use the option <code>-ffreestanding</code>; it will then define <code>__STDC_HOSTED__</code> to <code>0</code> and not make assumptions about the meanings of function names from the standard library, with exceptions noted below. To build an OS kernel, you may well still need to make your own arrangements for linking and startup. See <a href=\"c-dialect-options#C-Dialect-Options\">Options Controlling C Dialect</a>. </p>\n<p>GCC does not provide the library facilities required only of hosted implementations, nor yet all the facilities required by C99 of freestanding implementations on all platforms; to use the facilities of a hosted environment, you will need to find them elsewhere (for example, in the GNU C library). See <a href=\"standard-libraries#Standard-Libraries\">Standard Libraries</a>. </p>\n<p>Most of the compiler support routines used by GCC are present in <code>libgcc</code>, but there are a few exceptions. GCC requires the freestanding environment provide <code>memcpy</code>, <code>memmove</code>, <code>memset</code> and <code>memcmp</code>. Finally, if <code>__builtin_trap</code> is used, and the target does not implement the <code>trap</code> pattern, then GCC will emit a call to <code>abort</code>. </p>\n<p>For references to Technical Corrigenda, Rationale documents and information concerning the history of C that is available online, see <a href=\"http://gcc.gnu.org/readings.html\">http://gcc.gnu.org/readings.html</a> </p>\n<h2 class=\"section\">2.2 C++ language</h2> <p>GCC supports the original ISO C++ standard (1998) and contains experimental support for the second ISO C++ standard (2011). </p>\n<p>The original ISO C++ standard was published as the ISO standard (ISO/IEC 14882:1998) and amended by a Technical Corrigenda published in 2003 (ISO/IEC 14882:2003). These standards are referred to as C++98 and C++03, respectively. GCC implements the majority of C++98 (<code>export</code> is a notable exception) and most of the changes in C++03. To select this standard in GCC, use one of the options <code>-ansi</code>, <code>-std=c++98</code>, or <code>-std=c++03</code>; to obtain all the diagnostics required by the standard, you should also specify <code>-pedantic</code> (or <code>-pedantic-errors</code> if you want them to be errors rather than warnings). </p>\n<p>A revised ISO C++ standard was published in 2011 as ISO/IEC 14882:2011, and is referred to as C++11; before its publication it was commonly referred to as C++0x. C++11 contains several changes to the C++ language, most of which have been implemented in an experimental C++11 mode in GCC. For information regarding the C++11 features available in the experimental C++11 mode, see <a href=\"http://gcc.gnu.org/projects/cxx0x.html\">http://gcc.gnu.org/projects/cxx0x.html</a>. To select this standard in GCC, use the option <code>-std=c++11</code>; to obtain all the diagnostics required by the standard, you should also specify <code>-pedantic</code> (or <code>-pedantic-errors</code> if you want them to be errors rather than warnings). </p>\n<p>More information about the C++ standards is available on the ISO C++ committee's web site at <a href=\"http://www.open-std.org/jtc1/sc22/wg21/\">http://www.open-std.org/jtc1/sc22/wg21/</a>. </p>\n<p>By default, GCC provides some extensions to the C++ language; See <a href=\"c_002b_002b-dialect-options#C_002b_002b-Dialect-Options\">Options Controlling C++ Dialect</a>. Use of the <code>-std</code> option listed above will disable these extensions. You may also select an extended version of the C++ language explicitly with <code>-std=gnu++98</code> (for C++98 with GNU extensions) or <code>-std=gnu++11</code> (for C++11 with GNU extensions). The default, if no C++ language dialect options are given, is <code>-std=gnu++98</code>. </p>\n<h2 class=\"section\">2.3 Objective-C and Objective-C++ languages</h2> <p> GCC supports “traditional” Objective-C (also known as “Objective-C 1.0”) and contains support for the Objective-C exception and synchronization syntax. It has also support for a number of “Objective-C 2.0” language extensions, including properties, fast enumeration (only for Objective-C), method attributes and the @optional and @required keywords in protocols. GCC supports Objective-C++ and features available in Objective-C are also available in Objective-C++. </p>\n<p>GCC by default uses the GNU Objective-C runtime library, which is part of GCC and is not the same as the Apple/NeXT Objective-C runtime library used on Apple systems. There are a number of differences documented in this manual. The options <code>-fgnu-runtime</code> and <code>-fnext-runtime</code> allow you to switch between producing output that works with the GNU Objective-C runtime library and output that works with the Apple/NeXT Objective-C runtime library. </p>\n<p>There is no formal written standard for Objective-C or Objective-C++. The authoritative manual on traditional Objective-C (1.0) is “Object-Oriented Programming and the Objective-C Language”, available at a number of web sites: </p>\n<ul> <li>\n<a href=\"http://www.gnustep.org/resources/documentation/ObjectivCBook.pdf\">http://www.gnustep.org/resources/documentation/ObjectivCBook.pdf</a> is the original NeXTstep document; </li>\n<li>\n<a href=\"http://objc.toodarkpark.net\">http://objc.toodarkpark.net</a> is the same document in another format; </li>\n<li>\n<a href=\"http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/\">http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/</a> has an updated version but make sure you search for “Object Oriented Programming and the Objective-C Programming Language 1.0”, not documentation on the newer “Objective-C 2.0” language </li>\n</ul> <p>The Objective-C exception and synchronization syntax (that is, the keywords @try, @throw, @catch, @finally and @synchronized) is supported by GCC and is enabled with the option <code>-fobjc-exceptions</code>. The syntax is briefly documented in this manual and in the Objective-C 2.0 manuals from Apple. </p>\n<p>The Objective-C 2.0 language extensions and features are automatically enabled; they include properties (via the @property, @synthesize and @dynamic keywords), fast enumeration (not available in Objective-C++), attributes for methods (such as deprecated, noreturn, sentinel, format), the unused attribute for method arguments, the @package keyword for instance variables and the @optional and @required keywords in protocols. You can disable all these Objective-C 2.0 language extensions with the option <code>-fobjc-std=objc1</code>, which causes the compiler to recognize the same Objective-C language syntax recognized by GCC 4.0, and to produce an error if one of the new features is used. </p>\n<p>GCC has currently no support for non-fragile instance variables. </p>\n<p>The authoritative manual on Objective-C 2.0 is available from Apple: </p>\n<ul> <li>\n<a href=\"http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/\">http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/</a> </li>\n</ul> <p>For more information concerning the history of Objective-C that is available online, see <a href=\"http://gcc.gnu.org/readings.html\">http://gcc.gnu.org/readings.html</a> </p>\n<h2 class=\"section\">2.4 Go language</h2> <p>As of the GCC 4.7.1 release, GCC supports the Go 1 language standard, described at <a href=\"http://golang.org/doc/go1.html\">http://golang.org/doc/go1.html</a>. </p>\n<h2 class=\"section\">2.5 References for other languages</h2> <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gnat_rm/index.html#Top\">GNAT Reference Manual</a>, for information on standard conformance and compatibility of the Ada compiler. </p>\n<p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Standards.html#Standards\">Standards</a>, for details of standards supported by GNU Fortran. </p>\n<p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcj/Compatibility.html#Compatibility\">Compatibility with the Java Platform</a>, for details of compatibility between <code>gcj</code> and the Java Platform.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Standards.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Standards.html</a>\n  </p>\n</div>\n","invoking-gcc":"<h1 class=\"chapter\" id=\"Invoking-GCC\">3 GCC Command Options</h1> <p>  When you invoke GCC, it normally does preprocessing, compilation, assembly and linking. The “overall options” allow you to stop this process at an intermediate stage. For example, the <code>-c</code> option says not to run the linker. Then the output consists of object files output by the assembler. </p>\n<p>Other options are passed on to one stage of processing. Some options control the preprocessor and others the compiler itself. Yet other options control the assembler and linker; most of these are not documented here, since you rarely need to use any of them. </p>\n<p>Most of the command-line options that you can use with GCC are useful for C programs; when an option is only useful with another language (usually C++), the explanation says so explicitly. If the description for a particular option does not mention a source language, you can use that option with all supported languages. </p>\n<p>See <a href=\"invoking-g_002b_002b#Invoking-G_002b_002b\">Compiling C++ Programs</a>, for a summary of special options for compiling C++ programs. </p>\n<p>The <code>gcc</code> program accepts options and file names as operands. Many options have multi-letter names; therefore multiple single-letter options may <em>not</em> be grouped: <code>-dv</code> is very different from ‘<code>-d -v</code>’. </p>\n<p>You can mix options and other arguments. For the most part, the order you use doesn't matter. Order does matter when you use several options of the same kind; for example, if you specify <code>-L</code> more than once, the directories are searched in the order specified. Also, the placement of the <code>-l</code> option is significant. </p>\n<p>Many options have long names starting with ‘<code>-f</code>’ or with ‘<code>-W</code>’—for example, <code>-fmove-loop-invariants</code>, <code>-Wformat</code> and so on. Most of these have both positive and negative forms; the negative form of <code>-ffoo</code> is <code>-fno-foo</code>. This manual documents only one of these two forms, whichever one is not the default.  </p>\n<p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Option-Index.html#Option-Index\">Option Index</a>, for an index to GCC's options. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"option-summary#Option-Summary\">Option Summary</a>: Brief list of all options, without explanations. </li>\n<li>\n<a accesskey=\"2\" href=\"overall-options#Overall-Options\">Overall Options</a>: Controlling the kind of output: an executable, object files, assembler files, or preprocessed source. </li>\n<li>\n<a accesskey=\"3\" href=\"invoking-g_002b_002b#Invoking-G_002b_002b\">Invoking G++</a>: Compiling C++ programs. </li>\n<li>\n<a accesskey=\"4\" href=\"c-dialect-options#C-Dialect-Options\">C Dialect Options</a>: Controlling the variant of C language compiled. </li>\n<li>\n<a accesskey=\"5\" href=\"c_002b_002b-dialect-options#C_002b_002b-Dialect-Options\">C++ Dialect Options</a>: Variations on C++. </li>\n<li>\n<a accesskey=\"6\" href=\"objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options\">Objective-C and Objective-C++ Dialect Options</a>: Variations on Objective-C and Objective-C++. </li>\n<li>\n<a accesskey=\"7\" href=\"language-independent-options#Language-Independent-Options\">Language Independent Options</a>: Controlling how diagnostics should be formatted. </li>\n<li>\n<a accesskey=\"8\" href=\"warning-options#Warning-Options\">Warning Options</a>: How picky should the compiler be? </li>\n<li>\n<a accesskey=\"9\" href=\"debugging-options#Debugging-Options\">Debugging Options</a>: Symbol tables, measurements, and debugging dumps. </li>\n<li>\n<a href=\"optimize-options#Optimize-Options\">Optimize Options</a>: How much optimization? </li>\n<li>\n<a href=\"preprocessor-options#Preprocessor-Options\">Preprocessor Options</a>: Controlling header files and macro definitions. Also, getting dependency information for Make. </li>\n<li>\n<a href=\"assembler-options#Assembler-Options\">Assembler Options</a>: Passing options to the assembler. </li>\n<li>\n<a href=\"link-options#Link-Options\">Link Options</a>: Specifying libraries and so on. </li>\n<li>\n<a href=\"directory-options#Directory-Options\">Directory Options</a>: Where to find header files and libraries. Where to find the compiler executable files. </li>\n<li>\n<a href=\"spec-files#Spec-Files\">Spec Files</a>: How to pass switches to sub-processes. </li>\n<li>\n<a href=\"target-options#Target-Options\">Target Options</a>: Running a cross-compiler, or an old version of GCC. </li>\n<li>\n<a href=\"submodel-options#Submodel-Options\">Submodel Options</a>: Specifying minor hardware or convention variations, such as 68010 vs 68020. </li>\n<li>\n<a href=\"code-gen-options#Code-Gen-Options\">Code Gen Options</a>: Specifying conventions for function calls, data layout and register usage. </li>\n<li>\n<a href=\"environment-variables#Environment-Variables\">Environment Variables</a>: Env vars that affect GCC. </li>\n<li>\n<a href=\"precompiled-headers#Precompiled-Headers\">Precompiled Headers</a>: Compiling a header once, and using it many times. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Invoking-GCC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Invoking-GCC.html</a>\n  </p>\n</div>\n","option-summary":"<h1 class=\"section\" id=\"Option-Summary\">3.1 Option Summary</h1> <p>Here is a summary of all the options, grouped by type. Explanations are in the following sections. </p>\n<dl> <dt>Overall Options</dt>\n<dd>See <a href=\"overall-options#Overall-Options\">Options Controlling the Kind of Output</a>. <pre class=\"smallexample\">-c  -S  -E  -o <var>file</var>  -no-canonical-prefixes  \n-pipe  -pass-exit-codes  \n-x <var>language</var>  -v  -###  --help<span class=\"roman\">[</span>=<var>class</var><span class=\"roman\">[</span>,...<span class=\"roman\">]]</span>  --target-help  \n--version -wrapper @<var>file</var> -fplugin=<var>file</var> -fplugin-arg-<var>name</var>=<var>arg</var>  \n-fdump-ada-spec<span class=\"roman\">[</span>-slim<span class=\"roman\">]</span> -fada-spec-parent=<var>unit</var> -fdump-go-spec=<var>file</var></pre> </dd>\n<dt>C Language Options</dt>\n<dd>See <a href=\"c-dialect-options#C-Dialect-Options\">Options Controlling C Dialect</a>. <pre class=\"smallexample\">-ansi  -std=<var>standard</var>  -fgnu89-inline \n-aux-info <var>filename</var> -fallow-parameterless-variadic-functions \n-fno-asm  -fno-builtin  -fno-builtin-<var>function</var> \n-fhosted  -ffreestanding -fopenmp -fopenmp-simd -fms-extensions \n-fplan9-extensions -trigraphs  -traditional  -traditional-cpp \n-fallow-single-precision  -fcond-mismatch -flax-vector-conversions \n-fsigned-bitfields  -fsigned-char \n-funsigned-bitfields  -funsigned-char</pre> </dd>\n<dt>C++ Language Options</dt>\n<dd>See <a href=\"c_002b_002b-dialect-options#C_002b_002b-Dialect-Options\">Options Controlling C++ Dialect</a>. <pre class=\"smallexample\">-fabi-version=<var>n</var>  -fno-access-control  -fcheck-new \n-fconstexpr-depth=<var>n</var>  -ffriend-injection \n-fno-elide-constructors \n-fno-enforce-eh-specs \n-ffor-scope  -fno-for-scope  -fno-gnu-keywords \n-fno-implicit-templates \n-fno-implicit-inline-templates \n-fno-implement-inlines  -fms-extensions \n-fno-nonansi-builtins  -fnothrow-opt  -fno-operator-names \n-fno-optional-diags  -fpermissive \n-fno-pretty-templates \n-frepo  -fno-rtti  -fstats  -ftemplate-backtrace-limit=<var>n</var> \n-ftemplate-depth=<var>n</var> \n-fno-threadsafe-statics -fuse-cxa-atexit  -fno-weak  -nostdinc++ \n-fvisibility-inlines-hidden \n-fvtable-verify=<var>std|preinit|none</var> \n-fvtv-counts -fvtv-debug \n-fvisibility-ms-compat \n-fext-numeric-literals \n-Wabi  -Wconversion-null  -Wctor-dtor-privacy \n-Wdelete-non-virtual-dtor -Wliteral-suffix -Wnarrowing \n-Wnoexcept -Wnon-virtual-dtor  -Wreorder \n-Weffc++  -Wstrict-null-sentinel \n-Wno-non-template-friend  -Wold-style-cast \n-Woverloaded-virtual  -Wno-pmf-conversions \n-Wsign-promo</pre> </dd>\n<dt>Objective-C and Objective-C++ Language Options</dt>\n<dd>See <a href=\"objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options\">Options Controlling Objective-C and Objective-C++ Dialects</a>. <pre class=\"smallexample\">-fconstant-string-class=<var>class-name</var> \n-fgnu-runtime  -fnext-runtime \n-fno-nil-receivers \n-fobjc-abi-version=<var>n</var> \n-fobjc-call-cxx-cdtors \n-fobjc-direct-dispatch \n-fobjc-exceptions \n-fobjc-gc \n-fobjc-nilcheck \n-fobjc-std=objc1 \n-freplace-objc-classes \n-fzero-link \n-gen-decls \n-Wassign-intercept \n-Wno-protocol  -Wselector \n-Wstrict-selector-match \n-Wundeclared-selector</pre> </dd>\n<dt>Language Independent Options</dt>\n<dd>See <a href=\"language-independent-options#Language-Independent-Options\">Options to Control Diagnostic Messages Formatting</a>. <pre class=\"smallexample\">-fmessage-length=<var>n</var>  \n-fdiagnostics-show-location=<span class=\"roman\">[</span>once<span class=\"roman\">|</span>every-line<span class=\"roman\">]</span>  \n-fdiagnostics-color=<span class=\"roman\">[</span>auto<span class=\"roman\">|</span>never<span class=\"roman\">|</span>always<span class=\"roman\">]</span>  \n-fno-diagnostics-show-option -fno-diagnostics-show-caret</pre> </dd>\n<dt>Warning Options</dt>\n<dd>See <a href=\"warning-options#Warning-Options\">Options to Request or Suppress Warnings</a>. <pre class=\"smallexample\">-fsyntax-only  -fmax-errors=<var>n</var>  -Wpedantic \n-pedantic-errors \n-w  -Wextra  -Wall  -Waddress  -Waggregate-return  \n-Waggressive-loop-optimizations -Warray-bounds \n-Wno-attributes -Wno-builtin-macro-redefined \n-Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  \n-Wchar-subscripts -Wclobbered  -Wcomment -Wconditionally-supported  \n-Wconversion -Wcoverage-mismatch -Wdate-time -Wdelete-incomplete -Wno-cpp  \n-Wno-deprecated -Wno-deprecated-declarations -Wdisabled-optimization  \n-Wno-div-by-zero -Wdouble-promotion -Wempty-body  -Wenum-compare \n-Wno-endif-labels -Werror  -Werror=* \n-Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 \n-Wno-format-contains-nul -Wno-format-extra-args -Wformat-nonliteral \n-Wformat-security  -Wformat-y2k \n-Wframe-larger-than=<var>len</var> -Wno-free-nonheap-object -Wjump-misses-init \n-Wignored-qualifiers \n-Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int \n-Winit-self  -Winline -Wmaybe-uninitialized \n-Wno-int-to-pointer-cast -Wno-invalid-offsetof \n-Winvalid-pch -Wlarger-than=<var>len</var>  -Wunsafe-loop-optimizations \n-Wlogical-op -Wlong-long \n-Wmain -Wmaybe-uninitialized -Wmissing-braces  -Wmissing-field-initializers \n-Wmissing-include-dirs \n-Wno-multichar  -Wnonnull  -Wno-overflow -Wopenmp-simd \n-Woverlength-strings  -Wpacked  -Wpacked-bitfield-compat  -Wpadded \n-Wparentheses  -Wpedantic-ms-format -Wno-pedantic-ms-format \n-Wpointer-arith  -Wno-pointer-to-int-cast \n-Wredundant-decls  -Wno-return-local-addr \n-Wreturn-type  -Wsequence-point  -Wshadow \n-Wsign-compare  -Wsign-conversion -Wfloat-conversion \n-Wsizeof-pointer-memaccess \n-Wstack-protector -Wstack-usage=<var>len</var> -Wstrict-aliasing \n-Wstrict-aliasing=n  -Wstrict-overflow -Wstrict-overflow=<var>n</var> \n-Wsuggest-attribute=<span class=\"roman\">[</span>pure<span class=\"roman\">|</span>const<span class=\"roman\">|</span>noreturn<span class=\"roman\">|</span>format<span class=\"roman\">]</span> \n-Wmissing-format-attribute \n-Wswitch  -Wswitch-default  -Wswitch-enum -Wsync-nand \n-Wsystem-headers  -Wtrampolines  -Wtrigraphs  -Wtype-limits  -Wundef \n-Wuninitialized  -Wunknown-pragmas  -Wno-pragmas \n-Wunsuffixed-float-constants  -Wunused  -Wunused-function \n-Wunused-label  -Wunused-local-typedefs -Wunused-parameter \n-Wno-unused-result -Wunused-value  -Wunused-variable \n-Wunused-but-set-parameter -Wunused-but-set-variable \n-Wuseless-cast -Wvariadic-macros -Wvector-operation-performance \n-Wvla -Wvolatile-register-var  -Wwrite-strings -Wzero-as-null-pointer-constant</pre> </dd>\n<dt>C and Objective-C-only Warning Options</dt>\n<dd> <pre class=\"smallexample\">-Wbad-function-cast  -Wmissing-declarations \n-Wmissing-parameter-type  -Wmissing-prototypes  -Wnested-externs \n-Wold-style-declaration  -Wold-style-definition \n-Wstrict-prototypes  -Wtraditional  -Wtraditional-conversion \n-Wdeclaration-after-statement -Wpointer-sign</pre> </dd>\n<dt>Debugging Options</dt>\n<dd>See <a href=\"debugging-options#Debugging-Options\">Options for Debugging Your Program or GCC</a>. <pre class=\"smallexample\">-d<var>letters</var>  -dumpspecs  -dumpmachine  -dumpversion \n-fsanitize=<var>style</var> \n-fdbg-cnt-list -fdbg-cnt=<var>counter-value-list</var> \n-fdisable-ipa-<var>pass_name</var> \n-fdisable-rtl-<var>pass_name</var> \n-fdisable-rtl-<var>pass-name</var>=<var>range-list</var> \n-fdisable-tree-<var>pass_name</var> \n-fdisable-tree-<var>pass-name</var>=<var>range-list</var> \n-fdump-noaddr -fdump-unnumbered -fdump-unnumbered-links \n-fdump-translation-unit<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-class-hierarchy<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-ipa-all -fdump-ipa-cgraph -fdump-ipa-inline \n-fdump-passes \n-fdump-statistics \n-fdump-tree-all \n-fdump-tree-original<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span>  \n-fdump-tree-optimized<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-cfg -fdump-tree-alias \n-fdump-tree-ch \n-fdump-tree-ssa<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> -fdump-tree-pre<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-ccp<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> -fdump-tree-dce<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-gimple<span class=\"roman\">[</span>-raw<span class=\"roman\">]</span> \n-fdump-tree-dom<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-dse<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-phiprop<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-phiopt<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-forwprop<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-copyrename<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-nrv -fdump-tree-vect \n-fdump-tree-sink \n-fdump-tree-sra<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-forwprop<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-fre<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-vtable-verify \n-fdump-tree-vrp<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-tree-storeccp<span class=\"roman\">[</span>-<var>n</var><span class=\"roman\">]</span> \n-fdump-final-insns=<var>file</var> \n-fcompare-debug<span class=\"roman\">[</span>=<var>opts</var><span class=\"roman\">]</span>  -fcompare-debug-second \n-feliminate-dwarf2-dups -fno-eliminate-unused-debug-types \n-feliminate-unused-debug-symbols -femit-class-debug-always \n-fenable-<var>kind</var>-<var>pass</var> \n-fenable-<var>kind</var>-<var>pass</var>=<var>range-list</var> \n-fdebug-types-section -fmem-report-wpa \n-fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs \n-fopt-info \n-fopt-info-<var>options</var><span class=\"roman\">[</span>=<var>file</var><span class=\"roman\">]</span> \n-frandom-seed=<var>string</var> -fsched-verbose=<var>n</var> \n-fsel-sched-verbose -fsel-sched-dump-cfg -fsel-sched-pipelining-verbose \n-fstack-usage  -ftest-coverage  -ftime-report -fvar-tracking \n-fvar-tracking-assignments  -fvar-tracking-assignments-toggle \n-g  -g<var>level</var>  -gtoggle  -gcoff  -gdwarf-<var>version</var> \n-ggdb  -grecord-gcc-switches  -gno-record-gcc-switches \n-gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf \n-gvms  -gxcoff  -gxcoff+ \n-fno-merge-debug-strings -fno-dwarf2-cfi-asm \n-fdebug-prefix-map=<var>old</var>=<var>new</var> \n-femit-struct-debug-baseonly -femit-struct-debug-reduced \n-femit-struct-debug-detailed<span class=\"roman\">[</span>=<var>spec-list</var><span class=\"roman\">]</span> \n-p  -pg  -print-file-name=<var>library</var>  -print-libgcc-file-name \n-print-multi-directory  -print-multi-lib  -print-multi-os-directory \n-print-prog-name=<var>program</var>  -print-search-dirs  -Q \n-print-sysroot -print-sysroot-headers-suffix \n-save-temps -save-temps=cwd -save-temps=obj -time<span class=\"roman\">[</span>=<var>file</var><span class=\"roman\">]</span></pre> </dd>\n<dt>Optimization Options</dt>\n<dd>See <a href=\"optimize-options#Optimize-Options\">Options that Control Optimization</a>. <pre class=\"smallexample\">-faggressive-loop-optimizations -falign-functions[=<var>n</var>] \n-falign-jumps[=<var>n</var>] \n-falign-labels[=<var>n</var>] -falign-loops[=<var>n</var>] \n-fassociative-math -fauto-inc-dec -fbranch-probabilities \n-fbranch-target-load-optimize -fbranch-target-load-optimize2 \n-fbtr-bb-exclusive -fcaller-saves \n-fcheck-data-deps -fcombine-stack-adjustments -fconserve-stack \n-fcompare-elim -fcprop-registers -fcrossjumping \n-fcse-follow-jumps -fcse-skip-blocks -fcx-fortran-rules \n-fcx-limited-range \n-fdata-sections -fdce -fdelayed-branch \n-fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively -fdse \n-fearly-inlining -fipa-sra -fexpensive-optimizations -ffat-lto-objects \n-ffast-math -ffinite-math-only -ffloat-store -fexcess-precision=<var>style</var> \n-fforward-propagate -ffp-contract=<var>style</var> -ffunction-sections \n-fgcse -fgcse-after-reload -fgcse-las -fgcse-lm -fgraphite-identity \n-fgcse-sm -fhoist-adjacent-loads -fif-conversion \n-fif-conversion2 -findirect-inlining \n-finline-functions -finline-functions-called-once -finline-limit=<var>n</var> \n-finline-small-functions -fipa-cp -fipa-cp-clone \n-fipa-pta -fipa-profile -fipa-pure-const -fipa-reference \n-fira-algorithm=<var>algorithm</var> \n-fira-region=<var>region</var> -fira-hoist-pressure \n-fira-loop-pressure -fno-ira-share-save-slots \n-fno-ira-share-spill-slots -fira-verbose=<var>n</var> \n-fisolate-erroneous-paths-dereference -fisolate-erroneous-paths-attribute\n-fivopts -fkeep-inline-functions -fkeep-static-consts -flive-range-shrinkage \n-floop-block -floop-interchange -floop-strip-mine -floop-nest-optimize \n-floop-parallelize-all -flto -flto-compression-level \n-flto-partition=<var>alg</var> -flto-report -flto-report-wpa -fmerge-all-constants \n-fmerge-constants -fmodulo-sched -fmodulo-sched-allow-regmoves \n-fmove-loop-invariants -fno-branch-count-reg \n-fno-defer-pop -fno-function-cse -fno-guess-branch-probability \n-fno-inline -fno-math-errno -fno-peephole -fno-peephole2 \n-fno-sched-interblock -fno-sched-spec -fno-signed-zeros \n-fno-toplevel-reorder -fno-trapping-math -fno-zero-initialized-in-bss \n-fomit-frame-pointer -foptimize-sibling-calls \n-fpartial-inlining -fpeel-loops -fpredictive-commoning \n-fprefetch-loop-arrays -fprofile-report \n-fprofile-correction -fprofile-dir=<var>path</var> -fprofile-generate \n-fprofile-generate=<var>path</var> \n-fprofile-use -fprofile-use=<var>path</var> -fprofile-values -fprofile-reorder-functions \n-freciprocal-math -free -frename-registers -freorder-blocks \n-freorder-blocks-and-partition -freorder-functions \n-frerun-cse-after-loop -freschedule-modulo-scheduled-loops \n-frounding-math -fsched2-use-superblocks -fsched-pressure \n-fsched-spec-load -fsched-spec-load-dangerous \n-fsched-stalled-insns-dep[=<var>n</var>] -fsched-stalled-insns[=<var>n</var>] \n-fsched-group-heuristic -fsched-critical-path-heuristic \n-fsched-spec-insn-heuristic -fsched-rank-heuristic \n-fsched-last-insn-heuristic -fsched-dep-count-heuristic \n-fschedule-insns -fschedule-insns2 -fsection-anchors \n-fselective-scheduling -fselective-scheduling2 \n-fsel-sched-pipelining -fsel-sched-pipelining-outer-loops \n-fshrink-wrap -fsignaling-nans -fsingle-precision-constant \n-fsplit-ivs-in-unroller -fsplit-wide-types -fstack-protector \n-fstack-protector-all -fstack-protector-strong -fstrict-aliasing \n-fstrict-overflow -fthread-jumps -ftracer -ftree-bit-ccp \n-ftree-builtin-call-dce -ftree-ccp -ftree-ch \n-ftree-coalesce-inline-vars -ftree-coalesce-vars -ftree-copy-prop \n-ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse \n-ftree-forwprop -ftree-fre -ftree-loop-if-convert \n-ftree-loop-if-convert-stores -ftree-loop-im \n-ftree-phiprop -ftree-loop-distribution -ftree-loop-distribute-patterns \n-ftree-loop-ivcanon -ftree-loop-linear -ftree-loop-optimize \n-ftree-loop-vectorize \n-ftree-parallelize-loops=<var>n</var> -ftree-pre -ftree-partial-pre -ftree-pta \n-ftree-reassoc -ftree-sink -ftree-slsr -ftree-sra \n-ftree-switch-conversion -ftree-tail-merge -ftree-ter \n-ftree-vectorize -ftree-vrp \n-funit-at-a-time -funroll-all-loops -funroll-loops \n-funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops \n-fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb \n-fwhole-program -fwpa -fuse-ld=<var>linker</var> -fuse-linker-plugin \n--param <var>name</var>=<var>value</var>\n-O  -O0  -O1  -O2  -O3  -Os -Ofast -Og</pre> </dd>\n<dt>Preprocessor Options</dt>\n<dd>See <a href=\"preprocessor-options#Preprocessor-Options\">Options Controlling the Preprocessor</a>. <pre class=\"smallexample\">-A<var>question</var>=<var>answer</var> \n-A-<var>question</var><span class=\"roman\">[</span>=<var>answer</var><span class=\"roman\">]</span> \n-C  -dD  -dI  -dM  -dN \n-D<var>macro</var><span class=\"roman\">[</span>=<var>defn</var><span class=\"roman\">]</span>  -E  -H \n-idirafter <var>dir</var> \n-include <var>file</var>  -imacros <var>file</var> \n-iprefix <var>file</var>  -iwithprefix <var>dir</var> \n-iwithprefixbefore <var>dir</var>  -isystem <var>dir</var> \n-imultilib <var>dir</var> -isysroot <var>dir</var> \n-M  -MM  -MF  -MG  -MP  -MQ  -MT  -nostdinc  \n-P  -fdebug-cpp -ftrack-macro-expansion -fworking-directory \n-remap -trigraphs  -undef  -U<var>macro</var>  \n-Wp,<var>option</var> -Xpreprocessor <var>option</var> -no-integrated-cpp</pre> </dd>\n<dt>Assembler Option</dt>\n<dd>See <a href=\"assembler-options#Assembler-Options\">Passing Options to the Assembler</a>. <pre class=\"smallexample\">-Wa,<var>option</var>  -Xassembler <var>option</var></pre> </dd>\n<dt>Linker Options</dt>\n<dd>See <a href=\"link-options#Link-Options\">Options for Linking</a>. <pre class=\"smallexample\"><var>object-file-name</var>  -l<var>library</var> \n-nostartfiles  -nodefaultlibs  -nostdlib -pie -rdynamic \n-s  -static -static-libgcc -static-libstdc++ \n-static-libasan -static-libtsan -static-liblsan -static-libubsan \n-shared -shared-libgcc  -symbolic \n-T <var>script</var>  -Wl,<var>option</var>  -Xlinker <var>option</var> \n-u <var>symbol</var></pre> </dd>\n<dt>Directory Options</dt>\n<dd>See <a href=\"directory-options#Directory-Options\">Options for Directory Search</a>. <pre class=\"smallexample\">-B<var>prefix</var> -I<var>dir</var> -iplugindir=<var>dir</var> \n-iquote<var>dir</var> -L<var>dir</var> -specs=<var>file</var> -I- \n--sysroot=<var>dir</var> --no-sysroot-suffix</pre> </dd>\n<dt>Machine Dependent Options</dt>\n<dd>See <a href=\"submodel-options#Submodel-Options\">Hardware Models and Configurations</a>.    <p><em>AArch64 Options</em> </p>\n<pre class=\"smallexample\">-mabi=<var>name</var>  -mbig-endian  -mlittle-endian \n-mgeneral-regs-only \n-mcmodel=tiny  -mcmodel=small  -mcmodel=large \n-mstrict-align \n-momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer \n-mtls-dialect=desc  -mtls-dialect=traditional \n-mfix-cortex-a53-835769  -mno-fix-cortex-a53-835769 \n-mfix-cortex-a53-843419  -mno-fix-cortex-a53-843419 \n-march=<var>name</var>  -mcpu=<var>name</var>  -mtune=<var>name</var></pre> <p><em>Adapteva Epiphany Options</em> </p>\n<pre class=\"smallexample\">-mhalf-reg-file -mprefer-short-insn-regs \n-mbranch-cost=<var>num</var> -mcmove -mnops=<var>num</var> -msoft-cmpsf \n-msplit-lohi -mpost-inc -mpost-modify -mstack-offset=<var>num</var> \n-mround-nearest -mlong-calls -mshort-calls -msmall16 \n-mfp-mode=<var>mode</var> -mvect-double -max-vect-align=<var>num</var> \n-msplit-vecmove-early -m1reg-<var>reg</var></pre> <p><em>ARC Options</em> </p>\n<pre class=\"smallexample\">-mbarrel-shifter \n-mcpu=<var>cpu</var> -mA6 -mARC600 -mA7 -mARC700 \n-mdpfp -mdpfp-compact -mdpfp-fast -mno-dpfp-lrsr \n-mea -mno-mpy -mmul32x16 -mmul64 \n-mnorm -mspfp -mspfp-compact -mspfp-fast -msimd -msoft-float -mswap \n-mcrc -mdsp-packa -mdvbf -mlock -mmac-d16 -mmac-24 -mrtsc -mswape \n-mtelephony -mxy -misize -mannotate-align -marclinux -marclinux_prof \n-mepilogue-cfi -mlong-calls -mmedium-calls -msdata \n-mucb-mcount -mvolatile-cache \n-malign-call -mauto-modify-reg -mbbit-peephole -mno-brcc \n-mcase-vector-pcrel -mcompact-casesi -mno-cond-exec -mearly-cbranchsi \n-mexpand-adddi -mindexed-loads -mlra -mlra-priority-none \n-mlra-priority-compact mlra-priority-noncompact -mno-millicode \n-mmixed-code -mq-class -mRcq -mRcw -msize-level=<var>level</var> \n-mtune=<var>cpu</var> -mmultcost=<var>num</var> -munalign-prob-threshold=<var>probability</var></pre> <p><em>ARM Options</em> </p>\n<pre class=\"smallexample\">-mapcs-frame  -mno-apcs-frame \n-mabi=<var>name</var> \n-mapcs-stack-check  -mno-apcs-stack-check \n-mapcs-float  -mno-apcs-float \n-mapcs-reentrant  -mno-apcs-reentrant \n-msched-prolog  -mno-sched-prolog \n-mlittle-endian  -mbig-endian  -mwords-little-endian \n-mfloat-abi=<var>name</var> \n-mfp16-format=<var>name</var>\n-mthumb-interwork  -mno-thumb-interwork \n-mcpu=<var>name</var>  -march=<var>name</var>  -mfpu=<var>name</var>  \n-mstructure-size-boundary=<var>n</var> \n-mabort-on-noreturn \n-mlong-calls  -mno-long-calls \n-msingle-pic-base  -mno-single-pic-base \n-mpic-register=<var>reg</var> \n-mnop-fun-dllimport \n-mpoke-function-name \n-mthumb  -marm \n-mtpcs-frame  -mtpcs-leaf-frame \n-mcaller-super-interworking  -mcallee-super-interworking \n-mtp=<var>name</var> -mtls-dialect=<var>dialect</var> \n-mword-relocations \n-mfix-cortex-m3-ldrd \n-munaligned-access \n-mneon-for-64bits \n-mslow-flash-data \n-mrestrict-it</pre> <p><em>AVR Options</em> </p>\n<pre class=\"smallexample\">-mmcu=<var>mcu</var> -maccumulate-args -mbranch-cost=<var>cost</var> \n-mcall-prologues -mint8 -mno-interrupts -mrelax \n-mstrict-X -mtiny-stack -Waddr-space-convert</pre> <p><em>Blackfin Options</em> </p>\n<pre class=\"smallexample\">-mcpu=<var>cpu</var><span class=\"roman\">[</span>-<var>sirevision</var><span class=\"roman\">]</span> \n-msim -momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer \n-mspecld-anomaly  -mno-specld-anomaly  -mcsync-anomaly  -mno-csync-anomaly \n-mlow-64k -mno-low64k  -mstack-check-l1  -mid-shared-library \n-mno-id-shared-library  -mshared-library-id=<var>n</var> \n-mleaf-id-shared-library  -mno-leaf-id-shared-library \n-msep-data  -mno-sep-data  -mlong-calls  -mno-long-calls \n-mfast-fp -minline-plt -mmulticore  -mcorea  -mcoreb  -msdram \n-micplb</pre> <p><em>C6X Options</em> </p>\n<pre class=\"smallexample\">-mbig-endian  -mlittle-endian -march=<var>cpu</var> \n-msim -msdata=<var>sdata-type</var></pre> <p><em>CRIS Options</em> </p>\n<pre class=\"smallexample\">-mcpu=<var>cpu</var>  -march=<var>cpu</var>  -mtune=<var>cpu</var> \n-mmax-stack-frame=<var>n</var>  -melinux-stacksize=<var>n</var> \n-metrax4  -metrax100  -mpdebug  -mcc-init  -mno-side-effects \n-mstack-align  -mdata-align  -mconst-align \n-m32-bit  -m16-bit  -m8-bit  -mno-prologue-epilogue  -mno-gotplt \n-melf  -maout  -melinux  -mlinux  -sim  -sim2 \n-mmul-bug-workaround  -mno-mul-bug-workaround</pre> <p><em>CR16 Options</em> </p>\n<pre class=\"smallexample\">-mmac \n-mcr16cplus -mcr16c \n-msim -mint32 -mbit-ops\n-mdata-model=<var>model</var></pre> <p><em>Darwin Options</em> </p>\n<pre class=\"smallexample\">-all_load  -allowable_client  -arch  -arch_errors_fatal \n-arch_only  -bind_at_load  -bundle  -bundle_loader \n-client_name  -compatibility_version  -current_version \n-dead_strip \n-dependency-file  -dylib_file  -dylinker_install_name \n-dynamic  -dynamiclib  -exported_symbols_list \n-filelist  -flat_namespace  -force_cpusubtype_ALL \n-force_flat_namespace  -headerpad_max_install_names \n-iframework \n-image_base  -init  -install_name  -keep_private_externs \n-multi_module  -multiply_defined  -multiply_defined_unused \n-noall_load   -no_dead_strip_inits_and_terms \n-nofixprebinding -nomultidefs  -noprebind  -noseglinkedit \n-pagezero_size  -prebind  -prebind_all_twolevel_modules \n-private_bundle  -read_only_relocs  -sectalign \n-sectobjectsymbols  -whyload  -seg1addr \n-sectcreate  -sectobjectsymbols  -sectorder \n-segaddr -segs_read_only_addr -segs_read_write_addr \n-seg_addr_table  -seg_addr_table_filename  -seglinkedit \n-segprot  -segs_read_only_addr  -segs_read_write_addr \n-single_module  -static  -sub_library  -sub_umbrella \n-twolevel_namespace  -umbrella  -undefined \n-unexported_symbols_list  -weak_reference_mismatches \n-whatsloaded -F -gused -gfull -mmacosx-version-min=<var>version</var> \n-mkernel -mone-byte-bool</pre> <p><em>DEC Alpha Options</em> </p>\n<pre class=\"smallexample\">-mno-fp-regs  -msoft-float \n-mieee  -mieee-with-inexact  -mieee-conformant \n-mfp-trap-mode=<var>mode</var>  -mfp-rounding-mode=<var>mode</var> \n-mtrap-precision=<var>mode</var>  -mbuild-constants \n-mcpu=<var>cpu-type</var>  -mtune=<var>cpu-type</var> \n-mbwx  -mmax  -mfix  -mcix \n-mfloat-vax  -mfloat-ieee \n-mexplicit-relocs  -msmall-data  -mlarge-data \n-msmall-text  -mlarge-text \n-mmemory-latency=<var>time</var></pre> <p><em>FR30 Options</em> </p>\n<pre class=\"smallexample\">-msmall-model -mno-lsim</pre> <p><em>FRV Options</em> </p>\n<pre class=\"smallexample\">-mgpr-32  -mgpr-64  -mfpr-32  -mfpr-64 \n-mhard-float  -msoft-float \n-malloc-cc  -mfixed-cc  -mdword  -mno-dword \n-mdouble  -mno-double \n-mmedia  -mno-media  -mmuladd  -mno-muladd \n-mfdpic  -minline-plt -mgprel-ro  -multilib-library-pic \n-mlinked-fp  -mlong-calls  -malign-labels \n-mlibrary-pic  -macc-4  -macc-8 \n-mpack  -mno-pack  -mno-eflags  -mcond-move  -mno-cond-move \n-moptimize-membar -mno-optimize-membar \n-mscc  -mno-scc  -mcond-exec  -mno-cond-exec \n-mvliw-branch  -mno-vliw-branch \n-mmulti-cond-exec  -mno-multi-cond-exec  -mnested-cond-exec \n-mno-nested-cond-exec  -mtomcat-stats \n-mTLS -mtls \n-mcpu=<var>cpu</var></pre> <p><em>GNU/Linux Options</em> </p>\n<pre class=\"smallexample\">-mglibc -muclibc -mbionic -mandroid \n-tno-android-cc -tno-android-ld</pre> <p><em>H8/300 Options</em> </p>\n<pre class=\"smallexample\">-mrelax  -mh  -ms  -mn  -mexr -mno-exr  -mint32  -malign-300</pre> <p><em>HPPA Options</em> </p>\n<pre class=\"smallexample\">-march=<var>architecture-type</var> \n-mdisable-fpregs  -mdisable-indexing \n-mfast-indirect-calls  -mgas  -mgnu-ld   -mhp-ld \n-mfixed-range=<var>register-range</var> \n-mjump-in-delay -mlinker-opt -mlong-calls \n-mlong-load-store  -mno-disable-fpregs \n-mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas \n-mno-jump-in-delay  -mno-long-load-store \n-mno-portable-runtime  -mno-soft-float \n-mno-space-regs  -msoft-float  -mpa-risc-1-0 \n-mpa-risc-1-1  -mpa-risc-2-0  -mportable-runtime \n-mschedule=<var>cpu-type</var>  -mspace-regs  -msio  -mwsio \n-munix=<var>unix-std</var>  -nolibdld  -static  -threads</pre> <p><em>i386 and x86-64 Options</em> </p>\n<pre class=\"smallexample\">-mtune=<var>cpu-type</var>  -march=<var>cpu-type</var> \n-mtune-ctrl=<var>feature-list</var> -mdump-tune-features -mno-default \n-mfpmath=<var>unit</var> \n-masm=<var>dialect</var>  -mno-fancy-math-387 \n-mno-fp-ret-in-387  -msoft-float \n-mno-wide-multiply  -mrtd  -malign-double \n-mpreferred-stack-boundary=<var>num</var> \n-mincoming-stack-boundary=<var>num</var> \n-mcld -mcx16 -msahf -mmovbe -mcrc32 \n-mrecip -mrecip=<var>opt</var> \n-mvzeroupper -mprefer-avx128 \n-mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx \n-mavx2 -mavx512f -mavx512pf -mavx512er -mavx512cd -msha \n-maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma -mprefetchwt1 \n-msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt \n-mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mthreads \n-mno-align-stringops  -minline-all-stringops \n-minline-stringops-dynamically -mstringop-strategy=<var>alg</var> \n-mmemcpy-strategy=<var>strategy</var> -mmemset-strategy=<var>strategy</var>\n-mpush-args  -maccumulate-outgoing-args  -m128bit-long-double \n-m96bit-long-double -mlong-double-64 -mlong-double-80 -mlong-double-128 \n-mregparm=<var>num</var>  -msseregparm \n-mveclibabi=<var>type</var> -mvect8-ret-in-mem \n-mpc32 -mpc64 -mpc80 -mstackrealign \n-momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs \n-mcmodel=<var>code-model</var> -mabi=<var>name</var> -maddress-mode=<var>mode</var> \n-m32 -m64 -mx32 -m16 -mlarge-data-threshold=<var>num</var> \n-msse2avx -mfentry -m8bit-idiv \n-mavx256-split-unaligned-load -mavx256-split-unaligned-store \n-mstack-protector-guard=<var>guard</var></pre> <p><em>i386 and x86-64 Windows Options</em> </p>\n<pre class=\"smallexample\">-mconsole -mcygwin -mno-cygwin -mdll \n-mnop-fun-dllimport -mthread \n-municode -mwin32 -mwindows -fno-set-stack-executable</pre> <p><em>IA-64 Options</em> </p>\n<pre class=\"smallexample\">-mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic \n-mvolatile-asm-stop  -mregister-names  -msdata -mno-sdata \n-mconstant-gp  -mauto-pic  -mfused-madd \n-minline-float-divide-min-latency \n-minline-float-divide-max-throughput \n-mno-inline-float-divide \n-minline-int-divide-min-latency \n-minline-int-divide-max-throughput  \n-mno-inline-int-divide \n-minline-sqrt-min-latency -minline-sqrt-max-throughput \n-mno-inline-sqrt \n-mdwarf2-asm -mearly-stop-bits \n-mfixed-range=<var>register-range</var> -mtls-size=<var>tls-size</var> \n-mtune=<var>cpu-type</var> -milp32 -mlp64 \n-msched-br-data-spec -msched-ar-data-spec -msched-control-spec \n-msched-br-in-data-spec -msched-ar-in-data-spec -msched-in-control-spec \n-msched-spec-ldc -msched-spec-control-ldc \n-msched-prefer-non-data-spec-insns -msched-prefer-non-control-spec-insns \n-msched-stop-bits-after-every-cycle -msched-count-spec-in-critical-path \n-msel-sched-dont-check-control-spec -msched-fp-mem-deps-zero-cost \n-msched-max-memory-insns-hard-limit -msched-max-memory-insns=<var>max-insns</var></pre> <p><em>LM32 Options</em> </p>\n<pre class=\"smallexample\">-mbarrel-shift-enabled -mdivide-enabled -mmultiply-enabled \n-msign-extend-enabled -muser-enabled</pre> <p><em>M32R/D Options</em> </p>\n<pre class=\"smallexample\">-m32r2 -m32rx -m32r \n-mdebug \n-malign-loops -mno-align-loops \n-missue-rate=<var>number</var> \n-mbranch-cost=<var>number</var> \n-mmodel=<var>code-size-model-type</var> \n-msdata=<var>sdata-type</var> \n-mno-flush-func -mflush-func=<var>name</var> \n-mno-flush-trap -mflush-trap=<var>number</var> \n-G <var>num</var></pre> <p><em>M32C Options</em> </p>\n<pre class=\"smallexample\">-mcpu=<var>cpu</var> -msim -memregs=<var>number</var></pre> <p><em>M680x0 Options</em> </p>\n<pre class=\"smallexample\">-march=<var>arch</var>  -mcpu=<var>cpu</var>  -mtune=<var>tune</var>\n-m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040 \n-m68060  -mcpu32  -m5200  -m5206e  -m528x  -m5307  -m5407 \n-mcfv4e  -mbitfield  -mno-bitfield  -mc68000  -mc68020 \n-mnobitfield  -mrtd  -mno-rtd  -mdiv  -mno-div  -mshort \n-mno-short  -mhard-float  -m68881  -msoft-float  -mpcrel \n-malign-int  -mstrict-align  -msep-data  -mno-sep-data \n-mshared-library-id=n  -mid-shared-library  -mno-id-shared-library \n-mxgot -mno-xgot</pre> <p><em>MCore Options</em> </p>\n<pre class=\"smallexample\">-mhardlit  -mno-hardlit  -mdiv  -mno-div  -mrelax-immediates \n-mno-relax-immediates  -mwide-bitfields  -mno-wide-bitfields \n-m4byte-functions  -mno-4byte-functions  -mcallgraph-data \n-mno-callgraph-data  -mslow-bytes  -mno-slow-bytes  -mno-lsim \n-mlittle-endian  -mbig-endian  -m210  -m340  -mstack-increment</pre> <p><em>MeP Options</em> </p>\n<pre class=\"smallexample\">-mabsdiff -mall-opts -maverage -mbased=<var>n</var> -mbitops \n-mc=<var>n</var> -mclip -mconfig=<var>name</var> -mcop -mcop32 -mcop64 -mivc2 \n-mdc -mdiv -meb -mel -mio-volatile -ml -mleadz -mm -mminmax \n-mmult -mno-opts -mrepeat -ms -msatur -msdram -msim -msimnovec -mtf \n-mtiny=<var>n</var></pre> <p><em>MicroBlaze Options</em> </p>\n<pre class=\"smallexample\">-msoft-float -mhard-float -msmall-divides -mcpu=<var>cpu</var> \n-mmemcpy -mxl-soft-mul -mxl-soft-div -mxl-barrel-shift \n-mxl-pattern-compare -mxl-stack-check -mxl-gp-opt -mno-clearbss \n-mxl-multiply-high -mxl-float-convert -mxl-float-sqrt \n-mbig-endian -mlittle-endian -mxl-reorder -mxl-mode-<var>app-model</var></pre> <p><em>MIPS Options</em> </p>\n<pre class=\"smallexample\">-EL  -EB  -march=<var>arch</var>  -mtune=<var>arch</var> \n-mips1  -mips2  -mips3  -mips4  -mips32  -mips32r2 \n-mips64  -mips64r2 \n-mips16  -mno-mips16  -mflip-mips16 \n-minterlink-compressed -mno-interlink-compressed \n-minterlink-mips16  -mno-interlink-mips16 \n-mabi=<var>abi</var>  -mabicalls  -mno-abicalls \n-mshared  -mno-shared  -mplt  -mno-plt  -mxgot  -mno-xgot \n-mgp32  -mgp64  -mfp32  -mfp64  -mhard-float  -msoft-float \n-mno-float  -msingle-float  -mdouble-float \n-mabs=<var>mode</var>  -mnan=<var>encoding</var> \n-mdsp  -mno-dsp  -mdspr2  -mno-dspr2 \n-mmcu -mmno-mcu \n-meva -mno-eva \n-mvirt -mno-virt \n-mmicromips -mno-micromips \n-mfpu=<var>fpu-type</var> \n-msmartmips  -mno-smartmips \n-mpaired-single  -mno-paired-single  -mdmx  -mno-mdmx \n-mips3d  -mno-mips3d  -mmt  -mno-mt  -mllsc  -mno-llsc \n-mlong64  -mlong32  -msym32  -mno-sym32 \n-G<var>num</var>  -mlocal-sdata  -mno-local-sdata \n-mextern-sdata  -mno-extern-sdata  -mgpopt  -mno-gopt \n-membedded-data  -mno-embedded-data \n-muninit-const-in-rodata  -mno-uninit-const-in-rodata \n-mcode-readable=<var>setting</var> \n-msplit-addresses  -mno-split-addresses \n-mexplicit-relocs  -mno-explicit-relocs \n-mcheck-zero-division  -mno-check-zero-division \n-mdivide-traps  -mdivide-breaks \n-mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls \n-mmad -mno-mad -mimadd -mno-imadd -mfused-madd  -mno-fused-madd  -nocpp \n-mfix-24k -mno-fix-24k \n-mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400 \n-mfix-r10000 -mno-fix-r10000  -mfix-rm7000 -mno-fix-rm7000 \n-mfix-vr4120  -mno-fix-vr4120 \n-mfix-vr4130  -mno-fix-vr4130  -mfix-sb1  -mno-fix-sb1 \n-mflush-func=<var>func</var>  -mno-flush-func \n-mbranch-cost=<var>num</var>  -mbranch-likely  -mno-branch-likely \n-mfp-exceptions -mno-fp-exceptions \n-mvr4130-align -mno-vr4130-align -msynci -mno-synci \n-mrelax-pic-calls -mno-relax-pic-calls -mmcount-ra-address</pre> <p><em>MMIX Options</em> </p>\n<pre class=\"smallexample\">-mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon  -mabi=gnu \n-mabi=mmixware  -mzero-extend  -mknuthdiv  -mtoplevel-symbols \n-melf  -mbranch-predict  -mno-branch-predict  -mbase-addresses \n-mno-base-addresses  -msingle-exit  -mno-single-exit</pre> <p><em>MN10300 Options</em> </p>\n<pre class=\"smallexample\">-mmult-bug  -mno-mult-bug \n-mno-am33 -mam33 -mam33-2 -mam34 \n-mtune=<var>cpu-type</var> \n-mreturn-pointer-on-d0 \n-mno-crt0  -mrelax -mliw -msetlb</pre> <p><em>Moxie Options</em> </p>\n<pre class=\"smallexample\">-meb -mel -mno-crt0</pre> <p><em>MSP430 Options</em> </p>\n<pre class=\"smallexample\">-msim -masm-hex -mmcu= -mcpu= -mlarge -msmall -mrelax \n-mhwmult= -minrt</pre> <p><em>NDS32 Options</em> </p>\n<pre class=\"smallexample\">-mbig-endian -mlittle-endian \n-mreduced-regs -mfull-regs \n-mcmov -mno-cmov \n-mperf-ext -mno-perf-ext \n-mv3push -mno-v3push \n-m16bit -mno-16bit \n-mgp-direct -mno-gp-direct \n-misr-vector-size=<var>num</var> \n-mcache-block-size=<var>num</var> \n-march=<var>arch</var> \n-mforce-fp-as-gp -mforbid-fp-as-gp \n-mex9 -mctor-dtor -mrelax</pre> <p><em>Nios II Options</em> </p>\n<pre class=\"smallexample\">-G <var>num</var> -mgpopt -mno-gpopt -mel -meb \n-mno-bypass-cache -mbypass-cache \n-mno-cache-volatile -mcache-volatile \n-mno-fast-sw-div -mfast-sw-div \n-mhw-mul -mno-hw-mul -mhw-mulx -mno-hw-mulx -mno-hw-div -mhw-div \n-mcustom-<var>insn</var>=<var>N</var> -mno-custom-<var>insn</var> \n-mcustom-fpu-cfg=<var>name</var> \n-mhal -msmallc -msys-crt0=<var>name</var> -msys-lib=<var>name</var></pre> <p><em>PDP-11 Options</em> </p>\n<pre class=\"smallexample\">-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 \n-mbcopy  -mbcopy-builtin  -mint32  -mno-int16 \n-mint16  -mno-int32  -mfloat32  -mno-float64 \n-mfloat64  -mno-float32  -mabshi  -mno-abshi \n-mbranch-expensive  -mbranch-cheap \n-munix-asm  -mdec-asm</pre> <p><em>picoChip Options</em> </p>\n<pre class=\"smallexample\">-mae=<var>ae_type</var> -mvliw-lookahead=<var>N</var> \n-msymbol-as-address -mno-inefficient-warnings</pre> <p><em>PowerPC Options</em> See RS/6000 and PowerPC Options. </p>\n<p><em>RL78 Options</em> </p>\n<pre class=\"smallexample\">-msim -mmul=none -mmul=g13 -mmul=rl78</pre> <p><em>RS/6000 and PowerPC Options</em> </p>\n<pre class=\"smallexample\">-mcpu=<var>cpu-type</var> \n-mtune=<var>cpu-type</var> \n-mcmodel=<var>code-model</var> \n-mpowerpc64 \n-maltivec  -mno-altivec \n-mpowerpc-gpopt  -mno-powerpc-gpopt \n-mpowerpc-gfxopt  -mno-powerpc-gfxopt \n-mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb -mpopcntd -mno-popcntd \n-mfprnd  -mno-fprnd \n-mcmpb -mno-cmpb -mmfpgpr -mno-mfpgpr -mhard-dfp -mno-hard-dfp \n-mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc \n-m64  -m32  -mxl-compat  -mno-xl-compat  -mpe \n-malign-power  -malign-natural \n-msoft-float  -mhard-float  -mmultiple  -mno-multiple \n-msingle-float -mdouble-float -msimple-fpu \n-mstring  -mno-string  -mupdate  -mno-update \n-mavoid-indexed-addresses  -mno-avoid-indexed-addresses \n-mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align \n-mstrict-align  -mno-strict-align  -mrelocatable \n-mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib \n-mtoc  -mno-toc  -mlittle  -mlittle-endian  -mbig  -mbig-endian \n-mdynamic-no-pic  -maltivec -mswdiv  -msingle-pic-base \n-mprioritize-restricted-insns=<var>priority</var> \n-msched-costly-dep=<var>dependence_type</var> \n-minsert-sched-nops=<var>scheme</var> \n-mcall-sysv  -mcall-netbsd \n-maix-struct-return  -msvr4-struct-return \n-mabi=<var>abi-type</var> -msecure-plt -mbss-plt \n-mblock-move-inline-limit=<var>num</var> \n-misel -mno-isel \n-misel=yes  -misel=no \n-mspe -mno-spe \n-mspe=yes  -mspe=no \n-mpaired \n-mgen-cell-microcode -mwarn-cell-microcode \n-mvrsave -mno-vrsave \n-mmulhw -mno-mulhw \n-mdlmzb -mno-dlmzb \n-mfloat-gprs=yes  -mfloat-gprs=no -mfloat-gprs=single -mfloat-gprs=double \n-mprototype  -mno-prototype \n-msim  -mmvme  -mads  -myellowknife  -memb  -msdata \n-msdata=<var>opt</var>  -mvxworks  -G <var>num</var>  -pthread \n-mrecip -mrecip=<var>opt</var> -mno-recip -mrecip-precision \n-mno-recip-precision \n-mveclibabi=<var>type</var> -mfriz -mno-friz \n-mpointers-to-nested-functions -mno-pointers-to-nested-functions \n-msave-toc-indirect -mno-save-toc-indirect \n-mpower8-fusion -mno-mpower8-fusion -mpower8-vector -mno-power8-vector \n-mcrypto -mno-crypto -mdirect-move -mno-direct-move \n-mquad-memory -mno-quad-memory \n-mquad-memory-atomic -mno-quad-memory-atomic \n-mcompat-align-parm -mno-compat-align-parm</pre> <p><em>RX Options</em> </p>\n<pre class=\"smallexample\">-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu\n-mcpu=\n-mbig-endian-data -mlittle-endian-data \n-msmall-data \n-msim  -mno-sim\n-mas100-syntax -mno-as100-syntax\n-mrelax\n-mmax-constant-size=\n-mint-register=\n-mpid\n-mno-warn-multiple-fast-interrupts\n-msave-acc-in-interrupts</pre> <p><em>S/390 and zSeries Options</em> </p>\n<pre class=\"smallexample\">-mtune=<var>cpu-type</var>  -march=<var>cpu-type</var> \n-mhard-float  -msoft-float  -mhard-dfp -mno-hard-dfp \n-mlong-double-64 -mlong-double-128 \n-mbackchain  -mno-backchain -mpacked-stack  -mno-packed-stack \n-msmall-exec  -mno-small-exec  -mmvcle -mno-mvcle \n-m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch \n-mtpf-trace -mno-tpf-trace  -mfused-madd  -mno-fused-madd \n-mwarn-framesize  -mwarn-dynamicstack  -mstack-size -mstack-guard \n-mhotpatch=<var>halfwords</var>,<var>halfwords</var></pre> <p><em>Score Options</em> </p>\n<pre class=\"smallexample\">-meb -mel \n-mnhwloop \n-muls \n-mmac \n-mscore5 -mscore5u -mscore7 -mscore7d</pre> <p><em>SH Options</em> </p>\n<pre class=\"smallexample\">-m1  -m2  -m2e \n-m2a-nofpu -m2a-single-only -m2a-single -m2a \n-m3  -m3e \n-m4-nofpu  -m4-single-only  -m4-single  -m4 \n-m4a-nofpu -m4a-single-only -m4a-single -m4a -m4al \n-m5-64media  -m5-64media-nofpu \n-m5-32media  -m5-32media-nofpu \n-m5-compact  -m5-compact-nofpu \n-mb  -ml  -mdalign  -mrelax \n-mbigtable -mfmovd -mhitachi -mrenesas -mno-renesas -mnomacsave \n-mieee -mno-ieee -mbitops  -misize  -minline-ic_invalidate -mpadstruct \n-mspace -mprefergot  -musermode -multcost=<var>number</var> -mdiv=<var>strategy</var> \n-mdivsi3_libfunc=<var>name</var> -mfixed-range=<var>register-range</var> \n-mindexed-addressing -mgettrcost=<var>number</var> -mpt-fixed \n-maccumulate-outgoing-args -minvalid-symbols \n-matomic-model=<var>atomic-model</var> \n-mbranch-cost=<var>num</var> -mzdcbranch -mno-zdcbranch \n-mfused-madd -mno-fused-madd -mfsca -mno-fsca -mfsrra -mno-fsrra \n-mpretend-cmove -mtas</pre> <p><em>Solaris 2 Options</em> </p>\n<pre class=\"smallexample\">-mclear-hwcap -mno-clear-hwcap -mimpure-text  -mno-impure-text \n-pthreads -pthread</pre> <p><em>SPARC Options</em> </p>\n<pre class=\"smallexample\">-mcpu=<var>cpu-type</var> \n-mtune=<var>cpu-type</var> \n-mcmodel=<var>code-model</var> \n-mmemory-model=<var>mem-model</var> \n-m32  -m64  -mapp-regs  -mno-app-regs \n-mfaster-structs  -mno-faster-structs  -mflat  -mno-flat \n-mfpu  -mno-fpu  -mhard-float  -msoft-float \n-mhard-quad-float  -msoft-quad-float \n-mstack-bias  -mno-stack-bias \n-munaligned-doubles  -mno-unaligned-doubles \n-muser-mode  -mno-user-mode \n-mv8plus  -mno-v8plus  -mvis  -mno-vis \n-mvis2  -mno-vis2  -mvis3  -mno-vis3 \n-mcbcond -mno-cbcond \n-mfmaf  -mno-fmaf  -mpopc  -mno-popc \n-mfix-at697f -mfix-ut699</pre> <p><em>SPU Options</em> </p>\n<pre class=\"smallexample\">-mwarn-reloc -merror-reloc \n-msafe-dma -munsafe-dma \n-mbranch-hints \n-msmall-mem -mlarge-mem -mstdmain \n-mfixed-range=<var>register-range</var> \n-mea32 -mea64 \n-maddress-space-conversion -mno-address-space-conversion \n-mcache-size=<var>cache-size</var> \n-matomic-updates -mno-atomic-updates</pre> <p><em>System V Options</em> </p>\n<pre class=\"smallexample\">-Qy  -Qn  -YP,<var>paths</var>  -Ym,<var>dir</var></pre> <p><em>TILE-Gx Options</em> </p>\n<pre class=\"smallexample\">-mcpu=CPU -m32 -m64 -mbig-endian -mlittle-endian \n-mcmodel=<var>code-model</var></pre> <p><em>TILEPro Options</em> </p>\n<pre class=\"smallexample\">-mcpu=<var>cpu</var> -m32</pre> <p><em>V850 Options</em> </p>\n<pre class=\"smallexample\">-mlong-calls  -mno-long-calls  -mep  -mno-ep \n-mprolog-function  -mno-prolog-function  -mspace \n-mtda=<var>n</var>  -msda=<var>n</var>  -mzda=<var>n</var> \n-mapp-regs  -mno-app-regs \n-mdisable-callt  -mno-disable-callt \n-mv850e2v3 -mv850e2 -mv850e1 -mv850es \n-mv850e -mv850 -mv850e3v5 \n-mloop \n-mrelax \n-mlong-jumps \n-msoft-float \n-mhard-float \n-mgcc-abi \n-mrh850-abi \n-mbig-switch</pre> <p><em>VAX Options</em> </p>\n<pre class=\"smallexample\">-mg  -mgnu  -munix</pre> <p><em>VMS Options</em> </p>\n<pre class=\"smallexample\">-mvms-return-codes -mdebug-main=<var>prefix</var> -mmalloc64 \n-mpointer-size=<var>size</var></pre> <p><em>VxWorks Options</em> </p>\n<pre class=\"smallexample\">-mrtp  -non-static  -Bstatic  -Bdynamic \n-Xbind-lazy  -Xbind-now</pre> <p><em>x86-64 Options</em> See i386 and x86-64 Options. </p>\n<p><em>Xstormy16 Options</em> </p>\n<pre class=\"smallexample\">-msim</pre> <p><em>Xtensa Options</em> </p>\n<pre class=\"smallexample\">-mconst16 -mno-const16 \n-mfused-madd  -mno-fused-madd \n-mforce-no-pic \n-mserialize-volatile  -mno-serialize-volatile \n-mtext-section-literals  -mno-text-section-literals \n-mtarget-align  -mno-target-align \n-mlongcalls  -mno-longcalls</pre> <p><em>zSeries Options</em> See S/390 and zSeries Options. </p>\n</dd>\n<dt>Code Generation Options</dt>\n<dd>See <a href=\"code-gen-options#Code-Gen-Options\">Options for Code Generation Conventions</a>. <pre class=\"smallexample\">-fcall-saved-<var>reg</var>  -fcall-used-<var>reg</var> \n-ffixed-<var>reg</var>  -fexceptions \n-fnon-call-exceptions  -fdelete-dead-exceptions  -funwind-tables \n-fasynchronous-unwind-tables \n-fno-gnu-unique \n-finhibit-size-directive  -finstrument-functions \n-finstrument-functions-exclude-function-list=<var>sym</var>,<var>sym</var>,... \n-finstrument-functions-exclude-file-list=<var>file</var>,<var>file</var>,... \n-fno-common  -fno-ident \n-fpcc-struct-return  -fpic  -fPIC -fpie -fPIE \n-fno-jump-tables \n-frecord-gcc-switches \n-freg-struct-return  -fshort-enums \n-fshort-double  -fshort-wchar \n-fverbose-asm  -fpack-struct[=<var>n</var>]  -fstack-check \n-fstack-limit-register=<var>reg</var>  -fstack-limit-symbol=<var>sym</var> \n-fno-stack-limit -fsplit-stack \n-fleading-underscore  -ftls-model=<var>model</var> \n-fstack-reuse=<var>reuse_level</var> \n-ftrapv  -fwrapv  -fbounds-check \n-fvisibility -fstrict-volatile-bitfields -fsync-libcalls</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Option-Summary.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Option-Summary.html</a>\n  </p>\n</div>\n","overall-options":"<h1 class=\"section\" id=\"Overall-Options\">3.2 Options Controlling the Kind of Output</h1> <p>Compilation can involve up to four stages: preprocessing, compilation proper, assembly and linking, always in that order. GCC is capable of preprocessing and compiling several files either into several assembler input files, or into one assembler input file; then each assembler input file produces an object file, and linking combines all the object files (those newly compiled, and those specified as input) into an executable file. </p>\n<p>For any given input file, the file name suffix determines what kind of compilation is done: </p>\n<dl> <dt>\n<var>file</var><code>.c</code>\n</dt>\n<dd>C source code that must be preprocessed. </dd>\n<dt>\n<var>file</var><code>.i</code>\n</dt>\n<dd>C source code that should not be preprocessed. </dd>\n<dt>\n<var>file</var><code>.ii</code>\n</dt>\n<dd>C++ source code that should not be preprocessed. </dd>\n<dt>\n<var>file</var><code>.m</code>\n</dt>\n<dd>Objective-C source code. Note that you must link with the <code>libobjc</code> library to make an Objective-C program work. </dd>\n<dt>\n<var>file</var><code>.mi</code>\n</dt>\n<dd>Objective-C source code that should not be preprocessed. </dd>\n<dt>\n<var>file</var><code>.mm</code><dt>\n<var>file</var><code>.M</code>\n</dt>\n</dt>\n<dd>Objective-C++ source code. Note that you must link with the <code>libobjc</code> library to make an Objective-C++ program work. Note that ‘<code>.M</code>’ refers to a literal capital M. </dd>\n<dt>\n<var>file</var><code>.mii</code>\n</dt>\n<dd>Objective-C++ source code that should not be preprocessed. </dd>\n<dt>\n<var>file</var><code>.h</code>\n</dt>\n<dd>C, C++, Objective-C or Objective-C++ header file to be turned into a precompiled header (default), or C, C++ header file to be turned into an Ada spec (via the <code>-fdump-ada-spec</code> switch). </dd>\n<dt>\n<var>file</var><code>.cc</code><dt>\n<var>file</var><code>.cp</code><dt>\n<var>file</var><code>.cxx</code><dt>\n<var>file</var><code>.cpp</code><dt>\n<var>file</var><code>.CPP</code><dt>\n<var>file</var><code>.c++</code><dt>\n<var>file</var><code>.C</code>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>C++ source code that must be preprocessed. Note that in ‘<code>.cxx</code>’, the last two letters must both be literally ‘<code>x</code>’. Likewise, ‘<code>.C</code>’ refers to a literal capital C. </dd>\n<dt>\n<var>file</var><code>.mm</code><dt>\n<var>file</var><code>.M</code>\n</dt>\n</dt>\n<dd>Objective-C++ source code that must be preprocessed. </dd>\n<dt>\n<var>file</var><code>.mii</code>\n</dt>\n<dd>Objective-C++ source code that should not be preprocessed. </dd>\n<dt>\n<var>file</var><code>.hh</code><dt>\n<var>file</var><code>.H</code><dt>\n<var>file</var><code>.hp</code><dt>\n<var>file</var><code>.hxx</code><dt>\n<var>file</var><code>.hpp</code><dt>\n<var>file</var><code>.HPP</code><dt>\n<var>file</var><code>.h++</code><dt>\n<var>file</var><code>.tcc</code>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>C++ header file to be turned into a precompiled header or Ada spec. </dd>\n<dt>\n<var>file</var><code>.f</code><dt>\n<var>file</var><code>.for</code><dt>\n<var>file</var><code>.ftn</code>\n</dt>\n</dt>\n</dt>\n<dd>Fixed form Fortran source code that should not be preprocessed. </dd>\n<dt>\n<var>file</var><code>.F</code><dt>\n<var>file</var><code>.FOR</code><dt>\n<var>file</var><code>.fpp</code><dt>\n<var>file</var><code>.FPP</code><dt>\n<var>file</var><code>.FTN</code>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Fixed form Fortran source code that must be preprocessed (with the traditional preprocessor). </dd>\n<dt>\n<var>file</var><code>.f90</code><dt>\n<var>file</var><code>.f95</code><dt>\n<var>file</var><code>.f03</code><dt>\n<var>file</var><code>.f08</code>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Free form Fortran source code that should not be preprocessed. </dd>\n<dt>\n<var>file</var><code>.F90</code><dt>\n<var>file</var><code>.F95</code><dt>\n<var>file</var><code>.F03</code><dt>\n<var>file</var><code>.F08</code>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Free form Fortran source code that must be preprocessed (with the traditional preprocessor). </dd>\n<dt>\n<var>file</var><code>.go</code>\n</dt>\n<dd>Go source code.      </dd>\n<dt>\n<var>file</var><code>.ads</code>\n</dt>\n<dd>Ada source code file that contains a library unit declaration (a declaration of a package, subprogram, or generic, or a generic instantiation), or a library unit renaming declaration (a package, generic, or subprogram renaming declaration). Such files are also called specs. </dd>\n<dt>\n<var>file</var><code>.adb</code>\n</dt>\n<dd>Ada source code file containing a library unit body (a subprogram or package body). Such files are also called bodies.       </dd>\n<dt>\n<var>file</var><code>.s</code>\n</dt>\n<dd>Assembler code. </dd>\n<dt>\n<var>file</var><code>.S</code><dt>\n<var>file</var><code>.sx</code>\n</dt>\n</dt>\n<dd>Assembler code that must be preprocessed. </dd>\n<dt><var>other</var></dt>\n<dd>An object file to be fed straight into linking. Any file name with no recognized suffix is treated this way. </dd>\n</dl> <p>You can specify the input language explicitly with the <code>-x</code> option: </p>\n<dl> <dt>\n<code>-x </code><var>language</var>\n</dt>\n<dd>Specify explicitly the <var>language</var> for the following input files (rather than letting the compiler choose a default based on the file name suffix). This option applies to all following input files until the next <code>-x</code> option. Possible values for <var>language</var> are: <pre class=\"smallexample\">c  c-header  cpp-output\nc++  c++-header  c++-cpp-output\nobjective-c  objective-c-header  objective-c-cpp-output\nobjective-c++ objective-c++-header objective-c++-cpp-output\nassembler  assembler-with-cpp\nada\nf77  f77-cpp-input f95  f95-cpp-input\ngo\njava</pre> </dd>\n<dt><code>-x none</code></dt>\n<dd>Turn off any specification of a language, so that subsequent files are handled according to their file name suffixes (as they are if <code>-x</code> has not been used at all). </dd>\n<dt><code>-pass-exit-codes</code></dt>\n<dd>\nNormally the <code>gcc</code> program exits with the code of 1 if any phase of the compiler returns a non-success return code. If you specify <code>-pass-exit-codes</code>, the <code>gcc</code> program instead returns with the numerically highest error produced by any phase returning an error indication. The C, C++, and Fortran front ends return 4 if an internal compiler error is encountered. </dd>\n</dl> <p>If you only want some of the stages of compilation, you can use <code>-x</code> (or filename suffixes) to tell <code>gcc</code> where to start, and one of the options <code>-c</code>, <code>-S</code>, or <code>-E</code> to say where <code>gcc</code> is to stop. Note that some combinations (for example, ‘<code>-x cpp-output -E</code>’) instruct <code>gcc</code> to do nothing at all. </p>\n<dl> <dt><code>-c</code></dt>\n<dd>\nCompile or assemble the source files, but do not link. The linking stage simply is not done. The ultimate output is in the form of an object file for each source file. <p>By default, the object file name for a source file is made by replacing the suffix ‘<code>.c</code>’, ‘<code>.i</code>’, ‘<code>.s</code>’, etc., with ‘<code>.o</code>’. </p>\n<p>Unrecognized input files, not requiring compilation or assembly, are ignored. </p>\n</dd>\n<dt><code>-S</code></dt>\n<dd>\nStop after the stage of compilation proper; do not assemble. The output is in the form of an assembler code file for each non-assembler input file specified. <p>By default, the assembler file name for a source file is made by replacing the suffix ‘<code>.c</code>’, ‘<code>.i</code>’, etc., with ‘<code>.s</code>’. </p>\n<p>Input files that don't require compilation are ignored. </p>\n</dd>\n<dt><code>-E</code></dt>\n<dd>\nStop after the preprocessing stage; do not run the compiler proper. The output is in the form of preprocessed source code, which is sent to the standard output. <p>Input files that don't require preprocessing are ignored. </p>\n\n</dd>\n<dt>\n<code>-o </code><var>file</var>\n</dt>\n<dd>\nPlace output in file <var>file</var>. This applies to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code. <p>If <code>-o</code> is not specified, the default is to put an executable file in <code>a.out</code>, the object file for <samp><var>source</var><span class=\"file\">.</span><var>suffix</var></samp> in <samp><var>source</var><span class=\"file\">.o</span></samp>, its assembler file in <samp><var>source</var><span class=\"file\">.s</span></samp>, a precompiled header file in <samp><var>source</var><span class=\"file\">.</span><var>suffix</var><span class=\"file\">.gch</span></samp>, and all preprocessed C source on standard output. </p>\n</dd>\n<dt><code>-v</code></dt>\n<dd>\nPrint (on standard error output) the commands executed to run the stages of compilation. Also print the version number of the compiler driver program and of the preprocessor and the compiler proper. </dd>\n<dt><code>-###</code></dt>\n<dd>\nLike <code>-v</code> except the commands are not executed and arguments are quoted unless they contain only alphanumeric characters or <code>./-_</code>. This is useful for shell scripts to capture the driver-generated command lines. </dd>\n<dt><code>-pipe</code></dt>\n<dd>\nUse pipes rather than temporary files for communication between the various stages of compilation. This fails to work on some systems where the assembler is unable to read from a pipe; but the GNU assembler has no trouble. </dd>\n<dt><code>--help</code></dt>\n<dd>\nPrint (on the standard output) a description of the command-line options understood by <code>gcc</code>. If the <code>-v</code> option is also specified then <code>--help</code> is also passed on to the various processes invoked by <code>gcc</code>, so that they can display the command-line options they accept. If the <code>-Wextra</code> option has also been specified (prior to the <code>--help</code> option), then command-line options that have no documentation associated with them are also displayed. </dd>\n<dt><code>--target-help</code></dt>\n<dd>\nPrint (on the standard output) a description of target-specific command-line options for each tool. For some targets extra target-specific information may also be printed. </dd>\n<dt>\n<code>--help={</code><var>class</var><span class=\"roman\">|[</span><code>^</code><span class=\"roman\">]</span><var>qualifier</var><code>}</code><span class=\"roman\">[</span><code>,...</code><span class=\"roman\">]</span>\n</dt>\n<dd>Print (on the standard output) a description of the command-line options understood by the compiler that fit into all specified classes and qualifiers. These are the supported classes: <dl> <dt>‘<code>optimizers</code>’</dt>\n<dd>Display all of the optimization options supported by the compiler. </dd>\n<dt>‘<code>warnings</code>’</dt>\n<dd>Display all of the options controlling warning messages produced by the compiler. </dd>\n<dt>‘<code>target</code>’</dt>\n<dd>Display target-specific options. Unlike the <code>--target-help</code> option however, target-specific options of the linker and assembler are not displayed. This is because those tools do not currently support the extended <code>--help=</code> syntax. </dd>\n<dt>‘<code>params</code>’</dt>\n<dd>Display the values recognized by the <code>--param</code> option. </dd>\n<dt><var>language</var></dt>\n<dd>Display the options supported for <var>language</var>, where <var>language</var> is the name of one of the languages supported in this version of GCC. </dd>\n<dt>‘<code>common</code>’</dt>\n<dd>Display the options that are common to all languages. </dd>\n</dl> <p>These are the supported qualifiers: </p>\n<dl> <dt>‘<code>undocumented</code>’</dt>\n<dd>Display only those options that are undocumented. </dd>\n<dt>‘<code>joined</code>’</dt>\n<dd>Display options taking an argument that appears after an equal sign in the same continuous piece of text, such as: ‘<code>--help=target</code>’. </dd>\n<dt>‘<code>separate</code>’</dt>\n<dd>Display options taking an argument that appears as a separate word following the original option, such as: ‘<code>-o output-file</code>’. </dd>\n</dl> <p>Thus for example to display all the undocumented target-specific switches supported by the compiler, use: </p>\n<pre class=\"smallexample\">--help=target,undocumented</pre> <p>The sense of a qualifier can be inverted by prefixing it with the ‘<code>^</code>’ character, so for example to display all binary warning options (i.e., ones that are either on or off and that do not take an argument) that have a description, use: </p>\n<pre class=\"smallexample\">--help=warnings,^joined,^undocumented</pre> <p>The argument to <code>--help=</code> should not consist solely of inverted qualifiers. </p>\n<p>Combining several classes is possible, although this usually restricts the output so much that there is nothing to display. One case where it does work, however, is when one of the classes is <var>target</var>. For example, to display all the target-specific optimization options, use: </p>\n<pre class=\"smallexample\">--help=target,optimizers</pre> <p>The <code>--help=</code> option can be repeated on the command line. Each successive use displays its requested class of options, skipping those that have already been displayed. </p>\n<p>If the <code>-Q</code> option appears on the command line before the <code>--help=</code> option, then the descriptive text displayed by <code>--help=</code> is changed. Instead of describing the displayed options, an indication is given as to whether the option is enabled, disabled or set to a specific value (assuming that the compiler knows this at the point where the <code>--help=</code> option is used). </p>\n<p>Here is a truncated example from the ARM port of <code>gcc</code>: </p>\n<pre class=\"smallexample\">% gcc -Q -mabi=2 --help=target -c\nThe following options are target specific:\n-mabi=                                2\n-mabort-on-noreturn                   [disabled]\n-mapcs                                [disabled]</pre> <p>The output is sensitive to the effects of previous command-line options, so for example it is possible to find out which optimizations are enabled at <code>-O2</code> by using: </p>\n<pre class=\"smallexample\">-Q -O2 --help=optimizers</pre> <p>Alternatively you can discover which binary optimizations are enabled by <code>-O3</code> by using: </p>\n<pre class=\"smallexample\">gcc -c -Q -O3 --help=optimizers &gt; /tmp/O3-opts\ngcc -c -Q -O2 --help=optimizers &gt; /tmp/O2-opts\ndiff /tmp/O2-opts /tmp/O3-opts | grep enabled</pre> </dd>\n<dt><code>-no-canonical-prefixes</code></dt>\n<dd>\nDo not expand any symbolic links, resolve references to ‘<code>/../</code>’ or ‘<code>/./</code>’, or make the path absolute when generating a relative prefix. </dd>\n<dt><code>--version</code></dt>\n<dd>\nDisplay the version number and copyrights of the invoked GCC. </dd>\n<dt><code>-wrapper</code></dt>\n<dd>\nInvoke all subcommands under a wrapper program. The name of the wrapper program and its parameters are passed as a comma separated list. <pre class=\"smallexample\">gcc -c t.c -wrapper gdb,--args</pre> <p class=\"noindent\">This invokes all subprograms of <code>gcc</code> under ‘<code>gdb --args</code>’, thus the invocation of <code>cc1</code> is ‘<code>gdb --args cc1 ...</code>’. </p>\n</dd>\n<dt>\n<code>-fplugin=</code><var>name</var><code>.so</code>\n</dt>\n<dd>\nLoad the plugin code in file <var>name</var>.so, assumed to be a shared object to be dlopen'd by the compiler. The base name of the shared object file is used to identify the plugin for the purposes of argument parsing (See <samp><span class=\"option\">-fplugin-arg-</span><var>name</var><span class=\"option\">-</span><var>key</var><span class=\"option\">=</span><var>value</var></samp> below). Each plugin should define the callback functions specified in the Plugins API. </dd>\n<dt>\n<code>-fplugin-arg-</code><var>name</var><code>-</code><var>key</var><code>=</code><var>value</var>\n</dt>\n<dd>\nDefine an argument called <var>key</var> with a value of <var>value</var> for the plugin called <var>name</var>. </dd>\n<dt>\n<code>-fdump-ada-spec</code><span class=\"roman\">[</span><code>-slim</code><span class=\"roman\">]</span>\n</dt>\n<dd>\nFor C and C++ source and include files, generate corresponding Ada specs. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gnat_ugn/Generating-Ada-Bindings-for-C-and-C_002b_002b-headers.html#Generating-Ada-Bindings-for-C-and-C_002b_002b-headers\">Generating Ada Bindings for C and C++ headers</a>, which provides detailed documentation on this feature. </dd>\n<dt>\n<code>-fada-spec-parent=</code><var>unit</var>\n</dt>\n<dd>\nIn conjunction with <code>-fdump-ada-spec[-slim]</code> above, generate Ada specs as child units of parent <var>unit</var>. </dd>\n<dt>\n<code>-fdump-go-spec=</code><var>file</var>\n</dt>\n<dd>\nFor input files in any language, generate corresponding Go declarations in <var>file</var>. This generates Go <code>const</code>, <code>type</code>, <code>var</code>, and <code>func</code> declarations which may be a useful way to start writing a Go interface to code written in some other language.   </dd>\n<dt>\n<code>@</code><var>file</var>\n</dt>\n<dd>Read command-line options from <var>file</var>. The options read are inserted in place of the original @<var>file</var> option. If <var>file</var> does not exist, or cannot be read, then the option will be treated literally, and not removed. <p>Options in <var>file</var> are separated by whitespace. A whitespace character may be included in an option by surrounding the entire option in either single or double quotes. Any character (including a backslash) may be included by prefixing the character to be included with a backslash. The <var>file</var> may itself contain additional @<var>file</var> options; any such options will be processed recursively. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Overall-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Overall-Options.html</a>\n  </p>\n</div>\n","invoking-g_002b_002b":"<h1 class=\"section\" id=\"Invoking-G_002b_002b\">3.3 Compiling C++ Programs</h1> <p>C++ source files conventionally use one of the suffixes ‘<code>.C</code>’, ‘<code>.cc</code>’, ‘<code>.cpp</code>’, ‘<code>.CPP</code>’, ‘<code>.c++</code>’, ‘<code>.cp</code>’, or ‘<code>.cxx</code>’; C++ header files often use ‘<code>.hh</code>’, ‘<code>.hpp</code>’, ‘<code>.H</code>’, or (for shared template code) ‘<code>.tcc</code>’; and preprocessed C++ files use the suffix ‘<code>.ii</code>’. GCC recognizes files with these names and compiles them as C++ programs even if you call the compiler the same way as for compiling C programs (usually with the name <code>gcc</code>). </p>\n<p>However, the use of <code>gcc</code> does not add the C++ library. <code>g++</code> is a program that calls GCC and automatically specifies linking against the C++ library. It treats ‘<code>.c</code>’, ‘<code>.h</code>’ and ‘<code>.i</code>’ files as C++ source files instead of C source files unless <code>-x</code> is used. This program is also useful when precompiling a C header file with a ‘<code>.h</code>’ extension for use in C++ compilations. On many systems, <code>g++</code> is also installed with the name <code>c++</code>. </p>\n<p>When you compile C++ programs, you may specify many of the same command-line options that you use for compiling programs in any language; or command-line options meaningful for C and related languages; or options that are meaningful only for C++ programs. See <a href=\"c-dialect-options#C-Dialect-Options\">Options Controlling C Dialect</a>, for explanations of options for languages related to C. See <a href=\"c_002b_002b-dialect-options#C_002b_002b-Dialect-Options\">Options Controlling C++ Dialect</a>, for explanations of options that are meaningful only for C++ programs. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Invoking-G_002b_002b.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Invoking-G_002b_002b.html</a>\n  </p>\n</div>\n","c-dialect-options":"<h1 class=\"section\" id=\"C-Dialect-Options\">3.4 Options Controlling C Dialect</h1> <p> The following options control the dialect of C (or languages derived from C, such as C++, Objective-C and Objective-C++) that the compiler accepts:   </p>\n<dl>\n<dt><code>-ansi</code></dt>\n<dd>\nIn C mode, this is equivalent to <code>-std=c90</code>. In C++ mode, it is equivalent to <code>-std=c++98</code>. <p>This turns off certain features of GCC that are incompatible with ISO C90 (when compiling C code), or of standard C++ (when compiling C++ code), such as the <code>asm</code> and <code>typeof</code> keywords, and predefined macros such as <code>unix</code> and <code>vax</code> that identify the type of system you are using. It also enables the undesirable and rarely used ISO trigraph feature. For the C compiler, it disables recognition of C++ style ‘<code>//</code>’ comments as well as the <code>inline</code> keyword. </p>\n<p>The alternate keywords <code>__asm__</code>, <code>__extension__</code>, <code>__inline__</code> and <code>__typeof__</code> continue to work despite <code>-ansi</code>. You would not want to use them in an ISO C program, of course, but it is useful to put them in header files that might be included in compilations done with <code>-ansi</code>. Alternate predefined macros such as <code>__unix__</code> and <code>__vax__</code> are also available, with or without <code>-ansi</code>. </p>\n<p>The <code>-ansi</code> option does not cause non-ISO programs to be rejected gratuitously. For that, <code>-Wpedantic</code> is required in addition to <code>-ansi</code>. See <a href=\"warning-options#Warning-Options\">Warning Options</a>. </p>\n<p>The macro <code>__STRICT_ANSI__</code> is predefined when the <code>-ansi</code> option is used. Some header files may notice this macro and refrain from declaring certain functions or defining certain macros that the ISO standard doesn't call for; this is to avoid interfering with any programs that might use these names for other things. </p>\n<p>Functions that are normally built in but do not have semantics defined by ISO C (such as <code>alloca</code> and <code>ffs</code>) are not built-in functions when <code>-ansi</code> is used. See <a href=\"other-builtins#Other-Builtins\">Other built-in functions provided by GCC</a>, for details of the functions affected. </p>\n</dd>\n<dt><code>-std=</code></dt>\n<dd>\nDetermine the language standard. See <a href=\"standards#Standards\">Language Standards Supported by GCC</a>, for details of these standard versions. This option is currently only supported when compiling C or C++. <p>The compiler can accept several base standards, such as ‘<code>c90</code>’ or ‘<code>c++98</code>’, and GNU dialects of those standards, such as ‘<code>gnu90</code>’ or ‘<code>gnu++98</code>’. When a base standard is specified, the compiler accepts all programs following that standard plus those using GNU extensions that do not contradict it. For example, <code>-std=c90</code> turns off certain features of GCC that are incompatible with ISO C90, such as the <code>asm</code> and <code>typeof</code> keywords, but not other GNU extensions that do not have a meaning in ISO C90, such as omitting the middle term of a <code>?:</code> expression. On the other hand, when a GNU dialect of a standard is specified, all features supported by the compiler are enabled, even when those features change the meaning of the base standard. As a result, some strict-conforming programs may be rejected. The particular standard is used by <code>-Wpedantic</code> to identify which features are GNU extensions given that version of the standard. For example <code>-std=gnu90 -Wpedantic</code> warns about C++ style ‘<code>//</code>’ comments, while <code>-std=gnu99 -Wpedantic</code> does not. </p>\n<p>A value for this option must be provided; possible values are </p>\n<dl> <dt>‘<code>c90</code>’<dt>‘<code>c89</code>’<dt>‘<code>iso9899:1990</code>’</dt>\n</dt>\n</dt>\n<dd>Support all ISO C90 programs (certain GNU extensions that conflict with ISO C90 are disabled). Same as <code>-ansi</code> for C code. </dd>\n<dt>‘<code>iso9899:199409</code>’</dt>\n<dd>ISO C90 as modified in amendment 1. </dd>\n<dt>‘<code>c99</code>’<dt>‘<code>c9x</code>’<dt>‘<code>iso9899:1999</code>’<dt>‘<code>iso9899:199x</code>’</dt>\n</dt>\n</dt>\n</dt>\n<dd>ISO C99. This standard is substantially completely supported, modulo bugs, extended identifiers (supported except for corner cases when <code>-fextended-identifiers</code> is used) and floating-point issues (mainly but not entirely relating to optional C99 features from Annexes F and G). See <a href=\"http://gcc.gnu.org/c99status.html\">http://gcc.gnu.org/c99status.html</a> for more information. The names ‘<code>c9x</code>’ and ‘<code>iso9899:199x</code>’ are deprecated. </dd>\n<dt>‘<code>c11</code>’<dt>‘<code>c1x</code>’<dt>‘<code>iso9899:2011</code>’</dt>\n</dt>\n</dt>\n<dd>ISO C11, the 2011 revision of the ISO C standard. This standard is substantially completely supported, modulo bugs, extended identifiers (supported except for corner cases when <code>-fextended-identifiers</code> is used), floating-point issues (mainly but not entirely relating to optional C11 features from Annexes F and G) and the optional Annexes K (Bounds-checking interfaces) and L (Analyzability). The name ‘<code>c1x</code>’ is deprecated. </dd>\n<dt>‘<code>gnu90</code>’<dt>‘<code>gnu89</code>’</dt>\n</dt>\n<dd>GNU dialect of ISO C90 (including some C99 features). This is the default for C code. </dd>\n<dt>‘<code>gnu99</code>’<dt>‘<code>gnu9x</code>’</dt>\n</dt>\n<dd>GNU dialect of ISO C99. The name ‘<code>gnu9x</code>’ is deprecated. </dd>\n<dt>‘<code>gnu11</code>’<dt>‘<code>gnu1x</code>’</dt>\n</dt>\n<dd>GNU dialect of ISO C11. This is intended to become the default in a future release of GCC. The name ‘<code>gnu1x</code>’ is deprecated. </dd>\n<dt>‘<code>c++98</code>’<dt>‘<code>c++03</code>’</dt>\n</dt>\n<dd>The 1998 ISO C++ standard plus the 2003 technical corrigendum and some additional defect reports. Same as <code>-ansi</code> for C++ code. </dd>\n<dt>‘<code>gnu++98</code>’<dt>‘<code>gnu++03</code>’</dt>\n</dt>\n<dd>GNU dialect of <code>-std=c++98</code>. This is the default for C++ code. </dd>\n<dt>‘<code>c++11</code>’<dt>‘<code>c++0x</code>’</dt>\n</dt>\n<dd>The 2011 ISO C++ standard plus amendments. The name ‘<code>c++0x</code>’ is deprecated. </dd>\n<dt>‘<code>gnu++11</code>’<dt>‘<code>gnu++0x</code>’</dt>\n</dt>\n<dd>GNU dialect of <code>-std=c++11</code>. The name ‘<code>gnu++0x</code>’ is deprecated. </dd>\n<dt>‘<code>c++1y</code>’</dt>\n<dd>The next revision of the ISO C++ standard, tentatively planned for 2014. Support is highly experimental, and will almost certainly change in incompatible ways in future releases. </dd>\n<dt>‘<code>gnu++1y</code>’</dt>\n<dd>GNU dialect of <code>-std=c++1y</code>. Support is highly experimental, and will almost certainly change in incompatible ways in future releases. </dd>\n</dl> </dd>\n<dt><code>-fgnu89-inline</code></dt>\n<dd>\nThe option <code>-fgnu89-inline</code> tells GCC to use the traditional GNU semantics for <code>inline</code> functions when in C99 mode. See <a href=\"inline#Inline\">An Inline Function is As Fast As a Macro</a>. This option is accepted and ignored by GCC versions 4.1.3 up to but not including 4.3. In GCC versions 4.3 and later it changes the behavior of GCC in C99 mode. Using this option is roughly equivalent to adding the <code>gnu_inline</code> function attribute to all inline functions (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>). <p>The option <code>-fno-gnu89-inline</code> explicitly tells GCC to use the C99 semantics for <code>inline</code> when in C99 or gnu99 mode (i.e., it specifies the default behavior). This option was first supported in GCC 4.3. This option is not supported in <code>-std=c90</code> or <code>-std=gnu90</code> mode. </p>\n<p>The preprocessor macros <code>__GNUC_GNU_INLINE__</code> and <code>__GNUC_STDC_INLINE__</code> may be used to check which semantics are in effect for <code>inline</code> functions. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Common-Predefined-Macros.html#Common-Predefined-Macros\">Common Predefined Macros</a>. </p>\n</dd>\n<dt>\n<code>-aux-info </code><var>filename</var>\n</dt>\n<dd>\nOutput to the given filename prototyped declarations for all functions declared and/or defined in a translation unit, including those in header files. This option is silently ignored in any language other than C. <p>Besides declarations, the file indicates, in comments, the origin of each declaration (source file and line), whether the declaration was implicit, prototyped or unprototyped (‘<code>I</code>’, ‘<code>N</code>’ for new or ‘<code>O</code>’ for old, respectively, in the first character after the line number and the colon), and whether it came from a declaration or a definition (‘<code>C</code>’ or ‘<code>F</code>’, respectively, in the following character). In the case of function definitions, a K&amp;R-style list of arguments followed by their declarations is also provided, inside comments, after the declaration. </p>\n</dd>\n<dt><code>-fallow-parameterless-variadic-functions</code></dt>\n<dd>\nAccept variadic functions without named parameters. <p>Although it is possible to define such a function, this is not very useful as it is not possible to read the arguments. This is only supported for C as this construct is allowed by C++. </p>\n</dd>\n<dt><code>-fno-asm</code></dt>\n<dd>\nDo not recognize <code>asm</code>, <code>inline</code> or <code>typeof</code> as a keyword, so that code can use these words as identifiers. You can use the keywords <code>__asm__</code>, <code>__inline__</code> and <code>__typeof__</code> instead. <code>-ansi</code> implies <code>-fno-asm</code>. <p>In C++, this switch only affects the <code>typeof</code> keyword, since <code>asm</code> and <code>inline</code> are standard keywords. You may want to use the <code>-fno-gnu-keywords</code> flag instead, which has the same effect. In C99 mode (<code>-std=c99</code> or <code>-std=gnu99</code>), this switch only affects the <code>asm</code> and <code>typeof</code> keywords, since <code>inline</code> is a standard keyword in ISO C99. </p>\n</dd>\n<dt>\n<code>-fno-builtin</code><dt>\n<code>-fno-builtin-</code><var>function</var>\n</dt>\n</dt>\n<dd>\nDon't recognize built-in functions that do not begin with ‘<code>__builtin_</code>’ as prefix. See <a href=\"other-builtins#Other-Builtins\">Other built-in functions provided by GCC</a>, for details of the functions affected, including those which are not built-in functions when <code>-ansi</code> or <code>-std</code> options for strict ISO C conformance are used because they do not have an ISO standard meaning. <p>GCC normally generates special code to handle certain built-in functions more efficiently; for instance, calls to <code>alloca</code> may become single instructions which adjust the stack directly, and calls to <code>memcpy</code> may become inline copy loops. The resulting code is often both smaller and faster, but since the function calls no longer appear as such, you cannot set a breakpoint on those calls, nor can you change the behavior of the functions by linking with a different library. In addition, when a function is recognized as a built-in function, GCC may use information about that function to warn about problems with calls to that function, or to generate more efficient code, even if the resulting code still contains calls to that function. For example, warnings are given with <code>-Wformat</code> for bad calls to <code>printf</code> when <code>printf</code> is built in and <code>strlen</code> is known not to modify global memory. </p>\n<p>With the <samp><span class=\"option\">-fno-builtin-</span><var>function</var></samp> option only the built-in function <var>function</var> is disabled. <var>function</var> must not begin with ‘<code>__builtin_</code>’. If a function is named that is not built-in in this version of GCC, this option is ignored. There is no corresponding <samp><span class=\"option\">-fbuiltin-</span><var>function</var></samp> option; if you wish to enable built-in functions selectively when using <code>-fno-builtin</code> or <code>-ffreestanding</code>, you may define macros such as: </p>\n<pre class=\"smallexample\">#define abs(n)          __builtin_abs ((n))\n#define strcpy(d, s)    __builtin_strcpy ((d), (s))</pre> </dd>\n<dt><code>-fhosted</code></dt>\n<dd>\n Assert that compilation targets a hosted environment. This implies <code>-fbuiltin</code>. A hosted environment is one in which the entire standard library is available, and in which <code>main</code> has a return type of <code>int</code>. Examples are nearly everything except a kernel. This is equivalent to <code>-fno-freestanding</code>. </dd>\n<dt><code>-ffreestanding</code></dt>\n<dd>\n Assert that compilation targets a freestanding environment. This implies <code>-fno-builtin</code>. A freestanding environment is one in which the standard library may not exist, and program startup may not necessarily be at <code>main</code>. The most obvious example is an OS kernel. This is equivalent to <code>-fno-hosted</code>. <p>See <a href=\"standards#Standards\">Language Standards Supported by GCC</a>, for details of freestanding and hosted environments. </p>\n</dd>\n<dt><code>-fopenmp</code></dt>\n<dd>\nEnable handling of OpenMP directives <code>#pragma omp</code> in C/C++ and <code>!$omp</code> in Fortran. When <code>-fopenmp</code> is specified, the compiler generates parallel code according to the OpenMP Application Program Interface v4.0 <a href=\"http://www.openmp.org/\">http://www.openmp.org/</a>. This option implies <code>-pthread</code>, and thus is only supported on targets that have support for <code>-pthread</code>. <code>-fopenmp</code> implies <code>-fopenmp-simd</code>. </dd>\n<dt><code>-fopenmp-simd</code></dt>\n<dd>\nEnable handling of OpenMP's SIMD directives with <code>#pragma omp</code> in C/C++ and <code>!$omp</code> in Fortran. Other OpenMP directives are ignored. </dd>\n<dt><code>-fcilkplus</code></dt>\n<dd>\nEnable the usage of Cilk Plus language extension features for C/C++. When the option <code>-fcilkplus</code> is specified, enable the usage of the Cilk Plus Language extension features for C/C++. The present implementation follows ABI version 1.2. This is an experimental feature that is only partially complete, and whose interface may change in future versions of GCC as the official specification changes. Currently, all features but <code>_Cilk_for</code> have been implemented. </dd>\n<dt><code>-fgnu-tm</code></dt>\n<dd>\nWhen the option <code>-fgnu-tm</code> is specified, the compiler generates code for the Linux variant of Intel's current Transactional Memory ABI specification document (Revision 1.1, May 6 2009). This is an experimental feature whose interface may change in future versions of GCC, as the official specification changes. Please note that not all architectures are supported for this feature. <p>For more information on GCC's support for transactional memory, See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/libitm/Enabling-libitm.html#Enabling-libitm\">The GNU Transactional Memory Library</a>. </p>\n<p>Note that the transactional memory feature is not supported with non-call exceptions (<code>-fnon-call-exceptions</code>). </p>\n</dd>\n<dt><code>-fms-extensions</code></dt>\n<dd>\nAccept some non-standard constructs used in Microsoft header files. <p>In C++ code, this allows member names in structures to be similar to previous types declarations. </p>\n<pre class=\"smallexample\">typedef int UOW;\nstruct ABC {\n  UOW UOW;\n};</pre> <p>Some cases of unnamed fields in structures and unions are only accepted with this option. See <a href=\"unnamed-fields#Unnamed-Fields\">Unnamed struct/union fields within structs/unions</a>, for details. </p>\n<p>Note that this option is off for all targets but i?86 and x86_64 targets using ms-abi. </p>\n</dd>\n<dt><code>-fplan9-extensions</code></dt>\n<dd>Accept some non-standard constructs used in Plan 9 code. <p>This enables <code>-fms-extensions</code>, permits passing pointers to structures with anonymous fields to functions that expect pointers to elements of the type of the field, and permits referring to anonymous fields declared using a typedef. See <a href=\"unnamed-fields#Unnamed-Fields\">Unnamed struct/union fields within structs/unions</a>, for details. This is only supported for C, not C++. </p>\n</dd>\n<dt><code>-trigraphs</code></dt>\n<dd>\nSupport ISO C trigraphs. The <code>-ansi</code> option (and <code>-std</code> options for strict ISO C conformance) implies <code>-trigraphs</code>. \n</dd>\n<dt>\n<code>-traditional</code><dt><code>-traditional-cpp</code></dt>\n</dt>\n<dd>\nFormerly, these options caused GCC to attempt to emulate a pre-standard C compiler. They are now only supported with the <code>-E</code> switch. The preprocessor continues to support a pre-standard mode. See the GNU CPP manual for details. </dd>\n<dt><code>-fcond-mismatch</code></dt>\n<dd>\nAllow conditional expressions with mismatched types in the second and third arguments. The value of such an expression is void. This option is not supported for C++. </dd>\n<dt><code>-flax-vector-conversions</code></dt>\n<dd>\nAllow implicit conversions between vectors with differing numbers of elements and/or incompatible element types. This option should not be used for new code. </dd>\n<dt><code>-funsigned-char</code></dt>\n<dd>\nLet the type <code>char</code> be unsigned, like <code>unsigned char</code>. <p>Each kind of machine has a default for what <code>char</code> should be. It is either like <code>unsigned char</code> by default or like <code>signed char</code> by default. </p>\n<p>Ideally, a portable program should always use <code>signed char</code> or <code>unsigned char</code> when it depends on the signedness of an object. But many programs have been written to use plain <code>char</code> and expect it to be signed, or expect it to be unsigned, depending on the machines they were written for. This option, and its inverse, let you make such a program work with the opposite default. </p>\n<p>The type <code>char</code> is always a distinct type from each of <code>signed char</code> or <code>unsigned char</code>, even though its behavior is always just like one of those two. </p>\n</dd>\n<dt><code>-fsigned-char</code></dt>\n<dd>\nLet the type <code>char</code> be signed, like <code>signed char</code>. <p>Note that this is equivalent to <code>-fno-unsigned-char</code>, which is the negative form of <code>-funsigned-char</code>. Likewise, the option <code>-fno-signed-char</code> is equivalent to <code>-funsigned-char</code>. </p>\n</dd>\n<dt>\n<code>-fsigned-bitfields</code><dt>\n<code>-funsigned-bitfields</code><dt>\n<code>-fno-signed-bitfields</code><dt><code>-fno-unsigned-bitfields</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThese options control whether a bit-field is signed or unsigned, when the declaration does not use either <code>signed</code> or <code>unsigned</code>. By default, such a bit-field is signed, because this is consistent: the basic integer types such as <code>int</code> are signed types. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C-Dialect-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C-Dialect-Options.html</a>\n  </p>\n</div>\n","c_002b_002b-dialect-options":"<h1 class=\"section\" id=\"C_002b_002b-Dialect-Options\">3.5 Options Controlling C++ Dialect</h1> <p>This section describes the command-line options that are only meaningful for C++ programs. You can also use most of the GNU compiler options regardless of what language your program is in. For example, you might compile a file <code>firstClass.C</code> like this: </p>\n<pre class=\"smallexample\">g++ -g -frepo -O -c firstClass.C</pre> <p class=\"noindent\">In this example, only <code>-frepo</code> is an option meant only for C++ programs; you can use the other options with any language supported by GCC. </p>\n<p>Here is a list of options that are <em>only</em> for compiling C++ programs: </p>\n<dl> <dt>\n<code>-fabi-version=</code><var>n</var>\n</dt>\n<dd>\nUse version <var>n</var> of the C++ ABI. The default is version 2. <p>Version 0 refers to the version conforming most closely to the C++ ABI specification. Therefore, the ABI obtained using version 0 will change in different versions of G++ as ABI bugs are fixed. </p>\n<p>Version 1 is the version of the C++ ABI that first appeared in G++ 3.2. </p>\n<p>Version 2 is the version of the C++ ABI that first appeared in G++ 3.4. </p>\n<p>Version 3 corrects an error in mangling a constant address as a template argument. </p>\n<p>Version 4, which first appeared in G++ 4.5, implements a standard mangling for vector types. </p>\n<p>Version 5, which first appeared in G++ 4.6, corrects the mangling of attribute const/volatile on function pointer types, decltype of a plain decl, and use of a function parameter in the declaration of another parameter. </p>\n<p>Version 6, which first appeared in G++ 4.7, corrects the promotion behavior of C++11 scoped enums and the mangling of template argument packs, const/static_cast, prefix ++ and –, and a class scope function used as a template argument. </p>\n<p>See also <code>-Wabi</code>. </p>\n</dd>\n<dt><code>-fno-access-control</code></dt>\n<dd>\nTurn off all access checking. This switch is mainly useful for working around bugs in the access control code. </dd>\n<dt><code>-fcheck-new</code></dt>\n<dd>\nCheck that the pointer returned by <code>operator new</code> is non-null before attempting to modify the storage allocated. This check is normally unnecessary because the C++ standard specifies that <code>operator new</code> only returns <code>0</code> if it is declared ‘<code>throw()</code>’, in which case the compiler always checks the return value even without this option. In all other cases, when <code>operator new</code> has a non-empty exception specification, memory exhaustion is signalled by throwing <code>std::bad_alloc</code>. See also ‘<code>new (nothrow)</code>’. </dd>\n<dt>\n<code>-fconstexpr-depth=</code><var>n</var>\n</dt>\n<dd>\nSet the maximum nested evaluation depth for C++11 constexpr functions to <var>n</var>. A limit is needed to detect endless recursion during constant expression evaluation. The minimum specified by the standard is 512. </dd>\n<dt><code>-fdeduce-init-list</code></dt>\n<dd>\nEnable deduction of a template type parameter as <code>std::initializer_list</code> from a brace-enclosed initializer list, i.e. <pre class=\"smallexample\">template &lt;class T&gt; auto forward(T t) -&gt; decltype (realfn (t))\n{\n  return realfn (t);\n}\n\nvoid f()\n{\n  forward({1,2}); // call forward&lt;std::initializer_list&lt;int&gt;&gt;\n}</pre> <p>This deduction was implemented as a possible extension to the originally proposed semantics for the C++11 standard, but was not part of the final standard, so it is disabled by default. This option is deprecated, and may be removed in a future version of G++. </p>\n</dd>\n<dt><code>-ffriend-injection</code></dt>\n<dd>\nInject friend functions into the enclosing namespace, so that they are visible outside the scope of the class in which they are declared. Friend functions were documented to work this way in the old Annotated C++ Reference Manual, and versions of G++ before 4.1 always worked that way. However, in ISO C++ a friend function that is not declared in an enclosing scope can only be found using argument dependent lookup. This option causes friends to be injected as they were in earlier releases. <p>This option is for compatibility, and may be removed in a future release of G++. </p>\n</dd>\n<dt><code>-fno-elide-constructors</code></dt>\n<dd>\nThe C++ standard allows an implementation to omit creating a temporary that is only used to initialize another object of the same type. Specifying this option disables that optimization, and forces G++ to call the copy constructor in all cases. </dd>\n<dt><code>-fno-enforce-eh-specs</code></dt>\n<dd>\nDon't generate code to check for violation of exception specifications at run time. This option violates the C++ standard, but may be useful for reducing code size in production builds, much like defining ‘<code>NDEBUG</code>’. This does not give user code permission to throw exceptions in violation of the exception specifications; the compiler still optimizes based on the specifications, so throwing an unexpected exception results in undefined behavior at run time. </dd>\n<dt>\n<code>-fextern-tls-init</code><dt><code>-fno-extern-tls-init</code></dt>\n</dt>\n<dd>\nThe C++11 and OpenMP standards allow ‘<code>thread_local</code>’ and ‘<code>threadprivate</code>’ variables to have dynamic (runtime) initialization. To support this, any use of such a variable goes through a wrapper function that performs any necessary initialization. When the use and definition of the variable are in the same translation unit, this overhead can be optimized away, but when the use is in a different translation unit there is significant overhead even if the variable doesn't actually need dynamic initialization. If the programmer can be sure that no use of the variable in a non-defining TU needs to trigger dynamic initialization (either because the variable is statically initialized, or a use of the variable in the defining TU will be executed before any uses in another TU), they can avoid this overhead with the <code>-fno-extern-tls-init</code> option. <p>On targets that support symbol aliases, the default is <code>-fextern-tls-init</code>. On targets that do not support symbol aliases, the default is <code>-fno-extern-tls-init</code>. </p>\n</dd>\n<dt>\n<code>-ffor-scope</code><dt><code>-fno-for-scope</code></dt>\n</dt>\n<dd>\nIf <code>-ffor-scope</code> is specified, the scope of variables declared in a <i>for-init-statement</i> is limited to the ‘<code>for</code>’ loop itself, as specified by the C++ standard. If <code>-fno-for-scope</code> is specified, the scope of variables declared in a <i>for-init-statement</i> extends to the end of the enclosing scope, as was the case in old versions of G++, and other (traditional) implementations of C++. <p>If neither flag is given, the default is to follow the standard, but to allow and give a warning for old-style code that would otherwise be invalid, or have different behavior. </p>\n</dd>\n<dt><code>-fno-gnu-keywords</code></dt>\n<dd>\nDo not recognize <code>typeof</code> as a keyword, so that code can use this word as an identifier. You can use the keyword <code>__typeof__</code> instead. <code>-ansi</code> implies <code>-fno-gnu-keywords</code>. </dd>\n<dt><code>-fno-implicit-templates</code></dt>\n<dd>\nNever emit code for non-inline templates that are instantiated implicitly (i.e. by use); only emit code for explicit instantiations. See <a href=\"template-instantiation#Template-Instantiation\">Template Instantiation</a>, for more information. </dd>\n<dt><code>-fno-implicit-inline-templates</code></dt>\n<dd>\nDon't emit code for implicit instantiations of inline templates, either. The default is to handle inlines differently so that compiles with and without optimization need the same set of explicit instantiations. </dd>\n<dt><code>-fno-implement-inlines</code></dt>\n<dd>\nTo save space, do not emit out-of-line copies of inline functions controlled by ‘<code>#pragma implementation</code>’. This causes linker errors if these functions are not inlined everywhere they are called. </dd>\n<dt><code>-fms-extensions</code></dt>\n<dd>\nDisable Wpedantic warnings about constructs used in MFC, such as implicit int and getting a pointer to member function via non-standard syntax. </dd>\n<dt><code>-fno-nonansi-builtins</code></dt>\n<dd>\nDisable built-in declarations of functions that are not mandated by ANSI/ISO C. These include <code>ffs</code>, <code>alloca</code>, <code>_exit</code>, <code>index</code>, <code>bzero</code>, <code>conjf</code>, and other related functions. </dd>\n<dt><code>-fnothrow-opt</code></dt>\n<dd>\nTreat a <code>throw()</code> exception specification as if it were a <code>noexcept</code> specification to reduce or eliminate the text size overhead relative to a function with no exception specification. If the function has local variables of types with non-trivial destructors, the exception specification actually makes the function smaller because the EH cleanups for those variables can be optimized away. The semantic effect is that an exception thrown out of a function with such an exception specification results in a call to <code>terminate</code> rather than <code>unexpected</code>. </dd>\n<dt><code>-fno-operator-names</code></dt>\n<dd>\nDo not treat the operator name keywords <code>and</code>, <code>bitand</code>, <code>bitor</code>, <code>compl</code>, <code>not</code>, <code>or</code> and <code>xor</code> as synonyms as keywords. </dd>\n<dt><code>-fno-optional-diags</code></dt>\n<dd>\nDisable diagnostics that the standard says a compiler does not need to issue. Currently, the only such diagnostic issued by G++ is the one for a name having multiple meanings within a class. </dd>\n<dt><code>-fpermissive</code></dt>\n<dd>\nDowngrade some diagnostics about nonconformant code from errors to warnings. Thus, using <code>-fpermissive</code> allows some nonconforming code to compile. </dd>\n<dt><code>-fno-pretty-templates</code></dt>\n<dd>\nWhen an error message refers to a specialization of a function template, the compiler normally prints the signature of the template followed by the template arguments and any typedefs or typenames in the signature (e.g. <code>void f(T) [with T = int]</code> rather than <code>void f(int)</code>) so that it's clear which template is involved. When an error message refers to a specialization of a class template, the compiler omits any template arguments that match the default template arguments for that template. If either of these behaviors make it harder to understand the error message rather than easier, you can use <code>-fno-pretty-templates</code> to disable them. </dd>\n<dt><code>-frepo</code></dt>\n<dd>\nEnable automatic template instantiation at link time. This option also implies <code>-fno-implicit-templates</code>. See <a href=\"template-instantiation#Template-Instantiation\">Template Instantiation</a>, for more information. </dd>\n<dt><code>-fno-rtti</code></dt>\n<dd>\nDisable generation of information about every class with virtual functions for use by the C++ run-time type identification features (‘<code>dynamic_cast</code>’ and ‘<code>typeid</code>’). If you don't use those parts of the language, you can save some space by using this flag. Note that exception handling uses the same information, but G++ generates it as needed. The ‘<code>dynamic_cast</code>’ operator can still be used for casts that do not require run-time type information, i.e. casts to <code>void *</code> or to unambiguous base classes. </dd>\n<dt><code>-fstats</code></dt>\n<dd>\nEmit statistics about front-end processing at the end of the compilation. This information is generally only useful to the G++ development team. </dd>\n<dt><code>-fstrict-enums</code></dt>\n<dd>\nAllow the compiler to optimize using the assumption that a value of enumerated type can only be one of the values of the enumeration (as defined in the C++ standard; basically, a value that can be represented in the minimum number of bits needed to represent all the enumerators). This assumption may not be valid if the program uses a cast to convert an arbitrary integer value to the enumerated type. </dd>\n<dt>\n<code>-ftemplate-backtrace-limit=</code><var>n</var>\n</dt>\n<dd>\nSet the maximum number of template instantiation notes for a single warning or error to <var>n</var>. The default value is 10. </dd>\n<dt>\n<code>-ftemplate-depth=</code><var>n</var>\n</dt>\n<dd>\nSet the maximum instantiation depth for template classes to <var>n</var>. A limit on the template instantiation depth is needed to detect endless recursions during template class instantiation. ANSI/ISO C++ conforming programs must not rely on a maximum depth greater than 17 (changed to 1024 in C++11). The default value is 900, as the compiler can run out of stack space before hitting 1024 in some situations. </dd>\n<dt><code>-fno-threadsafe-statics</code></dt>\n<dd>\nDo not emit the extra code to use the routines specified in the C++ ABI for thread-safe initialization of local statics. You can use this option to reduce code size slightly in code that doesn't need to be thread-safe. </dd>\n<dt><code>-fuse-cxa-atexit</code></dt>\n<dd>\nRegister destructors for objects with static storage duration with the <code>__cxa_atexit</code> function rather than the <code>atexit</code> function. This option is required for fully standards-compliant handling of static destructors, but only works if your C library supports <code>__cxa_atexit</code>. </dd>\n<dt><code>-fno-use-cxa-get-exception-ptr</code></dt>\n<dd>\nDon't use the <code>__cxa_get_exception_ptr</code> runtime routine. This causes <code>std::uncaught_exception</code> to be incorrect, but is necessary if the runtime routine is not available. </dd>\n<dt><code>-fvisibility-inlines-hidden</code></dt>\n<dd>\nThis switch declares that the user does not attempt to compare pointers to inline functions or methods where the addresses of the two functions are taken in different shared objects. <p>The effect of this is that GCC may, effectively, mark inline methods with <code>__attribute__ ((visibility (\"hidden\")))</code> so that they do not appear in the export table of a DSO and do not require a PLT indirection when used within the DSO. Enabling this option can have a dramatic effect on load and link times of a DSO as it massively reduces the size of the dynamic export table when the library makes heavy use of templates. </p>\n<p>The behavior of this switch is not quite the same as marking the methods as hidden directly, because it does not affect static variables local to the function or cause the compiler to deduce that the function is defined in only one shared object. </p>\n<p>You may mark a method as having a visibility explicitly to negate the effect of the switch for that method. For example, if you do want to compare pointers to a particular inline method, you might mark it as having default visibility. Marking the enclosing class with explicit visibility has no effect. </p>\n<p>Explicitly instantiated inline methods are unaffected by this option as their linkage might otherwise cross a shared library boundary. See <a href=\"template-instantiation#Template-Instantiation\">Template Instantiation</a>. </p>\n</dd>\n<dt><code>-fvisibility-ms-compat</code></dt>\n<dd>\nThis flag attempts to use visibility settings to make GCC's C++ linkage model compatible with that of Microsoft Visual Studio. <p>The flag makes these changes to GCC's linkage model: </p>\n<ol type=\"1\" start=\"1\"> <li>It sets the default visibility to <code>hidden</code>, like <code>-fvisibility=hidden</code>. </li>\n<li>Types, but not their members, are not hidden by default. </li>\n<li>The One Definition Rule is relaxed for types without explicit visibility specifications that are defined in more than one shared object: those declarations are permitted if they are permitted when this option is not used. </li>\n</ol> <p>In new code it is better to use <code>-fvisibility=hidden</code> and export those classes that are intended to be externally visible. Unfortunately it is possible for code to rely, perhaps accidentally, on the Visual Studio behavior. </p>\n<p>Among the consequences of these changes are that static data members of the same type with the same name but defined in different shared objects are different, so changing one does not change the other; and that pointers to function members defined in different shared objects may not compare equal. When this flag is given, it is a violation of the ODR to define types with the same name differently. </p>\n</dd>\n<dt>\n<code>-fvtable-verify=</code><var>std|preinit|none</var>\n</dt>\n<dd>\nTurn on (or off, if using <code>-fvtable-verify=none</code>) the security feature that verifies at runtime, for every virtual call that is made, that the vtable pointer through which the call is made is valid for the type of the object, and has not been corrupted or overwritten. If an invalid vtable pointer is detected (at runtime), an error is reported and execution of the program is immediately halted. <p>This option causes runtime data structures to be built, at program start up, for verifying the vtable pointers. The options <code>std</code> and <code>preinit</code> control the timing of when these data structures are built. In both cases the data structures are built before execution reaches 'main'. The <code>-fvtable-verify=std</code> causes these data structure to be built after the shared libraries have been loaded and initialized. <code>-fvtable-verify=preinit</code> causes them to be built before the shared libraries have been loaded and initialized. </p>\n<p>If this option appears multiple times in the compiler line, with different values specified, 'none' will take highest priority over both 'std' and 'preinit'; 'preinit' will take priority over 'std'. </p>\n</dd>\n<dt><code>-fvtv-debug</code></dt>\n<dd>\nCauses debug versions of the runtime functions for the vtable verification feature to be called. This assumes the <code>-fvtable-verify=std</code> or <code>-fvtable-verify=preinit</code> has been used. This flag will also cause the compiler to keep track of which vtable pointers it found for each class, and record that information in the file “vtv_set_ptr_data.log”, in the dump file directory on the user's machine. <p>Note: This feature APPENDS data to the log file. If you want a fresh log file, be sure to delete any existing one. </p>\n</dd>\n<dt><code>-fvtv-counts</code></dt>\n<dd>\nThis is a debugging flag. When used in conjunction with <code>-fvtable-verify=std</code> or <code>-fvtable-verify=preinit</code>, this causes the compiler to keep track of the total number of virtual calls it encountered and the number of verifications it inserted. It also counts the number of calls to certain runtime library functions that it inserts. This information, for each compilation unit, is written to a file named “vtv_count_data.log”, in the dump_file directory on the user's machine. It also counts the size of the vtable pointer sets for each class, and writes this information to “vtv_class_set_sizes.log” in the same directory. <p>Note: This feature APPENDS data to the log files. To get a fresh log files, be sure to delete any existing ones. </p>\n</dd>\n<dt><code>-fno-weak</code></dt>\n<dd>\nDo not use weak symbol support, even if it is provided by the linker. By default, G++ uses weak symbols if they are available. This option exists only for testing, and should not be used by end-users; it results in inferior code and has no benefits. This option may be removed in a future release of G++. </dd>\n<dt><code>-nostdinc++</code></dt>\n<dd>\nDo not search for header files in the standard directories specific to C++, but do still search the other standard directories. (This option is used when building the C++ library.) </dd>\n</dl> <p>In addition, these optimization, warning, and code generation options have meanings only for C++ programs: </p>\n<dl> <dt>\n<code>-Wabi </code><span class=\"roman\">(C, Objective-C, C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when G++ generates code that is probably not compatible with the vendor-neutral C++ ABI. Although an effort has been made to warn about all such cases, there are probably some cases that are not warned about, even though G++ is generating incompatible code. There may also be cases where warnings are emitted even though the code that is generated is compatible. <p>You should rewrite your code to avoid these warnings if you are concerned about the fact that code generated by G++ may not be binary compatible with code generated by other compilers. </p>\n<p>The known incompatibilities in <code>-fabi-version=2</code> (the default) include: </p>\n<ul> <li>A template with a non-type template parameter of reference type is mangled incorrectly: <pre class=\"smallexample\">extern int N;\ntemplate &lt;int &amp;&gt; struct S {};\nvoid n (S&lt;N&gt;) {2}</pre> <p>This is fixed in <code>-fabi-version=3</code>. </p>\n</li>\n<li>SIMD vector types declared using <code>__attribute ((vector_size))</code> are mangled in a non-standard way that does not allow for overloading of functions taking vectors of different sizes. <p>The mangling is changed in <code>-fabi-version=4</code>. </p>\n</li>\n</ul> <p>The known incompatibilities in <code>-fabi-version=1</code> include: </p>\n<ul> <li>Incorrect handling of tail-padding for bit-fields. G++ may attempt to pack data into the same byte as a base class. For example: <pre class=\"smallexample\">struct A { virtual void f(); int f1 : 1; };\nstruct B : public A { int f2 : 1; };</pre> <p class=\"noindent\">In this case, G++ places <code>B::f2</code> into the same byte as <code>A::f1</code>; other compilers do not. You can avoid this problem by explicitly padding <code>A</code> so that its size is a multiple of the byte size on your platform; that causes G++ and other compilers to lay out <code>B</code> identically. </p>\n</li>\n<li>Incorrect handling of tail-padding for virtual bases. G++ does not use tail padding when laying out virtual bases. For example: <pre class=\"smallexample\">struct A { virtual void f(); char c1; };\nstruct B { B(); char c2; };\nstruct C : public A, public virtual B {};</pre> <p class=\"noindent\">In this case, G++ does not place <code>B</code> into the tail-padding for <code>A</code>; other compilers do. You can avoid this problem by explicitly padding <code>A</code> so that its size is a multiple of its alignment (ignoring virtual base classes); that causes G++ and other compilers to lay out <code>C</code> identically. </p>\n</li>\n<li>Incorrect handling of bit-fields with declared widths greater than that of their underlying types, when the bit-fields appear in a union. For example: <pre class=\"smallexample\">union U { int i : 4096; };</pre> <p class=\"noindent\">Assuming that an <code>int</code> does not have 4096 bits, G++ makes the union too small by the number of bits in an <code>int</code>. </p>\n</li>\n<li>Empty classes can be placed at incorrect offsets. For example: <pre class=\"smallexample\">struct A {};\n\nstruct B {\n  A a;\n  virtual void f ();\n};\n\nstruct C : public B, public A {};</pre> <p class=\"noindent\">G++ places the <code>A</code> base class of <code>C</code> at a nonzero offset; it should be placed at offset zero. G++ mistakenly believes that the <code>A</code> data member of <code>B</code> is already at offset zero. </p>\n</li>\n<li>Names of template functions whose types involve <code>typename</code> or template template parameters can be mangled incorrectly. <pre class=\"smallexample\">template &lt;typename Q&gt;\nvoid f(typename Q::X) {}\n\ntemplate &lt;template &lt;typename&gt; class Q&gt;\nvoid f(typename Q&lt;int&gt;::X) {}</pre> <p class=\"noindent\">Instantiations of these templates may be mangled incorrectly. </p>\n</li>\n</ul> <p>It also warns about psABI-related changes. The known psABI changes at this point include: </p>\n<ul> <li>For SysV/x86-64, unions with <code>long double</code> members are passed in memory as specified in psABI. For example: <pre class=\"smallexample\">union U {\n  long double ld;\n  int i;\n};</pre> <p class=\"noindent\"><code>union U</code> is always passed in memory. </p>\n</li>\n</ul> </dd>\n<dt>\n<code>-Wctor-dtor-privacy </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when a class seems unusable because all the constructors or destructors in that class are private, and it has neither friends nor public static member functions. Also warn if there are no non-private methods, and there's at least one private member function that isn't a constructor or destructor. </dd>\n<dt>\n<code>-Wdelete-non-virtual-dtor </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when ‘<code>delete</code>’ is used to destroy an instance of a class that has virtual functions and non-virtual destructor. It is unsafe to delete an instance of a derived class through a pointer to a base class if the base class does not have a virtual destructor. This warning is enabled by <code>-Wall</code>. </dd>\n<dt>\n<code>-Wliteral-suffix </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when a string or character literal is followed by a ud-suffix which does not begin with an underscore. As a conforming extension, GCC treats such suffixes as separate preprocessing tokens in order to maintain backwards compatibility with code that uses formatting macros from <code>&lt;inttypes.h&gt;</code>. For example: <pre class=\"smallexample\">#define __STDC_FORMAT_MACROS\n#include &lt;inttypes.h&gt;\n#include &lt;stdio.h&gt;\n\nint main() {\n  int64_t i64 = 123;\n  printf(\"My int64: %\"PRId64\"\\n\", i64);\n}</pre> <p>In this case, <code>PRId64</code> is treated as a separate preprocessing token. </p>\n<p>This warning is enabled by default. </p>\n</dd>\n<dt>\n<code>-Wnarrowing </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when a narrowing conversion prohibited by C++11 occurs within ‘<code>{ }</code>’, e.g. <pre class=\"smallexample\">int i = { 2.2 }; // error: narrowing from double to int</pre> <p>This flag is included in <code>-Wall</code> and <code>-Wc++11-compat</code>. </p>\n<p>With <code>-std=c++11</code>, <code>-Wno-narrowing</code> suppresses the diagnostic required by the standard. Note that this does not affect the meaning of well-formed code; narrowing conversions are still considered ill-formed in SFINAE context. </p>\n</dd>\n<dt>\n<code>-Wnoexcept </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. ‘<code>throw()</code>’ or ‘<code>noexcept</code>’) but is known by the compiler to never throw an exception. </dd>\n<dt>\n<code>-Wnon-virtual-dtor </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when a class has virtual functions and an accessible non-virtual destructor itself or in an accessible polymorphic base class, in which case it is possible but unsafe to delete an instance of a derived class through a pointer to the class itself or base class. This warning is automatically enabled if <code>-Weffc++</code> is specified. </dd>\n<dt>\n<code>-Wreorder </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when the order of member initializers given in the code does not match the order in which they must be executed. For instance: <pre class=\"smallexample\">struct A {\n  int i;\n  int j;\n  A(): j (0), i (1) { }\n};</pre> <p class=\"noindent\">The compiler rearranges the member initializers for ‘<code>i</code>’ and ‘<code>j</code>’ to match the declaration order of the members, emitting a warning to that effect. This warning is enabled by <code>-Wall</code>. </p>\n</dd>\n<dt>\n<code>-fext-numeric-literals </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nAccept imaginary, fixed-point, or machine-defined literal number suffixes as GNU extensions. When this option is turned off these suffixes are treated as C++11 user-defined literal numeric suffixes. This is on by default for all pre-C++11 dialects and all GNU dialects: <code>-std=c++98</code>, <code>-std=gnu++98</code>, <code>-std=gnu++11</code>, <code>-std=gnu++1y</code>. This option is off by default for ISO C++11 onwards (<code>-std=c++11</code>, ...). </dd>\n</dl> <p>The following <code>-W...</code> options are not affected by <code>-Wall</code>. </p>\n<dl> <dt>\n<code>-Weffc++ </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn about violations of the following style guidelines from Scott Meyers' Effective C++ series of books: <ul> <li>Define a copy constructor and an assignment operator for classes with dynamically-allocated memory. </li>\n<li>Prefer initialization to assignment in constructors. </li>\n<li>Have <code>operator=</code> return a reference to <code>*this</code>. </li>\n<li>Don't try to return a reference when you must return an object. </li>\n<li>Distinguish between prefix and postfix forms of increment and decrement operators. </li>\n<li>Never overload <code>&amp;&amp;</code>, <code>||</code>, or <code>,</code>. </li>\n</ul> <p>This option also enables <code>-Wnon-virtual-dtor</code>, which is also one of the effective C++ recommendations. However, the check is extended to warn about the lack of virtual destructor in accessible non-polymorphic bases classes too. </p>\n<p>When selecting this option, be aware that the standard library headers do not obey all of these guidelines; use ‘<code>grep -v</code>’ to filter out those warnings. </p>\n</dd>\n<dt>\n<code>-Wstrict-null-sentinel </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn about the use of an uncasted <code>NULL</code> as sentinel. When compiling only with GCC this is a valid sentinel, as <code>NULL</code> is defined to <code>__null</code>. Although it is a null pointer constant rather than a null pointer, it is guaranteed to be of the same size as a pointer. But this use is not portable across different compilers. </dd>\n<dt>\n<code>-Wno-non-template-friend </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nDisable warnings when non-templatized friend functions are declared within a template. Since the advent of explicit template specification support in G++, if the name of the friend is an unqualified-id (i.e., ‘<code>friend foo(int)</code>’), the C++ language specification demands that the friend declare or define an ordinary, nontemplate function. (Section 14.5.3). Before G++ implemented explicit specification, unqualified-ids could be interpreted as a particular specialization of a templatized function. Because this non-conforming behavior is no longer the default behavior for G++, <code>-Wnon-template-friend</code> allows the compiler to check existing code for potential trouble spots and is on by default. This new compiler behavior can be turned off with <code>-Wno-non-template-friend</code>, which keeps the conformant compiler code but disables the helpful warning. </dd>\n<dt>\n<code>-Wold-style-cast </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn if an old-style (C-style) cast to a non-void type is used within a C++ program. The new-style casts (‘<code>dynamic_cast</code>’, ‘<code>static_cast</code>’, ‘<code>reinterpret_cast</code>’, and ‘<code>const_cast</code>’) are less vulnerable to unintended effects and much easier to search for. </dd>\n<dt>\n<code>-Woverloaded-virtual </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when a function declaration hides virtual functions from a base class. For example, in: <pre class=\"smallexample\">struct A {\n  virtual void f();\n};\n\nstruct B: public A {\n  void f(int);\n};</pre> <p>the <code>A</code> class version of <code>f</code> is hidden in <code>B</code>, and code like: </p>\n<pre class=\"smallexample\">B* b;\nb-&gt;f();</pre> <p class=\"noindent\">fails to compile. </p>\n</dd>\n<dt>\n<code>-Wno-pmf-conversions </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nDisable the diagnostic for converting a bound pointer to member function to a plain pointer. </dd>\n<dt>\n<code>-Wsign-promo </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when overload resolution chooses a promotion from unsigned or enumerated type to a signed type, over a conversion to an unsigned type of the same size. Previous versions of G++ tried to preserve unsignedness, but the standard mandates the current behavior. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Dialect-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Dialect-Options.html</a>\n  </p>\n</div>\n","objective_002dc-and-objective_002dc_002b_002b-dialect-options":"<h1 class=\"section\" id=\"Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options\">3.6 Options Controlling Objective-C and Objective-C++ Dialects</h1> <p>(NOTE: This manual does not describe the Objective-C and Objective-C++ languages themselves. See <a href=\"standards#Standards\">Language Standards Supported by GCC</a>, for references.) </p>\n<p>This section describes the command-line options that are only meaningful for Objective-C and Objective-C++ programs. You can also use most of the language-independent GNU compiler options. For example, you might compile a file <code>some_class.m</code> like this: </p>\n<pre class=\"smallexample\">gcc -g -fgnu-runtime -O -c some_class.m</pre> <p class=\"noindent\">In this example, <code>-fgnu-runtime</code> is an option meant only for Objective-C and Objective-C++ programs; you can use the other options with any language supported by GCC. </p>\n<p>Note that since Objective-C is an extension of the C language, Objective-C compilations may also use options specific to the C front-end (e.g., <code>-Wtraditional</code>). Similarly, Objective-C++ compilations may use C++-specific options (e.g., <code>-Wabi</code>). </p>\n<p>Here is a list of options that are <em>only</em> for compiling Objective-C and Objective-C++ programs: </p>\n<dl> <dt>\n<code>-fconstant-string-class=</code><var>class-name</var>\n</dt>\n<dd>\nUse <var>class-name</var> as the name of the class to instantiate for each literal string specified with the syntax <code>@\"...\"</code>. The default class name is <code>NXConstantString</code> if the GNU runtime is being used, and <code>NSConstantString</code> if the NeXT runtime is being used (see below). The <code>-fconstant-cfstrings</code> option, if also present, overrides the <code>-fconstant-string-class</code> setting and cause <code>@\"...\"</code> literals to be laid out as constant CoreFoundation strings. </dd>\n<dt><code>-fgnu-runtime</code></dt>\n<dd>\nGenerate object code compatible with the standard GNU Objective-C runtime. This is the default for most types of systems. </dd>\n<dt><code>-fnext-runtime</code></dt>\n<dd>\nGenerate output compatible with the NeXT runtime. This is the default for NeXT-based systems, including Darwin and Mac OS X. The macro <code>__NEXT_RUNTIME__</code> is predefined if (and only if) this option is used. </dd>\n<dt><code>-fno-nil-receivers</code></dt>\n<dd>\nAssume that all Objective-C message dispatches (<code>[receiver\nmessage:arg]</code>) in this translation unit ensure that the receiver is not <code>nil</code>. This allows for more efficient entry points in the runtime to be used. This option is only available in conjunction with the NeXT runtime and ABI version 0 or 1. </dd>\n<dt>\n<code>-fobjc-abi-version=</code><var>n</var>\n</dt>\n<dd>\nUse version <var>n</var> of the Objective-C ABI for the selected runtime. This option is currently supported only for the NeXT runtime. In that case, Version 0 is the traditional (32-bit) ABI without support for properties and other Objective-C 2.0 additions. Version 1 is the traditional (32-bit) ABI with support for properties and other Objective-C 2.0 additions. Version 2 is the modern (64-bit) ABI. If nothing is specified, the default is Version 0 on 32-bit target machines, and Version 2 on 64-bit target machines. </dd>\n<dt><code>-fobjc-call-cxx-cdtors</code></dt>\n<dd>\nFor each Objective-C class, check if any of its instance variables is a C++ object with a non-trivial default constructor. If so, synthesize a special <code>- (id) .cxx_construct</code> instance method which runs non-trivial default constructors on any such instance variables, in order, and then return <code>self</code>. Similarly, check if any instance variable is a C++ object with a non-trivial destructor, and if so, synthesize a special <code>- (void) .cxx_destruct</code> method which runs all such default destructors, in reverse order. <p>The <code>- (id) .cxx_construct</code> and <code>- (void) .cxx_destruct</code> methods thusly generated only operate on instance variables declared in the current Objective-C class, and not those inherited from superclasses. It is the responsibility of the Objective-C runtime to invoke all such methods in an object's inheritance hierarchy. The <code>- (id) .cxx_construct</code> methods are invoked by the runtime immediately after a new object instance is allocated; the <code>- (void) .cxx_destruct</code> methods are invoked immediately before the runtime deallocates an object instance. </p>\n<p>As of this writing, only the NeXT runtime on Mac OS X 10.4 and later has support for invoking the <code>- (id) .cxx_construct</code> and <code>- (void) .cxx_destruct</code> methods. </p>\n</dd>\n<dt><code>-fobjc-direct-dispatch</code></dt>\n<dd>\nAllow fast jumps to the message dispatcher. On Darwin this is accomplished via the comm page. </dd>\n<dt><code>-fobjc-exceptions</code></dt>\n<dd>\nEnable syntactic support for structured exception handling in Objective-C, similar to what is offered by C++ and Java. This option is required to use the Objective-C keywords <code>@try</code>, <code>@throw</code>, <code>@catch</code>, <code>@finally</code> and <code>@synchronized</code>. This option is available with both the GNU runtime and the NeXT runtime (but not available in conjunction with the NeXT runtime on Mac OS X 10.2 and earlier). </dd>\n<dt><code>-fobjc-gc</code></dt>\n<dd>\nEnable garbage collection (GC) in Objective-C and Objective-C++ programs. This option is only available with the NeXT runtime; the GNU runtime has a different garbage collection implementation that does not require special compiler flags. </dd>\n<dt><code>-fobjc-nilcheck</code></dt>\n<dd>\nFor the NeXT runtime with version 2 of the ABI, check for a nil receiver in method invocations before doing the actual method call. This is the default and can be disabled using <code>-fno-objc-nilcheck</code>. Class methods and super calls are never checked for nil in this way no matter what this flag is set to. Currently this flag does nothing when the GNU runtime, or an older version of the NeXT runtime ABI, is used. </dd>\n<dt><code>-fobjc-std=objc1</code></dt>\n<dd>\nConform to the language syntax of Objective-C 1.0, the language recognized by GCC 4.0. This only affects the Objective-C additions to the C/C++ language; it does not affect conformance to C/C++ standards, which is controlled by the separate C/C++ dialect option flags. When this option is used with the Objective-C or Objective-C++ compiler, any Objective-C syntax that is not recognized by GCC 4.0 is rejected. This is useful if you need to make sure that your Objective-C code can be compiled with older versions of GCC. </dd>\n<dt><code>-freplace-objc-classes</code></dt>\n<dd>\nEmit a special marker instructing <code>ld(1)</code> not to statically link in the resulting object file, and allow <code>dyld(1)</code> to load it in at run time instead. This is used in conjunction with the Fix-and-Continue debugging mode, where the object file in question may be recompiled and dynamically reloaded in the course of program execution, without the need to restart the program itself. Currently, Fix-and-Continue functionality is only available in conjunction with the NeXT runtime on Mac OS X 10.3 and later. </dd>\n<dt><code>-fzero-link</code></dt>\n<dd>\nWhen compiling for the NeXT runtime, the compiler ordinarily replaces calls to <code>objc_getClass(\"...\")</code> (when the name of the class is known at compile time) with static class references that get initialized at load time, which improves run-time performance. Specifying the <code>-fzero-link</code> flag suppresses this behavior and causes calls to <code>objc_getClass(\"...\")</code> to be retained. This is useful in Zero-Link debugging mode, since it allows for individual class implementations to be modified during program execution. The GNU runtime currently always retains calls to <code>objc_get_class(\"...\")</code> regardless of command-line options. </dd>\n<dt><code>-gen-decls</code></dt>\n<dd>\nDump interface declarations for all classes seen in the source file to a file named <samp><var>sourcename</var><span class=\"file\">.decl</span></samp>. </dd>\n<dt>\n<code>-Wassign-intercept </code><span class=\"roman\">(Objective-C and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn whenever an Objective-C assignment is being intercepted by the garbage collector. </dd>\n<dt>\n<code>-Wno-protocol </code><span class=\"roman\">(Objective-C and Objective-C++ only)</span>\n</dt>\n<dd>\nIf a class is declared to implement a protocol, a warning is issued for every method in the protocol that is not implemented by the class. The default behavior is to issue a warning for every method not explicitly implemented in the class, even if a method implementation is inherited from the superclass. If you use the <code>-Wno-protocol</code> option, then methods inherited from the superclass are considered to be implemented, and no warning is issued for them. </dd>\n<dt>\n<code>-Wselector </code><span class=\"roman\">(Objective-C and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn if multiple methods of different types for the same selector are found during compilation. The check is performed on the list of methods in the final stage of compilation. Additionally, a check is performed for each selector appearing in a <code>@selector(...)</code> expression, and a corresponding method for that selector has been found during compilation. Because these checks scan the method table only at the end of compilation, these warnings are not produced if the final stage of compilation is not reached, for example because an error is found during compilation, or because the <code>-fsyntax-only</code> option is being used. </dd>\n<dt>\n<code>-Wstrict-selector-match </code><span class=\"roman\">(Objective-C and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn if multiple methods with differing argument and/or return types are found for a given selector when attempting to send a message using this selector to a receiver of type <code>id</code> or <code>Class</code>. When this flag is off (which is the default behavior), the compiler omits such warnings if any differences found are confined to types that share the same size and alignment. </dd>\n<dt>\n<code>-Wundeclared-selector </code><span class=\"roman\">(Objective-C and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn if a <code>@selector(...)</code> expression referring to an undeclared selector is found. A selector is considered undeclared if no method with that name has been declared before the <code>@selector(...)</code> expression, either explicitly in an <code>@interface</code> or <code>@protocol</code> declaration, or implicitly in an <code>@implementation</code> section. This option always performs its checks as soon as a <code>@selector(...)</code> expression is found, while <code>-Wselector</code> only performs its checks in the final stage of compilation. This also enforces the coding style convention that methods and selectors must be declared before being used. </dd>\n<dt><code>-print-objc-runtime-info</code></dt>\n<dd>\nGenerate C header describing the largest structure that is passed by value, if any. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html</a>\n  </p>\n</div>\n","language-independent-options":"<h1 class=\"section\" id=\"Language-Independent-Options\">3.7 Options to Control Diagnostic Messages Formatting</h1> <p> Traditionally, diagnostic messages have been formatted irrespective of the output device's aspect (e.g. its width, <small class=\"dots\">...</small>). You can use the options described below to control the formatting algorithm for diagnostic messages, e.g. how many characters per line, how often source location information should be reported. Note that some language front ends may not honor these options. </p>\n<dl> <dt>\n<code>-fmessage-length=</code><var>n</var>\n</dt>\n<dd>\nTry to format error messages so that they fit on lines of about <var>n</var> characters. The default is 72 characters for <code>g++</code> and 0 for the rest of the front ends supported by GCC. If <var>n</var> is zero, then no line-wrapping is done; each error message appears on a single line. </dd>\n<dt><code>-fdiagnostics-show-location=once</code></dt>\n<dd>\nOnly meaningful in line-wrapping mode. Instructs the diagnostic messages reporter to emit source location information <em>once</em>; that is, in case the message is too long to fit on a single physical line and has to be wrapped, the source location won't be emitted (as prefix) again, over and over, in subsequent continuation lines. This is the default behavior. </dd>\n<dt><code>-fdiagnostics-show-location=every-line</code></dt>\n<dd>Only meaningful in line-wrapping mode. Instructs the diagnostic messages reporter to emit the same source location information (as prefix) for physical lines that result from the process of breaking a message which is too long to fit on a single line. </dd>\n<dt>\n<code>-fdiagnostics-color[=</code><var>WHEN</var><code>]</code><dt><code>-fno-diagnostics-color</code></dt>\n</dt>\n<dd>\nUse color in diagnostics. <var>WHEN</var> is ‘<code>never</code>’, ‘<code>always</code>’, or ‘<code>auto</code>’. The default is ‘<code>never</code>’ if <code>GCC_COLORS</code> environment variable isn't present in the environment, and ‘<code>auto</code>’ otherwise. ‘<code>auto</code>’ means to use color only when the standard error is a terminal. The forms <code>-fdiagnostics-color</code> and <code>-fno-diagnostics-color</code> are aliases for <code>-fdiagnostics-color=always</code> and <code>-fdiagnostics-color=never</code>, respectively. <p>The colors are defined by the environment variable <code>GCC_COLORS</code>. Its value is a colon-separated list of capabilities and Select Graphic Rendition (SGR) substrings. SGR commands are interpreted by the terminal or terminal emulator. (See the section in the documentation of your text terminal for permitted values and their meanings as character attributes.) These substring values are integers in decimal representation and can be concatenated with semicolons. Common values to concatenate include ‘<code>1</code>’ for bold, ‘<code>4</code>’ for underline, ‘<code>5</code>’ for blink, ‘<code>7</code>’ for inverse, ‘<code>39</code>’ for default foreground color, ‘<code>30</code>’ to ‘<code>37</code>’ for foreground colors, ‘<code>90</code>’ to ‘<code>97</code>’ for 16-color mode foreground colors, ‘<code>38;5;0</code>’ to ‘<code>38;5;255</code>’ for 88-color and 256-color modes foreground colors, ‘<code>49</code>’ for default background color, ‘<code>40</code>’ to ‘<code>47</code>’ for background colors, ‘<code>100</code>’ to ‘<code>107</code>’ for 16-color mode background colors, and ‘<code>48;5;0</code>’ to ‘<code>48;5;255</code>’ for 88-color and 256-color modes background colors. </p>\n<p>The default <code>GCC_COLORS</code> is ‘<code>error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01</code>’ where ‘<code>01;31</code>’ is bold red, ‘<code>01;35</code>’ is bold magenta, ‘<code>01;36</code>’ is bold cyan, ‘<code>01;32</code>’ is bold green and ‘<code>01</code>’ is bold. Setting <code>GCC_COLORS</code> to the empty string disables colors. Supported capabilities are as follows. </p>\n<dl> <dt><code>error=</code></dt>\n<dd>\nSGR substring for error: markers. </dd>\n<dt><code>warning=</code></dt>\n<dd>\nSGR substring for warning: markers. </dd>\n<dt><code>note=</code></dt>\n<dd>\nSGR substring for note: markers. </dd>\n<dt><code>caret=</code></dt>\n<dd>\nSGR substring for caret line. </dd>\n<dt><code>locus=</code></dt>\n<dd>\nSGR substring for location information, ‘<code>file:line</code>’ or ‘<code>file:line:column</code>’ etc. </dd>\n<dt><code>quote=</code></dt>\n<dd>\nSGR substring for information printed within quotes. </dd>\n</dl> </dd>\n<dt><code>-fno-diagnostics-show-option</code></dt>\n<dd>\nBy default, each diagnostic emitted includes text indicating the command-line option that directly controls the diagnostic (if such an option is known to the diagnostic machinery). Specifying the <code>-fno-diagnostics-show-option</code> flag suppresses that behavior. </dd>\n<dt><code>-fno-diagnostics-show-caret</code></dt>\n<dd>\nBy default, each diagnostic emitted includes the original source line and a caret '^' indicating the column. This option suppresses this information. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Language-Independent-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Language-Independent-Options.html</a>\n  </p>\n</div>\n","warning-options":"<h1 class=\"section\" id=\"Warning-Options\">3.8 Options to Request or Suppress Warnings</h1> <p> Warnings are diagnostic messages that report constructions that are not inherently erroneous but that are risky or suggest there may have been an error. </p>\n<p>The following language-independent options do not enable specific warnings but control the kinds of diagnostics produced by GCC.  </p>\n<dl>\n<dt><code>-fsyntax-only</code></dt>\n<dd>\nCheck the code for syntax errors, but don't do anything beyond that. </dd>\n<dt>\n<code>-fmax-errors=</code><var>n</var>\n</dt>\n<dd>\nLimits the maximum number of error messages to <var>n</var>, at which point GCC bails out rather than attempting to continue processing the source code. If <var>n</var> is 0 (the default), there is no limit on the number of error messages produced. If <code>-Wfatal-errors</code> is also specified, then <code>-Wfatal-errors</code> takes precedence over this option. </dd>\n<dt><code>-w</code></dt>\n<dd>\nInhibit all warning messages. </dd>\n<dt><code>-Werror</code></dt>\n<dd>\nMake all warnings into errors. </dd>\n<dt><code>-Werror=</code></dt>\n<dd>\nMake the specified warning into an error. The specifier for a warning is appended; for example <code>-Werror=switch</code> turns the warnings controlled by <code>-Wswitch</code> into errors. This switch takes a negative form, to be used to negate <code>-Werror</code> for specific warnings; for example <code>-Wno-error=switch</code> makes <code>-Wswitch</code> warnings not be errors, even when <code>-Werror</code> is in effect. <p>The warning message for each controllable warning includes the option that controls the warning. That option can then be used with <code>-Werror=</code> and <code>-Wno-error=</code> as described above. (Printing of the option in the warning message can be disabled using the <code>-fno-diagnostics-show-option</code> flag.) </p>\n<p>Note that specifying <code>-Werror=</code><var>foo</var> automatically implies <code>-W</code><var>foo</var>. However, <code>-Wno-error=</code><var>foo</var> does not imply anything. </p>\n</dd>\n<dt><code>-Wfatal-errors</code></dt>\n<dd>\nThis option causes the compiler to abort compilation on the first error occurred rather than trying to keep going and printing further error messages. </dd>\n</dl> <p>You can request many specific warnings with options beginning with ‘<code>-W</code>’, for example <code>-Wimplicit</code> to request warnings on implicit declarations. Each of these specific warning options also has a negative form beginning ‘<code>-Wno-</code>’ to turn off warnings; for example, <code>-Wno-implicit</code>. This manual lists only one of the two forms, whichever is not the default. For further language-specific options also refer to <a href=\"c_002b_002b-dialect-options#C_002b_002b-Dialect-Options\">C++ Dialect Options</a> and <a href=\"objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options\">Objective-C and Objective-C++ Dialect Options</a>. </p>\n<p>When an unrecognized warning option is requested (e.g., <code>-Wunknown-warning</code>), GCC emits a diagnostic stating that the option is not recognized. However, if the <code>-Wno-</code> form is used, the behavior is slightly different: no diagnostic is produced for <code>-Wno-unknown-warning</code> unless other diagnostics are being produced. This allows the use of new <code>-Wno-</code> options with old compilers, but if something goes wrong, the compiler warns that an unrecognized option is present. </p>\n<dl> <dt>\n<code>-Wpedantic</code><dt><code>-pedantic</code></dt>\n</dt>\n<dd>\nIssue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++. For ISO C, follows the version of the ISO C standard specified by any <code>-std</code> option used. <p>Valid ISO C and ISO C++ programs should compile properly with or without this option (though a rare few require <code>-ansi</code> or a <code>-std</code> option specifying the required version of ISO C). However, without this option, certain GNU extensions and traditional C and C++ features are supported as well. With this option, they are rejected. </p>\n<p><code>-Wpedantic</code> does not cause warning messages for use of the alternate keywords whose names begin and end with ‘<code>__</code>’. Pedantic warnings are also disabled in the expression that follows <code>__extension__</code>. However, only system header files should use these escape routes; application programs should avoid them. See <a href=\"alternate-keywords#Alternate-Keywords\">Alternate Keywords</a>. </p>\n<p>Some users try to use <code>-Wpedantic</code> to check programs for strict ISO C conformance. They soon find that it does not do quite what they want: it finds some non-ISO practices, but not all—only those for which ISO C <em>requires</em> a diagnostic, and some others for which diagnostics have been added. </p>\n<p>A feature to report any failure to conform to ISO C might be useful in some instances, but would require considerable additional work and would be quite different from <code>-Wpedantic</code>. We don't have plans to support such a feature in the near future. </p>\n<p>Where the standard specified with <code>-std</code> represents a GNU extended dialect of C, such as ‘<code>gnu90</code>’ or ‘<code>gnu99</code>’, there is a corresponding base standard, the version of ISO C on which the GNU extended dialect is based. Warnings from <code>-Wpedantic</code> are given where they are required by the base standard. (It does not make sense for such warnings to be given only for features not in the specified GNU C dialect, since by definition the GNU dialects of C include all features the compiler supports with the given option, and there would be nothing to warn about.) </p>\n</dd>\n<dt><code>-pedantic-errors</code></dt>\n<dd>\nLike <code>-Wpedantic</code>, except that errors are produced rather than warnings. </dd>\n<dt><code>-Wall</code></dt>\n<dd>\nThis enables all the warnings about constructions that some users consider questionable, and that are easy to avoid (or modify to prevent the warning), even in conjunction with macros. This also enables some language-specific warnings described in <a href=\"c_002b_002b-dialect-options#C_002b_002b-Dialect-Options\">C++ Dialect Options</a> and <a href=\"objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options\">Objective-C and Objective-C++ Dialect Options</a>. <p><code>-Wall</code> turns on the following warning flags: </p>\n<pre class=\"smallexample\">-Waddress   \n-Warray-bounds <span class=\"roman\">(only with</span> <code>-O2</code><span class=\"roman\">)</span>  \n-Wc++11-compat  \n-Wchar-subscripts  \n-Wenum-compare <span class=\"roman\">(in C/ObjC; this is on by default in C++)</span> \n-Wimplicit-int <span class=\"roman\">(C and Objective-C only)</span> \n-Wimplicit-function-declaration <span class=\"roman\">(C and Objective-C only)</span> \n-Wcomment  \n-Wformat   \n-Wmain <span class=\"roman\">(only for C/ObjC and unless</span> <code>-ffreestanding</code><span class=\"roman\">)</span>  \n-Wmaybe-uninitialized \n-Wmissing-braces <span class=\"roman\">(only for C/ObjC)</span> \n-Wnonnull  \n-Wopenmp-simd \n-Wparentheses  \n-Wpointer-sign  \n-Wreorder   \n-Wreturn-type  \n-Wsequence-point  \n-Wsign-compare <span class=\"roman\">(only in C++)</span>  \n-Wstrict-aliasing  \n-Wstrict-overflow=1  \n-Wswitch  \n-Wtrigraphs  \n-Wuninitialized  \n-Wunknown-pragmas  \n-Wunused-function  \n-Wunused-label     \n-Wunused-value     \n-Wunused-variable  \n-Wvolatile-register-var</pre> <p>Note that some warning flags are not implied by <code>-Wall</code>. Some of them warn about constructions that users generally do not consider questionable, but which occasionally you might wish to check for; others warn about constructions that are necessary or hard to avoid in some cases, and there is no simple way to modify the code to suppress the warning. Some of them are enabled by <code>-Wextra</code> but many of them must be enabled individually. </p>\n</dd>\n<dt><code>-Wextra</code></dt>\n<dd>\nThis enables some extra warning flags that are not enabled by <code>-Wall</code>. (This option used to be called <code>-W</code>. The older name is still supported, but the newer name is more descriptive.) <pre class=\"smallexample\">-Wclobbered  \n-Wempty-body  \n-Wignored-qualifiers \n-Wmissing-field-initializers  \n-Wmissing-parameter-type <span class=\"roman\">(C only)</span>  \n-Wold-style-declaration <span class=\"roman\">(C only)</span>  \n-Woverride-init  \n-Wsign-compare  \n-Wtype-limits  \n-Wuninitialized  \n-Wunused-parameter <span class=\"roman\">(only with</span> <code>-Wunused</code> <span class=\"roman\">or</span> <code>-Wall</code><span class=\"roman\">)</span> \n-Wunused-but-set-parameter <span class=\"roman\">(only with</span> <code>-Wunused</code> <span class=\"roman\">or</span> <code>-Wall</code><span class=\"roman\">)</span></pre> <p>The option <code>-Wextra</code> also prints warning messages for the following cases: </p>\n<ul> <li>A pointer is compared against integer zero with ‘<code>&lt;</code>’, ‘<code>&lt;=</code>’, ‘<code>&gt;</code>’, or ‘<code>&gt;=</code>’. </li>\n<li>(C++ only) An enumerator and a non-enumerator both appear in a conditional expression. </li>\n<li>(C++ only) Ambiguous virtual bases. </li>\n<li>(C++ only) Subscripting an array that has been declared ‘<code>register</code>’. </li>\n<li>(C++ only) Taking the address of a variable that has been declared ‘<code>register</code>’. </li>\n<li>(C++ only) A base class is not initialized in a derived class's copy constructor. </li>\n</ul> </dd>\n<dt><code>-Wchar-subscripts</code></dt>\n<dd>\nWarn if an array subscript has type <code>char</code>. This is a common cause of error, as programmers often forget that this type is signed on some machines. This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wcomment</code></dt>\n<dd>\nWarn whenever a comment-start sequence ‘<code>/*</code>’ appears in a ‘<code>/*</code>’ comment, or whenever a Backslash-Newline appears in a ‘<code>//</code>’ comment. This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wno-coverage-mismatch</code></dt>\n<dd>\nWarn if feedback profiles do not match when using the <code>-fprofile-use</code> option. If a source file is changed between compiling with <code>-fprofile-gen</code> and with <code>-fprofile-use</code>, the files with the profile feedback can fail to match the source file and GCC cannot use the profile feedback information. By default, this warning is enabled and is treated as an error. <code>-Wno-coverage-mismatch</code> can be used to disable the warning or <code>-Wno-error=coverage-mismatch</code> can be used to disable the error. Disabling the error for this warning can result in poorly optimized code and is useful only in the case of very minor changes such as bug fixes to an existing code-base. Completely disabling the warning is not recommended. </dd>\n<dt><code>-Wno-cpp</code></dt>\n<dd>\n<span class=\"roman\">(C, Objective-C, C++, Objective-C++ and Fortran only)</span> <p>Suppress warning messages emitted by <code>#warning</code> directives. </p>\n</dd>\n<dt>\n<code>-Wdouble-promotion </code><span class=\"roman\">(C, C++, Objective-C and Objective-C++ only)</span>\n</dt>\n<dd>\nGive a warning when a value of type <code>float</code> is implicitly promoted to <code>double</code>. CPUs with a 32-bit “single-precision” floating-point unit implement <code>float</code> in hardware, but emulate <code>double</code> in software. On such a machine, doing computations using <code>double</code> values is much more expensive because of the overhead required for software emulation. <p>It is easy to accidentally do computations with <code>double</code> because floating-point literals are implicitly of type <code>double</code>. For example, in: </p>\n<pre class=\"smallexample\">float area(float radius)\n{\n   return 3.14159 * radius * radius;\n}</pre> <p>the compiler performs the entire computation with <code>double</code> because the floating-point literal is a <code>double</code>. </p>\n</dd>\n<dt>\n<code>-Wformat</code><dt>\n<code>-Wformat=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nCheck calls to <code>printf</code> and <code>scanf</code>, etc., to make sure that the arguments supplied have types appropriate to the format string specified, and that the conversions specified in the format string make sense. This includes standard functions, and others specified by format attributes (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>), in the <code>printf</code>, <code>scanf</code>, <code>strftime</code> and <code>strfmon</code> (an X/Open extension, not in the C standard) families (or other target-specific families). Which functions are checked without format attributes having been specified depends on the standard version selected, and such checks of functions without the attribute specified are disabled by <code>-ffreestanding</code> or <code>-fno-builtin</code>. <p>The formats are checked against the format features supported by GNU libc version 2.2. These include all ISO C90 and C99 features, as well as features from the Single Unix Specification and some BSD and GNU extensions. Other library implementations may not support all these features; GCC does not support warning about features that go beyond a particular library's limitations. However, if <code>-Wpedantic</code> is used with <code>-Wformat</code>, warnings are given about format features not in the selected standard version (but not for <code>strfmon</code> formats, since those are not in any version of the C standard). See <a href=\"c-dialect-options#C-Dialect-Options\">Options Controlling C Dialect</a>. </p>\n<dl> <dt>\n<code>-Wformat=1</code><dt><code>-Wformat</code></dt>\n</dt>\n<dd>\nOption <code>-Wformat</code> is equivalent to <code>-Wformat=1</code>, and <code>-Wno-format</code> is equivalent to <code>-Wformat=0</code>. Since <code>-Wformat</code> also checks for null format arguments for several functions, <code>-Wformat</code> also implies <code>-Wnonnull</code>. Some aspects of this level of format checking can be disabled by the options: <code>-Wno-format-contains-nul</code>, <code>-Wno-format-extra-args</code>, and <code>-Wno-format-zero-length</code>. <code>-Wformat</code> is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wno-format-contains-nul</code></dt>\n<dd>\nIf <code>-Wformat</code> is specified, do not warn about format strings that contain NUL bytes. </dd>\n<dt><code>-Wno-format-extra-args</code></dt>\n<dd>\nIf <code>-Wformat</code> is specified, do not warn about excess arguments to a <code>printf</code> or <code>scanf</code> format function. The C standard specifies that such arguments are ignored. <p>Where the unused arguments lie between used arguments that are specified with ‘<code>$</code>’ operand number specifications, normally warnings are still given, since the implementation could not know what type to pass to <code>va_arg</code> to skip the unused arguments. However, in the case of <code>scanf</code> formats, this option suppresses the warning if the unused arguments are all pointers, since the Single Unix Specification says that such unused arguments are allowed. </p>\n</dd>\n<dt><code>-Wno-format-zero-length</code></dt>\n<dd>\nIf <code>-Wformat</code> is specified, do not warn about zero-length formats. The C standard specifies that zero-length formats are allowed. </dd>\n<dt><code>-Wformat=2</code></dt>\n<dd>\nEnable <code>-Wformat</code> plus additional format checks. Currently equivalent to <code>-Wformat -Wformat-nonliteral -Wformat-security -Wformat-y2k</code>. </dd>\n<dt><code>-Wformat-nonliteral</code></dt>\n<dd>\nIf <code>-Wformat</code> is specified, also warn if the format string is not a string literal and so cannot be checked, unless the format function takes its format arguments as a <code>va_list</code>. </dd>\n<dt><code>-Wformat-security</code></dt>\n<dd>\nIf <code>-Wformat</code> is specified, also warn about uses of format functions that represent possible security problems. At present, this warns about calls to <code>printf</code> and <code>scanf</code> functions where the format string is not a string literal and there are no format arguments, as in <code>printf (foo);</code>. This may be a security hole if the format string came from untrusted input and contains ‘<code>%n</code>’. (This is currently a subset of what <code>-Wformat-nonliteral</code> warns about, but in future warnings may be added to <code>-Wformat-security</code> that are not included in <code>-Wformat-nonliteral</code>.) </dd>\n<dt><code>-Wformat-y2k</code></dt>\n<dd>\nIf <code>-Wformat</code> is specified, also warn about <code>strftime</code> formats that may yield only a two-digit year. </dd>\n</dl> </dd>\n<dt><code>-Wnonnull</code></dt>\n<dd>\nWarn about passing a null pointer for arguments marked as requiring a non-null value by the <code>nonnull</code> function attribute. <p><code>-Wnonnull</code> is included in <code>-Wall</code> and <code>-Wformat</code>. It can be disabled with the <code>-Wno-nonnull</code> option. </p>\n</dd>\n<dt>\n<code>-Winit-self </code><span class=\"roman\">(C, C++, Objective-C and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn about uninitialized variables that are initialized with themselves. Note this option can only be used with the <code>-Wuninitialized</code> option. <p>For example, GCC warns about <code>i</code> being uninitialized in the following snippet only when <code>-Winit-self</code> has been specified: </p>\n<pre class=\"smallexample\">int f()\n{\n  int i = i;\n  return i;\n}</pre> <p>This warning is enabled by <code>-Wall</code> in C++. </p>\n</dd>\n<dt>\n<code>-Wimplicit-int </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn when a declaration does not specify a type. This warning is enabled by <code>-Wall</code>. </dd>\n<dt>\n<code>-Wimplicit-function-declaration </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nGive a warning whenever a function is used before being declared. In C99 mode (<code>-std=c99</code> or <code>-std=gnu99</code>), this warning is enabled by default and it is made into an error by <code>-pedantic-errors</code>. This warning is also enabled by <code>-Wall</code>. </dd>\n<dt>\n<code>-Wimplicit </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nSame as <code>-Wimplicit-int</code> and <code>-Wimplicit-function-declaration</code>. This warning is enabled by <code>-Wall</code>. </dd>\n<dt>\n<code>-Wignored-qualifiers </code><span class=\"roman\">(C and C++ only)</span>\n</dt>\n<dd>\nWarn if the return type of a function has a type qualifier such as <code>const</code>. For ISO C such a type qualifier has no effect, since the value returned by a function is not an lvalue. For C++, the warning is only emitted for scalar types or <code>void</code>. ISO C prohibits qualified <code>void</code> return types on function definitions, so such return types always receive a warning even without this option. <p>This warning is also enabled by <code>-Wextra</code>. </p>\n</dd>\n<dt><code>-Wmain</code></dt>\n<dd>\nWarn if the type of ‘<code>main</code>’ is suspicious. ‘<code>main</code>’ should be a function with external linkage, returning int, taking either zero arguments, two, or three arguments of appropriate types. This warning is enabled by default in C++ and is enabled by either <code>-Wall</code> or <code>-Wpedantic</code>. </dd>\n<dt><code>-Wmissing-braces</code></dt>\n<dd>\nWarn if an aggregate or union initializer is not fully bracketed. In the following example, the initializer for ‘<code>a</code>’ is not fully bracketed, but that for ‘<code>b</code>’ is fully bracketed. This warning is enabled by <code>-Wall</code> in C. <pre class=\"smallexample\">int a[2][2] = { 0, 1, 2, 3 };\nint b[2][2] = { { 0, 1 }, { 2, 3 } };</pre> <p>This warning is enabled by <code>-Wall</code>. </p>\n</dd>\n<dt>\n<code>-Wmissing-include-dirs </code><span class=\"roman\">(C, C++, Objective-C and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn if a user-supplied include directory does not exist. </dd>\n<dt><code>-Wparentheses</code></dt>\n<dd>\nWarn if parentheses are omitted in certain contexts, such as when there is an assignment in a context where a truth value is expected, or when operators are nested whose precedence people often get confused about. <p>Also warn if a comparison like ‘<code>x&lt;=y&lt;=z</code>’ appears; this is equivalent to ‘<code>(x&lt;=y ? 1 : 0) &lt;= z</code>’, which is a different interpretation from that of ordinary mathematical notation. </p>\n<p>Also warn about constructions where there may be confusion to which <code>if</code> statement an <code>else</code> branch belongs. Here is an example of such a case: </p>\n<pre class=\"smallexample\">{\n  if (a)\n    if (b)\n      foo ();\n  else\n    bar ();\n}</pre> <p>In C/C++, every <code>else</code> branch belongs to the innermost possible <code>if</code> statement, which in this example is <code>if (b)</code>. This is often not what the programmer expected, as illustrated in the above example by indentation the programmer chose. When there is the potential for this confusion, GCC issues a warning when this flag is specified. To eliminate the warning, add explicit braces around the innermost <code>if</code> statement so there is no way the <code>else</code> can belong to the enclosing <code>if</code>. The resulting code looks like this: </p>\n<pre class=\"smallexample\">{\n  if (a)\n    {\n      if (b)\n        foo ();\n      else\n        bar ();\n    }\n}</pre> <p>Also warn for dangerous uses of the GNU extension to <code>?:</code> with omitted middle operand. When the condition in the <code>?</code>: operator is a boolean expression, the omitted value is always 1. Often programmers expect it to be a value computed inside the conditional expression instead. </p>\n<p>This warning is enabled by <code>-Wall</code>. </p>\n</dd>\n<dt><code>-Wsequence-point</code></dt>\n<dd>\nWarn about code that may have undefined semantics because of violations of sequence point rules in the C and C++ standards. <p>The C and C++ standards define the order in which expressions in a C/C++ program are evaluated in terms of sequence points, which represent a partial ordering between the execution of parts of the program: those executed before the sequence point, and those executed after it. These occur after the evaluation of a full expression (one which is not part of a larger expression), after the evaluation of the first operand of a <code>&amp;&amp;</code>, <code>||</code>, <code>? :</code> or <code>,</code> (comma) operator, before a function is called (but after the evaluation of its arguments and the expression denoting the called function), and in certain other places. Other than as expressed by the sequence point rules, the order of evaluation of subexpressions of an expression is not specified. All these rules describe only a partial order rather than a total order, since, for example, if two functions are called within one expression with no sequence point between them, the order in which the functions are called is not specified. However, the standards committee have ruled that function calls do not overlap. </p>\n<p>It is not specified when between sequence points modifications to the values of objects take effect. Programs whose behavior depends on this have undefined behavior; the C and C++ standards specify that “Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be read only to determine the value to be stored.”. If a program breaks these rules, the results on any particular implementation are entirely unpredictable. </p>\n<p>Examples of code with undefined behavior are <code>a = a++;</code>, <code>a[n]\n= b[n++]</code> and <code>a[i++] = i;</code>. Some more complicated cases are not diagnosed by this option, and it may give an occasional false positive result, but in general it has been found fairly effective at detecting this sort of problem in programs. </p>\n<p>The standard is worded confusingly, therefore there is some debate over the precise meaning of the sequence point rules in subtle cases. Links to discussions of the problem, including proposed formal definitions, may be found on the GCC readings page, at <a href=\"http://gcc.gnu.org/readings.html\">http://gcc.gnu.org/readings.html</a>. </p>\n<p>This warning is enabled by <code>-Wall</code> for C and C++. </p>\n</dd>\n<dt><code>-Wno-return-local-addr</code></dt>\n<dd>\nDo not warn about returning a pointer (or in C++, a reference) to a variable that goes out of scope after the function returns. </dd>\n<dt><code>-Wreturn-type</code></dt>\n<dd>\nWarn whenever a function is defined with a return type that defaults to <code>int</code>. Also warn about any <code>return</code> statement with no return value in a function whose return type is not <code>void</code> (falling off the end of the function body is considered returning without a value), and about a <code>return</code> statement with an expression in a function whose return type is <code>void</code>. <p>For C++, a function without return type always produces a diagnostic message, even when <code>-Wno-return-type</code> is specified. The only exceptions are ‘<code>main</code>’ and functions defined in system headers. </p>\n<p>This warning is enabled by <code>-Wall</code>. </p>\n</dd>\n<dt><code>-Wswitch</code></dt>\n<dd>\nWarn whenever a <code>switch</code> statement has an index of enumerated type and lacks a <code>case</code> for one or more of the named codes of that enumeration. (The presence of a <code>default</code> label prevents this warning.) <code>case</code> labels outside the enumeration range also provoke warnings when this option is used (even if there is a <code>default</code> label). This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wswitch-default</code></dt>\n<dd>\nWarn whenever a <code>switch</code> statement does not have a <code>default</code> case. </dd>\n<dt><code>-Wswitch-enum</code></dt>\n<dd>\nWarn whenever a <code>switch</code> statement has an index of enumerated type and lacks a <code>case</code> for one or more of the named codes of that enumeration. <code>case</code> labels outside the enumeration range also provoke warnings when this option is used. The only difference between <code>-Wswitch</code> and this option is that this option gives a warning about an omitted enumeration code even if there is a <code>default</code> label. </dd>\n<dt>\n<code>-Wsync-nand </code><span class=\"roman\">(C and C++ only)</span>\n</dt>\n<dd>\nWarn when <code>__sync_fetch_and_nand</code> and <code>__sync_nand_and_fetch</code> built-in functions are used. These functions changed semantics in GCC 4.4. </dd>\n<dt><code>-Wtrigraphs</code></dt>\n<dd>\nWarn if any trigraphs are encountered that might change the meaning of the program (trigraphs within comments are not warned about). This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wunused-but-set-parameter</code></dt>\n<dd>\nWarn whenever a function parameter is assigned to, but otherwise unused (aside from its declaration). <p>To suppress this warning use the ‘<code>unused</code>’ attribute (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>). </p>\n<p>This warning is also enabled by <code>-Wunused</code> together with <code>-Wextra</code>. </p>\n</dd>\n<dt><code>-Wunused-but-set-variable</code></dt>\n<dd>\nWarn whenever a local variable is assigned to, but otherwise unused (aside from its declaration). This warning is enabled by <code>-Wall</code>. <p>To suppress this warning use the ‘<code>unused</code>’ attribute (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>). </p>\n<p>This warning is also enabled by <code>-Wunused</code>, which is enabled by <code>-Wall</code>. </p>\n</dd>\n<dt><code>-Wunused-function</code></dt>\n<dd>\nWarn whenever a static function is declared but not defined or a non-inline static function is unused. This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wunused-label</code></dt>\n<dd>\nWarn whenever a label is declared but not used. This warning is enabled by <code>-Wall</code>. <p>To suppress this warning use the ‘<code>unused</code>’ attribute (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>). </p>\n</dd>\n<dt>\n<code>-Wunused-local-typedefs </code><span class=\"roman\">(C, Objective-C, C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when a typedef locally defined in a function is not used. This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wunused-parameter</code></dt>\n<dd>\nWarn whenever a function parameter is unused aside from its declaration. <p>To suppress this warning use the ‘<code>unused</code>’ attribute (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>). </p>\n</dd>\n<dt><code>-Wno-unused-result</code></dt>\n<dd>\nDo not warn if a caller of a function marked with attribute <code>warn_unused_result</code> (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>) does not use its return value. The default is <code>-Wunused-result</code>. </dd>\n<dt><code>-Wunused-variable</code></dt>\n<dd>\nWarn whenever a local variable or non-constant static variable is unused aside from its declaration. This warning is enabled by <code>-Wall</code>. <p>To suppress this warning use the ‘<code>unused</code>’ attribute (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>). </p>\n</dd>\n<dt><code>-Wunused-value</code></dt>\n<dd>\nWarn whenever a statement computes a result that is explicitly not used. To suppress this warning cast the unused expression to ‘<code>void</code>’. This includes an expression-statement or the left-hand side of a comma expression that contains no side effects. For example, an expression such as ‘<code>x[i,j]</code>’ causes a warning, while ‘<code>x[(void)i,j]</code>’ does not. <p>This warning is enabled by <code>-Wall</code>. </p>\n</dd>\n<dt><code>-Wunused</code></dt>\n<dd>\nAll the above <code>-Wunused</code> options combined. <p>In order to get a warning about an unused function parameter, you must either specify <code>-Wextra -Wunused</code> (note that <code>-Wall</code> implies <code>-Wunused</code>), or separately specify <code>-Wunused-parameter</code>. </p>\n</dd>\n<dt><code>-Wuninitialized</code></dt>\n<dd>\nWarn if an automatic variable is used without first being initialized or if a variable may be clobbered by a <code>setjmp</code> call. In C++, warn if a non-static reference or non-static ‘<code>const</code>’ member appears in a class without constructors. <p>If you want to warn about code that uses the uninitialized value of the variable in its own initializer, use the <code>-Winit-self</code> option. </p>\n<p>These warnings occur for individual uninitialized or clobbered elements of structure, union or array variables as well as for variables that are uninitialized or clobbered as a whole. They do not occur for variables or elements declared <code>volatile</code>. Because these warnings depend on optimization, the exact variables or elements for which there are warnings depends on the precise optimization options and version of GCC used. </p>\n<p>Note that there may be no warning about a variable that is used only to compute a value that itself is never used, because such computations may be deleted by data flow analysis before the warnings are printed. </p>\n</dd>\n<dt><code>-Wmaybe-uninitialized</code></dt>\n<dd>\nFor an automatic variable, if there exists a path from the function entry to a use of the variable that is initialized, but there exist some other paths for which the variable is not initialized, the compiler emits a warning if it cannot prove the uninitialized paths are not executed at run time. These warnings are made optional because GCC is not smart enough to see all the reasons why the code might be correct in spite of appearing to have an error. Here is one example of how this can happen: <pre class=\"smallexample\">{\n  int x;\n  switch (y)\n    {\n    case 1: x = 1;\n      break;\n    case 2: x = 4;\n      break;\n    case 3: x = 5;\n    }\n  foo (x);\n}</pre> <p class=\"noindent\">If the value of <code>y</code> is always 1, 2 or 3, then <code>x</code> is always initialized, but GCC doesn't know this. To suppress the warning, you need to provide a default case with assert(0) or similar code. </p>\n<p>This option also warns when a non-volatile automatic variable might be changed by a call to <code>longjmp</code>. These warnings as well are possible only in optimizing compilation. </p>\n<p>The compiler sees only the calls to <code>setjmp</code>. It cannot know where <code>longjmp</code> will be called; in fact, a signal handler could call it at any point in the code. As a result, you may get a warning even when there is in fact no problem because <code>longjmp</code> cannot in fact be called at the place that would cause a problem. </p>\n<p>Some spurious warnings can be avoided if you declare all the functions you use that never return as <code>noreturn</code>. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>. </p>\n<p>This warning is enabled by <code>-Wall</code> or <code>-Wextra</code>. </p>\n</dd>\n<dt><code>-Wunknown-pragmas</code></dt>\n<dd>\nWarn when a <code>#pragma</code> directive is encountered that is not understood by GCC. If this command-line option is used, warnings are even issued for unknown pragmas in system header files. This is not the case if the warnings are only enabled by the <code>-Wall</code> command-line option. </dd>\n<dt><code>-Wno-pragmas</code></dt>\n<dd>\nDo not warn about misuses of pragmas, such as incorrect parameters, invalid syntax, or conflicts between pragmas. See also <code>-Wunknown-pragmas</code>. </dd>\n<dt><code>-Wstrict-aliasing</code></dt>\n<dd>\nThis option is only active when <code>-fstrict-aliasing</code> is active. It warns about code that might break the strict aliasing rules that the compiler is using for optimization. The warning does not catch all cases, but does attempt to catch the more common pitfalls. It is included in <code>-Wall</code>. It is equivalent to <code>-Wstrict-aliasing=3</code> </dd>\n<dt><code>-Wstrict-aliasing=n</code></dt>\n<dd>\nThis option is only active when <code>-fstrict-aliasing</code> is active. It warns about code that might break the strict aliasing rules that the compiler is using for optimization. Higher levels correspond to higher accuracy (fewer false positives). Higher levels also correspond to more effort, similar to the way <code>-O</code> works. <code>-Wstrict-aliasing</code> is equivalent to <code>-Wstrict-aliasing=3</code>. <p>Level 1: Most aggressive, quick, least accurate. Possibly useful when higher levels do not warn but <code>-fstrict-aliasing</code> still breaks the code, as it has very few false negatives. However, it has many false positives. Warns for all pointer conversions between possibly incompatible types, even if never dereferenced. Runs in the front end only. </p>\n<p>Level 2: Aggressive, quick, not too precise. May still have many false positives (not as many as level 1 though), and few false negatives (but possibly more than level 1). Unlike level 1, it only warns when an address is taken. Warns about incomplete types. Runs in the front end only. </p>\n<p>Level 3 (default for <code>-Wstrict-aliasing</code>): Should have very few false positives and few false negatives. Slightly slower than levels 1 or 2 when optimization is enabled. Takes care of the common pun+dereference pattern in the front end: <code>*(int*)&amp;some_float</code>. If optimization is enabled, it also runs in the back end, where it deals with multiple statement cases using flow-sensitive points-to information. Only warns when the converted pointer is dereferenced. Does not warn about incomplete types. </p>\n</dd>\n<dt>\n<code>-Wstrict-overflow</code><dt>\n<code>-Wstrict-overflow=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nThis option is only active when <code>-fstrict-overflow</code> is active. It warns about cases where the compiler optimizes based on the assumption that signed overflow does not occur. Note that it does not warn about all cases where the code might overflow: it only warns about cases where the compiler implements some optimization. Thus this warning depends on the optimization level. <p>An optimization that assumes that signed overflow does not occur is perfectly safe if the values of the variables involved are such that overflow never does, in fact, occur. Therefore this warning can easily give a false positive: a warning about code that is not actually a problem. To help focus on important issues, several warning levels are defined. No warnings are issued for the use of undefined signed overflow when estimating how many iterations a loop requires, in particular when determining whether a loop will be executed at all. </p>\n<dl> <dt><code>-Wstrict-overflow=1</code></dt>\n<dd>Warn about cases that are both questionable and easy to avoid. For example, with <code>-fstrict-overflow</code>, the compiler simplifies <code>x + 1 &gt; x</code> to <code>1</code>. This level of <code>-Wstrict-overflow</code> is enabled by <code>-Wall</code>; higher levels are not, and must be explicitly requested. </dd>\n<dt><code>-Wstrict-overflow=2</code></dt>\n<dd>Also warn about other cases where a comparison is simplified to a constant. For example: <code>abs (x) &gt;= 0</code>. This can only be simplified when <code>-fstrict-overflow</code> is in effect, because <code>abs (INT_MIN)</code> overflows to <code>INT_MIN</code>, which is less than zero. <code>-Wstrict-overflow</code> (with no level) is the same as <code>-Wstrict-overflow=2</code>. </dd>\n<dt><code>-Wstrict-overflow=3</code></dt>\n<dd>Also warn about other cases where a comparison is simplified. For example: <code>x + 1 &gt; 1</code> is simplified to <code>x &gt; 0</code>. </dd>\n<dt><code>-Wstrict-overflow=4</code></dt>\n<dd>Also warn about other simplifications not covered by the above cases. For example: <code>(x * 10) / 5</code> is simplified to <code>x * 2</code>. </dd>\n<dt><code>-Wstrict-overflow=5</code></dt>\n<dd>Also warn about cases where the compiler reduces the magnitude of a constant involved in a comparison. For example: <code>x + 2 &gt; y</code> is simplified to <code>x + 1 &gt;= y</code>. This is reported only at the highest warning level because this simplification applies to many comparisons, so this warning level gives a very large number of false positives. </dd>\n</dl> </dd>\n<dt>\n<code>-Wsuggest-attribute=</code><span class=\"roman\">[</span><code>pure</code><span class=\"roman\">|</span><code>const</code><span class=\"roman\">|</span><code>noreturn</code><span class=\"roman\">|</span><code>format</code><span class=\"roman\">]</span>\n</dt>\n<dd>\nWarn for cases where adding an attribute may be beneficial. The attributes currently supported are listed below. <dl> <dt>\n<code>-Wsuggest-attribute=pure</code><dt>\n<code>-Wsuggest-attribute=const</code><dt><code>-Wsuggest-attribute=noreturn</code></dt>\n</dt>\n</dt>\n<dd>\n Warn about functions that might be candidates for attributes <code>pure</code>, <code>const</code> or <code>noreturn</code>. The compiler only warns for functions visible in other compilation units or (in the case of <code>pure</code> and <code>const</code>) if it cannot prove that the function returns normally. A function returns normally if it doesn't contain an infinite loop or return abnormally by throwing, calling <code>abort()</code> or trapping. This analysis requires option <code>-fipa-pure-const</code>, which is enabled by default at <code>-O</code> and higher. Higher optimization levels improve the accuracy of the analysis. </dd>\n<dt>\n<code>-Wsuggest-attribute=format</code><dt><code>-Wmissing-format-attribute</code></dt>\n</dt>\n<dd>\n Warn about function pointers that might be candidates for <code>format</code> attributes. Note these are only possible candidates, not absolute ones. GCC guesses that function pointers with <code>format</code> attributes that are used in assignment, initialization, parameter passing or return statements should have a corresponding <code>format</code> attribute in the resulting type. I.e. the left-hand side of the assignment or initialization, the type of the parameter variable, or the return type of the containing function respectively should also have a <code>format</code> attribute to avoid the warning. <p>GCC also warns about function definitions that might be candidates for <code>format</code> attributes. Again, these are only possible candidates. GCC guesses that <code>format</code> attributes might be appropriate for any function that calls a function like <code>vprintf</code> or <code>vscanf</code>, but this might not always be the case, and some functions for which <code>format</code> attributes are appropriate may not be detected. </p>\n</dd>\n</dl> </dd>\n<dt><code>-Warray-bounds</code></dt>\n<dd>\nThis option is only active when <code>-ftree-vrp</code> is active (default for <code>-O2</code> and above). It warns about subscripts to arrays that are always out of bounds. This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wno-div-by-zero</code></dt>\n<dd>\nDo not warn about compile-time integer division by zero. Floating-point division by zero is not warned about, as it can be a legitimate way of obtaining infinities and NaNs. </dd>\n<dt><code>-Wsystem-headers</code></dt>\n<dd>\nPrint warning messages for constructs found in system header files. Warnings from system headers are normally suppressed, on the assumption that they usually do not indicate real problems and would only make the compiler output harder to read. Using this command-line option tells GCC to emit warnings from system headers as if they occurred in user code. However, note that using <code>-Wall</code> in conjunction with this option does <em>not</em> warn about unknown pragmas in system headers—for that, <code>-Wunknown-pragmas</code> must also be used. </dd>\n<dt><code>-Wtrampolines</code></dt>\n<dd>\n Warn about trampolines generated for pointers to nested functions. <p>A trampoline is a small piece of data or code that is created at run time on the stack when the address of a nested function is taken, and is used to call the nested function indirectly. For some targets, it is made up of data only and thus requires no special treatment. But, for most targets, it is made up of code and thus requires the stack to be made executable in order for the program to work properly. </p>\n</dd>\n<dt><code>-Wfloat-equal</code></dt>\n<dd>\nWarn if floating-point values are used in equality comparisons. <p>The idea behind this is that sometimes it is convenient (for the programmer) to consider floating-point values as approximations to infinitely precise real numbers. If you are doing this, then you need to compute (by analyzing the code, or in some other way) the maximum or likely maximum error that the computation introduces, and allow for it when performing comparisons (and when producing output, but that's a different problem). In particular, instead of testing for equality, you should check to see whether the two values have ranges that overlap; and this is done with the relational operators, so equality comparisons are probably mistaken. </p>\n</dd>\n<dt>\n<code>-Wtraditional </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn about certain constructs that behave differently in traditional and ISO C. Also warn about ISO C constructs that have no traditional C equivalent, and/or problematic constructs that should be avoided. <ul> <li>Macro parameters that appear within string literals in the macro body. In traditional C macro replacement takes place within string literals, but in ISO C it does not. </li>\n<li>In traditional C, some preprocessor directives did not exist. Traditional preprocessors only considered a line to be a directive if the ‘<code>#</code>’ appeared in column 1 on the line. Therefore <code>-Wtraditional</code> warns about directives that traditional C understands but ignores because the ‘<code>#</code>’ does not appear as the first character on the line. It also suggests you hide directives like ‘<code>#pragma</code>’ not understood by traditional C by indenting them. Some traditional implementations do not recognize ‘<code>#elif</code>’, so this option suggests avoiding it altogether. </li>\n<li>A function-like macro that appears without arguments. </li>\n<li>The unary plus operator. </li>\n<li>The ‘<code>U</code>’ integer constant suffix, or the ‘<code>F</code>’ or ‘<code>L</code>’ floating-point constant suffixes. (Traditional C does support the ‘<code>L</code>’ suffix on integer constants.) Note, these suffixes appear in macros defined in the system headers of most modern systems, e.g. the ‘<code>_MIN</code>’/‘<code>_MAX</code>’ macros in <code>&lt;limits.h&gt;</code>. Use of these macros in user code might normally lead to spurious warnings, however GCC's integrated preprocessor has enough context to avoid warning in these cases. </li>\n<li>A function declared external in one block and then used after the end of the block. </li>\n<li>A <code>switch</code> statement has an operand of type <code>long</code>. </li>\n<li>A non-<code>static</code> function declaration follows a <code>static</code> one. This construct is not accepted by some traditional C compilers. </li>\n<li>The ISO type of an integer constant has a different width or signedness from its traditional type. This warning is only issued if the base of the constant is ten. I.e. hexadecimal or octal values, which typically represent bit patterns, are not warned about. </li>\n<li>Usage of ISO string concatenation is detected. </li>\n<li>Initialization of automatic aggregates. </li>\n<li>Identifier conflicts with labels. Traditional C lacks a separate namespace for labels. </li>\n<li>Initialization of unions. If the initializer is zero, the warning is omitted. This is done under the assumption that the zero initializer in user code appears conditioned on e.g. <code>__STDC__</code> to avoid missing initializer warnings and relies on default initialization to zero in the traditional C case. </li>\n<li>Conversions by prototypes between fixed/floating-point values and vice versa. The absence of these prototypes when compiling with traditional C causes serious problems. This is a subset of the possible conversion warnings; for the full set use <code>-Wtraditional-conversion</code>. </li>\n<li>Use of ISO C style function definitions. This warning intentionally is <em>not</em> issued for prototype declarations or variadic functions because these ISO C features appear in your code when using libiberty's traditional C compatibility macros, <code>PARAMS</code> and <code>VPARAMS</code>. This warning is also bypassed for nested functions because that feature is already a GCC extension and thus not relevant to traditional C compatibility. </li>\n</ul> </dd>\n<dt>\n<code>-Wtraditional-conversion </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn if a prototype causes a type conversion that is different from what would happen to the same argument in the absence of a prototype. This includes conversions of fixed point to floating and vice versa, and conversions changing the width or signedness of a fixed-point argument except when the same as the default promotion. </dd>\n<dt>\n<code>-Wdeclaration-after-statement </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn when a declaration is found after a statement in a block. This construct, known from C++, was introduced with ISO C99 and is by default allowed in GCC. It is not supported by ISO C90 and was not supported by GCC versions before GCC 3.0. See <a href=\"mixed-declarations#Mixed-Declarations\">Mixed Declarations</a>. </dd>\n<dt><code>-Wundef</code></dt>\n<dd>\nWarn if an undefined identifier is evaluated in an ‘<code>#if</code>’ directive. </dd>\n<dt><code>-Wno-endif-labels</code></dt>\n<dd>\nDo not warn whenever an ‘<code>#else</code>’ or an ‘<code>#endif</code>’ are followed by text. </dd>\n<dt><code>-Wshadow</code></dt>\n<dd>\nWarn whenever a local variable or type declaration shadows another variable, parameter, type, or class member (in C++), or whenever a built-in function is shadowed. Note that in C++, the compiler warns if a local variable shadows an explicit typedef, but not if it shadows a struct/class/enum. </dd>\n<dt>\n<code>-Wlarger-than=</code><var>len</var>\n</dt>\n<dd>\nWarn whenever an object of larger than <var>len</var> bytes is defined. </dd>\n<dt>\n<code>-Wframe-larger-than=</code><var>len</var>\n</dt>\n<dd>\nWarn if the size of a function frame is larger than <var>len</var> bytes. The computation done to determine the stack frame size is approximate and not conservative. The actual requirements may be somewhat greater than <var>len</var> even if you do not get a warning. In addition, any space allocated via <code>alloca</code>, variable-length arrays, or related constructs is not included by the compiler when determining whether or not to issue a warning. </dd>\n<dt><code>-Wno-free-nonheap-object</code></dt>\n<dd>\nDo not warn when attempting to free an object that was not allocated on the heap. </dd>\n<dt>\n<code>-Wstack-usage=</code><var>len</var>\n</dt>\n<dd>\nWarn if the stack usage of a function might be larger than <var>len</var> bytes. The computation done to determine the stack usage is conservative. Any space allocated via <code>alloca</code>, variable-length arrays, or related constructs is included by the compiler when determining whether or not to issue a warning. <p>The message is in keeping with the output of <code>-fstack-usage</code>. </p>\n<ul> <li>If the stack usage is fully static but exceeds the specified amount, it's: <pre class=\"smallexample\">warning: stack usage is 1120 bytes</pre> </li>\n<li>If the stack usage is (partly) dynamic but bounded, it's: <pre class=\"smallexample\">warning: stack usage might be 1648 bytes</pre> </li>\n<li>If the stack usage is (partly) dynamic and not bounded, it's: <pre class=\"smallexample\">warning: stack usage might be unbounded</pre> </li>\n</ul> </dd>\n<dt><code>-Wunsafe-loop-optimizations</code></dt>\n<dd>\nWarn if the loop cannot be optimized because the compiler cannot assume anything on the bounds of the loop indices. With <code>-funsafe-loop-optimizations</code> warn if the compiler makes such assumptions. </dd>\n<dt>\n<code>-Wno-pedantic-ms-format </code><span class=\"roman\">(MinGW targets only)</span>\n</dt>\n<dd>\nWhen used in combination with <code>-Wformat</code> and <code>-pedantic</code> without GNU extensions, this option disables the warnings about non-ISO <code>printf</code> / <code>scanf</code> format width specifiers <code>I32</code>, <code>I64</code>, and <code>I</code> used on Windows targets, which depend on the MS runtime. </dd>\n<dt><code>-Wpointer-arith</code></dt>\n<dd>\nWarn about anything that depends on the “size of” a function type or of <code>void</code>. GNU C assigns these types a size of 1, for convenience in calculations with <code>void *</code> pointers and pointers to functions. In C++, warn also when an arithmetic operation involves <code>NULL</code>. This warning is also enabled by <code>-Wpedantic</code>. </dd>\n<dt><code>-Wtype-limits</code></dt>\n<dd>\nWarn if a comparison is always true or always false due to the limited range of the data type, but do not warn for constant expressions. For example, warn if an unsigned variable is compared against zero with ‘<code>&lt;</code>’ or ‘<code>&gt;=</code>’. This warning is also enabled by <code>-Wextra</code>. </dd>\n<dt>\n<code>-Wbad-function-cast </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn whenever a function call is cast to a non-matching type. For example, warn if <code>int malloc()</code> is cast to <code>anything *</code>. </dd>\n<dt>\n<code>-Wc++-compat </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>Warn about ISO C constructs that are outside of the common subset of ISO C and ISO C++, e.g. request for implicit conversion from <code>void *</code> to a pointer to non-<code>void</code> type. </dd>\n<dt>\n<code>-Wc++11-compat </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that are keywords in ISO C++ 2011. This warning turns on <code>-Wnarrowing</code> and is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wcast-qual</code></dt>\n<dd>\nWarn whenever a pointer is cast so as to remove a type qualifier from the target type. For example, warn if a <code>const char *</code> is cast to an ordinary <code>char *</code>. <p>Also warn when making a cast that introduces a type qualifier in an unsafe way. For example, casting <code>char **</code> to <code>const char **</code> is unsafe, as in this example: </p>\n<pre class=\"smallexample\">/* p is char ** value.  */\nconst char **q = (const char **) p;\n/* Assignment of readonly string to const char * is OK.  */\n*q = \"string\";\n/* Now char** pointer points to read-only memory.  */\n**p = 'b';</pre> </dd>\n<dt><code>-Wcast-align</code></dt>\n<dd>\nWarn whenever a pointer is cast such that the required alignment of the target is increased. For example, warn if a <code>char *</code> is cast to an <code>int *</code> on machines where integers can only be accessed at two- or four-byte boundaries. </dd>\n<dt><code>-Wwrite-strings</code></dt>\n<dd>\nWhen compiling C, give string constants the type <code>const\nchar[</code><var>length</var><code>]</code> so that copying the address of one into a non-<code>const</code> <code>char *</code> pointer produces a warning. These warnings help you find at compile time code that can try to write into a string constant, but only if you have been very careful about using <code>const</code> in declarations and prototypes. Otherwise, it is just a nuisance. This is why we did not make <code>-Wall</code> request these warnings. <p>When compiling C++, warn about the deprecated conversion from string literals to <code>char *</code>. This warning is enabled by default for C++ programs. </p>\n</dd>\n<dt><code>-Wclobbered</code></dt>\n<dd>\nWarn for variables that might be changed by ‘<code>longjmp</code>’ or ‘<code>vfork</code>’. This warning is also enabled by <code>-Wextra</code>. </dd>\n<dt>\n<code>-Wconditionally-supported </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn for conditionally-supported (C++11 [intro.defs]) constructs. </dd>\n<dt><code>-Wconversion</code></dt>\n<dd>\nWarn for implicit conversions that may alter a value. This includes conversions between real and integer, like <code>abs (x)</code> when <code>x</code> is <code>double</code>; conversions between signed and unsigned, like <code>unsigned ui = -1</code>; and conversions to smaller types, like <code>sqrtf (M_PI)</code>. Do not warn for explicit casts like <code>abs\n((int) x)</code> and <code>ui = (unsigned) -1</code>, or if the value is not changed by the conversion like in <code>abs (2.0)</code>. Warnings about conversions between signed and unsigned integers can be disabled by using <code>-Wno-sign-conversion</code>. <p>For C++, also warn for confusing overload resolution for user-defined conversions; and conversions that never use a type conversion operator: conversions to <code>void</code>, the same type, a base class or a reference to them. Warnings about conversions between signed and unsigned integers are disabled by default in C++ unless <code>-Wsign-conversion</code> is explicitly enabled. </p>\n</dd>\n<dt>\n<code>-Wno-conversion-null </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nDo not warn for conversions between <code>NULL</code> and non-pointer types. <code>-Wconversion-null</code> is enabled by default. </dd>\n<dt>\n<code>-Wzero-as-null-pointer-constant </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when a literal '0' is used as null pointer constant. This can be useful to facilitate the conversion to <code>nullptr</code> in C++11. </dd>\n<dt><code>-Wdate-time</code></dt>\n<dd>\nWarn when macros <code>__TIME__</code>, <code>__DATE__</code> or <code>__TIMESTAMP__</code> are encountered as they might prevent bit-wise-identical reproducible compilations. </dd>\n<dt>\n<code>-Wdelete-incomplete </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when deleting a pointer to incomplete type, which may cause undefined behavior at runtime. This warning is enabled by default. </dd>\n<dt>\n<code>-Wuseless-cast </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nWarn when an expression is casted to its own type. </dd>\n<dt><code>-Wempty-body</code></dt>\n<dd>\nWarn if an empty body occurs in an ‘<code>if</code>’, ‘<code>else</code>’ or ‘<code>do while</code>’ statement. This warning is also enabled by <code>-Wextra</code>. </dd>\n<dt><code>-Wenum-compare</code></dt>\n<dd>\nWarn about a comparison between values of different enumerated types. In C++ enumeral mismatches in conditional expressions are also diagnosed and the warning is enabled by default. In C this warning is enabled by <code>-Wall</code>. </dd>\n<dt>\n<code>-Wjump-misses-init </code><span class=\"roman\">(C, Objective-C only)</span>\n</dt>\n<dd>\nWarn if a <code>goto</code> statement or a <code>switch</code> statement jumps forward across the initialization of a variable, or jumps backward to a label after the variable has been initialized. This only warns about variables that are initialized when they are declared. This warning is only supported for C and Objective-C; in C++ this sort of branch is an error in any case. <p><code>-Wjump-misses-init</code> is included in <code>-Wc++-compat</code>. It can be disabled with the <code>-Wno-jump-misses-init</code> option. </p>\n</dd>\n<dt><code>-Wsign-compare</code></dt>\n<dd>\nWarn when a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned. This warning is also enabled by <code>-Wextra</code>; to get the other warnings of <code>-Wextra</code> without this warning, use <code>-Wextra -Wno-sign-compare</code>. </dd>\n<dt><code>-Wsign-conversion</code></dt>\n<dd>\nWarn for implicit conversions that may change the sign of an integer value, like assigning a signed integer expression to an unsigned integer variable. An explicit cast silences the warning. In C, this option is enabled also by <code>-Wconversion</code>. </dd>\n<dt><code>-Wfloat-conversion</code></dt>\n<dd>\nWarn for implicit conversions that reduce the precision of a real value. This includes conversions from real to integer, and from higher precision real to lower precision real values. This option is also enabled by <code>-Wconversion</code>. </dd>\n<dt><code>-Wsizeof-pointer-memaccess</code></dt>\n<dd>\nWarn for suspicious length parameters to certain string and memory built-in functions if the argument uses <code>sizeof</code>. This warning warns e.g. about <code>memset (ptr, 0, sizeof (ptr));</code> if <code>ptr</code> is not an array, but a pointer, and suggests a possible fix, or about <code>memcpy (&amp;foo, ptr, sizeof (&amp;foo));</code>. This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Waddress</code></dt>\n<dd>\nWarn about suspicious uses of memory addresses. These include using the address of a function in a conditional expression, such as <code>void func(void); if (func)</code>, and comparisons against the memory address of a string literal, such as <code>if (x == \"abc\")</code>. Such uses typically indicate a programmer error: the address of a function always evaluates to true, so their use in a conditional usually indicate that the programmer forgot the parentheses in a function call; and comparisons against string literals result in unspecified behavior and are not portable in C, so they usually indicate that the programmer intended to use <code>strcmp</code>. This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wlogical-op</code></dt>\n<dd>\nWarn about suspicious uses of logical operators in expressions. This includes using logical operators in contexts where a bit-wise operator is likely to be expected. </dd>\n<dt><code>-Waggregate-return</code></dt>\n<dd>\nWarn if any functions that return structures or unions are defined or called. (In languages where you can return an array, this also elicits a warning.) </dd>\n<dt><code>-Wno-aggressive-loop-optimizations</code></dt>\n<dd>\nWarn if in a loop with constant number of iterations the compiler detects undefined behavior in some statement during one or more of the iterations. </dd>\n<dt><code>-Wno-attributes</code></dt>\n<dd>\nDo not warn if an unexpected <code>__attribute__</code> is used, such as unrecognized attributes, function attributes applied to variables, etc. This does not stop errors for incorrect use of supported attributes. </dd>\n<dt><code>-Wno-builtin-macro-redefined</code></dt>\n<dd>\nDo not warn if certain built-in macros are redefined. This suppresses warnings for redefinition of <code>__TIMESTAMP__</code>, <code>__TIME__</code>, <code>__DATE__</code>, <code>__FILE__</code>, and <code>__BASE_FILE__</code>. </dd>\n<dt>\n<code>-Wstrict-prototypes </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn if a function is declared or defined without specifying the argument types. (An old-style function definition is permitted without a warning if preceded by a declaration that specifies the argument types.) </dd>\n<dt>\n<code>-Wold-style-declaration </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn for obsolescent usages, according to the C Standard, in a declaration. For example, warn if storage-class specifiers like <code>static</code> are not the first things in a declaration. This warning is also enabled by <code>-Wextra</code>. </dd>\n<dt>\n<code>-Wold-style-definition </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn if an old-style function definition is used. A warning is given even if there is a previous prototype. </dd>\n<dt>\n<code>-Wmissing-parameter-type </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nA function parameter is declared without a type specifier in K&amp;R-style functions: <pre class=\"smallexample\">void foo(bar) { }</pre> <p>This warning is also enabled by <code>-Wextra</code>. </p>\n</dd>\n<dt>\n<code>-Wmissing-prototypes </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn if a global function is defined without a previous prototype declaration. This warning is issued even if the definition itself provides a prototype. Use this option to detect global functions that do not have a matching prototype declaration in a header file. This option is not valid for C++ because all function declarations provide prototypes and a non-matching declaration will declare an overload rather than conflict with an earlier declaration. Use <code>-Wmissing-declarations</code> to detect missing declarations in C++. </dd>\n<dt><code>-Wmissing-declarations</code></dt>\n<dd>\nWarn if a global function is defined without a previous declaration. Do so even if the definition itself provides a prototype. Use this option to detect global functions that are not declared in header files. In C, no warnings are issued for functions with previous non-prototype declarations; use <code>-Wmissing-prototype</code> to detect missing prototypes. In C++, no warnings are issued for function templates, or for inline functions, or for functions in anonymous namespaces. </dd>\n<dt><code>-Wmissing-field-initializers</code></dt>\n<dd>\nWarn if a structure's initializer has some fields missing. For example, the following code causes such a warning, because <code>x.h</code> is implicitly zero: <pre class=\"smallexample\">struct s { int f, g, h; };\nstruct s x = { 3, 4 };</pre> <p>This option does not warn about designated initializers, so the following modification does not trigger a warning: </p>\n<pre class=\"smallexample\">struct s { int f, g, h; };\nstruct s x = { .f = 3, .g = 4 };</pre> <p>This warning is included in <code>-Wextra</code>. To get other <code>-Wextra</code> warnings without this one, use <code>-Wextra -Wno-missing-field-initializers</code>. </p>\n</dd>\n<dt><code>-Wno-multichar</code></dt>\n<dd>\nDo not warn if a multicharacter constant (‘<code>'FOOF'</code>’) is used. Usually they indicate a typo in the user's code, as they have implementation-defined values, and should not be used in portable code. </dd>\n<dt><code>-Wnormalized=&lt;none|id|nfc|nfkc&gt;</code></dt>\n<dd>\nIn ISO C and ISO C++, two identifiers are different if they are different sequences of characters. However, sometimes when characters outside the basic ASCII character set are used, you can have two different character sequences that look the same. To avoid confusion, the ISO 10646 standard sets out some normalization rules which when applied ensure that two sequences that look the same are turned into the same sequence. GCC can warn you if you are using identifiers that have not been normalized; this option controls that warning. <p>There are four levels of warning supported by GCC. The default is <code>-Wnormalized=nfc</code>, which warns about any identifier that is not in the ISO 10646 “C” normalized form, NFC. NFC is the recommended form for most uses. </p>\n<p>Unfortunately, there are some characters allowed in identifiers by ISO C and ISO C++ that, when turned into NFC, are not allowed in identifiers. That is, there's no way to use these symbols in portable ISO C or C++ and have all your identifiers in NFC. <code>-Wnormalized=id</code> suppresses the warning for these characters. It is hoped that future versions of the standards involved will correct this, which is why this option is not the default. </p>\n<p>You can switch the warning off for all characters by writing <code>-Wnormalized=none</code>. You should only do this if you are using some other normalization scheme (like “D”), because otherwise you can easily create bugs that are literally impossible to see. </p>\n<p>Some characters in ISO 10646 have distinct meanings but look identical in some fonts or display methodologies, especially once formatting has been applied. For instance <code>\\u207F</code>, “SUPERSCRIPT LATIN SMALL LETTER N”, displays just like a regular <code>n</code> that has been placed in a superscript. ISO 10646 defines the NFKC normalization scheme to convert all these into a standard form as well, and GCC warns if your code is not in NFKC if you use <code>-Wnormalized=nfkc</code>. This warning is comparable to warning about every identifier that contains the letter O because it might be confused with the digit 0, and so is not the default, but may be useful as a local coding convention if the programming environment cannot be fixed to display these characters distinctly. </p>\n</dd>\n<dt><code>-Wno-deprecated</code></dt>\n<dd>\nDo not warn about usage of deprecated features. See <a href=\"deprecated-features#Deprecated-Features\">Deprecated Features</a>. </dd>\n<dt><code>-Wno-deprecated-declarations</code></dt>\n<dd>\nDo not warn about uses of functions (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>), variables (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>), and types (see <a href=\"type-attributes#Type-Attributes\">Type Attributes</a>) marked as deprecated by using the <code>deprecated</code> attribute. </dd>\n<dt><code>-Wno-overflow</code></dt>\n<dd>\nDo not warn about compile-time overflow in constant expressions. </dd>\n<dt><code>-Wopenmp-simd</code></dt>\n<dd>\nWarn if the vectorizer cost model overrides the OpenMP or the Cilk Plus simd directive set by user. The <code>-fsimd-cost-model=unlimited</code> can be used to relax the cost model. </dd>\n<dt>\n<code>-Woverride-init </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn if an initialized field without side effects is overridden when using designated initializers (see <a href=\"designated-inits#Designated-Inits\">Designated Initializers</a>). <p>This warning is included in <code>-Wextra</code>. To get other <code>-Wextra</code> warnings without this one, use <code>-Wextra -Wno-override-init</code>. </p>\n</dd>\n<dt><code>-Wpacked</code></dt>\n<dd>\nWarn if a structure is given the packed attribute, but the packed attribute has no effect on the layout or size of the structure. Such structures may be mis-aligned for little benefit. For instance, in this code, the variable <code>f.x</code> in <code>struct bar</code> is misaligned even though <code>struct bar</code> does not itself have the packed attribute: <pre class=\"smallexample\">struct foo {\n  int x;\n  char a, b, c, d;\n} __attribute__((packed));\nstruct bar {\n  char z;\n  struct foo f;\n};</pre> </dd>\n<dt><code>-Wpacked-bitfield-compat</code></dt>\n<dd>\nThe 4.1, 4.2 and 4.3 series of GCC ignore the <code>packed</code> attribute on bit-fields of type <code>char</code>. This has been fixed in GCC 4.4 but the change can lead to differences in the structure layout. GCC informs you when the offset of such a field has changed in GCC 4.4. For example there is no longer a 4-bit padding between field <code>a</code> and <code>b</code> in this structure: <pre class=\"smallexample\">struct foo\n{\n  char a:4;\n  char b:8;\n} __attribute__ ((packed));</pre> <p>This warning is enabled by default. Use <code>-Wno-packed-bitfield-compat</code> to disable this warning. </p>\n</dd>\n<dt><code>-Wpadded</code></dt>\n<dd>\nWarn if padding is included in a structure, either to align an element of the structure or to align the whole structure. Sometimes when this happens it is possible to rearrange the fields of the structure to reduce the padding and so make the structure smaller. </dd>\n<dt><code>-Wredundant-decls</code></dt>\n<dd>\nWarn if anything is declared more than once in the same scope, even in cases where multiple declaration is valid and changes nothing. </dd>\n<dt>\n<code>-Wnested-externs </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn if an <code>extern</code> declaration is encountered within a function. </dd>\n<dt><code>-Wno-inherited-variadic-ctor</code></dt>\n<dd>\nSuppress warnings about use of C++11 inheriting constructors when the base class inherited from has a C variadic constructor; the warning is on by default because the ellipsis is not inherited. </dd>\n<dt><code>-Winline</code></dt>\n<dd>\nWarn if a function that is declared as inline cannot be inlined. Even with this option, the compiler does not warn about failures to inline functions declared in system headers. <p>The compiler uses a variety of heuristics to determine whether or not to inline a function. For example, the compiler takes into account the size of the function being inlined and the amount of inlining that has already been done in the current function. Therefore, seemingly insignificant changes in the source program can cause the warnings produced by <code>-Winline</code> to appear or disappear. </p>\n</dd>\n<dt>\n<code>-Wno-invalid-offsetof </code><span class=\"roman\">(C++ and Objective-C++ only)</span>\n</dt>\n<dd>\nSuppress warnings from applying the ‘<code>offsetof</code>’ macro to a non-POD type. According to the 1998 ISO C++ standard, applying ‘<code>offsetof</code>’ to a non-POD type is undefined. In existing C++ implementations, however, ‘<code>offsetof</code>’ typically gives meaningful results even when applied to certain kinds of non-POD types (such as a simple ‘<code>struct</code>’ that fails to be a POD type only by virtue of having a constructor). This flag is for users who are aware that they are writing nonportable code and who have deliberately chosen to ignore the warning about it. <p>The restrictions on ‘<code>offsetof</code>’ may be relaxed in a future version of the C++ standard. </p>\n</dd>\n<dt><code>-Wno-int-to-pointer-cast</code></dt>\n<dd>\nSuppress warnings from casts to pointer type of an integer of a different size. In C++, casting to a pointer type of smaller size is an error. <code>Wint-to-pointer-cast</code> is enabled by default. </dd>\n<dt>\n<code>-Wno-pointer-to-int-cast </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nSuppress warnings from casts from a pointer to an integer type of a different size. </dd>\n<dt><code>-Winvalid-pch</code></dt>\n<dd>\nWarn if a precompiled header (see <a href=\"precompiled-headers#Precompiled-Headers\">Precompiled Headers</a>) is found in the search path but can't be used. </dd>\n<dt><code>-Wlong-long</code></dt>\n<dd>\nWarn if ‘<code>long long</code>’ type is used. This is enabled by either <code>-Wpedantic</code> or <code>-Wtraditional</code> in ISO C90 and C++98 modes. To inhibit the warning messages, use <code>-Wno-long-long</code>. </dd>\n<dt><code>-Wvariadic-macros</code></dt>\n<dd>\nWarn if variadic macros are used in pedantic ISO C90 mode, or the GNU alternate syntax when in pedantic ISO C99 mode. This is default. To inhibit the warning messages, use <code>-Wno-variadic-macros</code>. </dd>\n<dt><code>-Wvarargs</code></dt>\n<dd>\nWarn upon questionable usage of the macros used to handle variable arguments like ‘<code>va_start</code>’. This is default. To inhibit the warning messages, use <code>-Wno-varargs</code>. </dd>\n<dt><code>-Wvector-operation-performance</code></dt>\n<dd>\nWarn if vector operation is not implemented via SIMD capabilities of the architecture. Mainly useful for the performance tuning. Vector operation can be implemented <code>piecewise</code>, which means that the scalar operation is performed on every vector element; <code>in parallel</code>, which means that the vector operation is implemented using scalars of wider type, which normally is more performance efficient; and <code>as a single scalar</code>, which means that vector fits into a scalar type. </dd>\n<dt><code>-Wno-virtual-move-assign</code></dt>\n<dd>\nSuppress warnings about inheriting from a virtual base with a non-trivial C++11 move assignment operator. This is dangerous because if the virtual base is reachable along more than one path, it will be moved multiple times, which can mean both objects end up in the moved-from state. If the move assignment operator is written to avoid moving from a moved-from object, this warning can be disabled. </dd>\n<dt><code>-Wvla</code></dt>\n<dd>\nWarn if variable length array is used in the code. <code>-Wno-vla</code> prevents the <code>-Wpedantic</code> warning of the variable length array. </dd>\n<dt><code>-Wvolatile-register-var</code></dt>\n<dd>\nWarn if a register variable is declared volatile. The volatile modifier does not inhibit all optimizations that may eliminate reads and/or writes to register variables. This warning is enabled by <code>-Wall</code>. </dd>\n<dt><code>-Wdisabled-optimization</code></dt>\n<dd>\nWarn if a requested optimization pass is disabled. This warning does not generally indicate that there is anything wrong with your code; it merely indicates that GCC's optimizers are unable to handle the code effectively. Often, the problem is that your code is too big or too complex; GCC refuses to optimize programs when the optimization itself is likely to take inordinate amounts of time. </dd>\n<dt>\n<code>-Wpointer-sign </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\nWarn for pointer argument passing or assignment with different signedness. This option is only supported for C and Objective-C. It is implied by <code>-Wall</code> and by <code>-Wpedantic</code>, which can be disabled with <code>-Wno-pointer-sign</code>. </dd>\n<dt><code>-Wstack-protector</code></dt>\n<dd>\nThis option is only active when <code>-fstack-protector</code> is active. It warns about functions that are not protected against stack smashing. </dd>\n<dt><code>-Woverlength-strings</code></dt>\n<dd>\nWarn about string constants that are longer than the “minimum maximum” length specified in the C standard. Modern compilers generally allow string constants that are much longer than the standard's minimum limit, but very portable programs should avoid using longer strings. <p>The limit applies <em>after</em> string constant concatenation, and does not count the trailing NUL. In C90, the limit was 509 characters; in C99, it was raised to 4095. C++98 does not specify a normative minimum maximum, so we do not diagnose overlength strings in C++. </p>\n<p>This option is implied by <code>-Wpedantic</code>, and can be disabled with <code>-Wno-overlength-strings</code>. </p>\n</dd>\n<dt>\n<code>-Wunsuffixed-float-constants </code><span class=\"roman\">(C and Objective-C only)</span>\n</dt>\n<dd>\n Issue a warning for any floating constant that does not have a suffix. When used together with <code>-Wsystem-headers</code> it warns about such constants in system header files. This can be useful when preparing code to use with the <code>FLOAT_CONST_DECIMAL64</code> pragma from the decimal floating-point extension to C99. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Warning-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Warning-Options.html</a>\n  </p>\n</div>\n","debugging-options":"<h1 class=\"section\" id=\"Debugging-Options\">3.9 Options for Debugging Your Program or GCC</h1> <p> GCC has various special options that are used for debugging either your program or GCC: </p>\n<dl> <dt><code>-g</code></dt>\n<dd>\nProduce debugging information in the operating system's native format (stabs, COFF, XCOFF, or DWARF 2). GDB can work with this debugging information. <p>On most systems that use stabs format, <code>-g</code> enables use of extra debugging information that only GDB can use; this extra information makes debugging work better in GDB but probably makes other debuggers crash or refuse to read the program. If you want to control for certain whether to generate the extra information, use <code>-gstabs+</code>, <code>-gstabs</code>, <code>-gxcoff+</code>, <code>-gxcoff</code>, or <code>-gvms</code> (see below). </p>\n<p>GCC allows you to use <code>-g</code> with <code>-O</code>. The shortcuts taken by optimized code may occasionally produce surprising results: some variables you declared may not exist at all; flow of control may briefly move where you did not expect it; some statements may not be executed because they compute constant results or their values are already at hand; some statements may execute in different places because they have been moved out of loops. </p>\n<p>Nevertheless it proves possible to debug optimized output. This makes it reasonable to use the optimizer for programs that might have bugs. </p>\n<p>The following options are useful when GCC is generated with the capability for more than one debugging format. </p>\n</dd>\n<dt><code>-gsplit-dwarf</code></dt>\n<dd>\nSeparate as much dwarf debugging information as possible into a separate output file with the extension .dwo. This option allows the build system to avoid linking files with debug information. To be useful, this option requires a debugger capable of reading .dwo files. </dd>\n<dt><code>-ggdb</code></dt>\n<dd>\nProduce debugging information for use by GDB. This means to use the most expressive format available (DWARF 2, stabs, or the native format if neither of those are supported), including GDB extensions if at all possible. </dd>\n<dt><code>-gpubnames</code></dt>\n<dd>\nGenerate dwarf .debug_pubnames and .debug_pubtypes sections. </dd>\n<dt><code>-ggnu-pubnames</code></dt>\n<dd>\nGenerate .debug_pubnames and .debug_pubtypes sections in a format suitable for conversion into a GDB index. This option is only useful with a linker that can produce GDB index version 7. </dd>\n<dt><code>-gstabs</code></dt>\n<dd>\nProduce debugging information in stabs format (if that is supported), without GDB extensions. This is the format used by DBX on most BSD systems. On MIPS, Alpha and System V Release 4 systems this option produces stabs debugging output that is not understood by DBX or SDB. On System V Release 4 systems this option requires the GNU assembler. </dd>\n<dt><code>-feliminate-unused-debug-symbols</code></dt>\n<dd>\nProduce debugging information in stabs format (if that is supported), for only symbols that are actually used. </dd>\n<dt><code>-femit-class-debug-always</code></dt>\n<dd>Instead of emitting debugging information for a C++ class in only one object file, emit it in all object files using the class. This option should be used only with debuggers that are unable to handle the way GCC normally emits debugging information for classes because using this option increases the size of debugging information by as much as a factor of two. </dd>\n<dt><code>-fdebug-types-section</code></dt>\n<dd>\nWhen using DWARF Version 4 or higher, type DIEs can be put into their own <code>.debug_types</code> section instead of making them part of the <code>.debug_info</code> section. It is more efficient to put them in a separate comdat sections since the linker can then remove duplicates. But not all DWARF consumers support <code>.debug_types</code> sections yet and on some objects <code>.debug_types</code> produces larger instead of smaller debugging information. </dd>\n<dt><code>-gstabs+</code></dt>\n<dd>\nProduce debugging information in stabs format (if that is supported), using GNU extensions understood only by the GNU debugger (GDB). The use of these extensions is likely to make other debuggers crash or refuse to read the program. </dd>\n<dt><code>-gcoff</code></dt>\n<dd>\nProduce debugging information in COFF format (if that is supported). This is the format used by SDB on most System V systems prior to System V Release 4. </dd>\n<dt><code>-gxcoff</code></dt>\n<dd>\nProduce debugging information in XCOFF format (if that is supported). This is the format used by the DBX debugger on IBM RS/6000 systems. </dd>\n<dt><code>-gxcoff+</code></dt>\n<dd>\nProduce debugging information in XCOFF format (if that is supported), using GNU extensions understood only by the GNU debugger (GDB). The use of these extensions is likely to make other debuggers crash or refuse to read the program, and may cause assemblers other than the GNU assembler (GAS) to fail with an error. </dd>\n<dt>\n<code>-gdwarf-</code><var>version</var>\n</dt>\n<dd>\nProduce debugging information in DWARF format (if that is supported). The value of <var>version</var> may be either 2, 3 or 4; the default version for most targets is 4. <p>Note that with DWARF Version 2, some ports require and always use some non-conflicting DWARF 3 extensions in the unwind tables. </p>\n<p>Version 4 may require GDB 7.0 and <code>-fvar-tracking-assignments</code> for maximum benefit. </p>\n</dd>\n<dt><code>-grecord-gcc-switches</code></dt>\n<dd>\nThis switch causes the command-line options used to invoke the compiler that may affect code generation to be appended to the DW_AT_producer attribute in DWARF debugging information. The options are concatenated with spaces separating them from each other and from the compiler version. See also <code>-frecord-gcc-switches</code> for another way of storing compiler options into the object file. This is the default. </dd>\n<dt><code>-gno-record-gcc-switches</code></dt>\n<dd>\nDisallow appending command-line options to the DW_AT_producer attribute in DWARF debugging information. </dd>\n<dt><code>-gstrict-dwarf</code></dt>\n<dd>\nDisallow using extensions of later DWARF standard version than selected with <samp><span class=\"option\">-gdwarf-</span><var>version</var></samp>. On most targets using non-conflicting DWARF extensions from later standard versions is allowed. </dd>\n<dt><code>-gno-strict-dwarf</code></dt>\n<dd>\nAllow using extensions of later DWARF standard version than selected with <samp><span class=\"option\">-gdwarf-</span><var>version</var></samp>. </dd>\n<dt><code>-gvms</code></dt>\n<dd>\nProduce debugging information in Alpha/VMS debug format (if that is supported). This is the format used by DEBUG on Alpha/VMS systems. </dd>\n<dt>\n<code>-g</code><var>level</var><dt>\n<code>-ggdb</code><var>level</var><dt>\n<code>-gstabs</code><var>level</var><dt>\n<code>-gcoff</code><var>level</var><dt>\n<code>-gxcoff</code><var>level</var><dt>\n<code>-gvms</code><var>level</var>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Request debugging information and also use <var>level</var> to specify how much information. The default level is 2. <p>Level 0 produces no debug information at all. Thus, <code>-g0</code> negates <code>-g</code>. </p>\n<p>Level 1 produces minimal information, enough for making backtraces in parts of the program that you don't plan to debug. This includes descriptions of functions and external variables, and line number tables, but no information about local variables. </p>\n<p>Level 3 includes extra information, such as all the macro definitions present in the program. Some debuggers support macro expansion when you use <code>-g3</code>. </p>\n<p><code>-gdwarf-2</code> does not accept a concatenated debug level, because GCC used to support an option <code>-gdwarf</code> that meant to generate debug information in version 1 of the DWARF format (which is very different from version 2), and it would have been too confusing. That debug format is long obsolete, but the option cannot be changed now. Instead use an additional <samp><span class=\"option\">-g</span><var>level</var></samp> option to change the debug level for DWARF. </p>\n</dd>\n<dt><code>-gtoggle</code></dt>\n<dd>\nTurn off generation of debug info, if leaving out this option generates it, or turn it on at level 2 otherwise. The position of this argument in the command line does not matter; it takes effect after all other options are processed, and it does so only once, no matter how many times it is given. This is mainly intended to be used with <code>-fcompare-debug</code>. </dd>\n<dt><code>-fsanitize=address</code></dt>\n<dd>\nEnable AddressSanitizer, a fast memory error detector. Memory access instructions will be instrumented to detect out-of-bounds and use-after-free bugs. See <a href=\"http://code.google.com/p/address-sanitizer/\">http://code.google.com/p/address-sanitizer/</a> for more details. The run-time behavior can be influenced using the <code>ASAN_OPTIONS</code> environment variable; see <a href=\"https://code.google.com/p/address-sanitizer/wiki/Flags#Run-time_flags\">https://code.google.com/p/address-sanitizer/wiki/Flags#Run-time_flags</a> for a list of supported options. </dd>\n<dt><code>-fsanitize=kernel-address</code></dt>\n<dd>\nEnable AddressSanitizer for Linux kernel. See <a href=\"http://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernel\">http://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernel</a> for more details. </dd>\n<dt><code>-fsanitize=thread</code></dt>\n<dd>\nEnable ThreadSanitizer, a fast data race detector. Memory access instructions will be instrumented to detect data race bugs. See <a href=\"http://code.google.com/p/thread-sanitizer/\">http://code.google.com/p/thread-sanitizer/</a> for more details. The run-time behavior can be influenced using the <code>TSAN_OPTIONS</code> environment variable; see <a href=\"https://code.google.com/p/thread-sanitizer/wiki/Flags\">https://code.google.com/p/thread-sanitizer/wiki/Flags</a> for a list of supported options. </dd>\n<dt><code>-fsanitize=leak</code></dt>\n<dd>\nEnable LeakSanitizer, a memory leak detector. This option only matters for linking of executables and if neither <code>-fsanitize=address</code> nor <code>-fsanitize=thread</code> is used. In that case it will link the executable against a library that overrides <code>malloc</code> and other allocator functions. See <a href=\"https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer\">https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer</a> for more details. The run-time behavior can be influenced using the <code>LSAN_OPTIONS</code> environment variable. </dd>\n<dt><code>-fsanitize=undefined</code></dt>\n<dd>\nEnable UndefinedBehaviorSanitizer, a fast undefined behavior detector. Various computations will be instrumented to detect undefined behavior at runtime. Current suboptions are: <dl> <dt><code>-fsanitize=shift</code></dt>\n<dd>\n This option enables checking that the result of a shift operation is not undefined. Note that what exactly is considered undefined differs slightly between C and C++, as well as between ISO C90 and C99, etc. </dd>\n<dt><code>-fsanitize=integer-divide-by-zero</code></dt>\n<dd>\n Detect integer division by zero as well as <code>INT_MIN / -1</code> division. </dd>\n<dt><code>-fsanitize=unreachable</code></dt>\n<dd>\n With this option, the compiler will turn the <code>__builtin_unreachable</code> call into a diagnostics message call instead. When reaching the <code>__builtin_unreachable</code> call, the behavior is undefined. </dd>\n<dt><code>-fsanitize=vla-bound</code></dt>\n<dd>\n This option instructs the compiler to check that the size of a variable length array is positive. This option does not have any effect in <code>-std=c++1y</code> mode, as the standard requires the exception be thrown instead. </dd>\n<dt><code>-fsanitize=null</code></dt>\n<dd>\n This option enables pointer checking. Particularly, the application built with this option turned on will issue an error message when it tries to dereference a NULL pointer, or if a reference (possibly an rvalue reference) is bound to a NULL pointer. </dd>\n<dt><code>-fsanitize=return</code></dt>\n<dd>\n This option enables return statement checking. Programs built with this option turned on will issue an error message when the end of a non-void function is reached without actually returning a value. This option works in C++ only. </dd>\n<dt><code>-fsanitize=signed-integer-overflow</code></dt>\n<dd>\n This option enables signed integer overflow checking. We check that the result of <code>+</code>, <code>*</code>, and both unary and binary <code>-</code> does not overflow in the signed arithmetics. Note, integer promotion rules must be taken into account. That is, the following is not an overflow: <pre class=\"smallexample\">signed char a = SCHAR_MAX;\na++;</pre> </dd>\n</dl> <p>While <code>-ftrapv</code> causes traps for signed overflows to be emitted, <code>-fsanitize=undefined</code> gives a diagnostic message. This currently works only for the C family of languages. </p>\n</dd>\n<dt>\n<code>-fdump-final-insns</code><span class=\"roman\">[</span><code>=</code><var>file</var><span class=\"roman\">]</span>\n</dt>\n<dd>\nDump the final internal representation (RTL) to <var>file</var>. If the optional argument is omitted (or if <var>file</var> is <code>.</code>), the name of the dump file is determined by appending <code>.gkd</code> to the compilation output file name. </dd>\n<dt>\n<code>-fcompare-debug</code><span class=\"roman\">[</span><code>=</code><var>opts</var><span class=\"roman\">]</span>\n</dt>\n<dd>\nIf no error occurs during compilation, run the compiler a second time, adding <var>opts</var> and <code>-fcompare-debug-second</code> to the arguments passed to the second compilation. Dump the final internal representation in both compilations, and print an error if they differ. <p>If the equal sign is omitted, the default <code>-gtoggle</code> is used. </p>\n<p>The environment variable <code>GCC_COMPARE_DEBUG</code>, if defined, non-empty and nonzero, implicitly enables <code>-fcompare-debug</code>. If <code>GCC_COMPARE_DEBUG</code> is defined to a string starting with a dash, then it is used for <var>opts</var>, otherwise the default <code>-gtoggle</code> is used. </p>\n<p><code>-fcompare-debug=</code>, with the equal sign but without <var>opts</var>, is equivalent to <code>-fno-compare-debug</code>, which disables the dumping of the final representation and the second compilation, preventing even <code>GCC_COMPARE_DEBUG</code> from taking effect. </p>\n<p>To verify full coverage during <code>-fcompare-debug</code> testing, set <code>GCC_COMPARE_DEBUG</code> to say ‘<code>-fcompare-debug-not-overridden</code>’, which GCC rejects as an invalid option in any actual compilation (rather than preprocessing, assembly or linking). To get just a warning, setting <code>GCC_COMPARE_DEBUG</code> to ‘<code>-w%n-fcompare-debug not overridden</code>’ will do. </p>\n</dd>\n<dt><code>-fcompare-debug-second</code></dt>\n<dd>\nThis option is implicitly passed to the compiler for the second compilation requested by <code>-fcompare-debug</code>, along with options to silence warnings, and omitting other options that would cause side-effect compiler outputs to files or to the standard output. Dump files and preserved temporary files are renamed so as to contain the <code>.gk</code> additional extension during the second compilation, to avoid overwriting those generated by the first. <p>When this option is passed to the compiler driver, it causes the <em>first</em> compilation to be skipped, which makes it useful for little other than debugging the compiler proper. </p>\n</dd>\n<dt><code>-feliminate-dwarf2-dups</code></dt>\n<dd>\nCompress DWARF 2 debugging information by eliminating duplicated information about each symbol. This option only makes sense when generating DWARF 2 debugging information with <code>-gdwarf-2</code>. </dd>\n<dt><code>-femit-struct-debug-baseonly</code></dt>\n<dd>\nEmit debug information for struct-like types only when the base name of the compilation source file matches the base name of file in which the struct is defined. <p>This option substantially reduces the size of debugging information, but at significant potential loss in type information to the debugger. See <code>-femit-struct-debug-reduced</code> for a less aggressive option. See <code>-femit-struct-debug-detailed</code> for more detailed control. </p>\n<p>This option works only with DWARF 2. </p>\n</dd>\n<dt><code>-femit-struct-debug-reduced</code></dt>\n<dd>\nEmit debug information for struct-like types only when the base name of the compilation source file matches the base name of file in which the type is defined, unless the struct is a template or defined in a system header. <p>This option significantly reduces the size of debugging information, with some potential loss in type information to the debugger. See <code>-femit-struct-debug-baseonly</code> for a more aggressive option. See <code>-femit-struct-debug-detailed</code> for more detailed control. </p>\n<p>This option works only with DWARF 2. </p>\n</dd>\n<dt>\n<code>-femit-struct-debug-detailed</code><span class=\"roman\">[</span><code>=</code><var>spec-list</var><span class=\"roman\">]</span>\n</dt>\n<dd>Specify the struct-like types for which the compiler generates debug information. The intent is to reduce duplicate struct debug information between different object files within the same program. <p>This option is a detailed version of <code>-femit-struct-debug-reduced</code> and <code>-femit-struct-debug-baseonly</code>, which serves for most needs. </p>\n<p>A specification has the syntax [‘<code>dir:</code>’|‘<code>ind:</code>’][‘<code>ord:</code>’|‘<code>gen:</code>’](‘<code>any</code>’|‘<code>sys</code>’|‘<code>base</code>’|‘<code>none</code>’) </p>\n<p>The optional first word limits the specification to structs that are used directly (‘<code>dir:</code>’) or used indirectly (‘<code>ind:</code>’). A struct type is used directly when it is the type of a variable, member. Indirect uses arise through pointers to structs. That is, when use of an incomplete struct is valid, the use is indirect. An example is ‘<code>struct one direct; struct two * indirect;</code>’. </p>\n<p>The optional second word limits the specification to ordinary structs (‘<code>ord:</code>’) or generic structs (‘<code>gen:</code>’). Generic structs are a bit complicated to explain. For C++, these are non-explicit specializations of template classes, or non-template classes within the above. Other programming languages have generics, but <code>-femit-struct-debug-detailed</code> does not yet implement them. </p>\n<p>The third word specifies the source files for those structs for which the compiler should emit debug information. The values ‘<code>none</code>’ and ‘<code>any</code>’ have the normal meaning. The value ‘<code>base</code>’ means that the base of name of the file in which the type declaration appears must match the base of the name of the main compilation file. In practice, this means that when compiling <code>foo.c</code>, debug information is generated for types declared in that file and <code>foo.h</code>, but not other header files. The value ‘<code>sys</code>’ means those types satisfying ‘<code>base</code>’ or declared in system or compiler headers. </p>\n<p>You may need to experiment to determine the best settings for your application. </p>\n<p>The default is <code>-femit-struct-debug-detailed=all</code>. </p>\n<p>This option works only with DWARF 2. </p>\n</dd>\n<dt><code>-fno-merge-debug-strings</code></dt>\n<dd>\nDirect the linker to not merge together strings in the debugging information that are identical in different object files. Merging is not supported by all assemblers or linkers. Merging decreases the size of the debug information in the output file at the cost of increasing link processing time. Merging is enabled by default. </dd>\n<dt>\n<code>-fdebug-prefix-map=</code><var>old</var><code>=</code><var>new</var>\n</dt>\n<dd>\nWhen compiling files in directory <samp><var>old</var></samp>, record debugging information describing them as in <samp><var>new</var></samp> instead. </dd>\n<dt><code>-fno-dwarf2-cfi-asm</code></dt>\n<dd>\nEmit DWARF 2 unwind info as compiler generated <code>.eh_frame</code> section instead of using GAS <code>.cfi_*</code> directives. \n</dd>\n<dt><code>-p</code></dt>\n<dd>\nGenerate extra code to write profile information suitable for the analysis program <code>prof</code>. You must use this option when compiling the source files you want data about, and you must also use it when linking. \n</dd>\n<dt><code>-pg</code></dt>\n<dd>\nGenerate extra code to write profile information suitable for the analysis program <code>gprof</code>. You must use this option when compiling the source files you want data about, and you must also use it when linking. </dd>\n<dt><code>-Q</code></dt>\n<dd>\nMakes the compiler print out each function name as it is compiled, and print some statistics about each pass when it finishes. </dd>\n<dt><code>-ftime-report</code></dt>\n<dd>\nMakes the compiler print some statistics about the time consumed by each pass when it finishes. </dd>\n<dt><code>-fmem-report</code></dt>\n<dd>\nMakes the compiler print some statistics about permanent memory allocation when it finishes. </dd>\n<dt><code>-fmem-report-wpa</code></dt>\n<dd>\nMakes the compiler print some statistics about permanent memory allocation for the WPA phase only. </dd>\n<dt><code>-fpre-ipa-mem-report</code></dt>\n\n<dt><code>-fpost-ipa-mem-report</code></dt>\n<dd>\nMakes the compiler print some statistics about permanent memory allocation before or after interprocedural optimization. </dd>\n<dt><code>-fprofile-report</code></dt>\n<dd>\nMakes the compiler print some statistics about consistency of the (estimated) profile and effect of individual passes. </dd>\n<dt><code>-fstack-usage</code></dt>\n<dd>\nMakes the compiler output stack usage information for the program, on a per-function basis. The filename for the dump is made by appending <code>.su</code> to the <var>auxname</var>. <var>auxname</var> is generated from the name of the output file, if explicitly specified and it is not an executable, otherwise it is the basename of the source file. An entry is made up of three fields: <ul> <li>The name of the function. </li>\n<li>A number of bytes. </li>\n<li>One or more qualifiers: <code>static</code>, <code>dynamic</code>, <code>bounded</code>. </li>\n</ul> <p>The qualifier <code>static</code> means that the function manipulates the stack statically: a fixed number of bytes are allocated for the frame on function entry and released on function exit; no stack adjustments are otherwise made in the function. The second field is this fixed number of bytes. </p>\n<p>The qualifier <code>dynamic</code> means that the function manipulates the stack dynamically: in addition to the static allocation described above, stack adjustments are made in the body of the function, for example to push/pop arguments around function calls. If the qualifier <code>bounded</code> is also present, the amount of these adjustments is bounded at compile time and the second field is an upper bound of the total amount of stack used by the function. If it is not present, the amount of these adjustments is not bounded at compile time and the second field only represents the bounded part. </p>\n</dd>\n<dt><code>-fprofile-arcs</code></dt>\n<dd>\nAdd code so that program flow arcs are instrumented. During execution the program records how many times each branch and call is executed and how many times it is taken or returns. When the compiled program exits it saves this data to a file called <samp><var>auxname</var><span class=\"file\">.gcda</span></samp> for each source file. The data may be used for profile-directed optimizations (<code>-fbranch-probabilities</code>), or for test coverage analysis (<code>-ftest-coverage</code>). Each object file's <var>auxname</var> is generated from the name of the output file, if explicitly specified and it is not the final executable, otherwise it is the basename of the source file. In both cases any suffix is removed (e.g. <code>foo.gcda</code> for input file <code>dir/foo.c</code>, or <code>dir/foo.gcda</code> for output file specified as <code>-o dir/foo.o</code>). See <a href=\"cross_002dprofiling#Cross_002dprofiling\">Cross-profiling</a>. \n</dd>\n<dt><code>--coverage</code></dt>\n<dd>\n This option is used to compile and link code instrumented for coverage analysis. The option is a synonym for <code>-fprofile-arcs</code> <code>-ftest-coverage</code> (when compiling) and <code>-lgcov</code> (when linking). See the documentation for those options for more details. <ul> <li>Compile the source files with <code>-fprofile-arcs</code> plus optimization and code generation options. For test coverage analysis, use the additional <code>-ftest-coverage</code> option. You do not need to profile every source file in a program. </li>\n<li>Link your object files with <code>-lgcov</code> or <code>-fprofile-arcs</code> (the latter implies the former). </li>\n<li>Run the program on a representative workload to generate the arc profile information. This may be repeated any number of times. You can run concurrent instances of your program, and provided that the file system supports locking, the data files will be correctly updated. Also <code>fork</code> calls are detected and correctly handled (double counting will not happen). </li>\n<li>For profile-directed optimizations, compile the source files again with the same optimization and code generation options plus <code>-fbranch-probabilities</code> (see <a href=\"optimize-options#Optimize-Options\">Options that Control Optimization</a>). </li>\n<li>For test coverage analysis, use <code>gcov</code> to produce human readable information from the <code>.gcno</code> and <code>.gcda</code> files. Refer to the <code>gcov</code> documentation for further information. </li>\n</ul> <p>With <code>-fprofile-arcs</code>, for each function of your program GCC creates a program flow graph, then finds a spanning tree for the graph. Only arcs that are not on the spanning tree have to be instrumented: the compiler adds code to count the number of times that these arcs are executed. When an arc is the only exit or only entrance to a block, the instrumentation code can be added to the block; otherwise, a new basic block must be created to hold the instrumentation code. </p>\n</dd>\n<dt><code>-ftest-coverage</code></dt>\n<dd>\nProduce a notes file that the <code>gcov</code> code-coverage utility (see <a href=\"gcov#Gcov\"><code>gcov</code>—a Test Coverage Program</a>) can use to show program coverage. Each source file's note file is called <samp><var>auxname</var><span class=\"file\">.gcno</span></samp>. Refer to the <code>-fprofile-arcs</code> option above for a description of <var>auxname</var> and instructions on how to generate test coverage data. Coverage data matches the source files more closely if you do not optimize. </dd>\n<dt><code>-fdbg-cnt-list</code></dt>\n<dd>\nPrint the name and the counter upper bound for all debug counters. </dd>\n<dt>\n<code>-fdbg-cnt=</code><var>counter-value-list</var>\n</dt>\n<dd>\nSet the internal debug counter upper bound. <var>counter-value-list</var> is a comma-separated list of <var>name</var>:<var>value</var> pairs which sets the upper bound of each debug counter <var>name</var> to <var>value</var>. All debug counters have the initial upper bound of <code>UINT_MAX</code>; thus <code>dbg_cnt()</code> returns true always unless the upper bound is set by this option. For example, with <code>-fdbg-cnt=dce:10,tail_call:0</code>, <code>dbg_cnt(dce)</code> returns true only for first 10 invocations. </dd>\n<dt>\n<code>-fenable-</code><var>kind</var><code>-</code><var>pass</var><dt>\n<code>-fdisable-</code><var>kind</var><code>-</code><var>pass</var><code>=</code><var>range-list</var>\n</dt>\n</dt>\n<dd>\n This is a set of options that are used to explicitly disable/enable optimization passes. These options are intended for use for debugging GCC. Compiler users should use regular options for enabling/disabling passes instead. <dl> <dt>\n<code>-fdisable-ipa-</code><var>pass</var>\n</dt>\n<dd>Disable IPA pass <var>pass</var>. <var>pass</var> is the pass name. If the same pass is statically invoked in the compiler multiple times, the pass name should be appended with a sequential number starting from 1. </dd>\n<dt>\n<code>-fdisable-rtl-</code><var>pass</var><dt>\n<code>-fdisable-rtl-</code><var>pass</var><code>=</code><var>range-list</var>\n</dt>\n</dt>\n<dd>Disable RTL pass <var>pass</var>. <var>pass</var> is the pass name. If the same pass is statically invoked in the compiler multiple times, the pass name should be appended with a sequential number starting from 1. <var>range-list</var> is a comma-separated list of function ranges or assembler names. Each range is a number pair separated by a colon. The range is inclusive in both ends. If the range is trivial, the number pair can be simplified as a single number. If the function's call graph node's <var>uid</var> falls within one of the specified ranges, the <var>pass</var> is disabled for that function. The <var>uid</var> is shown in the function header of a dump file, and the pass names can be dumped by using option <code>-fdump-passes</code>. </dd>\n<dt>\n<code>-fdisable-tree-</code><var>pass</var><dt>\n<code>-fdisable-tree-</code><var>pass</var><code>=</code><var>range-list</var>\n</dt>\n</dt>\n<dd>Disable tree pass <var>pass</var>. See <code>-fdisable-rtl</code> for the description of option arguments. </dd>\n<dt>\n<code>-fenable-ipa-</code><var>pass</var>\n</dt>\n<dd>Enable IPA pass <var>pass</var>. <var>pass</var> is the pass name. If the same pass is statically invoked in the compiler multiple times, the pass name should be appended with a sequential number starting from 1. </dd>\n<dt>\n<code>-fenable-rtl-</code><var>pass</var><dt>\n<code>-fenable-rtl-</code><var>pass</var><code>=</code><var>range-list</var>\n</dt>\n</dt>\n<dd>Enable RTL pass <var>pass</var>. See <code>-fdisable-rtl</code> for option argument description and examples. </dd>\n<dt>\n<code>-fenable-tree-</code><var>pass</var><dt>\n<code>-fenable-tree-</code><var>pass</var><code>=</code><var>range-list</var>\n</dt>\n</dt>\n<dd>Enable tree pass <var>pass</var>. See <code>-fdisable-rtl</code> for the description of option arguments. </dd>\n</dl> <p>Here are some examples showing uses of these options. </p>\n<pre class=\"smallexample\"># disable ccp1 for all functions\n   -fdisable-tree-ccp1\n# disable complete unroll for function whose cgraph node uid is 1\n   -fenable-tree-cunroll=1\n# disable gcse2 for functions at the following ranges [1,1],\n# [300,400], and [400,1000]\n# disable gcse2 for functions foo and foo2\n   -fdisable-rtl-gcse2=foo,foo2\n# disable early inlining\n   -fdisable-tree-einline\n# disable ipa inlining\n   -fdisable-ipa-inline\n# enable tree full unroll\n   -fenable-tree-unroll</pre> </dd>\n<dt>\n<code>-d</code><var>letters</var><dt>\n<code>-fdump-rtl-</code><var>pass</var><dt>\n<code>-fdump-rtl-</code><var>pass</var><code>=</code><var>filename</var>\n</dt>\n</dt>\n</dt>\n<dd>\nSays to make debugging dumps during compilation at times specified by <var>letters</var>. This is used for debugging the RTL-based passes of the compiler. The file names for most of the dumps are made by appending a pass number and a word to the <var>dumpname</var>, and the files are created in the directory of the output file. In case of <samp><span class=\"option\">=</span><var>filename</var></samp> option, the dump is output on the given file instead of the pass numbered dump files. Note that the pass number is computed statically as passes get registered into the pass manager. Thus the numbering is not related to the dynamic order of execution of passes. In particular, a pass installed by a plugin could have a number over 200 even if it executed quite early. <var>dumpname</var> is generated from the name of the output file, if explicitly specified and it is not an executable, otherwise it is the basename of the source file. These switches may have different effects when <code>-E</code> is used for preprocessing. <p>Debug dumps can be enabled with a <code>-fdump-rtl</code> switch or some <code>-d</code> option <var>letters</var>. Here are the possible letters for use in <var>pass</var> and <var>letters</var>, and their meanings: </p>\n<dl> <dt><code>-fdump-rtl-alignments</code></dt>\n<dd>\nDump after branch alignments have been computed. </dd>\n<dt><code>-fdump-rtl-asmcons</code></dt>\n<dd>\nDump after fixing rtl statements that have unsatisfied in/out constraints. </dd>\n<dt><code>-fdump-rtl-auto_inc_dec</code></dt>\n<dd>\nDump after auto-inc-dec discovery. This pass is only run on architectures that have auto inc or auto dec instructions. </dd>\n<dt><code>-fdump-rtl-barriers</code></dt>\n<dd>\nDump after cleaning up the barrier instructions. </dd>\n<dt><code>-fdump-rtl-bbpart</code></dt>\n<dd>\nDump after partitioning hot and cold basic blocks. </dd>\n<dt><code>-fdump-rtl-bbro</code></dt>\n<dd>\nDump after block reordering. </dd>\n<dt>\n<code>-fdump-rtl-btl1</code><dt><code>-fdump-rtl-btl2</code></dt>\n</dt>\n<dd>\n<code>-fdump-rtl-btl1</code> and <code>-fdump-rtl-btl2</code> enable dumping after the two branch target load optimization passes. </dd>\n<dt><code>-fdump-rtl-bypass</code></dt>\n<dd>\nDump after jump bypassing and control flow optimizations. </dd>\n<dt><code>-fdump-rtl-combine</code></dt>\n<dd>\nDump after the RTL instruction combination pass. </dd>\n<dt><code>-fdump-rtl-compgotos</code></dt>\n<dd>\nDump after duplicating the computed gotos. </dd>\n<dt>\n<code>-fdump-rtl-ce1</code><dt>\n<code>-fdump-rtl-ce2</code><dt><code>-fdump-rtl-ce3</code></dt>\n</dt>\n</dt>\n<dd>\n<code>-fdump-rtl-ce1</code>, <code>-fdump-rtl-ce2</code>, and <code>-fdump-rtl-ce3</code> enable dumping after the three if conversion passes. </dd>\n<dt><code>-fdump-rtl-cprop_hardreg</code></dt>\n<dd>\nDump after hard register copy propagation. </dd>\n<dt><code>-fdump-rtl-csa</code></dt>\n<dd>\nDump after combining stack adjustments. </dd>\n<dt>\n<code>-fdump-rtl-cse1</code><dt><code>-fdump-rtl-cse2</code></dt>\n</dt>\n<dd>\n<code>-fdump-rtl-cse1</code> and <code>-fdump-rtl-cse2</code> enable dumping after the two common subexpression elimination passes. </dd>\n<dt><code>-fdump-rtl-dce</code></dt>\n<dd>\nDump after the standalone dead code elimination passes. </dd>\n<dt><code>-fdump-rtl-dbr</code></dt>\n<dd>\nDump after delayed branch scheduling. </dd>\n<dt>\n<code>-fdump-rtl-dce1</code><dt><code>-fdump-rtl-dce2</code></dt>\n</dt>\n<dd>\n<code>-fdump-rtl-dce1</code> and <code>-fdump-rtl-dce2</code> enable dumping after the two dead store elimination passes. </dd>\n<dt><code>-fdump-rtl-eh</code></dt>\n<dd>\nDump after finalization of EH handling code. </dd>\n<dt><code>-fdump-rtl-eh_ranges</code></dt>\n<dd>\nDump after conversion of EH handling range regions. </dd>\n<dt><code>-fdump-rtl-expand</code></dt>\n<dd>\nDump after RTL generation. </dd>\n<dt>\n<code>-fdump-rtl-fwprop1</code><dt><code>-fdump-rtl-fwprop2</code></dt>\n</dt>\n<dd>\n<code>-fdump-rtl-fwprop1</code> and <code>-fdump-rtl-fwprop2</code> enable dumping after the two forward propagation passes. </dd>\n<dt>\n<code>-fdump-rtl-gcse1</code><dt><code>-fdump-rtl-gcse2</code></dt>\n</dt>\n<dd>\n<code>-fdump-rtl-gcse1</code> and <code>-fdump-rtl-gcse2</code> enable dumping after global common subexpression elimination. </dd>\n<dt><code>-fdump-rtl-init-regs</code></dt>\n<dd>\nDump after the initialization of the registers. </dd>\n<dt><code>-fdump-rtl-initvals</code></dt>\n<dd>\nDump after the computation of the initial value sets. </dd>\n<dt><code>-fdump-rtl-into_cfglayout</code></dt>\n<dd>\nDump after converting to cfglayout mode. </dd>\n<dt><code>-fdump-rtl-ira</code></dt>\n<dd>\nDump after iterated register allocation. </dd>\n<dt><code>-fdump-rtl-jump</code></dt>\n<dd>\nDump after the second jump optimization. </dd>\n<dt><code>-fdump-rtl-loop2</code></dt>\n<dd>\n<code>-fdump-rtl-loop2</code> enables dumping after the rtl loop optimization passes. </dd>\n<dt><code>-fdump-rtl-mach</code></dt>\n<dd>\nDump after performing the machine dependent reorganization pass, if that pass exists. </dd>\n<dt><code>-fdump-rtl-mode_sw</code></dt>\n<dd>\nDump after removing redundant mode switches. </dd>\n<dt><code>-fdump-rtl-rnreg</code></dt>\n<dd>\nDump after register renumbering. </dd>\n<dt><code>-fdump-rtl-outof_cfglayout</code></dt>\n<dd>\nDump after converting from cfglayout mode. </dd>\n<dt><code>-fdump-rtl-peephole2</code></dt>\n<dd>\nDump after the peephole pass. </dd>\n<dt><code>-fdump-rtl-postreload</code></dt>\n<dd>\nDump after post-reload optimizations. </dd>\n<dt><code>-fdump-rtl-pro_and_epilogue</code></dt>\n<dd>\nDump after generating the function prologues and epilogues. </dd>\n<dt>\n<code>-fdump-rtl-sched1</code><dt><code>-fdump-rtl-sched2</code></dt>\n</dt>\n<dd>\n<code>-fdump-rtl-sched1</code> and <code>-fdump-rtl-sched2</code> enable dumping after the basic block scheduling passes. </dd>\n<dt><code>-fdump-rtl-ree</code></dt>\n<dd>\nDump after sign/zero extension elimination. </dd>\n<dt><code>-fdump-rtl-seqabstr</code></dt>\n<dd>\nDump after common sequence discovery. </dd>\n<dt><code>-fdump-rtl-shorten</code></dt>\n<dd>\nDump after shortening branches. </dd>\n<dt><code>-fdump-rtl-sibling</code></dt>\n<dd>\nDump after sibling call optimizations. </dd>\n<dt>\n<code>-fdump-rtl-split1</code><dt>\n<code>-fdump-rtl-split2</code><dt>\n<code>-fdump-rtl-split3</code><dt>\n<code>-fdump-rtl-split4</code><dt><code>-fdump-rtl-split5</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\n<code>-fdump-rtl-split1</code>, <code>-fdump-rtl-split2</code>, <code>-fdump-rtl-split3</code>, <code>-fdump-rtl-split4</code> and <code>-fdump-rtl-split5</code> enable dumping after five rounds of instruction splitting. </dd>\n<dt><code>-fdump-rtl-sms</code></dt>\n<dd>\nDump after modulo scheduling. This pass is only run on some architectures. </dd>\n<dt><code>-fdump-rtl-stack</code></dt>\n<dd>\nDump after conversion from GCC's “flat register file” registers to the x87's stack-like registers. This pass is only run on x86 variants. </dd>\n<dt>\n<code>-fdump-rtl-subreg1</code><dt><code>-fdump-rtl-subreg2</code></dt>\n</dt>\n<dd>\n<code>-fdump-rtl-subreg1</code> and <code>-fdump-rtl-subreg2</code> enable dumping after the two subreg expansion passes. </dd>\n<dt><code>-fdump-rtl-unshare</code></dt>\n<dd>\nDump after all rtl has been unshared. </dd>\n<dt><code>-fdump-rtl-vartrack</code></dt>\n<dd>\nDump after variable tracking. </dd>\n<dt><code>-fdump-rtl-vregs</code></dt>\n<dd>\nDump after converting virtual registers to hard registers. </dd>\n<dt><code>-fdump-rtl-web</code></dt>\n<dd>\nDump after live range splitting. </dd>\n<dt>\n<code>-fdump-rtl-regclass</code><dt>\n<code>-fdump-rtl-subregs_of_mode_init</code><dt>\n<code>-fdump-rtl-subregs_of_mode_finish</code><dt>\n<code>-fdump-rtl-dfinit</code><dt><code>-fdump-rtl-dfinish</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThese dumps are defined but always produce empty files. </dd>\n<dt>\n<code>-da</code><dt><code>-fdump-rtl-all</code></dt>\n</dt>\n<dd>\nProduce all the dumps listed above. </dd>\n<dt><code>-dA</code></dt>\n<dd>\nAnnotate the assembler output with miscellaneous debugging information. </dd>\n<dt><code>-dD</code></dt>\n<dd>\nDump all macro definitions, at the end of preprocessing, in addition to normal output. </dd>\n<dt><code>-dH</code></dt>\n<dd>\nProduce a core dump whenever an error occurs. </dd>\n<dt><code>-dp</code></dt>\n<dd>\nAnnotate the assembler output with a comment indicating which pattern and alternative is used. The length of each instruction is also printed. </dd>\n<dt><code>-dP</code></dt>\n<dd>\nDump the RTL in the assembler output as a comment before each instruction. Also turns on <code>-dp</code> annotation. </dd>\n<dt><code>-dx</code></dt>\n<dd>\nJust generate RTL for a function instead of compiling it. Usually used with <code>-fdump-rtl-expand</code>. </dd>\n</dl> </dd>\n<dt><code>-fdump-noaddr</code></dt>\n<dd>\nWhen doing debugging dumps, suppress address output. This makes it more feasible to use diff on debugging dumps for compiler invocations with different compiler binaries and/or different text / bss / data / heap / stack / dso start locations. </dd>\n<dt><code>-fdump-unnumbered</code></dt>\n<dd>\nWhen doing debugging dumps, suppress instruction numbers and address output. This makes it more feasible to use diff on debugging dumps for compiler invocations with different options, in particular with and without <code>-g</code>. </dd>\n<dt><code>-fdump-unnumbered-links</code></dt>\n<dd>\nWhen doing debugging dumps (see <code>-d</code> option above), suppress instruction numbers for the links to the previous and next instructions in a sequence. </dd>\n<dt>\n<code>-fdump-translation-unit </code><span class=\"roman\">(C++ only)</span><dt>\n<code>-fdump-translation-unit-</code><var>options</var> <span class=\"roman\">(C++ only)</span>\n</dt>\n</dt>\n<dd>\nDump a representation of the tree structure for the entire translation unit to a file. The file name is made by appending <code>.tu</code> to the source file name, and the file is created in the same directory as the output file. If the ‘<samp><span class=\"samp\">-</span><var>options</var></samp>’ form is used, <var>options</var> controls the details of the dump as described for the <code>-fdump-tree</code> options. </dd>\n<dt>\n<code>-fdump-class-hierarchy </code><span class=\"roman\">(C++ only)</span><dt>\n<code>-fdump-class-hierarchy-</code><var>options</var> <span class=\"roman\">(C++ only)</span>\n</dt>\n</dt>\n<dd>\nDump a representation of each class's hierarchy and virtual function table layout to a file. The file name is made by appending <code>.class</code> to the source file name, and the file is created in the same directory as the output file. If the ‘<samp><span class=\"samp\">-</span><var>options</var></samp>’ form is used, <var>options</var> controls the details of the dump as described for the <code>-fdump-tree</code> options. </dd>\n<dt>\n<code>-fdump-ipa-</code><var>switch</var>\n</dt>\n<dd>\nControl the dumping at various stages of inter-procedural analysis language tree to a file. The file name is generated by appending a switch specific suffix to the source file name, and the file is created in the same directory as the output file. The following dumps are possible: <dl> <dt>‘<code>all</code>’</dt>\n<dd>Enables all inter-procedural analysis dumps. </dd>\n<dt>‘<code>cgraph</code>’</dt>\n<dd>Dumps information about call-graph optimization, unused function removal, and inlining decisions. </dd>\n<dt>‘<code>inline</code>’</dt>\n<dd>Dump after function inlining. </dd>\n</dl> </dd>\n<dt><code>-fdump-passes</code></dt>\n<dd>\nDump the list of optimization passes that are turned on and off by the current command-line options. </dd>\n<dt>\n<code>-fdump-statistics-</code><var>option</var>\n</dt>\n<dd>\nEnable and control dumping of pass statistics in a separate file. The file name is generated by appending a suffix ending in ‘<code>.statistics</code>’ to the source file name, and the file is created in the same directory as the output file. If the ‘<samp><span class=\"samp\">-</span><var>option</var></samp>’ form is used, ‘<code>-stats</code>’ causes counters to be summed over the whole compilation unit while ‘<code>-details</code>’ dumps every event as the passes generate them. The default with no option is to sum counters for each function compiled. </dd>\n<dt>\n<code>-fdump-tree-</code><var>switch</var><dt>\n<code>-fdump-tree-</code><var>switch</var><code>-</code><var>options</var><dt>\n<code>-fdump-tree-</code><var>switch</var><code>-</code><var>options</var><code>=</code><var>filename</var>\n</dt>\n</dt>\n</dt>\n<dd>\nControl the dumping at various stages of processing the intermediate language tree to a file. The file name is generated by appending a switch-specific suffix to the source file name, and the file is created in the same directory as the output file. In case of <samp><span class=\"option\">=</span><var>filename</var></samp> option, the dump is output on the given file instead of the auto named dump files. If the ‘<samp><span class=\"samp\">-</span><var>options</var></samp>’ form is used, <var>options</var> is a list of ‘<code>-</code>’ separated options which control the details of the dump. Not all options are applicable to all dumps; those that are not meaningful are ignored. The following options are available <dl> <dt>‘<code>address</code>’</dt>\n<dd>Print the address of each node. Usually this is not meaningful as it changes according to the environment and source file. Its primary use is for tying up a dump file with a debug environment. </dd>\n<dt>‘<code>asmname</code>’</dt>\n<dd>If <code>DECL_ASSEMBLER_NAME</code> has been set for a given decl, use that in the dump instead of <code>DECL_NAME</code>. Its primary use is ease of use working backward from mangled names in the assembly file. </dd>\n<dt>‘<code>slim</code>’</dt>\n<dd>When dumping front-end intermediate representations, inhibit dumping of members of a scope or body of a function merely because that scope has been reached. Only dump such items when they are directly reachable by some other path. <p>When dumping pretty-printed trees, this option inhibits dumping the bodies of control structures. </p>\n<p>When dumping RTL, print the RTL in slim (condensed) form instead of the default LISP-like representation. </p>\n</dd>\n<dt>‘<code>raw</code>’</dt>\n<dd>Print a raw representation of the tree. By default, trees are pretty-printed into a C-like representation. </dd>\n<dt>‘<code>details</code>’</dt>\n<dd>Enable more detailed dumps (not honored by every dump option). Also include information from the optimization passes. </dd>\n<dt>‘<code>stats</code>’</dt>\n<dd>Enable dumping various statistics about the pass (not honored by every dump option). </dd>\n<dt>‘<code>blocks</code>’</dt>\n<dd>Enable showing basic block boundaries (disabled in raw dumps). </dd>\n<dt>‘<code>graph</code>’</dt>\n<dd>For each of the other indicated dump files (<samp><span class=\"option\">-fdump-rtl-</span><var>pass</var></samp>), dump a representation of the control flow graph suitable for viewing with GraphViz to <samp><var>file</var><span class=\"file\">.</span><var>passid</var><span class=\"file\">.</span><var>pass</var><span class=\"file\">.dot</span></samp>. Each function in the file is pretty-printed as a subgraph, so that GraphViz can render them all in a single plot. <p>This option currently only works for RTL dumps, and the RTL is always dumped in slim form. </p>\n</dd>\n<dt>‘<code>vops</code>’</dt>\n<dd>Enable showing virtual operands for every statement. </dd>\n<dt>‘<code>lineno</code>’</dt>\n<dd>Enable showing line numbers for statements. </dd>\n<dt>‘<code>uid</code>’</dt>\n<dd>Enable showing the unique ID (<code>DECL_UID</code>) for each variable. </dd>\n<dt>‘<code>verbose</code>’</dt>\n<dd>Enable showing the tree dump for each statement. </dd>\n<dt>‘<code>eh</code>’</dt>\n<dd>Enable showing the EH region number holding each statement. </dd>\n<dt>‘<code>scev</code>’</dt>\n<dd>Enable showing scalar evolution analysis details. </dd>\n<dt>‘<code>optimized</code>’</dt>\n<dd>Enable showing optimization information (only available in certain passes). </dd>\n<dt>‘<code>missed</code>’</dt>\n<dd>Enable showing missed optimization information (only available in certain passes). </dd>\n<dt>‘<code>notes</code>’</dt>\n<dd>Enable other detailed optimization information (only available in certain passes). </dd>\n<dt>‘<samp><span class=\"samp\">=</span><var>filename</var></samp>’</dt>\n<dd>Instead of an auto named dump file, output into the given file name. The file names <code>stdout</code> and <code>stderr</code> are treated specially and are considered already open standard streams. For example, <pre class=\"smallexample\">gcc -O2 -ftree-vectorize -fdump-tree-vect-blocks=foo.dump\n     -fdump-tree-pre=stderr file.c</pre> <p>outputs vectorizer dump into <code>foo.dump</code>, while the PRE dump is output on to <code>stderr</code>. If two conflicting dump filenames are given for the same pass, then the latter option overrides the earlier one. </p>\n</dd>\n<dt>‘<code>all</code>’</dt>\n<dd>Turn on all options, except <code>raw</code>, <code>slim</code>, <code>verbose</code> and <code>lineno</code>. </dd>\n<dt>‘<code>optall</code>’</dt>\n<dd>Turn on all optimization options, i.e., <code>optimized</code>, <code>missed</code>, and <code>note</code>. </dd>\n</dl> <p>The following tree dumps are possible: </p>\n<dl> <dt>‘<code>original</code>’</dt>\n<dd>\nDump before any tree based optimization, to <samp><var>file</var><span class=\"file\">.original</span></samp>. </dd>\n<dt>‘<code>optimized</code>’</dt>\n<dd>\nDump after all tree based optimization, to <samp><var>file</var><span class=\"file\">.optimized</span></samp>. </dd>\n<dt>‘<code>gimple</code>’</dt>\n<dd>\nDump each function before and after the gimplification pass to a file. The file name is made by appending <code>.gimple</code> to the source file name. </dd>\n<dt>‘<code>cfg</code>’</dt>\n<dd>\nDump the control flow graph of each function to a file. The file name is made by appending <code>.cfg</code> to the source file name. </dd>\n<dt>‘<code>ch</code>’</dt>\n<dd>\nDump each function after copying loop headers. The file name is made by appending <code>.ch</code> to the source file name. </dd>\n<dt>‘<code>ssa</code>’</dt>\n<dd>\nDump SSA related information to a file. The file name is made by appending <code>.ssa</code> to the source file name. </dd>\n<dt>‘<code>alias</code>’</dt>\n<dd>\nDump aliasing information for each function. The file name is made by appending <code>.alias</code> to the source file name. </dd>\n<dt>‘<code>ccp</code>’</dt>\n<dd>\nDump each function after CCP. The file name is made by appending <code>.ccp</code> to the source file name. </dd>\n<dt>‘<code>storeccp</code>’</dt>\n<dd>\nDump each function after STORE-CCP. The file name is made by appending <code>.storeccp</code> to the source file name. </dd>\n<dt>‘<code>pre</code>’</dt>\n<dd>\nDump trees after partial redundancy elimination. The file name is made by appending <code>.pre</code> to the source file name. </dd>\n<dt>‘<code>fre</code>’</dt>\n<dd>\nDump trees after full redundancy elimination. The file name is made by appending <code>.fre</code> to the source file name. </dd>\n<dt>‘<code>copyprop</code>’</dt>\n<dd>\nDump trees after copy propagation. The file name is made by appending <code>.copyprop</code> to the source file name. </dd>\n<dt>‘<code>store_copyprop</code>’</dt>\n<dd>\nDump trees after store copy-propagation. The file name is made by appending <code>.store_copyprop</code> to the source file name. </dd>\n<dt>‘<code>dce</code>’</dt>\n<dd>\nDump each function after dead code elimination. The file name is made by appending <code>.dce</code> to the source file name. </dd>\n<dt>‘<code>sra</code>’</dt>\n<dd>\nDump each function after performing scalar replacement of aggregates. The file name is made by appending <code>.sra</code> to the source file name. </dd>\n<dt>‘<code>sink</code>’</dt>\n<dd>\nDump each function after performing code sinking. The file name is made by appending <code>.sink</code> to the source file name. </dd>\n<dt>‘<code>dom</code>’</dt>\n<dd>\nDump each function after applying dominator tree optimizations. The file name is made by appending <code>.dom</code> to the source file name. </dd>\n<dt>‘<code>dse</code>’</dt>\n<dd>\nDump each function after applying dead store elimination. The file name is made by appending <code>.dse</code> to the source file name. </dd>\n<dt>‘<code>phiopt</code>’</dt>\n<dd>\nDump each function after optimizing PHI nodes into straightline code. The file name is made by appending <code>.phiopt</code> to the source file name. </dd>\n<dt>‘<code>forwprop</code>’</dt>\n<dd>\nDump each function after forward propagating single use variables. The file name is made by appending <code>.forwprop</code> to the source file name. </dd>\n<dt>‘<code>copyrename</code>’</dt>\n<dd>\nDump each function after applying the copy rename optimization. The file name is made by appending <code>.copyrename</code> to the source file name. </dd>\n<dt>‘<code>nrv</code>’</dt>\n<dd>\nDump each function after applying the named return value optimization on generic trees. The file name is made by appending <code>.nrv</code> to the source file name. </dd>\n<dt>‘<code>vect</code>’</dt>\n<dd>\nDump each function after applying vectorization of loops. The file name is made by appending <code>.vect</code> to the source file name. </dd>\n<dt>‘<code>slp</code>’</dt>\n<dd>\nDump each function after applying vectorization of basic blocks. The file name is made by appending <code>.slp</code> to the source file name. </dd>\n<dt>‘<code>vrp</code>’</dt>\n<dd>\nDump each function after Value Range Propagation (VRP). The file name is made by appending <code>.vrp</code> to the source file name. </dd>\n<dt>‘<code>all</code>’</dt>\n<dd>\nEnable all the available tree dumps with the flags provided in this option. </dd>\n</dl> </dd>\n<dt>\n<code>-fopt-info</code><dt>\n<code>-fopt-info-</code><var>options</var><dt>\n<code>-fopt-info-</code><var>options</var><code>=</code><var>filename</var>\n</dt>\n</dt>\n</dt>\n<dd>\nControls optimization dumps from various optimization passes. If the ‘<samp><span class=\"samp\">-</span><var>options</var></samp>’ form is used, <var>options</var> is a list of ‘<code>-</code>’ separated options to select the dump details and optimizations. If <var>options</var> is not specified, it defaults to <code>optimized</code> for details and <code>optall</code> for optimization groups. If the <var>filename</var> is not specified, it defaults to <code>stderr</code>. Note that the output <var>filename</var> will be overwritten in case of multiple translation units. If a combined output from multiple translation units is desired, <code>stderr</code> should be used instead. <p>The options can be divided into two groups, 1) options describing the verbosity of the dump, and 2) options describing which optimizations should be included. The options from both the groups can be freely mixed as they are non-overlapping. However, in case of any conflicts, the latter options override the earlier options on the command line. Though multiple -fopt-info options are accepted, only one of them can have <code>=filename</code>. If other filenames are provided then all but the first one are ignored. </p>\n<p>The dump verbosity has the following options </p>\n<dl> <dt>‘<code>optimized</code>’</dt>\n<dd>Print information when an optimization is successfully applied. It is up to a pass to decide which information is relevant. For example, the vectorizer passes print the source location of loops which got successfully vectorized. </dd>\n<dt>‘<code>missed</code>’</dt>\n<dd>Print information about missed optimizations. Individual passes control which information to include in the output. For example, <pre class=\"smallexample\">gcc -O2 -ftree-vectorize -fopt-info-vec-missed</pre> <p>will print information about missed optimization opportunities from vectorization passes on stderr. </p>\n</dd>\n<dt>‘<code>note</code>’</dt>\n<dd>Print verbose information about optimizations, such as certain transformations, more detailed messages about decisions etc. </dd>\n<dt>‘<code>all</code>’</dt>\n<dd>Print detailed optimization information. This includes <var>optimized</var>, <var>missed</var>, and <var>note</var>. </dd>\n</dl> <p>The second set of options describes a group of optimizations and may include one or more of the following. </p>\n<dl> <dt>‘<code>ipa</code>’</dt>\n<dd>Enable dumps from all interprocedural optimizations. </dd>\n<dt>‘<code>loop</code>’</dt>\n<dd>Enable dumps from all loop optimizations. </dd>\n<dt>‘<code>inline</code>’</dt>\n<dd>Enable dumps from all inlining optimizations. </dd>\n<dt>‘<code>vec</code>’</dt>\n<dd>Enable dumps from all vectorization optimizations. </dd>\n<dt>‘<code>optall</code>’</dt>\n<dd>Enable dumps from all optimizations. This is a superset of the optimization groups listed above. </dd>\n</dl> <p>For example, </p>\n<pre class=\"smallexample\">gcc -O3 -fopt-info-missed=missed.all</pre> <p>outputs missed optimization report from all the passes into <code>missed.all</code>. </p>\n<p>As another example, </p>\n<pre class=\"smallexample\">gcc -O3 -fopt-info-inline-optimized-missed=inline.txt</pre> <p>will output information about missed optimizations as well as optimized locations from all the inlining passes into <code>inline.txt</code>. </p>\n<p>If the <var>filename</var> is provided, then the dumps from all the applicable optimizations are concatenated into the <code>filename</code>. Otherwise the dump is output onto <code>stderr</code>. If <var>options</var> is omitted, it defaults to <code>all-optall</code>, which means dump all available optimization info from all the passes. In the following example, all optimization info is output on to <code>stderr</code>. </p>\n<pre class=\"smallexample\">gcc -O3 -fopt-info</pre> <p>Note that <code>-fopt-info-vec-missed</code> behaves the same as <code>-fopt-info-missed-vec</code>. </p>\n<p>As another example, consider </p>\n<pre class=\"smallexample\">gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt</pre> <p>Here the two output filenames <code>vec.miss</code> and <code>loop.opt</code> are in conflict since only one output file is allowed. In this case, only the first option takes effect and the subsequent options are ignored. Thus only the <code>vec.miss</code> is produced which contains dumps from the vectorizer about missed opportunities. </p>\n</dd>\n<dt>\n<code>-frandom-seed=</code><var>string</var>\n</dt>\n<dd>\nThis option provides a seed that GCC uses in place of random numbers in generating certain symbol names that have to be different in every compiled file. It is also used to place unique stamps in coverage data files and the object files that produce them. You can use the <code>-frandom-seed</code> option to produce reproducibly identical object files. <p>The <var>string</var> should be different for every file you compile. </p>\n</dd>\n<dt>\n<code>-fsched-verbose=</code><var>n</var>\n</dt>\n<dd>\nOn targets that use instruction scheduling, this option controls the amount of debugging output the scheduler prints. This information is written to standard error, unless <code>-fdump-rtl-sched1</code> or <code>-fdump-rtl-sched2</code> is specified, in which case it is output to the usual dump listing file, <code>.sched1</code> or <code>.sched2</code> respectively. However for <var>n</var> greater than nine, the output is always printed to standard error. <p>For <var>n</var> greater than zero, <code>-fsched-verbose</code> outputs the same information as <code>-fdump-rtl-sched1</code> and <code>-fdump-rtl-sched2</code>. For <var>n</var> greater than one, it also output basic block probabilities, detailed ready list information and unit/insn info. For <var>n</var> greater than two, it includes RTL at abort point, control-flow and regions info. And for <var>n</var> over four, <code>-fsched-verbose</code> also includes dependence info. </p>\n</dd>\n<dt>\n<code>-save-temps</code><dt><code>-save-temps=cwd</code></dt>\n</dt>\n<dd>\nStore the usual “temporary” intermediate files permanently; place them in the current directory and name them based on the source file. Thus, compiling <code>foo.c</code> with <code>-c -save-temps</code> produces files <code>foo.i</code> and <code>foo.s</code>, as well as <code>foo.o</code>. This creates a preprocessed <code>foo.i</code> output file even though the compiler now normally uses an integrated preprocessor. <p>When used in combination with the <code>-x</code> command-line option, <code>-save-temps</code> is sensible enough to avoid over writing an input source file with the same extension as an intermediate file. The corresponding intermediate file may be obtained by renaming the source file before using <code>-save-temps</code>. </p>\n<p>If you invoke GCC in parallel, compiling several different source files that share a common base name in different subdirectories or the same source file compiled for multiple output destinations, it is likely that the different parallel compilers will interfere with each other, and overwrite the temporary files. For instance: </p>\n<pre class=\"smallexample\">gcc -save-temps -o outdir1/foo.o indir1/foo.c&amp;\ngcc -save-temps -o outdir2/foo.o indir2/foo.c&amp;</pre> <p>may result in <code>foo.i</code> and <code>foo.o</code> being written to simultaneously by both compilers. </p>\n</dd>\n<dt><code>-save-temps=obj</code></dt>\n<dd>\nStore the usual “temporary” intermediate files permanently. If the <code>-o</code> option is used, the temporary files are based on the object file. If the <code>-o</code> option is not used, the <code>-save-temps=obj</code> switch behaves like <code>-save-temps</code>. <p>For example: </p>\n<pre class=\"smallexample\">gcc -save-temps=obj -c foo.c\ngcc -save-temps=obj -c bar.c -o dir/xbar.o\ngcc -save-temps=obj foobar.c -o dir2/yfoobar</pre> <p class=\"noindent\">creates <code>foo.i</code>, <code>foo.s</code>, <code>dir/xbar.i</code>, <code>dir/xbar.s</code>, <code>dir2/yfoobar.i</code>, <code>dir2/yfoobar.s</code>, and <code>dir2/yfoobar.o</code>. </p>\n</dd>\n<dt>\n<code>-time</code><span class=\"roman\">[</span><code>=</code><var>file</var><span class=\"roman\">]</span>\n</dt>\n<dd>\nReport the CPU time taken by each subprocess in the compilation sequence. For C source files, this is the compiler proper and assembler (plus the linker if linking is done). <p>Without the specification of an output file, the output looks like this: </p>\n<pre class=\"smallexample\"># cc1 0.12 0.01\n# as 0.00 0.01</pre> <p>The first number on each line is the “user time”, that is time spent executing the program itself. The second number is “system time”, time spent executing operating system routines on behalf of the program. Both numbers are in seconds. </p>\n<p>With the specification of an output file, the output is appended to the named file, and it looks like this: </p>\n<pre class=\"smallexample\">0.12 0.01 cc1 <var>options</var>\n0.00 0.01 as <var>options</var></pre> <p>The “user time” and the “system time” are moved before the program name, and the options passed to the program are displayed, so that one can later tell what file was being compiled, and with which options. </p>\n</dd>\n<dt><code>-fvar-tracking</code></dt>\n<dd>\nRun variable tracking pass. It computes where variables are stored at each position in code. Better debugging information is then generated (if the debugging information format supports this information). <p>It is enabled by default when compiling with optimization (<code>-Os</code>, <code>-O</code>, <code>-O2</code>, <small class=\"dots\">...</small>), debugging information (<code>-g</code>) and the debug info format supports it. </p>\n</dd>\n<dt><code>-fvar-tracking-assignments</code></dt>\n<dd>\nAnnotate assignments to user variables early in the compilation and attempt to carry the annotations over throughout the compilation all the way to the end, in an attempt to improve debug information while optimizing. Use of <code>-gdwarf-4</code> is recommended along with it. <p>It can be enabled even if var-tracking is disabled, in which case annotations are created and maintained, but discarded at the end. </p>\n</dd>\n<dt><code>-fvar-tracking-assignments-toggle</code></dt>\n<dd>\nToggle <code>-fvar-tracking-assignments</code>, in the same way that <code>-gtoggle</code> toggles <code>-g</code>. </dd>\n<dt>\n<code>-print-file-name=</code><var>library</var>\n</dt>\n<dd>\nPrint the full absolute name of the library file <var>library</var> that would be used when linking—and don't do anything else. With this option, GCC does not compile or link anything; it just prints the file name. </dd>\n<dt><code>-print-multi-directory</code></dt>\n<dd>\nPrint the directory name corresponding to the multilib selected by any other switches present in the command line. This directory is supposed to exist in <code>GCC_EXEC_PREFIX</code>. </dd>\n<dt><code>-print-multi-lib</code></dt>\n<dd>\nPrint the mapping from multilib directory names to compiler switches that enable them. The directory name is separated from the switches by ‘<code>;</code>’, and each switch starts with an ‘<code>@</code>’ instead of the ‘<code>-</code>’, without spaces between multiple switches. This is supposed to ease shell processing. </dd>\n<dt><code>-print-multi-os-directory</code></dt>\n<dd>\nPrint the path to OS libraries for the selected multilib, relative to some <code>lib</code> subdirectory. If OS libraries are present in the <code>lib</code> subdirectory and no multilibs are used, this is usually just <code>.</code>, if OS libraries are present in <samp><span class=\"file\">lib</span><var>suffix</var></samp> sibling directories this prints e.g. <code>../lib64</code>, <code>../lib</code> or <code>../lib32</code>, or if OS libraries are present in <samp><span class=\"file\">lib/</span><var>subdir</var></samp> subdirectories it prints e.g. <code>amd64</code>, <code>sparcv9</code> or <code>ev6</code>. </dd>\n<dt><code>-print-multiarch</code></dt>\n<dd>\nPrint the path to OS libraries for the selected multiarch, relative to some <code>lib</code> subdirectory. </dd>\n<dt>\n<code>-print-prog-name=</code><var>program</var>\n</dt>\n<dd>\nLike <code>-print-file-name</code>, but searches for a program such as ‘<code>cpp</code>’. </dd>\n<dt><code>-print-libgcc-file-name</code></dt>\n<dd>\nSame as <code>-print-file-name=libgcc.a</code>. <p>This is useful when you use <code>-nostdlib</code> or <code>-nodefaultlibs</code> but you do want to link with <code>libgcc.a</code>. You can do: </p>\n<pre class=\"smallexample\">gcc -nostdlib <var>files</var>... `gcc -print-libgcc-file-name`</pre> </dd>\n<dt><code>-print-search-dirs</code></dt>\n<dd>\nPrint the name of the configured installation directory and a list of program and library directories <code>gcc</code> searches—and don't do anything else. <p>This is useful when <code>gcc</code> prints the error message ‘<code>installation problem, cannot exec cpp0: No such file or directory</code>’. To resolve this you either need to put <code>cpp0</code> and the other compiler components where <code>gcc</code> expects to find them, or you can set the environment variable <code>GCC_EXEC_PREFIX</code> to the directory where you installed them. Don't forget the trailing ‘<code>/</code>’. See <a href=\"environment-variables#Environment-Variables\">Environment Variables</a>. </p>\n</dd>\n<dt><code>-print-sysroot</code></dt>\n<dd>\nPrint the target sysroot directory that is used during compilation. This is the target sysroot specified either at configure time or using the <code>--sysroot</code> option, possibly with an extra suffix that depends on compilation options. If no target sysroot is specified, the option prints nothing. </dd>\n<dt><code>-print-sysroot-headers-suffix</code></dt>\n<dd>\nPrint the suffix added to the target sysroot when searching for headers, or give an error if the compiler is not configured with such a suffix—and don't do anything else. </dd>\n<dt><code>-dumpmachine</code></dt>\n<dd>\nPrint the compiler's target machine (for example, ‘<code>i686-pc-linux-gnu</code>’)—and don't do anything else. </dd>\n<dt><code>-dumpversion</code></dt>\n<dd>\nPrint the compiler version (for example, ‘<code>3.0</code>’)—and don't do anything else. </dd>\n<dt><code>-dumpspecs</code></dt>\n<dd>\nPrint the compiler's built-in specs—and don't do anything else. (This is used when GCC itself is being built.) See <a href=\"spec-files#Spec-Files\">Spec Files</a>. </dd>\n<dt><code>-fno-eliminate-unused-debug-types</code></dt>\n<dd>\nNormally, when producing DWARF 2 output, GCC avoids producing debug symbol output for types that are nowhere used in the source file being compiled. Sometimes it is useful to have GCC emit debugging information for all types declared in a compilation unit, regardless of whether or not they are actually used in that compilation unit, for example if, in the debugger, you want to cast a value to a type that is not actually used in your program (but is declared). More often, however, this results in a significant amount of wasted space. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Debugging-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Debugging-Options.html</a>\n  </p>\n</div>\n","optimize-options":"<h1 class=\"section\" id=\"Optimize-Options\">3.10 Options That Control Optimization</h1> <p> These options control various sorts of optimizations. </p>\n<p>Without any optimization option, the compiler's goal is to reduce the cost of compilation and to make debugging produce the expected results. Statements are independent: if you stop the program with a breakpoint between statements, you can then assign a new value to any variable or change the program counter to any other statement in the function and get exactly the results you expect from the source code. </p>\n<p>Turning on optimization flags makes the compiler attempt to improve the performance and/or code size at the expense of compilation time and possibly the ability to debug the program. </p>\n<p>The compiler performs optimization based on the knowledge it has of the program. Compiling multiple files at once to a single output file mode allows the compiler to use information gained from all of the files when compiling each of them. </p>\n<p>Not all optimizations are controlled directly by a flag. Only optimizations that have a flag are listed in this section. </p>\n<p>Most optimizations are only enabled if an <code>-O</code> level is set on the command line. Otherwise they are disabled, even if individual optimization flags are specified. </p>\n<p>Depending on the target and how GCC was configured, a slightly different set of optimizations may be enabled at each <code>-O</code> level than those listed here. You can invoke GCC with <code>-Q --help=optimizers</code> to find out the exact set of optimizations that are enabled at each level. See <a href=\"overall-options#Overall-Options\">Overall Options</a>, for examples. </p>\n<dl> <dt>\n<code>-O</code><dt><code>-O1</code></dt>\n</dt>\n<dd>\nOptimize. Optimizing compilation takes somewhat more time, and a lot more memory for a large function. <p>With <code>-O</code>, the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time. </p>\n<p><code>-O</code> turns on the following optimization flags: </p>\n<pre class=\"smallexample\">-fauto-inc-dec \n-fcompare-elim \n-fcprop-registers \n-fdce \n-fdefer-pop \n-fdelayed-branch \n-fdse \n-fguess-branch-probability \n-fif-conversion2 \n-fif-conversion \n-fipa-pure-const \n-fipa-profile \n-fipa-reference \n-fmerge-constants\n-fsplit-wide-types \n-ftree-bit-ccp \n-ftree-builtin-call-dce \n-ftree-ccp \n-ftree-ch \n-ftree-copyrename \n-ftree-dce \n-ftree-dominator-opts \n-ftree-dse \n-ftree-forwprop \n-ftree-fre \n-ftree-phiprop \n-ftree-slsr \n-ftree-sra \n-ftree-pta \n-ftree-ter \n-funit-at-a-time</pre> <p><code>-O</code> also turns on <code>-fomit-frame-pointer</code> on machines where doing so does not interfere with debugging. </p>\n</dd>\n<dt><code>-O2</code></dt>\n<dd>\nOptimize even more. GCC performs nearly all supported optimizations that do not involve a space-speed tradeoff. As compared to <code>-O</code>, this option increases both compilation time and the performance of the generated code. <p><code>-O2</code> turns on all optimization flags specified by <code>-O</code>. It also turns on the following optimization flags: </p>\n<pre class=\"smallexample\">-fthread-jumps \n-falign-functions  -falign-jumps \n-falign-loops  -falign-labels \n-fcaller-saves \n-fcrossjumping \n-fcse-follow-jumps  -fcse-skip-blocks \n-fdelete-null-pointer-checks \n-fdevirtualize -fdevirtualize-speculatively \n-fexpensive-optimizations \n-fgcse  -fgcse-lm  \n-fhoist-adjacent-loads \n-finline-small-functions \n-findirect-inlining \n-fipa-sra \n-fisolate-erroneous-paths-dereference \n-foptimize-sibling-calls \n-fpartial-inlining \n-fpeephole2 \n-freorder-blocks  -freorder-functions \n-frerun-cse-after-loop  \n-fsched-interblock  -fsched-spec \n-fschedule-insns  -fschedule-insns2 \n-fstrict-aliasing -fstrict-overflow \n-ftree-switch-conversion -ftree-tail-merge \n-ftree-pre \n-ftree-vrp</pre> <p>Please note the warning under <code>-fgcse</code> about invoking <code>-O2</code> on programs that use computed gotos. </p>\n</dd>\n<dt><code>-O3</code></dt>\n<dd>\nOptimize yet more. <code>-O3</code> turns on all optimizations specified by <code>-O2</code> and also turns on the <code>-finline-functions</code>, <code>-funswitch-loops</code>, <code>-fpredictive-commoning</code>, <code>-fgcse-after-reload</code>, <code>-ftree-loop-vectorize</code>, <code>-ftree-slp-vectorize</code>, <code>-fvect-cost-model</code>, <code>-ftree-partial-pre</code> and <code>-fipa-cp-clone</code> options. </dd>\n<dt><code>-O0</code></dt>\n<dd>\nReduce compilation time and make debugging produce the expected results. This is the default. </dd>\n<dt><code>-Os</code></dt>\n<dd>\nOptimize for size. <code>-Os</code> enables all <code>-O2</code> optimizations that do not typically increase code size. It also performs further optimizations designed to reduce code size. <p><code>-Os</code> disables the following optimization flags: </p>\n<pre class=\"smallexample\">-falign-functions  -falign-jumps  -falign-loops \n-falign-labels  -freorder-blocks  -freorder-blocks-and-partition \n-fprefetch-loop-arrays</pre> </dd>\n<dt><code>-Ofast</code></dt>\n<dd>\nDisregard strict standards compliance. <code>-Ofast</code> enables all <code>-O3</code> optimizations. It also enables optimizations that are not valid for all standard-compliant programs. It turns on <code>-ffast-math</code> and the Fortran-specific <code>-fno-protect-parens</code> and <code>-fstack-arrays</code>. </dd>\n<dt><code>-Og</code></dt>\n<dd>\nOptimize debugging experience. <code>-Og</code> enables optimizations that do not interfere with debugging. It should be the optimization level of choice for the standard edit-compile-debug cycle, offering a reasonable level of optimization while maintaining fast compilation and a good debugging experience. <p>If you use multiple <code>-O</code> options, with or without level numbers, the last such option is the one that is effective. </p>\n</dd>\n</dl> <p>Options of the form <samp><span class=\"option\">-f</span><var>flag</var></samp> specify machine-independent flags. Most flags have both positive and negative forms; the negative form of <code>-ffoo</code> is <code>-fno-foo</code>. In the table below, only one of the forms is listed—the one you typically use. You can figure out the other form by either removing ‘<code>no-</code>’ or adding it. </p>\n<p>The following options control specific optimizations. They are either activated by <code>-O</code> options or are related to ones that are. You can use the following flags in the rare cases when “fine-tuning” of optimizations to be performed is desired. </p>\n<dl> <dt><code>-fno-defer-pop</code></dt>\n<dd>\nAlways pop the arguments to each function call as soon as that function returns. For machines that must pop arguments after a function call, the compiler normally lets arguments accumulate on the stack for several function calls and pops them all at once. <p>Disabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fforward-propagate</code></dt>\n<dd>\nPerform a forward propagation pass on RTL. The pass tries to combine two instructions and checks if the result can be simplified. If loop unrolling is active, two passes are performed and the second is scheduled after loop unrolling. <p>This option is enabled by default at optimization levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt>\n<code>-ffp-contract=</code><var>style</var>\n</dt>\n<dd>\n<code>-ffp-contract=off</code> disables floating-point expression contraction. <code>-ffp-contract=fast</code> enables floating-point expression contraction such as forming of fused multiply-add operations if the target has native support for them. <code>-ffp-contract=on</code> enables floating-point expression contraction if allowed by the language standard. This is currently not implemented and treated equal to <code>-ffp-contract=off</code>. <p>The default is <code>-ffp-contract=fast</code>. </p>\n</dd>\n<dt><code>-fomit-frame-pointer</code></dt>\n<dd>\nDon't keep the frame pointer in a register for functions that don't need one. This avoids the instructions to save, set up and restore frame pointers; it also makes an extra register available in many functions. <strong>It also makes debugging impossible on some machines.</strong> <p>On some machines, such as the VAX, this flag has no effect, because the standard calling sequence automatically handles the frame pointer and nothing is saved by pretending it doesn't exist. The machine-description macro <code>FRAME_POINTER_REQUIRED</code> controls whether a target machine supports this flag. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gccint/Registers.html#Registers\">Register Usage</a>. </p>\n<p>Starting with GCC version 4.6, the default setting (when not optimizing for size) for 32-bit GNU/Linux x86 and 32-bit Darwin x86 targets has been changed to <code>-fomit-frame-pointer</code>. The default can be reverted to <code>-fno-omit-frame-pointer</code> by configuring GCC with the <code>--enable-frame-pointer</code> configure option. </p>\n<p>Enabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-foptimize-sibling-calls</code></dt>\n<dd>\nOptimize sibling and tail recursive calls. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fno-inline</code></dt>\n<dd>\nDo not expand any functions inline apart from those marked with the <code>always_inline</code> attribute. This is the default when not optimizing. <p>Single functions can be exempted from inlining by marking them with the <code>noinline</code> attribute. </p>\n</dd>\n<dt><code>-finline-small-functions</code></dt>\n<dd>\nIntegrate functions into their callers when their body is smaller than expected function call code (so overall size of program gets smaller). The compiler heuristically decides which functions are simple enough to be worth integrating in this way. This inlining applies to all functions, even those not declared inline. <p>Enabled at level <code>-O2</code>. </p>\n</dd>\n<dt><code>-findirect-inlining</code></dt>\n<dd>\nInline also indirect calls that are discovered to be known at compile time thanks to previous inlining. This option has any effect only when inlining itself is turned on by the <code>-finline-functions</code> or <code>-finline-small-functions</code> options. <p>Enabled at level <code>-O2</code>. </p>\n</dd>\n<dt><code>-finline-functions</code></dt>\n<dd>\nConsider all functions for inlining, even if they are not declared inline. The compiler heuristically decides which functions are worth integrating in this way. <p>If all calls to a given function are integrated, and the function is declared <code>static</code>, then the function is normally not output as assembler code in its own right. </p>\n<p>Enabled at level <code>-O3</code>. </p>\n</dd>\n<dt><code>-finline-functions-called-once</code></dt>\n<dd>\nConsider all <code>static</code> functions called once for inlining into their caller even if they are not marked <code>inline</code>. If a call to a given function is integrated, then the function is not output as assembler code in its own right. <p>Enabled at levels <code>-O1</code>, <code>-O2</code>, <code>-O3</code> and <code>-Os</code>. </p>\n</dd>\n<dt><code>-fearly-inlining</code></dt>\n<dd>\nInline functions marked by <code>always_inline</code> and functions whose body seems smaller than the function call overhead early before doing <code>-fprofile-generate</code> instrumentation and real inlining pass. Doing so makes profiling significantly cheaper and usually inlining faster on programs having large chains of nested wrapper functions. <p>Enabled by default. </p>\n</dd>\n<dt><code>-fipa-sra</code></dt>\n<dd>\nPerform interprocedural scalar replacement of aggregates, removal of unused parameters and replacement of parameters passed by reference by parameters passed by value. <p>Enabled at levels <code>-O2</code>, <code>-O3</code> and <code>-Os</code>. </p>\n</dd>\n<dt>\n<code>-finline-limit=</code><var>n</var>\n</dt>\n<dd>\nBy default, GCC limits the size of functions that can be inlined. This flag allows coarse control of this limit. <var>n</var> is the size of functions that can be inlined in number of pseudo instructions. <p>Inlining is actually controlled by a number of parameters, which may be specified individually by using <samp><span class=\"option\">--param </span><var>name</var><span class=\"option\">=</span><var>value</var></samp>. The <samp><span class=\"option\">-finline-limit=</span><var>n</var></samp> option sets some of these parameters as follows: </p>\n<dl> <dt><code>max-inline-insns-single</code></dt>\n<dd>is set to <var>n</var>/2. </dd>\n<dt><code>max-inline-insns-auto</code></dt>\n<dd>is set to <var>n</var>/2. </dd>\n</dl> <p>See below for a documentation of the individual parameters controlling inlining and for the defaults of these parameters. </p>\n<p><em>Note:</em> there may be no value to <code>-finline-limit</code> that results in default behavior. </p>\n<p><em>Note:</em> pseudo instruction represents, in this particular context, an abstract measurement of function's size. In no way does it represent a count of assembly instructions and as such its exact meaning might change from one release to an another. </p>\n</dd>\n<dt><code>-fno-keep-inline-dllexport</code></dt>\n<dd>\nThis is a more fine-grained version of <code>-fkeep-inline-functions</code>, which applies only to functions that are declared using the <code>dllexport</code> attribute or declspec (See <a href=\"function-attributes#Function-Attributes\">Declaring Attributes of Functions</a>.) </dd>\n<dt><code>-fkeep-inline-functions</code></dt>\n<dd>\nIn C, emit <code>static</code> functions that are declared <code>inline</code> into the object file, even if the function has been inlined into all of its callers. This switch does not affect functions using the <code>extern inline</code> extension in GNU C90. In C++, emit any and all inline functions into the object file. </dd>\n<dt><code>-fkeep-static-consts</code></dt>\n<dd>\nEmit variables declared <code>static const</code> when optimization isn't turned on, even if the variables aren't referenced. <p>GCC enables this option by default. If you want to force the compiler to check if a variable is referenced, regardless of whether or not optimization is turned on, use the <code>-fno-keep-static-consts</code> option. </p>\n</dd>\n<dt><code>-fmerge-constants</code></dt>\n<dd>\nAttempt to merge identical constants (string constants and floating-point constants) across compilation units. <p>This option is the default for optimized compilation if the assembler and linker support it. Use <code>-fno-merge-constants</code> to inhibit this behavior. </p>\n<p>Enabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fmerge-all-constants</code></dt>\n<dd>\nAttempt to merge identical constants and identical variables. <p>This option implies <code>-fmerge-constants</code>. In addition to <code>-fmerge-constants</code> this considers e.g. even constant initialized arrays or initialized constant variables with integral or floating-point types. Languages like C or C++ require each variable, including multiple instances of the same variable in recursive calls, to have distinct locations, so using this option results in non-conforming behavior. </p>\n</dd>\n<dt><code>-fmodulo-sched</code></dt>\n<dd>\nPerform swing modulo scheduling immediately before the first scheduling pass. This pass looks at innermost loops and reorders their instructions by overlapping different iterations. </dd>\n<dt><code>-fmodulo-sched-allow-regmoves</code></dt>\n<dd>\nPerform more aggressive SMS-based modulo scheduling with register moves allowed. By setting this flag certain anti-dependences edges are deleted, which triggers the generation of reg-moves based on the life-range analysis. This option is effective only with <code>-fmodulo-sched</code> enabled. </dd>\n<dt><code>-fno-branch-count-reg</code></dt>\n<dd>\nDo not use “decrement and branch” instructions on a count register, but instead generate a sequence of instructions that decrement a register, compare it against zero, then branch based upon the result. This option is only meaningful on architectures that support such instructions, which include x86, PowerPC, IA-64 and S/390. <p>The default is <code>-fbranch-count-reg</code>. </p>\n</dd>\n<dt><code>-fno-function-cse</code></dt>\n<dd>\nDo not put function addresses in registers; make each instruction that calls a constant function contain the function's address explicitly. <p>This option results in less efficient code, but some strange hacks that alter the assembler output may be confused by the optimizations performed when this option is not used. </p>\n<p>The default is <code>-ffunction-cse</code> </p>\n</dd>\n<dt><code>-fno-zero-initialized-in-bss</code></dt>\n<dd>\nIf the target supports a BSS section, GCC by default puts variables that are initialized to zero into BSS. This can save space in the resulting code. <p>This option turns off this behavior because some programs explicitly rely on variables going to the data section—e.g., so that the resulting executable can find the beginning of that section and/or make assumptions based on that. </p>\n<p>The default is <code>-fzero-initialized-in-bss</code>. </p>\n</dd>\n<dt><code>-fthread-jumps</code></dt>\n<dd>\nPerform optimizations that check to see if a jump branches to a location where another comparison subsumed by the first is found. If so, the first branch is redirected to either the destination of the second branch or a point immediately following it, depending on whether the condition is known to be true or false. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fsplit-wide-types</code></dt>\n<dd>\nWhen using a type that occupies multiple registers, such as <code>long\nlong</code> on a 32-bit system, split the registers apart and allocate them independently. This normally generates better code for those types, but may make debugging more difficult. <p>Enabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fcse-follow-jumps</code></dt>\n<dd>\nIn common subexpression elimination (CSE), scan through jump instructions when the target of the jump is not reached by any other path. For example, when CSE encounters an <code>if</code> statement with an <code>else</code> clause, CSE follows the jump when the condition tested is false. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fcse-skip-blocks</code></dt>\n<dd>\nThis is similar to <code>-fcse-follow-jumps</code>, but causes CSE to follow jumps that conditionally skip over blocks. When CSE encounters a simple <code>if</code> statement with no else clause, <code>-fcse-skip-blocks</code> causes CSE to follow the jump around the body of the <code>if</code>. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-frerun-cse-after-loop</code></dt>\n<dd>\nRe-run common subexpression elimination after loop optimizations are performed. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fgcse</code></dt>\n<dd>\nPerform a global common subexpression elimination pass. This pass also performs global constant and copy propagation. <p><em>Note:</em> When compiling a program using computed gotos, a GCC extension, you may get better run-time performance if you disable the global common subexpression elimination pass by adding <code>-fno-gcse</code> to the command line. </p>\n<p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fgcse-lm</code></dt>\n<dd>\nWhen <code>-fgcse-lm</code> is enabled, global common subexpression elimination attempts to move loads that are only killed by stores into themselves. This allows a loop containing a load/store sequence to be changed to a load outside the loop, and a copy/store within the loop. <p>Enabled by default when <code>-fgcse</code> is enabled. </p>\n</dd>\n<dt><code>-fgcse-sm</code></dt>\n<dd>\nWhen <code>-fgcse-sm</code> is enabled, a store motion pass is run after global common subexpression elimination. This pass attempts to move stores out of loops. When used in conjunction with <code>-fgcse-lm</code>, loops containing a load/store sequence can be changed to a load before the loop and a store after the loop. <p>Not enabled at any optimization level. </p>\n</dd>\n<dt><code>-fgcse-las</code></dt>\n<dd>\nWhen <code>-fgcse-las</code> is enabled, the global common subexpression elimination pass eliminates redundant loads that come after stores to the same memory location (both partial and full redundancies). <p>Not enabled at any optimization level. </p>\n</dd>\n<dt><code>-fgcse-after-reload</code></dt>\n<dd>\nWhen <code>-fgcse-after-reload</code> is enabled, a redundant load elimination pass is performed after reload. The purpose of this pass is to clean up redundant spilling. </dd>\n<dt><code>-faggressive-loop-optimizations</code></dt>\n<dd>\nThis option tells the loop optimizer to use language constraints to derive bounds for the number of iterations of a loop. This assumes that loop code does not invoke undefined behavior by for example causing signed integer overflows or out-of-bound array accesses. The bounds for the number of iterations of a loop are used to guide loop unrolling and peeling and loop exit test optimizations. This option is enabled by default. </dd>\n<dt><code>-funsafe-loop-optimizations</code></dt>\n<dd>\nThis option tells the loop optimizer to assume that loop indices do not overflow, and that loops with nontrivial exit condition are not infinite. This enables a wider range of loop optimizations even if the loop optimizer itself cannot prove that these assumptions are valid. If you use <code>-Wunsafe-loop-optimizations</code>, the compiler warns you if it finds this kind of loop. </dd>\n<dt><code>-fcrossjumping</code></dt>\n<dd>\nPerform cross-jumping transformation. This transformation unifies equivalent code and saves code size. The resulting code may or may not perform better than without cross-jumping. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fauto-inc-dec</code></dt>\n<dd>\nCombine increments or decrements of addresses with memory accesses. This pass is always skipped on architectures that do not have instructions to support this. Enabled by default at <code>-O</code> and higher on architectures that support this. </dd>\n<dt><code>-fdce</code></dt>\n<dd>\nPerform dead code elimination (DCE) on RTL. Enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-fdse</code></dt>\n<dd>\nPerform dead store elimination (DSE) on RTL. Enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-fif-conversion</code></dt>\n<dd>\nAttempt to transform conditional jumps into branch-less equivalents. This includes use of conditional moves, min, max, set flags and abs instructions, and some tricks doable by standard arithmetics. The use of conditional execution on chips where it is available is controlled by <code>if-conversion2</code>. <p>Enabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fif-conversion2</code></dt>\n<dd>\nUse conditional execution (where available) to transform conditional jumps into branch-less equivalents. <p>Enabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fdeclone-ctor-dtor</code></dt>\n<dd>\nThe C++ ABI requires multiple entry points for constructors and destructors: one for a base subobject, one for a complete object, and one for a virtual destructor that calls operator delete afterwards. For a hierarchy with virtual bases, the base and complete variants are clones, which means two copies of the function. With this option, the base and complete variants are changed to be thunks that call a common implementation. <p>Enabled by <code>-Os</code>. </p>\n</dd>\n<dt><code>-fdelete-null-pointer-checks</code></dt>\n<dd>\nAssume that programs cannot safely dereference null pointers, and that no code or data element resides there. This enables simple constant folding optimizations at all optimization levels. In addition, other optimization passes in GCC use this flag to control global dataflow analyses that eliminate useless checks for null pointers; these assume that if a pointer is checked after it has already been dereferenced, it cannot be null. <p>Note however that in some environments this assumption is not true. Use <code>-fno-delete-null-pointer-checks</code> to disable this optimization for programs that depend on that behavior. </p>\n<p>Some targets, especially embedded ones, disable this option at all levels. Otherwise it is enabled at all levels: <code>-O0</code>, <code>-O1</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. Passes that use the information are enabled independently at different optimization levels. </p>\n</dd>\n<dt><code>-fdevirtualize</code></dt>\n<dd>\nAttempt to convert calls to virtual functions to direct calls. This is done both within a procedure and interprocedurally as part of indirect inlining (<code>-findirect-inlining</code>) and interprocedural constant propagation (<code>-fipa-cp</code>). Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </dd>\n<dt><code>-fdevirtualize-speculatively</code></dt>\n<dd>\nAttempt to convert calls to virtual functions to speculative direct calls. Based on the analysis of the type inheritance graph, determine for a given call the set of likely targets. If the set is small, preferably of size 1, change the call into an conditional deciding on direct and indirect call. The speculative calls enable more optimizations, such as inlining. When they seem useless after further optimization, they are converted back into original form. </dd>\n<dt><code>-fexpensive-optimizations</code></dt>\n<dd>\nPerform a number of minor optimizations that are relatively expensive. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-free</code></dt>\n<dd>\nAttempt to remove redundant extension instructions. This is especially helpful for the x86-64 architecture, which implicitly zero-extends in 64-bit registers after writing to their lower 32-bit half. <p>Enabled for Alpha, AArch64 and x86 at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fno-lifetime-dse</code></dt>\n<dd>\nIn C++ the value of an object is only affected by changes within its lifetime: when the constructor begins, the object has an indeterminate value, and any changes during the lifetime of the object are dead when the object is destroyed. Normally dead store elimination will take advantage of this; if your code relies on the value of the object storage persisting beyond the lifetime of the object, you can use this flag to disable this optimization. </dd>\n<dt><code>-flive-range-shrinkage</code></dt>\n<dd>\nAttempt to decrease register pressure through register live range shrinkage. This is helpful for fast processors with small or moderate size register sets. </dd>\n<dt>\n<code>-fira-algorithm=</code><var>algorithm</var>\n</dt>\n<dd>Use the specified coloring algorithm for the integrated register allocator. The <var>algorithm</var> argument can be ‘<code>priority</code>’, which specifies Chow's priority coloring, or ‘<code>CB</code>’, which specifies Chaitin-Briggs coloring. Chaitin-Briggs coloring is not implemented for all architectures, but for those targets that do support it, it is the default because it generates better code. </dd>\n<dt>\n<code>-fira-region=</code><var>region</var>\n</dt>\n<dd>Use specified regions for the integrated register allocator. The <var>region</var> argument should be one of the following: <dl> <dt>‘<code>all</code>’</dt>\n<dd>Use all loops as register allocation regions. This can give the best results for machines with a small and/or irregular register set. </dd>\n<dt>‘<code>mixed</code>’</dt>\n<dd>Use all loops except for loops with small register pressure as the regions. This value usually gives the best results in most cases and for most architectures, and is enabled by default when compiling with optimization for speed (<code>-O</code>, <code>-O2</code>, <small class=\"dots\">...</small>). </dd>\n<dt>‘<code>one</code>’</dt>\n<dd>Use all functions as a single region. This typically results in the smallest code size, and is enabled by default for <code>-Os</code> or <code>-O0</code>. </dd>\n</dl> </dd>\n<dt><code>-fira-hoist-pressure</code></dt>\n<dd>\nUse IRA to evaluate register pressure in the code hoisting pass for decisions to hoist expressions. This option usually results in smaller code, but it can slow the compiler down. <p>This option is enabled at level <code>-Os</code> for all targets. </p>\n</dd>\n<dt><code>-fira-loop-pressure</code></dt>\n<dd>\nUse IRA to evaluate register pressure in loops for decisions to move loop invariants. This option usually results in generation of faster and smaller code on machines with large register files (&gt;= 32 registers), but it can slow the compiler down. <p>This option is enabled at level <code>-O3</code> for some targets. </p>\n</dd>\n<dt><code>-fno-ira-share-save-slots</code></dt>\n<dd>\nDisable sharing of stack slots used for saving call-used hard registers living through a call. Each hard register gets a separate stack slot, and as a result function stack frames are larger. </dd>\n<dt><code>-fno-ira-share-spill-slots</code></dt>\n<dd>\nDisable sharing of stack slots allocated for pseudo-registers. Each pseudo-register that does not get a hard register gets a separate stack slot, and as a result function stack frames are larger. </dd>\n<dt>\n<code>-fira-verbose=</code><var>n</var>\n</dt>\n<dd>\nControl the verbosity of the dump file for the integrated register allocator. The default value is 5. If the value <var>n</var> is greater or equal to 10, the dump output is sent to stderr using the same format as <var>n</var> minus 10. </dd>\n<dt><code>-fdelayed-branch</code></dt>\n<dd>\nIf supported for the target machine, attempt to reorder instructions to exploit instruction slots available after delayed branch instructions. <p>Enabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fschedule-insns</code></dt>\n<dd>\nIf supported for the target machine, attempt to reorder instructions to eliminate execution stalls due to required data being unavailable. This helps machines that have slow floating point or memory load instructions by allowing other instructions to be issued until the result of the load or floating-point instruction is required. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>. </p>\n</dd>\n<dt><code>-fschedule-insns2</code></dt>\n<dd>\nSimilar to <code>-fschedule-insns</code>, but requests an additional pass of instruction scheduling after register allocation has been done. This is especially useful on machines with a relatively small number of registers and where memory load instructions take more than one cycle. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fno-sched-interblock</code></dt>\n<dd>\nDon't schedule instructions across basic blocks. This is normally enabled by default when scheduling before register allocation, i.e. with <code>-fschedule-insns</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-fno-sched-spec</code></dt>\n<dd>\nDon't allow speculative motion of non-load instructions. This is normally enabled by default when scheduling before register allocation, i.e. with <code>-fschedule-insns</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-fsched-pressure</code></dt>\n<dd>\nEnable register pressure sensitive insn scheduling before register allocation. This only makes sense when scheduling before register allocation is enabled, i.e. with <code>-fschedule-insns</code> or at <code>-O2</code> or higher. Usage of this option can improve the generated code and decrease its size by preventing register pressure increase above the number of available hard registers and subsequent spills in register allocation. </dd>\n<dt><code>-fsched-spec-load</code></dt>\n<dd>\nAllow speculative motion of some load instructions. This only makes sense when scheduling before register allocation, i.e. with <code>-fschedule-insns</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-fsched-spec-load-dangerous</code></dt>\n<dd>\nAllow speculative motion of more load instructions. This only makes sense when scheduling before register allocation, i.e. with <code>-fschedule-insns</code> or at <code>-O2</code> or higher. </dd>\n<dt>\n<code>-fsched-stalled-insns</code><dt>\n<code>-fsched-stalled-insns=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nDefine how many insns (if any) can be moved prematurely from the queue of stalled insns into the ready list during the second scheduling pass. <code>-fno-sched-stalled-insns</code> means that no insns are moved prematurely, <code>-fsched-stalled-insns=0</code> means there is no limit on how many queued insns can be moved prematurely. <code>-fsched-stalled-insns</code> without a value is equivalent to <code>-fsched-stalled-insns=1</code>. </dd>\n<dt>\n<code>-fsched-stalled-insns-dep</code><dt>\n<code>-fsched-stalled-insns-dep=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nDefine how many insn groups (cycles) are examined for a dependency on a stalled insn that is a candidate for premature removal from the queue of stalled insns. This has an effect only during the second scheduling pass, and only if <code>-fsched-stalled-insns</code> is used. <code>-fno-sched-stalled-insns-dep</code> is equivalent to <code>-fsched-stalled-insns-dep=0</code>. <code>-fsched-stalled-insns-dep</code> without a value is equivalent to <code>-fsched-stalled-insns-dep=1</code>. </dd>\n<dt><code>-fsched2-use-superblocks</code></dt>\n<dd>\nWhen scheduling after register allocation, use superblock scheduling. This allows motion across basic block boundaries, resulting in faster schedules. This option is experimental, as not all machine descriptions used by GCC model the CPU closely enough to avoid unreliable results from the algorithm. <p>This only makes sense when scheduling after register allocation, i.e. with <code>-fschedule-insns2</code> or at <code>-O2</code> or higher. </p>\n</dd>\n<dt><code>-fsched-group-heuristic</code></dt>\n<dd>\nEnable the group heuristic in the scheduler. This heuristic favors the instruction that belongs to a schedule group. This is enabled by default when scheduling is enabled, i.e. with <code>-fschedule-insns</code> or <code>-fschedule-insns2</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-fsched-critical-path-heuristic</code></dt>\n<dd>\nEnable the critical-path heuristic in the scheduler. This heuristic favors instructions on the critical path. This is enabled by default when scheduling is enabled, i.e. with <code>-fschedule-insns</code> or <code>-fschedule-insns2</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-fsched-spec-insn-heuristic</code></dt>\n<dd>\nEnable the speculative instruction heuristic in the scheduler. This heuristic favors speculative instructions with greater dependency weakness. This is enabled by default when scheduling is enabled, i.e. with <code>-fschedule-insns</code> or <code>-fschedule-insns2</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-fsched-rank-heuristic</code></dt>\n<dd>\nEnable the rank heuristic in the scheduler. This heuristic favors the instruction belonging to a basic block with greater size or frequency. This is enabled by default when scheduling is enabled, i.e. with <code>-fschedule-insns</code> or <code>-fschedule-insns2</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-fsched-last-insn-heuristic</code></dt>\n<dd>\nEnable the last-instruction heuristic in the scheduler. This heuristic favors the instruction that is less dependent on the last instruction scheduled. This is enabled by default when scheduling is enabled, i.e. with <code>-fschedule-insns</code> or <code>-fschedule-insns2</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-fsched-dep-count-heuristic</code></dt>\n<dd>\nEnable the dependent-count heuristic in the scheduler. This heuristic favors the instruction that has more instructions depending on it. This is enabled by default when scheduling is enabled, i.e. with <code>-fschedule-insns</code> or <code>-fschedule-insns2</code> or at <code>-O2</code> or higher. </dd>\n<dt><code>-freschedule-modulo-scheduled-loops</code></dt>\n<dd>\nModulo scheduling is performed before traditional scheduling. If a loop is modulo scheduled, later scheduling passes may change its schedule. Use this option to control that behavior. </dd>\n<dt><code>-fselective-scheduling</code></dt>\n<dd>\nSchedule instructions using selective scheduling algorithm. Selective scheduling runs instead of the first scheduler pass. </dd>\n<dt><code>-fselective-scheduling2</code></dt>\n<dd>\nSchedule instructions using selective scheduling algorithm. Selective scheduling runs instead of the second scheduler pass. </dd>\n<dt><code>-fsel-sched-pipelining</code></dt>\n<dd>\nEnable software pipelining of innermost loops during selective scheduling. This option has no effect unless one of <code>-fselective-scheduling</code> or <code>-fselective-scheduling2</code> is turned on. </dd>\n<dt><code>-fsel-sched-pipelining-outer-loops</code></dt>\n<dd>\nWhen pipelining loops during selective scheduling, also pipeline outer loops. This option has no effect unless <code>-fsel-sched-pipelining</code> is turned on. </dd>\n<dt><code>-fshrink-wrap</code></dt>\n<dd>\nEmit function prologues only before parts of the function that need it, rather than at the top of the function. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-fcaller-saves</code></dt>\n<dd>\nEnable allocation of values to registers that are clobbered by function calls, by emitting extra instructions to save and restore the registers around such calls. Such allocation is done only when it seems to result in better code. <p>This option is always enabled by default on certain machines, usually those which have no call-preserved registers to use instead. </p>\n<p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fcombine-stack-adjustments</code></dt>\n<dd>\nTracks stack adjustments (pushes and pops) and stack memory references and then tries to find ways to combine them. <p>Enabled by default at <code>-O1</code> and higher. </p>\n</dd>\n<dt><code>-fconserve-stack</code></dt>\n<dd>\nAttempt to minimize stack usage. The compiler attempts to use less stack space, even if that makes the program slower. This option implies setting the <code>large-stack-frame</code> parameter to 100 and the <code>large-stack-frame-growth</code> parameter to 400. </dd>\n<dt><code>-ftree-reassoc</code></dt>\n<dd>\nPerform reassociation on trees. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-pre</code></dt>\n<dd>\nPerform partial redundancy elimination (PRE) on trees. This flag is enabled by default at <code>-O2</code> and <code>-O3</code>. </dd>\n<dt><code>-ftree-partial-pre</code></dt>\n<dd>\nMake partial redundancy elimination (PRE) more aggressive. This flag is enabled by default at <code>-O3</code>. </dd>\n<dt><code>-ftree-forwprop</code></dt>\n<dd>\nPerform forward propagation on trees. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-fre</code></dt>\n<dd>\nPerform full redundancy elimination (FRE) on trees. The difference between FRE and PRE is that FRE only considers expressions that are computed on all paths leading to the redundant computation. This analysis is faster than PRE, though it exposes fewer redundancies. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-phiprop</code></dt>\n<dd>\nPerform hoisting of loads from conditional pointers on trees. This pass is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-fhoist-adjacent-loads</code></dt>\n<dd>\nSpeculatively hoist loads from both branches of an if-then-else if the loads are from adjacent locations in the same structure and the target architecture has a conditional move instruction. This flag is enabled by default at <code>-O2</code> and higher. </dd>\n<dt><code>-ftree-copy-prop</code></dt>\n<dd>\nPerform copy propagation on trees. This pass eliminates unnecessary copy operations. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-fipa-pure-const</code></dt>\n<dd>\nDiscover which functions are pure or constant. Enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-fipa-reference</code></dt>\n<dd>\nDiscover which static variables do not escape the compilation unit. Enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-fipa-pta</code></dt>\n<dd>\nPerform interprocedural pointer analysis and interprocedural modification and reference analysis. This option can cause excessive memory and compile-time usage on large compilation units. It is not enabled by default at any optimization level. </dd>\n<dt><code>-fipa-profile</code></dt>\n<dd>\nPerform interprocedural profile propagation. The functions called only from cold functions are marked as cold. Also functions executed once (such as <code>cold</code>, <code>noreturn</code>, static constructors or destructors) are identified. Cold functions and loop less parts of functions executed once are then optimized for size. Enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-fipa-cp</code></dt>\n<dd>\nPerform interprocedural constant propagation. This optimization analyzes the program to determine when values passed to functions are constants and then optimizes accordingly. This optimization can substantially increase performance if the application has constants passed to functions. This flag is enabled by default at <code>-O2</code>, <code>-Os</code> and <code>-O3</code>. </dd>\n<dt><code>-fipa-cp-clone</code></dt>\n<dd>\nPerform function cloning to make interprocedural constant propagation stronger. When enabled, interprocedural constant propagation performs function cloning when externally visible function can be called with constant arguments. Because this optimization can create multiple copies of functions, it may significantly increase code size (see <samp><span class=\"option\">--param ipcp-unit-growth=</span><var>value</var></samp>). This flag is enabled by default at <code>-O3</code>. </dd>\n<dt><code>-fisolate-erroneous-paths-dereference</code></dt>\n<dd>Detect paths which trigger erroneous or undefined behaviour due to dereferencing a NULL pointer. Isolate those paths from the main control flow and turn the statement with erroneous or undefined behaviour into a trap. </dd>\n<dt><code>-fisolate-erroneous-paths-attribute</code></dt>\n<dd>Detect paths which trigger erroneous or undefined behaviour due a NULL value being used in a way which is forbidden by a <code>returns_nonnull</code> or <code>nonnull</code> attribute. Isolate those paths from the main control flow and turn the statement with erroneous or undefined behaviour into a trap. This is not currently enabled, but may be enabled by <code>-O2</code> in the future. </dd>\n<dt><code>-ftree-sink</code></dt>\n<dd>\nPerform forward store motion on trees. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-bit-ccp</code></dt>\n<dd>\nPerform sparse conditional bit constant propagation on trees and propagate pointer alignment information. This pass only operates on local scalar variables and is enabled by default at <code>-O</code> and higher. It requires that <code>-ftree-ccp</code> is enabled. </dd>\n<dt><code>-ftree-ccp</code></dt>\n<dd>\nPerform sparse conditional constant propagation (CCP) on trees. This pass only operates on local scalar variables and is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-switch-conversion</code></dt>\n<dd>Perform conversion of simple initializations in a switch to initializations from a scalar array. This flag is enabled by default at <code>-O2</code> and higher. </dd>\n<dt><code>-ftree-tail-merge</code></dt>\n<dd>Look for identical code sequences. When found, replace one with a jump to the other. This optimization is known as tail merging or cross jumping. This flag is enabled by default at <code>-O2</code> and higher. The compilation time in this pass can be limited using <code>max-tail-merge-comparisons</code> parameter and <code>max-tail-merge-iterations</code> parameter. </dd>\n<dt><code>-ftree-dce</code></dt>\n<dd>\nPerform dead code elimination (DCE) on trees. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-builtin-call-dce</code></dt>\n<dd>\nPerform conditional dead code elimination (DCE) for calls to built-in functions that may set <code>errno</code> but are otherwise side-effect free. This flag is enabled by default at <code>-O2</code> and higher if <code>-Os</code> is not also specified. </dd>\n<dt><code>-ftree-dominator-opts</code></dt>\n<dd>\nPerform a variety of simple scalar cleanups (constant/copy propagation, redundancy elimination, range propagation and expression simplification) based on a dominator tree traversal. This also performs jump threading (to reduce jumps to jumps). This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-dse</code></dt>\n<dd>\nPerform dead store elimination (DSE) on trees. A dead store is a store into a memory location that is later overwritten by another store without any intervening loads. In this case the earlier store can be deleted. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-ch</code></dt>\n<dd>\nPerform loop header copying on trees. This is beneficial since it increases effectiveness of code motion optimizations. It also saves one jump. This flag is enabled by default at <code>-O</code> and higher. It is not enabled for <code>-Os</code>, since it usually increases code size. </dd>\n<dt><code>-ftree-loop-optimize</code></dt>\n<dd>\nPerform loop optimizations on trees. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-loop-linear</code></dt>\n<dd>\nPerform loop interchange transformations on tree. Same as <code>-floop-interchange</code>. To use this code transformation, GCC has to be configured with <code>--with-ppl</code> and <code>--with-cloog</code> to enable the Graphite loop transformation infrastructure. </dd>\n<dt><code>-floop-interchange</code></dt>\n<dd>\nPerform loop interchange transformations on loops. Interchanging two nested loops switches the inner and outer loops. For example, given a loop like: <pre class=\"smallexample\">DO J = 1, M\n  DO I = 1, N\n    A(J, I) = A(J, I) * C\n  ENDDO\nENDDO</pre> <p>loop interchange transforms the loop as if it were written: </p>\n<pre class=\"smallexample\">DO I = 1, N\n  DO J = 1, M\n    A(J, I) = A(J, I) * C\n  ENDDO\nENDDO</pre> <p>which can be beneficial when <code>N</code> is larger than the caches, because in Fortran, the elements of an array are stored in memory contiguously by column, and the original loop iterates over rows, potentially creating at each access a cache miss. This optimization applies to all the languages supported by GCC and is not limited to Fortran. To use this code transformation, GCC has to be configured with <code>--with-ppl</code> and <code>--with-cloog</code> to enable the Graphite loop transformation infrastructure. </p>\n</dd>\n<dt><code>-floop-strip-mine</code></dt>\n<dd>\nPerform loop strip mining transformations on loops. Strip mining splits a loop into two nested loops. The outer loop has strides equal to the strip size and the inner loop has strides of the original loop within a strip. The strip length can be changed using the <code>loop-block-tile-size</code> parameter. For example, given a loop like: <pre class=\"smallexample\">DO I = 1, N\n  A(I) = A(I) + C\nENDDO</pre> <p>loop strip mining transforms the loop as if it were written: </p>\n<pre class=\"smallexample\">DO II = 1, N, 51\n  DO I = II, min (II + 50, N)\n    A(I) = A(I) + C\n  ENDDO\nENDDO</pre> <p>This optimization applies to all the languages supported by GCC and is not limited to Fortran. To use this code transformation, GCC has to be configured with <code>--with-ppl</code> and <code>--with-cloog</code> to enable the Graphite loop transformation infrastructure. </p>\n</dd>\n<dt><code>-floop-block</code></dt>\n<dd>\nPerform loop blocking transformations on loops. Blocking strip mines each loop in the loop nest such that the memory accesses of the element loops fit inside caches. The strip length can be changed using the <code>loop-block-tile-size</code> parameter. For example, given a loop like: <pre class=\"smallexample\">DO I = 1, N\n  DO J = 1, M\n    A(J, I) = B(I) + C(J)\n  ENDDO\nENDDO</pre> <p>loop blocking transforms the loop as if it were written: </p>\n<pre class=\"smallexample\">DO II = 1, N, 51\n  DO JJ = 1, M, 51\n    DO I = II, min (II + 50, N)\n      DO J = JJ, min (JJ + 50, M)\n        A(J, I) = B(I) + C(J)\n      ENDDO\n    ENDDO\n  ENDDO\nENDDO</pre> <p>which can be beneficial when <code>M</code> is larger than the caches, because the innermost loop iterates over a smaller amount of data which can be kept in the caches. This optimization applies to all the languages supported by GCC and is not limited to Fortran. To use this code transformation, GCC has to be configured with <code>--with-ppl</code> and <code>--with-cloog</code> to enable the Graphite loop transformation infrastructure. </p>\n</dd>\n<dt><code>-fgraphite-identity</code></dt>\n<dd>\nEnable the identity transformation for graphite. For every SCoP we generate the polyhedral representation and transform it back to gimple. Using <code>-fgraphite-identity</code> we can check the costs or benefits of the GIMPLE -&gt; GRAPHITE -&gt; GIMPLE transformation. Some minimal optimizations are also performed by the code generator CLooG, like index splitting and dead code elimination in loops. </dd>\n<dt><code>-floop-nest-optimize</code></dt>\n<dd>\nEnable the ISL based loop nest optimizer. This is a generic loop nest optimizer based on the Pluto optimization algorithms. It calculates a loop structure optimized for data-locality and parallelism. This option is experimental. </dd>\n<dt><code>-floop-parallelize-all</code></dt>\n<dd>\nUse the Graphite data dependence analysis to identify loops that can be parallelized. Parallelize all the loops that can be analyzed to not contain loop carried dependences without checking that it is profitable to parallelize the loops. </dd>\n<dt><code>-fcheck-data-deps</code></dt>\n<dd>\nCompare the results of several data dependence analyzers. This option is used for debugging the data dependence analyzers. </dd>\n<dt><code>-ftree-loop-if-convert</code></dt>\n<dd>Attempt to transform conditional jumps in the innermost loops to branch-less equivalents. The intent is to remove control-flow from the innermost loops in order to improve the ability of the vectorization pass to handle these loops. This is enabled by default if vectorization is enabled. </dd>\n<dt><code>-ftree-loop-if-convert-stores</code></dt>\n<dd>Attempt to also if-convert conditional jumps containing memory writes. This transformation can be unsafe for multi-threaded programs as it transforms conditional memory writes into unconditional memory writes. For example, <pre class=\"smallexample\">for (i = 0; i &lt; N; i++)\n  if (cond)\n    A[i] = expr;</pre> <p>is transformed to </p>\n<pre class=\"smallexample\">for (i = 0; i &lt; N; i++)\n  A[i] = cond ? expr : A[i];</pre> <p>potentially producing data races. </p>\n</dd>\n<dt><code>-ftree-loop-distribution</code></dt>\n<dd>Perform loop distribution. This flag can improve cache performance on big loop bodies and allow further loop optimizations, like parallelization or vectorization, to take place. For example, the loop <pre class=\"smallexample\">DO I = 1, N\n  A(I) = B(I) + C\n  D(I) = E(I) * F\nENDDO</pre> <p>is transformed to </p>\n<pre class=\"smallexample\">DO I = 1, N\n   A(I) = B(I) + C\nENDDO\nDO I = 1, N\n   D(I) = E(I) * F\nENDDO</pre> </dd>\n<dt><code>-ftree-loop-distribute-patterns</code></dt>\n<dd>Perform loop distribution of patterns that can be code generated with calls to a library. This flag is enabled by default at <code>-O3</code>. <p>This pass distributes the initialization loops and generates a call to memset zero. For example, the loop </p>\n<pre class=\"smallexample\">DO I = 1, N\n  A(I) = 0\n  B(I) = A(I) + I\nENDDO</pre> <p>is transformed to </p>\n<pre class=\"smallexample\">DO I = 1, N\n   A(I) = 0\nENDDO\nDO I = 1, N\n   B(I) = A(I) + I\nENDDO</pre> <p>and the initialization loop is transformed into a call to memset zero. </p>\n</dd>\n<dt><code>-ftree-loop-im</code></dt>\n<dd>\nPerform loop invariant motion on trees. This pass moves only invariants that are hard to handle at RTL level (function calls, operations that expand to nontrivial sequences of insns). With <code>-funswitch-loops</code> it also moves operands of conditions that are invariant out of the loop, so that we can use just trivial invariantness analysis in loop unswitching. The pass also includes store motion. </dd>\n<dt><code>-ftree-loop-ivcanon</code></dt>\n<dd>\nCreate a canonical counter for number of iterations in loops for which determining number of iterations requires complicated analysis. Later optimizations then may determine the number easily. Useful especially in connection with unrolling. </dd>\n<dt><code>-fivopts</code></dt>\n<dd>\nPerform induction variable optimizations (strength reduction, induction variable merging and induction variable elimination) on trees. </dd>\n<dt><code>-ftree-parallelize-loops=n</code></dt>\n<dd>\nParallelize loops, i.e., split their iteration space to run in n threads. This is only possible for loops whose iterations are independent and can be arbitrarily reordered. The optimization is only profitable on multiprocessor machines, for loops that are CPU-intensive, rather than constrained e.g. by memory bandwidth. This option implies <code>-pthread</code>, and thus is only supported on targets that have support for <code>-pthread</code>. </dd>\n<dt><code>-ftree-pta</code></dt>\n<dd>\nPerform function-local points-to analysis on trees. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-sra</code></dt>\n<dd>\nPerform scalar replacement of aggregates. This pass replaces structure references with scalars to prevent committing structures to memory too early. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-copyrename</code></dt>\n<dd>\nPerform copy renaming on trees. This pass attempts to rename compiler temporaries to other variables at copy locations, usually resulting in variable names which more closely resemble the original variables. This flag is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-coalesce-inlined-vars</code></dt>\n<dd>\nTell the copyrename pass (see <code>-ftree-copyrename</code>) to attempt to combine small user-defined variables too, but only if they were inlined from other functions. It is a more limited form of <code>-ftree-coalesce-vars</code>. This may harm debug information of such inlined variables, but it will keep variables of the inlined-into function apart from each other, such that they are more likely to contain the expected values in a debugging session. This was the default in GCC versions older than 4.7. </dd>\n<dt><code>-ftree-coalesce-vars</code></dt>\n<dd>\nTell the copyrename pass (see <code>-ftree-copyrename</code>) to attempt to combine small user-defined variables too, instead of just compiler temporaries. This may severely limit the ability to debug an optimized program compiled with <code>-fno-var-tracking-assignments</code>. In the negated form, this flag prevents SSA coalescing of user variables, including inlined ones. This option is enabled by default. </dd>\n<dt><code>-ftree-ter</code></dt>\n<dd>\nPerform temporary expression replacement during the SSA-&gt;normal phase. Single use/single def temporaries are replaced at their use location with their defining expression. This results in non-GIMPLE code, but gives the expanders much more complex trees to work on resulting in better RTL generation. This is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-slsr</code></dt>\n<dd>\nPerform straight-line strength reduction on trees. This recognizes related expressions involving multiplications and replaces them by less expensive calculations when possible. This is enabled by default at <code>-O</code> and higher. </dd>\n<dt><code>-ftree-vectorize</code></dt>\n<dd>\nPerform vectorization on trees. This flag enables <code>-ftree-loop-vectorize</code> and <code>-ftree-slp-vectorize</code> if not explicitly specified. </dd>\n<dt><code>-ftree-loop-vectorize</code></dt>\n<dd>\nPerform loop vectorization on trees. This flag is enabled by default at <code>-O3</code> and when <code>-ftree-vectorize</code> is enabled. </dd>\n<dt><code>-ftree-slp-vectorize</code></dt>\n<dd>\nPerform basic block vectorization on trees. This flag is enabled by default at <code>-O3</code> and when <code>-ftree-vectorize</code> is enabled. </dd>\n<dt>\n<code>-fvect-cost-model=</code><var>model</var>\n</dt>\n<dd>\nAlter the cost model used for vectorization. The <var>model</var> argument should be one of <code>unlimited</code>, <code>dynamic</code> or <code>cheap</code>. With the <code>unlimited</code> model the vectorized code-path is assumed to be profitable while with the <code>dynamic</code> model a runtime check will guard the vectorized code-path to enable it only for iteration counts that will likely execute faster than when executing the original scalar loop. The <code>cheap</code> model will disable vectorization of loops where doing so would be cost prohibitive for example due to required runtime checks for data dependence or alignment but otherwise is equal to the <code>dynamic</code> model. The default cost model depends on other optimization flags and is either <code>dynamic</code> or <code>cheap</code>. </dd>\n<dt>\n<code>-fsimd-cost-model=</code><var>model</var>\n</dt>\n<dd>\nAlter the cost model used for vectorization of loops marked with the OpenMP or Cilk Plus simd directive. The <var>model</var> argument should be one of <code>unlimited</code>, <code>dynamic</code>, <code>cheap</code>. All values of <var>model</var> have the same meaning as described in <code>-fvect-cost-model</code> and by default a cost model defined with <code>-fvect-cost-model</code> is used. </dd>\n<dt><code>-ftree-vrp</code></dt>\n<dd>\nPerform Value Range Propagation on trees. This is similar to the constant propagation pass, but instead of values, ranges of values are propagated. This allows the optimizers to remove unnecessary range checks like array bound checks and null pointer checks. This is enabled by default at <code>-O2</code> and higher. Null pointer check elimination is only done if <code>-fdelete-null-pointer-checks</code> is enabled. </dd>\n<dt><code>-ftracer</code></dt>\n<dd>\nPerform tail duplication to enlarge superblock size. This transformation simplifies the control flow of the function allowing other optimizations to do a better job. </dd>\n<dt><code>-funroll-loops</code></dt>\n<dd>\nUnroll loops whose number of iterations can be determined at compile time or upon entry to the loop. <code>-funroll-loops</code> implies <code>-frerun-cse-after-loop</code>. This option makes code larger, and may or may not make it run faster. </dd>\n<dt><code>-funroll-all-loops</code></dt>\n<dd>\nUnroll all loops, even if their number of iterations is uncertain when the loop is entered. This usually makes programs run more slowly. <code>-funroll-all-loops</code> implies the same options as <code>-funroll-loops</code>, </dd>\n<dt><code>-fsplit-ivs-in-unroller</code></dt>\n<dd>\nEnables expression of values of induction variables in later iterations of the unrolled loop using the value in the first iteration. This breaks long dependency chains, thus improving efficiency of the scheduling passes. <p>A combination of <code>-fweb</code> and CSE is often sufficient to obtain the same effect. However, that is not reliable in cases where the loop body is more complicated than a single basic block. It also does not work at all on some architectures due to restrictions in the CSE pass. </p>\n<p>This optimization is enabled by default. </p>\n</dd>\n<dt><code>-fvariable-expansion-in-unroller</code></dt>\n<dd>\nWith this option, the compiler creates multiple copies of some local variables when unrolling a loop, which can result in superior code. </dd>\n<dt><code>-fpartial-inlining</code></dt>\n<dd>\nInline parts of functions. This option has any effect only when inlining itself is turned on by the <code>-finline-functions</code> or <code>-finline-small-functions</code> options. <p>Enabled at level <code>-O2</code>. </p>\n</dd>\n<dt><code>-fpredictive-commoning</code></dt>\n<dd>\nPerform predictive commoning optimization, i.e., reusing computations (especially memory loads and stores) performed in previous iterations of loops. <p>This option is enabled at level <code>-O3</code>. </p>\n</dd>\n<dt><code>-fprefetch-loop-arrays</code></dt>\n<dd>\nIf supported by the target machine, generate instructions to prefetch memory to improve the performance of loops that access large arrays. <p>This option may generate better or worse code; results are highly dependent on the structure of loops within the source code. </p>\n<p>Disabled at level <code>-Os</code>. </p>\n</dd>\n<dt>\n<code>-fno-peephole</code><dt><code>-fno-peephole2</code></dt>\n</dt>\n<dd>\nDisable any machine-specific peephole optimizations. The difference between <code>-fno-peephole</code> and <code>-fno-peephole2</code> is in how they are implemented in the compiler; some targets use one, some use the other, a few use both. <p><code>-fpeephole</code> is enabled by default. <code>-fpeephole2</code> enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fno-guess-branch-probability</code></dt>\n<dd>\nDo not guess branch probabilities using heuristics. <p>GCC uses heuristics to guess branch probabilities if they are not provided by profiling feedback (<code>-fprofile-arcs</code>). These heuristics are based on the control flow graph. If some branch probabilities are specified by ‘<code>__builtin_expect</code>’, then the heuristics are used to guess branch probabilities for the rest of the control flow graph, taking the ‘<code>__builtin_expect</code>’ info into account. The interactions between the heuristics and ‘<code>__builtin_expect</code>’ can be complex, and in some cases, it may be useful to disable the heuristics so that the effects of ‘<code>__builtin_expect</code>’ are easier to understand. </p>\n<p>The default is <code>-fguess-branch-probability</code> at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-freorder-blocks</code></dt>\n<dd>\nReorder basic blocks in the compiled function in order to reduce number of taken branches and improve code locality. <p>Enabled at levels <code>-O2</code>, <code>-O3</code>. </p>\n</dd>\n<dt><code>-freorder-blocks-and-partition</code></dt>\n<dd>\nIn addition to reordering basic blocks in the compiled function, in order to reduce number of taken branches, partitions hot and cold basic blocks into separate sections of the assembly and .o files, to improve paging and cache locality performance. <p>This optimization is automatically turned off in the presence of exception handling, for linkonce sections, for functions with a user-defined section attribute and on any architecture that does not support named sections. </p>\n<p>Enabled for x86 at levels <code>-O2</code>, <code>-O3</code>. </p>\n</dd>\n<dt><code>-freorder-functions</code></dt>\n<dd>\nReorder functions in the object file in order to improve code locality. This is implemented by using special subsections <code>.text.hot</code> for most frequently executed functions and <code>.text.unlikely</code> for unlikely executed functions. Reordering is done by the linker so object file format must support named sections and linker must place them in a reasonable way. <p>Also profile feedback must be available to make this option effective. See <code>-fprofile-arcs</code> for details. </p>\n<p>Enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fstrict-aliasing</code></dt>\n<dd>\nAllow the compiler to assume the strictest aliasing rules applicable to the language being compiled. For C (and C++), this activates optimizations based on the type of expressions. In particular, an object of one type is assumed never to reside at the same address as an object of a different type, unless the types are almost the same. For example, an <code>unsigned int</code> can alias an <code>int</code>, but not a <code>void*</code> or a <code>double</code>. A character type may alias any other type. <p>Pay special attention to code like this: </p>\n<pre class=\"smallexample\">union a_union {\n  int i;\n  double d;\n};\n\nint f() {\n  union a_union t;\n  t.d = 3.0;\n  return t.i;\n}</pre> <p>The practice of reading from a different union member than the one most recently written to (called “type-punning”) is common. Even with <code>-fstrict-aliasing</code>, type-punning is allowed, provided the memory is accessed through the union type. So, the code above works as expected. See <a href=\"structures-unions-enumerations-and-bit_002dfields-implementation#Structures-unions-enumerations-and-bit_002dfields-implementation\">Structures unions enumerations and bit-fields implementation</a>. However, this code might not: </p>\n<pre class=\"smallexample\">int f() {\n  union a_union t;\n  int* ip;\n  t.d = 3.0;\n  ip = &amp;t.i;\n  return *ip;\n}</pre> <p>Similarly, access by taking the address, casting the resulting pointer and dereferencing the result has undefined behavior, even if the cast uses a union type, e.g.: </p>\n<pre class=\"smallexample\">int f() {\n  double d = 3.0;\n  return ((union a_union *) &amp;d)-&gt;i;\n}</pre> <p>The <code>-fstrict-aliasing</code> option is enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fstrict-overflow</code></dt>\n<dd>\nAllow the compiler to assume strict signed overflow rules, depending on the language being compiled. For C (and C++) this means that overflow when doing arithmetic with signed numbers is undefined, which means that the compiler may assume that it does not happen. This permits various optimizations. For example, the compiler assumes that an expression like <code>i + 10 &gt; i</code> is always true for signed <code>i</code>. This assumption is only valid if signed overflow is undefined, as the expression is false if <code>i + 10</code> overflows when using twos complement arithmetic. When this option is in effect any attempt to determine whether an operation on signed numbers overflows must be written carefully to not actually involve overflow. <p>This option also allows the compiler to assume strict pointer semantics: given a pointer to an object, if adding an offset to that pointer does not produce a pointer to the same object, the addition is undefined. This permits the compiler to conclude that <code>p + u &gt;\np</code> is always true for a pointer <code>p</code> and unsigned integer <code>u</code>. This assumption is only valid because pointer wraparound is undefined, as the expression is false if <code>p + u</code> overflows using twos complement arithmetic. </p>\n<p>See also the <code>-fwrapv</code> option. Using <code>-fwrapv</code> means that integer signed overflow is fully defined: it wraps. When <code>-fwrapv</code> is used, there is no difference between <code>-fstrict-overflow</code> and <code>-fno-strict-overflow</code> for integers. With <code>-fwrapv</code> certain types of overflow are permitted. For example, if the compiler gets an overflow when doing arithmetic on constants, the overflowed value can still be used with <code>-fwrapv</code>, but not otherwise. </p>\n<p>The <code>-fstrict-overflow</code> option is enabled at levels <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt>\n<code>-falign-functions</code><dt>\n<code>-falign-functions=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nAlign the start of functions to the next power-of-two greater than <var>n</var>, skipping up to <var>n</var> bytes. For instance, <code>-falign-functions=32</code> aligns functions to the next 32-byte boundary, but <code>-falign-functions=24</code> aligns to the next 32-byte boundary only if this can be done by skipping 23 bytes or less. <p><code>-fno-align-functions</code> and <code>-falign-functions=1</code> are equivalent and mean that functions are not aligned. </p>\n<p>Some assemblers only support this flag when <var>n</var> is a power of two; in that case, it is rounded up. </p>\n<p>If <var>n</var> is not specified or is zero, use a machine-dependent default. </p>\n<p>Enabled at levels <code>-O2</code>, <code>-O3</code>. </p>\n</dd>\n<dt>\n<code>-falign-labels</code><dt>\n<code>-falign-labels=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nAlign all branch targets to a power-of-two boundary, skipping up to <var>n</var> bytes like <code>-falign-functions</code>. This option can easily make code slower, because it must insert dummy operations for when the branch target is reached in the usual flow of the code. <p><code>-fno-align-labels</code> and <code>-falign-labels=1</code> are equivalent and mean that labels are not aligned. </p>\n<p>If <code>-falign-loops</code> or <code>-falign-jumps</code> are applicable and are greater than this value, then their values are used instead. </p>\n<p>If <var>n</var> is not specified or is zero, use a machine-dependent default which is very likely to be ‘<code>1</code>’, meaning no alignment. </p>\n<p>Enabled at levels <code>-O2</code>, <code>-O3</code>. </p>\n</dd>\n<dt>\n<code>-falign-loops</code><dt>\n<code>-falign-loops=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nAlign loops to a power-of-two boundary, skipping up to <var>n</var> bytes like <code>-falign-functions</code>. If the loops are executed many times, this makes up for any execution of the dummy operations. <p><code>-fno-align-loops</code> and <code>-falign-loops=1</code> are equivalent and mean that loops are not aligned. </p>\n<p>If <var>n</var> is not specified or is zero, use a machine-dependent default. </p>\n<p>Enabled at levels <code>-O2</code>, <code>-O3</code>. </p>\n</dd>\n<dt>\n<code>-falign-jumps</code><dt>\n<code>-falign-jumps=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nAlign branch targets to a power-of-two boundary, for branch targets where the targets can only be reached by jumping, skipping up to <var>n</var> bytes like <code>-falign-functions</code>. In this case, no dummy operations need be executed. <p><code>-fno-align-jumps</code> and <code>-falign-jumps=1</code> are equivalent and mean that loops are not aligned. </p>\n<p>If <var>n</var> is not specified or is zero, use a machine-dependent default. </p>\n<p>Enabled at levels <code>-O2</code>, <code>-O3</code>. </p>\n</dd>\n<dt><code>-funit-at-a-time</code></dt>\n<dd>\nThis option is left for compatibility reasons. <code>-funit-at-a-time</code> has no effect, while <code>-fno-unit-at-a-time</code> implies <code>-fno-toplevel-reorder</code> and <code>-fno-section-anchors</code>. <p>Enabled by default. </p>\n</dd>\n<dt><code>-fno-toplevel-reorder</code></dt>\n<dd>\nDo not reorder top-level functions, variables, and <code>asm</code> statements. Output them in the same order that they appear in the input file. When this option is used, unreferenced static variables are not removed. This option is intended to support existing code that relies on a particular ordering. For new code, it is better to use attributes when possible. <p>Enabled at level <code>-O0</code>. When disabled explicitly, it also implies <code>-fno-section-anchors</code>, which is otherwise enabled at <code>-O0</code> on some targets. </p>\n</dd>\n<dt><code>-fweb</code></dt>\n<dd>\nConstructs webs as commonly used for register allocation purposes and assign each web individual pseudo register. This allows the register allocation pass to operate on pseudos directly, but also strengthens several other optimization passes, such as CSE, loop optimizer and trivial dead code remover. It can, however, make debugging impossible, since variables no longer stay in a “home register”. <p>Enabled by default with <code>-funroll-loops</code>. </p>\n</dd>\n<dt><code>-fwhole-program</code></dt>\n<dd>\nAssume that the current compilation unit represents the whole program being compiled. All public functions and variables with the exception of <code>main</code> and those merged by attribute <code>externally_visible</code> become static functions and in effect are optimized more aggressively by interprocedural optimizers. <p>This option should not be used in combination with <code>-flto</code>. Instead relying on a linker plugin should provide safer and more precise information. </p>\n</dd>\n<dt>\n<code>-flto[=</code><var>n</var><code>]</code>\n</dt>\n<dd>\nThis option runs the standard link-time optimizer. When invoked with source code, it generates GIMPLE (one of GCC's internal representations) and writes it to special ELF sections in the object file. When the object files are linked together, all the function bodies are read from these ELF sections and instantiated as if they had been part of the same translation unit. <p>To use the link-time optimizer, <code>-flto</code> and optimization options should be specified at compile time and during the final link. For example: </p>\n<pre class=\"smallexample\">gcc -c -O2 -flto foo.c\ngcc -c -O2 -flto bar.c\ngcc -o myprog -flto -O2 foo.o bar.o</pre> <p>The first two invocations to GCC save a bytecode representation of GIMPLE into special ELF sections inside <code>foo.o</code> and <code>bar.o</code>. The final invocation reads the GIMPLE bytecode from <code>foo.o</code> and <code>bar.o</code>, merges the two files into a single internal image, and compiles the result as usual. Since both <code>foo.o</code> and <code>bar.o</code> are merged into a single image, this causes all the interprocedural analyses and optimizations in GCC to work across the two files as if they were a single one. This means, for example, that the inliner is able to inline functions in <code>bar.o</code> into functions in <code>foo.o</code> and vice-versa. </p>\n<p>Another (simpler) way to enable link-time optimization is: </p>\n<pre class=\"smallexample\">gcc -o myprog -flto -O2 foo.c bar.c</pre> <p>The above generates bytecode for <code>foo.c</code> and <code>bar.c</code>, merges them together into a single GIMPLE representation and optimizes them as usual to produce <code>myprog</code>. </p>\n<p>The only important thing to keep in mind is that to enable link-time optimizations you need to use the GCC driver to perform the link-step. GCC then automatically performs link-time optimization if any of the objects involved were compiled with the <code>-flto</code>. You generally should specify the optimization options to be used for link-time optimization though GCC will try to be clever at guessing an optimization level to use from the options used at compile-time if you fail to specify one at link-time. You can always override the automatic decision to do link-time optimization at link-time by passing <code>-fno-lto</code> to the link command. </p>\n<p>To make whole program optimization effective, it is necessary to make certain whole program assumptions. The compiler needs to know what functions and variables can be accessed by libraries and runtime outside of the link-time optimized unit. When supported by the linker, the linker plugin (see <code>-fuse-linker-plugin</code>) passes information to the compiler about used and externally visible symbols. When the linker plugin is not available, <code>-fwhole-program</code> should be used to allow the compiler to make these assumptions, which leads to more aggressive optimization decisions. </p>\n<p>When <code>-fuse-linker-plugin</code> is not enabled then, when a file is compiled with <code>-flto</code>, the generated object file is larger than a regular object file because it contains GIMPLE bytecodes and the usual final code (see <code>-ffat-lto-objects</code>. This means that object files with LTO information can be linked as normal object files; if <code>-fno-lto</code> is passed to the linker, no interprocedural optimizations are applied. Note that when <code>-fno-fat-lto-objects</code> is enabled the compile-stage is faster but you cannot perform a regular, non-LTO link on them. </p>\n<p>Additionally, the optimization flags used to compile individual files are not necessarily related to those used at link time. For instance, </p>\n<pre class=\"smallexample\">gcc -c -O0 -ffat-lto-objects -flto foo.c\ngcc -c -O0 -ffat-lto-objects -flto bar.c\ngcc -o myprog -O3 foo.o bar.o</pre> <p>This produces individual object files with unoptimized assembler code, but the resulting binary <code>myprog</code> is optimized at <code>-O3</code>. If, instead, the final binary is generated with <code>-fno-lto</code>, then <code>myprog</code> is not optimized. </p>\n<p>When producing the final binary, GCC only applies link-time optimizations to those files that contain bytecode. Therefore, you can mix and match object files and libraries with GIMPLE bytecodes and final object code. GCC automatically selects which files to optimize in LTO mode and which files to link without further processing. </p>\n<p>There are some code generation flags preserved by GCC when generating bytecodes, as they need to be used during the final link stage. Generally options specified at link-time override those specified at compile-time. </p>\n<p>If you do not specify an optimization level option <code>-O</code> at link-time then GCC will compute one based on the optimization levels used when compiling the object files. The highest optimization level will win here. </p>\n<p>Currently, the following options and their setting are take from the first object file that explicitely specified it: <code>-fPIC</code>, <code>-fpic</code>, <code>-fpie</code>, <code>-fcommon</code>, <code>-fexceptions</code>, <code>-fnon-call-exceptions</code>, <code>-fgnu-tm</code> and all the <code>-m</code> target flags. </p>\n<p>Certain ABI changing flags are required to match in all compilation-units and trying to override this at link-time with a conflicting value is ignored. This includes options such as <code>-freg-struct-return</code> and <code>-fpcc-struct-return</code>. </p>\n<p>Other options such as <code>-ffp-contract</code>, <code>-fno-strict-overflow</code>, <code>-fwrapv</code>, <code>-fno-trapv</code> or <code>-fno-strict-aliasing</code> are passed through to the link stage and merged conservatively for conflicting translation units. Specifically <code>-fno-strict-overflow</code>, <code>-fwrapv</code> and <code>-fno-trapv</code> take precedence and for example <code>-ffp-contract=off</code> takes precedence over <code>-ffp-contract=fast</code>. You can override them at linke-time. </p>\n<p>It is recommended that you compile all the files participating in the same link with the same options and also specify those options at link time. </p>\n<p>If LTO encounters objects with C linkage declared with incompatible types in separate translation units to be linked together (undefined behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be issued. The behavior is still undefined at run time. Similar diagnostics may be raised for other languages. </p>\n<p>Another feature of LTO is that it is possible to apply interprocedural optimizations on files written in different languages: </p>\n<pre class=\"smallexample\">gcc -c -flto foo.c\ng++ -c -flto bar.cc\ngfortran -c -flto baz.f90\ng++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran</pre> <p>Notice that the final link is done with <code>g++</code> to get the C++ runtime libraries and <code>-lgfortran</code> is added to get the Fortran runtime libraries. In general, when mixing languages in LTO mode, you should use the same link command options as when mixing languages in a regular (non-LTO) compilation. </p>\n<p>If object files containing GIMPLE bytecode are stored in a library archive, say <code>libfoo.a</code>, it is possible to extract and use them in an LTO link if you are using a linker with plugin support. To create static libraries suitable for LTO, use <code>gcc-ar</code> and <code>gcc-ranlib</code> instead of <code>ar</code> and <code>ranlib</code>; to show the symbols of object files with GIMPLE bytecode, use <code>gcc-nm</code>. Those commands require that <code>ar</code>, <code>ranlib</code> and <code>nm</code> have been compiled with plugin support. At link time, use the the flag <code>-fuse-linker-plugin</code> to ensure that the library participates in the LTO optimization process: </p>\n<pre class=\"smallexample\">gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo</pre> <p>With the linker plugin enabled, the linker extracts the needed GIMPLE files from <code>libfoo.a</code> and passes them on to the running GCC to make them part of the aggregated GIMPLE image to be optimized. </p>\n<p>If you are not using a linker with plugin support and/or do not enable the linker plugin, then the objects inside <code>libfoo.a</code> are extracted and linked as usual, but they do not participate in the LTO optimization process. In order to make a static library suitable for both LTO optimization and usual linkage, compile its object files with <code>-flto</code> <code>-ffat-lto-objects</code>. </p>\n<p>Link-time optimizations do not require the presence of the whole program to operate. If the program does not require any symbols to be exported, it is possible to combine <code>-flto</code> and <code>-fwhole-program</code> to allow the interprocedural optimizers to use more aggressive assumptions which may lead to improved optimization opportunities. Use of <code>-fwhole-program</code> is not needed when linker plugin is active (see <code>-fuse-linker-plugin</code>). </p>\n<p>The current implementation of LTO makes no attempt to generate bytecode that is portable between different types of hosts. The bytecode files are versioned and there is a strict version check, so bytecode files generated in one version of GCC will not work with an older or newer version of GCC. </p>\n<p>Link-time optimization does not work well with generation of debugging information. Combining <code>-flto</code> with <code>-g</code> is currently experimental and expected to produce unexpected results. </p>\n<p>If you specify the optional <var>n</var>, the optimization and code generation done at link time is executed in parallel using <var>n</var> parallel jobs by utilizing an installed <code>make</code> program. The environment variable <code>MAKE</code> may be used to override the program used. The default value for <var>n</var> is 1. </p>\n<p>You can also specify <code>-flto=jobserver</code> to use GNU make's job server mode to determine the number of parallel jobs. This is useful when the Makefile calling GCC is already executing in parallel. You must prepend a ‘<code>+</code>’ to the command recipe in the parent Makefile for this to work. This option likely only works if <code>MAKE</code> is GNU make. </p>\n</dd>\n<dt>\n<code>-flto-partition=</code><var>alg</var>\n</dt>\n<dd>\nSpecify the partitioning algorithm used by the link-time optimizer. The value is either <code>1to1</code> to specify a partitioning mirroring the original source files or <code>balanced</code> to specify partitioning into equally sized chunks (whenever possible) or <code>max</code> to create new partition for every symbol where possible. Specifying <code>none</code> as an algorithm disables partitioning and streaming completely. The default value is <code>balanced</code>. While <code>1to1</code> can be used as an workaround for various code ordering issues, the <code>max</code> partitioning is intended for internal testing only. </dd>\n<dt>\n<code>-flto-compression-level=</code><var>n</var>\n</dt>\n<dd>This option specifies the level of compression used for intermediate language written to LTO object files, and is only meaningful in conjunction with LTO mode (<code>-flto</code>). Valid values are 0 (no compression) to 9 (maximum compression). Values outside this range are clamped to either 0 or 9. If the option is not given, a default balanced compression setting is used. </dd>\n<dt><code>-flto-report</code></dt>\n<dd>Prints a report with internal details on the workings of the link-time optimizer. The contents of this report vary from version to version. It is meant to be useful to GCC developers when processing object files in LTO mode (via <code>-flto</code>). <p>Disabled by default. </p>\n</dd>\n<dt><code>-flto-report-wpa</code></dt>\n<dd>Like <code>-flto-report</code>, but only print for the WPA phase of Link Time Optimization. </dd>\n<dt><code>-fuse-linker-plugin</code></dt>\n<dd>Enables the use of a linker plugin during link-time optimization. This option relies on plugin support in the linker, which is available in gold or in GNU ld 2.21 or newer. <p>This option enables the extraction of object files with GIMPLE bytecode out of library archives. This improves the quality of optimization by exposing more code to the link-time optimizer. This information specifies what symbols can be accessed externally (by non-LTO object or during dynamic linking). Resulting code quality improvements on binaries (and shared libraries that use hidden visibility) are similar to <code>-fwhole-program</code>. See <code>-flto</code> for a description of the effect of this flag and how to use it. </p>\n<p>This option is enabled by default when LTO support in GCC is enabled and GCC was configured for use with a linker supporting plugins (GNU ld 2.21 or newer or gold). </p>\n</dd>\n<dt><code>-ffat-lto-objects</code></dt>\n<dd>\nFat LTO objects are object files that contain both the intermediate language and the object code. This makes them usable for both LTO linking and normal linking. This option is effective only when compiling with <code>-flto</code> and is ignored at link time. <p><code>-fno-fat-lto-objects</code> improves compilation time over plain LTO, but requires the complete toolchain to be aware of LTO. It requires a linker with linker plugin support for basic functionality. Additionally, <code>nm</code>, <code>ar</code> and <code>ranlib</code> need to support linker plugins to allow a full-featured build environment (capable of building static libraries etc). GCC provides the <code>gcc-ar</code>, <code>gcc-nm</code>, <code>gcc-ranlib</code> wrappers to pass the right options to these tools. With non fat LTO makefiles need to be modified to use them. </p>\n<p>The default is <code>-fno-fat-lto-objects</code> on targets with linker plugin support. </p>\n</dd>\n<dt><code>-fcompare-elim</code></dt>\n<dd>\nAfter register allocation and post-register allocation instruction splitting, identify arithmetic instructions that compute processor flags similar to a comparison operation based on that arithmetic. If possible, eliminate the explicit comparison operation. <p>This pass only applies to certain targets that cannot explicitly represent the comparison operation before register allocation is complete. </p>\n<p>Enabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fuse-ld=bfd</code></dt>\n<dd>\nUse the <code>bfd</code> linker instead of the default linker. </dd>\n<dt><code>-fuse-ld=gold</code></dt>\n<dd>\nUse the <code>gold</code> linker instead of the default linker. </dd>\n<dt><code>-fcprop-registers</code></dt>\n<dd>\nAfter register allocation and post-register allocation instruction splitting, perform a copy-propagation pass to try to reduce scheduling dependencies and occasionally eliminate the copy. <p>Enabled at levels <code>-O</code>, <code>-O2</code>, <code>-O3</code>, <code>-Os</code>. </p>\n</dd>\n<dt><code>-fprofile-correction</code></dt>\n<dd>\nProfiles collected using an instrumented binary for multi-threaded programs may be inconsistent due to missed counter updates. When this option is specified, GCC uses heuristics to correct or smooth out such inconsistencies. By default, GCC emits an error message when an inconsistent profile is detected. </dd>\n<dt>\n<code>-fprofile-dir=</code><var>path</var>\n</dt>\n<dd>\n Set the directory to search for the profile data files in to <var>path</var>. This option affects only the profile data generated by <code>-fprofile-generate</code>, <code>-ftest-coverage</code>, <code>-fprofile-arcs</code> and used by <code>-fprofile-use</code> and <code>-fbranch-probabilities</code> and its related options. Both absolute and relative paths can be used. By default, GCC uses the current directory as <var>path</var>, thus the profile data file appears in the same directory as the object file. </dd>\n<dt>\n<code>-fprofile-generate</code><dt>\n<code>-fprofile-generate=</code><var>path</var>\n</dt>\n</dt>\n<dd>\n Enable options usually used for instrumenting application to produce profile useful for later recompilation with profile feedback based optimization. You must use <code>-fprofile-generate</code> both when compiling and when linking your program. <p>The following options are enabled: <code>-fprofile-arcs</code>, <code>-fprofile-values</code>, <code>-fvpt</code>. </p>\n<p>If <var>path</var> is specified, GCC looks at the <var>path</var> to find the profile feedback data files. See <code>-fprofile-dir</code>. </p>\n</dd>\n<dt>\n<code>-fprofile-use</code><dt>\n<code>-fprofile-use=</code><var>path</var>\n</dt>\n</dt>\n<dd>\nEnable profile feedback directed optimizations, and optimizations generally profitable only with profile feedback available. <p>The following options are enabled: <code>-fbranch-probabilities</code>, <code>-fvpt</code>, <code>-funroll-loops</code>, <code>-fpeel-loops</code>, <code>-ftracer</code>, <code>-ftree-vectorize</code>, <code>ftree-loop-distribute-patterns</code> </p>\n<p>By default, GCC emits an error message if the feedback profiles do not match the source code. This error can be turned into a warning by using <code>-Wcoverage-mismatch</code>. Note this may result in poorly optimized code. </p>\n<p>If <var>path</var> is specified, GCC looks at the <var>path</var> to find the profile feedback data files. See <code>-fprofile-dir</code>. </p>\n</dd>\n</dl> <p>The following options control compiler behavior regarding floating-point arithmetic. These options trade off between speed and correctness. All must be specifically enabled. </p>\n<dl> <dt><code>-ffloat-store</code></dt>\n<dd>\nDo not store floating-point variables in registers, and inhibit other options that might change whether a floating-point value is taken from a register or memory. <p>This option prevents undesirable excess precision on machines such as the 68000 where the floating registers (of the 68881) keep more precision than a <code>double</code> is supposed to have. Similarly for the x86 architecture. For most programs, the excess precision does only good, but a few programs rely on the precise definition of IEEE floating point. Use <code>-ffloat-store</code> for such programs, after modifying them to store all pertinent intermediate computations into variables. </p>\n</dd>\n<dt>\n<code>-fexcess-precision=</code><var>style</var>\n</dt>\n<dd>\nThis option allows further control over excess precision on machines where floating-point registers have more precision than the IEEE <code>float</code> and <code>double</code> types and the processor does not support operations rounding to those types. By default, <code>-fexcess-precision=fast</code> is in effect; this means that operations are carried out in the precision of the registers and that it is unpredictable when rounding to the types specified in the source code takes place. When compiling C, if <code>-fexcess-precision=standard</code> is specified then excess precision follows the rules specified in ISO C99; in particular, both casts and assignments cause values to be rounded to their semantic types (whereas <code>-ffloat-store</code> only affects assignments). This option is enabled by default for C if a strict conformance option such as <code>-std=c99</code> is used. <p><code>-fexcess-precision=standard</code> is not implemented for languages other than C, and has no effect if <code>-funsafe-math-optimizations</code> or <code>-ffast-math</code> is specified. On the x86, it also has no effect if <code>-mfpmath=sse</code> or <code>-mfpmath=sse+387</code> is specified; in the former case, IEEE semantics apply without excess precision, and in the latter, rounding is unpredictable. </p>\n</dd>\n<dt><code>-ffast-math</code></dt>\n<dd>\nSets <code>-fno-math-errno</code>, <code>-funsafe-math-optimizations</code>, <code>-ffinite-math-only</code>, <code>-fno-rounding-math</code>, <code>-fno-signaling-nans</code> and <code>-fcx-limited-range</code>. <p>This option causes the preprocessor macro <code>__FAST_MATH__</code> to be defined. </p>\n<p>This option is not turned on by any <code>-O</code> option besides <code>-Ofast</code> since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however, yield faster code for programs that do not require the guarantees of these specifications. </p>\n</dd>\n<dt><code>-fno-math-errno</code></dt>\n<dd>\nDo not set <code>errno</code> after calling math functions that are executed with a single instruction, e.g., <code>sqrt</code>. A program that relies on IEEE exceptions for math error handling may want to use this flag for speed while maintaining IEEE arithmetic compatibility. <p>This option is not turned on by any <code>-O</code> option since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however, yield faster code for programs that do not require the guarantees of these specifications. </p>\n<p>The default is <code>-fmath-errno</code>. </p>\n<p>On Darwin systems, the math library never sets <code>errno</code>. There is therefore no reason for the compiler to consider the possibility that it might, and <code>-fno-math-errno</code> is the default. </p>\n</dd>\n<dt><code>-funsafe-math-optimizations</code></dt>\n<dd>\n Allow optimizations for floating-point arithmetic that (a) assume that arguments and results are valid and (b) may violate IEEE or ANSI standards. When used at link-time, it may include libraries or startup files that change the default FPU control word or other similar optimizations. <p>This option is not turned on by any <code>-O</code> option since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however, yield faster code for programs that do not require the guarantees of these specifications. Enables <code>-fno-signed-zeros</code>, <code>-fno-trapping-math</code>, <code>-fassociative-math</code> and <code>-freciprocal-math</code>. </p>\n<p>The default is <code>-fno-unsafe-math-optimizations</code>. </p>\n</dd>\n<dt><code>-fassociative-math</code></dt>\n<dd>\n Allow re-association of operands in series of floating-point operations. This violates the ISO C and C++ language standard by possibly changing computation result. NOTE: re-ordering may change the sign of zero as well as ignore NaNs and inhibit or create underflow or overflow (and thus cannot be used on code that relies on rounding behavior like <code>(x + 2**52) - 2**52</code>. May also reorder floating-point comparisons and thus may not be used when ordered comparisons are required. This option requires that both <code>-fno-signed-zeros</code> and <code>-fno-trapping-math</code> be in effect. Moreover, it doesn't make much sense with <code>-frounding-math</code>. For Fortran the option is automatically enabled when both <code>-fno-signed-zeros</code> and <code>-fno-trapping-math</code> are in effect. <p>The default is <code>-fno-associative-math</code>. </p>\n</dd>\n<dt><code>-freciprocal-math</code></dt>\n<dd>\n Allow the reciprocal of a value to be used instead of dividing by the value if this enables optimizations. For example <code>x / y</code> can be replaced with <code>x * (1/y)</code>, which is useful if <code>(1/y)</code> is subject to common subexpression elimination. Note that this loses precision and increases the number of flops operating on the value. <p>The default is <code>-fno-reciprocal-math</code>. </p>\n</dd>\n<dt><code>-ffinite-math-only</code></dt>\n<dd>\nAllow optimizations for floating-point arithmetic that assume that arguments and results are not NaNs or +-Infs. <p>This option is not turned on by any <code>-O</code> option since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. It may, however, yield faster code for programs that do not require the guarantees of these specifications. </p>\n<p>The default is <code>-fno-finite-math-only</code>. </p>\n</dd>\n<dt><code>-fno-signed-zeros</code></dt>\n<dd>\nAllow optimizations for floating-point arithmetic that ignore the signedness of zero. IEEE arithmetic specifies the behavior of distinct +0.0 and −0.0 values, which then prohibits simplification of expressions such as x+0.0 or 0.0*x (even with <code>-ffinite-math-only</code>). This option implies that the sign of a zero result isn't significant. <p>The default is <code>-fsigned-zeros</code>. </p>\n</dd>\n<dt><code>-fno-trapping-math</code></dt>\n<dd>\nCompile code assuming that floating-point operations cannot generate user-visible traps. These traps include division by zero, overflow, underflow, inexact result and invalid operation. This option requires that <code>-fno-signaling-nans</code> be in effect. Setting this option may allow faster code if one relies on “non-stop” IEEE arithmetic, for example. <p>This option should never be turned on by any <code>-O</code> option since it can result in incorrect output for programs that depend on an exact implementation of IEEE or ISO rules/specifications for math functions. </p>\n<p>The default is <code>-ftrapping-math</code>. </p>\n</dd>\n<dt><code>-frounding-math</code></dt>\n<dd>\nDisable transformations and optimizations that assume default floating-point rounding behavior. This is round-to-zero for all floating point to integer conversions, and round-to-nearest for all other arithmetic truncations. This option should be specified for programs that change the FP rounding mode dynamically, or that may be executed with a non-default rounding mode. This option disables constant folding of floating-point expressions at compile time (which may be affected by rounding mode) and arithmetic transformations that are unsafe in the presence of sign-dependent rounding modes. <p>The default is <code>-fno-rounding-math</code>. </p>\n<p>This option is experimental and does not currently guarantee to disable all GCC optimizations that are affected by rounding mode. Future versions of GCC may provide finer control of this setting using C99's <code>FENV_ACCESS</code> pragma. This command-line option will be used to specify the default state for <code>FENV_ACCESS</code>. </p>\n</dd>\n<dt><code>-fsignaling-nans</code></dt>\n<dd>\nCompile code assuming that IEEE signaling NaNs may generate user-visible traps during floating-point operations. Setting this option disables optimizations that may change the number of exceptions visible with signaling NaNs. This option implies <code>-ftrapping-math</code>. <p>This option causes the preprocessor macro <code>__SUPPORT_SNAN__</code> to be defined. </p>\n<p>The default is <code>-fno-signaling-nans</code>. </p>\n<p>This option is experimental and does not currently guarantee to disable all GCC optimizations that affect signaling NaN behavior. </p>\n</dd>\n<dt><code>-fsingle-precision-constant</code></dt>\n<dd>\nTreat floating-point constants as single precision instead of implicitly converting them to double-precision constants. </dd>\n<dt><code>-fcx-limited-range</code></dt>\n<dd>\nWhen enabled, this option states that a range reduction step is not needed when performing complex division. Also, there is no checking whether the result of a complex multiplication or division is <code>NaN\n+ I*NaN</code>, with an attempt to rescue the situation in that case. The default is <code>-fno-cx-limited-range</code>, but is enabled by <code>-ffast-math</code>. <p>This option controls the default setting of the ISO C99 <code>CX_LIMITED_RANGE</code> pragma. Nevertheless, the option applies to all languages. </p>\n</dd>\n<dt><code>-fcx-fortran-rules</code></dt>\n<dd>\nComplex multiplication and division follow Fortran rules. Range reduction is done as part of complex division, but there is no checking whether the result of a complex multiplication or division is <code>NaN\n+ I*NaN</code>, with an attempt to rescue the situation in that case. <p>The default is <code>-fno-cx-fortran-rules</code>. </p>\n</dd>\n</dl> <p>The following options control optimizations that may improve performance, but are not enabled by any <code>-O</code> options. This section includes experimental options that may produce broken code. </p>\n<dl> <dt><code>-fbranch-probabilities</code></dt>\n<dd>\nAfter running a program compiled with <code>-fprofile-arcs</code> (see <a href=\"debugging-options#Debugging-Options\">Options for Debugging Your Program or <code>gcc</code></a>), you can compile it a second time using <code>-fbranch-probabilities</code>, to improve optimizations based on the number of times each branch was taken. When a program compiled with <code>-fprofile-arcs</code> exits, it saves arc execution counts to a file called <samp><var>sourcename</var><span class=\"file\">.gcda</span></samp> for each source file. The information in this data file is very dependent on the structure of the generated code, so you must use the same source code and the same optimization options for both compilations. <p>With <code>-fbranch-probabilities</code>, GCC puts a ‘<code>REG_BR_PROB</code>’ note on each ‘<code>JUMP_INSN</code>’ and ‘<code>CALL_INSN</code>’. These can be used to improve optimization. Currently, they are only used in one place: in <code>reorg.c</code>, instead of guessing which path a branch is most likely to take, the ‘<code>REG_BR_PROB</code>’ values are used to exactly determine which path is taken more often. </p>\n</dd>\n<dt><code>-fprofile-values</code></dt>\n<dd>\nIf combined with <code>-fprofile-arcs</code>, it adds code so that some data about values of expressions in the program is gathered. <p>With <code>-fbranch-probabilities</code>, it reads back the data gathered from profiling values of expressions for usage in optimizations. </p>\n<p>Enabled with <code>-fprofile-generate</code> and <code>-fprofile-use</code>. </p>\n</dd>\n<dt><code>-fprofile-reorder-functions</code></dt>\n<dd>\nFunction reordering based on profile instrumentation collects first time of execution of a function and orders these functions in ascending order. <p>Enabled with <code>-fprofile-use</code>. </p>\n</dd>\n<dt><code>-fvpt</code></dt>\n<dd>\nIf combined with <code>-fprofile-arcs</code>, this option instructs the compiler to add code to gather information about values of expressions. <p>With <code>-fbranch-probabilities</code>, it reads back the data gathered and actually performs the optimizations based on them. Currently the optimizations include specialization of division operations using the knowledge about the value of the denominator. </p>\n</dd>\n<dt><code>-frename-registers</code></dt>\n<dd>\nAttempt to avoid false dependencies in scheduled code by making use of registers left over after register allocation. This optimization most benefits processors with lots of registers. Depending on the debug information format adopted by the target, however, it can make debugging impossible, since variables no longer stay in a “home register”. <p>Enabled by default with <code>-funroll-loops</code> and <code>-fpeel-loops</code>. </p>\n</dd>\n<dt><code>-ftracer</code></dt>\n<dd>\nPerform tail duplication to enlarge superblock size. This transformation simplifies the control flow of the function allowing other optimizations to do a better job. <p>Enabled with <code>-fprofile-use</code>. </p>\n</dd>\n<dt><code>-funroll-loops</code></dt>\n<dd>\nUnroll loops whose number of iterations can be determined at compile time or upon entry to the loop. <code>-funroll-loops</code> implies <code>-frerun-cse-after-loop</code>, <code>-fweb</code> and <code>-frename-registers</code>. It also turns on complete loop peeling (i.e. complete removal of loops with a small constant number of iterations). This option makes code larger, and may or may not make it run faster. <p>Enabled with <code>-fprofile-use</code>. </p>\n</dd>\n<dt><code>-funroll-all-loops</code></dt>\n<dd>\nUnroll all loops, even if their number of iterations is uncertain when the loop is entered. This usually makes programs run more slowly. <code>-funroll-all-loops</code> implies the same options as <code>-funroll-loops</code>. </dd>\n<dt><code>-fpeel-loops</code></dt>\n<dd>\nPeels loops for which there is enough information that they do not roll much (from profile feedback). It also turns on complete loop peeling (i.e. complete removal of loops with small constant number of iterations). <p>Enabled with <code>-fprofile-use</code>. </p>\n</dd>\n<dt><code>-fmove-loop-invariants</code></dt>\n<dd>\nEnables the loop invariant motion pass in the RTL loop optimizer. Enabled at level <code>-O1</code> </dd>\n<dt><code>-funswitch-loops</code></dt>\n<dd>\nMove branches with loop invariant conditions out of the loop, with duplicates of the loop on both branches (modified according to result of the condition). </dd>\n<dt>\n<code>-ffunction-sections</code><dt><code>-fdata-sections</code></dt>\n</dt>\n<dd>\nPlace each function or data item into its own section in the output file if the target supports arbitrary sections. The name of the function or the name of the data item determines the section's name in the output file. <p>Use these options on systems where the linker can perform optimizations to improve locality of reference in the instruction space. Most systems using the ELF object format and SPARC processors running Solaris 2 have linkers with such optimizations. AIX may have these optimizations in the future. </p>\n<p>Only use these options when there are significant benefits from doing so. When you specify these options, the assembler and linker create larger object and executable files and are also slower. You cannot use <code>gprof</code> on all systems if you specify this option, and you may have problems with debugging if you specify both this option and <code>-g</code>. </p>\n</dd>\n<dt><code>-fbranch-target-load-optimize</code></dt>\n<dd>\nPerform branch target register load optimization before prologue / epilogue threading. The use of target registers can typically be exposed only during reload, thus hoisting loads out of loops and doing inter-block scheduling needs a separate optimization pass. </dd>\n<dt><code>-fbranch-target-load-optimize2</code></dt>\n<dd>\nPerform branch target register load optimization after prologue / epilogue threading. </dd>\n<dt><code>-fbtr-bb-exclusive</code></dt>\n<dd>\nWhen performing branch target register load optimization, don't reuse branch target registers within any basic block. </dd>\n<dt><code>-fstack-protector</code></dt>\n<dd>\nEmit extra code to check for buffer overflows, such as stack smashing attacks. This is done by adding a guard variable to functions with vulnerable objects. This includes functions that call <code>alloca</code>, and functions with buffers larger than 8 bytes. The guards are initialized when a function is entered and then checked when the function exits. If a guard check fails, an error message is printed and the program exits. </dd>\n<dt><code>-fstack-protector-all</code></dt>\n<dd>\nLike <code>-fstack-protector</code> except that all functions are protected. </dd>\n<dt><code>-fstack-protector-strong</code></dt>\n<dd>\nLike <code>-fstack-protector</code> but includes additional functions to be protected — those that have local array definitions, or have references to local frame addresses. </dd>\n<dt><code>-fsection-anchors</code></dt>\n<dd>\nTry to reduce the number of symbolic address calculations by using shared “anchor” symbols to address nearby objects. This transformation can help to reduce the number of GOT entries and GOT accesses on some targets. <p>For example, the implementation of the following function <code>foo</code>: </p>\n<pre class=\"smallexample\">static int a, b, c;\nint foo (void) { return a + b + c; }</pre> <p class=\"noindent\">usually calculates the addresses of all three variables, but if you compile it with <code>-fsection-anchors</code>, it accesses the variables from a common anchor point instead. The effect is similar to the following pseudocode (which isn't valid C): </p>\n<pre class=\"smallexample\">int foo (void)\n{\n  register int *xr = &amp;x;\n  return xr[&amp;a - &amp;x] + xr[&amp;b - &amp;x] + xr[&amp;c - &amp;x];\n}</pre> <p>Not all targets support this option. </p>\n</dd>\n<dt>\n<code>--param </code><var>name</var><code>=</code><var>value</var>\n</dt>\n<dd>\nIn some places, GCC uses various constants to control the amount of optimization that is done. For example, GCC does not inline functions that contain more than a certain number of instructions. You can control some of these constants on the command line using the <code>--param</code> option. <p>The names of specific parameters, and the meaning of the values, are tied to the internals of the compiler, and are subject to change without notice in future releases. </p>\n<p>In each case, the <var>value</var> is an integer. The allowable choices for <var>name</var> are: </p>\n<dl> <dt><code>predictable-branch-outcome</code></dt>\n<dd>When branch is predicted to be taken with probability lower than this threshold (in percent), then it is considered well predictable. The default is 10. </dd>\n<dt><code>max-crossjump-edges</code></dt>\n<dd>The maximum number of incoming edges to consider for cross-jumping. The algorithm used by <code>-fcrossjumping</code> is O(N^2) in the number of edges incoming to each block. Increasing values mean more aggressive optimization, making the compilation time increase with probably small improvement in executable size. </dd>\n<dt><code>min-crossjump-insns</code></dt>\n<dd>The minimum number of instructions that must be matched at the end of two blocks before cross-jumping is performed on them. This value is ignored in the case where all instructions in the block being cross-jumped from are matched. The default value is 5. </dd>\n<dt><code>max-grow-copy-bb-insns</code></dt>\n<dd>The maximum code size expansion factor when copying basic blocks instead of jumping. The expansion is relative to a jump instruction. The default value is 8. </dd>\n<dt><code>max-goto-duplication-insns</code></dt>\n<dd>The maximum number of instructions to duplicate to a block that jumps to a computed goto. To avoid O(N^2) behavior in a number of passes, GCC factors computed gotos early in the compilation process, and unfactors them as late as possible. Only computed jumps at the end of a basic blocks with no more than max-goto-duplication-insns are unfactored. The default value is 8. </dd>\n<dt><code>max-delay-slot-insn-search</code></dt>\n<dd>The maximum number of instructions to consider when looking for an instruction to fill a delay slot. If more than this arbitrary number of instructions are searched, the time savings from filling the delay slot are minimal, so stop searching. Increasing values mean more aggressive optimization, making the compilation time increase with probably small improvement in execution time. </dd>\n<dt><code>max-delay-slot-live-search</code></dt>\n<dd>When trying to fill delay slots, the maximum number of instructions to consider when searching for a block with valid live register information. Increasing this arbitrarily chosen value means more aggressive optimization, increasing the compilation time. This parameter should be removed when the delay slot code is rewritten to maintain the control-flow graph. </dd>\n<dt><code>max-gcse-memory</code></dt>\n<dd>The approximate maximum amount of memory that can be allocated in order to perform the global common subexpression elimination optimization. If more memory than specified is required, the optimization is not done. </dd>\n<dt><code>max-gcse-insertion-ratio</code></dt>\n<dd>If the ratio of expression insertions to deletions is larger than this value for any expression, then RTL PRE inserts or removes the expression and thus leaves partially redundant computations in the instruction stream. The default value is 20. </dd>\n<dt><code>max-pending-list-length</code></dt>\n<dd>The maximum number of pending dependencies scheduling allows before flushing the current state and starting over. Large functions with few branches or calls can create excessively large lists which needlessly consume memory and resources. </dd>\n<dt><code>max-modulo-backtrack-attempts</code></dt>\n<dd>The maximum number of backtrack attempts the scheduler should make when modulo scheduling a loop. Larger values can exponentially increase compilation time. </dd>\n<dt><code>max-inline-insns-single</code></dt>\n<dd>Several parameters control the tree inliner used in GCC. This number sets the maximum number of instructions (counted in GCC's internal representation) in a single function that the tree inliner considers for inlining. This only affects functions declared inline and methods implemented in a class declaration (C++). The default value is 400. </dd>\n<dt><code>max-inline-insns-auto</code></dt>\n<dd>When you use <code>-finline-functions</code> (included in <code>-O3</code>), a lot of functions that would otherwise not be considered for inlining by the compiler are investigated. To those functions, a different (more restrictive) limit compared to functions declared inline can be applied. The default value is 40. </dd>\n<dt><code>inline-min-speedup</code></dt>\n<dd>When estimated performance improvement of caller + callee runtime exceeds this threshold (in precent), the function can be inlined regardless the limit on <code>--param max-inline-insns-single</code> and <code>--param max-inline-insns-auto</code>. </dd>\n<dt><code>large-function-insns</code></dt>\n<dd>The limit specifying really large functions. For functions larger than this limit after inlining, inlining is constrained by <code>--param large-function-growth</code>. This parameter is useful primarily to avoid extreme compilation time caused by non-linear algorithms used by the back end. The default value is 2700. </dd>\n<dt><code>large-function-growth</code></dt>\n<dd>Specifies maximal growth of large function caused by inlining in percents. The default value is 100 which limits large function growth to 2.0 times the original size. </dd>\n<dt><code>large-unit-insns</code></dt>\n<dd>The limit specifying large translation unit. Growth caused by inlining of units larger than this limit is limited by <code>--param inline-unit-growth</code>. For small units this might be too tight. For example, consider a unit consisting of function A that is inline and B that just calls A three times. If B is small relative to A, the growth of unit is 300\\% and yet such inlining is very sane. For very large units consisting of small inlineable functions, however, the overall unit growth limit is needed to avoid exponential explosion of code size. Thus for smaller units, the size is increased to <code>--param large-unit-insns</code> before applying <code>--param inline-unit-growth</code>. The default is 10000. </dd>\n<dt><code>inline-unit-growth</code></dt>\n<dd>Specifies maximal overall growth of the compilation unit caused by inlining. The default value is 30 which limits unit growth to 1.3 times the original size. </dd>\n<dt><code>ipcp-unit-growth</code></dt>\n<dd>Specifies maximal overall growth of the compilation unit caused by interprocedural constant propagation. The default value is 10 which limits unit growth to 1.1 times the original size. </dd>\n<dt><code>large-stack-frame</code></dt>\n<dd>The limit specifying large stack frames. While inlining the algorithm is trying to not grow past this limit too much. The default value is 256 bytes. </dd>\n<dt><code>large-stack-frame-growth</code></dt>\n<dd>Specifies maximal growth of large stack frames caused by inlining in percents. The default value is 1000 which limits large stack frame growth to 11 times the original size. </dd>\n<dt>\n<code>max-inline-insns-recursive</code><dt><code>max-inline-insns-recursive-auto</code></dt>\n</dt>\n<dd>Specifies the maximum number of instructions an out-of-line copy of a self-recursive inline function can grow into by performing recursive inlining. <p>For functions declared inline, <code>--param max-inline-insns-recursive</code> is taken into account. For functions not declared inline, recursive inlining happens only when <code>-finline-functions</code> (included in <code>-O3</code>) is enabled and <code>--param max-inline-insns-recursive-auto</code> is used. The default value is 450. </p>\n</dd>\n<dt>\n<code>max-inline-recursive-depth</code><dt><code>max-inline-recursive-depth-auto</code></dt>\n</dt>\n<dd>Specifies the maximum recursion depth used for recursive inlining. <p>For functions declared inline, <code>--param max-inline-recursive-depth</code> is taken into account. For functions not declared inline, recursive inlining happens only when <code>-finline-functions</code> (included in <code>-O3</code>) is enabled and <code>--param max-inline-recursive-depth-auto</code> is used. The default value is 8. </p>\n</dd>\n<dt><code>min-inline-recursive-probability</code></dt>\n<dd>Recursive inlining is profitable only for function having deep recursion in average and can hurt for function having little recursion depth by increasing the prologue size or complexity of function body to other optimizers. <p>When profile feedback is available (see <code>-fprofile-generate</code>) the actual recursion depth can be guessed from probability that function recurses via a given call expression. This parameter limits inlining only to call expressions whose probability exceeds the given threshold (in percents). The default value is 10. </p>\n</dd>\n<dt><code>early-inlining-insns</code></dt>\n<dd>Specify growth that the early inliner can make. In effect it increases the amount of inlining for code having a large abstraction penalty. The default value is 10. </dd>\n<dt>\n<code>max-early-inliner-iterations</code><dt><code>max-early-inliner-iterations</code></dt>\n</dt>\n<dd>Limit of iterations of the early inliner. This basically bounds the number of nested indirect calls the early inliner can resolve. Deeper chains are still handled by late inlining. </dd>\n<dt>\n<code>comdat-sharing-probability</code><dt><code>comdat-sharing-probability</code></dt>\n</dt>\n<dd>Probability (in percent) that C++ inline function with comdat visibility are shared across multiple compilation units. The default value is 20. </dd>\n<dt><code>min-vect-loop-bound</code></dt>\n<dd>The minimum number of iterations under which loops are not vectorized when <code>-ftree-vectorize</code> is used. The number of iterations after vectorization needs to be greater than the value specified by this option to allow vectorization. The default value is 0. </dd>\n<dt><code>gcse-cost-distance-ratio</code></dt>\n<dd>Scaling factor in calculation of maximum distance an expression can be moved by GCSE optimizations. This is currently supported only in the code hoisting pass. The bigger the ratio, the more aggressive code hoisting is with simple expressions, i.e., the expressions that have cost less than <code>gcse-unrestricted-cost</code>. Specifying 0 disables hoisting of simple expressions. The default value is 10. </dd>\n<dt><code>gcse-unrestricted-cost</code></dt>\n<dd>Cost, roughly measured as the cost of a single typical machine instruction, at which GCSE optimizations do not constrain the distance an expression can travel. This is currently supported only in the code hoisting pass. The lesser the cost, the more aggressive code hoisting is. Specifying 0 allows all expressions to travel unrestricted distances. The default value is 3. </dd>\n<dt><code>max-hoist-depth</code></dt>\n<dd>The depth of search in the dominator tree for expressions to hoist. This is used to avoid quadratic behavior in hoisting algorithm. The value of 0 does not limit on the search, but may slow down compilation of huge functions. The default value is 30. </dd>\n<dt><code>max-tail-merge-comparisons</code></dt>\n<dd>The maximum amount of similar bbs to compare a bb with. This is used to avoid quadratic behavior in tree tail merging. The default value is 10. </dd>\n<dt><code>max-tail-merge-iterations</code></dt>\n<dd>The maximum amount of iterations of the pass over the function. This is used to limit compilation time in tree tail merging. The default value is 2. </dd>\n<dt><code>max-unrolled-insns</code></dt>\n<dd>The maximum number of instructions that a loop may have to be unrolled. If a loop is unrolled, this parameter also determines how many times the loop code is unrolled. </dd>\n<dt><code>max-average-unrolled-insns</code></dt>\n<dd>The maximum number of instructions biased by probabilities of their execution that a loop may have to be unrolled. If a loop is unrolled, this parameter also determines how many times the loop code is unrolled. </dd>\n<dt><code>max-unroll-times</code></dt>\n<dd>The maximum number of unrollings of a single loop. </dd>\n<dt><code>max-peeled-insns</code></dt>\n<dd>The maximum number of instructions that a loop may have to be peeled. If a loop is peeled, this parameter also determines how many times the loop code is peeled. </dd>\n<dt><code>max-peel-times</code></dt>\n<dd>The maximum number of peelings of a single loop. </dd>\n<dt><code>max-peel-branches</code></dt>\n<dd>The maximum number of branches on the hot path through the peeled sequence. </dd>\n<dt><code>max-completely-peeled-insns</code></dt>\n<dd>The maximum number of insns of a completely peeled loop. </dd>\n<dt><code>max-completely-peel-times</code></dt>\n<dd>The maximum number of iterations of a loop to be suitable for complete peeling. </dd>\n<dt><code>max-completely-peel-loop-nest-depth</code></dt>\n<dd>The maximum depth of a loop nest suitable for complete peeling. </dd>\n<dt><code>max-unswitch-insns</code></dt>\n<dd>The maximum number of insns of an unswitched loop. </dd>\n<dt><code>max-unswitch-level</code></dt>\n<dd>The maximum number of branches unswitched in a single loop. </dd>\n<dt><code>lim-expensive</code></dt>\n<dd>The minimum cost of an expensive expression in the loop invariant motion. </dd>\n<dt><code>iv-consider-all-candidates-bound</code></dt>\n<dd>Bound on number of candidates for induction variables, below which all candidates are considered for each use in induction variable optimizations. If there are more candidates than this, only the most relevant ones are considered to avoid quadratic time complexity. </dd>\n<dt><code>iv-max-considered-uses</code></dt>\n<dd>The induction variable optimizations give up on loops that contain more induction variable uses. </dd>\n<dt><code>iv-always-prune-cand-set-bound</code></dt>\n<dd>If the number of candidates in the set is smaller than this value, always try to remove unnecessary ivs from the set when adding a new one. </dd>\n<dt><code>scev-max-expr-size</code></dt>\n<dd>Bound on size of expressions used in the scalar evolutions analyzer. Large expressions slow the analyzer. </dd>\n<dt><code>scev-max-expr-complexity</code></dt>\n<dd>Bound on the complexity of the expressions in the scalar evolutions analyzer. Complex expressions slow the analyzer. </dd>\n<dt><code>omega-max-vars</code></dt>\n<dd>The maximum number of variables in an Omega constraint system. The default value is 128. </dd>\n<dt><code>omega-max-geqs</code></dt>\n<dd>The maximum number of inequalities in an Omega constraint system. The default value is 256. </dd>\n<dt><code>omega-max-eqs</code></dt>\n<dd>The maximum number of equalities in an Omega constraint system. The default value is 128. </dd>\n<dt><code>omega-max-wild-cards</code></dt>\n<dd>The maximum number of wildcard variables that the Omega solver is able to insert. The default value is 18. </dd>\n<dt><code>omega-hash-table-size</code></dt>\n<dd>The size of the hash table in the Omega solver. The default value is 550. </dd>\n<dt><code>omega-max-keys</code></dt>\n<dd>The maximal number of keys used by the Omega solver. The default value is 500. </dd>\n<dt><code>omega-eliminate-redundant-constraints</code></dt>\n<dd>When set to 1, use expensive methods to eliminate all redundant constraints. The default value is 0. </dd>\n<dt><code>vect-max-version-for-alignment-checks</code></dt>\n<dd>The maximum number of run-time checks that can be performed when doing loop versioning for alignment in the vectorizer. </dd>\n<dt><code>vect-max-version-for-alias-checks</code></dt>\n<dd>The maximum number of run-time checks that can be performed when doing loop versioning for alias in the vectorizer. </dd>\n<dt><code>vect-max-peeling-for-alignment</code></dt>\n<dd>The maximum number of loop peels to enhance access alignment for vectorizer. Value -1 means 'no limit'. </dd>\n<dt><code>max-iterations-to-track</code></dt>\n<dd>The maximum number of iterations of a loop the brute-force algorithm for analysis of the number of iterations of the loop tries to evaluate. </dd>\n<dt><code>hot-bb-count-ws-permille</code></dt>\n<dd>A basic block profile count is considered hot if it contributes to the given permillage (i.e. 0...1000) of the entire profiled execution. </dd>\n<dt><code>hot-bb-frequency-fraction</code></dt>\n<dd>Select fraction of the entry block frequency of executions of basic block in function given basic block needs to have to be considered hot. </dd>\n<dt><code>max-predicted-iterations</code></dt>\n<dd>The maximum number of loop iterations we predict statically. This is useful in cases where a function contains a single loop with known bound and another loop with unknown bound. The known number of iterations is predicted correctly, while the unknown number of iterations average to roughly 10. This means that the loop without bounds appears artificially cold relative to the other one. </dd>\n<dt><code>builtin-expect-probability</code></dt>\n<dd>Control the probability of the expression having the specified value. This parameter takes a percentage (i.e. 0 ... 100) as input. The default probability of 90 is obtained empirically. </dd>\n<dt><code>align-threshold</code></dt>\n<dd> Select fraction of the maximal frequency of executions of a basic block in a function to align the basic block. </dd>\n<dt><code>align-loop-iterations</code></dt>\n<dd> A loop expected to iterate at least the selected number of iterations is aligned. </dd>\n<dt>\n<code>tracer-dynamic-coverage</code><dt><code>tracer-dynamic-coverage-feedback</code></dt>\n</dt>\n<dd> This value is used to limit superblock formation once the given percentage of executed instructions is covered. This limits unnecessary code size expansion. <p>The <code>tracer-dynamic-coverage-feedback</code> is used only when profile feedback is available. The real profiles (as opposed to statically estimated ones) are much less balanced allowing the threshold to be larger value. </p>\n</dd>\n<dt><code>tracer-max-code-growth</code></dt>\n<dd>Stop tail duplication once code growth has reached given percentage. This is a rather artificial limit, as most of the duplicates are eliminated later in cross jumping, so it may be set to much higher values than is the desired code growth. </dd>\n<dt><code>tracer-min-branch-ratio</code></dt>\n<dd> Stop reverse growth when the reverse probability of best edge is less than this threshold (in percent). </dd>\n<dt>\n<code>tracer-min-branch-ratio</code><dt><code>tracer-min-branch-ratio-feedback</code></dt>\n</dt>\n<dd> Stop forward growth if the best edge has probability lower than this threshold. <p>Similarly to <code>tracer-dynamic-coverage</code> two values are present, one for compilation for profile feedback and one for compilation without. The value for compilation with profile feedback needs to be more conservative (higher) in order to make tracer effective. </p>\n</dd>\n<dt><code>max-cse-path-length</code></dt>\n<dd> The maximum number of basic blocks on path that CSE considers. The default is 10. </dd>\n<dt><code>max-cse-insns</code></dt>\n<dd>The maximum number of instructions CSE processes before flushing. The default is 1000. </dd>\n<dt><code>ggc-min-expand</code></dt>\n<dd> GCC uses a garbage collector to manage its own memory allocation. This parameter specifies the minimum percentage by which the garbage collector's heap should be allowed to expand between collections. Tuning this may improve compilation speed; it has no effect on code generation. <p>The default is 30% + 70% * (RAM/1GB) with an upper bound of 100% when RAM &gt;= 1GB. If <code>getrlimit</code> is available, the notion of “RAM” is the smallest of actual RAM and <code>RLIMIT_DATA</code> or <code>RLIMIT_AS</code>. If GCC is not able to calculate RAM on a particular platform, the lower bound of 30% is used. Setting this parameter and <code>ggc-min-heapsize</code> to zero causes a full collection to occur at every opportunity. This is extremely slow, but can be useful for debugging. </p>\n</dd>\n<dt><code>ggc-min-heapsize</code></dt>\n<dd> Minimum size of the garbage collector's heap before it begins bothering to collect garbage. The first collection occurs after the heap expands by <code>ggc-min-expand</code>% beyond <code>ggc-min-heapsize</code>. Again, tuning this may improve compilation speed, and has no effect on code generation. <p>The default is the smaller of RAM/8, RLIMIT_RSS, or a limit that tries to ensure that RLIMIT_DATA or RLIMIT_AS are not exceeded, but with a lower bound of 4096 (four megabytes) and an upper bound of 131072 (128 megabytes). If GCC is not able to calculate RAM on a particular platform, the lower bound is used. Setting this parameter very large effectively disables garbage collection. Setting this parameter and <code>ggc-min-expand</code> to zero causes a full collection to occur at every opportunity. </p>\n</dd>\n<dt><code>max-reload-search-insns</code></dt>\n<dd>The maximum number of instruction reload should look backward for equivalent register. Increasing values mean more aggressive optimization, making the compilation time increase with probably slightly better performance. The default value is 100. </dd>\n<dt><code>max-cselib-memory-locations</code></dt>\n<dd>The maximum number of memory locations cselib should take into account. Increasing values mean more aggressive optimization, making the compilation time increase with probably slightly better performance. The default value is 500. </dd>\n<dt>\n<code>reorder-blocks-duplicate</code><dt><code>reorder-blocks-duplicate-feedback</code></dt>\n</dt>\n<dd> Used by the basic block reordering pass to decide whether to use unconditional branch or duplicate the code on its destination. Code is duplicated when its estimated size is smaller than this value multiplied by the estimated size of unconditional jump in the hot spots of the program. <p>The <code>reorder-block-duplicate-feedback</code> is used only when profile feedback is available. It may be set to higher values than <code>reorder-block-duplicate</code> since information about the hot spots is more accurate. </p>\n</dd>\n<dt><code>max-sched-ready-insns</code></dt>\n<dd>The maximum number of instructions ready to be issued the scheduler should consider at any given time during the first scheduling pass. Increasing values mean more thorough searches, making the compilation time increase with probably little benefit. The default value is 100. </dd>\n<dt><code>max-sched-region-blocks</code></dt>\n<dd>The maximum number of blocks in a region to be considered for interblock scheduling. The default value is 10. </dd>\n<dt><code>max-pipeline-region-blocks</code></dt>\n<dd>The maximum number of blocks in a region to be considered for pipelining in the selective scheduler. The default value is 15. </dd>\n<dt><code>max-sched-region-insns</code></dt>\n<dd>The maximum number of insns in a region to be considered for interblock scheduling. The default value is 100. </dd>\n<dt><code>max-pipeline-region-insns</code></dt>\n<dd>The maximum number of insns in a region to be considered for pipelining in the selective scheduler. The default value is 200. </dd>\n<dt><code>min-spec-prob</code></dt>\n<dd>The minimum probability (in percents) of reaching a source block for interblock speculative scheduling. The default value is 40. </dd>\n<dt><code>max-sched-extend-regions-iters</code></dt>\n<dd>The maximum number of iterations through CFG to extend regions. A value of 0 (the default) disables region extensions. </dd>\n<dt><code>max-sched-insn-conflict-delay</code></dt>\n<dd>The maximum conflict delay for an insn to be considered for speculative motion. The default value is 3. </dd>\n<dt><code>sched-spec-prob-cutoff</code></dt>\n<dd>The minimal probability of speculation success (in percents), so that speculative insns are scheduled. The default value is 40. </dd>\n<dt><code>sched-spec-state-edge-prob-cutoff</code></dt>\n<dd>The minimum probability an edge must have for the scheduler to save its state across it. The default value is 10. </dd>\n<dt><code>sched-mem-true-dep-cost</code></dt>\n<dd>Minimal distance (in CPU cycles) between store and load targeting same memory locations. The default value is 1. </dd>\n<dt><code>selsched-max-lookahead</code></dt>\n<dd>The maximum size of the lookahead window of selective scheduling. It is a depth of search for available instructions. The default value is 50. </dd>\n<dt><code>selsched-max-sched-times</code></dt>\n<dd>The maximum number of times that an instruction is scheduled during selective scheduling. This is the limit on the number of iterations through which the instruction may be pipelined. The default value is 2. </dd>\n<dt><code>selsched-max-insns-to-rename</code></dt>\n<dd>The maximum number of best instructions in the ready list that are considered for renaming in the selective scheduler. The default value is 2. </dd>\n<dt><code>sms-min-sc</code></dt>\n<dd>The minimum value of stage count that swing modulo scheduler generates. The default value is 2. </dd>\n<dt><code>max-last-value-rtl</code></dt>\n<dd>The maximum size measured as number of RTLs that can be recorded in an expression in combiner for a pseudo register as last known value of that register. The default is 10000. </dd>\n<dt><code>integer-share-limit</code></dt>\n<dd>Small integer constants can use a shared data structure, reducing the compiler's memory usage and increasing its speed. This sets the maximum value of a shared integer constant. The default value is 256. </dd>\n<dt><code>ssp-buffer-size</code></dt>\n<dd>The minimum size of buffers (i.e. arrays) that receive stack smashing protection when <code>-fstack-protection</code> is used. </dd>\n<dt><code>min-size-for-stack-sharing</code></dt>\n<dd>The minimum size of variables taking part in stack slot sharing when not optimizing. The default value is 32. </dd>\n<dt><code>max-jump-thread-duplication-stmts</code></dt>\n<dd>Maximum number of statements allowed in a block that needs to be duplicated when threading jumps. </dd>\n<dt><code>max-fields-for-field-sensitive</code></dt>\n<dd>Maximum number of fields in a structure treated in a field sensitive manner during pointer analysis. The default is zero for <code>-O0</code> and <code>-O1</code>, and 100 for <code>-Os</code>, <code>-O2</code>, and <code>-O3</code>. </dd>\n<dt><code>prefetch-latency</code></dt>\n<dd>Estimate on average number of instructions that are executed before prefetch finishes. The distance prefetched ahead is proportional to this constant. Increasing this number may also lead to less streams being prefetched (see <code>simultaneous-prefetches</code>). </dd>\n<dt><code>simultaneous-prefetches</code></dt>\n<dd>Maximum number of prefetches that can run at the same time. </dd>\n<dt><code>l1-cache-line-size</code></dt>\n<dd>The size of cache line in L1 cache, in bytes. </dd>\n<dt><code>l1-cache-size</code></dt>\n<dd>The size of L1 cache, in kilobytes. </dd>\n<dt><code>l2-cache-size</code></dt>\n<dd>The size of L2 cache, in kilobytes. </dd>\n<dt><code>min-insn-to-prefetch-ratio</code></dt>\n<dd>The minimum ratio between the number of instructions and the number of prefetches to enable prefetching in a loop. </dd>\n<dt><code>prefetch-min-insn-to-mem-ratio</code></dt>\n<dd>The minimum ratio between the number of instructions and the number of memory references to enable prefetching in a loop. </dd>\n<dt><code>use-canonical-types</code></dt>\n<dd>Whether the compiler should use the “canonical” type system. By default, this should always be 1, which uses a more efficient internal mechanism for comparing types in C++ and Objective-C++. However, if bugs in the canonical type system are causing compilation failures, set this value to 0 to disable canonical types. </dd>\n<dt><code>switch-conversion-max-branch-ratio</code></dt>\n<dd>Switch initialization conversion refuses to create arrays that are bigger than <code>switch-conversion-max-branch-ratio</code> times the number of branches in the switch. </dd>\n<dt><code>max-partial-antic-length</code></dt>\n<dd>Maximum length of the partial antic set computed during the tree partial redundancy elimination optimization (<code>-ftree-pre</code>) when optimizing at <code>-O3</code> and above. For some sorts of source code the enhanced partial redundancy elimination optimization can run away, consuming all of the memory available on the host machine. This parameter sets a limit on the length of the sets that are computed, which prevents the runaway behavior. Setting a value of 0 for this parameter allows an unlimited set length. </dd>\n<dt><code>sccvn-max-scc-size</code></dt>\n<dd>Maximum size of a strongly connected component (SCC) during SCCVN processing. If this limit is hit, SCCVN processing for the whole function is not done and optimizations depending on it are disabled. The default maximum SCC size is 10000. </dd>\n<dt><code>sccvn-max-alias-queries-per-access</code></dt>\n<dd>Maximum number of alias-oracle queries we perform when looking for redundancies for loads and stores. If this limit is hit the search is aborted and the load or store is not considered redundant. The number of queries is algorithmically limited to the number of stores on all paths from the load to the function entry. The default maxmimum number of queries is 1000. </dd>\n<dt><code>ira-max-loops-num</code></dt>\n<dd>IRA uses regional register allocation by default. If a function contains more loops than the number given by this parameter, only at most the given number of the most frequently-executed loops form regions for regional register allocation. The default value of the parameter is 100. </dd>\n<dt><code>ira-max-conflict-table-size</code></dt>\n<dd>Although IRA uses a sophisticated algorithm to compress the conflict table, the table can still require excessive amounts of memory for huge functions. If the conflict table for a function could be more than the size in MB given by this parameter, the register allocator instead uses a faster, simpler, and lower-quality algorithm that does not require building a pseudo-register conflict table. The default value of the parameter is 2000. </dd>\n<dt><code>ira-loop-reserved-regs</code></dt>\n<dd>IRA can be used to evaluate more accurate register pressure in loops for decisions to move loop invariants (see <code>-O3</code>). The number of available registers reserved for some other purposes is given by this parameter. The default value of the parameter is 2, which is the minimal number of registers needed by typical instructions. This value is the best found from numerous experiments. </dd>\n<dt><code>loop-invariant-max-bbs-in-loop</code></dt>\n<dd>Loop invariant motion can be very expensive, both in compilation time and in amount of needed compile-time memory, with very large loops. Loops with more basic blocks than this parameter won't have loop invariant motion optimization performed on them. The default value of the parameter is 1000 for <code>-O1</code> and 10000 for <code>-O2</code> and above. </dd>\n<dt><code>loop-max-datarefs-for-datadeps</code></dt>\n<dd>Building data dapendencies is expensive for very large loops. This parameter limits the number of data references in loops that are considered for data dependence analysis. These large loops are no handled by the optimizations using loop data dependencies. The default value is 1000. </dd>\n<dt><code>max-vartrack-size</code></dt>\n<dd>Sets a maximum number of hash table slots to use during variable tracking dataflow analysis of any function. If this limit is exceeded with variable tracking at assignments enabled, analysis for that function is retried without it, after removing all debug insns from the function. If the limit is exceeded even without debug insns, var tracking analysis is completely disabled for the function. Setting the parameter to zero makes it unlimited. </dd>\n<dt><code>max-vartrack-expr-depth</code></dt>\n<dd>Sets a maximum number of recursion levels when attempting to map variable names or debug temporaries to value expressions. This trades compilation time for more complete debug information. If this is set too low, value expressions that are available and could be represented in debug information may end up not being used; setting this higher may enable the compiler to find more complex debug expressions, but compile time and memory use may grow. The default is 12. </dd>\n<dt><code>min-nondebug-insn-uid</code></dt>\n<dd>Use uids starting at this parameter for nondebug insns. The range below the parameter is reserved exclusively for debug insns created by <code>-fvar-tracking-assignments</code>, but debug insns may get (non-overlapping) uids above it if the reserved range is exhausted. </dd>\n<dt><code>ipa-sra-ptr-growth-factor</code></dt>\n<dd>IPA-SRA replaces a pointer to an aggregate with one or more new parameters only when their cumulative size is less or equal to <code>ipa-sra-ptr-growth-factor</code> times the size of the original pointer parameter. </dd>\n<dt><code>tm-max-aggregate-size</code></dt>\n<dd>When making copies of thread-local variables in a transaction, this parameter specifies the size in bytes after which variables are saved with the logging functions as opposed to save/restore code sequence pairs. This option only applies when using <code>-fgnu-tm</code>. </dd>\n<dt><code>graphite-max-nb-scop-params</code></dt>\n<dd>To avoid exponential effects in the Graphite loop transforms, the number of parameters in a Static Control Part (SCoP) is bounded. The default value is 10 parameters. A variable whose value is unknown at compilation time and defined outside a SCoP is a parameter of the SCoP. </dd>\n<dt><code>graphite-max-bbs-per-function</code></dt>\n<dd>To avoid exponential effects in the detection of SCoPs, the size of the functions analyzed by Graphite is bounded. The default value is 100 basic blocks. </dd>\n<dt><code>loop-block-tile-size</code></dt>\n<dd>Loop blocking or strip mining transforms, enabled with <code>-floop-block</code> or <code>-floop-strip-mine</code>, strip mine each loop in the loop nest by a given number of iterations. The strip length can be changed using the <code>loop-block-tile-size</code> parameter. The default value is 51 iterations. </dd>\n<dt><code>ipa-cp-value-list-size</code></dt>\n<dd>IPA-CP attempts to track all possible values and types passed to a function's parameter in order to propagate them and perform devirtualization. <code>ipa-cp-value-list-size</code> is the maximum number of values and types it stores per one formal parameter of a function. </dd>\n<dt><code>ipa-cp-eval-threshold</code></dt>\n<dd>IPA-CP calculates its own score of cloning profitability heuristics and performs those cloning opportunities with scores that exceed <code>ipa-cp-eval-threshold</code>. </dd>\n<dt><code>ipa-max-agg-items</code></dt>\n<dd>IPA-CP is also capable to propagate a number of scalar values passed in an aggregate. <code>ipa-max-agg-items</code> controls the maximum number of such values per one parameter. </dd>\n<dt><code>ipa-cp-loop-hint-bonus</code></dt>\n<dd>When IPA-CP determines that a cloning candidate would make the number of iterations of a loop known, it adds a bonus of <code>ipa-cp-loop-hint-bonus</code> bonus to the profitability score of the candidate. </dd>\n<dt><code>ipa-cp-array-index-hint-bonus</code></dt>\n<dd>When IPA-CP determines that a cloning candidate would make the index of an array access known, it adds a bonus of <code>ipa-cp-array-index-hint-bonus</code> bonus to the profitability score of the candidate. </dd>\n<dt><code>lto-partitions</code></dt>\n<dd>Specify desired number of partitions produced during WHOPR compilation. The number of partitions should exceed the number of CPUs used for compilation. The default value is 32. </dd>\n<dt><code>lto-minpartition</code></dt>\n<dd>Size of minimal partition for WHOPR (in estimated instructions). This prevents expenses of splitting very small programs into too many partitions. </dd>\n<dt><code>cxx-max-namespaces-for-diagnostic-help</code></dt>\n<dd>The maximum number of namespaces to consult for suggestions when C++ name lookup fails for an identifier. The default is 1000. </dd>\n<dt><code>sink-frequency-threshold</code></dt>\n<dd>The maximum relative execution frequency (in percents) of the target block relative to a statement's original block to allow statement sinking of a statement. Larger numbers result in more aggressive statement sinking. The default value is 75. A small positive adjustment is applied for statements with memory operands as those are even more profitable so sink. </dd>\n<dt><code>max-stores-to-sink</code></dt>\n<dd>The maximum number of conditional stores paires that can be sunk. Set to 0 if either vectorization (<code>-ftree-vectorize</code>) or if-conversion (<code>-ftree-loop-if-convert</code>) is disabled. The default is 2. </dd>\n<dt><code>allow-load-data-races</code></dt>\n<dd>Allow optimizers to introduce new data races on loads. Set to 1 to allow, otherwise to 0. This option is enabled by default unless implicitly set by the <code>-fmemory-model=</code> option. </dd>\n<dt><code>allow-store-data-races</code></dt>\n<dd>Allow optimizers to introduce new data races on stores. Set to 1 to allow, otherwise to 0. This option is enabled by default unless implicitly set by the <code>-fmemory-model=</code> option. </dd>\n<dt><code>allow-packed-load-data-races</code></dt>\n<dd>Allow optimizers to introduce new data races on packed data loads. Set to 1 to allow, otherwise to 0. This option is enabled by default unless implicitly set by the <code>-fmemory-model=</code> option. </dd>\n<dt><code>allow-packed-store-data-races</code></dt>\n<dd>Allow optimizers to introduce new data races on packed data stores. Set to 1 to allow, otherwise to 0. This option is enabled by default unless implicitly set by the <code>-fmemory-model=</code> option. </dd>\n<dt><code>case-values-threshold</code></dt>\n<dd>The smallest number of different values for which it is best to use a jump-table instead of a tree of conditional branches. If the value is 0, use the default for the machine. The default is 0. </dd>\n<dt><code>tree-reassoc-width</code></dt>\n<dd>Set the maximum number of instructions executed in parallel in reassociated tree. This parameter overrides target dependent heuristics used by default if has non zero value. </dd>\n<dt><code>sched-pressure-algorithm</code></dt>\n<dd>Choose between the two available implementations of <code>-fsched-pressure</code>. Algorithm 1 is the original implementation and is the more likely to prevent instructions from being reordered. Algorithm 2 was designed to be a compromise between the relatively conservative approach taken by algorithm 1 and the rather aggressive approach taken by the default scheduler. It relies more heavily on having a regular register file and accurate register pressure classes. See <code>haifa-sched.c</code> in the GCC sources for more details. <p>The default choice depends on the target. </p>\n</dd>\n<dt><code>max-slsr-cand-scan</code></dt>\n<dd>Set the maximum number of existing candidates that will be considered when seeking a basis for a new straight-line strength reduction candidate. </dd>\n<dt><code>asan-globals</code></dt>\n<dd>Enable buffer overflow detection for global objects. This kind of protection is enabled by default if you are using <code>-fsanitize=address</code> option. To disable global objects protection use <code>--param asan-globals=0</code>. </dd>\n<dt><code>asan-stack</code></dt>\n<dd>Enable buffer overflow detection for stack objects. This kind of protection is enabled by default when using<code>-fsanitize=address</code>. To disable stack protection use <code>--param asan-stack=0</code> option. </dd>\n<dt><code>asan-instrument-reads</code></dt>\n<dd>Enable buffer overflow detection for memory reads. This kind of protection is enabled by default when using <code>-fsanitize=address</code>. To disable memory reads protection use <code>--param asan-instrument-reads=0</code>. </dd>\n<dt><code>asan-instrument-writes</code></dt>\n<dd>Enable buffer overflow detection for memory writes. This kind of protection is enabled by default when using <code>-fsanitize=address</code>. To disable memory writes protection use <code>--param asan-instrument-writes=0</code> option. </dd>\n<dt><code>asan-memintrin</code></dt>\n<dd>Enable detection for built-in functions. This kind of protection is enabled by default when using <code>-fsanitize=address</code>. To disable built-in functions protection use <code>--param asan-memintrin=0</code>. </dd>\n<dt><code>asan-use-after-return</code></dt>\n<dd>Enable detection of use-after-return. This kind of protection is enabled by default when using <code>-fsanitize=address</code> option. To disable use-after-return detection use <code>--param asan-use-after-return=0</code>. </dd>\n<dt><code>asan-instrumentation-with-call-threshold</code></dt>\n<dd>If number of memory accesses in function being instrumented is greater or equal to this number, use callbacks instead of inline checks. E.g. to disable inline code use <code>--param asan-instrumentation-with-call-threshold=0</code>. </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Optimize-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Optimize-Options.html</a>\n  </p>\n</div>\n","preprocessor-options":"<h1 class=\"section\" id=\"Preprocessor-Options\">3.11 Options Controlling the Preprocessor</h1> <p> These options control the C preprocessor, which is run on each C source file before actual compilation. </p>\n<p>If you use the <code>-E</code> option, nothing is done except preprocessing. Some of these options make sense only together with <code>-E</code> because they cause the preprocessor output to be unsuitable for actual compilation. </p>\n<dl> <dt>\n<code>-Wp,</code><var>option</var>\n</dt>\n<dd>\nYou can use <samp><span class=\"option\">-Wp,</span><var>option</var></samp> to bypass the compiler driver and pass <var>option</var> directly through to the preprocessor. If <var>option</var> contains commas, it is split into multiple options at the commas. However, many options are modified, translated or interpreted by the compiler driver before being passed to the preprocessor, and <code>-Wp</code> forcibly bypasses this phase. The preprocessor's direct interface is undocumented and subject to change, so whenever possible you should avoid using <code>-Wp</code> and let the driver handle the options instead. </dd>\n<dt>\n<code>-Xpreprocessor </code><var>option</var>\n</dt>\n<dd>\nPass <var>option</var> as an option to the preprocessor. You can use this to supply system-specific preprocessor options that GCC does not recognize. <p>If you want to pass an option that takes an argument, you must use <code>-Xpreprocessor</code> twice, once for the option and once for the argument. </p>\n</dd>\n<dt><code>-no-integrated-cpp</code></dt>\n<dd>\nPerform preprocessing as a separate pass before compilation. By default, GCC performs preprocessing as an integrated part of input tokenization and parsing. If this option is provided, the appropriate language front end (<code>cc1</code>, <code>cc1plus</code>, or <code>cc1obj</code> for C, C++, and Objective-C, respectively) is instead invoked twice, once for preprocessing only and once for actual compilation of the preprocessed input. This option may be useful in conjunction with the <code>-B</code> or <code>-wrapper</code> options to specify an alternate preprocessor or perform additional processing of the program source between normal preprocessing and compilation. </dd>\n</dl>         <dl> <dt>\n<code>-D </code><var>name</var>\n</dt>\n<dd>\nPredefine <var>name</var> as a macro, with definition <code>1</code>. </dd>\n<dt>\n<code>-D </code><var>name</var><code>=</code><var>definition</var>\n</dt>\n<dd>The contents of <var>definition</var> are tokenized and processed as if they appeared during translation phase three in a ‘<code>#define</code>’ directive. In particular, the definition will be truncated by embedded newline characters. <p>If you are invoking the preprocessor from a shell or shell-like program you may need to use the shell's quoting syntax to protect characters such as spaces that have a meaning in the shell syntax. </p>\n<p>If you wish to define a function-like macro on the command line, write its argument list with surrounding parentheses before the equals sign (if any). Parentheses are meaningful to most shells, so you will need to quote the option. With <code>sh</code> and <code>csh</code>, <samp><span class=\"option\">-D'</span><var>name</var><span class=\"option\">(</span><var>args<small class=\"dots\">...</small></var><span class=\"option\">)=</span><var>definition</var><span class=\"option\">'</span></samp> works. </p>\n<p><code>-D</code> and <code>-U</code> options are processed in the order they are given on the command line. All <samp><span class=\"option\">-imacros </span><var>file</var></samp> and <samp><span class=\"option\">-include </span><var>file</var></samp> options are processed after all <code>-D</code> and <code>-U</code> options. </p>\n</dd>\n<dt>\n<code>-U </code><var>name</var>\n</dt>\n<dd>\nCancel any previous definition of <var>name</var>, either built in or provided with a <code>-D</code> option. </dd>\n<dt><code>-undef</code></dt>\n<dd>\nDo not predefine any system-specific or GCC-specific macros. The standard predefined macros remain defined. </dd>\n<dt>\n<code>-I </code><var>dir</var>\n</dt>\n<dd>\nAdd the directory <var>dir</var> to the list of directories to be searched for header files. Directories named by <code>-I</code> are searched before the standard system include directories. If the directory <var>dir</var> is a standard system include directory, the option is ignored to ensure that the default search order for system directories and the special treatment of system headers are not defeated . If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt>\n<code>-o </code><var>file</var>\n</dt>\n<dd>\nWrite output to <var>file</var>. This is the same as specifying <var>file</var> as the second non-option argument to <code>cpp</code>. <code>gcc</code> has a different interpretation of a second non-option argument, so you must use <code>-o</code> to specify the output file. </dd>\n<dt><code>-Wall</code></dt>\n<dd>\nTurns on all optional warnings which are desirable for normal code. At present this is <code>-Wcomment</code>, <code>-Wtrigraphs</code>, <code>-Wmultichar</code> and a warning about integer promotion causing a change of sign in <code>#if</code> expressions. Note that many of the preprocessor's warnings are on by default and have no options to control them. </dd>\n<dt>\n<code>-Wcomment</code><dt><code>-Wcomments</code></dt>\n</dt>\n<dd>\nWarn whenever a comment-start sequence ‘<code>/*</code>’ appears in a ‘<code>/*</code>’ comment, or whenever a backslash-newline appears in a ‘<code>//</code>’ comment. (Both forms have the same effect.) </dd>\n<dt><code>-Wtrigraphs</code></dt>\n<dd>\nMost trigraphs in comments cannot affect the meaning of the program. However, a trigraph that would form an escaped newline (‘<code>??/</code>’ at the end of a line) can, by changing where the comment begins or ends. Therefore, only trigraphs that would form escaped newlines produce warnings inside a comment. <p>This option is implied by <code>-Wall</code>. If <code>-Wall</code> is not given, this option is still enabled unless trigraphs are enabled. To get trigraph conversion without warnings, but get the other <code>-Wall</code> warnings, use ‘<code>-trigraphs -Wall -Wno-trigraphs</code>’. </p>\n</dd>\n<dt><code>-Wtraditional</code></dt>\n<dd>\nWarn about certain constructs that behave differently in traditional and ISO C. Also warn about ISO C constructs that have no traditional C equivalent, and problematic constructs which should be avoided. </dd>\n<dt><code>-Wundef</code></dt>\n<dd>\nWarn whenever an identifier which is not a macro is encountered in an ‘<code>#if</code>’ directive, outside of ‘<code>defined</code>’. Such identifiers are replaced with zero. </dd>\n<dt><code>-Wunused-macros</code></dt>\n<dd>\nWarn about macros defined in the main file that are unused. A macro is used if it is expanded or tested for existence at least once. The preprocessor will also warn if the macro has not been used at the time it is redefined or undefined. <p>Built-in macros, macros defined on the command line, and macros defined in include files are not warned about. </p>\n<p><em>Note:</em> If a macro is actually used, but only used in skipped conditional blocks, then CPP will report it as unused. To avoid the warning in such a case, you might improve the scope of the macro's definition by, for example, moving it into the first skipped block. Alternatively, you could provide a dummy use with something like: </p>\n<pre class=\"smallexample\">#if defined the_macro_causing_the_warning\n#endif</pre> </dd>\n<dt><code>-Wendif-labels</code></dt>\n<dd>\nWarn whenever an ‘<code>#else</code>’ or an ‘<code>#endif</code>’ are followed by text. This usually happens in code of the form <pre class=\"smallexample\">#if FOO\n...\n#else FOO\n...\n#endif FOO</pre> <p class=\"noindent\">The second and third <code>FOO</code> should be in comments, but often are not in older programs. This warning is on by default. </p>\n</dd>\n<dt><code>-Werror</code></dt>\n<dd>\nMake all warnings into hard errors. Source code which triggers warnings will be rejected. </dd>\n<dt><code>-Wsystem-headers</code></dt>\n<dd>\nIssue warnings for code in system headers. These are normally unhelpful in finding bugs in your own code, therefore suppressed. If you are responsible for the system library, you may want to see them. </dd>\n<dt><code>-w</code></dt>\n<dd>\nSuppress all warnings, including those which GNU CPP issues by default. </dd>\n<dt><code>-pedantic</code></dt>\n<dd>\nIssue all the mandatory diagnostics listed in the C standard. Some of them are left out by default, since they trigger frequently on harmless code. </dd>\n<dt><code>-pedantic-errors</code></dt>\n<dd>\nIssue all the mandatory diagnostics, and make all mandatory diagnostics into errors. This includes mandatory diagnostics that GCC issues without ‘<code>-pedantic</code>’ but treats as warnings. </dd>\n<dt><code>-M</code></dt>\n<dd>\nInstead of outputting the result of preprocessing, output a rule suitable for <code>make</code> describing the dependencies of the main source file. The preprocessor outputs one <code>make</code> rule containing the object file name for that source file, a colon, and the names of all the included files, including those coming from <code>-include</code> or <code>-imacros</code> command line options. <p>Unless specified explicitly (with <code>-MT</code> or <code>-MQ</code>), the object file name consists of the name of the source file with any suffix replaced with object file suffix and with any leading directory parts removed. If there are many included files then the rule is split into several lines using ‘<code>\\</code>’-newline. The rule has no commands. </p>\n<p>This option does not suppress the preprocessor's debug output, such as <code>-dM</code>. To avoid mixing such debug output with the dependency rules you should explicitly specify the dependency output file with <code>-MF</code>, or use an environment variable like <code>DEPENDENCIES_OUTPUT</code> (see <a href=\"environment-variables#Environment-Variables\">Environment Variables</a>). Debug output will still be sent to the regular output stream as normal. </p>\n<p>Passing <code>-M</code> to the driver implies <code>-E</code>, and suppresses warnings with an implicit <code>-w</code>. </p>\n</dd>\n<dt><code>-MM</code></dt>\n<dd>\nLike <code>-M</code> but do not mention header files that are found in system header directories, nor header files that are included, directly or indirectly, from such a header. <p>This implies that the choice of angle brackets or double quotes in an ‘<code>#include</code>’ directive does not in itself determine whether that header will appear in <code>-MM</code> dependency output. This is a slight change in semantics from GCC versions 3.0 and earlier. </p>\n\n</dd>\n<dt>\n<code>-MF </code><var>file</var>\n</dt>\n<dd>\nWhen used with <code>-M</code> or <code>-MM</code>, specifies a file to write the dependencies to. If no <code>-MF</code> switch is given the preprocessor sends the rules to the same place it would have sent preprocessed output. <p>When used with the driver options <code>-MD</code> or <code>-MMD</code>, <code>-MF</code> overrides the default dependency output file. </p>\n</dd>\n<dt><code>-MG</code></dt>\n<dd>\nIn conjunction with an option such as <code>-M</code> requesting dependency generation, <code>-MG</code> assumes missing header files are generated files and adds them to the dependency list without raising an error. The dependency filename is taken directly from the <code>#include</code> directive without prepending any path. <code>-MG</code> also suppresses preprocessed output, as a missing header file renders this useless. <p>This feature is used in automatic updating of makefiles. </p>\n</dd>\n<dt><code>-MP</code></dt>\n<dd>\nThis option instructs CPP to add a phony target for each dependency other than the main file, causing each to depend on nothing. These dummy rules work around errors <code>make</code> gives if you remove header files without updating the <code>Makefile</code> to match. <p>This is typical output: </p>\n<pre class=\"smallexample\">test.o: test.c test.h\n\ntest.h:</pre> </dd>\n<dt>\n<code>-MT </code><var>target</var>\n</dt>\n<dd>\n Change the target of the rule emitted by dependency generation. By default CPP takes the name of the main input file, deletes any directory components and any file suffix such as ‘<code>.c</code>’, and appends the platform's usual object suffix. The result is the target. <p>An <code>-MT</code> option will set the target to be exactly the string you specify. If you want multiple targets, you can specify them as a single argument to <code>-MT</code>, or use multiple <code>-MT</code> options. </p>\n<p>For example, <code>-MT '$(objpfx)foo.o'</code> might give </p>\n<pre class=\"smallexample\">$(objpfx)foo.o: foo.c</pre> </dd>\n<dt>\n<code>-MQ </code><var>target</var>\n</dt>\n<dd>\n Same as <code>-MT</code>, but it quotes any characters which are special to Make. <code>-MQ '$(objpfx)foo.o'</code> gives <pre class=\"smallexample\">$$(objpfx)foo.o: foo.c</pre> <p>The default target is automatically quoted, as if it were given with <code>-MQ</code>. </p>\n</dd>\n<dt><code>-MD</code></dt>\n<dd>\n<code>-MD</code> is equivalent to <samp><span class=\"option\">-M -MF </span><var>file</var></samp>, except that <code>-E</code> is not implied. The driver determines <var>file</var> based on whether an <code>-o</code> option is given. If it is, the driver uses its argument but with a suffix of <code>.d</code>, otherwise it takes the name of the input file, removes any directory components and suffix, and applies a <code>.d</code> suffix. <p>If <code>-MD</code> is used in conjunction with <code>-E</code>, any <code>-o</code> switch is understood to specify the dependency output file (see <a href=\"preprocessor-options#dashMF\">-MF</a>), but if used without <code>-E</code>, each <code>-o</code> is understood to specify a target object file. </p>\n<p>Since <code>-E</code> is not implied, <code>-MD</code> can be used to generate a dependency output file as a side-effect of the compilation process. </p>\n</dd>\n<dt><code>-MMD</code></dt>\n<dd>\nLike <code>-MD</code> except mention only user header files, not system header files. </dd>\n<dt><code>-fpch-deps</code></dt>\n<dd>\nWhen using precompiled headers (see <a href=\"precompiled-headers#Precompiled-Headers\">Precompiled Headers</a>), this flag will cause the dependency-output flags to also list the files from the precompiled header's dependencies. If not specified only the precompiled header would be listed and not the files that were used to create it because those files are not consulted when a precompiled header is used. </dd>\n<dt><code>-fpch-preprocess</code></dt>\n<dd>\nThis option allows use of a precompiled header (see <a href=\"precompiled-headers#Precompiled-Headers\">Precompiled Headers</a>) together with <code>-E</code>. It inserts a special <code>#pragma</code>, <code>#pragma GCC pch_preprocess \"</code><var>filename</var><code>\"</code> in the output to mark the place where the precompiled header was found, and its <var>filename</var>. When <code>-fpreprocessed</code> is in use, GCC recognizes this <code>#pragma</code> and loads the PCH. <p>This option is off by default, because the resulting preprocessed output is only really suitable as input to GCC. It is switched on by <code>-save-temps</code>. </p>\n<p>You should not write this <code>#pragma</code> in your own code, but it is safe to edit the filename if the PCH file is available in a different location. The filename may be absolute or it may be relative to GCC's current directory. </p>\n</dd>\n<dt>\n<code>-x c</code><dt>\n<code>-x c++</code><dt>\n<code>-x objective-c</code><dt><code>-x assembler-with-cpp</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>\nSpecify the source language: C, C++, Objective-C, or assembly. This has nothing to do with standards conformance or extensions; it merely selects which base syntax to expect. If you give none of these options, cpp will deduce the language from the extension of the source file: ‘<code>.c</code>’, ‘<code>.cc</code>’, ‘<code>.m</code>’, or ‘<code>.S</code>’. Some other common extensions for C++ and assembly are also recognized. If cpp does not recognize the extension, it will treat the file as C; this is the most generic mode. <p><em>Note:</em> Previous versions of cpp accepted a <code>-lang</code> option which selected both the language and the standards conformance level. This option has been removed, because it conflicts with the <code>-l</code> option. </p>\n</dd>\n<dt>\n<code>-std=</code><var>standard</var><dt><code>-ansi</code></dt>\n</dt>\n<dd>\nSpecify the standard to which the code should conform. Currently CPP knows about C and C++ standards; others may be added in the future. <p><var>standard</var> may be one of: </p>\n<dl> <dt>\n<code>c90</code><dt>\n<code>c89</code><dt><code>iso9899:1990</code></dt>\n</dt>\n</dt>\n<dd>The ISO C standard from 1990. ‘<code>c90</code>’ is the customary shorthand for this version of the standard. <p>The <code>-ansi</code> option is equivalent to <code>-std=c90</code>. </p>\n</dd>\n<dt><code>iso9899:199409</code></dt>\n<dd>The 1990 C standard, as amended in 1994. </dd>\n<dt>\n<code>iso9899:1999</code><dt>\n<code>c99</code><dt>\n<code>iso9899:199x</code><dt><code>c9x</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>The revised ISO C standard, published in December 1999. Before publication, this was known as C9X. </dd>\n<dt>\n<code>iso9899:2011</code><dt>\n<code>c11</code><dt><code>c1x</code></dt>\n</dt>\n</dt>\n<dd>The revised ISO C standard, published in December 2011. Before publication, this was known as C1X. </dd>\n<dt>\n<code>gnu90</code><dt><code>gnu89</code></dt>\n</dt>\n<dd>The 1990 C standard plus GNU extensions. This is the default. </dd>\n<dt>\n<code>gnu99</code><dt><code>gnu9x</code></dt>\n</dt>\n<dd>The 1999 C standard plus GNU extensions. </dd>\n<dt>\n<code>gnu11</code><dt><code>gnu1x</code></dt>\n</dt>\n<dd>The 2011 C standard plus GNU extensions. </dd>\n<dt><code>c++98</code></dt>\n<dd>The 1998 ISO C++ standard plus amendments. </dd>\n<dt><code>gnu++98</code></dt>\n<dd>The same as <code>-std=c++98</code> plus GNU extensions. This is the default for C++ code. </dd>\n</dl> </dd>\n<dt><code>-I-</code></dt>\n<dd>\nSplit the include path. Any directories specified with <code>-I</code> options before <code>-I-</code> are searched only for headers requested with <code>#include \"</code><var>file</var><code>\"</code>; they are not searched for <code>#include &lt;</code><var>file</var><code>&gt;</code>. If additional directories are specified with <code>-I</code> options after the <code>-I-</code>, those directories are searched for all ‘<code>#include</code>’ directives. <p>In addition, <code>-I-</code> inhibits the use of the directory of the current file directory as the first search directory for <code>#include \"</code><var>file</var><code>\"</code>. This option has been deprecated. </p>\n</dd>\n<dt><code>-nostdinc</code></dt>\n<dd>\nDo not search the standard system directories for header files. Only the directories you have specified with <code>-I</code> options (and the directory of the current file, if appropriate) are searched. </dd>\n<dt><code>-nostdinc++</code></dt>\n<dd>\nDo not search for header files in the C++-specific standard directories, but do still search the other standard directories. (This option is used when building the C++ library.) </dd>\n<dt>\n<code>-include </code><var>file</var>\n</dt>\n<dd>\nProcess <var>file</var> as if <code>#include \"file\"</code> appeared as the first line of the primary source file. However, the first directory searched for <var>file</var> is the preprocessor's working directory <em>instead of</em> the directory containing the main source file. If not found there, it is searched for in the remainder of the <code>#include \"...\"</code> search chain as normal. <p>If multiple <code>-include</code> options are given, the files are included in the order they appear on the command line. </p>\n</dd>\n<dt>\n<code>-imacros </code><var>file</var>\n</dt>\n<dd>\nExactly like <code>-include</code>, except that any output produced by scanning <var>file</var> is thrown away. Macros it defines remain defined. This allows you to acquire all the macros from a header without also processing its declarations. <p>All files specified by <code>-imacros</code> are processed before all files specified by <code>-include</code>. </p>\n</dd>\n<dt>\n<code>-idirafter </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> for header files, but do it <em>after</em> all directories specified with <code>-I</code> and the standard system directories have been exhausted. <var>dir</var> is treated as a system include directory. If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt>\n<code>-iprefix </code><var>prefix</var>\n</dt>\n<dd>\nSpecify <var>prefix</var> as the prefix for subsequent <code>-iwithprefix</code> options. If the prefix represents a directory, you should include the final ‘<code>/</code>’. </dd>\n<dt>\n<code>-iwithprefix </code><var>dir</var><dt>\n<code>-iwithprefixbefore </code><var>dir</var>\n</dt>\n</dt>\n<dd>\nAppend <var>dir</var> to the prefix specified previously with <code>-iprefix</code>, and add the resulting directory to the include search path. <code>-iwithprefixbefore</code> puts it in the same place <code>-I</code> would; <code>-iwithprefix</code> puts it where <code>-idirafter</code> would. </dd>\n<dt>\n<code>-isysroot </code><var>dir</var>\n</dt>\n<dd>\nThis option is like the <code>--sysroot</code> option, but applies only to header files (except for Darwin targets, where it applies to both header files and libraries). See the <code>--sysroot</code> option for more information. </dd>\n<dt>\n<code>-imultilib </code><var>dir</var>\n</dt>\n<dd>\nUse <var>dir</var> as a subdirectory of the directory containing target-specific C++ headers. </dd>\n<dt>\n<code>-isystem </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> for header files, after all directories specified by <code>-I</code> but before the standard system directories. Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories. If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt>\n<code>-iquote </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> only for header files requested with <code>#include \"</code><var>file</var><code>\"</code>; they are not searched for <code>#include &lt;</code><var>file</var><code>&gt;</code>, before all directories specified by <code>-I</code> and before the standard system directories. If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt><code>-fdirectives-only</code></dt>\n<dd>\nWhen preprocessing, handle directives, but do not expand macros. <p>The option's behavior depends on the <code>-E</code> and <code>-fpreprocessed</code> options. </p>\n<p>With <code>-E</code>, preprocessing is limited to the handling of directives such as <code>#define</code>, <code>#ifdef</code>, and <code>#error</code>. Other preprocessor operations, such as macro expansion and trigraph conversion are not performed. In addition, the <code>-dD</code> option is implicitly enabled. </p>\n<p>With <code>-fpreprocessed</code>, predefinition of command line and most builtin macros is disabled. Macros such as <code>__LINE__</code>, which are contextually dependent, are handled normally. This enables compilation of files previously preprocessed with <code>-E -fdirectives-only</code>. </p>\n<p>With both <code>-E</code> and <code>-fpreprocessed</code>, the rules for <code>-fpreprocessed</code> take precedence. This enables full preprocessing of files previously preprocessed with <code>-E -fdirectives-only</code>. </p>\n</dd>\n<dt><code>-fdollars-in-identifiers</code></dt>\n<dd>\nAccept ‘<code>$</code>’ in identifiers. </dd>\n<dt><code>-fextended-identifiers</code></dt>\n<dd>\nAccept universal character names in identifiers. This option is experimental; in a future version of GCC, it will be enabled by default for C99 and C++. </dd>\n<dt><code>-fno-canonical-system-headers</code></dt>\n<dd>\nWhen preprocessing, do not shorten system header paths with canonicalization. </dd>\n<dt><code>-fpreprocessed</code></dt>\n<dd>\nIndicate to the preprocessor that the input file has already been preprocessed. This suppresses things like macro expansion, trigraph conversion, escaped newline splicing, and processing of most directives. The preprocessor still recognizes and removes comments, so that you can pass a file preprocessed with <code>-C</code> to the compiler without problems. In this mode the integrated preprocessor is little more than a tokenizer for the front ends. <p><code>-fpreprocessed</code> is implicit if the input file has one of the extensions ‘<code>.i</code>’, ‘<code>.ii</code>’ or ‘<code>.mi</code>’. These are the extensions that GCC uses for preprocessed files created by <code>-save-temps</code>. </p>\n</dd>\n<dt>\n<code>-ftabstop=</code><var>width</var>\n</dt>\n<dd>\nSet the distance between tab stops. This helps the preprocessor report correct column numbers in warnings or errors, even if tabs appear on the line. If the value is less than 1 or greater than 100, the option is ignored. The default is 8. </dd>\n<dt><code>-fdebug-cpp</code></dt>\n<dd>\nThis option is only useful for debugging GCC. When used with <code>-E</code>, dumps debugging information about location maps. Every token in the output is preceded by the dump of the map its location belongs to. The dump of the map holding the location of a token would be: <pre class=\"smallexample\">{‘<code>P</code>’:<code>/file/path</code>;‘<code>F</code>’:<code>/includer/path</code>;‘<code>L</code>’:<var>line_num</var>;‘<code>C</code>’:<var>col_num</var>;‘<code>S</code>’:<var>system_header_p</var>;‘<code>M</code>’:<var>map_address</var>;‘<code>E</code>’:<var>macro_expansion_p</var>,‘<code>loc</code>’:<var>location</var>}</pre> <p>When used without <code>-E</code>, this option has no effect. </p>\n</dd>\n<dt>\n<code>-ftrack-macro-expansion</code><span class=\"roman\">[</span><code>=</code><var>level</var><span class=\"roman\">]</span>\n</dt>\n<dd>\nTrack locations of tokens across macro expansions. This allows the compiler to emit diagnostic about the current macro expansion stack when a compilation error occurs in a macro expansion. Using this option makes the preprocessor and the compiler consume more memory. The <var>level</var> parameter can be used to choose the level of precision of token location tracking thus decreasing the memory consumption if necessary. Value ‘<code>0</code>’ of <var>level</var> de-activates this option just as if no <code>-ftrack-macro-expansion</code> was present on the command line. Value ‘<code>1</code>’ tracks tokens locations in a degraded mode for the sake of minimal memory overhead. In this mode all tokens resulting from the expansion of an argument of a function-like macro have the same location. Value ‘<code>2</code>’ tracks tokens locations completely. This value is the most memory hungry. When this option is given no argument, the default parameter value is ‘<code>2</code>’. <p>Note that -ftrack-macro-expansion=2 is activated by default. </p>\n</dd>\n<dt>\n<code>-fexec-charset=</code><var>charset</var>\n</dt>\n<dd>\nSet the execution character set, used for string and character constants. The default is UTF-8. <var>charset</var> can be any encoding supported by the system's <code>iconv</code> library routine. </dd>\n<dt>\n<code>-fwide-exec-charset=</code><var>charset</var>\n</dt>\n<dd>\nSet the wide execution character set, used for wide string and character constants. The default is UTF-32 or UTF-16, whichever corresponds to the width of <code>wchar_t</code>. As with <code>-fexec-charset</code>, <var>charset</var> can be any encoding supported by the system's <code>iconv</code> library routine; however, you will have problems with encodings that do not fit exactly in <code>wchar_t</code>. </dd>\n<dt>\n<code>-finput-charset=</code><var>charset</var>\n</dt>\n<dd>\nSet the input character set, used for translation from the character set of the input file to the source character set used by GCC. If the locale does not specify, or GCC cannot get this information from the locale, the default is UTF-8. This can be overridden by either the locale or this command line option. Currently the command line option takes precedence if there's a conflict. <var>charset</var> can be any encoding supported by the system's <code>iconv</code> library routine. </dd>\n<dt><code>-fworking-directory</code></dt>\n<dd>\nEnable generation of linemarkers in the preprocessor output that will let the compiler know the current working directory at the time of preprocessing. When this option is enabled, the preprocessor will emit, after the initial linemarker, a second linemarker with the current working directory followed by two slashes. GCC will use this directory, when it's present in the preprocessed input, as the directory emitted as the current working directory in some debugging information formats. This option is implicitly enabled if debugging information is enabled, but this can be inhibited with the negated form <code>-fno-working-directory</code>. If the <code>-P</code> flag is present in the command line, this option has no effect, since no <code>#line</code> directives are emitted whatsoever. </dd>\n<dt><code>-fno-show-column</code></dt>\n<dd>\nDo not print column numbers in diagnostics. This may be necessary if diagnostics are being scanned by a program that does not understand the column numbers, such as <code>dejagnu</code>. </dd>\n<dt>\n<code>-A </code><var>predicate</var><code>=</code><var>answer</var>\n</dt>\n<dd>\nMake an assertion with the predicate <var>predicate</var> and answer <var>answer</var>. This form is preferred to the older form <samp><span class=\"option\">-A </span><var>predicate</var><span class=\"option\">(</span><var>answer</var><span class=\"option\">)</span></samp>, which is still supported, because it does not use shell special characters. </dd>\n<dt>\n<code>-A -</code><var>predicate</var><code>=</code><var>answer</var>\n</dt>\n<dd>Cancel an assertion with the predicate <var>predicate</var> and answer <var>answer</var>. </dd>\n<dt><code>-dCHARS</code></dt>\n<dd>\n<var>CHARS</var> is a sequence of one or more of the following characters, and must not be preceded by a space. Other characters are interpreted by the compiler proper, or reserved for future versions of GCC, and so are silently ignored. If you specify characters whose behavior conflicts, the result is undefined. <dl> <dt>‘<code>M</code>’</dt>\n<dd>\nInstead of the normal output, generate a list of ‘<code>#define</code>’ directives for all the macros defined during the execution of the preprocessor, including predefined macros. This gives you a way of finding out what is predefined in your version of the preprocessor. Assuming you have no file <code>foo.h</code>, the command <pre class=\"smallexample\">touch foo.h; cpp -dM foo.h</pre> <p class=\"noindent\">will show all the predefined macros. </p>\n<p>If you use <code>-dM</code> without the <code>-E</code> option, <code>-dM</code> is interpreted as a synonym for <code>-fdump-rtl-mach</code>. See <a href=\"debugging-options#Debugging-Options\">Debugging Options</a>. </p>\n</dd>\n<dt>‘<code>D</code>’</dt>\n<dd>\nLike ‘<code>M</code>’ except in two respects: it does <em>not</em> include the predefined macros, and it outputs <em>both</em> the ‘<code>#define</code>’ directives and the result of preprocessing. Both kinds of output go to the standard output file. </dd>\n<dt>‘<code>N</code>’</dt>\n<dd>\nLike ‘<code>D</code>’, but emit only the macro names, not their expansions. </dd>\n<dt>‘<code>I</code>’</dt>\n<dd>\nOutput ‘<code>#include</code>’ directives in addition to the result of preprocessing. </dd>\n<dt>‘<code>U</code>’</dt>\n<dd>\nLike ‘<code>D</code>’ except that only macros that are expanded, or whose definedness is tested in preprocessor directives, are output; the output is delayed until the use or test of the macro; and ‘<code>#undef</code>’ directives are also output for macros tested but undefined at the time. </dd>\n</dl> </dd>\n<dt><code>-P</code></dt>\n<dd>\nInhibit generation of linemarkers in the output from the preprocessor. This might be useful when running the preprocessor on something that is not C code, and will be sent to a program which might be confused by the linemarkers. </dd>\n<dt><code>-C</code></dt>\n<dd>\nDo not discard comments. All comments are passed through to the output file, except for comments in processed directives, which are deleted along with the directive. <p>You should be prepared for side effects when using <code>-C</code>; it causes the preprocessor to treat comments as tokens in their own right. For example, comments appearing at the start of what would be a directive line have the effect of turning that line into an ordinary source line, since the first token on the line is no longer a ‘<code>#</code>’. </p>\n</dd>\n<dt><code>-CC</code></dt>\n<dd>Do not discard comments, including during macro expansion. This is like <code>-C</code>, except that comments contained within macros are also passed through to the output file where the macro is expanded. <p>In addition to the side-effects of the <code>-C</code> option, the <code>-CC</code> option causes all C++-style comments inside a macro to be converted to C-style comments. This is to prevent later use of that macro from inadvertently commenting out the remainder of the source line. </p>\n<p>The <code>-CC</code> option is generally used to support lint comments. </p>\n</dd>\n<dt><code>-traditional-cpp</code></dt>\n<dd>\nTry to imitate the behavior of old-fashioned C preprocessors, as opposed to ISO C preprocessors. </dd>\n<dt><code>-trigraphs</code></dt>\n<dd>\nProcess trigraph sequences. These are three-character sequences, all starting with ‘<code>??</code>’, that are defined by ISO C to stand for single characters. For example, ‘<code>??/</code>’ stands for ‘<code>\\</code>’, so ‘<code>'??/n'</code>’ is a character constant for a newline. By default, GCC ignores trigraphs, but in standard-conforming modes it converts them. See the <code>-std</code> and <code>-ansi</code> options. <p>The nine trigraphs and their replacements are </p>\n<pre class=\"smallexample\">Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-\nReplacement:      [    ]    {    }    #    \\    ^    |    ~</pre> </dd>\n<dt><code>-remap</code></dt>\n<dd>\nEnable special code to work around file systems which only permit very short file names, such as MS-DOS. </dd>\n<dt>\n<code>--help</code><dt><code>--target-help</code></dt>\n</dt>\n<dd>\nPrint text describing all the command line options instead of preprocessing anything. </dd>\n<dt><code>-v</code></dt>\n<dd>\nVerbose mode. Print out GNU CPP's version number at the beginning of execution, and report the final form of the include path. </dd>\n<dt><code>-H</code></dt>\n<dd>\nPrint the name of each header file used, in addition to other normal activities. Each name is indented to show how deep in the ‘<code>#include</code>’ stack it is. Precompiled header files are also printed, even if they are found to be invalid; an invalid precompiled header file is printed with ‘<code>...x</code>’ and a valid one with ‘<code>...!</code>’ . </dd>\n<dt>\n<code>-version</code><dt><code>--version</code></dt>\n</dt>\n<dd>\nPrint out GNU CPP's version number. With one dash, proceed to preprocess as normal. With two dashes, exit immediately. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Preprocessor-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Preprocessor-Options.html</a>\n  </p>\n</div>\n","assembler-options":"<h1 class=\"section\" id=\"Assembler-Options\">3.12 Passing Options to the Assembler</h1>  <p>You can pass options to the assembler. </p>\n<dl> <dt>\n<code>-Wa,</code><var>option</var>\n</dt>\n<dd>\nPass <var>option</var> as an option to the assembler. If <var>option</var> contains commas, it is split into multiple options at the commas. </dd>\n<dt>\n<code>-Xassembler </code><var>option</var>\n</dt>\n<dd>\nPass <var>option</var> as an option to the assembler. You can use this to supply system-specific assembler options that GCC does not recognize. <p>If you want to pass an option that takes an argument, you must use <code>-Xassembler</code> twice, once for the option and once for the argument. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Assembler-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Assembler-Options.html</a>\n  </p>\n</div>\n","link-options":"<h1 class=\"section\" id=\"Link-Options\">3.13 Options for Linking</h1> <p> These options come into play when the compiler links object files into an executable output file. They are meaningless if the compiler is not doing a link step.  </p>\n<dl>\n<dt><var>object-file-name</var></dt>\n<dd>A file name that does not end in a special recognized suffix is considered to name an object file or library. (Object files are distinguished from libraries by the linker according to the file contents.) If linking is done, these object files are used as input to the linker. </dd>\n<dt>\n<code>-c</code><dt>\n<code>-S</code><dt><code>-E</code></dt>\n</dt>\n</dt>\n<dd>\nIf any of these options is used, then the linker is not run, and object file names should not be used as arguments. See <a href=\"overall-options#Overall-Options\">Overall Options</a>. \n</dd>\n<dt>\n<code>-l</code><var>library</var><dt>\n<code>-l </code><var>library</var>\n</dt>\n</dt>\n<dd>\nSearch the library named <var>library</var> when linking. (The second alternative with the library as a separate argument is only for POSIX compliance and is not recommended.) <p>It makes a difference where in the command you write this option; the linker searches and processes libraries and object files in the order they are specified. Thus, ‘<code>foo.o -lz bar.o</code>’ searches library ‘<code>z</code>’ after file <code>foo.o</code> but before <code>bar.o</code>. If <code>bar.o</code> refers to functions in ‘<code>z</code>’, those functions may not be loaded. </p>\n<p>The linker searches a standard list of directories for the library, which is actually a file named <samp><span class=\"file\">lib</span><var>library</var><span class=\"file\">.a</span></samp>. The linker then uses this file as if it had been specified precisely by name. </p>\n<p>The directories searched include several standard system directories plus any that you specify with <code>-L</code>. </p>\n<p>Normally the files found this way are library files—archive files whose members are object files. The linker handles an archive file by scanning through it for members which define symbols that have so far been referenced but not defined. But if the file that is found is an ordinary object file, it is linked in the usual fashion. The only difference between using an <code>-l</code> option and specifying a file name is that <code>-l</code> surrounds <var>library</var> with ‘<code>lib</code>’ and ‘<code>.a</code>’ and searches several directories. </p>\n</dd>\n<dt><code>-lobjc</code></dt>\n<dd>\nYou need this special case of the <code>-l</code> option in order to link an Objective-C or Objective-C++ program. </dd>\n<dt><code>-nostartfiles</code></dt>\n<dd>\nDo not use the standard system startup files when linking. The standard system libraries are used normally, unless <code>-nostdlib</code> or <code>-nodefaultlibs</code> is used. </dd>\n<dt><code>-nodefaultlibs</code></dt>\n<dd>\nDo not use the standard system libraries when linking. Only the libraries you specify are passed to the linker, and options specifying linkage of the system libraries, such as <code>-static-libgcc</code> or <code>-shared-libgcc</code>, are ignored. The standard startup files are used normally, unless <code>-nostartfiles</code> is used. <p>The compiler may generate calls to <code>memcmp</code>, <code>memset</code>, <code>memcpy</code> and <code>memmove</code>. These entries are usually resolved by entries in libc. These entry points should be supplied through some other mechanism when this option is specified. </p>\n</dd>\n<dt><code>-nostdlib</code></dt>\n<dd>\nDo not use the standard system startup files or libraries when linking. No startup files and only the libraries you specify are passed to the linker, and options specifying linkage of the system libraries, such as <code>-static-libgcc</code> or <code>-shared-libgcc</code>, are ignored. <p>The compiler may generate calls to <code>memcmp</code>, <code>memset</code>, <code>memcpy</code> and <code>memmove</code>. These entries are usually resolved by entries in libc. These entry points should be supplied through some other mechanism when this option is specified. </p>\n<p>One of the standard libraries bypassed by <code>-nostdlib</code> and <code>-nodefaultlibs</code> is <code>libgcc.a</code>, a library of internal subroutines which GCC uses to overcome shortcomings of particular machines, or special needs for some languages. (See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gccint/Interface.html#Interface\">Interfacing to GCC Output</a>, for more discussion of <code>libgcc.a</code>.) In most cases, you need <code>libgcc.a</code> even when you want to avoid other standard libraries. In other words, when you specify <code>-nostdlib</code> or <code>-nodefaultlibs</code> you should usually specify <code>-lgcc</code> as well. This ensures that you have no unresolved references to internal GCC library subroutines. (An example of such an internal subroutine is ‘<code>__main</code>’, used to ensure C++ constructors are called; see <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gccint/Collect2.html#Collect2\"><code>collect2</code></a>.) </p>\n</dd>\n<dt><code>-pie</code></dt>\n<dd>\nProduce a position independent executable on targets that support it. For predictable results, you must also specify the same set of options used for compilation (<code>-fpie</code>, <code>-fPIE</code>, or model suboptions) when you specify this linker option. </dd>\n<dt><code>-rdynamic</code></dt>\n<dd>\nPass the flag <code>-export-dynamic</code> to the ELF linker, on targets that support it. This instructs the linker to add all symbols, not only used ones, to the dynamic symbol table. This option is needed for some uses of <code>dlopen</code> or to allow obtaining backtraces from within a program. </dd>\n<dt><code>-s</code></dt>\n<dd>\nRemove all symbol table and relocation information from the executable. </dd>\n<dt><code>-static</code></dt>\n<dd>\nOn systems that support dynamic linking, this prevents linking with the shared libraries. On other systems, this option has no effect. </dd>\n<dt><code>-shared</code></dt>\n<dd>\nProduce a shared object which can then be linked with other objects to form an executable. Not all systems support this option. For predictable results, you must also specify the same set of options used for compilation (<code>-fpic</code>, <code>-fPIC</code>, or model suboptions) when you specify this linker option.<a rel=\"footnote\" href=\"#fn-1\" name=\"fnd-1\" id=\"fnd-1\"><sup>1</sup></a> </dd>\n<dt>\n<code>-shared-libgcc</code><dt><code>-static-libgcc</code></dt>\n</dt>\n<dd>\nOn systems that provide <code>libgcc</code> as a shared library, these options force the use of either the shared or static version, respectively. If no shared version of <code>libgcc</code> was built when the compiler was configured, these options have no effect. <p>There are several situations in which an application should use the shared <code>libgcc</code> instead of the static version. The most common of these is when the application wishes to throw and catch exceptions across different shared libraries. In that case, each of the libraries as well as the application itself should use the shared <code>libgcc</code>. </p>\n<p>Therefore, the G++ and GCJ drivers automatically add <code>-shared-libgcc</code> whenever you build a shared library or a main executable, because C++ and Java programs typically use exceptions, so this is the right thing to do. </p>\n<p>If, instead, you use the GCC driver to create shared libraries, you may find that they are not always linked with the shared <code>libgcc</code>. If GCC finds, at its configuration time, that you have a non-GNU linker or a GNU linker that does not support option <code>--eh-frame-hdr</code>, it links the shared version of <code>libgcc</code> into shared libraries by default. Otherwise, it takes advantage of the linker and optimizes away the linking with the shared version of <code>libgcc</code>, linking with the static version of libgcc by default. This allows exceptions to propagate through such shared libraries, without incurring relocation costs at library load time. </p>\n<p>However, if a library or main executable is supposed to throw or catch exceptions, you must link it using the G++ or GCJ driver, as appropriate for the languages used in the program, or using the option <code>-shared-libgcc</code>, such that it is linked with the shared <code>libgcc</code>. </p>\n</dd>\n<dt><code>-static-libasan</code></dt>\n<dd>\nWhen the <code>-fsanitize=address</code> option is used to link a program, the GCC driver automatically links against <code>libasan</code>. If <code>libasan</code> is available as a shared library, and the <code>-static</code> option is not used, then this links against the shared version of <code>libasan</code>. The <code>-static-libasan</code> option directs the GCC driver to link <code>libasan</code> statically, without necessarily linking other libraries statically. </dd>\n<dt><code>-static-libtsan</code></dt>\n<dd>\nWhen the <code>-fsanitize=thread</code> option is used to link a program, the GCC driver automatically links against <code>libtsan</code>. If <code>libtsan</code> is available as a shared library, and the <code>-static</code> option is not used, then this links against the shared version of <code>libtsan</code>. The <code>-static-libtsan</code> option directs the GCC driver to link <code>libtsan</code> statically, without necessarily linking other libraries statically. </dd>\n<dt><code>-static-liblsan</code></dt>\n<dd>\nWhen the <code>-fsanitize=leak</code> option is used to link a program, the GCC driver automatically links against <code>liblsan</code>. If <code>liblsan</code> is available as a shared library, and the <code>-static</code> option is not used, then this links against the shared version of <code>liblsan</code>. The <code>-static-liblsan</code> option directs the GCC driver to link <code>liblsan</code> statically, without necessarily linking other libraries statically. </dd>\n<dt><code>-static-libubsan</code></dt>\n<dd>\nWhen the <code>-fsanitize=undefined</code> option is used to link a program, the GCC driver automatically links against <code>libubsan</code>. If <code>libubsan</code> is available as a shared library, and the <code>-static</code> option is not used, then this links against the shared version of <code>libubsan</code>. The <code>-static-libubsan</code> option directs the GCC driver to link <code>libubsan</code> statically, without necessarily linking other libraries statically. </dd>\n<dt><code>-static-libstdc++</code></dt>\n<dd>\nWhen the <code>g++</code> program is used to link a C++ program, it normally automatically links against <code>libstdc++</code>. If <code>libstdc++</code> is available as a shared library, and the <code>-static</code> option is not used, then this links against the shared version of <code>libstdc++</code>. That is normally fine. However, it is sometimes useful to freeze the version of <code>libstdc++</code> used by the program without going all the way to a fully static link. The <code>-static-libstdc++</code> option directs the <code>g++</code> driver to link <code>libstdc++</code> statically, without necessarily linking other libraries statically. </dd>\n<dt><code>-symbolic</code></dt>\n<dd>\nBind references to global symbols when building a shared object. Warn about any unresolved references (unless overridden by the link editor option <code>-Xlinker -z -Xlinker defs</code>). Only a few systems support this option. </dd>\n<dt>\n<code>-T </code><var>script</var>\n</dt>\n<dd>\nUse <var>script</var> as the linker script. This option is supported by most systems using the GNU linker. On some targets, such as bare-board targets without an operating system, the <code>-T</code> option may be required when linking to avoid references to undefined symbols. </dd>\n<dt>\n<code>-Xlinker </code><var>option</var>\n</dt>\n<dd>\nPass <var>option</var> as an option to the linker. You can use this to supply system-specific linker options that GCC does not recognize. <p>If you want to pass an option that takes a separate argument, you must use <code>-Xlinker</code> twice, once for the option and once for the argument. For example, to pass <code>-assert definitions</code>, you must write <code>-Xlinker -assert -Xlinker definitions</code>. It does not work to write <code>-Xlinker \"-assert definitions\"</code>, because this passes the entire string as a single argument, which is not what the linker expects. </p>\n<p>When using the GNU linker, it is usually more convenient to pass arguments to linker options using the <samp><var>option</var><span class=\"option\">=</span><var>value</var></samp> syntax than as separate arguments. For example, you can specify <code>-Xlinker -Map=output.map</code> rather than <code>-Xlinker -Map -Xlinker output.map</code>. Other linkers may not support this syntax for command-line options. </p>\n</dd>\n<dt>\n<code>-Wl,</code><var>option</var>\n</dt>\n<dd>\nPass <var>option</var> as an option to the linker. If <var>option</var> contains commas, it is split into multiple options at the commas. You can use this syntax to pass an argument to the option. For example, <code>-Wl,-Map,output.map</code> passes <code>-Map output.map</code> to the linker. When using the GNU linker, you can also get the same effect with <code>-Wl,-Map=output.map</code>. </dd>\n<dt>\n<code>-u </code><var>symbol</var>\n</dt>\n<dd>\nPretend the symbol <var>symbol</var> is undefined, to force linking of library modules to define it. You can use <code>-u</code> multiple times with different symbols to force loading of additional library modules. </dd>\n</dl> <div class=\"footnote\">  <h2>Footnotes</h2>\n<p class=\"footnote\"><small>[<a name=\"fn-1\" href=\"#fnd-1\" id=\"fn-1\">1</a>]</small> On some systems, ‘<code>gcc -shared</code>’ needs to build supplementary stub code for constructors to work. On multi-libbed systems, ‘<code>gcc -shared</code>’ must select the correct support libraries to link against. Failing to supply the correct flags may lead to subtle defects. Supplying them in cases where they are not necessary is innocuous.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Link-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Link-Options.html</a>\n  </p>\n</div>\n","directory-options":"<h1 class=\"section\" id=\"Directory-Options\">3.14 Options for Directory Search</h1> <p> These options specify directories to search for header files, for libraries and for parts of the compiler: </p>\n<dl> <dt>\n<code>-I</code><var>dir</var>\n</dt>\n<dd>\nAdd the directory <var>dir</var> to the head of the list of directories to be searched for header files. This can be used to override a system header file, substituting your own version, since these directories are searched before the system header file directories. However, you should not use this option to add directories that contain vendor-supplied system header files (use <code>-isystem</code> for that). If you use more than one <code>-I</code> option, the directories are scanned in left-to-right order; the standard system directories come after. <p>If a standard system include directory, or a directory specified with <code>-isystem</code>, is also specified with <code>-I</code>, the <code>-I</code> option is ignored. The directory is still searched but as a system directory at its normal position in the system include chain. This is to ensure that GCC's procedure to fix buggy system headers and the ordering for the <code>include_next</code> directive are not inadvertently changed. If you really need to change the search order for system directories, use the <code>-nostdinc</code> and/or <code>-isystem</code> options. </p>\n</dd>\n<dt>\n<code>-iplugindir=</code><var>dir</var>\n</dt>\n<dd>\nSet the directory to search for plugins that are passed by <samp><span class=\"option\">-fplugin=</span><var>name</var></samp> instead of <samp><span class=\"option\">-fplugin=</span><var>path</var><span class=\"option\">/</span><var>name</var><span class=\"option\">.so</span></samp>. This option is not meant to be used by the user, but only passed by the driver. </dd>\n<dt>\n<code>-iquote</code><var>dir</var>\n</dt>\n<dd>\nAdd the directory <var>dir</var> to the head of the list of directories to be searched for header files only for the case of ‘<samp><span class=\"samp\">#include \"</span><var>file</var><span class=\"samp\">\"</span></samp>’; they are not searched for ‘<samp><span class=\"samp\">#include &lt;</span><var>file</var><span class=\"samp\">&gt;</span></samp>’, otherwise just like <code>-I</code>. </dd>\n<dt>\n<code>-L</code><var>dir</var>\n</dt>\n<dd>\nAdd directory <var>dir</var> to the list of directories to be searched for <code>-l</code>. </dd>\n<dt>\n<code>-B</code><var>prefix</var>\n</dt>\n<dd>\nThis option specifies where to find the executables, libraries, include files, and data files of the compiler itself. <p>The compiler driver program runs one or more of the subprograms <code>cpp</code>, <code>cc1</code>, <code>as</code> and <code>ld</code>. It tries <var>prefix</var> as a prefix for each program it tries to run, both with and without ‘<samp><var>machine</var><span class=\"samp\">/</span><var>version</var><span class=\"samp\">/</span></samp>’ (see <a href=\"target-options#Target-Options\">Target Options</a>). </p>\n<p>For each subprogram to be run, the compiler driver first tries the <code>-B</code> prefix, if any. If that name is not found, or if <code>-B</code> is not specified, the driver tries two standard prefixes, <code>/usr/lib/gcc/</code> and <code>/usr/local/lib/gcc/</code>. If neither of those results in a file name that is found, the unmodified program name is searched for using the directories specified in your <code>PATH</code> environment variable. </p>\n<p>The compiler checks to see if the path provided by the <code>-B</code> refers to a directory, and if necessary it adds a directory separator character at the end of the path. </p>\n<p><code>-B</code> prefixes that effectively specify directory names also apply to libraries in the linker, because the compiler translates these options into <code>-L</code> options for the linker. They also apply to include files in the preprocessor, because the compiler translates these options into <code>-isystem</code> options for the preprocessor. In this case, the compiler appends ‘<code>include</code>’ to the prefix. </p>\n<p>The runtime support file <code>libgcc.a</code> can also be searched for using the <code>-B</code> prefix, if needed. If it is not found there, the two standard prefixes above are tried, and that is all. The file is left out of the link if it is not found by those means. </p>\n<p>Another way to specify a prefix much like the <code>-B</code> prefix is to use the environment variable <code>GCC_EXEC_PREFIX</code>. See <a href=\"environment-variables#Environment-Variables\">Environment Variables</a>. </p>\n<p>As a special kludge, if the path provided by <code>-B</code> is <samp><span class=\"file\">[dir/]stage</span><var>N</var><span class=\"file\">/</span></samp>, where <var>N</var> is a number in the range 0 to 9, then it is replaced by <code>[dir/]include</code>. This is to help with boot-strapping the compiler. </p>\n</dd>\n<dt>\n<code>-specs=</code><var>file</var>\n</dt>\n<dd>\nProcess <var>file</var> after the compiler reads in the standard <code>specs</code> file, in order to override the defaults which the <code>gcc</code> driver program uses when determining what switches to pass to <code>cc1</code>, <code>cc1plus</code>, <code>as</code>, <code>ld</code>, etc. More than one <samp><span class=\"option\">-specs=</span><var>file</var></samp> can be specified on the command line, and they are processed in order, from left to right. </dd>\n<dt>\n<code>--sysroot=</code><var>dir</var>\n</dt>\n<dd>\nUse <var>dir</var> as the logical root directory for headers and libraries. For example, if the compiler normally searches for headers in <code>/usr/include</code> and libraries in <code>/usr/lib</code>, it instead searches <samp><var>dir</var><span class=\"file\">/usr/include</span></samp> and <samp><var>dir</var><span class=\"file\">/usr/lib</span></samp>. <p>If you use both this option and the <code>-isysroot</code> option, then the <code>--sysroot</code> option applies to libraries, but the <code>-isysroot</code> option applies to header files. </p>\n<p>The GNU linker (beginning with version 2.16) has the necessary support for this option. If your linker does not support this option, the header file aspect of <code>--sysroot</code> still works, but the library aspect does not. </p>\n</dd>\n<dt><code>--no-sysroot-suffix</code></dt>\n<dd>\nFor some targets, a suffix is added to the root directory specified with <code>--sysroot</code>, depending on the other options used, so that headers may for example be found in <samp><var>dir</var><span class=\"file\">/</span><var>suffix</var><span class=\"file\">/usr/include</span></samp> instead of <samp><var>dir</var><span class=\"file\">/usr/include</span></samp>. This option disables the addition of such a suffix. </dd>\n<dt><code>-I-</code></dt>\n<dd>\nThis option has been deprecated. Please use <code>-iquote</code> instead for <code>-I</code> directories before the <code>-I-</code> and remove the <code>-I-</code>. Any directories you specify with <code>-I</code> options before the <code>-I-</code> option are searched only for the case of ‘<samp><span class=\"samp\">#include \"</span><var>file</var><span class=\"samp\">\"</span></samp>’; they are not searched for ‘<samp><span class=\"samp\">#include &lt;</span><var>file</var><span class=\"samp\">&gt;</span></samp>’. <p>If additional directories are specified with <code>-I</code> options after the <code>-I-</code>, these directories are searched for all ‘<code>#include</code>’ directives. (Ordinarily <em>all</em> <code>-I</code> directories are used this way.) </p>\n<p>In addition, the <code>-I-</code> option inhibits the use of the current directory (where the current input file came from) as the first search directory for ‘<samp><span class=\"samp\">#include \"</span><var>file</var><span class=\"samp\">\"</span></samp>’. There is no way to override this effect of <code>-I-</code>. With <code>-I.</code> you can specify searching the directory that is current when the compiler is invoked. That is not exactly the same as what the preprocessor does by default, but it is often satisfactory. </p>\n<p><code>-I-</code> does not inhibit the use of the standard system directories for header files. Thus, <code>-I-</code> and <code>-nostdinc</code> are independent. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Directory-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Directory-Options.html</a>\n  </p>\n</div>\n","spec-files":"<h1 class=\"section\" id=\"Spec-Files\">3.15 Specifying subprocesses and the switches to pass to them</h1> <p> <code>gcc</code> is a driver program. It performs its job by invoking a sequence of other programs to do the work of compiling, assembling and linking. GCC interprets its command-line parameters and uses these to deduce which programs it should invoke, and which command-line options it ought to place on their command lines. This behavior is controlled by spec strings. In most cases there is one spec string for each program that GCC can invoke, but a few programs have multiple spec strings to control their behavior. The spec strings built into GCC can be overridden by using the <code>-specs=</code> command-line switch to specify a spec file. </p>\n<p>Spec files are plaintext files that are used to construct spec strings. They consist of a sequence of directives separated by blank lines. The type of directive is determined by the first non-whitespace character on the line, which can be one of the following: </p>\n<dl> <dt>\n<code>%</code><var>command</var>\n</dt>\n<dd>Issues a <var>command</var> to the spec file processor. The commands that can appear here are: <dl> <dt>\n<code>%include &lt;</code><var>file</var><code>&gt;</code>\n</dt>\n<dd>\nSearch for <var>file</var> and insert its text at the current point in the specs file. </dd>\n<dt>\n<code>%include_noerr &lt;</code><var>file</var><code>&gt;</code>\n</dt>\n<dd>\nJust like ‘<code>%include</code>’, but do not generate an error message if the include file cannot be found. </dd>\n<dt>\n<code>%rename </code><var>old_name</var> <var>new_name</var>\n</dt>\n<dd>\nRename the spec string <var>old_name</var> to <var>new_name</var>. </dd>\n</dl> </dd>\n<dt>\n<code>*[</code><var>spec_name</var><code>]:</code>\n</dt>\n<dd>This tells the compiler to create, override or delete the named spec string. All lines after this directive up to the next directive or blank line are considered to be the text for the spec string. If this results in an empty string then the spec is deleted. (Or, if the spec did not exist, then nothing happens.) Otherwise, if the spec does not currently exist a new spec is created. If the spec does exist then its contents are overridden by the text of this directive, unless the first character of that text is the ‘<code>+</code>’ character, in which case the text is appended to the spec. </dd>\n<dt>\n<code>[</code><var>suffix</var><code>]:</code>\n</dt>\n<dd>Creates a new ‘<samp><span class=\"samp\">[</span><var>suffix</var><span class=\"samp\">] spec</span></samp>’ pair. All lines after this directive and up to the next directive or blank line are considered to make up the spec string for the indicated suffix. When the compiler encounters an input file with the named suffix, it processes the spec string in order to work out how to compile that file. For example: <pre class=\"smallexample\">.ZZ:\nz-compile -input %i</pre> <p>This says that any input file whose name ends in ‘<code>.ZZ</code>’ should be passed to the program ‘<code>z-compile</code>’, which should be invoked with the command-line switch <code>-input</code> and with the result of performing the ‘<code>%i</code>’ substitution. (See below.) </p>\n<p>As an alternative to providing a spec string, the text following a suffix directive can be one of the following: </p>\n<dl> <dt>\n<code>@</code><var>language</var>\n</dt>\n<dd>This says that the suffix is an alias for a known <var>language</var>. This is similar to using the <code>-x</code> command-line switch to GCC to specify a language explicitly. For example: <pre class=\"smallexample\">.ZZ:\n@c++</pre> <p>Says that .ZZ files are, in fact, C++ source files. </p>\n</dd>\n<dt>\n<code>#</code><var>name</var>\n</dt>\n<dd>This causes an error messages saying: <pre class=\"smallexample\"><var>name</var> compiler not installed on this system.</pre> </dd>\n</dl> <p>GCC already has an extensive list of suffixes built into it. This directive adds an entry to the end of the list of suffixes, but since the list is searched from the end backwards, it is effectively possible to override earlier entries using this technique. </p>\n</dd>\n</dl> <p>GCC has the following spec strings built into it. Spec files can override these strings or create their own. Note that individual targets can also add their own spec strings to this list. </p>\n<pre class=\"smallexample\">asm          Options to pass to the assembler\nasm_final    Options to pass to the assembler post-processor\ncpp          Options to pass to the C preprocessor\ncc1          Options to pass to the C compiler\ncc1plus      Options to pass to the C++ compiler\nendfile      Object files to include at the end of the link\nlink         Options to pass to the linker\nlib          Libraries to include on the command line to the linker\nlibgcc       Decides which GCC support library to pass to the linker\nlinker       Sets the name of the linker\npredefines   Defines to be passed to the C preprocessor\nsigned_char  Defines to pass to CPP to say whether <code>char</code> is signed\n             by default\nstartfile    Object files to include at the start of the link</pre> <p>Here is a small example of a spec file: </p>\n<pre class=\"smallexample\">%rename lib                 old_lib\n\n*lib:\n--start-group -lgcc -lc -leval1 --end-group %(old_lib)</pre> <p>This example renames the spec called ‘<code>lib</code>’ to ‘<code>old_lib</code>’ and then overrides the previous definition of ‘<code>lib</code>’ with a new one. The new definition adds in some extra command-line options before including the text of the old definition. </p>\n<p>Spec strings are a list of command-line options to be passed to their corresponding program. In addition, the spec strings can contain ‘<code>%</code>’-prefixed sequences to substitute variable text or to conditionally insert text into the command line. Using these constructs it is possible to generate quite complex command lines. </p>\n<p>Here is a table of all defined ‘<code>%</code>’-sequences for spec strings. Note that spaces are not generated automatically around the results of expanding these sequences. Therefore you can concatenate them together or combine them with constant text in a single argument. </p>\n<dl> <dt><code>%%</code></dt>\n<dd>Substitute one ‘<code>%</code>’ into the program name or argument. </dd>\n<dt><code>%i</code></dt>\n<dd>Substitute the name of the input file being processed. </dd>\n<dt><code>%b</code></dt>\n<dd>Substitute the basename of the input file being processed. This is the substring up to (and not including) the last period and not including the directory. </dd>\n<dt><code>%B</code></dt>\n<dd>This is the same as ‘<code>%b</code>’, but include the file suffix (text after the last period). </dd>\n<dt><code>%d</code></dt>\n<dd>Marks the argument containing or following the ‘<code>%d</code>’ as a temporary file name, so that that file is deleted if GCC exits successfully. Unlike ‘<code>%g</code>’, this contributes no text to the argument. </dd>\n<dt>\n<code>%g</code><var>suffix</var>\n</dt>\n<dd>Substitute a file name that has suffix <var>suffix</var> and is chosen once per compilation, and mark the argument in the same way as ‘<code>%d</code>’. To reduce exposure to denial-of-service attacks, the file name is now chosen in a way that is hard to predict even when previously chosen file names are known. For example, ‘<code>%g.s ... %g.o ... %g.s</code>’ might turn into ‘<code>ccUVUUAU.s ccXYAXZ12.o ccUVUUAU.s</code>’. <var>suffix</var> matches the regexp ‘<code>[.A-Za-z]*</code>’ or the special string ‘<code>%O</code>’, which is treated exactly as if ‘<code>%O</code>’ had been preprocessed. Previously, ‘<code>%g</code>’ was simply substituted with a file name chosen once per compilation, without regard to any appended suffix (which was therefore treated just like ordinary text), making such attacks more likely to succeed. </dd>\n<dt>\n<code>%u</code><var>suffix</var>\n</dt>\n<dd>Like ‘<code>%g</code>’, but generates a new temporary file name each time it appears instead of once per compilation. </dd>\n<dt>\n<code>%U</code><var>suffix</var>\n</dt>\n<dd>Substitutes the last file name generated with ‘<samp><span class=\"samp\">%u</span><var>suffix</var></samp>’, generating a new one if there is no such last file name. In the absence of any ‘<samp><span class=\"samp\">%u</span><var>suffix</var></samp>’, this is just like ‘<samp><span class=\"samp\">%g</span><var>suffix</var></samp>’, except they don't share the same suffix <em>space</em>, so ‘<code>%g.s ... %U.s ... %g.s ... %U.s</code>’ involves the generation of two distinct file names, one for each ‘<code>%g.s</code>’ and another for each ‘<code>%U.s</code>’. Previously, ‘<code>%U</code>’ was simply substituted with a file name chosen for the previous ‘<code>%u</code>’, without regard to any appended suffix. </dd>\n<dt>\n<code>%j</code><var>suffix</var>\n</dt>\n<dd>Substitutes the name of the <code>HOST_BIT_BUCKET</code>, if any, and if it is writable, and if <code>-save-temps</code> is not used; otherwise, substitute the name of a temporary file, just like ‘<code>%u</code>’. This temporary file is not meant for communication between processes, but rather as a junk disposal mechanism. </dd>\n<dt>\n<code>%|</code><var>suffix</var><dt>\n<code>%m</code><var>suffix</var>\n</dt>\n</dt>\n<dd>Like ‘<code>%g</code>’, except if <code>-pipe</code> is in effect. In that case ‘<code>%|</code>’ substitutes a single dash and ‘<code>%m</code>’ substitutes nothing at all. These are the two most common ways to instruct a program that it should read from standard input or write to standard output. If you need something more elaborate you can use an ‘<samp><span class=\"samp\">%{pipe:</span><code>X</code><span class=\"samp\">}</span></samp>’ construct: see for example <code>f/lang-specs.h</code>. </dd>\n<dt>\n<code>%.</code><var>SUFFIX</var>\n</dt>\n<dd>Substitutes <var>.SUFFIX</var> for the suffixes of a matched switch's args when it is subsequently output with ‘<code>%*</code>’. <var>SUFFIX</var> is terminated by the next space or %. </dd>\n<dt><code>%w</code></dt>\n<dd>Marks the argument containing or following the ‘<code>%w</code>’ as the designated output file of this compilation. This puts the argument into the sequence of arguments that ‘<code>%o</code>’ substitutes. </dd>\n<dt><code>%o</code></dt>\n<dd>Substitutes the names of all the output files, with spaces automatically placed around them. You should write spaces around the ‘<code>%o</code>’ as well or the results are undefined. ‘<code>%o</code>’ is for use in the specs for running the linker. Input files whose names have no recognized suffix are not compiled at all, but they are included among the output files, so they are linked. </dd>\n<dt><code>%O</code></dt>\n<dd>Substitutes the suffix for object files. Note that this is handled specially when it immediately follows ‘<code>%g, %u, or %U</code>’, because of the need for those to form complete file names. The handling is such that ‘<code>%O</code>’ is treated exactly as if it had already been substituted, except that ‘<code>%g, %u, and %U</code>’ do not currently support additional <var>suffix</var> characters following ‘<code>%O</code>’ as they do following, for example, ‘<code>.o</code>’. </dd>\n<dt><code>%p</code></dt>\n<dd>Substitutes the standard macro predefinitions for the current target machine. Use this when running <code>cpp</code>. </dd>\n<dt><code>%P</code></dt>\n<dd>Like ‘<code>%p</code>’, but puts ‘<code>__</code>’ before and after the name of each predefined macro, except for macros that start with ‘<code>__</code>’ or with ‘<samp><span class=\"samp\">_</span><var>L</var></samp>’, where <var>L</var> is an uppercase letter. This is for ISO C. </dd>\n<dt><code>%I</code></dt>\n<dd>Substitute any of <code>-iprefix</code> (made from <code>GCC_EXEC_PREFIX</code>), <code>-isysroot</code> (made from <code>TARGET_SYSTEM_ROOT</code>), <code>-isystem</code> (made from <code>COMPILER_PATH</code> and <code>-B</code> options) and <code>-imultilib</code> as necessary. </dd>\n<dt><code>%s</code></dt>\n<dd>Current argument is the name of a library or startup file of some sort. Search for that file in a standard list of directories and substitute the full name found. The current working directory is included in the list of directories scanned. </dd>\n<dt><code>%T</code></dt>\n<dd>Current argument is the name of a linker script. Search for that file in the current list of directories to scan for libraries. If the file is located insert a <code>--script</code> option into the command line followed by the full path name found. If the file is not found then generate an error message. Note: the current working directory is not searched. </dd>\n<dt>\n<code>%e</code><var>str</var>\n</dt>\n<dd>Print <var>str</var> as an error message. <var>str</var> is terminated by a newline. Use this when inconsistent options are detected. </dd>\n<dt>\n<code>%(</code><var>name</var><code>)</code>\n</dt>\n<dd>Substitute the contents of spec string <var>name</var> at this point. </dd>\n<dt>\n<code>%x{</code><var>option</var><code>}</code>\n</dt>\n<dd>Accumulate an option for ‘<code>%X</code>’. </dd>\n<dt><code>%X</code></dt>\n<dd>Output the accumulated linker options specified by <code>-Wl</code> or a ‘<code>%x</code>’ spec string. </dd>\n<dt><code>%Y</code></dt>\n<dd>Output the accumulated assembler options specified by <code>-Wa</code>. </dd>\n<dt><code>%Z</code></dt>\n<dd>Output the accumulated preprocessor options specified by <code>-Wp</code>. </dd>\n<dt><code>%a</code></dt>\n<dd>Process the <code>asm</code> spec. This is used to compute the switches to be passed to the assembler. </dd>\n<dt><code>%A</code></dt>\n<dd>Process the <code>asm_final</code> spec. This is a spec string for passing switches to an assembler post-processor, if such a program is needed. </dd>\n<dt><code>%l</code></dt>\n<dd>Process the <code>link</code> spec. This is the spec for computing the command line passed to the linker. Typically it makes use of the ‘<code>%L %G %S %D and %E</code>’ sequences. </dd>\n<dt><code>%D</code></dt>\n<dd>Dump out a <code>-L</code> option for each directory that GCC believes might contain startup files. If the target supports multilibs then the current multilib directory is prepended to each of these paths. </dd>\n<dt><code>%L</code></dt>\n<dd>Process the <code>lib</code> spec. This is a spec string for deciding which libraries are included on the command line to the linker. </dd>\n<dt><code>%G</code></dt>\n<dd>Process the <code>libgcc</code> spec. This is a spec string for deciding which GCC support library is included on the command line to the linker. </dd>\n<dt><code>%S</code></dt>\n<dd>Process the <code>startfile</code> spec. This is a spec for deciding which object files are the first ones passed to the linker. Typically this might be a file named <code>crt0.o</code>. </dd>\n<dt><code>%E</code></dt>\n<dd>Process the <code>endfile</code> spec. This is a spec string that specifies the last object files that are passed to the linker. </dd>\n<dt><code>%C</code></dt>\n<dd>Process the <code>cpp</code> spec. This is used to construct the arguments to be passed to the C preprocessor. </dd>\n<dt><code>%1</code></dt>\n<dd>Process the <code>cc1</code> spec. This is used to construct the options to be passed to the actual C compiler (‘<code>cc1</code>’). </dd>\n<dt><code>%2</code></dt>\n<dd>Process the <code>cc1plus</code> spec. This is used to construct the options to be passed to the actual C++ compiler (‘<code>cc1plus</code>’). </dd>\n<dt><code>%*</code></dt>\n<dd>Substitute the variable part of a matched option. See below. Note that each comma in the substituted string is replaced by a single space. </dd>\n<dt><code>%&lt;S</code></dt>\n<dd>Remove all occurrences of <code>-S</code> from the command line. Note—this command is position dependent. ‘<code>%</code>’ commands in the spec string before this one see <code>-S</code>, ‘<code>%</code>’ commands in the spec string after this one do not. </dd>\n<dt>\n<code>%:</code><var>function</var><code>(</code><var>args</var><code>)</code>\n</dt>\n<dd>Call the named function <var>function</var>, passing it <var>args</var>. <var>args</var> is first processed as a nested spec string, then split into an argument vector in the usual fashion. The function returns a string which is processed as if it had appeared literally as part of the current spec. <p>The following built-in spec functions are provided: </p>\n<dl> <dt><code>getenv</code></dt>\n<dd>The <code>getenv</code> spec function takes two arguments: an environment variable name and a string. If the environment variable is not defined, a fatal error is issued. Otherwise, the return value is the value of the environment variable concatenated with the string. For example, if <code>TOPDIR</code> is defined as <code>/path/to/top</code>, then: <pre class=\"smallexample\">%:getenv(TOPDIR /include)</pre> <p>expands to <code>/path/to/top/include</code>. </p>\n</dd>\n<dt><code>if-exists</code></dt>\n<dd>The <code>if-exists</code> spec function takes one argument, an absolute pathname to a file. If the file exists, <code>if-exists</code> returns the pathname. Here is a small example of its usage: <pre class=\"smallexample\">*startfile:\ncrt0%O%s %:if-exists(crti%O%s) crtbegin%O%s</pre> </dd>\n<dt><code>if-exists-else</code></dt>\n<dd>The <code>if-exists-else</code> spec function is similar to the <code>if-exists</code> spec function, except that it takes two arguments. The first argument is an absolute pathname to a file. If the file exists, <code>if-exists-else</code> returns the pathname. If it does not exist, it returns the second argument. This way, <code>if-exists-else</code> can be used to select one file or another, based on the existence of the first. Here is a small example of its usage: <pre class=\"smallexample\">*startfile:\ncrt0%O%s %:if-exists(crti%O%s) \\\n%:if-exists-else(crtbeginT%O%s crtbegin%O%s)</pre> </dd>\n<dt><code>replace-outfile</code></dt>\n<dd>The <code>replace-outfile</code> spec function takes two arguments. It looks for the first argument in the outfiles array and replaces it with the second argument. Here is a small example of its usage: <pre class=\"smallexample\">%{fgnu-runtime:%:replace-outfile(-lobjc -lobjc-gnu)}</pre> </dd>\n<dt><code>remove-outfile</code></dt>\n<dd>The <code>remove-outfile</code> spec function takes one argument. It looks for the first argument in the outfiles array and removes it. Here is a small example its usage: <pre class=\"smallexample\">%:remove-outfile(-lm)</pre> </dd>\n<dt><code>pass-through-libs</code></dt>\n<dd>The <code>pass-through-libs</code> spec function takes any number of arguments. It finds any <code>-l</code> options and any non-options ending in <code>.a</code> (which it assumes are the names of linker input library archive files) and returns a result containing all the found arguments each prepended by <code>-plugin-opt=-pass-through=</code> and joined by spaces. This list is intended to be passed to the LTO linker plugin. <pre class=\"smallexample\">%:pass-through-libs(%G %L %G)</pre> </dd>\n<dt><code>print-asm-header</code></dt>\n<dd>The <code>print-asm-header</code> function takes no arguments and simply prints a banner like: <pre class=\"smallexample\">Assembler options\n=================\n\nUse \"-Wa,OPTION\" to pass \"OPTION\" to the assembler.</pre> <p>It is used to separate compiler options from assembler options in the <code>--target-help</code> output. </p>\n</dd>\n</dl> </dd>\n<dt><code>%{S}</code></dt>\n<dd>Substitutes the <code>-S</code> switch, if that switch is given to GCC. If that switch is not specified, this substitutes nothing. Note that the leading dash is omitted when specifying this option, and it is automatically inserted if the substitution is performed. Thus the spec string ‘<code>%{foo}</code>’ matches the command-line option <code>-foo</code> and outputs the command-line option <code>-foo</code>. </dd>\n<dt><code>%W{S}</code></dt>\n<dd>Like %{<code>S</code>} but mark last argument supplied within as a file to be deleted on failure. </dd>\n<dt><code>%{S*}</code></dt>\n<dd>Substitutes all the switches specified to GCC whose names start with <code>-S</code>, but which also take an argument. This is used for switches like <code>-o</code>, <code>-D</code>, <code>-I</code>, etc. GCC considers <code>-o foo</code> as being one switch whose name starts with ‘<code>o</code>’. %{o*} substitutes this text, including the space. Thus two arguments are generated. </dd>\n<dt><code>%{S*&amp;T*}</code></dt>\n<dd>Like %{<code>S</code>*}, but preserve order of <code>S</code> and <code>T</code> options (the order of <code>S</code> and <code>T</code> in the spec is not significant). There can be any number of ampersand-separated variables; for each the wild card is optional. Useful for CPP as ‘<code>%{D*&amp;U*&amp;A*}</code>’. </dd>\n<dt><code>%{S:X}</code></dt>\n<dd>Substitutes <code>X</code>, if the <code>-S</code> switch is given to GCC. </dd>\n<dt><code>%{!S:X}</code></dt>\n<dd>Substitutes <code>X</code>, if the <code>-S</code> switch is <em>not</em> given to GCC. </dd>\n<dt><code>%{S*:X}</code></dt>\n<dd>Substitutes <code>X</code> if one or more switches whose names start with <code>-S</code> are specified to GCC. Normally <code>X</code> is substituted only once, no matter how many such switches appeared. However, if <code>%*</code> appears somewhere in <code>X</code>, then <code>X</code> is substituted once for each matching switch, with the <code>%*</code> replaced by the part of that switch matching the <code>*</code>. <p>If <code>%*</code> appears as the last part of a spec sequence then a space will be added after the end of the last substitution. If there is more text in the sequence however then a space will not be generated. This allows the <code>%*</code> substitution to be used as part of a larger string. For example, a spec string like this: </p>\n<pre class=\"smallexample\">%{mcu=*:--script=%*/memory.ld}</pre> <p>when matching an option like <code>-mcu=newchip</code> will produce: </p>\n<pre class=\"smallexample\">--script=newchip/memory.ld</pre> </dd>\n<dt><code>%{.S:X}</code></dt>\n<dd>Substitutes <code>X</code>, if processing a file with suffix <code>S</code>. </dd>\n<dt><code>%{!.S:X}</code></dt>\n<dd>Substitutes <code>X</code>, if <em>not</em> processing a file with suffix <code>S</code>. </dd>\n<dt><code>%{,S:X}</code></dt>\n<dd>Substitutes <code>X</code>, if processing a file for language <code>S</code>. </dd>\n<dt><code>%{!,S:X}</code></dt>\n<dd>Substitutes <code>X</code>, if not processing a file for language <code>S</code>. </dd>\n<dt><code>%{S|P:X}</code></dt>\n<dd>Substitutes <code>X</code> if either <code>-S</code> or <code>-P</code> is given to GCC. This may be combined with ‘<code>!</code>’, ‘<code>.</code>’, ‘<code>,</code>’, and <code>*</code> sequences as well, although they have a stronger binding than the ‘<code>|</code>’. If <code>%*</code> appears in <code>X</code>, all of the alternatives must be starred, and only the first matching alternative is substituted. <p>For example, a spec string like this: </p>\n<pre class=\"smallexample\">%{.c:-foo} %{!.c:-bar} %{.c|d:-baz} %{!.c|d:-boggle}</pre> <p class=\"noindent\">outputs the following command-line options from the following input command-line options: </p>\n<pre class=\"smallexample\">fred.c        -foo -baz\njim.d         -bar -boggle\n-d fred.c     -foo -baz -boggle\n-d jim.d      -bar -baz -boggle</pre> </dd>\n<dt><code>%{S:X; T:Y; :D}</code></dt>\n<dd> If <code>S</code> is given to GCC, substitutes <code>X</code>; else if <code>T</code> is given to GCC, substitutes <code>Y</code>; else substitutes <code>D</code>. There can be as many clauses as you need. This may be combined with <code>.</code>, <code>,</code>, <code>!</code>, <code>|</code>, and <code>*</code> as needed. </dd>\n</dl> <p>The conditional text <code>X</code> in a %{<code>S</code>:<code>X</code>} or similar construct may contain other nested ‘<code>%</code>’ constructs or spaces, or even newlines. They are processed as usual, as described above. Trailing white space in <code>X</code> is ignored. White space may also appear anywhere on the left side of the colon in these constructs, except between <code>.</code> or <code>*</code> and the corresponding word. </p>\n<p>The <code>-O</code>, <code>-f</code>, <code>-m</code>, and <code>-W</code> switches are handled specifically in these constructs. If another value of <code>-O</code> or the negated form of a <code>-f</code>, <code>-m</code>, or <code>-W</code> switch is found later in the command line, the earlier switch value is ignored, except with {<code>S</code>*} where <code>S</code> is just one letter, which passes all matching options. </p>\n<p>The character ‘<code>|</code>’ at the beginning of the predicate text is used to indicate that a command should be piped to the following command, but only if <code>-pipe</code> is specified. </p>\n<p>It is built into GCC which switches take arguments and which do not. (You might think it would be useful to generalize this to allow each compiler's spec to say which switches take arguments. But this cannot be done in a consistent fashion. GCC cannot even decide which input files have been specified without knowing which switches take arguments, and it must know which input files to compile in order to tell which compilers to run). </p>\n<p>GCC also knows implicitly that arguments starting in <code>-l</code> are to be treated as compiler output files, and passed to the linker in their proper position among the other output files.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Spec-Files.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Spec-Files.html</a>\n  </p>\n</div>\n","target-options":"<h1 class=\"section\" id=\"Target-Options\">3.16 Specifying Target Machine and Compiler Version</h1> <p> The usual way to run GCC is to run the executable called <code>gcc</code>, or <samp><var>machine</var><span class=\"command\">-gcc</span></samp> when cross-compiling, or <samp><var>machine</var><span class=\"command\">-gcc-</span><var>version</var></samp> to run a version other than the one that was installed last. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Target-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Target-Options.html</a>\n  </p>\n</div>\n","submodel-options":"<h1 class=\"section\" id=\"Submodel-Options\">3.17 Hardware Models and Configurations</h1> <p> Each target machine types can have its own special options, starting with ‘<code>-m</code>’, to choose among various hardware models or configurations—for example, 68010 vs 68020, floating coprocessor or none. A single installed version of the compiler can compile for any model or configuration, according to the options specified. </p>\n<p>Some configurations of the compiler also support additional special options, usually for compatibility with other compilers on the same platform.    </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"aarch64-options#AArch64-Options\">AArch64 Options</a> </li>\n<li>\n<a accesskey=\"2\" href=\"adapteva-epiphany-options#Adapteva-Epiphany-Options\">Adapteva Epiphany Options</a> </li>\n<li>\n<a accesskey=\"3\" href=\"arc-options#ARC-Options\">ARC Options</a> </li>\n<li>\n<a accesskey=\"4\" href=\"arm-options#ARM-Options\">ARM Options</a> </li>\n<li>\n<a accesskey=\"5\" href=\"avr-options#AVR-Options\">AVR Options</a> </li>\n<li>\n<a accesskey=\"6\" href=\"blackfin-options#Blackfin-Options\">Blackfin Options</a> </li>\n<li>\n<a accesskey=\"7\" href=\"c6x-options#C6X-Options\">C6X Options</a> </li>\n<li>\n<a accesskey=\"8\" href=\"cris-options#CRIS-Options\">CRIS Options</a> </li>\n<li>\n<a accesskey=\"9\" href=\"cr16-options#CR16-Options\">CR16 Options</a> </li>\n<li>\n<a href=\"darwin-options#Darwin-Options\">Darwin Options</a> </li>\n<li>\n<a href=\"dec-alpha-options#DEC-Alpha-Options\">DEC Alpha Options</a> </li>\n<li>\n<a href=\"fr30-options#FR30-Options\">FR30 Options</a> </li>\n<li>\n<a href=\"frv-options#FRV-Options\">FRV Options</a> </li>\n<li>\n<a href=\"gnu_002flinux-options#GNU_002fLinux-Options\">GNU/Linux Options</a> </li>\n<li>\n<a href=\"h8_002f300-options#H8_002f300-Options\">H8/300 Options</a> </li>\n<li>\n<a href=\"hppa-options#HPPA-Options\">HPPA Options</a> </li>\n<li>\n<a href=\"i386-and-x86_002d64-options#i386-and-x86_002d64-Options\">i386 and x86-64 Options</a> </li>\n<li>\n<a href=\"i386-and-x86_002d64-windows-options#i386-and-x86_002d64-Windows-Options\">i386 and x86-64 Windows Options</a> </li>\n<li>\n<a href=\"ia_002d64-options#IA_002d64-Options\">IA-64 Options</a> </li>\n<li>\n<a href=\"lm32-options#LM32-Options\">LM32 Options</a> </li>\n<li>\n<a href=\"m32c-options#M32C-Options\">M32C Options</a> </li>\n<li>\n<a href=\"m32r_002fd-options#M32R_002fD-Options\">M32R/D Options</a> </li>\n<li>\n<a href=\"m680x0-options#M680x0-Options\">M680x0 Options</a> </li>\n<li>\n<a href=\"mcore-options#MCore-Options\">MCore Options</a> </li>\n<li>\n<a href=\"mep-options#MeP-Options\">MeP Options</a> </li>\n<li>\n<a href=\"microblaze-options#MicroBlaze-Options\">MicroBlaze Options</a> </li>\n<li>\n<a href=\"mips-options#MIPS-Options\">MIPS Options</a> </li>\n<li>\n<a href=\"mmix-options#MMIX-Options\">MMIX Options</a> </li>\n<li>\n<a href=\"mn10300-options#MN10300-Options\">MN10300 Options</a> </li>\n<li>\n<a href=\"moxie-options#Moxie-Options\">Moxie Options</a> </li>\n<li>\n<a href=\"msp430-options#MSP430-Options\">MSP430 Options</a> </li>\n<li>\n<a href=\"nds32-options#NDS32-Options\">NDS32 Options</a> </li>\n<li>\n<a href=\"nios-ii-options#Nios-II-Options\">Nios II Options</a> </li>\n<li>\n<a href=\"pdp_002d11-options#PDP_002d11-Options\">PDP-11 Options</a> </li>\n<li>\n<a href=\"picochip-options#picoChip-Options\">picoChip Options</a> </li>\n<li>\n<a href=\"powerpc-options#PowerPC-Options\">PowerPC Options</a> </li>\n<li>\n<a href=\"rl78-options#RL78-Options\">RL78 Options</a> </li>\n<li>\n<a href=\"rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options\">RS/6000 and PowerPC Options</a> </li>\n<li>\n<a href=\"rx-options#RX-Options\">RX Options</a> </li>\n<li>\n<a href=\"s_002f390-and-zseries-options#S_002f390-and-zSeries-Options\">S/390 and zSeries Options</a> </li>\n<li>\n<a href=\"score-options#Score-Options\">Score Options</a> </li>\n<li>\n<a href=\"sh-options#SH-Options\">SH Options</a> </li>\n<li>\n<a href=\"solaris-2-options#Solaris-2-Options\">Solaris 2 Options</a> </li>\n<li>\n<a href=\"sparc-options#SPARC-Options\">SPARC Options</a> </li>\n<li>\n<a href=\"spu-options#SPU-Options\">SPU Options</a> </li>\n<li>\n<a href=\"system-v-options#System-V-Options\">System V Options</a> </li>\n<li>\n<a href=\"tile_002dgx-options#TILE_002dGx-Options\">TILE-Gx Options</a> </li>\n<li>\n<a href=\"tilepro-options#TILEPro-Options\">TILEPro Options</a> </li>\n<li>\n<a href=\"v850-options#V850-Options\">V850 Options</a> </li>\n<li>\n<a href=\"vax-options#VAX-Options\">VAX Options</a> </li>\n<li>\n<a href=\"vms-options#VMS-Options\">VMS Options</a> </li>\n<li>\n<a href=\"vxworks-options#VxWorks-Options\">VxWorks Options</a> </li>\n<li>\n<a href=\"x86_002d64-options#x86_002d64-Options\">x86-64 Options</a> </li>\n<li>\n<a href=\"xstormy16-options#Xstormy16-Options\">Xstormy16 Options</a> </li>\n<li>\n<a href=\"xtensa-options#Xtensa-Options\">Xtensa Options</a> </li>\n<li>\n<a href=\"zseries-options#zSeries-Options\">zSeries Options</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Submodel-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Submodel-Options.html</a>\n  </p>\n</div>\n","aarch64-options":"<h1 class=\"subsection\" id=\"AArch64-Options\">3.17.1 AArch64 Options</h1> <p> These options are defined for AArch64 implementations: </p>\n<dl> <dt>\n<code>-mabi=</code><var>name</var>\n</dt>\n<dd>\nGenerate code for the specified data model. Permissible values are ‘<code>ilp32</code>’ for SysV-like data model where int, long int and pointer are 32-bit, and ‘<code>lp64</code>’ for SysV-like data model where int is 32-bit, but long int and pointer are 64-bit. <p>The default depends on the specific target configuration. Note that the LP64 and ILP32 ABIs are not link-compatible; you must compile your entire program with the same ABI, and link with a compatible set of libraries. </p>\n</dd>\n<dt><code>-mbig-endian</code></dt>\n<dd>\nGenerate big-endian code. This is the default when GCC is configured for an ‘<code>aarch64_be-*-*</code>’ target. </dd>\n<dt><code>-mgeneral-regs-only</code></dt>\n<dd>\nGenerate code which uses only the general registers. </dd>\n<dt><code>-mlittle-endian</code></dt>\n<dd>\nGenerate little-endian code. This is the default when GCC is configured for an ‘<code>aarch64-*-*</code>’ but not an ‘<code>aarch64_be-*-*</code>’ target. </dd>\n<dt><code>-mcmodel=tiny</code></dt>\n<dd>\nGenerate code for the tiny code model. The program and its statically defined symbols must be within 1GB of each other. Pointers are 64 bits. Programs can be statically or dynamically linked. This model is not fully implemented and mostly treated as ‘<code>small</code>’. </dd>\n<dt><code>-mcmodel=small</code></dt>\n<dd>\nGenerate code for the small code model. The program and its statically defined symbols must be within 4GB of each other. Pointers are 64 bits. Programs can be statically or dynamically linked. This is the default code model. </dd>\n<dt><code>-mcmodel=large</code></dt>\n<dd>\nGenerate code for the large code model. This makes no assumptions about addresses and sizes of sections. Pointers are 64 bits. Programs can be statically linked only. </dd>\n<dt><code>-mstrict-align</code></dt>\n<dd>\nDo not assume that unaligned memory references will be handled by the system. </dd>\n<dt>\n<code>-momit-leaf-frame-pointer</code><dt><code>-mno-omit-leaf-frame-pointer</code></dt>\n</dt>\n<dd>\nOmit or keep the frame pointer in leaf functions. The former behaviour is the default. </dd>\n<dt><code>-mtls-dialect=desc</code></dt>\n<dd>\nUse TLS descriptors as the thread-local storage mechanism for dynamic accesses of TLS variables. This is the default. </dd>\n<dt><code>-mtls-dialect=traditional</code></dt>\n<dd>\nUse traditional TLS as the thread-local storage mechanism for dynamic accesses of TLS variables. </dd>\n<dt>\n<code>-mfix-cortex-a53-835769</code><dt><code>-mno-fix-cortex-a53-835769</code></dt>\n</dt>\n<dd>\nEnable or disable the workaround for the ARM Cortex-A53 erratum number 835769. This will involve inserting a NOP instruction between memory instructions and 64-bit integer multiply-accumulate instructions. </dd>\n<dt>\n<code>-mfix-cortex-a53-843419</code><dt><code>-mno-fix-cortex-a53-843419</code></dt>\n</dt>\n<dd>\nEnable or disable the workaround for the ARM Cortex-A53 erratum number 843419. This erratum workaround is made at link time and this will only pass the corresponding flag to the linker. </dd>\n<dt>\n<code>-march=</code><var>name</var>\n</dt>\n<dd>\nSpecify the name of the target architecture, optionally suffixed by one or more feature modifiers. This option has the form <samp><span class=\"option\">-march=</span><var>arch</var><span class=\"option\">{+[no]</span><var>feature</var><span class=\"option\">}*</span></samp>, where the only permissible value for <var>arch</var> is ‘<code>armv8-a</code>’. The permissible values for <var>feature</var> are documented in the sub-section below. <p>Where conflicting feature modifiers are specified, the right-most feature is used. </p>\n<p>GCC uses this name to determine what kind of instructions it can emit when generating assembly code. </p>\n<p>Where <code>-march</code> is specified without either of <code>-mtune</code> or <code>-mcpu</code> also being specified, the code will be tuned to perform well across a range of target processors implementing the target architecture. </p>\n</dd>\n<dt>\n<code>-mtune=</code><var>name</var>\n</dt>\n<dd>\nSpecify the name of the target processor for which GCC should tune the performance of the code. Permissible values for this option are: ‘<code>generic</code>’, ‘<code>cortex-a53</code>’, ‘<code>cortex-a57</code>’. <p>Additionally, this option can specify that GCC should tune the performance of the code for a big.LITTLE system. The only permissible value is ‘<code>cortex-a57.cortex-a53</code>’. </p>\n<p>Where none of <code>-mtune=</code>, <code>-mcpu=</code> or <code>-march=</code> are specified, the code will be tuned to perform well across a range of target processors. </p>\n<p>This option cannot be suffixed by feature modifiers. </p>\n</dd>\n<dt>\n<code>-mcpu=</code><var>name</var>\n</dt>\n<dd>\nSpecify the name of the target processor, optionally suffixed by one or more feature modifiers. This option has the form <samp><span class=\"option\">-mcpu=</span><var>cpu</var><span class=\"option\">{+[no]</span><var>feature</var><span class=\"option\">}*</span></samp>, where the permissible values for <var>cpu</var> are the same as those available for <code>-mtune</code>. <p>The permissible values for <var>feature</var> are documented in the sub-section below. </p>\n<p>Where conflicting feature modifiers are specified, the right-most feature is used. </p>\n<p>GCC uses this name to determine what kind of instructions it can emit when generating assembly code (as if by <code>-march</code>) and to determine the target processor for which to tune for performance (as if by <code>-mtune</code>). Where this option is used in conjunction with <code>-march</code> or <code>-mtune</code>, those options take precedence over the appropriate part of this option. </p>\n</dd>\n</dl> <h2 class=\"subsubsection\">3.17.1.1 <code>-march</code> and <code>-mcpu</code> feature modifiers</h2> <p>Feature modifiers used with <code>-march</code> and <code>-mcpu</code> can be one the following: </p>\n<dl> <dt>‘<code>crc</code>’</dt>\n<dd>Enable CRC extension. </dd>\n<dt>‘<code>crypto</code>’</dt>\n<dd>Enable Crypto extension. This implies Advanced SIMD is enabled. </dd>\n<dt>‘<code>fp</code>’</dt>\n<dd>Enable floating-point instructions. </dd>\n<dt>‘<code>simd</code>’</dt>\n<dd>Enable Advanced SIMD instructions. This implies floating-point instructions are enabled. This is the default for all current possible values for options <code>-march</code> and <code>-mcpu=</code>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/AArch64-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/AArch64-Options.html</a>\n  </p>\n</div>\n","adapteva-epiphany-options":"<h1 class=\"subsection\" id=\"Adapteva-Epiphany-Options\">3.17.2 Adapteva Epiphany Options</h1> <p>These ‘<code>-m</code>’ options are defined for Adapteva Epiphany: </p>\n<dl> <dt><code>-mhalf-reg-file</code></dt>\n<dd>\nDon't allocate any register in the range <code>r32</code><small class=\"dots\">...</small><code>r63</code>. That allows code to run on hardware variants that lack these registers. </dd>\n<dt><code>-mprefer-short-insn-regs</code></dt>\n<dd>\nPreferrentially allocate registers that allow short instruction generation. This can result in increased instruction count, so this may either reduce or increase overall code size. </dd>\n<dt>\n<code>-mbranch-cost=</code><var>num</var>\n</dt>\n<dd>\nSet the cost of branches to roughly <var>num</var> “simple” instructions. This cost is only a heuristic and is not guaranteed to produce consistent results across releases. </dd>\n<dt><code>-mcmove</code></dt>\n<dd>\nEnable the generation of conditional moves. </dd>\n<dt>\n<code>-mnops=</code><var>num</var>\n</dt>\n<dd>\nEmit <var>num</var> NOPs before every other generated instruction. </dd>\n<dt><code>-mno-soft-cmpsf</code></dt>\n<dd>\nFor single-precision floating-point comparisons, emit an <code>fsub</code> instruction and test the flags. This is faster than a software comparison, but can get incorrect results in the presence of NaNs, or when two different small numbers are compared such that their difference is calculated as zero. The default is <code>-msoft-cmpsf</code>, which uses slower, but IEEE-compliant, software comparisons. </dd>\n<dt>\n<code>-mstack-offset=</code><var>num</var>\n</dt>\n<dd>\nSet the offset between the top of the stack and the stack pointer. E.g., a value of 8 means that the eight bytes in the range <code>sp+0...sp+7</code> can be used by leaf functions without stack allocation. Values other than ‘<code>8</code>’ or ‘<code>16</code>’ are untested and unlikely to work. Note also that this option changes the ABI; compiling a program with a different stack offset than the libraries have been compiled with generally does not work. This option can be useful if you want to evaluate if a different stack offset would give you better code, but to actually use a different stack offset to build working programs, it is recommended to configure the toolchain with the appropriate <samp><span class=\"option\">--with-stack-offset=</span><var>num</var></samp> option. </dd>\n<dt><code>-mno-round-nearest</code></dt>\n<dd>\nMake the scheduler assume that the rounding mode has been set to truncating. The default is <code>-mround-nearest</code>. </dd>\n<dt><code>-mlong-calls</code></dt>\n<dd>\nIf not otherwise specified by an attribute, assume all calls might be beyond the offset range of the <code>b</code> / <code>bl</code> instructions, and therefore load the function address into a register before performing a (otherwise direct) call. This is the default. </dd>\n<dt><code>-mshort-calls</code></dt>\n<dd>\nIf not otherwise specified by an attribute, assume all direct calls are in the range of the <code>b</code> / <code>bl</code> instructions, so use these instructions for direct calls. The default is <code>-mlong-calls</code>. </dd>\n<dt><code>-msmall16</code></dt>\n<dd>\nAssume addresses can be loaded as 16-bit unsigned values. This does not apply to function addresses for which <code>-mlong-calls</code> semantics are in effect. </dd>\n<dt>\n<code>-mfp-mode=</code><var>mode</var>\n</dt>\n<dd>\nSet the prevailing mode of the floating-point unit. This determines the floating-point mode that is provided and expected at function call and return time. Making this mode match the mode you predominantly need at function start can make your programs smaller and faster by avoiding unnecessary mode switches. <p><var>mode</var> can be set to one the following values: </p>\n<dl> <dt>‘<code>caller</code>’</dt>\n<dd>Any mode at function entry is valid, and retained or restored when the function returns, and when it calls other functions. This mode is useful for compiling libraries or other compilation units you might want to incorporate into different programs with different prevailing FPU modes, and the convenience of being able to use a single object file outweighs the size and speed overhead for any extra mode switching that might be needed, compared with what would be needed with a more specific choice of prevailing FPU mode. </dd>\n<dt>‘<code>truncate</code>’</dt>\n<dd>This is the mode used for floating-point calculations with truncating (i.e. round towards zero) rounding mode. That includes conversion from floating point to integer. </dd>\n<dt>‘<code>round-nearest</code>’</dt>\n<dd>This is the mode used for floating-point calculations with round-to-nearest-or-even rounding mode. </dd>\n<dt>‘<code>int</code>’</dt>\n<dd>This is the mode used to perform integer calculations in the FPU, e.g. integer multiply, or integer multiply-and-accumulate. </dd>\n</dl> <p>The default is <code>-mfp-mode=caller</code> </p>\n</dd>\n<dt>\n<code>-mnosplit-lohi</code><dt>\n<code>-mno-postinc</code><dt><code>-mno-postmodify</code></dt>\n</dt>\n</dt>\n<dd>\nCode generation tweaks that disable, respectively, splitting of 32-bit loads, generation of post-increment addresses, and generation of post-modify addresses. The defaults are <code>msplit-lohi</code>, <code>-mpost-inc</code>, and <code>-mpost-modify</code>. </dd>\n<dt><code>-mnovect-double</code></dt>\n<dd>\nChange the preferred SIMD mode to SImode. The default is <code>-mvect-double</code>, which uses DImode as preferred SIMD mode. </dd>\n<dt>\n<code>-max-vect-align=</code><var>num</var>\n</dt>\n<dd>\nThe maximum alignment for SIMD vector mode types. <var>num</var> may be 4 or 8. The default is 8. Note that this is an ABI change, even though many library function interfaces are unaffected if they don't use SIMD vector modes in places that affect size and/or alignment of relevant types. </dd>\n<dt><code>-msplit-vecmove-early</code></dt>\n<dd>\nSplit vector moves into single word moves before reload. In theory this can give better register allocation, but so far the reverse seems to be generally the case. </dd>\n<dt>\n<code>-m1reg-</code><var>reg</var>\n</dt>\n<dd>\nSpecify a register to hold the constant −1, which makes loading small negative constants and certain bitmasks faster. Allowable values for <var>reg</var> are ‘<code>r43</code>’ and ‘<code>r63</code>’, which specify use of that register as a fixed register, and ‘<code>none</code>’, which means that no register is used for this purpose. The default is <code>-m1reg-none</code>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Adapteva-Epiphany-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Adapteva-Epiphany-Options.html</a>\n  </p>\n</div>\n","arc-options":"<h1 class=\"subsection\" id=\"ARC-Options\">3.17.3 ARC Options</h1> <p> The following options control the architecture variant for which code is being compiled:  </p>\n<dl> <dt><code>-mbarrel-shifter</code></dt>\n<dd>\nGenerate instructions supported by barrel shifter. This is the default unless ‘<code>-mcpu=ARC601</code>’ is in effect. </dd>\n<dt>\n<code>-mcpu=</code><var>cpu</var>\n</dt>\n<dd>\nSet architecture type, register usage, and instruction scheduling parameters for <var>cpu</var>. There are also shortcut alias options available for backward compatibility and convenience. Supported values for <var>cpu</var> are   <dl>\n<dt>‘<code>ARC600</code>’</dt>\n<dd>Compile for ARC600. Aliases: <code>-mA6</code>, <code>-mARC600</code>. </dd>\n<dt>‘<code>ARC601</code>’</dt>\n<dd>\nCompile for ARC601. Alias: <code>-mARC601</code>. </dd>\n<dt>‘<code>ARC700</code>’</dt>\n<dd>\nCompile for ARC700. Aliases: <code>-mA7</code>, <code>-mARC700</code>. This is the default when configured with ‘<code>--with-cpu=arc700</code>’. </dd>\n</dl> </dd>\n<dt><code>-mdpfp</code></dt>\n\n<dt><code>-mdpfp-compact</code></dt>\n<dd>\nFPX: Generate Double Precision FPX instructions, tuned for the compact implementation. </dd>\n<dt><code>-mdpfp-fast</code></dt>\n<dd>\nFPX: Generate Double Precision FPX instructions, tuned for the fast implementation. </dd>\n<dt><code>-mno-dpfp-lrsr</code></dt>\n<dd>\nDisable LR and SR instructions from using FPX extension aux registers. </dd>\n<dt><code>-mea</code></dt>\n<dd>\nGenerate Extended arithmetic instructions. Currently only <code>divaw</code>, <code>adds</code>, <code>subs</code>, and <code>sat16</code> are supported. This is always enabled for ‘<code>-mcpu=ARC700</code>’. </dd>\n<dt><code>-mno-mpy</code></dt>\n<dd>\nDo not generate mpy instructions for ARC700. </dd>\n<dt><code>-mmul32x16</code></dt>\n<dd>\nGenerate 32x16 bit multiply and mac instructions. </dd>\n<dt><code>-mmul64</code></dt>\n<dd>\nGenerate mul64 and mulu64 instructions. Only valid for ‘<code>-mcpu=ARC600</code>’. </dd>\n<dt><code>-mnorm</code></dt>\n<dd>\nGenerate norm instruction. This is the default if ‘<code>-mcpu=ARC700</code>’ is in effect. </dd>\n<dt><code>-mspfp</code></dt>\n\n<dt><code>-mspfp-compact</code></dt>\n<dd>\nFPX: Generate Single Precision FPX instructions, tuned for the compact implementation. </dd>\n<dt><code>-mspfp-fast</code></dt>\n<dd>\nFPX: Generate Single Precision FPX instructions, tuned for the fast implementation. </dd>\n<dt><code>-msimd</code></dt>\n<dd>\nEnable generation of ARC SIMD instructions via target-specific builtins. Only valid for ‘<code>-mcpu=ARC700</code>’. </dd>\n<dt><code>-msoft-float</code></dt>\n<dd>\nThis option ignored; it is provided for compatibility purposes only. Software floating point code is emitted by default, and this default can overridden by FPX options; ‘<code>mspfp</code>’, ‘<code>mspfp-compact</code>’, or ‘<code>mspfp-fast</code>’ for single precision, and ‘<code>mdpfp</code>’, ‘<code>mdpfp-compact</code>’, or ‘<code>mdpfp-fast</code>’ for double precision. </dd>\n<dt><code>-mswap</code></dt>\n<dd>\nGenerate swap instructions. </dd>\n</dl> <p>The following options are passed through to the assembler, and also define preprocessor macro symbols.   </p>\n<dl> <dt><code>-mdsp-packa</code></dt>\n<dd>\nPassed down to the assembler to enable the DSP Pack A extensions. Also sets the preprocessor symbol <code>__Xdsp_packa</code>. </dd>\n<dt><code>-mdvbf</code></dt>\n<dd>\nPassed down to the assembler to enable the dual viterbi butterfly extension. Also sets the preprocessor symbol <code>__Xdvbf</code>.  </dd>\n<dt><code>-mlock</code></dt>\n<dd>\nPassed down to the assembler to enable the Locked Load/Store Conditional extension. Also sets the preprocessor symbol <code>__Xlock</code>. </dd>\n<dt><code>-mmac-d16</code></dt>\n<dd>\nPassed down to the assembler. Also sets the preprocessor symbol <code>__Xxmac_d16</code>. </dd>\n<dt><code>-mmac-24</code></dt>\n<dd>\nPassed down to the assembler. Also sets the preprocessor symbol <code>__Xxmac_24</code>.  </dd>\n<dt><code>-mrtsc</code></dt>\n<dd>\nPassed down to the assembler to enable the 64-bit Time-Stamp Counter extension instruction. Also sets the preprocessor symbol <code>__Xrtsc</code>.  </dd>\n<dt><code>-mswape</code></dt>\n<dd>\nPassed down to the assembler to enable the swap byte ordering extension instruction. Also sets the preprocessor symbol <code>__Xswape</code>. </dd>\n<dt><code>-mtelephony</code></dt>\n<dd>\nPassed down to the assembler to enable dual and single operand instructions for telephony. Also sets the preprocessor symbol <code>__Xtelephony</code>. </dd>\n<dt><code>-mxy</code></dt>\n<dd>\nPassed down to the assembler to enable the XY Memory extension. Also sets the preprocessor symbol <code>__Xxy</code>. </dd>\n</dl> <p>The following options control how the assembly code is annotated:  </p>\n<dl> <dt><code>-misize</code></dt>\n<dd>\nAnnotate assembler instructions with estimated addresses. </dd>\n<dt><code>-mannotate-align</code></dt>\n<dd>\nExplain what alignment considerations lead to the decision to make an instruction short or long. </dd>\n</dl> <p>The following options are passed through to the linker:  </p>\n<dl> <dt><code>-marclinux</code></dt>\n<dd>\nPassed through to the linker, to specify use of the <code>arclinux</code> emulation. This option is enabled by default in tool chains built for <code>arc-linux-uclibc</code> and <code>arceb-linux-uclibc</code> targets when profiling is not requested. </dd>\n<dt><code>-marclinux_prof</code></dt>\n<dd>\nPassed through to the linker, to specify use of the <code>arclinux_prof</code> emulation. This option is enabled by default in tool chains built for <code>arc-linux-uclibc</code> and <code>arceb-linux-uclibc</code> targets when profiling is requested. </dd>\n</dl> <p>The following options control the semantics of generated code:  </p>\n<dl> <dt><code>-mepilogue-cfi</code></dt>\n<dd>\nEnable generation of call frame information for epilogues. </dd>\n<dt><code>-mno-epilogue-cfi</code></dt>\n<dd>\nDisable generation of call frame information for epilogues. </dd>\n<dt><code>-mlong-calls</code></dt>\n<dd>\nGenerate call insns as register indirect calls, thus providing access to the full 32-bit address range. </dd>\n<dt><code>-mmedium-calls</code></dt>\n<dd>\nDon't use less than 25 bit addressing range for calls, which is the offset available for an unconditional branch-and-link instruction. Conditional execution of function calls is suppressed, to allow use of the 25-bit range, rather than the 21-bit range with conditional branch-and-link. This is the default for tool chains built for <code>arc-linux-uclibc</code> and <code>arceb-linux-uclibc</code> targets. </dd>\n<dt><code>-mno-sdata</code></dt>\n<dd>\nDo not generate sdata references. This is the default for tool chains built for <code>arc-linux-uclibc</code> and <code>arceb-linux-uclibc</code> targets. </dd>\n<dt><code>-mucb-mcount</code></dt>\n<dd>\nInstrument with mcount calls as used in UCB code. I.e. do the counting in the callee, not the caller. By default ARC instrumentation counts in the caller. </dd>\n<dt><code>-mvolatile-cache</code></dt>\n<dd>\nUse ordinarily cached memory accesses for volatile references. This is the default. </dd>\n<dt><code>-mno-volatile-cache</code></dt>\n<dd>\nEnable cache bypass for volatile references. </dd>\n</dl> <p>The following options fine tune code generation:  </p>\n<dl> <dt><code>-malign-call</code></dt>\n<dd>\nDo alignment optimizations for call instructions. </dd>\n<dt><code>-mauto-modify-reg</code></dt>\n<dd>\nEnable the use of pre/post modify with register displacement. </dd>\n<dt><code>-mbbit-peephole</code></dt>\n<dd>\nEnable bbit peephole2. </dd>\n<dt><code>-mno-brcc</code></dt>\n<dd>\nThis option disables a target-specific pass in <code>arc_reorg</code> to generate <code>BRcc</code> instructions. It has no effect on <code>BRcc</code> generation driven by the combiner pass. </dd>\n<dt><code>-mcase-vector-pcrel</code></dt>\n<dd>\nUse pc-relative switch case tables - this enables case table shortening. This is the default for <code>-Os</code>. </dd>\n<dt><code>-mcompact-casesi</code></dt>\n<dd>\nEnable compact casesi pattern. This is the default for <code>-Os</code>. </dd>\n<dt><code>-mno-cond-exec</code></dt>\n<dd>\nDisable ARCompact specific pass to generate conditional execution instructions. Due to delay slot scheduling and interactions between operand numbers, literal sizes, instruction lengths, and the support for conditional execution, the target-independent pass to generate conditional execution is often lacking, so the ARC port has kept a special pass around that tries to find more conditional execution generating opportunities after register allocation, branch shortening, and delay slot scheduling have been done. This pass generally, but not always, improves performance and code size, at the cost of extra compilation time, which is why there is an option to switch it off. If you have a problem with call instructions exceeding their allowable offset range because they are conditionalized, you should consider using <code>-mmedium-calls</code> instead. </dd>\n<dt><code>-mearly-cbranchsi</code></dt>\n<dd>\nEnable pre-reload use of the cbranchsi pattern. </dd>\n<dt><code>-mexpand-adddi</code></dt>\n<dd>\nExpand <code>adddi3</code> and <code>subdi3</code> at rtl generation time into <code>add.f</code>, <code>adc</code> etc. </dd>\n<dt><code>-mindexed-loads</code></dt>\n<dd>\nEnable the use of indexed loads. This can be problematic because some optimizers will then assume the that indexed stores exist, which is not the case. </dd>\n<dt><code>-mlra</code></dt>\n<dd>\nEnable Local Register Allocation. This is still experimental for ARC, so by default the compiler uses standard reload (i.e. ‘<code>-mno-lra</code>’). </dd>\n<dt><code>-mlra-priority-none</code></dt>\n<dd>\nDon't indicate any priority for target registers. </dd>\n<dt><code>-mlra-priority-compact</code></dt>\n<dd>\nIndicate target register priority for r0..r3 / r12..r15. </dd>\n<dt><code>-mlra-priority-noncompact</code></dt>\n<dd>\nReduce target regsiter priority for r0..r3 / r12..r15. </dd>\n<dt><code>-mno-millicode</code></dt>\n<dd>\nWhen optimizing for size (using <code>-Os</code>), prologues and epilogues that have to save or restore a large number of registers are often shortened by using call to a special function in libgcc; this is referred to as a <em>millicode</em> call. As these calls can pose performance issues, and/or cause linking issues when linking in a nonstandard way, this option is provided to turn off millicode call generation. </dd>\n<dt><code>-mmixed-code</code></dt>\n<dd>\nTweak register allocation to help 16-bit instruction generation. This generally has the effect of decreasing the average instruction size while increasing the instruction count. </dd>\n<dt><code>-mq-class</code></dt>\n<dd>\nEnable 'q' instruction alternatives. This is the default for <code>-Os</code>. </dd>\n<dt><code>-mRcq</code></dt>\n<dd>\nEnable Rcq constraint handling - most short code generation depends on this. This is the default. </dd>\n<dt><code>-mRcw</code></dt>\n<dd>\nEnable Rcw constraint handling - ccfsm condexec mostly depends on this. This is the default. </dd>\n<dt>\n<code>-msize-level=</code><var>level</var>\n</dt>\n<dd>\nFine-tune size optimization with regards to instruction lengths and alignment. The recognized values for <var>level</var> are: <dl> <dt>‘<code>0</code>’</dt>\n<dd>No size optimization. This level is deprecated and treated like ‘<code>1</code>’. </dd>\n<dt>‘<code>1</code>’</dt>\n<dd>Short instructions are used opportunistically. </dd>\n<dt>‘<code>2</code>’</dt>\n<dd>In addition, alignment of loops and of code after barriers are dropped. </dd>\n<dt>‘<code>3</code>’</dt>\n<dd>In addition, optional data alignment is dropped, and the option <code>Os</code> is enabled. </dd>\n</dl> <p>This defaults to ‘<code>3</code>’ when <code>-Os</code> is in effect. Otherwise, the behavior when this is not set is equivalent to level ‘<code>1</code>’. </p>\n</dd>\n<dt>\n<code>-mtune=</code><var>cpu</var>\n</dt>\n<dd>\nSet instruction scheduling parameters for <var>cpu</var>, overriding any implied by <code>-mcpu=</code>. <p>Supported values for <var>cpu</var> are </p>\n<dl> <dt>‘<code>ARC600</code>’</dt>\n<dd>Tune for ARC600 cpu. </dd>\n<dt>‘<code>ARC601</code>’</dt>\n<dd>Tune for ARC601 cpu. </dd>\n<dt>‘<code>ARC700</code>’</dt>\n<dd>Tune for ARC700 cpu with standard multiplier block. </dd>\n<dt>‘<code>ARC700-xmac</code>’</dt>\n<dd>Tune for ARC700 cpu with XMAC block. </dd>\n<dt>‘<code>ARC725D</code>’</dt>\n<dd>Tune for ARC725D cpu. </dd>\n<dt>‘<code>ARC750D</code>’</dt>\n<dd>Tune for ARC750D cpu. </dd>\n</dl> </dd>\n<dt>\n<code>-mmultcost=</code><var>num</var>\n</dt>\n<dd>\nCost to assume for a multiply instruction, with ‘<code>4</code>’ being equal to a normal instruction. </dd>\n<dt>\n<code>-munalign-prob-threshold=</code><var>probability</var>\n</dt>\n<dd>\nSet probability threshold for unaligning branches. When tuning for ‘<code>ARC700</code>’ and optimizing for speed, branches without filled delay slot are preferably emitted unaligned and long, unless profiling indicates that the probability for the branch to be taken is below <var>probability</var>. See <a href=\"cross_002dprofiling#Cross_002dprofiling\">Cross-profiling</a>. The default is (REG_BR_PROB_BASE/2), i.e. 5000. </dd>\n</dl> <p>The following options are maintained for backward compatibility, but are now deprecated and will be removed in a future release:  </p>\n<dl> <dt><code>-margonaut</code></dt>\n<dd>\nObsolete FPX. </dd>\n<dt><code>-mbig-endian</code></dt>\n\n<dt><code>-EB</code></dt>\n<dd>\nCompile code for big endian targets. Use of these options is now deprecated. Users wanting big-endian code, should use the <code>arceb-elf32</code> and <code>arceb-linux-uclibc</code> targets when building the tool chain, for which big-endian is the default. </dd>\n<dt><code>-mlittle-endian</code></dt>\n\n<dt><code>-EL</code></dt>\n<dd>\nCompile code for little endian targets. Use of these options is now deprecated. Users wanting little-endian code should use the <code>arc-elf32</code> and <code>arc-linux-uclibc</code> targets when building the tool chain, for which little-endian is the default. </dd>\n<dt><code>-mbarrel_shifter</code></dt>\n<dd>\nReplaced by ‘<code>-mbarrel-shifter</code>’ </dd>\n<dt><code>-mdpfp_compact</code></dt>\n<dd>\nReplaced by ‘<code>-mdpfp-compact</code>’ </dd>\n<dt><code>-mdpfp_fast</code></dt>\n<dd>\nReplaced by ‘<code>-mdpfp-fast</code>’ </dd>\n<dt><code>-mdsp_packa</code></dt>\n<dd>\nReplaced by ‘<code>-mdsp-packa</code>’ </dd>\n<dt><code>-mEA</code></dt>\n<dd>\nReplaced by ‘<code>-mea</code>’ </dd>\n<dt><code>-mmac_24</code></dt>\n<dd>\nReplaced by ‘<code>-mmac-24</code>’ </dd>\n<dt><code>-mmac_d16</code></dt>\n<dd>\nReplaced by ‘<code>-mmac-d16</code>’ </dd>\n<dt><code>-mspfp_compact</code></dt>\n<dd>\nReplaced by ‘<code>-mspfp-compact</code>’ </dd>\n<dt><code>-mspfp_fast</code></dt>\n<dd>\nReplaced by ‘<code>-mspfp-fast</code>’ </dd>\n<dt>\n<code>-mtune=</code><var>cpu</var>\n</dt>\n<dd>\nValues ‘<code>arc600</code>’, ‘<code>arc601</code>’, ‘<code>arc700</code>’ and ‘<code>arc700-xmac</code>’ for <var>cpu</var> are replaced by ‘<code>ARC600</code>’, ‘<code>ARC601</code>’, ‘<code>ARC700</code>’ and ‘<code>ARC700-xmac</code>’ respectively </dd>\n<dt>\n<code>-multcost=</code><var>num</var>\n</dt>\n<dd>\nReplaced by ‘<code>-mmultcost</code>’. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARC-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARC-Options.html</a>\n  </p>\n</div>\n","arm-options":"<h1 class=\"subsection\" id=\"ARM-Options\">3.17.4 ARM Options</h1> <p> These ‘<code>-m</code>’ options are defined for Advanced RISC Machines (ARM) architectures: </p>\n<dl> <dt>\n<code>-mabi=</code><var>name</var>\n</dt>\n<dd>\nGenerate code for the specified ABI. Permissible values are: ‘<code>apcs-gnu</code>’, ‘<code>atpcs</code>’, ‘<code>aapcs</code>’, ‘<code>aapcs-linux</code>’ and ‘<code>iwmmxt</code>’. </dd>\n<dt><code>-mapcs-frame</code></dt>\n<dd>\nGenerate a stack frame that is compliant with the ARM Procedure Call Standard for all functions, even if this is not strictly necessary for correct execution of the code. Specifying <code>-fomit-frame-pointer</code> with this option causes the stack frames not to be generated for leaf functions. The default is <code>-mno-apcs-frame</code>. </dd>\n<dt><code>-mapcs</code></dt>\n<dd>\nThis is a synonym for <code>-mapcs-frame</code>. </dd>\n<dt><code>-mthumb-interwork</code></dt>\n<dd>\nGenerate code that supports calling between the ARM and Thumb instruction sets. Without this option, on pre-v5 architectures, the two instruction sets cannot be reliably used inside one program. The default is <code>-mno-thumb-interwork</code>, since slightly larger code is generated when <code>-mthumb-interwork</code> is specified. In AAPCS configurations this option is meaningless. </dd>\n<dt><code>-mno-sched-prolog</code></dt>\n<dd>\nPrevent the reordering of instructions in the function prologue, or the merging of those instruction with the instructions in the function's body. This means that all functions start with a recognizable set of instructions (or in fact one of a choice from a small set of different function prologues), and this information can be used to locate the start of functions inside an executable piece of code. The default is <code>-msched-prolog</code>. </dd>\n<dt>\n<code>-mfloat-abi=</code><var>name</var>\n</dt>\n<dd>\nSpecifies which floating-point ABI to use. Permissible values are: ‘<code>soft</code>’, ‘<code>softfp</code>’ and ‘<code>hard</code>’. <p>Specifying ‘<code>soft</code>’ causes GCC to generate output containing library calls for floating-point operations. ‘<code>softfp</code>’ allows the generation of code using hardware floating-point instructions, but still uses the soft-float calling conventions. ‘<code>hard</code>’ allows generation of floating-point instructions and uses FPU-specific calling conventions. </p>\n<p>The default depends on the specific target configuration. Note that the hard-float and soft-float ABIs are not link-compatible; you must compile your entire program with the same ABI, and link with a compatible set of libraries. </p>\n</dd>\n<dt><code>-mlittle-endian</code></dt>\n<dd>\nGenerate code for a processor running in little-endian mode. This is the default for all standard configurations. </dd>\n<dt><code>-mbig-endian</code></dt>\n<dd>\nGenerate code for a processor running in big-endian mode; the default is to compile code for a little-endian processor. </dd>\n<dt><code>-mwords-little-endian</code></dt>\n<dd>\nThis option only applies when generating code for big-endian processors. Generate code for a little-endian word order but a big-endian byte order. That is, a byte order of the form ‘<code>32107654</code>’. Note: this option should only be used if you require compatibility with code for big-endian ARM processors generated by versions of the compiler prior to 2.8. This option is now deprecated. </dd>\n<dt>\n<code>-march=</code><var>name</var>\n</dt>\n<dd>\nThis specifies the name of the target ARM architecture. GCC uses this name to determine what kind of instructions it can emit when generating assembly code. This option can be used in conjunction with or instead of the <code>-mcpu=</code> option. Permissible names are: ‘<code>armv2</code>’, ‘<code>armv2a</code>’, ‘<code>armv3</code>’, ‘<code>armv3m</code>’, ‘<code>armv4</code>’, ‘<code>armv4t</code>’, ‘<code>armv5</code>’, ‘<code>armv5t</code>’, ‘<code>armv5e</code>’, ‘<code>armv5te</code>’, ‘<code>armv6</code>’, ‘<code>armv6j</code>’, ‘<code>armv6t2</code>’, ‘<code>armv6z</code>’, ‘<code>armv6zk</code>’, ‘<code>armv6-m</code>’, ‘<code>armv7</code>’, ‘<code>armv7-a</code>’, ‘<code>armv7-r</code>’, ‘<code>armv7-m</code>’, ‘<code>armv7e-m</code>’, ‘<code>armv7ve</code>’, ‘<code>armv8-a</code>’, ‘<code>armv8-a+crc</code>’, ‘<code>iwmmxt</code>’, ‘<code>iwmmxt2</code>’, ‘<code>ep9312</code>’. <p><code>-march=armv7ve</code> is the armv7-a architecture with virtualization extensions. </p>\n<p><code>-march=armv8-a+crc</code> enables code generation for the ARMv8-A architecture together with the optional CRC32 extensions. </p>\n<p><code>-march=native</code> causes the compiler to auto-detect the architecture of the build computer. At present, this feature is only supported on GNU/Linux, and not all architectures are recognized. If the auto-detect is unsuccessful the option has no effect. </p>\n</dd>\n<dt>\n<code>-mtune=</code><var>name</var>\n</dt>\n<dd>\nThis option specifies the name of the target ARM processor for which GCC should tune the performance of the code. For some ARM implementations better performance can be obtained by using this option. Permissible names are: ‘<code>arm2</code>’, ‘<code>arm250</code>’, ‘<code>arm3</code>’, ‘<code>arm6</code>’, ‘<code>arm60</code>’, ‘<code>arm600</code>’, ‘<code>arm610</code>’, ‘<code>arm620</code>’, ‘<code>arm7</code>’, ‘<code>arm7m</code>’, ‘<code>arm7d</code>’, ‘<code>arm7dm</code>’, ‘<code>arm7di</code>’, ‘<code>arm7dmi</code>’, ‘<code>arm70</code>’, ‘<code>arm700</code>’, ‘<code>arm700i</code>’, ‘<code>arm710</code>’, ‘<code>arm710c</code>’, ‘<code>arm7100</code>’, ‘<code>arm720</code>’, ‘<code>arm7500</code>’, ‘<code>arm7500fe</code>’, ‘<code>arm7tdmi</code>’, ‘<code>arm7tdmi-s</code>’, ‘<code>arm710t</code>’, ‘<code>arm720t</code>’, ‘<code>arm740t</code>’, ‘<code>strongarm</code>’, ‘<code>strongarm110</code>’, ‘<code>strongarm1100</code>’, ‘<code>strongarm1110</code>’, ‘<code>arm8</code>’, ‘<code>arm810</code>’, ‘<code>arm9</code>’, ‘<code>arm9e</code>’, ‘<code>arm920</code>’, ‘<code>arm920t</code>’, ‘<code>arm922t</code>’, ‘<code>arm946e-s</code>’, ‘<code>arm966e-s</code>’, ‘<code>arm968e-s</code>’, ‘<code>arm926ej-s</code>’, ‘<code>arm940t</code>’, ‘<code>arm9tdmi</code>’, ‘<code>arm10tdmi</code>’, ‘<code>arm1020t</code>’, ‘<code>arm1026ej-s</code>’, ‘<code>arm10e</code>’, ‘<code>arm1020e</code>’, ‘<code>arm1022e</code>’, ‘<code>arm1136j-s</code>’, ‘<code>arm1136jf-s</code>’, ‘<code>mpcore</code>’, ‘<code>mpcorenovfp</code>’, ‘<code>arm1156t2-s</code>’, ‘<code>arm1156t2f-s</code>’, ‘<code>arm1176jz-s</code>’, ‘<code>arm1176jzf-s</code>’, ‘<code>cortex-a5</code>’, ‘<code>cortex-a7</code>’, ‘<code>cortex-a8</code>’, ‘<code>cortex-a9</code>’, ‘<code>cortex-a12</code>’, ‘<code>cortex-a15</code>’, ‘<code>cortex-a53</code>’, ‘<code>cortex-a57</code>’, ‘<code>cortex-r4</code>’, ‘<code>cortex-r4f</code>’, ‘<code>cortex-r5</code>’, ‘<code>cortex-r7</code>’, ‘<code>cortex-m4</code>’, ‘<code>cortex-m3</code>’, ‘<code>cortex-m1</code>’, ‘<code>cortex-m0</code>’, ‘<code>cortex-m0plus</code>’, ‘<code>marvell-pj4</code>’, ‘<code>xscale</code>’, ‘<code>iwmmxt</code>’, ‘<code>iwmmxt2</code>’, ‘<code>ep9312</code>’, ‘<code>fa526</code>’, ‘<code>fa626</code>’, ‘<code>fa606te</code>’, ‘<code>fa626te</code>’, ‘<code>fmp626</code>’, ‘<code>fa726te</code>’. <p>Additionally, this option can specify that GCC should tune the performance of the code for a big.LITTLE system. Permissible names are: ‘<code>cortex-a15.cortex-a7</code>’, ‘<code>cortex-a57.cortex-a53</code>’. </p>\n<p><samp><span class=\"option\">-mtune=generic-</span><var>arch</var></samp> specifies that GCC should tune the performance for a blend of processors within architecture <var>arch</var>. The aim is to generate code that run well on the current most popular processors, balancing between optimizations that benefit some CPUs in the range, and avoiding performance pitfalls of other CPUs. The effects of this option may change in future GCC versions as CPU models come and go. </p>\n<p><code>-mtune=native</code> causes the compiler to auto-detect the CPU of the build computer. At present, this feature is only supported on GNU/Linux, and not all architectures are recognized. If the auto-detect is unsuccessful the option has no effect. </p>\n</dd>\n<dt>\n<code>-mcpu=</code><var>name</var>\n</dt>\n<dd>\nThis specifies the name of the target ARM processor. GCC uses this name to derive the name of the target ARM architecture (as if specified by <code>-march</code>) and the ARM processor type for which to tune for performance (as if specified by <code>-mtune</code>). Where this option is used in conjunction with <code>-march</code> or <code>-mtune</code>, those options take precedence over the appropriate part of this option. <p>Permissible names for this option are the same as those for <code>-mtune</code>. </p>\n<p><samp><span class=\"option\">-mcpu=generic-</span><var>arch</var></samp> is also permissible, and is equivalent to <samp><span class=\"option\">-march=</span><var>arch</var><span class=\"option\"> -mtune=generic-</span><var>arch</var></samp>. See <code>-mtune</code> for more information. </p>\n<p><code>-mcpu=native</code> causes the compiler to auto-detect the CPU of the build computer. At present, this feature is only supported on GNU/Linux, and not all architectures are recognized. If the auto-detect is unsuccessful the option has no effect. </p>\n</dd>\n<dt>\n<code>-mfpu=</code><var>name</var>\n</dt>\n<dd>\nThis specifies what floating-point hardware (or hardware emulation) is available on the target. Permissible names are: ‘<code>vfp</code>’, ‘<code>vfpv3</code>’, ‘<code>vfpv3-fp16</code>’, ‘<code>vfpv3-d16</code>’, ‘<code>vfpv3-d16-fp16</code>’, ‘<code>vfpv3xd</code>’, ‘<code>vfpv3xd-fp16</code>’, ‘<code>neon</code>’, ‘<code>neon-fp16</code>’, ‘<code>vfpv4</code>’, ‘<code>vfpv4-d16</code>’, ‘<code>fpv4-sp-d16</code>’, ‘<code>neon-vfpv4</code>’, ‘<code>fp-armv8</code>’, ‘<code>neon-fp-armv8</code>’, and ‘<code>crypto-neon-fp-armv8</code>’. <p>If <code>-msoft-float</code> is specified this specifies the format of floating-point values. </p>\n<p>If the selected floating-point hardware includes the NEON extension (e.g. <code>-mfpu</code>=‘<code>neon</code>’), note that floating-point operations are not generated by GCC's auto-vectorization pass unless <code>-funsafe-math-optimizations</code> is also specified. This is because NEON hardware does not fully implement the IEEE 754 standard for floating-point arithmetic (in particular denormal values are treated as zero), so the use of NEON instructions may lead to a loss of precision. </p>\n</dd>\n<dt>\n<code>-mfp16-format=</code><var>name</var>\n</dt>\n<dd>\nSpecify the format of the <code>__fp16</code> half-precision floating-point type. Permissible names are ‘<code>none</code>’, ‘<code>ieee</code>’, and ‘<code>alternative</code>’; the default is ‘<code>none</code>’, in which case the <code>__fp16</code> type is not defined. See <a href=\"half_002dprecision#Half_002dPrecision\">Half-Precision</a>, for more information. </dd>\n<dt>\n<code>-mstructure-size-boundary=</code><var>n</var>\n</dt>\n<dd>\nThe sizes of all structures and unions are rounded up to a multiple of the number of bits set by this option. Permissible values are 8, 32 and 64. The default value varies for different toolchains. For the COFF targeted toolchain the default value is 8. A value of 64 is only allowed if the underlying ABI supports it. <p>Specifying a larger number can produce faster, more efficient code, but can also increase the size of the program. Different values are potentially incompatible. Code compiled with one value cannot necessarily expect to work with code or libraries compiled with another value, if they exchange information using structures or unions. </p>\n</dd>\n<dt><code>-mabort-on-noreturn</code></dt>\n<dd>\nGenerate a call to the function <code>abort</code> at the end of a <code>noreturn</code> function. It is executed if the function tries to return. </dd>\n<dt>\n<code>-mlong-calls</code><dt><code>-mno-long-calls</code></dt>\n</dt>\n<dd>\nTells the compiler to perform function calls by first loading the address of the function into a register and then performing a subroutine call on this register. This switch is needed if the target function lies outside of the 64-megabyte addressing range of the offset-based version of subroutine call instruction. <p>Even if this switch is enabled, not all function calls are turned into long calls. The heuristic is that static functions, functions that have the ‘<code>short-call</code>’ attribute, functions that are inside the scope of a ‘<code>#pragma no_long_calls</code>’ directive, and functions whose definitions have already been compiled within the current compilation unit are not turned into long calls. The exceptions to this rule are that weak function definitions, functions with the ‘<code>long-call</code>’ attribute or the ‘<code>section</code>’ attribute, and functions that are within the scope of a ‘<code>#pragma long_calls</code>’ directive are always turned into long calls. </p>\n<p>This feature is not enabled by default. Specifying <code>-mno-long-calls</code> restores the default behavior, as does placing the function calls within the scope of a ‘<code>#pragma long_calls_off</code>’ directive. Note these switches have no effect on how the compiler generates code to handle function calls via function pointers. </p>\n</dd>\n<dt><code>-msingle-pic-base</code></dt>\n<dd>\nTreat the register used for PIC addressing as read-only, rather than loading it in the prologue for each function. The runtime system is responsible for initializing this register with an appropriate value before execution begins. </dd>\n<dt>\n<code>-mpic-register=</code><var>reg</var>\n</dt>\n<dd>\nSpecify the register to be used for PIC addressing. For standard PIC base case, the default will be any suitable register determined by compiler. For single PIC base case, the default is ‘<code>R9</code>’ if target is EABI based or stack-checking is enabled, otherwise the default is ‘<code>R10</code>’. </dd>\n<dt><code>-mpic-data-is-text-relative</code></dt>\n<dd>\nAssume that each data segments are relative to text segment at load time. Therefore, it permits addressing data using PC-relative operations. This option is on by default for targets other than VxWorks RTP. </dd>\n<dt><code>-mpoke-function-name</code></dt>\n<dd>\nWrite the name of each function into the text section, directly preceding the function prologue. The generated code is similar to this: <pre class=\"smallexample\">t0\n    .ascii \"arm_poke_function_name\", 0\n    .align\nt1\n    .word 0xff000000 + (t1 - t0)\narm_poke_function_name\n    mov     ip, sp\n    stmfd   sp!, {fp, ip, lr, pc}\n    sub     fp, ip, #4</pre> <p>When performing a stack backtrace, code can inspect the value of <code>pc</code> stored at <code>fp + 0</code>. If the trace function then looks at location <code>pc - 12</code> and the top 8 bits are set, then we know that there is a function name embedded immediately preceding this location and has length <code>((pc[-3]) &amp; 0xff000000)</code>. </p>\n</dd>\n<dt>\n<code>-mthumb</code><dt><code>-marm</code></dt>\n</dt>\n<dd>\n Select between generating code that executes in ARM and Thumb states. The default for most configurations is to generate code that executes in ARM state, but the default can be changed by configuring GCC with the <code>--with-mode=</code><var>state</var> configure option. </dd>\n<dt><code>-mtpcs-frame</code></dt>\n<dd>\nGenerate a stack frame that is compliant with the Thumb Procedure Call Standard for all non-leaf functions. (A leaf function is one that does not call any other functions.) The default is <code>-mno-tpcs-frame</code>. </dd>\n<dt><code>-mtpcs-leaf-frame</code></dt>\n<dd>\nGenerate a stack frame that is compliant with the Thumb Procedure Call Standard for all leaf functions. (A leaf function is one that does not call any other functions.) The default is <code>-mno-apcs-leaf-frame</code>. </dd>\n<dt><code>-mcallee-super-interworking</code></dt>\n<dd>\nGives all externally visible functions in the file being compiled an ARM instruction set header which switches to Thumb mode before executing the rest of the function. This allows these functions to be called from non-interworking code. This option is not valid in AAPCS configurations because interworking is enabled by default. </dd>\n<dt><code>-mcaller-super-interworking</code></dt>\n<dd>\nAllows calls via function pointers (including virtual functions) to execute correctly regardless of whether the target code has been compiled for interworking or not. There is a small overhead in the cost of executing a function pointer if this option is enabled. This option is not valid in AAPCS configurations because interworking is enabled by default. </dd>\n<dt>\n<code>-mtp=</code><var>name</var>\n</dt>\n<dd>\nSpecify the access model for the thread local storage pointer. The valid models are <code>soft</code>, which generates calls to <code>__aeabi_read_tp</code>, <code>cp15</code>, which fetches the thread pointer from <code>cp15</code> directly (supported in the arm6k architecture), and <code>auto</code>, which uses the best available method for the selected processor. The default setting is <code>auto</code>. </dd>\n<dt>\n<code>-mtls-dialect=</code><var>dialect</var>\n</dt>\n<dd>\nSpecify the dialect to use for accessing thread local storage. Two <var>dialect</var>s are supported—‘<code>gnu</code>’ and ‘<code>gnu2</code>’. The ‘<code>gnu</code>’ dialect selects the original GNU scheme for supporting local and global dynamic TLS models. The ‘<code>gnu2</code>’ dialect selects the GNU descriptor scheme, which provides better performance for shared libraries. The GNU descriptor scheme is compatible with the original scheme, but does require new assembler, linker and library support. Initial and local exec TLS models are unaffected by this option and always use the original scheme. </dd>\n<dt><code>-mword-relocations</code></dt>\n<dd>\nOnly generate absolute relocations on word-sized values (i.e. R_ARM_ABS32). This is enabled by default on targets (uClinux, SymbianOS) where the runtime loader imposes this restriction, and when <code>-fpic</code> or <code>-fPIC</code> is specified. </dd>\n<dt><code>-mfix-cortex-m3-ldrd</code></dt>\n<dd>\nSome Cortex-M3 cores can cause data corruption when <code>ldrd</code> instructions with overlapping destination and base registers are used. This option avoids generating these instructions. This option is enabled by default when <code>-mcpu=cortex-m3</code> is specified. </dd>\n<dt>\n<code>-munaligned-access</code><dt><code>-mno-unaligned-access</code></dt>\n</dt>\n<dd>\nEnables (or disables) reading and writing of 16- and 32- bit values from addresses that are not 16- or 32- bit aligned. By default unaligned access is disabled for all pre-ARMv6 and all ARMv6-M architectures, and enabled for all other architectures. If unaligned access is not enabled then words in packed data structures will be accessed a byte at a time. <p>The ARM attribute <code>Tag_CPU_unaligned_access</code> will be set in the generated object file to either true or false, depending upon the setting of this option. If unaligned access is enabled then the preprocessor symbol <code>__ARM_FEATURE_UNALIGNED</code> will also be defined. </p>\n</dd>\n<dt><code>-mneon-for-64bits</code></dt>\n<dd>\nEnables using Neon to handle scalar 64-bits operations. This is disabled by default since the cost of moving data from core registers to Neon is high. </dd>\n<dt><code>-mslow-flash-data</code></dt>\n<dd>\nAssume loading data from flash is slower than fetching instruction. Therefore literal load is minimized for better performance. This option is only supported when compiling for ARMv7 M-profile and off by default. </dd>\n<dt><code>-mrestrict-it</code></dt>\n<dd>\nRestricts generation of IT blocks to conform to the rules of ARMv8. IT blocks can only contain a single 16-bit instruction from a select set of instructions. This option is on by default for ARMv8 Thumb mode. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-Options.html</a>\n  </p>\n</div>\n","avr-options":"<h1 class=\"subsection\" id=\"AVR-Options\">3.17.5 AVR Options</h1> <p> These options are defined for AVR implementations: </p>\n<dl> <dt>\n<code>-mmcu=</code><var>mcu</var>\n</dt>\n<dd>\nSpecify Atmel AVR instruction set architectures (ISA) or MCU type. <p>The default for this option is <code>avr2</code>. </p>\n<p>GCC supports the following AVR devices and ISAs:          </p>\n<dl> <dt><code>avr2</code></dt>\n<dd>“Classic” devices with up to 8 KiB of program memory. <var>mcu</var> = <code>attiny22</code>, <code>attiny26</code>, <code>at90c8534</code>, <code>at90s2313</code>, <code>at90s2323</code>, <code>at90s2333</code>, <code>at90s2343</code>, <code>at90s4414</code>, <code>at90s4433</code>, <code>at90s4434</code>, <code>at90s8515</code>, <code>at90s8535</code>. </dd>\n<dt><code>avr25</code></dt>\n<dd>“Classic” devices with up to 8 KiB of program memory and with the <code>MOVW</code> instruction. <var>mcu</var> = <code>ata5272</code>, <code>ata6289</code>, <code>attiny13</code>, <code>attiny13a</code>, <code>attiny2313</code>, <code>attiny2313a</code>, <code>attiny24</code>, <code>attiny24a</code>, <code>attiny25</code>, <code>attiny261</code>, <code>attiny261a</code>, <code>attiny43u</code>, <code>attiny4313</code>, <code>attiny44</code>, <code>attiny44a</code>, <code>attiny45</code>, <code>attiny461</code>, <code>attiny461a</code>, <code>attiny48</code>, <code>attiny84</code>, <code>attiny84a</code>, <code>attiny85</code>, <code>attiny861</code>, <code>attiny861a</code>, <code>attiny87</code>, <code>attiny88</code>, <code>at86rf401</code>. </dd>\n<dt><code>avr3</code></dt>\n<dd>“Classic” devices with 16 KiB up to 64 KiB of program memory. <var>mcu</var> = <code>at43usb355</code>, <code>at76c711</code>. </dd>\n<dt><code>avr31</code></dt>\n<dd>“Classic” devices with 128 KiB of program memory. <var>mcu</var> = <code>atmega103</code>, <code>at43usb320</code>. </dd>\n<dt><code>avr35</code></dt>\n<dd>“Classic” devices with 16 KiB up to 64 KiB of program memory and with the <code>MOVW</code> instruction. <var>mcu</var> = <code>ata5505</code>, <code>atmega16u2</code>, <code>atmega32u2</code>, <code>atmega8u2</code>, <code>attiny1634</code>, <code>attiny167</code>, <code>at90usb162</code>, <code>at90usb82</code>. </dd>\n<dt><code>avr4</code></dt>\n<dd>“Enhanced” devices with up to 8 KiB of program memory. <var>mcu</var> = <code>ata6285</code>, <code>ata6286</code>, <code>atmega48</code>, <code>atmega48a</code>, <code>atmega48p</code>, <code>atmega48pa</code>, <code>atmega8</code>, <code>atmega8a</code>, <code>atmega8hva</code>, <code>atmega8515</code>, <code>atmega8535</code>, <code>atmega88</code>, <code>atmega88a</code>, <code>atmega88p</code>, <code>atmega88pa</code>, <code>at90pwm1</code>, <code>at90pwm2</code>, <code>at90pwm2b</code>, <code>at90pwm3</code>, <code>at90pwm3b</code>, <code>at90pwm81</code>. </dd>\n<dt><code>avr5</code></dt>\n<dd>“Enhanced” devices with 16 KiB up to 64 KiB of program memory. <var>mcu</var> = <code>ata5790</code>, <code>ata5790n</code>, <code>ata5795</code>, <code>atmega16</code>, <code>atmega16a</code>, <code>atmega16hva</code>, <code>atmega16hva2</code>, <code>atmega16hvb</code>, <code>atmega16hvbrevb</code>, <code>atmega16m1</code>, <code>atmega16u4</code>, <code>atmega161</code>, <code>atmega162</code>, <code>atmega163</code>, <code>atmega164a</code>, <code>atmega164p</code>, <code>atmega164pa</code>, <code>atmega165</code>, <code>atmega165a</code>, <code>atmega165p</code>, <code>atmega165pa</code>, <code>atmega168</code>, <code>atmega168a</code>, <code>atmega168p</code>, <code>atmega168pa</code>, <code>atmega169</code>, <code>atmega169a</code>, <code>atmega169p</code>, <code>atmega169pa</code>, <code>atmega26hvg</code>, <code>atmega32</code>, <code>atmega32a</code>, <code>atmega32c1</code>, <code>atmega32hvb</code>, <code>atmega32hvbrevb</code>, <code>atmega32m1</code>, <code>atmega32u4</code>, <code>atmega32u6</code>, <code>atmega323</code>, <code>atmega324a</code>, <code>atmega324p</code>, <code>atmega324pa</code>, <code>atmega325</code>, <code>atmega325a</code>, <code>atmega325p</code>, <code>atmega3250</code>, <code>atmega3250a</code>, <code>atmega3250p</code>, <code>atmega3250pa</code>, <code>atmega328</code>, <code>atmega328p</code>, <code>atmega329</code>, <code>atmega329a</code>, <code>atmega329p</code>, <code>atmega329pa</code>, <code>atmega3290</code>, <code>atmega3290a</code>, <code>atmega3290p</code>, <code>atmega3290pa</code>, <code>atmega406</code>, <code>atmega48hvf</code>, <code>atmega64</code>, <code>atmega64a</code>, <code>atmega64c1</code>, <code>atmega64hve</code>, <code>atmega64m1</code>, <code>atmega64rfa2</code>, <code>atmega64rfr2</code>, <code>atmega640</code>, <code>atmega644</code>, <code>atmega644a</code>, <code>atmega644p</code>, <code>atmega644pa</code>, <code>atmega645</code>, <code>atmega645a</code>, <code>atmega645p</code>, <code>atmega6450</code>, <code>atmega6450a</code>, <code>atmega6450p</code>, <code>atmega649</code>, <code>atmega649a</code>, <code>atmega649p</code>, <code>atmega6490</code>, <code>atmega6490a</code>, <code>atmega6490p</code>, <code>at90can32</code>, <code>at90can64</code>, <code>at90pwm161</code>, <code>at90pwm216</code>, <code>at90pwm316</code>, <code>at90scr100</code>, <code>at90usb646</code>, <code>at90usb647</code>, <code>at94k</code>, <code>m3000</code>. </dd>\n<dt><code>avr51</code></dt>\n<dd>“Enhanced” devices with 128 KiB of program memory. <var>mcu</var> = <code>atmega128</code>, <code>atmega128a</code>, <code>atmega128rfa1</code>, <code>atmega1280</code>, <code>atmega1281</code>, <code>atmega1284</code>, <code>atmega1284p</code>, <code>at90can128</code>, <code>at90usb1286</code>, <code>at90usb1287</code>. </dd>\n<dt><code>avr6</code></dt>\n<dd>“Enhanced” devices with 3-byte PC, i.e. with more than 128 KiB of program memory. <var>mcu</var> = <code>atmega2560</code>, <code>atmega2561</code>. </dd>\n<dt><code>avrxmega2</code></dt>\n<dd>“XMEGA” devices with more than 8 KiB and up to 64 KiB of program memory. <var>mcu</var> = <code>atmxt112sl</code>, <code>atmxt224</code>, <code>atmxt224e</code>, <code>atmxt336s</code>, <code>atxmega16a4</code>, <code>atxmega16a4u</code>, <code>atxmega16c4</code>, <code>atxmega16d4</code>, <code>atxmega32a4</code>, <code>atxmega32a4u</code>, <code>atxmega32c4</code>, <code>atxmega32d4</code>, <code>atxmega32e5</code>, <code>atxmega32x1</code>. </dd>\n<dt><code>avrxmega4</code></dt>\n<dd>“XMEGA” devices with more than 64 KiB and up to 128 KiB of program memory. <var>mcu</var> = <code>atxmega64a3</code>, <code>atxmega64a3u</code>, <code>atxmega64a4u</code>, <code>atxmega64b1</code>, <code>atxmega64b3</code>, <code>atxmega64c3</code>, <code>atxmega64d3</code>, <code>atxmega64d4</code>. </dd>\n<dt><code>avrxmega5</code></dt>\n<dd>“XMEGA” devices with more than 64 KiB and up to 128 KiB of program memory and more than 64 KiB of RAM. <var>mcu</var> = <code>atxmega64a1</code>, <code>atxmega64a1u</code>. </dd>\n<dt><code>avrxmega6</code></dt>\n<dd>“XMEGA” devices with more than 128 KiB of program memory. <var>mcu</var> = <code>atmxt540s</code>, <code>atmxt540sreva</code>, <code>atxmega128a3</code>, <code>atxmega128a3u</code>, <code>atxmega128b1</code>, <code>atxmega128b3</code>, <code>atxmega128c3</code>, <code>atxmega128d3</code>, <code>atxmega128d4</code>, <code>atxmega192a3</code>, <code>atxmega192a3u</code>, <code>atxmega192c3</code>, <code>atxmega192d3</code>, <code>atxmega256a3</code>, <code>atxmega256a3b</code>, <code>atxmega256a3bu</code>, <code>atxmega256a3u</code>, <code>atxmega256c3</code>, <code>atxmega256d3</code>, <code>atxmega384c3</code>, <code>atxmega384d3</code>. </dd>\n<dt><code>avrxmega7</code></dt>\n<dd>“XMEGA” devices with more than 128 KiB of program memory and more than 64 KiB of RAM. <var>mcu</var> = <code>atxmega128a1</code>, <code>atxmega128a1u</code>, <code>atxmega128a4u</code>. </dd>\n<dt><code>avr1</code></dt>\n<dd>This ISA is implemented by the minimal AVR core and supported for assembler only. <var>mcu</var> = <code>attiny11</code>, <code>attiny12</code>, <code>attiny15</code>, <code>attiny28</code>, <code>at90s1200</code>. </dd>\n</dl> </dd>\n<dt><code>-maccumulate-args</code></dt>\n<dd>\nAccumulate outgoing function arguments and acquire/release the needed stack space for outgoing function arguments once in function prologue/epilogue. Without this option, outgoing arguments are pushed before calling a function and popped afterwards. <p>Popping the arguments after the function call can be expensive on AVR so that accumulating the stack space might lead to smaller executables because arguments need not to be removed from the stack after such a function call. </p>\n<p>This option can lead to reduced code size for functions that perform several calls to functions that get their arguments on the stack like calls to printf-like functions. </p>\n</dd>\n<dt>\n<code>-mbranch-cost=</code><var>cost</var>\n</dt>\n<dd>\nSet the branch costs for conditional branch instructions to <var>cost</var>. Reasonable values for <var>cost</var> are small, non-negative integers. The default branch cost is 0. </dd>\n<dt><code>-mcall-prologues</code></dt>\n<dd>\nFunctions prologues/epilogues are expanded as calls to appropriate subroutines. Code size is smaller. </dd>\n<dt><code>-mint8</code></dt>\n<dd>\nAssume <code>int</code> to be 8-bit integer. This affects the sizes of all types: a <code>char</code> is 1 byte, an <code>int</code> is 1 byte, a <code>long</code> is 2 bytes, and <code>long long</code> is 4 bytes. Please note that this option does not conform to the C standards, but it results in smaller code size. </dd>\n<dt><code>-mno-interrupts</code></dt>\n<dd>\nGenerated code is not compatible with hardware interrupts. Code size is smaller. </dd>\n<dt><code>-mrelax</code></dt>\n<dd>\nTry to replace <code>CALL</code> resp. <code>JMP</code> instruction by the shorter <code>RCALL</code> resp. <code>RJMP</code> instruction if applicable. Setting <code>-mrelax</code> just adds the <code>--relax</code> option to the linker command line when the linker is called. <p>Jump relaxing is performed by the linker because jump offsets are not known before code is located. Therefore, the assembler code generated by the compiler is the same, but the instructions in the executable may differ from instructions in the assembler code. </p>\n<p>Relaxing must be turned on if linker stubs are needed, see the section on <code>EIND</code> and linker stubs below. </p>\n</dd>\n<dt><code>-msp8</code></dt>\n<dd>\nTreat the stack pointer register as an 8-bit register, i.e. assume the high byte of the stack pointer is zero. In general, you don't need to set this option by hand. <p>This option is used internally by the compiler to select and build multilibs for architectures <code>avr2</code> and <code>avr25</code>. These architectures mix devices with and without <code>SPH</code>. For any setting other than <code>-mmcu=avr2</code> or <code>-mmcu=avr25</code> the compiler driver will add or remove this option from the compiler proper's command line, because the compiler then knows if the device or architecture has an 8-bit stack pointer and thus no <code>SPH</code> register or not. </p>\n</dd>\n<dt><code>-mstrict-X</code></dt>\n<dd>\nUse address register <code>X</code> in a way proposed by the hardware. This means that <code>X</code> is only used in indirect, post-increment or pre-decrement addressing. <p>Without this option, the <code>X</code> register may be used in the same way as <code>Y</code> or <code>Z</code> which then is emulated by additional instructions. For example, loading a value with <code>X+const</code> addressing with a small non-negative <code>const &lt; 64</code> to a register <var>Rn</var> is performed as </p>\n<pre class=\"example\">adiw r26, const   ; X += const\nld   <var>Rn</var>, X        ; <var>Rn</var> = *X\nsbiw r26, const   ; X -= const</pre> </dd>\n<dt><code>-mtiny-stack</code></dt>\n<dd>\nOnly change the lower 8 bits of the stack pointer. </dd>\n<dt><code>-Waddr-space-convert</code></dt>\n<dd>\nWarn about conversions between address spaces in the case where the resulting address space is not contained in the incoming address space. </dd>\n</dl> <h2 class=\"subsubsection\">3.17.5.1 <code>EIND</code> and Devices with more than 128 Ki Bytes of Flash</h2> <p>Pointers in the implementation are 16 bits wide. The address of a function or label is represented as word address so that indirect jumps and calls can target any code address in the range of 64 Ki words. </p>\n<p>In order to facilitate indirect jump on devices with more than 128 Ki bytes of program memory space, there is a special function register called <code>EIND</code> that serves as most significant part of the target address when <code>EICALL</code> or <code>EIJMP</code> instructions are used. </p>\n<p>Indirect jumps and calls on these devices are handled as follows by the compiler and are subject to some limitations: </p>\n<ul> <li>The compiler never sets <code>EIND</code>. </li>\n<li>The compiler uses <code>EIND</code> implicitely in <code>EICALL</code>/<code>EIJMP</code> instructions or might read <code>EIND</code> directly in order to emulate an indirect call/jump by means of a <code>RET</code> instruction. </li>\n<li>The compiler assumes that <code>EIND</code> never changes during the startup code or during the application. In particular, <code>EIND</code> is not saved/restored in function or interrupt service routine prologue/epilogue. </li>\n<li>For indirect calls to functions and computed goto, the linker generates <em>stubs</em>. Stubs are jump pads sometimes also called <em>trampolines</em>. Thus, the indirect call/jump jumps to such a stub. The stub contains a direct jump to the desired address. </li>\n<li>Linker relaxation must be turned on so that the linker will generate the stubs correctly an all situaltion. See the compiler option <code>-mrelax</code> and the linler option <code>--relax</code>. There are corner cases where the linker is supposed to generate stubs but aborts without relaxation and without a helpful error message. </li>\n<li>The default linker script is arranged for code with <code>EIND = 0</code>. If code is supposed to work for a setup with <code>EIND != 0</code>, a custom linker script has to be used in order to place the sections whose name start with <code>.trampolines</code> into the segment where <code>EIND</code> points to. </li>\n<li>The startup code from libgcc never sets <code>EIND</code>. Notice that startup code is a blend of code from libgcc and AVR-LibC. For the impact of AVR-LibC on <code>EIND</code>, see the <a href=\"http://nongnu.org/avr-libc/user-manual/\">AVR-LibC user manual</a>. </li>\n<li>It is legitimate for user-specific startup code to set up <code>EIND</code> early, for example by means of initialization code located in section <code>.init3</code>. Such code runs prior to general startup code that initializes RAM and calls constructors, but after the bit of startup code from AVR-LibC that sets <code>EIND</code> to the segment where the vector table is located. <pre class=\"example\">#include &lt;avr/io.h&gt;\n\nstatic void\n__attribute__((section(\".init3\"),naked,used,no_instrument_function))\ninit3_set_eind (void)\n{\n  __asm volatile (\"ldi r24,pm_hh8(__trampolines_start)\\n\\t\"\n                  \"out %i0,r24\" :: \"n\" (&amp;EIND) : \"r24\",\"memory\");\n}</pre> <p class=\"noindent\">The <code>__trampolines_start</code> symbol is defined in the linker script. </p>\n</li>\n<li>Stubs are generated automatically by the linker if the following two conditions are met: <ul> <li>The address of a label is taken by means of the <code>gs</code> modifier (short for <em>generate stubs</em>) like so: <pre class=\"example\">LDI r24, lo8(gs(<var>func</var>))\nLDI r25, hi8(gs(<var>func</var>))</pre> </li>\n<li>The final location of that label is in a code segment <em>outside</em> the segment where the stubs are located. </li>\n</ul> </li>\n<li>The compiler emits such <code>gs</code> modifiers for code labels in the following situations: <ul> <li>Taking address of a function or code label. </li>\n<li>Computed goto. </li>\n<li>If prologue-save function is used, see <code>-mcall-prologues</code> command-line option. </li>\n<li>Switch/case dispatch tables. If you do not want such dispatch tables you can specify the <code>-fno-jump-tables</code> command-line option. </li>\n<li>C and C++ constructors/destructors called during startup/shutdown. </li>\n<li>If the tools hit a <code>gs()</code> modifier explained above. </li>\n</ul> </li>\n<li>Jumping to non-symbolic addresses like so is <em>not</em> supported: <pre class=\"example\">int main (void)\n{\n    /* Call function at word address 0x2 */\n    return ((int(*)(void)) 0x2)();\n}</pre> <p>Instead, a stub has to be set up, i.e. the function has to be called through a symbol (<code>func_4</code> in the example): </p>\n<pre class=\"example\">int main (void)\n{\n    extern int func_4 (void);\n\n    /* Call function at byte address 0x4 */\n    return func_4();\n}</pre> <p>and the application be linked with <code>-Wl,--defsym,func_4=0x4</code>. Alternatively, <code>func_4</code> can be defined in the linker script. </p>\n</li>\n</ul> <h2 class=\"subsubsection\">3.17.5.2 Handling of the <code>RAMPD</code>, <code>RAMPX</code>, <code>RAMPY</code> and <code>RAMPZ</code> Special Function Registers</h2> <p>Some AVR devices support memories larger than the 64 KiB range that can be accessed with 16-bit pointers. To access memory locations outside this 64 KiB range, the contentent of a <code>RAMP</code> register is used as high part of the address: The <code>X</code>, <code>Y</code>, <code>Z</code> address register is concatenated with the <code>RAMPX</code>, <code>RAMPY</code>, <code>RAMPZ</code> special function register, respectively, to get a wide address. Similarly, <code>RAMPD</code> is used together with direct addressing. </p>\n<ul> <li>The startup code initializes the <code>RAMP</code> special function registers with zero. </li>\n<li>If a <a href=\"named-address-spaces#AVR-Named-Address-Spaces\">named address space</a> other than generic or <code>__flash</code> is used, then <code>RAMPZ</code> is set as needed before the operation. </li>\n<li>If the device supports RAM larger than 64 KiB and the compiler needs to change <code>RAMPZ</code> to accomplish an operation, <code>RAMPZ</code> is reset to zero after the operation. </li>\n<li>If the device comes with a specific <code>RAMP</code> register, the ISR prologue/epilogue saves/restores that SFR and initializes it with zero in case the ISR code might (implicitly) use it. </li>\n<li>RAM larger than 64 KiB is not supported by GCC for AVR targets. If you use inline assembler to read from locations outside the 16-bit address range and change one of the <code>RAMP</code> registers, you must reset it to zero after the access. </li>\n</ul> <h2 class=\"subsubsection\">3.17.5.3 AVR Built-in Macros</h2> <p>GCC defines several built-in macros so that the user code can test for the presence or absence of features. Almost any of the following built-in macros are deduced from device capabilities and thus triggered by the <code>-mmcu=</code> command-line option. </p>\n<p>For even more AVR-specific built-in macros see <a href=\"named-address-spaces#AVR-Named-Address-Spaces\">AVR Named Address Spaces</a> and <a href=\"avr-built_002din-functions#AVR-Built_002din-Functions\">AVR Built-in Functions</a>. </p>\n<dl> <dt><code>__AVR_ARCH__</code></dt>\n<dd>Build-in macro that resolves to a decimal number that identifies the architecture and depends on the <code>-mmcu=</code><var>mcu</var> option. Possible values are: <p><code>2</code>, <code>25</code>, <code>3</code>, <code>31</code>, <code>35</code>, <code>4</code>, <code>5</code>, <code>51</code>, <code>6</code>, <code>102</code>, <code>104</code>, <code>105</code>, <code>106</code>, <code>107</code> </p>\n<p>for <var>mcu</var>=<code>avr2</code>, <code>avr25</code>, <code>avr3</code>, <code>avr31</code>, <code>avr35</code>, <code>avr4</code>, <code>avr5</code>, <code>avr51</code>, <code>avr6</code>, <code>avrxmega2</code>, <code>avrxmega4</code>, <code>avrxmega5</code>, <code>avrxmega6</code>, <code>avrxmega7</code>, respectively. If <var>mcu</var> specifies a device, this built-in macro is set accordingly. For example, with <code>-mmcu=atmega8</code> the macro will be defined to <code>4</code>. </p>\n</dd>\n<dt>\n<code>__AVR_</code><var>Device</var><code>__</code>\n</dt>\n<dd>Setting <code>-mmcu=</code><var>device</var> defines this built-in macro which reflects the device's name. For example, <code>-mmcu=atmega8</code> defines the built-in macro <code>__AVR_ATmega8__</code>, <code>-mmcu=attiny261a</code> defines <code>__AVR_ATtiny261A__</code>, etc. <p>The built-in macros' names follow the scheme <code>__AVR_</code><var>Device</var><code>__</code> where <var>Device</var> is the device name as from the AVR user manual. The difference between <var>Device</var> in the built-in macro and <var>device</var> in <code>-mmcu=</code><var>device</var> is that the latter is always lowercase. </p>\n<p>If <var>device</var> is not a device but only a core architecture like <code>avr51</code>, this macro will not be defined. </p>\n</dd>\n<dt><code>__AVR_XMEGA__</code></dt>\n<dd>The device / architecture belongs to the XMEGA family of devices. </dd>\n<dt><code>__AVR_HAVE_ELPM__</code></dt>\n<dd>The device has the the <code>ELPM</code> instruction. </dd>\n<dt><code>__AVR_HAVE_ELPMX__</code></dt>\n<dd>The device has the <code>ELPM R</code><var>n</var><code>,Z</code> and <code>ELPM\nR</code><var>n</var><code>,Z+</code> instructions. </dd>\n<dt><code>__AVR_HAVE_MOVW__</code></dt>\n<dd>The device has the <code>MOVW</code> instruction to perform 16-bit register-register moves. </dd>\n<dt><code>__AVR_HAVE_LPMX__</code></dt>\n<dd>The device has the <code>LPM R</code><var>n</var><code>,Z</code> and <code>LPM R</code><var>n</var><code>,Z+</code> instructions. </dd>\n<dt><code>__AVR_HAVE_MUL__</code></dt>\n<dd>The device has a hardware multiplier. </dd>\n<dt><code>__AVR_HAVE_JMP_CALL__</code></dt>\n<dd>The device has the <code>JMP</code> and <code>CALL</code> instructions. This is the case for devices with at least 16 KiB of program memory. </dd>\n<dt>\n<code>__AVR_HAVE_EIJMP_EICALL__</code><dt><code>__AVR_3_BYTE_PC__</code></dt>\n</dt>\n<dd>The device has the <code>EIJMP</code> and <code>EICALL</code> instructions. This is the case for devices with more than 128 KiB of program memory. This also means that the program counter (PC) is 3 bytes wide. </dd>\n<dt><code>__AVR_2_BYTE_PC__</code></dt>\n<dd>The program counter (PC) is 2 bytes wide. This is the case for devices with up to 128 KiB of program memory. </dd>\n<dt>\n<code>__AVR_HAVE_8BIT_SP__</code><dt><code>__AVR_HAVE_16BIT_SP__</code></dt>\n</dt>\n<dd>The stack pointer (SP) register is treated as 8-bit respectively 16-bit register by the compiler. The definition of these macros is affected by <code>-mtiny-stack</code>. </dd>\n<dt>\n<code>__AVR_HAVE_SPH__</code><dt><code>__AVR_SP8__</code></dt>\n</dt>\n<dd>The device has the SPH (high part of stack pointer) special function register or has an 8-bit stack pointer, respectively. The definition of these macros is affected by <code>-mmcu=</code> and in the cases of <code>-mmcu=avr2</code> and <code>-mmcu=avr25</code> also by <code>-msp8</code>. </dd>\n<dt>\n<code>__AVR_HAVE_RAMPD__</code><dt>\n<code>__AVR_HAVE_RAMPX__</code><dt>\n<code>__AVR_HAVE_RAMPY__</code><dt><code>__AVR_HAVE_RAMPZ__</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>The device has the <code>RAMPD</code>, <code>RAMPX</code>, <code>RAMPY</code>, <code>RAMPZ</code> special function register, respectively. </dd>\n<dt><code>__NO_INTERRUPTS__</code></dt>\n<dd>This macro reflects the <code>-mno-interrupts</code> command line option. </dd>\n<dt>\n<code>__AVR_ERRATA_SKIP__</code><dt><code>__AVR_ERRATA_SKIP_JMP_CALL__</code></dt>\n</dt>\n<dd>Some AVR devices (AT90S8515, ATmega103) must not skip 32-bit instructions because of a hardware erratum. Skip instructions are <code>SBRS</code>, <code>SBRC</code>, <code>SBIS</code>, <code>SBIC</code> and <code>CPSE</code>. The second macro is only defined if <code>__AVR_HAVE_JMP_CALL__</code> is also set. </dd>\n<dt><code>__AVR_ISA_RMW__</code></dt>\n<dd>The device has Read-Modify-Write instructions (XCH, LAC, LAS and LAT). </dd>\n<dt>\n<code>__AVR_SFR_OFFSET__=</code><var>offset</var>\n</dt>\n<dd>Instructions that can address I/O special function registers directly like <code>IN</code>, <code>OUT</code>, <code>SBI</code>, etc. may use a different address as if addressed by an instruction to access RAM like <code>LD</code> or <code>STS</code>. This offset depends on the device architecture and has to be subtracted from the RAM address in order to get the respective I/O address. </dd>\n<dt><code>__WITH_AVRLIBC__</code></dt>\n<dd>The compiler is configured to be used together with AVR-Libc. See the <code>--with-avrlibc</code> configure option. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/AVR-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/AVR-Options.html</a>\n  </p>\n</div>\n","blackfin-options":"<h1 class=\"subsection\" id=\"Blackfin-Options\">3.17.6 Blackfin Options</h1> \n<dl> <dt>\n<code>-mcpu=</code><var>cpu</var><span class=\"roman\">[</span><code>-</code><var>sirevision</var><span class=\"roman\">]</span>\n</dt>\n<dd>\nSpecifies the name of the target Blackfin processor. Currently, <var>cpu</var> can be one of ‘<code>bf512</code>’, ‘<code>bf514</code>’, ‘<code>bf516</code>’, ‘<code>bf518</code>’, ‘<code>bf522</code>’, ‘<code>bf523</code>’, ‘<code>bf524</code>’, ‘<code>bf525</code>’, ‘<code>bf526</code>’, ‘<code>bf527</code>’, ‘<code>bf531</code>’, ‘<code>bf532</code>’, ‘<code>bf533</code>’, ‘<code>bf534</code>’, ‘<code>bf536</code>’, ‘<code>bf537</code>’, ‘<code>bf538</code>’, ‘<code>bf539</code>’, ‘<code>bf542</code>’, ‘<code>bf544</code>’, ‘<code>bf547</code>’, ‘<code>bf548</code>’, ‘<code>bf549</code>’, ‘<code>bf542m</code>’, ‘<code>bf544m</code>’, ‘<code>bf547m</code>’, ‘<code>bf548m</code>’, ‘<code>bf549m</code>’, ‘<code>bf561</code>’, ‘<code>bf592</code>’. <p>The optional <var>sirevision</var> specifies the silicon revision of the target Blackfin processor. Any workarounds available for the targeted silicon revision are enabled. If <var>sirevision</var> is ‘<code>none</code>’, no workarounds are enabled. If <var>sirevision</var> is ‘<code>any</code>’, all workarounds for the targeted processor are enabled. The <code>__SILICON_REVISION__</code> macro is defined to two hexadecimal digits representing the major and minor numbers in the silicon revision. If <var>sirevision</var> is ‘<code>none</code>’, the <code>__SILICON_REVISION__</code> is not defined. If <var>sirevision</var> is ‘<code>any</code>’, the <code>__SILICON_REVISION__</code> is defined to be <code>0xffff</code>. If this optional <var>sirevision</var> is not used, GCC assumes the latest known silicon revision of the targeted Blackfin processor. </p>\n<p>GCC defines a preprocessor macro for the specified <var>cpu</var>. For the ‘<code>bfin-elf</code>’ toolchain, this option causes the hardware BSP provided by libgloss to be linked in if <code>-msim</code> is not given. </p>\n<p>Without this option, ‘<code>bf532</code>’ is used as the processor by default. </p>\n<p>Note that support for ‘<code>bf561</code>’ is incomplete. For ‘<code>bf561</code>’, only the preprocessor macro is defined. </p>\n</dd>\n<dt><code>-msim</code></dt>\n<dd>\nSpecifies that the program will be run on the simulator. This causes the simulator BSP provided by libgloss to be linked in. This option has effect only for ‘<code>bfin-elf</code>’ toolchain. Certain other options, such as <code>-mid-shared-library</code> and <code>-mfdpic</code>, imply <code>-msim</code>. </dd>\n<dt><code>-momit-leaf-frame-pointer</code></dt>\n<dd>\nDon't keep the frame pointer in a register for leaf functions. This avoids the instructions to save, set up and restore frame pointers and makes an extra register available in leaf functions. The option <code>-fomit-frame-pointer</code> removes the frame pointer for all functions, which might make debugging harder. </dd>\n<dt><code>-mspecld-anomaly</code></dt>\n<dd>\nWhen enabled, the compiler ensures that the generated code does not contain speculative loads after jump instructions. If this option is used, <code>__WORKAROUND_SPECULATIVE_LOADS</code> is defined. </dd>\n<dt><code>-mno-specld-anomaly</code></dt>\n<dd>\nDon't generate extra code to prevent speculative loads from occurring. </dd>\n<dt><code>-mcsync-anomaly</code></dt>\n<dd>\nWhen enabled, the compiler ensures that the generated code does not contain CSYNC or SSYNC instructions too soon after conditional branches. If this option is used, <code>__WORKAROUND_SPECULATIVE_SYNCS</code> is defined. </dd>\n<dt><code>-mno-csync-anomaly</code></dt>\n<dd>\nDon't generate extra code to prevent CSYNC or SSYNC instructions from occurring too soon after a conditional branch. </dd>\n<dt><code>-mlow-64k</code></dt>\n<dd>\nWhen enabled, the compiler is free to take advantage of the knowledge that the entire program fits into the low 64k of memory. </dd>\n<dt><code>-mno-low-64k</code></dt>\n<dd>\nAssume that the program is arbitrarily large. This is the default. </dd>\n<dt><code>-mstack-check-l1</code></dt>\n<dd>\nDo stack checking using information placed into L1 scratchpad memory by the uClinux kernel. </dd>\n<dt><code>-mid-shared-library</code></dt>\n<dd>\nGenerate code that supports shared libraries via the library ID method. This allows for execute in place and shared libraries in an environment without virtual memory management. This option implies <code>-fPIC</code>. With a ‘<code>bfin-elf</code>’ target, this option implies <code>-msim</code>. </dd>\n<dt><code>-mno-id-shared-library</code></dt>\n<dd>\nGenerate code that doesn't assume ID-based shared libraries are being used. This is the default. </dd>\n<dt><code>-mleaf-id-shared-library</code></dt>\n<dd>\nGenerate code that supports shared libraries via the library ID method, but assumes that this library or executable won't link against any other ID shared libraries. That allows the compiler to use faster code for jumps and calls. </dd>\n<dt><code>-mno-leaf-id-shared-library</code></dt>\n<dd>\nDo not assume that the code being compiled won't link against any ID shared libraries. Slower code is generated for jump and call insns. </dd>\n<dt><code>-mshared-library-id=n</code></dt>\n<dd>\nSpecifies the identification number of the ID-based shared library being compiled. Specifying a value of 0 generates more compact code; specifying other values forces the allocation of that number to the current library but is no more space- or time-efficient than omitting this option. </dd>\n<dt><code>-msep-data</code></dt>\n<dd>\nGenerate code that allows the data segment to be located in a different area of memory from the text segment. This allows for execute in place in an environment without virtual memory management by eliminating relocations against the text section. </dd>\n<dt><code>-mno-sep-data</code></dt>\n<dd>\nGenerate code that assumes that the data segment follows the text segment. This is the default. </dd>\n<dt>\n<code>-mlong-calls</code><dt><code>-mno-long-calls</code></dt>\n</dt>\n<dd>\nTells the compiler to perform function calls by first loading the address of the function into a register and then performing a subroutine call on this register. This switch is needed if the target function lies outside of the 24-bit addressing range of the offset-based version of subroutine call instruction. <p>This feature is not enabled by default. Specifying <code>-mno-long-calls</code> restores the default behavior. Note these switches have no effect on how the compiler generates code to handle function calls via function pointers. </p>\n</dd>\n<dt><code>-mfast-fp</code></dt>\n<dd>\nLink with the fast floating-point library. This library relaxes some of the IEEE floating-point standard's rules for checking inputs against Not-a-Number (NAN), in the interest of performance. </dd>\n<dt><code>-minline-plt</code></dt>\n<dd>\nEnable inlining of PLT entries in function calls to functions that are not known to bind locally. It has no effect without <code>-mfdpic</code>. </dd>\n<dt><code>-mmulticore</code></dt>\n<dd>\nBuild a standalone application for multicore Blackfin processors. This option causes proper start files and link scripts supporting multicore to be used, and defines the macro <code>__BFIN_MULTICORE</code>. It can only be used with <samp><span class=\"option\">-mcpu=bf561[-</span><var>sirevision</var><span class=\"option\">]</span></samp>. <p>This option can be used with <code>-mcorea</code> or <code>-mcoreb</code>, which selects the one-application-per-core programming model. Without <code>-mcorea</code> or <code>-mcoreb</code>, the single-application/dual-core programming model is used. In this model, the main function of Core B should be named as <code>coreb_main</code>. </p>\n<p>If this option is not used, the single-core application programming model is used. </p>\n</dd>\n<dt><code>-mcorea</code></dt>\n<dd>\nBuild a standalone application for Core A of BF561 when using the one-application-per-core programming model. Proper start files and link scripts are used to support Core A, and the macro <code>__BFIN_COREA</code> is defined. This option can only be used in conjunction with <code>-mmulticore</code>. </dd>\n<dt><code>-mcoreb</code></dt>\n<dd>\nBuild a standalone application for Core B of BF561 when using the one-application-per-core programming model. Proper start files and link scripts are used to support Core B, and the macro <code>__BFIN_COREB</code> is defined. When this option is used, <code>coreb_main</code> should be used instead of <code>main</code>. This option can only be used in conjunction with <code>-mmulticore</code>. </dd>\n<dt><code>-msdram</code></dt>\n<dd>\nBuild a standalone application for SDRAM. Proper start files and link scripts are used to put the application into SDRAM, and the macro <code>__BFIN_SDRAM</code> is defined. The loader should initialize SDRAM before loading the application. </dd>\n<dt><code>-micplb</code></dt>\n<dd>\nAssume that ICPLBs are enabled at run time. This has an effect on certain anomaly workarounds. For Linux targets, the default is to assume ICPLBs are enabled; for standalone applications the default is off. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Blackfin-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Blackfin-Options.html</a>\n  </p>\n</div>\n","c6x-options":"<h1 class=\"subsection\" id=\"C6X-Options\">3.17.7 C6X Options</h1> \n<dl> <dt>\n<code>-march=</code><var>name</var>\n</dt>\n<dd>\nThis specifies the name of the target architecture. GCC uses this name to determine what kind of instructions it can emit when generating assembly code. Permissible names are: ‘<code>c62x</code>’, ‘<code>c64x</code>’, ‘<code>c64x+</code>’, ‘<code>c67x</code>’, ‘<code>c67x+</code>’, ‘<code>c674x</code>’. </dd>\n<dt><code>-mbig-endian</code></dt>\n<dd>\nGenerate code for a big-endian target. </dd>\n<dt><code>-mlittle-endian</code></dt>\n<dd>\nGenerate code for a little-endian target. This is the default. </dd>\n<dt><code>-msim</code></dt>\n<dd>\nChoose startup files and linker script suitable for the simulator. </dd>\n<dt><code>-msdata=default</code></dt>\n<dd>\nPut small global and static data in the ‘<code>.neardata</code>’ section, which is pointed to by register <code>B14</code>. Put small uninitialized global and static data in the ‘<code>.bss</code>’ section, which is adjacent to the ‘<code>.neardata</code>’ section. Put small read-only data into the ‘<code>.rodata</code>’ section. The corresponding sections used for large pieces of data are ‘<code>.fardata</code>’, ‘<code>.far</code>’ and ‘<code>.const</code>’. </dd>\n<dt><code>-msdata=all</code></dt>\n<dd>\nPut all data, not just small objects, into the sections reserved for small data, and use addressing relative to the <code>B14</code> register to access them. </dd>\n<dt><code>-msdata=none</code></dt>\n<dd>\nMake no use of the sections reserved for small data, and use absolute addresses to access all data. Put all initialized global and static data in the ‘<code>.fardata</code>’ section, and all uninitialized data in the ‘<code>.far</code>’ section. Put all constant data into the ‘<code>.const</code>’ section. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C6X-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C6X-Options.html</a>\n  </p>\n</div>\n","cris-options":"<h1 class=\"subsection\" id=\"CRIS-Options\">3.17.8 CRIS Options</h1> <p> These options are defined specifically for the CRIS ports. </p>\n<dl> <dt>\n<code>-march=</code><var>architecture-type</var><dt>\n<code>-mcpu=</code><var>architecture-type</var>\n</dt>\n</dt>\n<dd>\nGenerate code for the specified architecture. The choices for <var>architecture-type</var> are ‘<code>v3</code>’, ‘<code>v8</code>’ and ‘<code>v10</code>’ for respectively ETRAX 4, ETRAX 100, and ETRAX 100 LX. Default is ‘<code>v0</code>’ except for cris-axis-linux-gnu, where the default is ‘<code>v10</code>’. </dd>\n<dt>\n<code>-mtune=</code><var>architecture-type</var>\n</dt>\n<dd>\nTune to <var>architecture-type</var> everything applicable about the generated code, except for the ABI and the set of available instructions. The choices for <var>architecture-type</var> are the same as for <samp><span class=\"option\">-march=</span><var>architecture-type</var></samp>. </dd>\n<dt>\n<code>-mmax-stack-frame=</code><var>n</var>\n</dt>\n<dd>\nWarn when the stack frame of a function exceeds <var>n</var> bytes. </dd>\n<dt>\n<code>-metrax4</code><dt><code>-metrax100</code></dt>\n</dt>\n<dd>\nThe options <code>-metrax4</code> and <code>-metrax100</code> are synonyms for <code>-march=v3</code> and <code>-march=v8</code> respectively. </dd>\n<dt>\n<code>-mmul-bug-workaround</code><dt><code>-mno-mul-bug-workaround</code></dt>\n</dt>\n<dd>\nWork around a bug in the <code>muls</code> and <code>mulu</code> instructions for CPU models where it applies. This option is active by default. </dd>\n<dt><code>-mpdebug</code></dt>\n<dd>\nEnable CRIS-specific verbose debug-related information in the assembly code. This option also has the effect of turning off the ‘<code>#NO_APP</code>’ formatted-code indicator to the assembler at the beginning of the assembly file. </dd>\n<dt><code>-mcc-init</code></dt>\n<dd>\nDo not use condition-code results from previous instruction; always emit compare and test instructions before use of condition codes. </dd>\n<dt><code>-mno-side-effects</code></dt>\n<dd>\nDo not emit instructions with side effects in addressing modes other than post-increment. </dd>\n<dt>\n<code>-mstack-align</code><dt>\n<code>-mno-stack-align</code><dt>\n<code>-mdata-align</code><dt>\n<code>-mno-data-align</code><dt>\n<code>-mconst-align</code><dt><code>-mno-const-align</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThese options (‘<code>no-</code>’ options) arrange (eliminate arrangements) for the stack frame, individual data and constants to be aligned for the maximum single data access size for the chosen CPU model. The default is to arrange for 32-bit alignment. ABI details such as structure layout are not affected by these options. </dd>\n<dt>\n<code>-m32-bit</code><dt>\n<code>-m16-bit</code><dt><code>-m8-bit</code></dt>\n</dt>\n</dt>\n<dd>\nSimilar to the stack- data- and const-align options above, these options arrange for stack frame, writable data and constants to all be 32-bit, 16-bit or 8-bit aligned. The default is 32-bit alignment. </dd>\n<dt>\n<code>-mno-prologue-epilogue</code><dt><code>-mprologue-epilogue</code></dt>\n</dt>\n<dd>\nWith <code>-mno-prologue-epilogue</code>, the normal function prologue and epilogue which set up the stack frame are omitted and no return instructions or return sequences are generated in the code. Use this option only together with visual inspection of the compiled code: no warnings or errors are generated when call-saved registers must be saved, or storage for local variables needs to be allocated. </dd>\n<dt>\n<code>-mno-gotplt</code><dt><code>-mgotplt</code></dt>\n</dt>\n<dd>\nWith <code>-fpic</code> and <code>-fPIC</code>, don't generate (do generate) instruction sequences that load addresses for functions from the PLT part of the GOT rather than (traditional on other architectures) calls to the PLT. The default is <code>-mgotplt</code>. </dd>\n<dt><code>-melf</code></dt>\n<dd>\nLegacy no-op option only recognized with the cris-axis-elf and cris-axis-linux-gnu targets. </dd>\n<dt><code>-mlinux</code></dt>\n<dd>\nLegacy no-op option only recognized with the cris-axis-linux-gnu target. </dd>\n<dt><code>-sim</code></dt>\n<dd>\nThis option, recognized for the cris-axis-elf, arranges to link with input-output functions from a simulator library. Code, initialized data and zero-initialized data are allocated consecutively. </dd>\n<dt><code>-sim2</code></dt>\n<dd>\nLike <code>-sim</code>, but pass linker options to locate initialized data at 0x40000000 and zero-initialized data at 0x80000000. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/CRIS-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/CRIS-Options.html</a>\n  </p>\n</div>\n","cr16-options":"<h1 class=\"subsection\" id=\"CR16-Options\">3.17.9 CR16 Options</h1> <p> These options are defined specifically for the CR16 ports. </p>\n<dl> <dt><code>-mmac</code></dt>\n<dd>\nEnable the use of multiply-accumulate instructions. Disabled by default. </dd>\n<dt>\n<code>-mcr16cplus</code><dt><code>-mcr16c</code></dt>\n</dt>\n<dd>\nGenerate code for CR16C or CR16C+ architecture. CR16C+ architecture is default. </dd>\n<dt><code>-msim</code></dt>\n<dd>\nLinks the library libsim.a which is in compatible with simulator. Applicable to ELF compiler only. </dd>\n<dt><code>-mint32</code></dt>\n<dd>\nChoose integer type as 32-bit wide. </dd>\n<dt><code>-mbit-ops</code></dt>\n<dd>\nGenerates <code>sbit</code>/<code>cbit</code> instructions for bit manipulations. </dd>\n<dt>\n<code>-mdata-model=</code><var>model</var>\n</dt>\n<dd>\nChoose a data model. The choices for <var>model</var> are ‘<code>near</code>’, ‘<code>far</code>’ or ‘<code>medium</code>’. ‘<code>medium</code>’ is default. However, ‘<code>far</code>’ is not valid with <code>-mcr16c</code>, as the CR16C architecture does not support the far data model. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/CR16-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/CR16-Options.html</a>\n  </p>\n</div>\n","darwin-options":"<h1 class=\"subsection\" id=\"Darwin-Options\">3.17.10 Darwin Options</h1> <p> These options are defined for all architectures running the Darwin operating system. </p>\n<p>FSF GCC on Darwin does not create “fat” object files; it creates an object file for the single architecture that GCC was built to target. Apple's GCC on Darwin does create “fat” files if multiple <code>-arch</code> options are used; it does so by running the compiler or linker multiple times and joining the results together with <code>lipo</code>. </p>\n<p>The subtype of the file created (like ‘<code>ppc7400</code>’ or ‘<code>ppc970</code>’ or ‘<code>i686</code>’) is determined by the flags that specify the ISA that GCC is targeting, like <code>-mcpu</code> or <code>-march</code>. The <code>-force_cpusubtype_ALL</code> option can be used to override this. </p>\n<p>The Darwin tools vary in their behavior when presented with an ISA mismatch. The assembler, <code>as</code>, only permits instructions to be used that are valid for the subtype of the file it is generating, so you cannot put 64-bit instructions in a ‘<code>ppc750</code>’ object file. The linker for shared libraries, <code>/usr/bin/libtool</code>, fails and prints an error if asked to create a shared library with a less restrictive subtype than its input files (for instance, trying to put a ‘<code>ppc970</code>’ object file in a ‘<code>ppc7400</code>’ library). The linker for executables, <code>ld</code>, quietly gives the executable the most restrictive subtype of any of its input files. </p>\n<dl> <dt>\n<code>-F</code><var>dir</var>\n</dt>\n<dd>\nAdd the framework directory <var>dir</var> to the head of the list of directories to be searched for header files. These directories are interleaved with those specified by <code>-I</code> options and are scanned in a left-to-right order. <p>A framework directory is a directory with frameworks in it. A framework is a directory with a <code>Headers</code> and/or <code>PrivateHeaders</code> directory contained directly in it that ends in <code>.framework</code>. The name of a framework is the name of this directory excluding the <code>.framework</code>. Headers associated with the framework are found in one of those two directories, with <code>Headers</code> being searched first. A subframework is a framework directory that is in a framework's <code>Frameworks</code> directory. Includes of subframework headers can only appear in a header of a framework that contains the subframework, or in a sibling subframework header. Two subframeworks are siblings if they occur in the same framework. A subframework should not have the same name as a framework; a warning is issued if this is violated. Currently a subframework cannot have subframeworks; in the future, the mechanism may be extended to support this. The standard frameworks can be found in <code>/System/Library/Frameworks</code> and <code>/Library/Frameworks</code>. An example include looks like <code>#include &lt;Framework/header.h&gt;</code>, where <code>Framework</code> denotes the name of the framework and <code>header.h</code> is found in the <code>PrivateHeaders</code> or <code>Headers</code> directory. </p>\n</dd>\n<dt>\n<code>-iframework</code><var>dir</var>\n</dt>\n<dd>\nLike <code>-F</code> except the directory is a treated as a system directory. The main difference between this <code>-iframework</code> and <code>-F</code> is that with <code>-iframework</code> the compiler does not warn about constructs contained within header files found via <var>dir</var>. This option is valid only for the C family of languages. </dd>\n<dt><code>-gused</code></dt>\n<dd>\nEmit debugging information for symbols that are used. For stabs debugging format, this enables <code>-feliminate-unused-debug-symbols</code>. This is by default ON. </dd>\n<dt><code>-gfull</code></dt>\n<dd>\nEmit debugging information for all symbols and types. </dd>\n<dt>\n<code>-mmacosx-version-min=</code><var>version</var>\n</dt>\n<dd>The earliest version of MacOS X that this executable will run on is <var>version</var>. Typical values of <var>version</var> include <code>10.1</code>, <code>10.2</code>, and <code>10.3.9</code>. <p>If the compiler was built to use the system's headers by default, then the default for this option is the system version on which the compiler is running, otherwise the default is to make choices that are compatible with as many systems and code bases as possible. </p>\n</dd>\n<dt><code>-mkernel</code></dt>\n<dd>\nEnable kernel development mode. The <code>-mkernel</code> option sets <code>-static</code>, <code>-fno-common</code>, <code>-fno-use-cxa-atexit</code>, <code>-fno-exceptions</code>, <code>-fno-non-call-exceptions</code>, <code>-fapple-kext</code>, <code>-fno-weak</code> and <code>-fno-rtti</code> where applicable. This mode also sets <code>-mno-altivec</code>, <code>-msoft-float</code>, <code>-fno-builtin</code> and <code>-mlong-branch</code> for PowerPC targets. </dd>\n<dt><code>-mone-byte-bool</code></dt>\n<dd>\nOverride the defaults for ‘<code>bool</code>’ so that ‘<code>sizeof(bool)==1</code>’. By default ‘<code>sizeof(bool)</code>’ is ‘<code>4</code>’ when compiling for Darwin/PowerPC and ‘<code>1</code>’ when compiling for Darwin/x86, so this option has no effect on x86. <p><strong>Warning:</strong> The <code>-mone-byte-bool</code> switch causes GCC to generate code that is not binary compatible with code generated without that switch. Using this switch may require recompiling all other modules in a program, including system libraries. Use this switch to conform to a non-default data model. </p>\n</dd>\n<dt>\n<code>-mfix-and-continue</code><dt>\n<code>-ffix-and-continue</code><dt><code>-findirect-data</code></dt>\n</dt>\n</dt>\n<dd>\nGenerate code suitable for fast turnaround development, such as to allow GDB to dynamically load <code>.o</code> files into already-running programs. <code>-findirect-data</code> and <code>-ffix-and-continue</code> are provided for backwards compatibility. </dd>\n<dt><code>-all_load</code></dt>\n<dd>\nLoads all members of static archive libraries. See man ld(1) for more information. </dd>\n<dt><code>-arch_errors_fatal</code></dt>\n<dd>\nCause the errors having to do with files that have the wrong architecture to be fatal. </dd>\n<dt><code>-bind_at_load</code></dt>\n<dd>\nCauses the output file to be marked such that the dynamic linker will bind all undefined references when the file is loaded or launched. </dd>\n<dt><code>-bundle</code></dt>\n<dd>\nProduce a Mach-o bundle format file. See man ld(1) for more information. </dd>\n<dt>\n<code>-bundle_loader </code><var>executable</var>\n</dt>\n<dd>\nThis option specifies the <var>executable</var> that will load the build output file being linked. See man ld(1) for more information. </dd>\n<dt><code>-dynamiclib</code></dt>\n<dd>\nWhen passed this option, GCC produces a dynamic library instead of an executable when linking, using the Darwin <code>libtool</code> command. </dd>\n<dt><code>-force_cpusubtype_ALL</code></dt>\n<dd>\nThis causes GCC's output file to have the <var>ALL</var> subtype, instead of one controlled by the <code>-mcpu</code> or <code>-march</code> option. </dd>\n<dt>\n<code>-allowable_client  </code><var>client_name</var><dt>\n<code>-client_name</code><dt>\n<code>-compatibility_version</code><dt>\n<code>-current_version</code><dt>\n<code>-dead_strip</code><dt>\n<code>-dependency-file</code><dt>\n<code>-dylib_file</code><dt>\n<code>-dylinker_install_name</code><dt>\n<code>-dynamic</code><dt>\n<code>-exported_symbols_list</code><dt>\n<code>-filelist</code><dt>\n<code>-flat_namespace</code><dt>\n<code>-force_flat_namespace</code><dt>\n<code>-headerpad_max_install_names</code><dt>\n<code>-image_base</code><dt>\n<code>-init</code><dt>\n<code>-install_name</code><dt>\n<code>-keep_private_externs</code><dt>\n<code>-multi_module</code><dt>\n<code>-multiply_defined</code><dt>\n<code>-multiply_defined_unused</code><dt>\n<code>-noall_load</code><dt>\n<code>-no_dead_strip_inits_and_terms</code><dt>\n<code>-nofixprebinding</code><dt>\n<code>-nomultidefs</code><dt>\n<code>-noprebind</code><dt>\n<code>-noseglinkedit</code><dt>\n<code>-pagezero_size</code><dt>\n<code>-prebind</code><dt>\n<code>-prebind_all_twolevel_modules</code><dt>\n<code>-private_bundle</code><dt>\n<code>-read_only_relocs</code><dt>\n<code>-sectalign</code><dt>\n<code>-sectobjectsymbols</code><dt>\n<code>-whyload</code><dt>\n<code>-seg1addr</code><dt>\n<code>-sectcreate</code><dt>\n<code>-sectobjectsymbols</code><dt>\n<code>-sectorder</code><dt>\n<code>-segaddr</code><dt>\n<code>-segs_read_only_addr</code><dt>\n<code>-segs_read_write_addr</code><dt>\n<code>-seg_addr_table</code><dt>\n<code>-seg_addr_table_filename</code><dt>\n<code>-seglinkedit</code><dt>\n<code>-segprot</code><dt>\n<code>-segs_read_only_addr</code><dt>\n<code>-segs_read_write_addr</code><dt>\n<code>-single_module</code><dt>\n<code>-static</code><dt>\n<code>-sub_library</code><dt>\n<code>-sub_umbrella</code><dt>\n<code>-twolevel_namespace</code><dt>\n<code>-umbrella</code><dt>\n<code>-undefined</code><dt>\n<code>-unexported_symbols_list</code><dt>\n<code>-weak_reference_mismatches</code><dt><code>-whatsloaded</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThese options are passed to the Darwin linker. The Darwin linker man page describes them in detail. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Darwin-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Darwin-Options.html</a>\n  </p>\n</div>\n","dec-alpha-options":"<h1 class=\"subsection\" id=\"DEC-Alpha-Options\">3.17.11 DEC Alpha Options</h1> <p>These ‘<code>-m</code>’ options are defined for the DEC Alpha implementations: </p>\n<dl> <dt>\n<code>-mno-soft-float</code><dt><code>-msoft-float</code></dt>\n</dt>\n<dd>\nUse (do not use) the hardware floating-point instructions for floating-point operations. When <code>-msoft-float</code> is specified, functions in <code>libgcc.a</code> are used to perform floating-point operations. Unless they are replaced by routines that emulate the floating-point operations, or compiled in such a way as to call such emulations routines, these routines issue floating-point operations. If you are compiling for an Alpha without floating-point operations, you must ensure that the library is built so as not to call them. <p>Note that Alpha implementations without floating-point operations are required to have floating-point registers. </p>\n</dd>\n<dt>\n<code>-mfp-reg</code><dt><code>-mno-fp-regs</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the floating-point register set. <code>-mno-fp-regs</code> implies <code>-msoft-float</code>. If the floating-point register set is not used, floating-point operands are passed in integer registers as if they were integers and floating-point results are passed in <code>$0</code> instead of <code>$f0</code>. This is a non-standard calling sequence, so any function with a floating-point argument or return value called by code compiled with <code>-mno-fp-regs</code> must also be compiled with that option. <p>A typical use of this option is building a kernel that does not use, and hence need not save and restore, any floating-point registers. </p>\n</dd>\n<dt><code>-mieee</code></dt>\n<dd>\nThe Alpha architecture implements floating-point hardware optimized for maximum performance. It is mostly compliant with the IEEE floating-point standard. However, for full compliance, software assistance is required. This option generates code fully IEEE-compliant code <em>except</em> that the <var>inexact-flag</var> is not maintained (see below). If this option is turned on, the preprocessor macro <code>_IEEE_FP</code> is defined during compilation. The resulting code is less efficient but is able to correctly support denormalized numbers and exceptional IEEE values such as not-a-number and plus/minus infinity. Other Alpha compilers call this option <code>-ieee_with_no_inexact</code>. </dd>\n<dt><code>-mieee-with-inexact</code></dt>\n<dd>\nThis is like <code>-mieee</code> except the generated code also maintains the IEEE <var>inexact-flag</var>. Turning on this option causes the generated code to implement fully-compliant IEEE math. In addition to <code>_IEEE_FP</code>, <code>_IEEE_FP_EXACT</code> is defined as a preprocessor macro. On some Alpha implementations the resulting code may execute significantly slower than the code generated by default. Since there is very little code that depends on the <var>inexact-flag</var>, you should normally not specify this option. Other Alpha compilers call this option <code>-ieee_with_inexact</code>. </dd>\n<dt>\n<code>-mfp-trap-mode=</code><var>trap-mode</var>\n</dt>\n<dd>\nThis option controls what floating-point related traps are enabled. Other Alpha compilers call this option <samp><span class=\"option\">-fptm </span><var>trap-mode</var></samp>. The trap mode can be set to one of four values: <dl> <dt>‘<code>n</code>’</dt>\n<dd>This is the default (normal) setting. The only traps that are enabled are the ones that cannot be disabled in software (e.g., division by zero trap). </dd>\n<dt>‘<code>u</code>’</dt>\n<dd>In addition to the traps enabled by ‘<code>n</code>’, underflow traps are enabled as well. </dd>\n<dt>‘<code>su</code>’</dt>\n<dd>Like ‘<code>u</code>’, but the instructions are marked to be safe for software completion (see Alpha architecture manual for details). </dd>\n<dt>‘<code>sui</code>’</dt>\n<dd>Like ‘<code>su</code>’, but inexact traps are enabled as well. </dd>\n</dl> </dd>\n<dt>\n<code>-mfp-rounding-mode=</code><var>rounding-mode</var>\n</dt>\n<dd>\nSelects the IEEE rounding mode. Other Alpha compilers call this option <samp><span class=\"option\">-fprm </span><var>rounding-mode</var></samp>. The <var>rounding-mode</var> can be one of: <dl> <dt>‘<code>n</code>’</dt>\n<dd>Normal IEEE rounding mode. Floating-point numbers are rounded towards the nearest machine number or towards the even machine number in case of a tie. </dd>\n<dt>‘<code>m</code>’</dt>\n<dd>Round towards minus infinity. </dd>\n<dt>‘<code>c</code>’</dt>\n<dd>Chopped rounding mode. Floating-point numbers are rounded towards zero. </dd>\n<dt>‘<code>d</code>’</dt>\n<dd>Dynamic rounding mode. A field in the floating-point control register (<var>fpcr</var>, see Alpha architecture reference manual) controls the rounding mode in effect. The C library initializes this register for rounding towards plus infinity. Thus, unless your program modifies the <var>fpcr</var>, ‘<code>d</code>’ corresponds to round towards plus infinity. </dd>\n</dl> </dd>\n<dt>\n<code>-mtrap-precision=</code><var>trap-precision</var>\n</dt>\n<dd>\nIn the Alpha architecture, floating-point traps are imprecise. This means without software assistance it is impossible to recover from a floating trap and program execution normally needs to be terminated. GCC can generate code that can assist operating system trap handlers in determining the exact location that caused a floating-point trap. Depending on the requirements of an application, different levels of precisions can be selected: <dl> <dt>‘<code>p</code>’</dt>\n<dd>Program precision. This option is the default and means a trap handler can only identify which program caused a floating-point exception. </dd>\n<dt>‘<code>f</code>’</dt>\n<dd>Function precision. The trap handler can determine the function that caused a floating-point exception. </dd>\n<dt>‘<code>i</code>’</dt>\n<dd>Instruction precision. The trap handler can determine the exact instruction that caused a floating-point exception. </dd>\n</dl> <p>Other Alpha compilers provide the equivalent options called <code>-scope_safe</code> and <code>-resumption_safe</code>. </p>\n</dd>\n<dt><code>-mieee-conformant</code></dt>\n<dd>\nThis option marks the generated code as IEEE conformant. You must not use this option unless you also specify <code>-mtrap-precision=i</code> and either <code>-mfp-trap-mode=su</code> or <code>-mfp-trap-mode=sui</code>. Its only effect is to emit the line ‘<code>.eflag 48</code>’ in the function prologue of the generated assembly file. </dd>\n<dt><code>-mbuild-constants</code></dt>\n<dd>\nNormally GCC examines a 32- or 64-bit integer constant to see if it can construct it from smaller constants in two or three instructions. If it cannot, it outputs the constant as a literal and generates code to load it from the data segment at run time. <p>Use this option to require GCC to construct <em>all</em> integer constants using code, even if it takes more instructions (the maximum is six). </p>\n<p>You typically use this option to build a shared library dynamic loader. Itself a shared library, it must relocate itself in memory before it can find the variables and constants in its own data segment. </p>\n</dd>\n<dt>\n<code>-mbwx</code><dt>\n<code>-mno-bwx</code><dt>\n<code>-mcix</code><dt>\n<code>-mno-cix</code><dt>\n<code>-mfix</code><dt>\n<code>-mno-fix</code><dt>\n<code>-mmax</code><dt><code>-mno-max</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nIndicate whether GCC should generate code to use the optional BWX, CIX, FIX and MAX instruction sets. The default is to use the instruction sets supported by the CPU type specified via <code>-mcpu=</code> option or that of the CPU on which GCC was built if none is specified. </dd>\n<dt>\n<code>-mfloat-vax</code><dt><code>-mfloat-ieee</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) VAX F and G floating-point arithmetic instead of IEEE single and double precision. </dd>\n<dt>\n<code>-mexplicit-relocs</code><dt><code>-mno-explicit-relocs</code></dt>\n</dt>\n<dd>\nOlder Alpha assemblers provided no way to generate symbol relocations except via assembler macros. Use of these macros does not allow optimal instruction scheduling. GNU binutils as of version 2.12 supports a new syntax that allows the compiler to explicitly mark which relocations should apply to which instructions. This option is mostly useful for debugging, as GCC detects the capabilities of the assembler when it is built and sets the default accordingly. </dd>\n<dt>\n<code>-msmall-data</code><dt><code>-mlarge-data</code></dt>\n</dt>\n<dd>\nWhen <code>-mexplicit-relocs</code> is in effect, static data is accessed via gp-relative relocations. When <code>-msmall-data</code> is used, objects 8 bytes long or smaller are placed in a small data area (the <code>.sdata</code> and <code>.sbss</code> sections) and are accessed via 16-bit relocations off of the <code>$gp</code> register. This limits the size of the small data area to 64KB, but allows the variables to be directly accessed via a single instruction. <p>The default is <code>-mlarge-data</code>. With this option the data area is limited to just below 2GB. Programs that require more than 2GB of data must use <code>malloc</code> or <code>mmap</code> to allocate the data in the heap instead of in the program's data segment. </p>\n<p>When generating code for shared libraries, <code>-fpic</code> implies <code>-msmall-data</code> and <code>-fPIC</code> implies <code>-mlarge-data</code>. </p>\n</dd>\n<dt>\n<code>-msmall-text</code><dt><code>-mlarge-text</code></dt>\n</dt>\n<dd>\nWhen <code>-msmall-text</code> is used, the compiler assumes that the code of the entire program (or shared library) fits in 4MB, and is thus reachable with a branch instruction. When <code>-msmall-data</code> is used, the compiler can assume that all local symbols share the same <code>$gp</code> value, and thus reduce the number of instructions required for a function call from 4 to 1. <p>The default is <code>-mlarge-text</code>. </p>\n</dd>\n<dt>\n<code>-mcpu=</code><var>cpu_type</var>\n</dt>\n<dd>\nSet the instruction set and instruction scheduling parameters for machine type <var>cpu_type</var>. You can specify either the ‘<code>EV</code>’ style name or the corresponding chip number. GCC supports scheduling parameters for the EV4, EV5 and EV6 family of processors and chooses the default values for the instruction set from the processor you specify. If you do not specify a processor type, GCC defaults to the processor on which the compiler was built. <p>Supported values for <var>cpu_type</var> are </p>\n<dl> <dt>‘<code>ev4</code>’<dt>‘<code>ev45</code>’<dt>‘<code>21064</code>’</dt>\n</dt>\n</dt>\n<dd>Schedules as an EV4 and has no instruction set extensions. </dd>\n<dt>‘<code>ev5</code>’<dt>‘<code>21164</code>’</dt>\n</dt>\n<dd>Schedules as an EV5 and has no instruction set extensions. </dd>\n<dt>‘<code>ev56</code>’<dt>‘<code>21164a</code>’</dt>\n</dt>\n<dd>Schedules as an EV5 and supports the BWX extension. </dd>\n<dt>‘<code>pca56</code>’<dt>‘<code>21164pc</code>’<dt>‘<code>21164PC</code>’</dt>\n</dt>\n</dt>\n<dd>Schedules as an EV5 and supports the BWX and MAX extensions. </dd>\n<dt>‘<code>ev6</code>’<dt>‘<code>21264</code>’</dt>\n</dt>\n<dd>Schedules as an EV6 and supports the BWX, FIX, and MAX extensions. </dd>\n<dt>‘<code>ev67</code>’<dt>‘<code>21264a</code>’</dt>\n</dt>\n<dd>Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX extensions. </dd>\n</dl> <p>Native toolchains also support the value ‘<code>native</code>’, which selects the best architecture option for the host processor. <code>-mcpu=native</code> has no effect if GCC does not recognize the processor. </p>\n</dd>\n<dt>\n<code>-mtune=</code><var>cpu_type</var>\n</dt>\n<dd>\nSet only the instruction scheduling parameters for machine type <var>cpu_type</var>. The instruction set is not changed. <p>Native toolchains also support the value ‘<code>native</code>’, which selects the best architecture option for the host processor. <code>-mtune=native</code> has no effect if GCC does not recognize the processor. </p>\n</dd>\n<dt>\n<code>-mmemory-latency=</code><var>time</var>\n</dt>\n<dd>\nSets the latency the scheduler should assume for typical memory references as seen by the application. This number is highly dependent on the memory access patterns used by the application and the size of the external cache on the machine. <p>Valid options for <var>time</var> are </p>\n<dl> <dt>‘<samp><var>number</var></samp>’</dt>\n<dd>A decimal number representing clock cycles. </dd>\n<dt>‘<code>L1</code>’<dt>‘<code>L2</code>’<dt>‘<code>L3</code>’<dt>‘<code>main</code>’</dt>\n</dt>\n</dt>\n</dt>\n<dd>The compiler contains estimates of the number of clock cycles for “typical” EV4 &amp; EV5 hardware for the Level 1, 2 &amp; 3 caches (also called Dcache, Scache, and Bcache), as well as to main memory. Note that L3 is only valid for EV5. </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/DEC-Alpha-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/DEC-Alpha-Options.html</a>\n  </p>\n</div>\n","fr30-options":"<h1 class=\"subsection\" id=\"FR30-Options\">3.17.12 FR30 Options</h1> <p> These options are defined specifically for the FR30 port. </p>\n<dl> <dt><code>-msmall-model</code></dt>\n<dd>\nUse the small address space model. This can produce smaller code, but it does assume that all symbolic values and addresses fit into a 20-bit range. </dd>\n<dt><code>-mno-lsim</code></dt>\n<dd>\nAssume that runtime support has been provided and so there is no need to include the simulator library (<code>libsim.a</code>) on the linker command line. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/FR30-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/FR30-Options.html</a>\n  </p>\n</div>\n","frv-options":"<h1 class=\"subsection\" id=\"FRV-Options\">3.17.13 FRV Options</h1> \n<dl> <dt><code>-mgpr-32</code></dt>\n<dd>\n Only use the first 32 general-purpose registers. </dd>\n<dt><code>-mgpr-64</code></dt>\n<dd>\n Use all 64 general-purpose registers. </dd>\n<dt><code>-mfpr-32</code></dt>\n<dd>\n Use only the first 32 floating-point registers. </dd>\n<dt><code>-mfpr-64</code></dt>\n<dd>\n Use all 64 floating-point registers. </dd>\n<dt><code>-mhard-float</code></dt>\n<dd>\n Use hardware instructions for floating-point operations. </dd>\n<dt><code>-msoft-float</code></dt>\n<dd>\n Use library routines for floating-point operations. </dd>\n<dt><code>-malloc-cc</code></dt>\n<dd>\n Dynamically allocate condition code registers. </dd>\n<dt><code>-mfixed-cc</code></dt>\n<dd>\n Do not try to dynamically allocate condition code registers, only use <code>icc0</code> and <code>fcc0</code>. </dd>\n<dt><code>-mdword</code></dt>\n<dd>\n Change ABI to use double word insns. </dd>\n<dt><code>-mno-dword</code></dt>\n<dd>\n Do not use double word instructions. </dd>\n<dt><code>-mdouble</code></dt>\n<dd>\n Use floating-point double instructions. </dd>\n<dt><code>-mno-double</code></dt>\n<dd>\n Do not use floating-point double instructions. </dd>\n<dt><code>-mmedia</code></dt>\n<dd>\n Use media instructions. </dd>\n<dt><code>-mno-media</code></dt>\n<dd>\n Do not use media instructions. </dd>\n<dt><code>-mmuladd</code></dt>\n<dd>\n Use multiply and add/subtract instructions. </dd>\n<dt><code>-mno-muladd</code></dt>\n<dd>\n Do not use multiply and add/subtract instructions. </dd>\n<dt><code>-mfdpic</code></dt>\n<dd>\n Select the FDPIC ABI, which uses function descriptors to represent pointers to functions. Without any PIC/PIE-related options, it implies <code>-fPIE</code>. With <code>-fpic</code> or <code>-fpie</code>, it assumes GOT entries and small data are within a 12-bit range from the GOT base address; with <code>-fPIC</code> or <code>-fPIE</code>, GOT offsets are computed with 32 bits. With a ‘<code>bfin-elf</code>’ target, this option implies <code>-msim</code>. </dd>\n<dt><code>-minline-plt</code></dt>\n<dd>\n Enable inlining of PLT entries in function calls to functions that are not known to bind locally. It has no effect without <code>-mfdpic</code>. It's enabled by default if optimizing for speed and compiling for shared libraries (i.e., <code>-fPIC</code> or <code>-fpic</code>), or when an optimization option such as <code>-O3</code> or above is present in the command line. </dd>\n<dt><code>-mTLS</code></dt>\n<dd>\n Assume a large TLS segment when generating thread-local code. </dd>\n<dt><code>-mtls</code></dt>\n<dd>\n Do not assume a large TLS segment when generating thread-local code. </dd>\n<dt><code>-mgprel-ro</code></dt>\n<dd>\n Enable the use of <code>GPREL</code> relocations in the FDPIC ABI for data that is known to be in read-only sections. It's enabled by default, except for <code>-fpic</code> or <code>-fpie</code>: even though it may help make the global offset table smaller, it trades 1 instruction for 4. With <code>-fPIC</code> or <code>-fPIE</code>, it trades 3 instructions for 4, one of which may be shared by multiple symbols, and it avoids the need for a GOT entry for the referenced symbol, so it's more likely to be a win. If it is not, <code>-mno-gprel-ro</code> can be used to disable it. </dd>\n<dt><code>-multilib-library-pic</code></dt>\n<dd>\n Link with the (library, not FD) pic libraries. It's implied by <code>-mlibrary-pic</code>, as well as by <code>-fPIC</code> and <code>-fpic</code> without <code>-mfdpic</code>. You should never have to use it explicitly. </dd>\n<dt><code>-mlinked-fp</code></dt>\n<dd>\n Follow the EABI requirement of always creating a frame pointer whenever a stack frame is allocated. This option is enabled by default and can be disabled with <code>-mno-linked-fp</code>. </dd>\n<dt><code>-mlong-calls</code></dt>\n<dd>\n Use indirect addressing to call functions outside the current compilation unit. This allows the functions to be placed anywhere within the 32-bit address space. </dd>\n<dt><code>-malign-labels</code></dt>\n<dd>\n Try to align labels to an 8-byte boundary by inserting NOPs into the previous packet. This option only has an effect when VLIW packing is enabled. It doesn't create new packets; it merely adds NOPs to existing ones. </dd>\n<dt><code>-mlibrary-pic</code></dt>\n<dd>\n Generate position-independent EABI code. </dd>\n<dt><code>-macc-4</code></dt>\n<dd>\n Use only the first four media accumulator registers. </dd>\n<dt><code>-macc-8</code></dt>\n<dd>\n Use all eight media accumulator registers. </dd>\n<dt><code>-mpack</code></dt>\n<dd>\n Pack VLIW instructions. </dd>\n<dt><code>-mno-pack</code></dt>\n<dd>\n Do not pack VLIW instructions. </dd>\n<dt><code>-mno-eflags</code></dt>\n<dd>\n Do not mark ABI switches in e_flags. </dd>\n<dt><code>-mcond-move</code></dt>\n<dd>\n Enable the use of conditional-move instructions (default). <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mno-cond-move</code></dt>\n<dd>\n Disable the use of conditional-move instructions. <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mscc</code></dt>\n<dd>\n Enable the use of conditional set instructions (default). <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mno-scc</code></dt>\n<dd>\n Disable the use of conditional set instructions. <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mcond-exec</code></dt>\n<dd>\n Enable the use of conditional execution (default). <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mno-cond-exec</code></dt>\n<dd>\n Disable the use of conditional execution. <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mvliw-branch</code></dt>\n<dd>\n Run a pass to pack branches into VLIW instructions (default). <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mno-vliw-branch</code></dt>\n<dd>\n Do not run a pass to pack branches into VLIW instructions. <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mmulti-cond-exec</code></dt>\n<dd>\n Enable optimization of <code>&amp;&amp;</code> and <code>||</code> in conditional execution (default). <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mno-multi-cond-exec</code></dt>\n<dd>\n Disable optimization of <code>&amp;&amp;</code> and <code>||</code> in conditional execution. <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mnested-cond-exec</code></dt>\n<dd>\n Enable nested conditional execution optimizations (default). <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-mno-nested-cond-exec</code></dt>\n<dd>\n Disable nested conditional execution optimizations. <p>This switch is mainly for debugging the compiler and will likely be removed in a future version. </p>\n</dd>\n<dt><code>-moptimize-membar</code></dt>\n<dd>\n This switch removes redundant <code>membar</code> instructions from the compiler-generated code. It is enabled by default. </dd>\n<dt><code>-mno-optimize-membar</code></dt>\n<dd>\n This switch disables the automatic removal of redundant <code>membar</code> instructions from the generated code. </dd>\n<dt><code>-mtomcat-stats</code></dt>\n<dd>\n Cause gas to print out tomcat statistics. </dd>\n<dt>\n<code>-mcpu=</code><var>cpu</var>\n</dt>\n<dd>\n Select the processor type for which to generate code. Possible values are ‘<code>frv</code>’, ‘<code>fr550</code>’, ‘<code>tomcat</code>’, ‘<code>fr500</code>’, ‘<code>fr450</code>’, ‘<code>fr405</code>’, ‘<code>fr400</code>’, ‘<code>fr300</code>’ and ‘<code>simple</code>’. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/FRV-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/FRV-Options.html</a>\n  </p>\n</div>\n","gnu_002flinux-options":"<h1 class=\"subsection\" id=\"GNU_002fLinux-Options\">3.17.14 GNU/Linux Options</h1> <p>These ‘<code>-m</code>’ options are defined for GNU/Linux targets: </p>\n<dl> <dt><code>-mglibc</code></dt>\n<dd>\nUse the GNU C library. This is the default except on ‘<code>*-*-linux-*uclibc*</code>’ and ‘<code>*-*-linux-*android*</code>’ targets. </dd>\n<dt><code>-muclibc</code></dt>\n<dd>\nUse uClibc C library. This is the default on ‘<code>*-*-linux-*uclibc*</code>’ targets. </dd>\n<dt><code>-mbionic</code></dt>\n<dd>\nUse Bionic C library. This is the default on ‘<code>*-*-linux-*android*</code>’ targets. </dd>\n<dt><code>-mandroid</code></dt>\n<dd>\nCompile code compatible with Android platform. This is the default on ‘<code>*-*-linux-*android*</code>’ targets. <p>When compiling, this option enables <code>-mbionic</code>, <code>-fPIC</code>, <code>-fno-exceptions</code> and <code>-fno-rtti</code> by default. When linking, this option makes the GCC driver pass Android-specific options to the linker. Finally, this option causes the preprocessor macro <code>__ANDROID__</code> to be defined. </p>\n</dd>\n<dt><code>-tno-android-cc</code></dt>\n<dd>\nDisable compilation effects of <code>-mandroid</code>, i.e., do not enable <code>-mbionic</code>, <code>-fPIC</code>, <code>-fno-exceptions</code> and <code>-fno-rtti</code> by default. </dd>\n<dt><code>-tno-android-ld</code></dt>\n<dd>\nDisable linking effects of <code>-mandroid</code>, i.e., pass standard Linux linking options to the linker. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU_002fLinux-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU_002fLinux-Options.html</a>\n  </p>\n</div>\n","h8_002f300-options":"<h1 class=\"subsection\" id=\"H8_002f300-Options\">3.17.15 H8/300 Options</h1> <p>These ‘<code>-m</code>’ options are defined for the H8/300 implementations: </p>\n<dl> <dt><code>-mrelax</code></dt>\n<dd>\nShorten some address references at link time, when possible; uses the linker option <code>-relax</code>. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/ld/H8_002f300.html#H8_002f300\"><code>ld</code> and the H8/300</a>, for a fuller description. </dd>\n<dt><code>-mh</code></dt>\n<dd>\nGenerate code for the H8/300H. </dd>\n<dt><code>-ms</code></dt>\n<dd>\nGenerate code for the H8S. </dd>\n<dt><code>-mn</code></dt>\n<dd>\nGenerate code for the H8S and H8/300H in the normal mode. This switch must be used either with <code>-mh</code> or <code>-ms</code>. </dd>\n<dt><code>-ms2600</code></dt>\n<dd>\nGenerate code for the H8S/2600. This switch must be used with <code>-ms</code>. </dd>\n<dt><code>-mexr</code></dt>\n<dd>\nExtended registers are stored on stack before execution of function with monitor attribute. Default option is <code>-mexr</code>. This option is valid only for H8S targets. </dd>\n<dt><code>-mno-exr</code></dt>\n<dd>\nExtended registers are not stored on stack before execution of function with monitor attribute. Default option is <code>-mno-exr</code>. This option is valid only for H8S targets. </dd>\n<dt><code>-mint32</code></dt>\n<dd>\nMake <code>int</code> data 32 bits by default. </dd>\n<dt><code>-malign-300</code></dt>\n<dd>\nOn the H8/300H and H8S, use the same alignment rules as for the H8/300. The default for the H8/300H and H8S is to align longs and floats on 4-byte boundaries. <code>-malign-300</code> causes them to be aligned on 2-byte boundaries. This option has no effect on the H8/300. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/H8_002f300-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/H8_002f300-Options.html</a>\n  </p>\n</div>\n","hppa-options":"<h1 class=\"subsection\" id=\"HPPA-Options\">3.17.16 HPPA Options</h1> <p> These ‘<code>-m</code>’ options are defined for the HPPA family of computers: </p>\n<dl> <dt>\n<code>-march=</code><var>architecture-type</var>\n</dt>\n<dd>\nGenerate code for the specified architecture. The choices for <var>architecture-type</var> are ‘<code>1.0</code>’ for PA 1.0, ‘<code>1.1</code>’ for PA 1.1, and ‘<code>2.0</code>’ for PA 2.0 processors. Refer to <code>/usr/lib/sched.models</code> on an HP-UX system to determine the proper architecture option for your machine. Code compiled for lower numbered architectures runs on higher numbered architectures, but not the other way around. </dd>\n<dt>\n<code>-mpa-risc-1-0</code><dt>\n<code>-mpa-risc-1-1</code><dt><code>-mpa-risc-2-0</code></dt>\n</dt>\n</dt>\n<dd>\nSynonyms for <code>-march=1.0</code>, <code>-march=1.1</code>, and <code>-march=2.0</code> respectively. </dd>\n<dt><code>-mjump-in-delay</code></dt>\n<dd>\nFill delay slots of function calls with unconditional jump instructions by modifying the return pointer for the function call to be the target of the conditional jump. </dd>\n<dt><code>-mdisable-fpregs</code></dt>\n<dd>\nPrevent floating-point registers from being used in any manner. This is necessary for compiling kernels that perform lazy context switching of floating-point registers. If you use this option and attempt to perform floating-point operations, the compiler aborts. </dd>\n<dt><code>-mdisable-indexing</code></dt>\n<dd>\nPrevent the compiler from using indexing address modes. This avoids some rather obscure problems when compiling MIG generated code under MACH. </dd>\n<dt><code>-mno-space-regs</code></dt>\n<dd>\nGenerate code that assumes the target has no space registers. This allows GCC to generate faster indirect calls and use unscaled index address modes. <p>Such code is suitable for level 0 PA systems and kernels. </p>\n</dd>\n<dt><code>-mfast-indirect-calls</code></dt>\n<dd>\nGenerate code that assumes calls never cross space boundaries. This allows GCC to emit code that performs faster indirect calls. <p>This option does not work in the presence of shared libraries or nested functions. </p>\n</dd>\n<dt>\n<code>-mfixed-range=</code><var>register-range</var>\n</dt>\n<dd>\nGenerate code treating the given register range as fixed registers. A fixed register is one that the register allocator cannot use. This is useful when compiling kernel code. A register range is specified as two registers separated by a dash. Multiple register ranges can be specified separated by a comma. </dd>\n<dt><code>-mlong-load-store</code></dt>\n<dd>\nGenerate 3-instruction load and store sequences as sometimes required by the HP-UX 10 linker. This is equivalent to the ‘<code>+k</code>’ option to the HP compilers. </dd>\n<dt><code>-mportable-runtime</code></dt>\n<dd>\nUse the portable calling conventions proposed by HP for ELF systems. </dd>\n<dt><code>-mgas</code></dt>\n<dd>\nEnable the use of assembler directives only GAS understands. </dd>\n<dt>\n<code>-mschedule=</code><var>cpu-type</var>\n</dt>\n<dd>\nSchedule code according to the constraints for the machine type <var>cpu-type</var>. The choices for <var>cpu-type</var> are ‘<code>700</code>’ ‘<code>7100</code>’, ‘<code>7100LC</code>’, ‘<code>7200</code>’, ‘<code>7300</code>’ and ‘<code>8000</code>’. Refer to <code>/usr/lib/sched.models</code> on an HP-UX system to determine the proper scheduling option for your machine. The default scheduling is ‘<code>8000</code>’. </dd>\n<dt><code>-mlinker-opt</code></dt>\n<dd>\nEnable the optimization pass in the HP-UX linker. Note this makes symbolic debugging impossible. It also triggers a bug in the HP-UX 8 and HP-UX 9 linkers in which they give bogus error messages when linking some programs. </dd>\n<dt><code>-msoft-float</code></dt>\n<dd>\nGenerate output containing library calls for floating point. <strong>Warning:</strong> the requisite libraries are not available for all HPPA targets. Normally the facilities of the machine's usual C compiler are used, but this cannot be done directly in cross-compilation. You must make your own arrangements to provide suitable library functions for cross-compilation. <p><code>-msoft-float</code> changes the calling convention in the output file; therefore, it is only useful if you compile <em>all</em> of a program with this option. In particular, you need to compile <code>libgcc.a</code>, the library that comes with GCC, with <code>-msoft-float</code> in order for this to work. </p>\n</dd>\n<dt><code>-msio</code></dt>\n<dd>\nGenerate the predefine, <code>_SIO</code>, for server IO. The default is <code>-mwsio</code>. This generates the predefines, <code>__hp9000s700</code>, <code>__hp9000s700__</code> and <code>_WSIO</code>, for workstation IO. These options are available under HP-UX and HI-UX. </dd>\n<dt><code>-mgnu-ld</code></dt>\n<dd>\nUse options specific to GNU <code>ld</code>. This passes <code>-shared</code> to <code>ld</code> when building a shared library. It is the default when GCC is configured, explicitly or implicitly, with the GNU linker. This option does not affect which <code>ld</code> is called; it only changes what parameters are passed to that <code>ld</code>. The <code>ld</code> that is called is determined by the <code>--with-ld</code> configure option, GCC's program search path, and finally by the user's <code>PATH</code>. The linker used by GCC can be printed using ‘<code>which `gcc -print-prog-name=ld`</code>’. This option is only available on the 64-bit HP-UX GCC, i.e. configured with ‘<code>hppa*64*-*-hpux*</code>’. </dd>\n<dt><code>-mhp-ld</code></dt>\n<dd>\nUse options specific to HP <code>ld</code>. This passes <code>-b</code> to <code>ld</code> when building a shared library and passes <code>+Accept TypeMismatch</code> to <code>ld</code> on all links. It is the default when GCC is configured, explicitly or implicitly, with the HP linker. This option does not affect which <code>ld</code> is called; it only changes what parameters are passed to that <code>ld</code>. The <code>ld</code> that is called is determined by the <code>--with-ld</code> configure option, GCC's program search path, and finally by the user's <code>PATH</code>. The linker used by GCC can be printed using ‘<code>which `gcc -print-prog-name=ld`</code>’. This option is only available on the 64-bit HP-UX GCC, i.e. configured with ‘<code>hppa*64*-*-hpux*</code>’. </dd>\n<dt><code>-mlong-calls</code></dt>\n<dd>\nGenerate code that uses long call sequences. This ensures that a call is always able to reach linker generated stubs. The default is to generate long calls only when the distance from the call site to the beginning of the function or translation unit, as the case may be, exceeds a predefined limit set by the branch type being used. The limits for normal calls are 7,600,000 and 240,000 bytes, respectively for the PA 2.0 and PA 1.X architectures. Sibcalls are always limited at 240,000 bytes. <p>Distances are measured from the beginning of functions when using the <code>-ffunction-sections</code> option, or when using the <code>-mgas</code> and <code>-mno-portable-runtime</code> options together under HP-UX with the SOM linker. </p>\n<p>It is normally not desirable to use this option as it degrades performance. However, it may be useful in large applications, particularly when partial linking is used to build the application. </p>\n<p>The types of long calls used depends on the capabilities of the assembler and linker, and the type of code being generated. The impact on systems that support long absolute calls, and long pic symbol-difference or pc-relative calls should be relatively small. However, an indirect call is used on 32-bit ELF systems in pic code and it is quite long. </p>\n</dd>\n<dt>\n<code>-munix=</code><var>unix-std</var>\n</dt>\n<dd>\nGenerate compiler predefines and select a startfile for the specified UNIX standard. The choices for <var>unix-std</var> are ‘<code>93</code>’, ‘<code>95</code>’ and ‘<code>98</code>’. ‘<code>93</code>’ is supported on all HP-UX versions. ‘<code>95</code>’ is available on HP-UX 10.10 and later. ‘<code>98</code>’ is available on HP-UX 11.11 and later. The default values are ‘<code>93</code>’ for HP-UX 10.00, ‘<code>95</code>’ for HP-UX 10.10 though to 11.00, and ‘<code>98</code>’ for HP-UX 11.11 and later. <p><code>-munix=93</code> provides the same predefines as GCC 3.3 and 3.4. <code>-munix=95</code> provides additional predefines for <code>XOPEN_UNIX</code> and <code>_XOPEN_SOURCE_EXTENDED</code>, and the startfile <code>unix95.o</code>. <code>-munix=98</code> provides additional predefines for <code>_XOPEN_UNIX</code>, <code>_XOPEN_SOURCE_EXTENDED</code>, <code>_INCLUDE__STDC_A1_SOURCE</code> and <code>_INCLUDE_XOPEN_SOURCE_500</code>, and the startfile <code>unix98.o</code>. </p>\n<p>It is <em>important</em> to note that this option changes the interfaces for various library routines. It also affects the operational behavior of the C library. Thus, <em>extreme</em> care is needed in using this option. </p>\n<p>Library code that is intended to operate with more than one UNIX standard must test, set and restore the variable <var>__xpg4_extended_mask</var> as appropriate. Most GNU software doesn't provide this capability. </p>\n</dd>\n<dt><code>-nolibdld</code></dt>\n<dd>\nSuppress the generation of link options to search libdld.sl when the <code>-static</code> option is specified on HP-UX 10 and later. </dd>\n<dt><code>-static</code></dt>\n<dd>\nThe HP-UX implementation of setlocale in libc has a dependency on libdld.sl. There isn't an archive version of libdld.sl. Thus, when the <code>-static</code> option is specified, special link options are needed to resolve this dependency. <p>On HP-UX 10 and later, the GCC driver adds the necessary options to link with libdld.sl when the <code>-static</code> option is specified. This causes the resulting binary to be dynamic. On the 64-bit port, the linkers generate dynamic binaries by default in any case. The <code>-nolibdld</code> option can be used to prevent the GCC driver from adding these link options. </p>\n</dd>\n<dt><code>-threads</code></dt>\n<dd>\nAdd support for multithreading with the dce thread library under HP-UX. This option sets flags for both the preprocessor and linker. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/HPPA-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/HPPA-Options.html</a>\n  </p>\n</div>\n","i386-and-x86_002d64-options":"<h1 class=\"subsection\" id=\"i386-and-x86_002d64-Options\">3.17.17 Intel 386 and AMD x86-64 Options</h1> <p> These ‘<code>-m</code>’ options are defined for the i386 and x86-64 family of computers: </p>\n<dl> <dt>\n<code>-march=</code><var>cpu-type</var>\n</dt>\n<dd>\nGenerate instructions for the machine type <var>cpu-type</var>. In contrast to <samp><span class=\"option\">-mtune=</span><var>cpu-type</var></samp>, which merely tunes the generated code for the specified <var>cpu-type</var>, <samp><span class=\"option\">-march=</span><var>cpu-type</var></samp> allows GCC to generate code that may not run at all on processors other than the one indicated. Specifying <samp><span class=\"option\">-march=</span><var>cpu-type</var></samp> implies <samp><span class=\"option\">-mtune=</span><var>cpu-type</var></samp>. <p>The choices for <var>cpu-type</var> are: </p>\n<dl> <dt>‘<code>native</code>’</dt>\n<dd>This selects the CPU to generate code for at compilation time by determining the processor type of the compiling machine. Using <code>-march=native</code> enables all instruction subsets supported by the local machine (hence the result might not run on different machines). Using <code>-mtune=native</code> produces code optimized for the local machine under the constraints of the selected instruction set. </dd>\n<dt>‘<code>i386</code>’</dt>\n<dd>Original Intel i386 CPU. </dd>\n<dt>‘<code>i486</code>’</dt>\n<dd>Intel i486 CPU. (No scheduling is implemented for this chip.) </dd>\n<dt>‘<code>i586</code>’<dt>‘<code>pentium</code>’</dt>\n</dt>\n<dd>Intel Pentium CPU with no MMX support. </dd>\n<dt>‘<code>pentium-mmx</code>’</dt>\n<dd>Intel Pentium MMX CPU, based on Pentium core with MMX instruction set support. </dd>\n<dt>‘<code>pentiumpro</code>’</dt>\n<dd>Intel Pentium Pro CPU. </dd>\n<dt>‘<code>i686</code>’</dt>\n<dd>When used with <code>-march</code>, the Pentium Pro instruction set is used, so the code runs on all i686 family chips. When used with <code>-mtune</code>, it has the same meaning as ‘<code>generic</code>’. </dd>\n<dt>‘<code>pentium2</code>’</dt>\n<dd>Intel Pentium II CPU, based on Pentium Pro core with MMX instruction set support. </dd>\n<dt>‘<code>pentium3</code>’<dt>‘<code>pentium3m</code>’</dt>\n</dt>\n<dd>Intel Pentium III CPU, based on Pentium Pro core with MMX and SSE instruction set support. </dd>\n<dt>‘<code>pentium-m</code>’</dt>\n<dd>Intel Pentium M; low-power version of Intel Pentium III CPU with MMX, SSE and SSE2 instruction set support. Used by Centrino notebooks. </dd>\n<dt>‘<code>pentium4</code>’<dt>‘<code>pentium4m</code>’</dt>\n</dt>\n<dd>Intel Pentium 4 CPU with MMX, SSE and SSE2 instruction set support. </dd>\n<dt>‘<code>prescott</code>’</dt>\n<dd>Improved version of Intel Pentium 4 CPU with MMX, SSE, SSE2 and SSE3 instruction set support. </dd>\n<dt>‘<code>nocona</code>’</dt>\n<dd>Improved version of Intel Pentium 4 CPU with 64-bit extensions, MMX, SSE, SSE2 and SSE3 instruction set support. </dd>\n<dt>‘<code>core2</code>’</dt>\n<dd>Intel Core 2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support. </dd>\n<dt>‘<code>nehalem</code>’</dt>\n<dd>Intel Nehalem CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and POPCNT instruction set support. </dd>\n<dt>‘<code>westmere</code>’</dt>\n<dd>Intel Westmere CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES and PCLMUL instruction set support. </dd>\n<dt>‘<code>sandybridge</code>’</dt>\n<dd>Intel Sandy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES and PCLMUL instruction set support. </dd>\n<dt>‘<code>ivybridge</code>’</dt>\n<dd>Intel Ivy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES, PCLMUL, FSGSBASE, RDRND and F16C instruction set support. </dd>\n<dt>‘<code>haswell</code>’</dt>\n<dd>Intel Haswell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2 and F16C instruction set support. </dd>\n<dt>‘<code>broadwell</code>’</dt>\n<dd>Intel Broadwell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX and PREFETCHW instruction set support. </dd>\n<dt>‘<code>bonnell</code>’</dt>\n<dd>Intel Bonnell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support. </dd>\n<dt>‘<code>silvermont</code>’</dt>\n<dd>Intel Silvermont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL and RDRND instruction set support. </dd>\n<dt>‘<code>k6</code>’</dt>\n<dd>AMD K6 CPU with MMX instruction set support. </dd>\n<dt>‘<code>k6-2</code>’<dt>‘<code>k6-3</code>’</dt>\n</dt>\n<dd>Improved versions of AMD K6 CPU with MMX and 3DNow! instruction set support. </dd>\n<dt>‘<code>athlon</code>’<dt>‘<code>athlon-tbird</code>’</dt>\n</dt>\n<dd>AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow! and SSE prefetch instructions support. </dd>\n<dt>‘<code>athlon-4</code>’<dt>‘<code>athlon-xp</code>’<dt>‘<code>athlon-mp</code>’</dt>\n</dt>\n</dt>\n<dd>Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow! and full SSE instruction set support. </dd>\n<dt>‘<code>k8</code>’<dt>‘<code>opteron</code>’<dt>‘<code>athlon64</code>’<dt>‘<code>athlon-fx</code>’</dt>\n</dt>\n</dt>\n</dt>\n<dd>Processors based on the AMD K8 core with x86-64 instruction set support, including the AMD Opteron, Athlon 64, and Athlon 64 FX processors. (This supersets MMX, SSE, SSE2, 3DNow!, enhanced 3DNow! and 64-bit instruction set extensions.) </dd>\n<dt>‘<code>k8-sse3</code>’<dt>‘<code>opteron-sse3</code>’<dt>‘<code>athlon64-sse3</code>’</dt>\n</dt>\n</dt>\n<dd>Improved versions of AMD K8 cores with SSE3 instruction set support. </dd>\n<dt>‘<code>amdfam10</code>’<dt>‘<code>barcelona</code>’</dt>\n</dt>\n<dd>CPUs based on AMD Family 10h cores with x86-64 instruction set support. (This supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!, enhanced 3DNow!, ABM and 64-bit instruction set extensions.) </dd>\n<dt>‘<code>bdver1</code>’</dt>\n<dd>CPUs based on AMD Family 15h cores with x86-64 instruction set support. (This supersets FMA4, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.) </dd>\n<dt>‘<code>bdver2</code>’</dt>\n<dd>AMD Family 15h core based CPUs with x86-64 instruction set support. (This supersets BMI, TBM, F16C, FMA, FMA4, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.) </dd>\n<dt>‘<code>bdver3</code>’</dt>\n<dd>AMD Family 15h core based CPUs with x86-64 instruction set support. (This supersets BMI, TBM, F16C, FMA, FMA4, FSGSBASE, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions. </dd>\n<dt>‘<code>bdver4</code>’</dt>\n<dd>AMD Family 15h core based CPUs with x86-64 instruction set support. (This supersets BMI, BMI2, TBM, F16C, FMA, FMA4, FSGSBASE, AVX, AVX2, XOP, LWP, AES, PCL_MUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions. </dd>\n<dt>‘<code>btver1</code>’</dt>\n<dd>CPUs based on AMD Family 14h cores with x86-64 instruction set support. (This supersets MMX, SSE, SSE2, SSE3, SSSE3, SSE4A, CX16, ABM and 64-bit instruction set extensions.) </dd>\n<dt>‘<code>btver2</code>’</dt>\n<dd>CPUs based on AMD Family 16h cores with x86-64 instruction set support. This includes MOVBE, F16C, BMI, AVX, PCL_MUL, AES, SSE4.2, SSE4.1, CX16, ABM, SSE4A, SSSE3, SSE3, SSE2, SSE, MMX and 64-bit instruction set extensions. </dd>\n<dt>‘<code>winchip-c6</code>’</dt>\n<dd>IDT WinChip C6 CPU, dealt in same way as i486 with additional MMX instruction set support. </dd>\n<dt>‘<code>winchip2</code>’</dt>\n<dd>IDT WinChip 2 CPU, dealt in same way as i486 with additional MMX and 3DNow! instruction set support. </dd>\n<dt>‘<code>c3</code>’</dt>\n<dd>VIA C3 CPU with MMX and 3DNow! instruction set support. (No scheduling is implemented for this chip.) </dd>\n<dt>‘<code>c3-2</code>’</dt>\n<dd>VIA C3-2 (Nehemiah/C5XL) CPU with MMX and SSE instruction set support. (No scheduling is implemented for this chip.) </dd>\n<dt>‘<code>geode</code>’</dt>\n<dd>AMD Geode embedded processor with MMX and 3DNow! instruction set support. </dd>\n</dl> </dd>\n<dt>\n<code>-mtune=</code><var>cpu-type</var>\n</dt>\n<dd>\nTune to <var>cpu-type</var> everything applicable about the generated code, except for the ABI and the set of available instructions. While picking a specific <var>cpu-type</var> schedules things appropriately for that particular chip, the compiler does not generate any code that cannot run on the default machine type unless you use a <samp><span class=\"option\">-march=</span><var>cpu-type</var></samp> option. For example, if GCC is configured for i686-pc-linux-gnu then <code>-mtune=pentium4</code> generates code that is tuned for Pentium 4 but still runs on i686 machines. <p>The choices for <var>cpu-type</var> are the same as for <code>-march</code>. In addition, <code>-mtune</code> supports 2 extra choices for <var>cpu-type</var>: </p>\n<dl> <dt>‘<code>generic</code>’</dt>\n<dd>Produce code optimized for the most common IA32/AMD64/EM64T processors. If you know the CPU on which your code will run, then you should use the corresponding <code>-mtune</code> or <code>-march</code> option instead of <code>-mtune=generic</code>. But, if you do not know exactly what CPU users of your application will have, then you should use this option. <p>As new processors are deployed in the marketplace, the behavior of this option will change. Therefore, if you upgrade to a newer version of GCC, code generation controlled by this option will change to reflect the processors that are most common at the time that version of GCC is released. </p>\n<p>There is no <code>-march=generic</code> option because <code>-march</code> indicates the instruction set the compiler can use, and there is no generic instruction set applicable to all processors. In contrast, <code>-mtune</code> indicates the processor (or, in this case, collection of processors) for which the code is optimized. </p>\n</dd>\n<dt>‘<code>intel</code>’</dt>\n<dd>Produce code optimized for the most current Intel processors, which are Haswell and Silvermont for this version of GCC. If you know the CPU on which your code will run, then you should use the corresponding <code>-mtune</code> or <code>-march</code> option instead of <code>-mtune=intel</code>. But, if you want your application performs better on both Haswell and Silvermont, then you should use this option. <p>As new Intel processors are deployed in the marketplace, the behavior of this option will change. Therefore, if you upgrade to a newer version of GCC, code generation controlled by this option will change to reflect the most current Intel processors at the time that version of GCC is released. </p>\n<p>There is no <code>-march=intel</code> option because <code>-march</code> indicates the instruction set the compiler can use, and there is no common instruction set applicable to all processors. In contrast, <code>-mtune</code> indicates the processor (or, in this case, collection of processors) for which the code is optimized. </p>\n</dd>\n</dl> </dd>\n<dt>\n<code>-mcpu=</code><var>cpu-type</var>\n</dt>\n<dd>\nA deprecated synonym for <code>-mtune</code>. </dd>\n<dt>\n<code>-mfpmath=</code><var>unit</var>\n</dt>\n<dd>\nGenerate floating-point arithmetic for selected unit <var>unit</var>. The choices for <var>unit</var> are: <dl> <dt>‘<code>387</code>’</dt>\n<dd>Use the standard 387 floating-point coprocessor present on the majority of chips and emulated otherwise. Code compiled with this option runs almost everywhere. The temporary results are computed in 80-bit precision instead of the precision specified by the type, resulting in slightly different results compared to most of other chips. See <code>-ffloat-store</code> for more detailed description. <p>This is the default choice for i386 compiler. </p>\n</dd>\n<dt>‘<code>sse</code>’</dt>\n<dd>Use scalar floating-point instructions present in the SSE instruction set. This instruction set is supported by Pentium III and newer chips, and in the AMD line by Athlon-4, Athlon XP and Athlon MP chips. The earlier version of the SSE instruction set supports only single-precision arithmetic, thus the double and extended-precision arithmetic are still done using 387. A later version, present only in Pentium 4 and AMD x86-64 chips, supports double-precision arithmetic too. <p>For the i386 compiler, you must use <samp><span class=\"option\">-march=</span><var>cpu-type</var></samp>, <code>-msse</code> or <code>-msse2</code> switches to enable SSE extensions and make this option effective. For the x86-64 compiler, these extensions are enabled by default. </p>\n<p>The resulting code should be considerably faster in the majority of cases and avoid the numerical instability problems of 387 code, but may break some existing code that expects temporaries to be 80 bits. </p>\n<p>This is the default choice for the x86-64 compiler. </p>\n</dd>\n<dt>‘<code>sse,387</code>’<dt>‘<code>sse+387</code>’<dt>‘<code>both</code>’</dt>\n</dt>\n</dt>\n<dd>Attempt to utilize both instruction sets at once. This effectively doubles the amount of available registers, and on chips with separate execution units for 387 and SSE the execution resources too. Use this option with care, as it is still experimental, because the GCC register allocator does not model separate functional units well, resulting in unstable performance. </dd>\n</dl> </dd>\n<dt>\n<code>-masm=</code><var>dialect</var>\n</dt>\n<dd>\nOutput assembly instructions using selected <var>dialect</var>. Supported choices are ‘<code>intel</code>’ or ‘<code>att</code>’ (the default). Darwin does not support ‘<code>intel</code>’. </dd>\n<dt>\n<code>-mieee-fp</code><dt><code>-mno-ieee-fp</code></dt>\n</dt>\n<dd>\nControl whether or not the compiler uses IEEE floating-point comparisons. These correctly handle the case where the result of a comparison is unordered. </dd>\n<dt><code>-msoft-float</code></dt>\n<dd>\nGenerate output containing library calls for floating point. <p><strong>Warning:</strong> the requisite libraries are not part of GCC. Normally the facilities of the machine's usual C compiler are used, but this can't be done directly in cross-compilation. You must make your own arrangements to provide suitable library functions for cross-compilation. </p>\n<p>On machines where a function returns floating-point results in the 80387 register stack, some floating-point opcodes may be emitted even if <code>-msoft-float</code> is used. </p>\n</dd>\n<dt><code>-mno-fp-ret-in-387</code></dt>\n<dd>\nDo not use the FPU registers for return values of functions. <p>The usual calling convention has functions return values of types <code>float</code> and <code>double</code> in an FPU register, even if there is no FPU. The idea is that the operating system should emulate an FPU. </p>\n<p>The option <code>-mno-fp-ret-in-387</code> causes such values to be returned in ordinary CPU registers instead. </p>\n</dd>\n<dt><code>-mno-fancy-math-387</code></dt>\n<dd>\nSome 387 emulators do not support the <code>sin</code>, <code>cos</code> and <code>sqrt</code> instructions for the 387. Specify this option to avoid generating those instructions. This option is the default on FreeBSD, OpenBSD and NetBSD. This option is overridden when <code>-march</code> indicates that the target CPU always has an FPU and so the instruction does not need emulation. These instructions are not generated unless you also use the <code>-funsafe-math-optimizations</code> switch. </dd>\n<dt>\n<code>-malign-double</code><dt><code>-mno-align-double</code></dt>\n</dt>\n<dd>\nControl whether GCC aligns <code>double</code>, <code>long double</code>, and <code>long long</code> variables on a two-word boundary or a one-word boundary. Aligning <code>double</code> variables on a two-word boundary produces code that runs somewhat faster on a Pentium at the expense of more memory. <p>On x86-64, <code>-malign-double</code> is enabled by default. </p>\n<p><strong>Warning:</strong> if you use the <code>-malign-double</code> switch, structures containing the above types are aligned differently than the published application binary interface specifications for the 386 and are not binary compatible with structures in code compiled without that switch. </p>\n</dd>\n<dt>\n<code>-m96bit-long-double</code><dt><code>-m128bit-long-double</code></dt>\n</dt>\n<dd>\nThese switches control the size of <code>long double</code> type. The i386 application binary interface specifies the size to be 96 bits, so <code>-m96bit-long-double</code> is the default in 32-bit mode. <p>Modern architectures (Pentium and newer) prefer <code>long double</code> to be aligned to an 8- or 16-byte boundary. In arrays or structures conforming to the ABI, this is not possible. So specifying <code>-m128bit-long-double</code> aligns <code>long double</code> to a 16-byte boundary by padding the <code>long double</code> with an additional 32-bit zero. </p>\n<p>In the x86-64 compiler, <code>-m128bit-long-double</code> is the default choice as its ABI specifies that <code>long double</code> is aligned on 16-byte boundary. </p>\n<p>Notice that neither of these options enable any extra precision over the x87 standard of 80 bits for a <code>long double</code>. </p>\n<p><strong>Warning:</strong> if you override the default value for your target ABI, this changes the size of structures and arrays containing <code>long double</code> variables, as well as modifying the function calling convention for functions taking <code>long double</code>. Hence they are not binary-compatible with code compiled without that switch. </p>\n</dd>\n<dt>\n<code>-mlong-double-64</code><dt>\n<code>-mlong-double-80</code><dt><code>-mlong-double-128</code></dt>\n</dt>\n</dt>\n<dd>\nThese switches control the size of <code>long double</code> type. A size of 64 bits makes the <code>long double</code> type equivalent to the <code>double</code> type. This is the default for 32-bit Bionic C library. A size of 128 bits makes the <code>long double</code> type equivalent to the <code>__float128</code> type. This is the default for 64-bit Bionic C library. <p><strong>Warning:</strong> if you override the default value for your target ABI, this changes the size of structures and arrays containing <code>long double</code> variables, as well as modifying the function calling convention for functions taking <code>long double</code>. Hence they are not binary-compatible with code compiled without that switch. </p>\n</dd>\n<dt>\n<code>-mlarge-data-threshold=</code><var>threshold</var>\n</dt>\n<dd>\nWhen <code>-mcmodel=medium</code> is specified, data objects larger than <var>threshold</var> are placed in the large data section. This value must be the same across all objects linked into the binary, and defaults to 65535. </dd>\n<dt><code>-mrtd</code></dt>\n<dd>\nUse a different function-calling convention, in which functions that take a fixed number of arguments return with the <code>ret </code><var>num</var> instruction, which pops their arguments while returning. This saves one instruction in the caller since there is no need to pop the arguments there. <p>You can specify that an individual function is called with this calling sequence with the function attribute ‘<code>stdcall</code>’. You can also override the <code>-mrtd</code> option by using the function attribute ‘<code>cdecl</code>’. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>. </p>\n<p><strong>Warning:</strong> this calling convention is incompatible with the one normally used on Unix, so you cannot use it if you need to call libraries compiled with the Unix compiler. </p>\n<p>Also, you must provide function prototypes for all functions that take variable numbers of arguments (including <code>printf</code>); otherwise incorrect code is generated for calls to those functions. </p>\n<p>In addition, seriously incorrect code results if you call a function with too many arguments. (Normally, extra arguments are harmlessly ignored.) </p>\n</dd>\n<dt>\n<code>-mregparm=</code><var>num</var>\n</dt>\n<dd>\nControl how many registers are used to pass integer arguments. By default, no registers are used to pass arguments, and at most 3 registers can be used. You can control this behavior for a specific function by using the function attribute ‘<code>regparm</code>’. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>. <p><strong>Warning:</strong> if you use this switch, and <var>num</var> is nonzero, then you must build all modules with the same value, including any libraries. This includes the system libraries and startup modules. </p>\n</dd>\n<dt><code>-msseregparm</code></dt>\n<dd>\nUse SSE register passing conventions for float and double arguments and return values. You can control this behavior for a specific function by using the function attribute ‘<code>sseregparm</code>’. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>. <p><strong>Warning:</strong> if you use this switch then you must build all modules with the same value, including any libraries. This includes the system libraries and startup modules. </p>\n</dd>\n<dt><code>-mvect8-ret-in-mem</code></dt>\n<dd>\nReturn 8-byte vectors in memory instead of MMX registers. This is the default on Solaris 8 and 9 and VxWorks to match the ABI of the Sun Studio compilers until version 12. Later compiler versions (starting with Studio 12 Update 1) follow the ABI used by other x86 targets, which is the default on Solaris 10 and later. <em>Only</em> use this option if you need to remain compatible with existing code produced by those previous compiler versions or older versions of GCC. </dd>\n<dt>\n<code>-mpc32</code><dt>\n<code>-mpc64</code><dt><code>-mpc80</code></dt>\n</dt>\n</dt>\n<dd>\n Set 80387 floating-point precision to 32, 64 or 80 bits. When <code>-mpc32</code> is specified, the significands of results of floating-point operations are rounded to 24 bits (single precision); <code>-mpc64</code> rounds the significands of results of floating-point operations to 53 bits (double precision) and <code>-mpc80</code> rounds the significands of results of floating-point operations to 64 bits (extended double precision), which is the default. When this option is used, floating-point operations in higher precisions are not available to the programmer without setting the FPU control word explicitly. <p>Setting the rounding of floating-point operations to less than the default 80 bits can speed some programs by 2% or more. Note that some mathematical libraries assume that extended-precision (80-bit) floating-point operations are enabled by default; routines in such libraries could suffer significant loss of accuracy, typically through so-called “catastrophic cancellation”, when this option is used to set the precision to less than extended precision. </p>\n</dd>\n<dt><code>-mstackrealign</code></dt>\n<dd>\nRealign the stack at entry. On the Intel x86, the <code>-mstackrealign</code> option generates an alternate prologue and epilogue that realigns the run-time stack if necessary. This supports mixing legacy codes that keep 4-byte stack alignment with modern codes that keep 16-byte stack alignment for SSE compatibility. See also the attribute <code>force_align_arg_pointer</code>, applicable to individual functions. </dd>\n<dt>\n<code>-mpreferred-stack-boundary=</code><var>num</var>\n</dt>\n<dd>\nAttempt to keep the stack boundary aligned to a 2 raised to <var>num</var> byte boundary. If <code>-mpreferred-stack-boundary</code> is not specified, the default is 4 (16 bytes or 128 bits). <p><strong>Warning:</strong> When generating code for the x86-64 architecture with SSE extensions disabled, <code>-mpreferred-stack-boundary=3</code> can be used to keep the stack boundary aligned to 8 byte boundary. Since x86-64 ABI require 16 byte stack alignment, this is ABI incompatible and intended to be used in controlled environment where stack space is important limitation. This option will lead to wrong code when functions compiled with 16 byte stack alignment (such as functions from a standard library) are called with misaligned stack. In this case, SSE instructions may lead to misaligned memory access traps. In addition, variable arguments will be handled incorrectly for 16 byte aligned objects (including x87 long double and __int128), leading to wrong results. You must build all modules with <code>-mpreferred-stack-boundary=3</code>, including any libraries. This includes the system libraries and startup modules. </p>\n</dd>\n<dt>\n<code>-mincoming-stack-boundary=</code><var>num</var>\n</dt>\n<dd>\nAssume the incoming stack is aligned to a 2 raised to <var>num</var> byte boundary. If <code>-mincoming-stack-boundary</code> is not specified, the one specified by <code>-mpreferred-stack-boundary</code> is used. <p>On Pentium and Pentium Pro, <code>double</code> and <code>long double</code> values should be aligned to an 8-byte boundary (see <code>-malign-double</code>) or suffer significant run time performance penalties. On Pentium III, the Streaming SIMD Extension (SSE) data type <code>__m128</code> may not work properly if it is not 16-byte aligned. </p>\n<p>To ensure proper alignment of this values on the stack, the stack boundary must be as aligned as that required by any value stored on the stack. Further, every function must be generated such that it keeps the stack aligned. Thus calling a function compiled with a higher preferred stack boundary from a function compiled with a lower preferred stack boundary most likely misaligns the stack. It is recommended that libraries that use callbacks always use the default setting. </p>\n<p>This extra alignment does consume extra stack space, and generally increases code size. Code that is sensitive to stack space usage, such as embedded systems and operating system kernels, may want to reduce the preferred alignment to <code>-mpreferred-stack-boundary=2</code>. </p>\n</dd>\n<dt>\n<code>-mmmx</code><dt>\n<code>-mno-mmx</code><dt>\n<code>-msse</code><dt>\n<code>-mno-sse</code><dt>\n<code>-msse2</code><dt>\n<code>-mno-sse2</code><dt>\n<code>-msse3</code><dt>\n<code>-mno-sse3</code><dt>\n<code>-mssse3</code><dt>\n<code>-mno-ssse3</code><dt>\n<code>-msse4.1</code><dt>\n<code>-mno-sse4.1</code><dt>\n<code>-msse4.2</code><dt>\n<code>-mno-sse4.2</code><dt>\n<code>-msse4</code><dt>\n<code>-mno-sse4</code><dt>\n<code>-mavx</code><dt>\n<code>-mno-avx</code><dt>\n<code>-mavx2</code><dt>\n<code>-mno-avx2</code><dt>\n<code>-mavx512f</code><dt>\n<code>-mno-avx512f</code><dt>\n<code>-mavx512pf</code><dt>\n<code>-mno-avx512pf</code><dt>\n<code>-mavx512er</code><dt>\n<code>-mno-avx512er</code><dt>\n<code>-mavx512cd</code><dt>\n<code>-mno-avx512cd</code><dt>\n<code>-msha</code><dt>\n<code>-mno-sha</code><dt>\n<code>-maes</code><dt>\n<code>-mno-aes</code><dt>\n<code>-mpclmul</code><dt>\n<code>-mno-pclmul</code><dt>\n<code>-mfsgsbase</code><dt>\n<code>-mno-fsgsbase</code><dt>\n<code>-mrdrnd</code><dt>\n<code>-mno-rdrnd</code><dt>\n<code>-mf16c</code><dt>\n<code>-mno-f16c</code><dt>\n<code>-mfma</code><dt>\n<code>-mno-fma</code><dt>\n<code>-mprefetchwt1</code><dt>\n<code>-mno-prefetchwt1</code><dt>\n<code>-msse4a</code><dt>\n<code>-mno-sse4a</code><dt>\n<code>-mfma4</code><dt>\n<code>-mno-fma4</code><dt>\n<code>-mxop</code><dt>\n<code>-mno-xop</code><dt>\n<code>-mlwp</code><dt>\n<code>-mno-lwp</code><dt>\n<code>-m3dnow</code><dt>\n<code>-mno-3dnow</code><dt>\n<code>-mpopcnt</code><dt>\n<code>-mno-popcnt</code><dt>\n<code>-mabm</code><dt>\n<code>-mno-abm</code><dt>\n<code>-mbmi</code><dt>\n<code>-mbmi2</code><dt>\n<code>-mno-bmi</code><dt>\n<code>-mno-bmi2</code><dt>\n<code>-mlzcnt</code><dt>\n<code>-mno-lzcnt</code><dt>\n<code>-mfxsr</code><dt>\n<code>-mxsave</code><dt>\n<code>-mxsaveopt</code><dt>\n<code>-mrtm</code><dt>\n<code>-mtbm</code><dt><code>-mno-tbm</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThese switches enable or disable the use of instructions in the MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD, SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, or 3DNow! extended instruction sets. These extensions are also available as built-in functions: see <a href=\"x86-built_002din-functions#X86-Built_002din-Functions\">X86 Built-in Functions</a>, for details of the functions enabled and disabled by these switches. <p>To generate SSE/SSE2 instructions automatically from floating-point code (as opposed to 387 instructions), see <code>-mfpmath=sse</code>. </p>\n<p>GCC depresses SSEx instructions when <code>-mavx</code> is used. Instead, it generates new AVX instructions or AVX equivalence for all SSEx instructions when needed. </p>\n<p>These options enable GCC to use these extended instructions in generated code, even without <code>-mfpmath=sse</code>. Applications that perform run-time CPU detection must compile separate files for each supported architecture, using the appropriate flags. In particular, the file containing the CPU detection code should be compiled without these options. </p>\n</dd>\n<dt><code>-mdump-tune-features</code></dt>\n<dd>\nThis option instructs GCC to dump the names of the x86 performance tuning features and default settings. The names can be used in <samp><span class=\"option\">-mtune-ctrl=</span><var>feature-list</var></samp>. </dd>\n<dt>\n<code>-mtune-ctrl=</code><var>feature-list</var>\n</dt>\n<dd>\nThis option is used to do fine grain control of x86 code generation features. <var>feature-list</var> is a comma separated list of <var>feature</var> names. See also <code>-mdump-tune-features</code>. When specified, the <var>feature</var> will be turned on if it is not preceded with <code>^</code>, otherwise, it will be turned off. <samp><span class=\"option\">-mtune-ctrl=</span><var>feature-list</var></samp> is intended to be used by GCC developers. Using it may lead to code paths not covered by testing and can potentially result in compiler ICEs or runtime errors. </dd>\n<dt><code>-mno-default</code></dt>\n<dd>\nThis option instructs GCC to turn off all tunable features. See also <samp><span class=\"option\">-mtune-ctrl=</span><var>feature-list</var></samp> and <code>-mdump-tune-features</code>. </dd>\n<dt><code>-mcld</code></dt>\n<dd>\nThis option instructs GCC to emit a <code>cld</code> instruction in the prologue of functions that use string instructions. String instructions depend on the DF flag to select between autoincrement or autodecrement mode. While the ABI specifies the DF flag to be cleared on function entry, some operating systems violate this specification by not clearing the DF flag in their exception dispatchers. The exception handler can be invoked with the DF flag set, which leads to wrong direction mode when string instructions are used. This option can be enabled by default on 32-bit x86 targets by configuring GCC with the <code>--enable-cld</code> configure option. Generation of <code>cld</code> instructions can be suppressed with the <code>-mno-cld</code> compiler option in this case. </dd>\n<dt><code>-mvzeroupper</code></dt>\n<dd>\nThis option instructs GCC to emit a <code>vzeroupper</code> instruction before a transfer of control flow out of the function to minimize the AVX to SSE transition penalty as well as remove unnecessary <code>zeroupper</code> intrinsics. </dd>\n<dt><code>-mprefer-avx128</code></dt>\n<dd>\nThis option instructs GCC to use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer. </dd>\n<dt><code>-mcx16</code></dt>\n<dd>\nThis option enables GCC to generate <code>CMPXCHG16B</code> instructions. <code>CMPXCHG16B</code> allows for atomic operations on 128-bit double quadword (or oword) data types. This is useful for high-resolution counters that can be updated by multiple processors (or cores). This instruction is generated as part of atomic built-in functions: see <a href=\"_005f_005fsync-builtins#g_t_005f_005fsync-Builtins\">__sync Builtins</a> or <a href=\"_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins\">__atomic Builtins</a> for details. </dd>\n<dt><code>-msahf</code></dt>\n<dd>\nThis option enables generation of <code>SAHF</code> instructions in 64-bit code. Early Intel Pentium 4 CPUs with Intel 64 support, prior to the introduction of Pentium 4 G1 step in December 2005, lacked the <code>LAHF</code> and <code>SAHF</code> instructions which were supported by AMD64. These are load and store instructions, respectively, for certain status flags. In 64-bit mode, the <code>SAHF</code> instruction is used to optimize <code>fmod</code>, <code>drem</code>, and <code>remainder</code> built-in functions; see <a href=\"other-builtins#Other-Builtins\">Other Builtins</a> for details. </dd>\n<dt><code>-mmovbe</code></dt>\n<dd>\nThis option enables use of the <code>movbe</code> instruction to implement <code>__builtin_bswap32</code> and <code>__builtin_bswap64</code>. </dd>\n<dt><code>-mcrc32</code></dt>\n<dd>\nThis option enables built-in functions <code>__builtin_ia32_crc32qi</code>, <code>__builtin_ia32_crc32hi</code>, <code>__builtin_ia32_crc32si</code> and <code>__builtin_ia32_crc32di</code> to generate the <code>crc32</code> machine instruction. </dd>\n<dt><code>-mrecip</code></dt>\n<dd>\nThis option enables use of <code>RCPSS</code> and <code>RSQRTSS</code> instructions (and their vectorized variants <code>RCPPS</code> and <code>RSQRTPS</code>) with an additional Newton-Raphson step to increase precision instead of <code>DIVSS</code> and <code>SQRTSS</code> (and their vectorized variants) for single-precision floating-point arguments. These instructions are generated only when <code>-funsafe-math-optimizations</code> is enabled together with <code>-finite-math-only</code> and <code>-fno-trapping-math</code>. Note that while the throughput of the sequence is higher than the throughput of the non-reciprocal instruction, the precision of the sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994). <p>Note that GCC implements <code>1.0f/sqrtf(</code><var>x</var><code>)</code> in terms of <code>RSQRTSS</code> (or <code>RSQRTPS</code>) already with <code>-ffast-math</code> (or the above option combination), and doesn't need <code>-mrecip</code>. </p>\n<p>Also note that GCC emits the above sequence with additional Newton-Raphson step for vectorized single-float division and vectorized <code>sqrtf(</code><var>x</var><code>)</code> already with <code>-ffast-math</code> (or the above option combination), and doesn't need <code>-mrecip</code>. </p>\n</dd>\n<dt>\n<code>-mrecip=</code><var>opt</var>\n</dt>\n<dd>\nThis option controls which reciprocal estimate instructions may be used. <var>opt</var> is a comma-separated list of options, which may be preceded by a ‘<code>!</code>’ to invert the option: <dl> <dt>‘<code>all</code>’</dt>\n<dd>Enable all estimate instructions. </dd>\n<dt>‘<code>default</code>’</dt>\n<dd>Enable the default instructions, equivalent to <code>-mrecip</code>. </dd>\n<dt>‘<code>none</code>’</dt>\n<dd>Disable all estimate instructions, equivalent to <code>-mno-recip</code>. </dd>\n<dt>‘<code>div</code>’</dt>\n<dd>Enable the approximation for scalar division. </dd>\n<dt>‘<code>vec-div</code>’</dt>\n<dd>Enable the approximation for vectorized division. </dd>\n<dt>‘<code>sqrt</code>’</dt>\n<dd>Enable the approximation for scalar square root. </dd>\n<dt>‘<code>vec-sqrt</code>’</dt>\n<dd>Enable the approximation for vectorized square root. </dd>\n</dl> <p>So, for example, <code>-mrecip=all,!sqrt</code> enables all of the reciprocal approximations, except for square root. </p>\n</dd>\n<dt>\n<code>-mveclibabi=</code><var>type</var>\n</dt>\n<dd>\nSpecifies the ABI type to use for vectorizing intrinsics using an external library. Supported values for <var>type</var> are ‘<code>svml</code>’ for the Intel short vector math library and ‘<code>acml</code>’ for the AMD math core library. To use this option, both <code>-ftree-vectorize</code> and <code>-funsafe-math-optimizations</code> have to be enabled, and an SVML or ACML ABI-compatible library must be specified at link time. <p>GCC currently emits calls to <code>vmldExp2</code>, <code>vmldLn2</code>, <code>vmldLog102</code>, <code>vmldLog102</code>, <code>vmldPow2</code>, <code>vmldTanh2</code>, <code>vmldTan2</code>, <code>vmldAtan2</code>, <code>vmldAtanh2</code>, <code>vmldCbrt2</code>, <code>vmldSinh2</code>, <code>vmldSin2</code>, <code>vmldAsinh2</code>, <code>vmldAsin2</code>, <code>vmldCosh2</code>, <code>vmldCos2</code>, <code>vmldAcosh2</code>, <code>vmldAcos2</code>, <code>vmlsExp4</code>, <code>vmlsLn4</code>, <code>vmlsLog104</code>, <code>vmlsLog104</code>, <code>vmlsPow4</code>, <code>vmlsTanh4</code>, <code>vmlsTan4</code>, <code>vmlsAtan4</code>, <code>vmlsAtanh4</code>, <code>vmlsCbrt4</code>, <code>vmlsSinh4</code>, <code>vmlsSin4</code>, <code>vmlsAsinh4</code>, <code>vmlsAsin4</code>, <code>vmlsCosh4</code>, <code>vmlsCos4</code>, <code>vmlsAcosh4</code> and <code>vmlsAcos4</code> for corresponding function type when <code>-mveclibabi=svml</code> is used, and <code>__vrd2_sin</code>, <code>__vrd2_cos</code>, <code>__vrd2_exp</code>, <code>__vrd2_log</code>, <code>__vrd2_log2</code>, <code>__vrd2_log10</code>, <code>__vrs4_sinf</code>, <code>__vrs4_cosf</code>, <code>__vrs4_expf</code>, <code>__vrs4_logf</code>, <code>__vrs4_log2f</code>, <code>__vrs4_log10f</code> and <code>__vrs4_powf</code> for the corresponding function type when <code>-mveclibabi=acml</code> is used. </p>\n</dd>\n<dt>\n<code>-mabi=</code><var>name</var>\n</dt>\n<dd>\nGenerate code for the specified calling convention. Permissible values are ‘<code>sysv</code>’ for the ABI used on GNU/Linux and other systems, and ‘<code>ms</code>’ for the Microsoft ABI. The default is to use the Microsoft ABI when targeting Microsoft Windows and the SysV ABI on all other systems. You can control this behavior for a specific function by using the function attribute ‘<code>ms_abi</code>’/‘<code>sysv_abi</code>’. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>. </dd>\n<dt>\n<code>-mtls-dialect=</code><var>type</var>\n</dt>\n<dd>\nGenerate code to access thread-local storage using the ‘<code>gnu</code>’ or ‘<code>gnu2</code>’ conventions. ‘<code>gnu</code>’ is the conservative default; ‘<code>gnu2</code>’ is more efficient, but it may add compile- and run-time requirements that cannot be satisfied on all systems. </dd>\n<dt>\n<code>-mpush-args</code><dt><code>-mno-push-args</code></dt>\n</dt>\n<dd>\nUse PUSH operations to store outgoing parameters. This method is shorter and usually equally fast as method using SUB/MOV operations and is enabled by default. In some cases disabling it may improve performance because of improved scheduling and reduced dependencies. </dd>\n<dt><code>-maccumulate-outgoing-args</code></dt>\n<dd>\nIf enabled, the maximum amount of space required for outgoing arguments is computed in the function prologue. This is faster on most modern CPUs because of reduced dependencies, improved scheduling and reduced stack usage when the preferred stack boundary is not equal to 2. The drawback is a notable increase in code size. This switch implies <code>-mno-push-args</code>. </dd>\n<dt><code>-mthreads</code></dt>\n<dd>\nSupport thread-safe exception handling on MinGW. Programs that rely on thread-safe exception handling must compile and link all code with the <code>-mthreads</code> option. When compiling, <code>-mthreads</code> defines <code>-D_MT</code>; when linking, it links in a special thread helper library <code>-lmingwthrd</code> which cleans up per-thread exception-handling data. </dd>\n<dt><code>-mno-align-stringops</code></dt>\n<dd>\nDo not align the destination of inlined string operations. This switch reduces code size and improves performance in case the destination is already aligned, but GCC doesn't know about it. </dd>\n<dt><code>-minline-all-stringops</code></dt>\n<dd>\nBy default GCC inlines string operations only when the destination is known to be aligned to least a 4-byte boundary. This enables more inlining and increases code size, but may improve performance of code that depends on fast <code>memcpy</code>, <code>strlen</code>, and <code>memset</code> for short lengths. </dd>\n<dt><code>-minline-stringops-dynamically</code></dt>\n<dd>\nFor string operations of unknown size, use run-time checks with inline code for small blocks and a library call for large blocks. </dd>\n<dt>\n<code>-mstringop-strategy=</code><var>alg</var>\n</dt>\n<dd>\nOverride the internal decision heuristic for the particular algorithm to use for inlining string operations. The allowed values for <var>alg</var> are: <dl> <dt>‘<code>rep_byte</code>’<dt>‘<code>rep_4byte</code>’<dt>‘<code>rep_8byte</code>’</dt>\n</dt>\n</dt>\n<dd>Expand using i386 <code>rep</code> prefix of the specified size. </dd>\n<dt>‘<code>byte_loop</code>’<dt>‘<code>loop</code>’<dt>‘<code>unrolled_loop</code>’</dt>\n</dt>\n</dt>\n<dd>Expand into an inline loop. </dd>\n<dt>‘<code>libcall</code>’</dt>\n<dd>Always use a library call. </dd>\n</dl> </dd>\n<dt>\n<code>-mmemcpy-strategy=</code><var>strategy</var>\n</dt>\n<dd>\nOverride the internal decision heuristic to decide if <code>__builtin_memcpy</code> should be inlined and what inline algorithm to use when the expected size of the copy operation is known. <var>strategy</var> is a comma-separated list of <var>alg</var>:<var>max_size</var>:<var>dest_align</var> triplets. <var>alg</var> is specified in <code>-mstringop-strategy</code>, <var>max_size</var> specifies the max byte size with which inline algorithm <var>alg</var> is allowed. For the last triplet, the <var>max_size</var> must be <code>-1</code>. The <var>max_size</var> of the triplets in the list must be specified in increasing order. The minimal byte size for <var>alg</var> is <code>0</code> for the first triplet and <var>max_size</var><code> + 1</code> of the preceding range. </dd>\n<dt>\n<code>-mmemset-strategy=</code><var>strategy</var>\n</dt>\n<dd>\nThe option is similar to <code>-mmemcpy-strategy=</code> except that it is to control <code>__builtin_memset</code> expansion. </dd>\n<dt><code>-momit-leaf-frame-pointer</code></dt>\n<dd>\nDon't keep the frame pointer in a register for leaf functions. This avoids the instructions to save, set up, and restore frame pointers and makes an extra register available in leaf functions. The option <code>-fomit-leaf-frame-pointer</code> removes the frame pointer for leaf functions, which might make debugging harder. </dd>\n<dt>\n<code>-mtls-direct-seg-refs</code><dt><code>-mno-tls-direct-seg-refs</code></dt>\n</dt>\n<dd>\nControls whether TLS variables may be accessed with offsets from the TLS segment register (<code>%gs</code> for 32-bit, <code>%fs</code> for 64-bit), or whether the thread base pointer must be added. Whether or not this is valid depends on the operating system, and whether it maps the segment to cover the entire TLS area. <p>For systems that use the GNU C Library, the default is on. </p>\n</dd>\n<dt>\n<code>-msse2avx</code><dt><code>-mno-sse2avx</code></dt>\n</dt>\n<dd>\nSpecify that the assembler should encode SSE instructions with VEX prefix. The option <code>-mavx</code> turns this on by default. </dd>\n<dt>\n<code>-mfentry</code><dt><code>-mno-fentry</code></dt>\n</dt>\n<dd>\nIf profiling is active (<code>-pg</code>), put the profiling counter call before the prologue. Note: On x86 architectures the attribute <code>ms_hook_prologue</code> isn't possible at the moment for <code>-mfentry</code> and <code>-pg</code>. </dd>\n<dt>\n<code>-m8bit-idiv</code><dt><code>-mno-8bit-idiv</code></dt>\n</dt>\n<dd>\nOn some processors, like Intel Atom, 8-bit unsigned integer divide is much faster than 32-bit/64-bit integer divide. This option generates a run-time check. If both dividend and divisor are within range of 0 to 255, 8-bit unsigned integer divide is used instead of 32-bit/64-bit integer divide. </dd>\n<dt>\n<code>-mavx256-split-unaligned-load</code><dt><code>-mavx256-split-unaligned-store</code></dt>\n</dt>\n<dd>\nSplit 32-byte AVX unaligned load and store. </dd>\n<dt>\n<code>-mstack-protector-guard=</code><var>guard</var>\n</dt>\n<dd>\nGenerate stack protection code using canary at <var>guard</var>. Supported locations are ‘<code>global</code>’ for global canary or ‘<code>tls</code>’ for per-thread canary in the TLS block (the default). This option has effect only when <code>-fstack-protector</code> or <code>-fstack-protector-all</code> is specified. </dd>\n</dl> <p>These ‘<code>-m</code>’ switches are supported in addition to the above on x86-64 processors in 64-bit environments. </p>\n<dl> <dt>\n<code>-m32</code><dt>\n<code>-m64</code><dt>\n<code>-mx32</code><dt><code>-m16</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>\nGenerate code for a 16-bit, 32-bit or 64-bit environment. The <code>-m32</code> option sets <code>int</code>, <code>long</code>, and pointer types to 32 bits, and generates code that runs on any i386 system. <p>The <code>-m64</code> option sets <code>int</code> to 32 bits and <code>long</code> and pointer types to 64 bits, and generates code for the x86-64 architecture. For Darwin only the <code>-m64</code> option also turns off the <code>-fno-pic</code> and <code>-mdynamic-no-pic</code> options. </p>\n<p>The <code>-mx32</code> option sets <code>int</code>, <code>long</code>, and pointer types to 32 bits, and generates code for the x86-64 architecture. </p>\n<p>The <code>-m16</code> option is the same as <code>-m32</code>, except for that it outputs the <code>.code16gcc</code> assembly directive at the beginning of the assembly output so that the binary can run in 16-bit mode. </p>\n</dd>\n<dt><code>-mno-red-zone</code></dt>\n<dd>\nDo not use a so-called “red zone” for x86-64 code. The red zone is mandated by the x86-64 ABI; it is a 128-byte area beyond the location of the stack pointer that is not modified by signal or interrupt handlers and therefore can be used for temporary data without adjusting the stack pointer. The flag <code>-mno-red-zone</code> disables this red zone. </dd>\n<dt><code>-mcmodel=small</code></dt>\n<dd>\nGenerate code for the small code model: the program and its symbols must be linked in the lower 2 GB of the address space. Pointers are 64 bits. Programs can be statically or dynamically linked. This is the default code model. </dd>\n<dt><code>-mcmodel=kernel</code></dt>\n<dd>\nGenerate code for the kernel code model. The kernel runs in the negative 2 GB of the address space. This model has to be used for Linux kernel code. </dd>\n<dt><code>-mcmodel=medium</code></dt>\n<dd>\nGenerate code for the medium model: the program is linked in the lower 2 GB of the address space. Small symbols are also placed there. Symbols with sizes larger than <code>-mlarge-data-threshold</code> are put into large data or BSS sections and can be located above 2GB. Programs can be statically or dynamically linked. </dd>\n<dt><code>-mcmodel=large</code></dt>\n<dd>\nGenerate code for the large model. This model makes no assumptions about addresses and sizes of sections. </dd>\n<dt><code>-maddress-mode=long</code></dt>\n<dd>\nGenerate code for long address mode. This is only supported for 64-bit and x32 environments. It is the default address mode for 64-bit environments. </dd>\n<dt><code>-maddress-mode=short</code></dt>\n<dd>\nGenerate code for short address mode. This is only supported for 32-bit and x32 environments. It is the default address mode for 32-bit and x32 environments. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/i386-and-x86_002d64-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/i386-and-x86_002d64-Options.html</a>\n  </p>\n</div>\n","i386-and-x86_002d64-windows-options":"<h1 class=\"subsection\" id=\"i386-and-x86_002d64-Windows-Options\">3.17.18 i386 and x86-64 Windows Options</h1> <p> These additional options are available for Microsoft Windows targets: </p>\n<dl> <dt><code>-mconsole</code></dt>\n<dd>\nThis option specifies that a console application is to be generated, by instructing the linker to set the PE header subsystem type required for console applications. This option is available for Cygwin and MinGW targets and is enabled by default on those targets. </dd>\n<dt><code>-mdll</code></dt>\n<dd>\nThis option is available for Cygwin and MinGW targets. It specifies that a DLL—a dynamic link library—is to be generated, enabling the selection of the required runtime startup object and entry point. </dd>\n<dt><code>-mnop-fun-dllimport</code></dt>\n<dd>\nThis option is available for Cygwin and MinGW targets. It specifies that the <code>dllimport</code> attribute should be ignored. </dd>\n<dt><code>-mthread</code></dt>\n<dd>\nThis option is available for MinGW targets. It specifies that MinGW-specific thread support is to be used. </dd>\n<dt><code>-municode</code></dt>\n<dd>\nThis option is available for MinGW-w64 targets. It causes the <code>UNICODE</code> preprocessor macro to be predefined, and chooses Unicode-capable runtime startup code. </dd>\n<dt><code>-mwin32</code></dt>\n<dd>\nThis option is available for Cygwin and MinGW targets. It specifies that the typical Microsoft Windows predefined macros are to be set in the pre-processor, but does not influence the choice of runtime library/startup code. </dd>\n<dt><code>-mwindows</code></dt>\n<dd>\nThis option is available for Cygwin and MinGW targets. It specifies that a GUI application is to be generated by instructing the linker to set the PE header subsystem type appropriately. </dd>\n<dt><code>-fno-set-stack-executable</code></dt>\n<dd>\nThis option is available for MinGW targets. It specifies that the executable flag for the stack used by nested functions isn't set. This is necessary for binaries running in kernel mode of Microsoft Windows, as there the User32 API, which is used to set executable privileges, isn't available. </dd>\n<dt><code>-fwritable-relocated-rdata</code></dt>\n<dd>\nThis option is available for MinGW and Cygwin targets. It specifies that relocated-data in read-only section is put into .data section. This is a necessary for older runtimes not supporting modification of .rdata sections for pseudo-relocation. </dd>\n<dt><code>-mpe-aligned-commons</code></dt>\n<dd>\nThis option is available for Cygwin and MinGW targets. It specifies that the GNU extension to the PE file format that permits the correct alignment of COMMON variables should be used when generating code. It is enabled by default if GCC detects that the target assembler found during configuration supports the feature. </dd>\n</dl> <p>See also under <a href=\"i386-and-x86_002d64-options#i386-and-x86_002d64-Options\">i386 and x86-64 Options</a> for standard options. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/i386-and-x86_002d64-Windows-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/i386-and-x86_002d64-Windows-Options.html</a>\n  </p>\n</div>\n","ia_002d64-options":"<h1 class=\"subsection\" id=\"IA_002d64-Options\">3.17.19 IA-64 Options</h1> <p> These are the ‘<code>-m</code>’ options defined for the Intel IA-64 architecture. </p>\n<dl> <dt><code>-mbig-endian</code></dt>\n<dd>\nGenerate code for a big-endian target. This is the default for HP-UX. </dd>\n<dt><code>-mlittle-endian</code></dt>\n<dd>\nGenerate code for a little-endian target. This is the default for AIX5 and GNU/Linux. </dd>\n<dt>\n<code>-mgnu-as</code><dt><code>-mno-gnu-as</code></dt>\n</dt>\n<dd>\nGenerate (or don't) code for the GNU assembler. This is the default.   </dd>\n<dt>\n<code>-mgnu-ld</code><dt><code>-mno-gnu-ld</code></dt>\n</dt>\n<dd>\nGenerate (or don't) code for the GNU linker. This is the default.   </dd>\n<dt><code>-mno-pic</code></dt>\n<dd>\nGenerate code that does not use a global pointer register. The result is not position independent code, and violates the IA-64 ABI. </dd>\n<dt>\n<code>-mvolatile-asm-stop</code><dt><code>-mno-volatile-asm-stop</code></dt>\n</dt>\n<dd>\nGenerate (or don't) a stop bit immediately before and after volatile asm statements. </dd>\n<dt>\n<code>-mregister-names</code><dt><code>-mno-register-names</code></dt>\n</dt>\n<dd>\nGenerate (or don't) ‘<code>in</code>’, ‘<code>loc</code>’, and ‘<code>out</code>’ register names for the stacked registers. This may make assembler output more readable. </dd>\n<dt>\n<code>-mno-sdata</code><dt><code>-msdata</code></dt>\n</dt>\n<dd>\nDisable (or enable) optimizations that use the small data section. This may be useful for working around optimizer bugs. </dd>\n<dt><code>-mconstant-gp</code></dt>\n<dd>\nGenerate code that uses a single constant global pointer value. This is useful when compiling kernel code. </dd>\n<dt><code>-mauto-pic</code></dt>\n<dd>\nGenerate code that is self-relocatable. This implies <code>-mconstant-gp</code>. This is useful when compiling firmware code. </dd>\n<dt><code>-minline-float-divide-min-latency</code></dt>\n<dd>\nGenerate code for inline divides of floating-point values using the minimum latency algorithm. </dd>\n<dt><code>-minline-float-divide-max-throughput</code></dt>\n<dd>\nGenerate code for inline divides of floating-point values using the maximum throughput algorithm. </dd>\n<dt><code>-mno-inline-float-divide</code></dt>\n<dd>\nDo not generate inline code for divides of floating-point values. </dd>\n<dt><code>-minline-int-divide-min-latency</code></dt>\n<dd>\nGenerate code for inline divides of integer values using the minimum latency algorithm. </dd>\n<dt><code>-minline-int-divide-max-throughput</code></dt>\n<dd>\nGenerate code for inline divides of integer values using the maximum throughput algorithm. </dd>\n<dt><code>-mno-inline-int-divide</code></dt>\n<dd>\nDo not generate inline code for divides of integer values. </dd>\n<dt><code>-minline-sqrt-min-latency</code></dt>\n<dd>\nGenerate code for inline square roots using the minimum latency algorithm. </dd>\n<dt><code>-minline-sqrt-max-throughput</code></dt>\n<dd>\nGenerate code for inline square roots using the maximum throughput algorithm. </dd>\n<dt><code>-mno-inline-sqrt</code></dt>\n<dd>\nDo not generate inline code for <code>sqrt</code>. </dd>\n<dt>\n<code>-mfused-madd</code><dt><code>-mno-fused-madd</code></dt>\n</dt>\n<dd>\nDo (don't) generate code that uses the fused multiply/add or multiply/subtract instructions. The default is to use these instructions. </dd>\n<dt>\n<code>-mno-dwarf2-asm</code><dt><code>-mdwarf2-asm</code></dt>\n</dt>\n<dd>\nDon't (or do) generate assembler code for the DWARF 2 line number debugging info. This may be useful when not using the GNU assembler. </dd>\n<dt>\n<code>-mearly-stop-bits</code><dt><code>-mno-early-stop-bits</code></dt>\n</dt>\n<dd>\nAllow stop bits to be placed earlier than immediately preceding the instruction that triggered the stop bit. This can improve instruction scheduling, but does not always do so. </dd>\n<dt>\n<code>-mfixed-range=</code><var>register-range</var>\n</dt>\n<dd>\nGenerate code treating the given register range as fixed registers. A fixed register is one that the register allocator cannot use. This is useful when compiling kernel code. A register range is specified as two registers separated by a dash. Multiple register ranges can be specified separated by a comma. </dd>\n<dt>\n<code>-mtls-size=</code><var>tls-size</var>\n</dt>\n<dd>\nSpecify bit size of immediate TLS offsets. Valid values are 14, 22, and 64. </dd>\n<dt>\n<code>-mtune=</code><var>cpu-type</var>\n</dt>\n<dd>\nTune the instruction scheduling for a particular CPU, Valid values are ‘<code>itanium</code>’, ‘<code>itanium1</code>’, ‘<code>merced</code>’, ‘<code>itanium2</code>’, and ‘<code>mckinley</code>’. </dd>\n<dt>\n<code>-milp32</code><dt><code>-mlp64</code></dt>\n</dt>\n<dd>\nGenerate code for a 32-bit or 64-bit environment. The 32-bit environment sets int, long and pointer to 32 bits. The 64-bit environment sets int to 32 bits and long and pointer to 64 bits. These are HP-UX specific flags. </dd>\n<dt>\n<code>-mno-sched-br-data-spec</code><dt><code>-msched-br-data-spec</code></dt>\n</dt>\n<dd>\n(Dis/En)able data speculative scheduling before reload. This results in generation of <code>ld.a</code> instructions and the corresponding check instructions (<code>ld.c</code> / <code>chk.a</code>). The default is 'disable'. </dd>\n<dt>\n<code>-msched-ar-data-spec</code><dt><code>-mno-sched-ar-data-spec</code></dt>\n</dt>\n<dd>\n(En/Dis)able data speculative scheduling after reload. This results in generation of <code>ld.a</code> instructions and the corresponding check instructions (<code>ld.c</code> / <code>chk.a</code>). The default is 'enable'. </dd>\n<dt>\n<code>-mno-sched-control-spec</code><dt><code>-msched-control-spec</code></dt>\n</dt>\n<dd>\n(Dis/En)able control speculative scheduling. This feature is available only during region scheduling (i.e. before reload). This results in generation of the <code>ld.s</code> instructions and the corresponding check instructions <code>chk.s</code>. The default is 'disable'. </dd>\n<dt>\n<code>-msched-br-in-data-spec</code><dt><code>-mno-sched-br-in-data-spec</code></dt>\n</dt>\n<dd>\n(En/Dis)able speculative scheduling of the instructions that are dependent on the data speculative loads before reload. This is effective only with <code>-msched-br-data-spec</code> enabled. The default is 'enable'. </dd>\n<dt>\n<code>-msched-ar-in-data-spec</code><dt><code>-mno-sched-ar-in-data-spec</code></dt>\n</dt>\n<dd>\n(En/Dis)able speculative scheduling of the instructions that are dependent on the data speculative loads after reload. This is effective only with <code>-msched-ar-data-spec</code> enabled. The default is 'enable'. </dd>\n<dt>\n<code>-msched-in-control-spec</code><dt><code>-mno-sched-in-control-spec</code></dt>\n</dt>\n<dd>\n(En/Dis)able speculative scheduling of the instructions that are dependent on the control speculative loads. This is effective only with <code>-msched-control-spec</code> enabled. The default is 'enable'. </dd>\n<dt>\n<code>-mno-sched-prefer-non-data-spec-insns</code><dt><code>-msched-prefer-non-data-spec-insns</code></dt>\n</dt>\n<dd>\nIf enabled, data-speculative instructions are chosen for schedule only if there are no other choices at the moment. This makes the use of the data speculation much more conservative. The default is 'disable'. </dd>\n<dt>\n<code>-mno-sched-prefer-non-control-spec-insns</code><dt><code>-msched-prefer-non-control-spec-insns</code></dt>\n</dt>\n<dd>\nIf enabled, control-speculative instructions are chosen for schedule only if there are no other choices at the moment. This makes the use of the control speculation much more conservative. The default is 'disable'. </dd>\n<dt>\n<code>-mno-sched-count-spec-in-critical-path</code><dt><code>-msched-count-spec-in-critical-path</code></dt>\n</dt>\n<dd>\nIf enabled, speculative dependencies are considered during computation of the instructions priorities. This makes the use of the speculation a bit more conservative. The default is 'disable'. </dd>\n<dt><code>-msched-spec-ldc</code></dt>\n<dd>\nUse a simple data speculation check. This option is on by default. </dd>\n<dt><code>-msched-control-spec-ldc</code></dt>\n<dd>\nUse a simple check for control speculation. This option is on by default. </dd>\n<dt><code>-msched-stop-bits-after-every-cycle</code></dt>\n<dd>\nPlace a stop bit after every cycle when scheduling. This option is on by default. </dd>\n<dt><code>-msched-fp-mem-deps-zero-cost</code></dt>\n<dd>\nAssume that floating-point stores and loads are not likely to cause a conflict when placed into the same instruction group. This option is disabled by default. </dd>\n<dt><code>-msel-sched-dont-check-control-spec</code></dt>\n<dd>\nGenerate checks for control speculation in selective scheduling. This flag is disabled by default. </dd>\n<dt>\n<code>-msched-max-memory-insns=</code><var>max-insns</var>\n</dt>\n<dd>\nLimit on the number of memory insns per instruction group, giving lower priority to subsequent memory insns attempting to schedule in the same instruction group. Frequently useful to prevent cache bank conflicts. The default value is 1. </dd>\n<dt><code>-msched-max-memory-insns-hard-limit</code></dt>\n<dd>\nMakes the limit specified by <code>msched-max-memory-insns</code> a hard limit, disallowing more than that number in an instruction group. Otherwise, the limit is “soft”, meaning that non-memory operations are preferred when the limit is reached, but memory operations may still be scheduled. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/IA_002d64-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/IA_002d64-Options.html</a>\n  </p>\n</div>\n","lm32-options":"<h1 class=\"subsection\" id=\"LM32-Options\">3.17.20 LM32 Options</h1> <p> These <code>-m</code> options are defined for the LatticeMico32 architecture: </p>\n<dl> <dt><code>-mbarrel-shift-enabled</code></dt>\n<dd>\nEnable barrel-shift instructions. </dd>\n<dt><code>-mdivide-enabled</code></dt>\n<dd>\nEnable divide and modulus instructions. </dd>\n<dt><code>-mmultiply-enabled</code></dt>\n<dd>\nEnable multiply instructions. </dd>\n<dt><code>-msign-extend-enabled</code></dt>\n<dd>\nEnable sign extend instructions. </dd>\n<dt><code>-muser-enabled</code></dt>\n<dd>\nEnable user-defined instructions. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/LM32-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/LM32-Options.html</a>\n  </p>\n</div>\n","m32c-options":"<h1 class=\"subsection\" id=\"M32C-Options\">3.17.21 M32C Options</h1> \n<dl> <dt>\n<code>-mcpu=</code><var>name</var>\n</dt>\n<dd>\nSelect the CPU for which code is generated. <var>name</var> may be one of ‘<code>r8c</code>’ for the R8C/Tiny series, ‘<code>m16c</code>’ for the M16C (up to /60) series, ‘<code>m32cm</code>’ for the M16C/80 series, or ‘<code>m32c</code>’ for the M32C/80 series. </dd>\n<dt><code>-msim</code></dt>\n<dd>\nSpecifies that the program will be run on the simulator. This causes an alternate runtime library to be linked in which supports, for example, file I/O. You must not use this option when generating programs that will run on real hardware; you must provide your own runtime library for whatever I/O functions are needed. </dd>\n<dt>\n<code>-memregs=</code><var>number</var>\n</dt>\n<dd>\nSpecifies the number of memory-based pseudo-registers GCC uses during code generation. These pseudo-registers are used like real registers, so there is a tradeoff between GCC's ability to fit the code into available registers, and the performance penalty of using memory instead of registers. Note that all modules in a program must be compiled with the same value for this option. Because of that, you must not use this option with GCC's default runtime libraries. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/M32C-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/M32C-Options.html</a>\n  </p>\n</div>\n","m32r_002fd-options":"<h1 class=\"subsection\" id=\"M32R_002fD-Options\">3.17.22 M32R/D Options</h1> <p> These <code>-m</code> options are defined for Renesas M32R/D architectures: </p>\n<dl> <dt><code>-m32r2</code></dt>\n<dd>\nGenerate code for the M32R/2. </dd>\n<dt><code>-m32rx</code></dt>\n<dd>\nGenerate code for the M32R/X. </dd>\n<dt><code>-m32r</code></dt>\n<dd>\nGenerate code for the M32R. This is the default. </dd>\n<dt><code>-mmodel=small</code></dt>\n<dd>\nAssume all objects live in the lower 16MB of memory (so that their addresses can be loaded with the <code>ld24</code> instruction), and assume all subroutines are reachable with the <code>bl</code> instruction. This is the default. <p>The addressability of a particular object can be set with the <code>model</code> attribute. </p>\n</dd>\n<dt><code>-mmodel=medium</code></dt>\n<dd>\nAssume objects may be anywhere in the 32-bit address space (the compiler generates <code>seth/add3</code> instructions to load their addresses), and assume all subroutines are reachable with the <code>bl</code> instruction. </dd>\n<dt><code>-mmodel=large</code></dt>\n<dd>\nAssume objects may be anywhere in the 32-bit address space (the compiler generates <code>seth/add3</code> instructions to load their addresses), and assume subroutines may not be reachable with the <code>bl</code> instruction (the compiler generates the much slower <code>seth/add3/jl</code> instruction sequence). </dd>\n<dt><code>-msdata=none</code></dt>\n<dd>\nDisable use of the small data area. Variables are put into one of ‘<code>.data</code>’, ‘<code>.bss</code>’, or ‘<code>.rodata</code>’ (unless the <code>section</code> attribute has been specified). This is the default. <p>The small data area consists of sections ‘<code>.sdata</code>’ and ‘<code>.sbss</code>’. Objects may be explicitly put in the small data area with the <code>section</code> attribute using one of these sections. </p>\n</dd>\n<dt><code>-msdata=sdata</code></dt>\n<dd>\nPut small global and static data in the small data area, but do not generate special code to reference them. </dd>\n<dt><code>-msdata=use</code></dt>\n<dd>\nPut small global and static data in the small data area, and generate special instructions to reference them. </dd>\n<dt>\n<code>-G </code><var>num</var>\n</dt>\n<dd>\nPut global and static objects less than or equal to <var>num</var> bytes into the small data or BSS sections instead of the normal data or BSS sections. The default value of <var>num</var> is 8. The <code>-msdata</code> option must be set to one of ‘<code>sdata</code>’ or ‘<code>use</code>’ for this option to have any effect. <p>All modules should be compiled with the same <samp><span class=\"option\">-G </span><var>num</var></samp> value. Compiling with different values of <var>num</var> may or may not work; if it doesn't the linker gives an error message—incorrect code is not generated. </p>\n</dd>\n<dt><code>-mdebug</code></dt>\n<dd>\nMakes the M32R-specific code in the compiler display some statistics that might help in debugging programs. </dd>\n<dt><code>-malign-loops</code></dt>\n<dd>\nAlign all loops to a 32-byte boundary. </dd>\n<dt><code>-mno-align-loops</code></dt>\n<dd>\nDo not enforce a 32-byte alignment for loops. This is the default. </dd>\n<dt>\n<code>-missue-rate=</code><var>number</var>\n</dt>\n<dd>\nIssue <var>number</var> instructions per cycle. <var>number</var> can only be 1 or 2. </dd>\n<dt>\n<code>-mbranch-cost=</code><var>number</var>\n</dt>\n<dd>\n<var>number</var> can only be 1 or 2. If it is 1 then branches are preferred over conditional code, if it is 2, then the opposite applies. </dd>\n<dt>\n<code>-mflush-trap=</code><var>number</var>\n</dt>\n<dd>\nSpecifies the trap number to use to flush the cache. The default is 12. Valid numbers are between 0 and 15 inclusive. </dd>\n<dt><code>-mno-flush-trap</code></dt>\n<dd>\nSpecifies that the cache cannot be flushed by using a trap. </dd>\n<dt>\n<code>-mflush-func=</code><var>name</var>\n</dt>\n<dd>\nSpecifies the name of the operating system function to call to flush the cache. The default is <em>_flush_cache</em>, but a function call is only used if a trap is not available. </dd>\n<dt><code>-mno-flush-func</code></dt>\n<dd>\nIndicates that there is no OS function for flushing the cache. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/M32R_002fD-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/M32R_002fD-Options.html</a>\n  </p>\n</div>\n","m680x0-options":"<h1 class=\"subsection\" id=\"M680x0-Options\">3.17.23 M680x0 Options</h1> <p> These are the ‘<code>-m</code>’ options defined for M680x0 and ColdFire processors. The default settings depend on which architecture was selected when the compiler was configured; the defaults for the most common choices are given below. </p>\n<dl> <dt>\n<code>-march=</code><var>arch</var>\n</dt>\n<dd>\nGenerate code for a specific M680x0 or ColdFire instruction set architecture. Permissible values of <var>arch</var> for M680x0 architectures are: ‘<code>68000</code>’, ‘<code>68010</code>’, ‘<code>68020</code>’, ‘<code>68030</code>’, ‘<code>68040</code>’, ‘<code>68060</code>’ and ‘<code>cpu32</code>’. ColdFire architectures are selected according to Freescale's ISA classification and the permissible values are: ‘<code>isaa</code>’, ‘<code>isaaplus</code>’, ‘<code>isab</code>’ and ‘<code>isac</code>’. <p>GCC defines a macro ‘<samp><span class=\"samp\">__mcf</span><var>arch</var><span class=\"samp\">__</span></samp>’ whenever it is generating code for a ColdFire target. The <var>arch</var> in this macro is one of the <code>-march</code> arguments given above. </p>\n<p>When used together, <code>-march</code> and <code>-mtune</code> select code that runs on a family of similar processors but that is optimized for a particular microarchitecture. </p>\n</dd>\n<dt>\n<code>-mcpu=</code><var>cpu</var>\n</dt>\n<dd>\nGenerate code for a specific M680x0 or ColdFire processor. The M680x0 <var>cpu</var>s are: ‘<code>68000</code>’, ‘<code>68010</code>’, ‘<code>68020</code>’, ‘<code>68030</code>’, ‘<code>68040</code>’, ‘<code>68060</code>’, ‘<code>68302</code>’, ‘<code>68332</code>’ and ‘<code>cpu32</code>’. The ColdFire <var>cpu</var>s are given by the table below, which also classifies the CPUs into families: \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<strong>Family</strong> </td>\n<td valign=\"top\" width=\"80%\">\n<strong>‘</strong><code>-mcpu</code><strong>’ arguments</strong> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>51</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>51</code>’ ‘<code>51ac</code>’ ‘<code>51ag</code>’ ‘<code>51cn</code>’ ‘<code>51em</code>’ ‘<code>51je</code>’ ‘<code>51jf</code>’ ‘<code>51jg</code>’ ‘<code>51jm</code>’ ‘<code>51mm</code>’ ‘<code>51qe</code>’ ‘<code>51qm</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5206</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5202</code>’ ‘<code>5204</code>’ ‘<code>5206</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5206e</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5206e</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5208</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5207</code>’ ‘<code>5208</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5211a</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5210a</code>’ ‘<code>5211a</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5213</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5211</code>’ ‘<code>5212</code>’ ‘<code>5213</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5216</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5214</code>’ ‘<code>5216</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>52235</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>52230</code>’ ‘<code>52231</code>’ ‘<code>52232</code>’ ‘<code>52233</code>’ ‘<code>52234</code>’ ‘<code>52235</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5225</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5224</code>’ ‘<code>5225</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>52259</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>52252</code>’ ‘<code>52254</code>’ ‘<code>52255</code>’ ‘<code>52256</code>’ ‘<code>52258</code>’ ‘<code>52259</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5235</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5232</code>’ ‘<code>5233</code>’ ‘<code>5234</code>’ ‘<code>5235</code>’ ‘<code>523x</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5249</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5249</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5250</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5250</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5271</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5270</code>’ ‘<code>5271</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5272</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5272</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5275</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5274</code>’ ‘<code>5275</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5282</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5280</code>’ ‘<code>5281</code>’ ‘<code>5282</code>’ ‘<code>528x</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>53017</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>53011</code>’ ‘<code>53012</code>’ ‘<code>53013</code>’ ‘<code>53014</code>’ ‘<code>53015</code>’ ‘<code>53016</code>’ ‘<code>53017</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5307</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5307</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5329</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5327</code>’ ‘<code>5328</code>’ ‘<code>5329</code>’ ‘<code>532x</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5373</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5372</code>’ ‘<code>5373</code>’ ‘<code>537x</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5407</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5407</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">‘<code>5475</code>’ </td>\n<td valign=\"top\" width=\"80%\">‘<code>5470</code>’ ‘<code>5471</code>’ ‘<code>5472</code>’ ‘<code>5473</code>’ ‘<code>5474</code>’ ‘<code>5475</code>’ ‘<code>547x</code>’ ‘<code>5480</code>’ ‘<code>5481</code>’ ‘<code>5482</code>’ ‘<code>5483</code>’ ‘<code>5484</code>’ ‘<code>5485</code>’ </td>\n</tr>\n</table> <p><samp><span class=\"option\">-mcpu=</span><var>cpu</var></samp> overrides <samp><span class=\"option\">-march=</span><var>arch</var></samp> if <var>arch</var> is compatible with <var>cpu</var>. Other combinations of <code>-mcpu</code> and <code>-march</code> are rejected. </p>\n<p>GCC defines the macro ‘<samp><span class=\"samp\">__mcf_cpu_</span><var>cpu</var></samp>’ when ColdFire target <var>cpu</var> is selected. It also defines ‘<samp><span class=\"samp\">__mcf_family_</span><var>family</var></samp>’, where the value of <var>family</var> is given by the table above. </p>\n</dd>\n<dt>\n<code>-mtune=</code><var>tune</var>\n</dt>\n<dd>\nTune the code for a particular microarchitecture within the constraints set by <code>-march</code> and <code>-mcpu</code>. The M680x0 microarchitectures are: ‘<code>68000</code>’, ‘<code>68010</code>’, ‘<code>68020</code>’, ‘<code>68030</code>’, ‘<code>68040</code>’, ‘<code>68060</code>’ and ‘<code>cpu32</code>’. The ColdFire microarchitectures are: ‘<code>cfv1</code>’, ‘<code>cfv2</code>’, ‘<code>cfv3</code>’, ‘<code>cfv4</code>’ and ‘<code>cfv4e</code>’. <p>You can also use <code>-mtune=68020-40</code> for code that needs to run relatively well on 68020, 68030 and 68040 targets. <code>-mtune=68020-60</code> is similar but includes 68060 targets as well. These two options select the same tuning decisions as <code>-m68020-40</code> and <code>-m68020-60</code> respectively. </p>\n<p>GCC defines the macros ‘<samp><span class=\"samp\">__mc</span><var>arch</var></samp>’ and ‘<samp><span class=\"samp\">__mc</span><var>arch</var><span class=\"samp\">__</span></samp>’ when tuning for 680x0 architecture <var>arch</var>. It also defines ‘<samp><span class=\"samp\">mc</span><var>arch</var></samp>’ unless either <code>-ansi</code> or a non-GNU <code>-std</code> option is used. If GCC is tuning for a range of architectures, as selected by <code>-mtune=68020-40</code> or <code>-mtune=68020-60</code>, it defines the macros for every architecture in the range. </p>\n<p>GCC also defines the macro ‘<samp><span class=\"samp\">__m</span><var>uarch</var><span class=\"samp\">__</span></samp>’ when tuning for ColdFire microarchitecture <var>uarch</var>, where <var>uarch</var> is one of the arguments given above. </p>\n</dd>\n<dt>\n<code>-m68000</code><dt><code>-mc68000</code></dt>\n</dt>\n<dd>\nGenerate output for a 68000. This is the default when the compiler is configured for 68000-based systems. It is equivalent to <code>-march=68000</code>. <p>Use this option for microcontrollers with a 68000 or EC000 core, including the 68008, 68302, 68306, 68307, 68322, 68328 and 68356. </p>\n</dd>\n<dt><code>-m68010</code></dt>\n<dd>\nGenerate output for a 68010. This is the default when the compiler is configured for 68010-based systems. It is equivalent to <code>-march=68010</code>. </dd>\n<dt>\n<code>-m68020</code><dt><code>-mc68020</code></dt>\n</dt>\n<dd>\nGenerate output for a 68020. This is the default when the compiler is configured for 68020-based systems. It is equivalent to <code>-march=68020</code>. </dd>\n<dt><code>-m68030</code></dt>\n<dd>\nGenerate output for a 68030. This is the default when the compiler is configured for 68030-based systems. It is equivalent to <code>-march=68030</code>. </dd>\n<dt><code>-m68040</code></dt>\n<dd>\nGenerate output for a 68040. This is the default when the compiler is configured for 68040-based systems. It is equivalent to <code>-march=68040</code>. <p>This option inhibits the use of 68881/68882 instructions that have to be emulated by software on the 68040. Use this option if your 68040 does not have code to emulate those instructions. </p>\n</dd>\n<dt><code>-m68060</code></dt>\n<dd>\nGenerate output for a 68060. This is the default when the compiler is configured for 68060-based systems. It is equivalent to <code>-march=68060</code>. <p>This option inhibits the use of 68020 and 68881/68882 instructions that have to be emulated by software on the 68060. Use this option if your 68060 does not have code to emulate those instructions. </p>\n</dd>\n<dt><code>-mcpu32</code></dt>\n<dd>\nGenerate output for a CPU32. This is the default when the compiler is configured for CPU32-based systems. It is equivalent to <code>-march=cpu32</code>. <p>Use this option for microcontrollers with a CPU32 or CPU32+ core, including the 68330, 68331, 68332, 68333, 68334, 68336, 68340, 68341, 68349 and 68360. </p>\n</dd>\n<dt><code>-m5200</code></dt>\n<dd>\nGenerate output for a 520X ColdFire CPU. This is the default when the compiler is configured for 520X-based systems. It is equivalent to <code>-mcpu=5206</code>, and is now deprecated in favor of that option. <p>Use this option for microcontroller with a 5200 core, including the MCF5202, MCF5203, MCF5204 and MCF5206. </p>\n</dd>\n<dt><code>-m5206e</code></dt>\n<dd>\nGenerate output for a 5206e ColdFire CPU. The option is now deprecated in favor of the equivalent <code>-mcpu=5206e</code>. </dd>\n<dt><code>-m528x</code></dt>\n<dd>\nGenerate output for a member of the ColdFire 528X family. The option is now deprecated in favor of the equivalent <code>-mcpu=528x</code>. </dd>\n<dt><code>-m5307</code></dt>\n<dd>\nGenerate output for a ColdFire 5307 CPU. The option is now deprecated in favor of the equivalent <code>-mcpu=5307</code>. </dd>\n<dt><code>-m5407</code></dt>\n<dd>\nGenerate output for a ColdFire 5407 CPU. The option is now deprecated in favor of the equivalent <code>-mcpu=5407</code>. </dd>\n<dt><code>-mcfv4e</code></dt>\n<dd>\nGenerate output for a ColdFire V4e family CPU (e.g. 547x/548x). This includes use of hardware floating-point instructions. The option is equivalent to <code>-mcpu=547x</code>, and is now deprecated in favor of that option. </dd>\n<dt><code>-m68020-40</code></dt>\n<dd>\nGenerate output for a 68040, without using any of the new instructions. This results in code that can run relatively efficiently on either a 68020/68881 or a 68030 or a 68040. The generated code does use the 68881 instructions that are emulated on the 68040. <p>The option is equivalent to <code>-march=68020</code> <code>-mtune=68020-40</code>. </p>\n</dd>\n<dt><code>-m68020-60</code></dt>\n<dd>\nGenerate output for a 68060, without using any of the new instructions. This results in code that can run relatively efficiently on either a 68020/68881 or a 68030 or a 68040. The generated code does use the 68881 instructions that are emulated on the 68060. <p>The option is equivalent to <code>-march=68020</code> <code>-mtune=68020-60</code>. </p>\n</dd>\n<dt>\n<code>-mhard-float</code><dt><code>-m68881</code></dt>\n</dt>\n<dd>\nGenerate floating-point instructions. This is the default for 68020 and above, and for ColdFire devices that have an FPU. It defines the macro ‘<code>__HAVE_68881__</code>’ on M680x0 targets and ‘<code>__mcffpu__</code>’ on ColdFire targets. </dd>\n<dt><code>-msoft-float</code></dt>\n<dd>\nDo not generate floating-point instructions; use library calls instead. This is the default for 68000, 68010, and 68832 targets. It is also the default for ColdFire devices that have no FPU. </dd>\n<dt>\n<code>-mdiv</code><dt><code>-mno-div</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) ColdFire hardware divide and remainder instructions. If <code>-march</code> is used without <code>-mcpu</code>, the default is “on” for ColdFire architectures and “off” for M680x0 architectures. Otherwise, the default is taken from the target CPU (either the default CPU, or the one specified by <code>-mcpu</code>). For example, the default is “off” for <code>-mcpu=5206</code> and “on” for <code>-mcpu=5206e</code>. <p>GCC defines the macro ‘<code>__mcfhwdiv__</code>’ when this option is enabled. </p>\n</dd>\n<dt><code>-mshort</code></dt>\n<dd>\nConsider type <code>int</code> to be 16 bits wide, like <code>short int</code>. Additionally, parameters passed on the stack are also aligned to a 16-bit boundary even on targets whose API mandates promotion to 32-bit. </dd>\n<dt><code>-mno-short</code></dt>\n<dd>\nDo not consider type <code>int</code> to be 16 bits wide. This is the default. </dd>\n<dt>\n<code>-mnobitfield</code><dt><code>-mno-bitfield</code></dt>\n</dt>\n<dd>\nDo not use the bit-field instructions. The <code>-m68000</code>, <code>-mcpu32</code> and <code>-m5200</code> options imply <code>-mnobitfield</code>. </dd>\n<dt><code>-mbitfield</code></dt>\n<dd>\nDo use the bit-field instructions. The <code>-m68020</code> option implies <code>-mbitfield</code>. This is the default if you use a configuration designed for a 68020. </dd>\n<dt><code>-mrtd</code></dt>\n<dd>\nUse a different function-calling convention, in which functions that take a fixed number of arguments return with the <code>rtd</code> instruction, which pops their arguments while returning. This saves one instruction in the caller since there is no need to pop the arguments there. <p>This calling convention is incompatible with the one normally used on Unix, so you cannot use it if you need to call libraries compiled with the Unix compiler. </p>\n<p>Also, you must provide function prototypes for all functions that take variable numbers of arguments (including <code>printf</code>); otherwise incorrect code is generated for calls to those functions. </p>\n<p>In addition, seriously incorrect code results if you call a function with too many arguments. (Normally, extra arguments are harmlessly ignored.) </p>\n<p>The <code>rtd</code> instruction is supported by the 68010, 68020, 68030, 68040, 68060 and CPU32 processors, but not by the 68000 or 5200. </p>\n</dd>\n<dt><code>-mno-rtd</code></dt>\n<dd>\nDo not use the calling conventions selected by <code>-mrtd</code>. This is the default. </dd>\n<dt>\n<code>-malign-int</code><dt><code>-mno-align-int</code></dt>\n</dt>\n<dd>\nControl whether GCC aligns <code>int</code>, <code>long</code>, <code>long long</code>, <code>float</code>, <code>double</code>, and <code>long double</code> variables on a 32-bit boundary (<code>-malign-int</code>) or a 16-bit boundary (<code>-mno-align-int</code>). Aligning variables on 32-bit boundaries produces code that runs somewhat faster on processors with 32-bit busses at the expense of more memory. <p><strong>Warning:</strong> if you use the <code>-malign-int</code> switch, GCC aligns structures containing the above types differently than most published application binary interface specifications for the m68k. </p>\n</dd>\n<dt><code>-mpcrel</code></dt>\n<dd>\nUse the pc-relative addressing mode of the 68000 directly, instead of using a global offset table. At present, this option implies <code>-fpic</code>, allowing at most a 16-bit offset for pc-relative addressing. <code>-fPIC</code> is not presently supported with <code>-mpcrel</code>, though this could be supported for 68020 and higher processors. </dd>\n<dt>\n<code>-mno-strict-align</code><dt><code>-mstrict-align</code></dt>\n</dt>\n<dd>\nDo not (do) assume that unaligned memory references are handled by the system. </dd>\n<dt><code>-msep-data</code></dt>\n<dd>Generate code that allows the data segment to be located in a different area of memory from the text segment. This allows for execute-in-place in an environment without virtual memory management. This option implies <code>-fPIC</code>. </dd>\n<dt><code>-mno-sep-data</code></dt>\n<dd>Generate code that assumes that the data segment follows the text segment. This is the default. </dd>\n<dt><code>-mid-shared-library</code></dt>\n<dd>Generate code that supports shared libraries via the library ID method. This allows for execute-in-place and shared libraries in an environment without virtual memory management. This option implies <code>-fPIC</code>. </dd>\n<dt><code>-mno-id-shared-library</code></dt>\n<dd>Generate code that doesn't assume ID-based shared libraries are being used. This is the default. </dd>\n<dt><code>-mshared-library-id=n</code></dt>\n<dd>Specifies the identification number of the ID-based shared library being compiled. Specifying a value of 0 generates more compact code; specifying other values forces the allocation of that number to the current library, but is no more space- or time-efficient than omitting this option. </dd>\n<dt>\n<code>-mxgot</code><dt><code>-mno-xgot</code></dt>\n</dt>\n<dd>\nWhen generating position-independent code for ColdFire, generate code that works if the GOT has more than 8192 entries. This code is larger and slower than code generated without this option. On M680x0 processors, this option is not needed; <code>-fPIC</code> suffices. <p>GCC normally uses a single instruction to load values from the GOT. While this is relatively efficient, it only works if the GOT is smaller than about 64k. Anything larger causes the linker to report an error such as: </p>\n\n<pre class=\"smallexample\">relocation truncated to fit: R_68K_GOT16O foobar</pre> <p>If this happens, you should recompile your code with <code>-mxgot</code>. It should then work with very large GOTs. However, code generated with <code>-mxgot</code> is less efficient, since it takes 4 instructions to fetch the value of a global symbol. </p>\n<p>Note that some linkers, including newer versions of the GNU linker, can create multiple GOTs and sort GOT entries. If you have such a linker, you should only need to use <code>-mxgot</code> when compiling a single object file that accesses more than 8192 GOT entries. Very few do. </p>\n<p>These options have no effect unless GCC is generating position-independent code. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/M680x0-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/M680x0-Options.html</a>\n  </p>\n</div>\n","mcore-options":"<h1 class=\"subsection\" id=\"MCore-Options\">3.17.24 MCore Options</h1> <p> These are the ‘<code>-m</code>’ options defined for the Motorola M*Core processors. </p>\n<dl> <dt>\n<code>-mhardlit</code><dt><code>-mno-hardlit</code></dt>\n</dt>\n<dd>\nInline constants into the code stream if it can be done in two instructions or less. </dd>\n<dt>\n<code>-mdiv</code><dt><code>-mno-div</code></dt>\n</dt>\n<dd>\nUse the divide instruction. (Enabled by default). </dd>\n<dt>\n<code>-mrelax-immediate</code><dt><code>-mno-relax-immediate</code></dt>\n</dt>\n<dd>\nAllow arbitrary-sized immediates in bit operations. </dd>\n<dt>\n<code>-mwide-bitfields</code><dt><code>-mno-wide-bitfields</code></dt>\n</dt>\n<dd>\nAlways treat bit-fields as <code>int</code>-sized. </dd>\n<dt>\n<code>-m4byte-functions</code><dt><code>-mno-4byte-functions</code></dt>\n</dt>\n<dd>\nForce all functions to be aligned to a 4-byte boundary. </dd>\n<dt>\n<code>-mcallgraph-data</code><dt><code>-mno-callgraph-data</code></dt>\n</dt>\n<dd>\nEmit callgraph information. </dd>\n<dt>\n<code>-mslow-bytes</code><dt><code>-mno-slow-bytes</code></dt>\n</dt>\n<dd>\nPrefer word access when reading byte quantities. </dd>\n<dt>\n<code>-mlittle-endian</code><dt><code>-mbig-endian</code></dt>\n</dt>\n<dd>\nGenerate code for a little-endian target. </dd>\n<dt>\n<code>-m210</code><dt><code>-m340</code></dt>\n</dt>\n<dd>\nGenerate code for the 210 processor. </dd>\n<dt><code>-mno-lsim</code></dt>\n<dd>\nAssume that runtime support has been provided and so omit the simulator library (<code>libsim.a)</code> from the linker command line. </dd>\n<dt>\n<code>-mstack-increment=</code><var>size</var>\n</dt>\n<dd>\nSet the maximum amount for a single stack increment operation. Large values can increase the speed of programs that contain functions that need a large amount of stack space, but they can also trigger a segmentation fault if the stack is extended too much. The default value is 0x1000. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MCore-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MCore-Options.html</a>\n  </p>\n</div>\n","mep-options":"<h1 class=\"subsection\" id=\"MeP-Options\">3.17.25 MeP Options</h1> \n<dl> <dt><code>-mabsdiff</code></dt>\n<dd>\nEnables the <code>abs</code> instruction, which is the absolute difference between two registers. </dd>\n<dt><code>-mall-opts</code></dt>\n<dd>\nEnables all the optional instructions—average, multiply, divide, bit operations, leading zero, absolute difference, min/max, clip, and saturation. </dd>\n<dt><code>-maverage</code></dt>\n<dd>\nEnables the <code>ave</code> instruction, which computes the average of two registers. </dd>\n<dt>\n<code>-mbased=</code><var>n</var>\n</dt>\n<dd>\nVariables of size <var>n</var> bytes or smaller are placed in the <code>.based</code> section by default. Based variables use the <code>$tp</code> register as a base register, and there is a 128-byte limit to the <code>.based</code> section. </dd>\n<dt><code>-mbitops</code></dt>\n<dd>\nEnables the bit operation instructions—bit test (<code>btstm</code>), set (<code>bsetm</code>), clear (<code>bclrm</code>), invert (<code>bnotm</code>), and test-and-set (<code>tas</code>). </dd>\n<dt>\n<code>-mc=</code><var>name</var>\n</dt>\n<dd>\nSelects which section constant data is placed in. <var>name</var> may be <code>tiny</code>, <code>near</code>, or <code>far</code>. </dd>\n<dt><code>-mclip</code></dt>\n<dd>\nEnables the <code>clip</code> instruction. Note that <code>-mclip</code> is not useful unless you also provide <code>-mminmax</code>. </dd>\n<dt>\n<code>-mconfig=</code><var>name</var>\n</dt>\n<dd>\nSelects one of the built-in core configurations. Each MeP chip has one or more modules in it; each module has a core CPU and a variety of coprocessors, optional instructions, and peripherals. The <code>MeP-Integrator</code> tool, not part of GCC, provides these configurations through this option; using this option is the same as using all the corresponding command-line options. The default configuration is <code>default</code>. </dd>\n<dt><code>-mcop</code></dt>\n<dd>\nEnables the coprocessor instructions. By default, this is a 32-bit coprocessor. Note that the coprocessor is normally enabled via the <code>-mconfig=</code> option. </dd>\n<dt><code>-mcop32</code></dt>\n<dd>\nEnables the 32-bit coprocessor's instructions. </dd>\n<dt><code>-mcop64</code></dt>\n<dd>\nEnables the 64-bit coprocessor's instructions. </dd>\n<dt><code>-mivc2</code></dt>\n<dd>\nEnables IVC2 scheduling. IVC2 is a 64-bit VLIW coprocessor. </dd>\n<dt><code>-mdc</code></dt>\n<dd>\nCauses constant variables to be placed in the <code>.near</code> section. </dd>\n<dt><code>-mdiv</code></dt>\n<dd>\nEnables the <code>div</code> and <code>divu</code> instructions. </dd>\n<dt><code>-meb</code></dt>\n<dd>\nGenerate big-endian code. </dd>\n<dt><code>-mel</code></dt>\n<dd>\nGenerate little-endian code. </dd>\n<dt><code>-mio-volatile</code></dt>\n<dd>\nTells the compiler that any variable marked with the <code>io</code> attribute is to be considered volatile. </dd>\n<dt><code>-ml</code></dt>\n<dd>\nCauses variables to be assigned to the <code>.far</code> section by default. </dd>\n<dt><code>-mleadz</code></dt>\n<dd>\nEnables the <code>leadz</code> (leading zero) instruction. </dd>\n<dt><code>-mm</code></dt>\n<dd>\nCauses variables to be assigned to the <code>.near</code> section by default. </dd>\n<dt><code>-mminmax</code></dt>\n<dd>\nEnables the <code>min</code> and <code>max</code> instructions. </dd>\n<dt><code>-mmult</code></dt>\n<dd>\nEnables the multiplication and multiply-accumulate instructions. </dd>\n<dt><code>-mno-opts</code></dt>\n<dd>\nDisables all the optional instructions enabled by <code>-mall-opts</code>. </dd>\n<dt><code>-mrepeat</code></dt>\n<dd>\nEnables the <code>repeat</code> and <code>erepeat</code> instructions, used for low-overhead looping. </dd>\n<dt><code>-ms</code></dt>\n<dd>\nCauses all variables to default to the <code>.tiny</code> section. Note that there is a 65536-byte limit to this section. Accesses to these variables use the <code>%gp</code> base register. </dd>\n<dt><code>-msatur</code></dt>\n<dd>\nEnables the saturation instructions. Note that the compiler does not currently generate these itself, but this option is included for compatibility with other tools, like <code>as</code>. </dd>\n<dt><code>-msdram</code></dt>\n<dd>\nLink the SDRAM-based runtime instead of the default ROM-based runtime. </dd>\n<dt><code>-msim</code></dt>\n<dd>\nLink the simulator run-time libraries. </dd>\n<dt><code>-msimnovec</code></dt>\n<dd>\nLink the simulator runtime libraries, excluding built-in support for reset and exception vectors and tables. </dd>\n<dt><code>-mtf</code></dt>\n<dd>\nCauses all functions to default to the <code>.far</code> section. Without this option, functions default to the <code>.near</code> section. </dd>\n<dt>\n<code>-mtiny=</code><var>n</var>\n</dt>\n<dd>\nVariables that are <var>n</var> bytes or smaller are allocated to the <code>.tiny</code> section. These variables use the <code>$gp</code> base register. The default for this option is 4, but note that there's a 65536-byte limit to the <code>.tiny</code> section. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MeP-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MeP-Options.html</a>\n  </p>\n</div>\n","microblaze-options":"<h1 class=\"subsection\" id=\"MicroBlaze-Options\">3.17.26 MicroBlaze Options</h1> \n<dl> <dt><code>-msoft-float</code></dt>\n<dd>\nUse software emulation for floating point (default). </dd>\n<dt><code>-mhard-float</code></dt>\n<dd>\nUse hardware floating-point instructions. </dd>\n<dt><code>-mmemcpy</code></dt>\n<dd>\nDo not optimize block moves, use <code>memcpy</code>. </dd>\n<dt><code>-mno-clearbss</code></dt>\n<dd>\nThis option is deprecated. Use <code>-fno-zero-initialized-in-bss</code> instead. </dd>\n<dt>\n<code>-mcpu=</code><var>cpu-type</var>\n</dt>\n<dd>\nUse features of, and schedule code for, the given CPU. Supported values are in the format ‘<samp><span class=\"samp\">v</span><var>X</var><span class=\"samp\">.</span><var>YY</var><span class=\"samp\">.</span><var>Z</var></samp>’, where <var>X</var> is a major version, <var>YY</var> is the minor version, and <var>Z</var> is compatibility code. Example values are ‘<code>v3.00.a</code>’, ‘<code>v4.00.b</code>’, ‘<code>v5.00.a</code>’, ‘<code>v5.00.b</code>’, ‘<code>v5.00.b</code>’, ‘<code>v6.00.a</code>’. </dd>\n<dt><code>-mxl-soft-mul</code></dt>\n<dd>\nUse software multiply emulation (default). </dd>\n<dt><code>-mxl-soft-div</code></dt>\n<dd>\nUse software emulation for divides (default). </dd>\n<dt><code>-mxl-barrel-shift</code></dt>\n<dd>\nUse the hardware barrel shifter. </dd>\n<dt><code>-mxl-pattern-compare</code></dt>\n<dd>\nUse pattern compare instructions. </dd>\n<dt><code>-msmall-divides</code></dt>\n<dd>\nUse table lookup optimization for small signed integer divisions. </dd>\n<dt><code>-mxl-stack-check</code></dt>\n<dd>\nThis option is deprecated. Use <code>-fstack-check</code> instead. </dd>\n<dt><code>-mxl-gp-opt</code></dt>\n<dd>\nUse GP-relative <code>.sdata</code>/<code>.sbss</code> sections. </dd>\n<dt><code>-mxl-multiply-high</code></dt>\n<dd>\nUse multiply high instructions for high part of 32x32 multiply. </dd>\n<dt><code>-mxl-float-convert</code></dt>\n<dd>\nUse hardware floating-point conversion instructions. </dd>\n<dt><code>-mxl-float-sqrt</code></dt>\n<dd>\nUse hardware floating-point square root instruction. </dd>\n<dt><code>-mbig-endian</code></dt>\n<dd>\nGenerate code for a big-endian target. </dd>\n<dt><code>-mlittle-endian</code></dt>\n<dd>\nGenerate code for a little-endian target. </dd>\n<dt><code>-mxl-reorder</code></dt>\n<dd>\nUse reorder instructions (swap and byte reversed load/store). </dd>\n<dt>\n<code>-mxl-mode-</code><var>app-model</var>\n</dt>\n<dd>Select application model <var>app-model</var>. Valid models are <dl> <dt>‘<code>executable</code>’</dt>\n<dd>normal executable (default), uses startup code <code>crt0.o</code>. </dd>\n<dt>‘<code>xmdstub</code>’</dt>\n<dd>for use with Xilinx Microprocessor Debugger (XMD) based software intrusive debug agent called xmdstub. This uses startup file <code>crt1.o</code> and sets the start address of the program to 0x800. </dd>\n<dt>‘<code>bootstrap</code>’</dt>\n<dd>for applications that are loaded using a bootloader. This model uses startup file <code>crt2.o</code> which does not contain a processor reset vector handler. This is suitable for transferring control on a processor reset to the bootloader rather than the application. </dd>\n<dt>‘<code>novectors</code>’</dt>\n<dd>for applications that do not require any of the MicroBlaze vectors. This option may be useful for applications running within a monitoring application. This model uses <code>crt3.o</code> as a startup file. </dd>\n</dl> <p>Option <samp><span class=\"option\">-xl-mode-</span><var>app-model</var></samp> is a deprecated alias for <samp><span class=\"option\">-mxl-mode-</span><var>app-model</var></samp>. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MicroBlaze-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MicroBlaze-Options.html</a>\n  </p>\n</div>\n","mips-options":"<h1 class=\"subsection\" id=\"MIPS-Options\">3.17.27 MIPS Options</h1> \n<dl> <dt><code>-EB</code></dt>\n<dd>\nGenerate big-endian code. </dd>\n<dt><code>-EL</code></dt>\n<dd>\nGenerate little-endian code. This is the default for ‘<code>mips*el-*-*</code>’ configurations. </dd>\n<dt>\n<code>-march=</code><var>arch</var>\n</dt>\n<dd>\nGenerate code that runs on <var>arch</var>, which can be the name of a generic MIPS ISA, or the name of a particular processor. The ISA names are: ‘<code>mips1</code>’, ‘<code>mips2</code>’, ‘<code>mips3</code>’, ‘<code>mips4</code>’, ‘<code>mips32</code>’, ‘<code>mips32r2</code>’, ‘<code>mips64</code>’ and ‘<code>mips64r2</code>’. The processor names are: ‘<code>4kc</code>’, ‘<code>4km</code>’, ‘<code>4kp</code>’, ‘<code>4ksc</code>’, ‘<code>4kec</code>’, ‘<code>4kem</code>’, ‘<code>4kep</code>’, ‘<code>4ksd</code>’, ‘<code>5kc</code>’, ‘<code>5kf</code>’, ‘<code>20kc</code>’, ‘<code>24kc</code>’, ‘<code>24kf2_1</code>’, ‘<code>24kf1_1</code>’, ‘<code>24kec</code>’, ‘<code>24kef2_1</code>’, ‘<code>24kef1_1</code>’, ‘<code>34kc</code>’, ‘<code>34kf2_1</code>’, ‘<code>34kf1_1</code>’, ‘<code>34kn</code>’, ‘<code>74kc</code>’, ‘<code>74kf2_1</code>’, ‘<code>74kf1_1</code>’, ‘<code>74kf3_2</code>’, ‘<code>1004kc</code>’, ‘<code>1004kf2_1</code>’, ‘<code>1004kf1_1</code>’, ‘<code>loongson2e</code>’, ‘<code>loongson2f</code>’, ‘<code>loongson3a</code>’, ‘<code>m4k</code>’, ‘<code>m14k</code>’, ‘<code>m14kc</code>’, ‘<code>m14ke</code>’, ‘<code>m14kec</code>’, ‘<code>octeon</code>’, ‘<code>octeon+</code>’, ‘<code>octeon2</code>’, ‘<code>orion</code>’, ‘<code>r2000</code>’, ‘<code>r3000</code>’, ‘<code>r3900</code>’, ‘<code>r4000</code>’, ‘<code>r4400</code>’, ‘<code>r4600</code>’, ‘<code>r4650</code>’, ‘<code>r4700</code>’, ‘<code>r6000</code>’, ‘<code>r8000</code>’, ‘<code>rm7000</code>’, ‘<code>rm9000</code>’, ‘<code>r10000</code>’, ‘<code>r12000</code>’, ‘<code>r14000</code>’, ‘<code>r16000</code>’, ‘<code>sb1</code>’, ‘<code>sr71000</code>’, ‘<code>vr4100</code>’, ‘<code>vr4111</code>’, ‘<code>vr4120</code>’, ‘<code>vr4130</code>’, ‘<code>vr4300</code>’, ‘<code>vr5000</code>’, ‘<code>vr5400</code>’, ‘<code>vr5500</code>’, ‘<code>xlr</code>’ and ‘<code>xlp</code>’. The special value ‘<code>from-abi</code>’ selects the most compatible architecture for the selected ABI (that is, ‘<code>mips1</code>’ for 32-bit ABIs and ‘<code>mips3</code>’ for 64-bit ABIs). <p>The native Linux/GNU toolchain also supports the value ‘<code>native</code>’, which selects the best architecture option for the host processor. <code>-march=native</code> has no effect if GCC does not recognize the processor. </p>\n<p>In processor names, a final ‘<code>000</code>’ can be abbreviated as ‘<code>k</code>’ (for example, <code>-march=r2k</code>). Prefixes are optional, and ‘<code>vr</code>’ may be written ‘<code>r</code>’. </p>\n<p>Names of the form ‘<samp><var>n</var><span class=\"samp\">f2_1</span></samp>’ refer to processors with FPUs clocked at half the rate of the core, names of the form ‘<samp><var>n</var><span class=\"samp\">f1_1</span></samp>’ refer to processors with FPUs clocked at the same rate as the core, and names of the form ‘<samp><var>n</var><span class=\"samp\">f3_2</span></samp>’ refer to processors with FPUs clocked a ratio of 3:2 with respect to the core. For compatibility reasons, ‘<samp><var>n</var><span class=\"samp\">f</span></samp>’ is accepted as a synonym for ‘<samp><var>n</var><span class=\"samp\">f2_1</span></samp>’ while ‘<samp><var>n</var><span class=\"samp\">x</span></samp>’ and ‘<samp><var>b</var><span class=\"samp\">fx</span></samp>’ are accepted as synonyms for ‘<samp><var>n</var><span class=\"samp\">f1_1</span></samp>’. </p>\n<p>GCC defines two macros based on the value of this option. The first is ‘<code>_MIPS_ARCH</code>’, which gives the name of target architecture, as a string. The second has the form ‘<samp><span class=\"samp\">_MIPS_ARCH_</span><var>foo</var></samp>’, where <var>foo</var> is the capitalized value of ‘<code>_MIPS_ARCH</code>’. For example, <code>-march=r2000</code> sets ‘<code>_MIPS_ARCH</code>’ to ‘<code>\"r2000\"</code>’ and defines the macro ‘<code>_MIPS_ARCH_R2000</code>’. </p>\n<p>Note that the ‘<code>_MIPS_ARCH</code>’ macro uses the processor names given above. In other words, it has the full prefix and does not abbreviate ‘<code>000</code>’ as ‘<code>k</code>’. In the case of ‘<code>from-abi</code>’, the macro names the resolved architecture (either ‘<code>\"mips1\"</code>’ or ‘<code>\"mips3\"</code>’). It names the default architecture when no <code>-march</code> option is given. </p>\n</dd>\n<dt>\n<code>-mtune=</code><var>arch</var>\n</dt>\n<dd>\nOptimize for <var>arch</var>. Among other things, this option controls the way instructions are scheduled, and the perceived cost of arithmetic operations. The list of <var>arch</var> values is the same as for <code>-march</code>. <p>When this option is not used, GCC optimizes for the processor specified by <code>-march</code>. By using <code>-march</code> and <code>-mtune</code> together, it is possible to generate code that runs on a family of processors, but optimize the code for one particular member of that family. </p>\n<p><code>-mtune</code> defines the macros ‘<code>_MIPS_TUNE</code>’ and ‘<samp><span class=\"samp\">_MIPS_TUNE_</span><var>foo</var></samp>’, which work in the same way as the <code>-march</code> ones described above. </p>\n</dd>\n<dt><code>-mips1</code></dt>\n<dd>\nEquivalent to <code>-march=mips1</code>. </dd>\n<dt><code>-mips2</code></dt>\n<dd>\nEquivalent to <code>-march=mips2</code>. </dd>\n<dt><code>-mips3</code></dt>\n<dd>\nEquivalent to <code>-march=mips3</code>. </dd>\n<dt><code>-mips4</code></dt>\n<dd>\nEquivalent to <code>-march=mips4</code>. </dd>\n<dt><code>-mips32</code></dt>\n<dd>\nEquivalent to <code>-march=mips32</code>. </dd>\n<dt><code>-mips32r2</code></dt>\n<dd>\nEquivalent to <code>-march=mips32r2</code>. </dd>\n<dt><code>-mips64</code></dt>\n<dd>\nEquivalent to <code>-march=mips64</code>. </dd>\n<dt><code>-mips64r2</code></dt>\n<dd>\nEquivalent to <code>-march=mips64r2</code>. </dd>\n<dt>\n<code>-mips16</code><dt><code>-mno-mips16</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) MIPS16 code. If GCC is targeting a MIPS32 or MIPS64 architecture, it makes use of the MIPS16e ASE. <p>MIPS16 code generation can also be controlled on a per-function basis by means of <code>mips16</code> and <code>nomips16</code> attributes. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, for more information. </p>\n</dd>\n<dt><code>-mflip-mips16</code></dt>\n<dd>\nGenerate MIPS16 code on alternating functions. This option is provided for regression testing of mixed MIPS16/non-MIPS16 code generation, and is not intended for ordinary use in compiling user code. </dd>\n<dt>\n<code>-minterlink-compressed</code><dt><code>-mno-interlink-compressed</code></dt>\n</dt>\n<dd>\nRequire (do not require) that code using the standard (uncompressed) MIPS ISA be link-compatible with MIPS16 and microMIPS code, and vice versa. <p>For example, code using the standard ISA encoding cannot jump directly to MIPS16 or microMIPS code; it must either use a call or an indirect jump. <code>-minterlink-compressed</code> therefore disables direct jumps unless GCC knows that the target of the jump is not compressed. </p>\n</dd>\n<dt>\n<code>-minterlink-mips16</code><dt><code>-mno-interlink-mips16</code></dt>\n</dt>\n<dd>\nAliases of <code>-minterlink-compressed</code> and <code>-mno-interlink-compressed</code>. These options predate the microMIPS ASE and are retained for backwards compatibility. </dd>\n<dt>\n<code>-mabi=32</code><dt>\n<code>-mabi=o64</code><dt>\n<code>-mabi=n32</code><dt>\n<code>-mabi=64</code><dt><code>-mabi=eabi</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nGenerate code for the given ABI. <p>Note that the EABI has a 32-bit and a 64-bit variant. GCC normally generates 64-bit code when you select a 64-bit architecture, but you can use <code>-mgp32</code> to get 32-bit code instead. </p>\n<p>For information about the O64 ABI, see <a href=\"http://gcc.gnu.org/projects/mipso64-abi.html\">http://gcc.gnu.org/projects/mipso64-abi.html</a>. </p>\n<p>GCC supports a variant of the o32 ABI in which floating-point registers are 64 rather than 32 bits wide. You can select this combination with <code>-mabi=32</code> <code>-mfp64</code>. This ABI relies on the <code>mthc1</code> and <code>mfhc1</code> instructions and is therefore only supported for MIPS32R2 processors. </p>\n<p>The register assignments for arguments and return values remain the same, but each scalar value is passed in a single 64-bit register rather than a pair of 32-bit registers. For example, scalar floating-point values are returned in ‘<code>$f0</code>’ only, not a ‘<code>$f0</code>’/‘<code>$f1</code>’ pair. The set of call-saved registers also remains the same, but all 64 bits are saved. </p>\n</dd>\n<dt>\n<code>-mabicalls</code><dt><code>-mno-abicalls</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) code that is suitable for SVR4-style dynamic objects. <code>-mabicalls</code> is the default for SVR4-based systems. </dd>\n<dt>\n<code>-mshared</code><dt><code>-mno-shared</code></dt>\n</dt>\n<dd>Generate (do not generate) code that is fully position-independent, and that can therefore be linked into shared libraries. This option only affects <code>-mabicalls</code>. <p>All <code>-mabicalls</code> code has traditionally been position-independent, regardless of options like <code>-fPIC</code> and <code>-fpic</code>. However, as an extension, the GNU toolchain allows executables to use absolute accesses for locally-binding symbols. It can also use shorter GP initialization sequences and generate direct calls to locally-defined functions. This mode is selected by <code>-mno-shared</code>. </p>\n<p><code>-mno-shared</code> depends on binutils 2.16 or higher and generates objects that can only be linked by the GNU linker. However, the option does not affect the ABI of the final executable; it only affects the ABI of relocatable objects. Using <code>-mno-shared</code> generally makes executables both smaller and quicker. </p>\n<p><code>-mshared</code> is the default. </p>\n</dd>\n<dt>\n<code>-mplt</code><dt><code>-mno-plt</code></dt>\n</dt>\n<dd>\nAssume (do not assume) that the static and dynamic linkers support PLTs and copy relocations. This option only affects <code>-mno-shared -mabicalls</code>. For the n64 ABI, this option has no effect without <code>-msym32</code>. <p>You can make <code>-mplt</code> the default by configuring GCC with <code>--with-mips-plt</code>. The default is <code>-mno-plt</code> otherwise. </p>\n</dd>\n<dt>\n<code>-mxgot</code><dt><code>-mno-xgot</code></dt>\n</dt>\n<dd>\nLift (do not lift) the usual restrictions on the size of the global offset table. <p>GCC normally uses a single instruction to load values from the GOT. While this is relatively efficient, it only works if the GOT is smaller than about 64k. Anything larger causes the linker to report an error such as: </p>\n\n<pre class=\"smallexample\">relocation truncated to fit: R_MIPS_GOT16 foobar</pre> <p>If this happens, you should recompile your code with <code>-mxgot</code>. This works with very large GOTs, although the code is also less efficient, since it takes three instructions to fetch the value of a global symbol. </p>\n<p>Note that some linkers can create multiple GOTs. If you have such a linker, you should only need to use <code>-mxgot</code> when a single object file accesses more than 64k's worth of GOT entries. Very few do. </p>\n<p>These options have no effect unless GCC is generating position independent code. </p>\n</dd>\n<dt><code>-mgp32</code></dt>\n<dd>\nAssume that general-purpose registers are 32 bits wide. </dd>\n<dt><code>-mgp64</code></dt>\n<dd>\nAssume that general-purpose registers are 64 bits wide. </dd>\n<dt><code>-mfp32</code></dt>\n<dd>\nAssume that floating-point registers are 32 bits wide. </dd>\n<dt><code>-mfp64</code></dt>\n<dd>\nAssume that floating-point registers are 64 bits wide. </dd>\n<dt><code>-mhard-float</code></dt>\n<dd>\nUse floating-point coprocessor instructions. </dd>\n<dt><code>-msoft-float</code></dt>\n<dd>\nDo not use floating-point coprocessor instructions. Implement floating-point calculations using library calls instead. </dd>\n<dt><code>-mno-float</code></dt>\n<dd>\nEquivalent to <code>-msoft-float</code>, but additionally asserts that the program being compiled does not perform any floating-point operations. This option is presently supported only by some bare-metal MIPS configurations, where it may select a special set of libraries that lack all floating-point support (including, for example, the floating-point <code>printf</code> formats). If code compiled with <code>-mno-float</code> accidentally contains floating-point operations, it is likely to suffer a link-time or run-time failure. </dd>\n<dt><code>-msingle-float</code></dt>\n<dd>\nAssume that the floating-point coprocessor only supports single-precision operations. </dd>\n<dt><code>-mdouble-float</code></dt>\n<dd>\nAssume that the floating-point coprocessor supports double-precision operations. This is the default. </dd>\n<dt>\n<code>-mabs=2008</code><dt><code>-mabs=legacy</code></dt>\n</dt>\n<dd>\nThese options control the treatment of the special not-a-number (NaN) IEEE 754 floating-point data with the <code>abs.</code><i>fmt</i> and <code>neg.</code><i>fmt</i> machine instructions. <p>By default or when the <code>-mabs=legacy</code> is used the legacy treatment is selected. In this case these instructions are considered arithmetic and avoided where correct operation is required and the input operand might be a NaN. A longer sequence of instructions that manipulate the sign bit of floating-point datum manually is used instead unless the <code>-ffinite-math-only</code> option has also been specified. </p>\n<p>The <code>-mabs=2008</code> option selects the IEEE 754-2008 treatment. In this case these instructions are considered non-arithmetic and therefore operating correctly in all cases, including in particular where the input operand is a NaN. These instructions are therefore always used for the respective operations. </p>\n</dd>\n<dt>\n<code>-mnan=2008</code><dt><code>-mnan=legacy</code></dt>\n</dt>\n<dd>\nThese options control the encoding of the special not-a-number (NaN) IEEE 754 floating-point data. <p>The <code>-mnan=legacy</code> option selects the legacy encoding. In this case quiet NaNs (qNaNs) are denoted by the first bit of their trailing significand field being 0, whereas signalling NaNs (sNaNs) are denoted by the first bit of their trailing significand field being 1. </p>\n<p>The <code>-mnan=2008</code> option selects the IEEE 754-2008 encoding. In this case qNaNs are denoted by the first bit of their trailing significand field being 1, whereas sNaNs are denoted by the first bit of their trailing significand field being 0. </p>\n<p>The default is <code>-mnan=legacy</code> unless GCC has been configured with <code>--with-nan=2008</code>. </p>\n</dd>\n<dt>\n<code>-mllsc</code><dt><code>-mno-llsc</code></dt>\n</dt>\n<dd>\nUse (do not use) ‘<code>ll</code>’, ‘<code>sc</code>’, and ‘<code>sync</code>’ instructions to implement atomic memory built-in functions. When neither option is specified, GCC uses the instructions if the target architecture supports them. <p><code>-mllsc</code> is useful if the runtime environment can emulate the instructions and <code>-mno-llsc</code> can be useful when compiling for nonstandard ISAs. You can make either option the default by configuring GCC with <code>--with-llsc</code> and <code>--without-llsc</code> respectively. <code>--with-llsc</code> is the default for some configurations; see the installation documentation for details. </p>\n</dd>\n<dt>\n<code>-mdsp</code><dt><code>-mno-dsp</code></dt>\n</dt>\n<dd>\nUse (do not use) revision 1 of the MIPS DSP ASE. See <a href=\"mips-dsp-built_002din-functions#MIPS-DSP-Built_002din-Functions\">MIPS DSP Built-in Functions</a>. This option defines the preprocessor macro ‘<code>__mips_dsp</code>’. It also defines ‘<code>__mips_dsp_rev</code>’ to 1. </dd>\n<dt>\n<code>-mdspr2</code><dt><code>-mno-dspr2</code></dt>\n</dt>\n<dd>\nUse (do not use) revision 2 of the MIPS DSP ASE. See <a href=\"mips-dsp-built_002din-functions#MIPS-DSP-Built_002din-Functions\">MIPS DSP Built-in Functions</a>. This option defines the preprocessor macros ‘<code>__mips_dsp</code>’ and ‘<code>__mips_dspr2</code>’. It also defines ‘<code>__mips_dsp_rev</code>’ to 2. </dd>\n<dt>\n<code>-msmartmips</code><dt><code>-mno-smartmips</code></dt>\n</dt>\n<dd>\nUse (do not use) the MIPS SmartMIPS ASE. </dd>\n<dt>\n<code>-mpaired-single</code><dt><code>-mno-paired-single</code></dt>\n</dt>\n<dd>\nUse (do not use) paired-single floating-point instructions. See <a href=\"mips-paired_002dsingle-support#MIPS-Paired_002dSingle-Support\">MIPS Paired-Single Support</a>. This option requires hardware floating-point support to be enabled. </dd>\n<dt>\n<code>-mdmx</code><dt><code>-mno-mdmx</code></dt>\n</dt>\n<dd>\nUse (do not use) MIPS Digital Media Extension instructions. This option can only be used when generating 64-bit code and requires hardware floating-point support to be enabled. </dd>\n<dt>\n<code>-mips3d</code><dt><code>-mno-mips3d</code></dt>\n</dt>\n<dd>\nUse (do not use) the MIPS-3D ASE. See <a href=\"mips_002d3d-built_002din-functions#MIPS_002d3D-Built_002din-Functions\">MIPS-3D Built-in Functions</a>. The option <code>-mips3d</code> implies <code>-mpaired-single</code>. </dd>\n<dt>\n<code>-mmicromips</code><dt><code>-mno-micromips</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) microMIPS code. <p>MicroMIPS code generation can also be controlled on a per-function basis by means of <code>micromips</code> and <code>nomicromips</code> attributes. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, for more information. </p>\n</dd>\n<dt>\n<code>-mmt</code><dt><code>-mno-mt</code></dt>\n</dt>\n<dd>\nUse (do not use) MT Multithreading instructions. </dd>\n<dt>\n<code>-mmcu</code><dt><code>-mno-mcu</code></dt>\n</dt>\n<dd>\nUse (do not use) the MIPS MCU ASE instructions. </dd>\n<dt>\n<code>-meva</code><dt><code>-mno-eva</code></dt>\n</dt>\n<dd>\nUse (do not use) the MIPS Enhanced Virtual Addressing instructions. </dd>\n<dt>\n<code>-mvirt</code><dt><code>-mno-virt</code></dt>\n</dt>\n<dd>\nUse (do not use) the MIPS Virtualization Application Specific instructions. </dd>\n<dt><code>-mlong64</code></dt>\n<dd>\nForce <code>long</code> types to be 64 bits wide. See <code>-mlong32</code> for an explanation of the default and the way that the pointer size is determined. </dd>\n<dt><code>-mlong32</code></dt>\n<dd>\nForce <code>long</code>, <code>int</code>, and pointer types to be 32 bits wide. <p>The default size of <code>int</code>s, <code>long</code>s and pointers depends on the ABI. All the supported ABIs use 32-bit <code>int</code>s. The n64 ABI uses 64-bit <code>long</code>s, as does the 64-bit EABI; the others use 32-bit <code>long</code>s. Pointers are the same size as <code>long</code>s, or the same size as integer registers, whichever is smaller. </p>\n</dd>\n<dt>\n<code>-msym32</code><dt><code>-mno-sym32</code></dt>\n</dt>\n<dd>\nAssume (do not assume) that all symbols have 32-bit values, regardless of the selected ABI. This option is useful in combination with <code>-mabi=64</code> and <code>-mno-abicalls</code> because it allows GCC to generate shorter and faster references to symbolic addresses. </dd>\n<dt>\n<code>-G </code><var>num</var>\n</dt>\n<dd>\nPut definitions of externally-visible data in a small data section if that data is no bigger than <var>num</var> bytes. GCC can then generate more efficient accesses to the data; see <code>-mgpopt</code> for details. <p>The default <code>-G</code> option depends on the configuration. </p>\n</dd>\n<dt>\n<code>-mlocal-sdata</code><dt><code>-mno-local-sdata</code></dt>\n</dt>\n<dd>\nExtend (do not extend) the <code>-G</code> behavior to local data too, such as to static variables in C. <code>-mlocal-sdata</code> is the default for all configurations. <p>If the linker complains that an application is using too much small data, you might want to try rebuilding the less performance-critical parts with <code>-mno-local-sdata</code>. You might also want to build large libraries with <code>-mno-local-sdata</code>, so that the libraries leave more room for the main program. </p>\n</dd>\n<dt>\n<code>-mextern-sdata</code><dt><code>-mno-extern-sdata</code></dt>\n</dt>\n<dd>\nAssume (do not assume) that externally-defined data is in a small data section if the size of that data is within the <code>-G</code> limit. <code>-mextern-sdata</code> is the default for all configurations. <p>If you compile a module <var>Mod</var> with <code>-mextern-sdata</code> <samp><span class=\"option\">-G </span><var>num</var></samp> <code>-mgpopt</code>, and <var>Mod</var> references a variable <var>Var</var> that is no bigger than <var>num</var> bytes, you must make sure that <var>Var</var> is placed in a small data section. If <var>Var</var> is defined by another module, you must either compile that module with a high-enough <code>-G</code> setting or attach a <code>section</code> attribute to <var>Var</var>'s definition. If <var>Var</var> is common, you must link the application with a high-enough <code>-G</code> setting. </p>\n<p>The easiest way of satisfying these restrictions is to compile and link every module with the same <code>-G</code> option. However, you may wish to build a library that supports several different small data limits. You can do this by compiling the library with the highest supported <code>-G</code> setting and additionally using <code>-mno-extern-sdata</code> to stop the library from making assumptions about externally-defined data. </p>\n</dd>\n<dt>\n<code>-mgpopt</code><dt><code>-mno-gpopt</code></dt>\n</dt>\n<dd>\nUse (do not use) GP-relative accesses for symbols that are known to be in a small data section; see <code>-G</code>, <code>-mlocal-sdata</code> and <code>-mextern-sdata</code>. <code>-mgpopt</code> is the default for all configurations. <p><code>-mno-gpopt</code> is useful for cases where the <code>$gp</code> register might not hold the value of <code>_gp</code>. For example, if the code is part of a library that might be used in a boot monitor, programs that call boot monitor routines pass an unknown value in <code>$gp</code>. (In such situations, the boot monitor itself is usually compiled with <code>-G0</code>.) </p>\n<p><code>-mno-gpopt</code> implies <code>-mno-local-sdata</code> and <code>-mno-extern-sdata</code>. </p>\n</dd>\n<dt>\n<code>-membedded-data</code><dt><code>-mno-embedded-data</code></dt>\n</dt>\n<dd>\nAllocate variables to the read-only data section first if possible, then next in the small data section if possible, otherwise in data. This gives slightly slower code than the default, but reduces the amount of RAM required when executing, and thus may be preferred for some embedded systems. </dd>\n<dt>\n<code>-muninit-const-in-rodata</code><dt><code>-mno-uninit-const-in-rodata</code></dt>\n</dt>\n<dd>\nPut uninitialized <code>const</code> variables in the read-only data section. This option is only meaningful in conjunction with <code>-membedded-data</code>. </dd>\n<dt>\n<code>-mcode-readable=</code><var>setting</var>\n</dt>\n<dd>\nSpecify whether GCC may generate code that reads from executable sections. There are three possible settings: <dl> <dt><code>-mcode-readable=yes</code></dt>\n<dd>Instructions may freely access executable sections. This is the default setting. </dd>\n<dt><code>-mcode-readable=pcrel</code></dt>\n<dd>MIPS16 PC-relative load instructions can access executable sections, but other instructions must not do so. This option is useful on 4KSc and 4KSd processors when the code TLBs have the Read Inhibit bit set. It is also useful on processors that can be configured to have a dual instruction/data SRAM interface and that, like the M4K, automatically redirect PC-relative loads to the instruction RAM. </dd>\n<dt><code>-mcode-readable=no</code></dt>\n<dd>Instructions must not access executable sections. This option can be useful on targets that are configured to have a dual instruction/data SRAM interface but that (unlike the M4K) do not automatically redirect PC-relative loads to the instruction RAM. </dd>\n</dl> </dd>\n<dt>\n<code>-msplit-addresses</code><dt><code>-mno-split-addresses</code></dt>\n</dt>\n<dd>\nEnable (disable) use of the <code>%hi()</code> and <code>%lo()</code> assembler relocation operators. This option has been superseded by <code>-mexplicit-relocs</code> but is retained for backwards compatibility. </dd>\n<dt>\n<code>-mexplicit-relocs</code><dt><code>-mno-explicit-relocs</code></dt>\n</dt>\n<dd>\nUse (do not use) assembler relocation operators when dealing with symbolic addresses. The alternative, selected by <code>-mno-explicit-relocs</code>, is to use assembler macros instead. <p><code>-mexplicit-relocs</code> is the default if GCC was configured to use an assembler that supports relocation operators. </p>\n</dd>\n<dt>\n<code>-mcheck-zero-division</code><dt><code>-mno-check-zero-division</code></dt>\n</dt>\n<dd>\nTrap (do not trap) on integer division by zero. <p>The default is <code>-mcheck-zero-division</code>. </p>\n</dd>\n<dt>\n<code>-mdivide-traps</code><dt><code>-mdivide-breaks</code></dt>\n</dt>\n<dd>\nMIPS systems check for division by zero by generating either a conditional trap or a break instruction. Using traps results in smaller code, but is only supported on MIPS II and later. Also, some versions of the Linux kernel have a bug that prevents trap from generating the proper signal (<code>SIGFPE</code>). Use <code>-mdivide-traps</code> to allow conditional traps on architectures that support them and <code>-mdivide-breaks</code> to force the use of breaks. <p>The default is usually <code>-mdivide-traps</code>, but this can be overridden at configure time using <code>--with-divide=breaks</code>. Divide-by-zero checks can be completely disabled using <code>-mno-check-zero-division</code>. </p>\n</dd>\n<dt>\n<code>-mmemcpy</code><dt><code>-mno-memcpy</code></dt>\n</dt>\n<dd>\nForce (do not force) the use of <code>memcpy()</code> for non-trivial block moves. The default is <code>-mno-memcpy</code>, which allows GCC to inline most constant-sized copies. </dd>\n<dt>\n<code>-mlong-calls</code><dt><code>-mno-long-calls</code></dt>\n</dt>\n<dd>\nDisable (do not disable) use of the <code>jal</code> instruction. Calling functions using <code>jal</code> is more efficient but requires the caller and callee to be in the same 256 megabyte segment. <p>This option has no effect on abicalls code. The default is <code>-mno-long-calls</code>. </p>\n</dd>\n<dt>\n<code>-mmad</code><dt><code>-mno-mad</code></dt>\n</dt>\n<dd>\nEnable (disable) use of the <code>mad</code>, <code>madu</code> and <code>mul</code> instructions, as provided by the R4650 ISA. </dd>\n<dt>\n<code>-mimadd</code><dt><code>-mno-imadd</code></dt>\n</dt>\n<dd>\nEnable (disable) use of the <code>madd</code> and <code>msub</code> integer instructions. The default is <code>-mimadd</code> on architectures that support <code>madd</code> and <code>msub</code> except for the 74k architecture where it was found to generate slower code. </dd>\n<dt>\n<code>-mfused-madd</code><dt><code>-mno-fused-madd</code></dt>\n</dt>\n<dd>\nEnable (disable) use of the floating-point multiply-accumulate instructions, when they are available. The default is <code>-mfused-madd</code>. <p>On the R8000 CPU when multiply-accumulate instructions are used, the intermediate product is calculated to infinite precision and is not subject to the FCSR Flush to Zero bit. This may be undesirable in some circumstances. On other processors the result is numerically identical to the equivalent computation using separate multiply, add, subtract and negate instructions. </p>\n</dd>\n<dt><code>-nocpp</code></dt>\n<dd>\nTell the MIPS assembler to not run its preprocessor over user assembler files (with a ‘<code>.s</code>’ suffix) when assembling them. </dd>\n<dt>\n<code>-mfix-24k</code><dt><code>-mno-fix-24k</code></dt>\n</dt>\n<dd>\nWork around the 24K E48 (lost data on stores during refill) errata. The workarounds are implemented by the assembler rather than by GCC. </dd>\n<dt>\n<code>-mfix-r4000</code><dt><code>-mno-fix-r4000</code></dt>\n</dt>\n<dd>\nWork around certain R4000 CPU errata: <ul> <li>A double-word or a variable shift may give an incorrect result if executed immediately after starting an integer division. </li>\n<li>A double-word or a variable shift may give an incorrect result if executed while an integer multiplication is in progress. </li>\n<li>An integer division may give an incorrect result if started in a delay slot of a taken branch or a jump. </li>\n</ul> </dd>\n<dt>\n<code>-mfix-r4400</code><dt><code>-mno-fix-r4400</code></dt>\n</dt>\n<dd>\nWork around certain R4400 CPU errata: <ul> <li>A double-word or a variable shift may give an incorrect result if executed immediately after starting an integer division. </li>\n</ul> </dd>\n<dt>\n<code>-mfix-r10000</code><dt><code>-mno-fix-r10000</code></dt>\n</dt>\n<dd>\nWork around certain R10000 errata: <ul> <li>\n<code>ll</code>/<code>sc</code> sequences may not behave atomically on revisions prior to 3.0. They may deadlock on revisions 2.6 and earlier. </li>\n</ul> <p>This option can only be used if the target architecture supports branch-likely instructions. <code>-mfix-r10000</code> is the default when <code>-march=r10000</code> is used; <code>-mno-fix-r10000</code> is the default otherwise. </p>\n</dd>\n<dt>\n<code>-mfix-rm7000</code><dt><code>-mno-fix-rm7000</code></dt>\n</dt>\n<dd>\nWork around the RM7000 <code>dmult</code>/<code>dmultu</code> errata. The workarounds are implemented by the assembler rather than by GCC. </dd>\n<dt>\n<code>-mfix-vr4120</code><dt><code>-mno-fix-vr4120</code></dt>\n</dt>\n<dd>\nWork around certain VR4120 errata: <ul> <li>\n<code>dmultu</code> does not always produce the correct result. </li>\n<li>\n<code>div</code> and <code>ddiv</code> do not always produce the correct result if one of the operands is negative. </li>\n</ul> The workarounds for the division errata rely on special functions in <code>libgcc.a</code>. At present, these functions are only provided by the <code>mips64vr*-elf</code> configurations. <p>Other VR4120 errata require a NOP to be inserted between certain pairs of instructions. These errata are handled by the assembler, not by GCC itself. </p>\n</dd>\n<dt><code>-mfix-vr4130</code></dt>\n<dd>\nWork around the VR4130 <code>mflo</code>/<code>mfhi</code> errata. The workarounds are implemented by the assembler rather than by GCC, although GCC avoids using <code>mflo</code> and <code>mfhi</code> if the VR4130 <code>macc</code>, <code>macchi</code>, <code>dmacc</code> and <code>dmacchi</code> instructions are available instead. </dd>\n<dt>\n<code>-mfix-sb1</code><dt><code>-mno-fix-sb1</code></dt>\n</dt>\n<dd>\nWork around certain SB-1 CPU core errata. (This flag currently works around the SB-1 revision 2 “F1” and “F2” floating-point errata.) </dd>\n<dt>\n<code>-mr10k-cache-barrier=</code><var>setting</var>\n</dt>\n<dd>\nSpecify whether GCC should insert cache barriers to avoid the side-effects of speculation on R10K processors. <p>In common with many processors, the R10K tries to predict the outcome of a conditional branch and speculatively executes instructions from the “taken” branch. It later aborts these instructions if the predicted outcome is wrong. However, on the R10K, even aborted instructions can have side effects. </p>\n<p>This problem only affects kernel stores and, depending on the system, kernel loads. As an example, a speculatively-executed store may load the target memory into cache and mark the cache line as dirty, even if the store itself is later aborted. If a DMA operation writes to the same area of memory before the “dirty” line is flushed, the cached data overwrites the DMA-ed data. See the R10K processor manual for a full description, including other potential problems. </p>\n<p>One workaround is to insert cache barrier instructions before every memory access that might be speculatively executed and that might have side effects even if aborted. <samp><span class=\"option\">-mr10k-cache-barrier=</span><var>setting</var></samp> controls GCC's implementation of this workaround. It assumes that aborted accesses to any byte in the following regions does not have side effects: </p>\n<ol type=\"1\" start=\"1\"> <li>the memory occupied by the current function's stack frame; </li>\n<li>the memory occupied by an incoming stack argument; </li>\n<li>the memory occupied by an object with a link-time-constant address. </li>\n</ol> <p>It is the kernel's responsibility to ensure that speculative accesses to these regions are indeed safe. </p>\n<p>If the input program contains a function declaration such as: </p>\n<pre class=\"smallexample\">void foo (void);</pre> <p>then the implementation of <code>foo</code> must allow <code>j foo</code> and <code>jal foo</code> to be executed speculatively. GCC honors this restriction for functions it compiles itself. It expects non-GCC functions (such as hand-written assembly code) to do the same. </p>\n<p>The option has three forms: </p>\n<dl> <dt><code>-mr10k-cache-barrier=load-store</code></dt>\n<dd>Insert a cache barrier before a load or store that might be speculatively executed and that might have side effects even if aborted. </dd>\n<dt><code>-mr10k-cache-barrier=store</code></dt>\n<dd>Insert a cache barrier before a store that might be speculatively executed and that might have side effects even if aborted. </dd>\n<dt><code>-mr10k-cache-barrier=none</code></dt>\n<dd>Disable the insertion of cache barriers. This is the default setting. </dd>\n</dl> </dd>\n<dt>\n<code>-mflush-func=</code><var>func</var><dt><code>-mno-flush-func</code></dt>\n</dt>\n<dd>\nSpecifies the function to call to flush the I and D caches, or to not call any such function. If called, the function must take the same arguments as the common <code>_flush_func()</code>, that is, the address of the memory range for which the cache is being flushed, the size of the memory range, and the number 3 (to flush both caches). The default depends on the target GCC was configured for, but commonly is either ‘<code>_flush_func</code>’ or ‘<code>__cpu_flush</code>’. </dd>\n<dt>\n<code>mbranch-cost=</code><var>num</var>\n</dt>\n<dd>\nSet the cost of branches to roughly <var>num</var> “simple” instructions. This cost is only a heuristic and is not guaranteed to produce consistent results across releases. A zero cost redundantly selects the default, which is based on the <code>-mtune</code> setting. </dd>\n<dt>\n<code>-mbranch-likely</code><dt><code>-mno-branch-likely</code></dt>\n</dt>\n<dd>\nEnable or disable use of Branch Likely instructions, regardless of the default for the selected architecture. By default, Branch Likely instructions may be generated if they are supported by the selected architecture. An exception is for the MIPS32 and MIPS64 architectures and processors that implement those architectures; for those, Branch Likely instructions are not be generated by default because the MIPS32 and MIPS64 architectures specifically deprecate their use. </dd>\n<dt>\n<code>-mfp-exceptions</code><dt><code>-mno-fp-exceptions</code></dt>\n</dt>\n<dd>\nSpecifies whether FP exceptions are enabled. This affects how FP instructions are scheduled for some processors. The default is that FP exceptions are enabled. <p>For instance, on the SB-1, if FP exceptions are disabled, and we are emitting 64-bit code, then we can use both FP pipes. Otherwise, we can only use one FP pipe. </p>\n</dd>\n<dt>\n<code>-mvr4130-align</code><dt><code>-mno-vr4130-align</code></dt>\n</dt>\n<dd>\nThe VR4130 pipeline is two-way superscalar, but can only issue two instructions together if the first one is 8-byte aligned. When this option is enabled, GCC aligns pairs of instructions that it thinks should execute in parallel. <p>This option only has an effect when optimizing for the VR4130. It normally makes code faster, but at the expense of making it bigger. It is enabled by default at optimization level <code>-O3</code>. </p>\n</dd>\n<dt>\n<code>-msynci</code><dt><code>-mno-synci</code></dt>\n</dt>\n<dd>\nEnable (disable) generation of <code>synci</code> instructions on architectures that support it. The <code>synci</code> instructions (if enabled) are generated when <code>__builtin___clear_cache()</code> is compiled. <p>This option defaults to <code>-mno-synci</code>, but the default can be overridden by configuring with <code>--with-synci</code>. </p>\n<p>When compiling code for single processor systems, it is generally safe to use <code>synci</code>. However, on many multi-core (SMP) systems, it does not invalidate the instruction caches on all cores and may lead to undefined behavior. </p>\n</dd>\n<dt>\n<code>-mrelax-pic-calls</code><dt><code>-mno-relax-pic-calls</code></dt>\n</dt>\n<dd>\nTry to turn PIC calls that are normally dispatched via register <code>$25</code> into direct calls. This is only possible if the linker can resolve the destination at link-time and if the destination is within range for a direct call. <p><code>-mrelax-pic-calls</code> is the default if GCC was configured to use an assembler and a linker that support the <code>.reloc</code> assembly directive and <code>-mexplicit-relocs</code> is in effect. With <code>-mno-explicit-relocs</code>, this optimization can be performed by the assembler and the linker alone without help from the compiler. </p>\n</dd>\n<dt>\n<code>-mmcount-ra-address</code><dt><code>-mno-mcount-ra-address</code></dt>\n</dt>\n<dd>\nEmit (do not emit) code that allows <code>_mcount</code> to modify the calling function's return address. When enabled, this option extends the usual <code>_mcount</code> interface with a new <var>ra-address</var> parameter, which has type <code>intptr_t *</code> and is passed in register <code>$12</code>. <code>_mcount</code> can then modify the return address by doing both of the following: <ul> <li>Returning the new address in register <code>$31</code>. </li>\n<li>Storing the new address in <code>*</code><var>ra-address</var>, if <var>ra-address</var> is nonnull. </li>\n</ul> <p>The default is <code>-mno-mcount-ra-address</code>. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS-Options.html</a>\n  </p>\n</div>\n","mmix-options":"<h1 class=\"subsection\" id=\"MMIX-Options\">3.17.28 MMIX Options</h1> <p> These options are defined for the MMIX: </p>\n<dl> <dt>\n<code>-mlibfuncs</code><dt><code>-mno-libfuncs</code></dt>\n</dt>\n<dd>\nSpecify that intrinsic library functions are being compiled, passing all values in registers, no matter the size. </dd>\n<dt>\n<code>-mepsilon</code><dt><code>-mno-epsilon</code></dt>\n</dt>\n<dd>\nGenerate floating-point comparison instructions that compare with respect to the <code>rE</code> epsilon register. </dd>\n<dt>\n<code>-mabi=mmixware</code><dt><code>-mabi=gnu</code></dt>\n</dt>\n<dd>\nGenerate code that passes function parameters and return values that (in the called function) are seen as registers <code>$0</code> and up, as opposed to the GNU ABI which uses global registers <code>$231</code> and up. </dd>\n<dt>\n<code>-mzero-extend</code><dt><code>-mno-zero-extend</code></dt>\n</dt>\n<dd>\nWhen reading data from memory in sizes shorter than 64 bits, use (do not use) zero-extending load instructions by default, rather than sign-extending ones. </dd>\n<dt>\n<code>-mknuthdiv</code><dt><code>-mno-knuthdiv</code></dt>\n</dt>\n<dd>\nMake the result of a division yielding a remainder have the same sign as the divisor. With the default, <code>-mno-knuthdiv</code>, the sign of the remainder follows the sign of the dividend. Both methods are arithmetically valid, the latter being almost exclusively used. </dd>\n<dt>\n<code>-mtoplevel-symbols</code><dt><code>-mno-toplevel-symbols</code></dt>\n</dt>\n<dd>\nPrepend (do not prepend) a ‘<code>:</code>’ to all global symbols, so the assembly code can be used with the <code>PREFIX</code> assembly directive. </dd>\n<dt><code>-melf</code></dt>\n<dd>\nGenerate an executable in the ELF format, rather than the default ‘<code>mmo</code>’ format used by the <code>mmix</code> simulator. </dd>\n<dt>\n<code>-mbranch-predict</code><dt><code>-mno-branch-predict</code></dt>\n</dt>\n<dd>\nUse (do not use) the probable-branch instructions, when static branch prediction indicates a probable branch. </dd>\n<dt>\n<code>-mbase-addresses</code><dt><code>-mno-base-addresses</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) code that uses <em>base addresses</em>. Using a base address automatically generates a request (handled by the assembler and the linker) for a constant to be set up in a global register. The register is used for one or more base address requests within the range 0 to 255 from the value held in the register. The generally leads to short and fast code, but the number of different data items that can be addressed is limited. This means that a program that uses lots of static data may require <code>-mno-base-addresses</code>. </dd>\n<dt>\n<code>-msingle-exit</code><dt><code>-mno-single-exit</code></dt>\n</dt>\n<dd>\nForce (do not force) generated code to have a single exit point in each function. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MMIX-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MMIX-Options.html</a>\n  </p>\n</div>\n","mn10300-options":"<h1 class=\"subsection\" id=\"MN10300-Options\">3.17.29 MN10300 Options</h1> <p> These <code>-m</code> options are defined for Matsushita MN10300 architectures: </p>\n<dl> <dt><code>-mmult-bug</code></dt>\n<dd>\nGenerate code to avoid bugs in the multiply instructions for the MN10300 processors. This is the default. </dd>\n<dt><code>-mno-mult-bug</code></dt>\n<dd>\nDo not generate code to avoid bugs in the multiply instructions for the MN10300 processors. </dd>\n<dt><code>-mam33</code></dt>\n<dd>\nGenerate code using features specific to the AM33 processor. </dd>\n<dt><code>-mno-am33</code></dt>\n<dd>\nDo not generate code using features specific to the AM33 processor. This is the default. </dd>\n<dt><code>-mam33-2</code></dt>\n<dd>\nGenerate code using features specific to the AM33/2.0 processor. </dd>\n<dt><code>-mam34</code></dt>\n<dd>\nGenerate code using features specific to the AM34 processor. </dd>\n<dt>\n<code>-mtune=</code><var>cpu-type</var>\n</dt>\n<dd>\nUse the timing characteristics of the indicated CPU type when scheduling instructions. This does not change the targeted processor type. The CPU type must be one of ‘<code>mn10300</code>’, ‘<code>am33</code>’, ‘<code>am33-2</code>’ or ‘<code>am34</code>’. </dd>\n<dt><code>-mreturn-pointer-on-d0</code></dt>\n<dd>\nWhen generating a function that returns a pointer, return the pointer in both <code>a0</code> and <code>d0</code>. Otherwise, the pointer is returned only in <code>a0</code>, and attempts to call such functions without a prototype result in errors. Note that this option is on by default; use <code>-mno-return-pointer-on-d0</code> to disable it. </dd>\n<dt><code>-mno-crt0</code></dt>\n<dd>\nDo not link in the C run-time initialization object file. </dd>\n<dt><code>-mrelax</code></dt>\n<dd>\nIndicate to the linker that it should perform a relaxation optimization pass to shorten branches, calls and absolute memory addresses. This option only has an effect when used on the command line for the final link step. <p>This option makes symbolic debugging impossible. </p>\n</dd>\n<dt><code>-mliw</code></dt>\n<dd>\nAllow the compiler to generate <em>Long Instruction Word</em> instructions if the target is the ‘<code>AM33</code>’ or later. This is the default. This option defines the preprocessor macro ‘<code>__LIW__</code>’. </dd>\n<dt><code>-mnoliw</code></dt>\n<dd>\nDo not allow the compiler to generate <em>Long Instruction Word</em> instructions. This option defines the preprocessor macro ‘<code>__NO_LIW__</code>’. </dd>\n<dt><code>-msetlb</code></dt>\n<dd>\nAllow the compiler to generate the <em>SETLB</em> and <em>Lcc</em> instructions if the target is the ‘<code>AM33</code>’ or later. This is the default. This option defines the preprocessor macro ‘<code>__SETLB__</code>’. </dd>\n<dt><code>-mnosetlb</code></dt>\n<dd>\nDo not allow the compiler to generate <em>SETLB</em> or <em>Lcc</em> instructions. This option defines the preprocessor macro ‘<code>__NO_SETLB__</code>’. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MN10300-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MN10300-Options.html</a>\n  </p>\n</div>\n","moxie-options":"<h1 class=\"subsection\" id=\"Moxie-Options\">3.17.30 Moxie Options</h1> \n<dl> <dt><code>-meb</code></dt>\n<dd>\nGenerate big-endian code. This is the default for ‘<code>moxie-*-*</code>’ configurations. </dd>\n<dt><code>-mel</code></dt>\n<dd>\nGenerate little-endian code. </dd>\n<dt><code>-mno-crt0</code></dt>\n<dd>\nDo not link in the C run-time initialization object file. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Moxie-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Moxie-Options.html</a>\n  </p>\n</div>\n","msp430-options":"<h1 class=\"subsection\" id=\"MSP430-Options\">3.17.31 MSP430 Options</h1> <p> These options are defined for the MSP430: </p>\n<dl> <dt><code>-masm-hex</code></dt>\n<dd>\nForce assembly output to always use hex constants. Normally such constants are signed decimals, but this option is available for testsuite and/or aesthetic purposes. </dd>\n<dt><code>-mmcu=</code></dt>\n<dd>\nSelect the MCU to target. This is used to create a C preprocessor symbol based upon the MCU name, converted to upper case and pre- and post- fixed with <code>__</code>. This in turn will be used by the <code>msp430.h</code> header file to select an MCU specific supplimentary header file. <p>The option also sets the ISA to use. If the MCU name is one that is known to only support the 430 ISA then that is selected, otherwise the 430X ISA is selected. A generic MCU name of <code>msp430</code> can also be used to select the 430 ISA. Similarly the generic <code>msp430x</code> MCU name will select the 430X ISA. </p>\n<p>In addition an MCU specific linker script will be added to the linker command line. The script's name is the name of the MCU with <code>.ld</code> appended. Thus specifying <code>-mmcu=xxx</code> on the gcc command line will define the C preprocessor symbol <code>__XXX__</code> and cause the linker to search for a script called <code>xxx.ld</code>. </p>\n<p>This option is also passed on to the assembler. </p>\n</dd>\n<dt><code>-mcpu=</code></dt>\n<dd>\nSpecifies the ISA to use. Accepted values are <code>msp430</code>, <code>msp430x</code> and <code>msp430xv2</code>. This option is deprecated. The <code>-mmcu=</code> option should be used to select the ISA. </dd>\n<dt><code>-msim</code></dt>\n<dd>\nLink to the simulator runtime libraries and linker script. Overrides any scripts that would be selected by the <code>-mmcu=</code> option. </dd>\n<dt><code>-mlarge</code></dt>\n<dd>\nUse large-model addressing (20-bit pointers, 32-bit <code>size_t</code>). </dd>\n<dt><code>-msmall</code></dt>\n<dd>\nUse small-model addressing (16-bit pointers, 16-bit <code>size_t</code>). </dd>\n<dt><code>-mrelax</code></dt>\n<dd>\nThis option is passed to the assembler and linker, and allows the linker to perform certain optimizations that cannot be done until the final link. </dd>\n<dt><code>mhwmult=</code></dt>\n<dd>\nDescribes the type of hardware multiply supported by the target. Accepted values are <code>none</code> for no hardware multiply, <code>16bit</code> for the original 16-bit-only multiply supported by early MCUs. <code>32bit</code> for the 16/32-bit multiply supported by later MCUs and <code>f5series</code> for the 16/32-bit multiply supported by F5-series MCUs. A value of <code>auto</code> can also be given. This tells GCC to deduce the hardware multiply support based upon the MCU name provided by the <code>-mmcu</code> option. If no <code>-mmcu</code> option is specified then <code>32bit</code> hardware multiply support is assumed. <code>auto</code> is the default setting. <p>Hardware multiplies are normally performed by calling a library routine. This saves space in the generated code. When compiling at <code>-O3</code> or higher however the hardware multiplier is invoked inline. This makes for bigger, but faster code. </p>\n<p>The hardware multiply routines disable interrupts whilst running and restore the previous interrupt state when they finish. This makes them safe to use inside interrupt handlers as well as in normal code. </p>\n</dd>\n<dt><code>-minrt</code></dt>\n<dd>\nEnable the use of a minimum runtime environment - no static initializers or constructors. This is intended for memory-constrained devices. The compiler will include special symbols in some objects that tell the linker and runtime which code fragments are required. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MSP430-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MSP430-Options.html</a>\n  </p>\n</div>\n","nds32-options":"<h1 class=\"subsection\" id=\"NDS32-Options\">3.17.32 NDS32 Options</h1> <p> These options are defined for NDS32 implementations: </p>\n<dl> <dt><code>-mbig-endian</code></dt>\n<dd>\nGenerate code in big-endian mode. </dd>\n<dt><code>-mlittle-endian</code></dt>\n<dd>\nGenerate code in little-endian mode. </dd>\n<dt><code>-mreduced-regs</code></dt>\n<dd>\nUse reduced-set registers for register allocation. </dd>\n<dt><code>-mfull-regs</code></dt>\n<dd>\nUse full-set registers for register allocation. </dd>\n<dt><code>-mcmov</code></dt>\n<dd>\nGenerate conditional move instructions. </dd>\n<dt><code>-mno-cmov</code></dt>\n<dd>\nDo not generate conditional move instructions. </dd>\n<dt><code>-mperf-ext</code></dt>\n<dd>\nGenerate performance extension instructions. </dd>\n<dt><code>-mno-perf-ext</code></dt>\n<dd>\nDo not generate performance extension instructions. </dd>\n<dt><code>-mv3push</code></dt>\n<dd>\nGenerate v3 push25/pop25 instructions. </dd>\n<dt><code>-mno-v3push</code></dt>\n<dd>\nDo not generate v3 push25/pop25 instructions. </dd>\n<dt><code>-m16-bit</code></dt>\n<dd>\nGenerate 16-bit instructions. </dd>\n<dt><code>-mno-16-bit</code></dt>\n<dd>\nDo not generate 16-bit instructions. </dd>\n<dt><code>-mgp-direct</code></dt>\n<dd>\nGenerate GP base instructions directly. </dd>\n<dt><code>-mno-gp-direct</code></dt>\n<dd>\nDo no generate GP base instructions directly. </dd>\n<dt>\n<code>-misr-vector-size=</code><var>num</var>\n</dt>\n<dd>\nSpecify the size of each interrupt vector, which must be 4 or 16. </dd>\n<dt>\n<code>-mcache-block-size=</code><var>num</var>\n</dt>\n<dd>\nSpecify the size of each cache block, which must be a power of 2 between 4 and 512. </dd>\n<dt>\n<code>-march=</code><var>arch</var>\n</dt>\n<dd>\nSpecify the name of the target architecture. </dd>\n<dt><code>-mforce-fp-as-gp</code></dt>\n<dd>\nPrevent $fp being allocated during register allocation so that compiler is able to force performing fp-as-gp optimization. </dd>\n<dt><code>-mforbid-fp-as-gp</code></dt>\n<dd>\nForbid using $fp to access static and global variables. This option strictly forbids fp-as-gp optimization regardless of <code>-mforce-fp-as-gp</code>. </dd>\n<dt><code>-mex9</code></dt>\n<dd>\nUse special directives to guide linker doing ex9 optimization. </dd>\n<dt><code>-mctor-dtor</code></dt>\n<dd>\nEnable constructor/destructor feature. </dd>\n<dt><code>-mrelax</code></dt>\n<dd>\nGuide linker to relax instructions. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/NDS32-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/NDS32-Options.html</a>\n  </p>\n</div>\n","nios-ii-options":"<h1 class=\"subsection\" id=\"Nios-II-Options\">3.17.33 Nios II Options</h1> <p> These are the options defined for the Altera Nios II processor. </p>\n<dl> <dt>\n<code>-G </code><var>num</var>\n</dt>\n<dd>\nPut global and static objects less than or equal to <var>num</var> bytes into the small data or BSS sections instead of the normal data or BSS sections. The default value of <var>num</var> is 8. </dd>\n<dt>\n<code>-mgpopt</code><dt><code>-mno-gpopt</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) GP-relative accesses for objects in the small data or BSS sections. The default is <code>-mgpopt</code> except when <code>-fpic</code> or <code>-fPIC</code> is specified to generate position-independent code. Note that the Nios II ABI does not permit GP-relative accesses from shared libraries. <p>You may need to specify <code>-mno-gpopt</code> explicitly when building programs that include large amounts of small data, including large GOT data sections. In this case, the 16-bit offset for GP-relative addressing may not be large enough to allow access to the entire small data section. </p>\n</dd>\n<dt>\n<code>-mel</code><dt><code>-meb</code></dt>\n</dt>\n<dd>\nGenerate little-endian (default) or big-endian (experimental) code, respectively. </dd>\n<dt>\n<code>-mbypass-cache</code><dt><code>-mno-bypass-cache</code></dt>\n</dt>\n<dd>\nForce all load and store instructions to always bypass cache by using I/O variants of the instructions. The default is not to bypass the cache. </dd>\n<dt>\n<code>-mno-cache-volatile</code><dt><code>-mcache-volatile</code></dt>\n</dt>\n<dd>\nVolatile memory access bypass the cache using the I/O variants of the load and store instructions. The default is not to bypass the cache. </dd>\n<dt>\n<code>-mno-fast-sw-div</code><dt><code>-mfast-sw-div</code></dt>\n</dt>\n<dd>\nDo not use table-based fast divide for small numbers. The default is to use the fast divide at <code>-O3</code> and above. </dd>\n<dt>\n<code>-mno-hw-mul</code><dt>\n<code>-mhw-mul</code><dt>\n<code>-mno-hw-mulx</code><dt>\n<code>-mhw-mulx</code><dt>\n<code>-mno-hw-div</code><dt><code>-mhw-div</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nEnable or disable emitting <code>mul</code>, <code>mulx</code> and <code>div</code> family of instructions by the compiler. The default is to emit <code>mul</code> and not emit <code>div</code> and <code>mulx</code>. </dd>\n<dt>\n<code>-mcustom-</code><var>insn</var><code>=</code><var>N</var><dt>\n<code>-mno-custom-</code><var>insn</var>\n</dt>\n</dt>\n<dd>\nEach <samp><span class=\"option\">-mcustom-</span><var>insn</var><span class=\"option\">=</span><var>N</var></samp> option enables use of a custom instruction with encoding <var>N</var> when generating code that uses <var>insn</var>. For example, <code>-mcustom-fadds=253</code> generates custom instruction 253 for single-precision floating-point add operations instead of the default behavior of using a library call. <p>The following values of <var>insn</var> are supported. Except as otherwise noted, floating-point operations are expected to be implemented with normal IEEE 754 semantics and correspond directly to the C operators or the equivalent GCC built-in functions (see <a href=\"other-builtins#Other-Builtins\">Other Builtins</a>). </p>\n<p>Single-precision floating point: </p>\n<dl> <dt>‘<code>fadds</code>’, ‘<code>fsubs</code>’, ‘<code>fdivs</code>’, ‘<code>fmuls</code>’</dt>\n<dd>Binary arithmetic operations. </dd>\n<dt>‘<code>fnegs</code>’</dt>\n<dd>Unary negation. </dd>\n<dt>‘<code>fabss</code>’</dt>\n<dd>Unary absolute value. </dd>\n<dt>‘<code>fcmpeqs</code>’, ‘<code>fcmpges</code>’, ‘<code>fcmpgts</code>’, ‘<code>fcmples</code>’, ‘<code>fcmplts</code>’, ‘<code>fcmpnes</code>’</dt>\n<dd>Comparison operations. </dd>\n<dt>‘<code>fmins</code>’, ‘<code>fmaxs</code>’</dt>\n<dd>Floating-point minimum and maximum. These instructions are only generated if <code>-ffinite-math-only</code> is specified. </dd>\n<dt>‘<code>fsqrts</code>’</dt>\n<dd>Unary square root operation. </dd>\n<dt>‘<code>fcoss</code>’, ‘<code>fsins</code>’, ‘<code>ftans</code>’, ‘<code>fatans</code>’, ‘<code>fexps</code>’, ‘<code>flogs</code>’</dt>\n<dd>Floating-point trigonometric and exponential functions. These instructions are only generated if <code>-funsafe-math-optimizations</code> is also specified. </dd>\n</dl> <p>Double-precision floating point: </p>\n<dl> <dt>‘<code>faddd</code>’, ‘<code>fsubd</code>’, ‘<code>fdivd</code>’, ‘<code>fmuld</code>’</dt>\n<dd>Binary arithmetic operations. </dd>\n<dt>‘<code>fnegd</code>’</dt>\n<dd>Unary negation. </dd>\n<dt>‘<code>fabsd</code>’</dt>\n<dd>Unary absolute value. </dd>\n<dt>‘<code>fcmpeqd</code>’, ‘<code>fcmpged</code>’, ‘<code>fcmpgtd</code>’, ‘<code>fcmpled</code>’, ‘<code>fcmpltd</code>’, ‘<code>fcmpned</code>’</dt>\n<dd>Comparison operations. </dd>\n<dt>‘<code>fmind</code>’, ‘<code>fmaxd</code>’</dt>\n<dd>Double-precision minimum and maximum. These instructions are only generated if <code>-ffinite-math-only</code> is specified. </dd>\n<dt>‘<code>fsqrtd</code>’</dt>\n<dd>Unary square root operation. </dd>\n<dt>‘<code>fcosd</code>’, ‘<code>fsind</code>’, ‘<code>ftand</code>’, ‘<code>fatand</code>’, ‘<code>fexpd</code>’, ‘<code>flogd</code>’</dt>\n<dd>Double-precision trigonometric and exponential functions. These instructions are only generated if <code>-funsafe-math-optimizations</code> is also specified. </dd>\n</dl> <p>Conversions: </p>\n<dl> <dt>‘<code>fextsd</code>’</dt>\n<dd>Conversion from single precision to double precision. </dd>\n<dt>‘<code>ftruncds</code>’</dt>\n<dd>Conversion from double precision to single precision. </dd>\n<dt>‘<code>fixsi</code>’, ‘<code>fixsu</code>’, ‘<code>fixdi</code>’, ‘<code>fixdu</code>’</dt>\n<dd>Conversion from floating point to signed or unsigned integer types, with truncation towards zero. </dd>\n<dt>‘<code>floatis</code>’, ‘<code>floatus</code>’, ‘<code>floatid</code>’, ‘<code>floatud</code>’</dt>\n<dd>Conversion from signed or unsigned integer types to floating-point types. </dd>\n</dl> <p>In addition, all of the following transfer instructions for internal registers X and Y must be provided to use any of the double-precision floating-point instructions. Custom instructions taking two double-precision source operands expect the first operand in the 64-bit register X. The other operand (or only operand of a unary operation) is given to the custom arithmetic instruction with the least significant half in source register <var>src1</var> and the most significant half in <var>src2</var>. A custom instruction that returns a double-precision result returns the most significant 32 bits in the destination register and the other half in 32-bit register Y. GCC automatically generates the necessary code sequences to write register X and/or read register Y when double-precision floating-point instructions are used. </p>\n<dl> <dt>‘<code>fwrx</code>’</dt>\n<dd>Write <var>src1</var> into the least significant half of X and <var>src2</var> into the most significant half of X. </dd>\n<dt>‘<code>fwry</code>’</dt>\n<dd>Write <var>src1</var> into Y. </dd>\n<dt>‘<code>frdxhi</code>’, ‘<code>frdxlo</code>’</dt>\n<dd>Read the most or least (respectively) significant half of X and store it in <var>dest</var>. </dd>\n<dt>‘<code>frdy</code>’</dt>\n<dd>Read the value of Y and store it into <var>dest</var>. </dd>\n</dl> <p>Note that you can gain more local control over generation of Nios II custom instructions by using the <code>target(\"custom-</code><var>insn</var><code>=</code><var>N</var><code>\")</code> and <code>target(\"no-custom-</code><var>insn</var><code>\")</code> function attributes (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>) or pragmas (see <a href=\"function-specific-option-pragmas#Function-Specific-Option-Pragmas\">Function Specific Option Pragmas</a>). </p>\n</dd>\n<dt>\n<code>-mcustom-fpu-cfg=</code><var>name</var>\n</dt>\n<dd>\n This option enables a predefined, named set of custom instruction encodings (see <samp><span class=\"option\">-mcustom-</span><var>insn</var></samp> above). Currently, the following sets are defined: <p><code>-mcustom-fpu-cfg=60-1</code> is equivalent to: </p>\n<pre class=\"smallexample\">-mcustom-fmuls=252 \n-mcustom-fadds=253 \n-mcustom-fsubs=254 \n-fsingle-precision-constant</pre> <p><code>-mcustom-fpu-cfg=60-2</code> is equivalent to: </p>\n<pre class=\"smallexample\">-mcustom-fmuls=252 \n-mcustom-fadds=253 \n-mcustom-fsubs=254 \n-mcustom-fdivs=255 \n-fsingle-precision-constant</pre> <p><code>-mcustom-fpu-cfg=72-3</code> is equivalent to: </p>\n<pre class=\"smallexample\">-mcustom-floatus=243 \n-mcustom-fixsi=244 \n-mcustom-floatis=245 \n-mcustom-fcmpgts=246 \n-mcustom-fcmples=249 \n-mcustom-fcmpeqs=250 \n-mcustom-fcmpnes=251 \n-mcustom-fmuls=252 \n-mcustom-fadds=253 \n-mcustom-fsubs=254 \n-mcustom-fdivs=255 \n-fsingle-precision-constant</pre> <p>Custom instruction assignments given by individual <samp><span class=\"option\">-mcustom-</span><var>insn</var><span class=\"option\">=</span></samp> options override those given by <code>-mcustom-fpu-cfg=</code>, regardless of the order of the options on the command line. </p>\n<p>Note that you can gain more local control over selection of a FPU configuration by using the <code>target(\"custom-fpu-cfg=</code><var>name</var><code>\")</code> function attribute (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>) or pragma (see <a href=\"function-specific-option-pragmas#Function-Specific-Option-Pragmas\">Function Specific Option Pragmas</a>). </p>\n</dd>\n</dl> <p>These additional ‘<code>-m</code>’ options are available for the Altera Nios II ELF (bare-metal) target: </p>\n<dl> <dt><code>-mhal</code></dt>\n<dd>\nLink with HAL BSP. This suppresses linking with the GCC-provided C runtime startup and termination code, and is typically used in conjunction with <code>-msys-crt0=</code> to specify the location of the alternate startup code provided by the HAL BSP. </dd>\n<dt><code>-msmallc</code></dt>\n<dd>\nLink with a limited version of the C library, <code>-lsmallc</code>, rather than Newlib. </dd>\n<dt>\n<code>-msys-crt0=</code><var>startfile</var>\n</dt>\n<dd>\n<var>startfile</var> is the file name of the startfile (crt0) to use when linking. This option is only useful in conjunction with <code>-mhal</code>. </dd>\n<dt>\n<code>-msys-lib=</code><var>systemlib</var>\n</dt>\n<dd>\n<var>systemlib</var> is the library name of the library that provides low-level system calls required by the C library, e.g. <code>read</code> and <code>write</code>. This option is typically used to link with a library provided by a HAL BSP. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Nios-II-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Nios-II-Options.html</a>\n  </p>\n</div>\n","pdp_002d11-options":"<h1 class=\"subsection\" id=\"PDP_002d11-Options\">3.17.34 PDP-11 Options</h1> <p> These options are defined for the PDP-11: </p>\n<dl> <dt><code>-mfpu</code></dt>\n<dd>\nUse hardware FPP floating point. This is the default. (FIS floating point on the PDP-11/40 is not supported.) </dd>\n<dt><code>-msoft-float</code></dt>\n<dd>\nDo not use hardware floating point. </dd>\n<dt><code>-mac0</code></dt>\n<dd>\nReturn floating-point results in ac0 (fr0 in Unix assembler syntax). </dd>\n<dt><code>-mno-ac0</code></dt>\n<dd>\nReturn floating-point results in memory. This is the default. </dd>\n<dt><code>-m40</code></dt>\n<dd>\nGenerate code for a PDP-11/40. </dd>\n<dt><code>-m45</code></dt>\n<dd>\nGenerate code for a PDP-11/45. This is the default. </dd>\n<dt><code>-m10</code></dt>\n<dd>\nGenerate code for a PDP-11/10. </dd>\n<dt><code>-mbcopy-builtin</code></dt>\n<dd>\nUse inline <code>movmemhi</code> patterns for copying memory. This is the default. </dd>\n<dt><code>-mbcopy</code></dt>\n<dd>\nDo not use inline <code>movmemhi</code> patterns for copying memory. </dd>\n<dt>\n<code>-mint16</code><dt><code>-mno-int32</code></dt>\n</dt>\n<dd>\nUse 16-bit <code>int</code>. This is the default. </dd>\n<dt>\n<code>-mint32</code><dt><code>-mno-int16</code></dt>\n</dt>\n<dd>\nUse 32-bit <code>int</code>. </dd>\n<dt>\n<code>-mfloat64</code><dt><code>-mno-float32</code></dt>\n</dt>\n<dd>\nUse 64-bit <code>float</code>. This is the default. </dd>\n<dt>\n<code>-mfloat32</code><dt><code>-mno-float64</code></dt>\n</dt>\n<dd>\nUse 32-bit <code>float</code>. </dd>\n<dt><code>-mabshi</code></dt>\n<dd>\nUse <code>abshi2</code> pattern. This is the default. </dd>\n<dt><code>-mno-abshi</code></dt>\n<dd>\nDo not use <code>abshi2</code> pattern. </dd>\n<dt><code>-mbranch-expensive</code></dt>\n<dd>\nPretend that branches are expensive. This is for experimenting with code generation only. </dd>\n<dt><code>-mbranch-cheap</code></dt>\n<dd>\nDo not pretend that branches are expensive. This is the default. </dd>\n<dt><code>-munix-asm</code></dt>\n<dd>\nUse Unix assembler syntax. This is the default when configured for ‘<code>pdp11-*-bsd</code>’. </dd>\n<dt><code>-mdec-asm</code></dt>\n<dd>\nUse DEC assembler syntax. This is the default when configured for any PDP-11 target other than ‘<code>pdp11-*-bsd</code>’. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PDP_002d11-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PDP_002d11-Options.html</a>\n  </p>\n</div>\n","picochip-options":"<h1 class=\"subsection\" id=\"picoChip-Options\">3.17.35 picoChip Options</h1> <p> These ‘<code>-m</code>’ options are defined for picoChip implementations: </p>\n<dl> <dt>\n<code>-mae=</code><var>ae_type</var>\n</dt>\n<dd>\nSet the instruction set, register set, and instruction scheduling parameters for array element type <var>ae_type</var>. Supported values for <var>ae_type</var> are ‘<code>ANY</code>’, ‘<code>MUL</code>’, and ‘<code>MAC</code>’. <p><code>-mae=ANY</code> selects a completely generic AE type. Code generated with this option runs on any of the other AE types. The code is not as efficient as it would be if compiled for a specific AE type, and some types of operation (e.g., multiplication) do not work properly on all types of AE. </p>\n<p><code>-mae=MUL</code> selects a MUL AE type. This is the most useful AE type for compiled code, and is the default. </p>\n<p><code>-mae=MAC</code> selects a DSP-style MAC AE. Code compiled with this option may suffer from poor performance of byte (char) manipulation, since the DSP AE does not provide hardware support for byte load/stores. </p>\n</dd>\n<dt><code>-msymbol-as-address</code></dt>\n<dd>Enable the compiler to directly use a symbol name as an address in a load/store instruction, without first loading it into a register. Typically, the use of this option generates larger programs, which run faster than when the option isn't used. However, the results vary from program to program, so it is left as a user option, rather than being permanently enabled. </dd>\n<dt><code>-mno-inefficient-warnings</code></dt>\n<dd>Disables warnings about the generation of inefficient code. These warnings can be generated, for example, when compiling code that performs byte-level memory operations on the MAC AE type. The MAC AE has no hardware support for byte-level memory operations, so all byte load/stores must be synthesized from word load/store operations. This is inefficient and a warning is generated to indicate that you should rewrite the code to avoid byte operations, or to target an AE type that has the necessary hardware support. This option disables these warnings. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/picoChip-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/picoChip-Options.html</a>\n  </p>\n</div>\n","powerpc-options":"<h1 class=\"subsection\" id=\"PowerPC-Options\">3.17.36 PowerPC Options</h1> <p> These are listed under See <a href=\"rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options\">RS/6000 and PowerPC Options</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PowerPC-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PowerPC-Options.html</a>\n  </p>\n</div>\n","rl78-options":"<h1 class=\"subsection\" id=\"RL78-Options\">3.17.37 RL78 Options</h1> \n<dl> <dt><code>-msim</code></dt>\n<dd>\nLinks in additional target libraries to support operation within a simulator. </dd>\n<dt>\n<code>-mmul=none</code><dt>\n<code>-mmul=g13</code><dt><code>-mmul=rl78</code></dt>\n</dt>\n</dt>\n<dd>\nSpecifies the type of hardware multiplication support to be used. The default is <code>none</code>, which uses software multiplication functions. The <code>g13</code> option is for the hardware multiply/divide peripheral only on the RL78/G13 targets. The <code>rl78</code> option is for the standard hardware multiplication defined in the RL78 software manual. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RL78-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RL78-Options.html</a>\n  </p>\n</div>\n","rs_002f6000-and-powerpc-options":"<h1 class=\"subsection\" id=\"RS_002f6000-and-PowerPC-Options\">3.17.38 IBM RS/6000 and PowerPC Options</h1> <p> These ‘<code>-m</code>’ options are defined for the IBM RS/6000 and PowerPC: </p>\n<dl> <dt>\n<code>-mpowerpc-gpopt</code><dt>\n<code>-mno-powerpc-gpopt</code><dt>\n<code>-mpowerpc-gfxopt</code><dt>\n<code>-mno-powerpc-gfxopt</code><dt>\n<code>-mpowerpc64</code><dt>\n<code>-mno-powerpc64</code><dt>\n<code>-mmfcrf</code><dt>\n<code>-mno-mfcrf</code><dt>\n<code>-mpopcntb</code><dt>\n<code>-mno-popcntb</code><dt>\n<code>-mpopcntd</code><dt>\n<code>-mno-popcntd</code><dt>\n<code>-mfprnd</code><dt>\n<code>-mno-fprnd</code><dt>\n<code>-mcmpb</code><dt>\n<code>-mno-cmpb</code><dt>\n<code>-mmfpgpr</code><dt>\n<code>-mno-mfpgpr</code><dt>\n<code>-mhard-dfp</code><dt><code>-mno-hard-dfp</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nYou use these options to specify which instructions are available on the processor you are using. The default value of these options is determined when configuring GCC. Specifying the <samp><span class=\"option\">-mcpu=</span><var>cpu_type</var></samp> overrides the specification of these options. We recommend you use the <samp><span class=\"option\">-mcpu=</span><var>cpu_type</var></samp> option rather than the options listed above. <p>Specifying <code>-mpowerpc-gpopt</code> allows GCC to use the optional PowerPC architecture instructions in the General Purpose group, including floating-point square root. Specifying <code>-mpowerpc-gfxopt</code> allows GCC to use the optional PowerPC architecture instructions in the Graphics group, including floating-point select. </p>\n<p>The <code>-mmfcrf</code> option allows GCC to generate the move from condition register field instruction implemented on the POWER4 processor and other processors that support the PowerPC V2.01 architecture. The <code>-mpopcntb</code> option allows GCC to generate the popcount and double-precision FP reciprocal estimate instruction implemented on the POWER5 processor and other processors that support the PowerPC V2.02 architecture. The <code>-mpopcntd</code> option allows GCC to generate the popcount instruction implemented on the POWER7 processor and other processors that support the PowerPC V2.06 architecture. The <code>-mfprnd</code> option allows GCC to generate the FP round to integer instructions implemented on the POWER5+ processor and other processors that support the PowerPC V2.03 architecture. The <code>-mcmpb</code> option allows GCC to generate the compare bytes instruction implemented on the POWER6 processor and other processors that support the PowerPC V2.05 architecture. The <code>-mmfpgpr</code> option allows GCC to generate the FP move to/from general-purpose register instructions implemented on the POWER6X processor and other processors that support the extended PowerPC V2.05 architecture. The <code>-mhard-dfp</code> option allows GCC to generate the decimal floating-point instructions implemented on some POWER processors. </p>\n<p>The <code>-mpowerpc64</code> option allows GCC to generate the additional 64-bit instructions that are found in the full PowerPC64 architecture and to treat GPRs as 64-bit, doubleword quantities. GCC defaults to <code>-mno-powerpc64</code>. </p>\n</dd>\n<dt>\n<code>-mcpu=</code><var>cpu_type</var>\n</dt>\n<dd>\nSet architecture type, register usage, and instruction scheduling parameters for machine type <var>cpu_type</var>. Supported values for <var>cpu_type</var> are ‘<code>401</code>’, ‘<code>403</code>’, ‘<code>405</code>’, ‘<code>405fp</code>’, ‘<code>440</code>’, ‘<code>440fp</code>’, ‘<code>464</code>’, ‘<code>464fp</code>’, ‘<code>476</code>’, ‘<code>476fp</code>’, ‘<code>505</code>’, ‘<code>601</code>’, ‘<code>602</code>’, ‘<code>603</code>’, ‘<code>603e</code>’, ‘<code>604</code>’, ‘<code>604e</code>’, ‘<code>620</code>’, ‘<code>630</code>’, ‘<code>740</code>’, ‘<code>7400</code>’, ‘<code>7450</code>’, ‘<code>750</code>’, ‘<code>801</code>’, ‘<code>821</code>’, ‘<code>823</code>’, ‘<code>860</code>’, ‘<code>970</code>’, ‘<code>8540</code>’, ‘<code>a2</code>’, ‘<code>e300c2</code>’, ‘<code>e300c3</code>’, ‘<code>e500mc</code>’, ‘<code>e500mc64</code>’, ‘<code>e5500</code>’, ‘<code>e6500</code>’, ‘<code>ec603e</code>’, ‘<code>G3</code>’, ‘<code>G4</code>’, ‘<code>G5</code>’, ‘<code>titan</code>’, ‘<code>power3</code>’, ‘<code>power4</code>’, ‘<code>power5</code>’, ‘<code>power5+</code>’, ‘<code>power6</code>’, ‘<code>power6x</code>’, ‘<code>power7</code>’, ‘<code>power8</code>’, ‘<code>powerpc</code>’, ‘<code>powerpc64</code>’, ‘<code>powerpc64le</code>’, and ‘<code>rs64</code>’. <p><code>-mcpu=powerpc</code>, <code>-mcpu=powerpc64</code>, and <code>-mcpu=powerpc64le</code> specify pure 32-bit PowerPC (either endian), 64-bit big endian PowerPC and 64-bit little endian PowerPC architecture machine types, with an appropriate, generic processor model assumed for scheduling purposes. </p>\n<p>The other options specify a specific processor. Code generated under those options runs best on that processor, and may not run at all on others. </p>\n<p>The <code>-mcpu</code> options automatically enable or disable the following options: </p>\n<pre class=\"smallexample\">-maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple \n-mpopcntb -mpopcntd  -mpowerpc64 \n-mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float \n-msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr -mvsx \n-mcrypto -mdirect-move -mpower8-fusion -mpower8-vector \n-mquad-memory -mquad-memory-atomic</pre> <p>The particular options set for any particular CPU varies between compiler versions, depending on what setting seems to produce optimal code for that CPU; it doesn't necessarily reflect the actual hardware's capabilities. If you wish to set an individual option to a particular value, you may specify it after the <code>-mcpu</code> option, like <code>-mcpu=970 -mno-altivec</code>. </p>\n<p>On AIX, the <code>-maltivec</code> and <code>-mpowerpc64</code> options are not enabled or disabled by the <code>-mcpu</code> option at present because AIX does not have full support for these options. You may still enable or disable them individually if you're sure it'll work in your environment. </p>\n</dd>\n<dt>\n<code>-mtune=</code><var>cpu_type</var>\n</dt>\n<dd>\nSet the instruction scheduling parameters for machine type <var>cpu_type</var>, but do not set the architecture type or register usage, as <samp><span class=\"option\">-mcpu=</span><var>cpu_type</var></samp> does. The same values for <var>cpu_type</var> are used for <code>-mtune</code> as for <code>-mcpu</code>. If both are specified, the code generated uses the architecture and registers set by <code>-mcpu</code>, but the scheduling parameters set by <code>-mtune</code>. </dd>\n<dt><code>-mcmodel=small</code></dt>\n<dd>\nGenerate PowerPC64 code for the small model: The TOC is limited to 64k. </dd>\n<dt><code>-mcmodel=medium</code></dt>\n<dd>\nGenerate PowerPC64 code for the medium model: The TOC and other static data may be up to a total of 4G in size. </dd>\n<dt><code>-mcmodel=large</code></dt>\n<dd>\nGenerate PowerPC64 code for the large model: The TOC may be up to 4G in size. Other data and code is only limited by the 64-bit address space. </dd>\n<dt>\n<code>-maltivec</code><dt><code>-mno-altivec</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) AltiVec instructions, and also enable the use of built-in functions that allow more direct access to the AltiVec instruction set. You may also need to set <code>-mabi=altivec</code> to adjust the current ABI with AltiVec ABI enhancements. <p>When <code>-maltivec</code> is used, rather than <code>-maltivec=le</code> or <code>-maltivec=be</code>, the element order for Altivec intrinsics such as <code>vec_splat</code>, <code>vec_extract</code>, and <code>vec_insert</code> will match array element order corresponding to the endianness of the target. That is, element zero identifies the leftmost element in a vector register when targeting a big-endian platform, and identifies the rightmost element in a vector register when targeting a little-endian platform. </p>\n</dd>\n<dt><code>-maltivec=be</code></dt>\n<dd>\nGenerate Altivec instructions using big-endian element order, regardless of whether the target is big- or little-endian. This is the default when targeting a big-endian platform. <p>The element order is used to interpret element numbers in Altivec intrinsics such as <code>vec_splat</code>, <code>vec_extract</code>, and <code>vec_insert</code>. By default, these will match array element order corresponding to the endianness for the target. </p>\n</dd>\n<dt><code>-maltivec=le</code></dt>\n<dd>\nGenerate Altivec instructions using little-endian element order, regardless of whether the target is big- or little-endian. This is the default when targeting a little-endian platform. This option is currently ignored when targeting a big-endian platform. <p>The element order is used to interpret element numbers in Altivec intrinsics such as <code>vec_splat</code>, <code>vec_extract</code>, and <code>vec_insert</code>. By default, these will match array element order corresponding to the endianness for the target. </p>\n</dd>\n<dt>\n<code>-mvrsave</code><dt><code>-mno-vrsave</code></dt>\n</dt>\n<dd>\nGenerate VRSAVE instructions when generating AltiVec code. </dd>\n<dt><code>-mgen-cell-microcode</code></dt>\n<dd>\nGenerate Cell microcode instructions. </dd>\n<dt><code>-mwarn-cell-microcode</code></dt>\n<dd>\nWarn when a Cell microcode instruction is emitted. An example of a Cell microcode instruction is a variable shift. </dd>\n<dt><code>-msecure-plt</code></dt>\n<dd>\nGenerate code that allows <code>ld</code> and <code>ld.so</code> to build executables and shared libraries with non-executable <code>.plt</code> and <code>.got</code> sections. This is a PowerPC 32-bit SYSV ABI option. </dd>\n<dt><code>-mbss-plt</code></dt>\n<dd>\nGenerate code that uses a BSS <code>.plt</code> section that <code>ld.so</code> fills in, and requires <code>.plt</code> and <code>.got</code> sections that are both writable and executable. This is a PowerPC 32-bit SYSV ABI option. </dd>\n<dt>\n<code>-misel</code><dt><code>-mno-isel</code></dt>\n</dt>\n<dd>\nThis switch enables or disables the generation of ISEL instructions. </dd>\n<dt>\n<code>-misel=</code><var>yes/no</var>\n</dt>\n<dd>This switch has been deprecated. Use <code>-misel</code> and <code>-mno-isel</code> instead. </dd>\n<dt>\n<code>-mspe</code><dt><code>-mno-spe</code></dt>\n</dt>\n<dd>\nThis switch enables or disables the generation of SPE simd instructions. </dd>\n<dt>\n<code>-mpaired</code><dt><code>-mno-paired</code></dt>\n</dt>\n<dd>\nThis switch enables or disables the generation of PAIRED simd instructions. </dd>\n<dt>\n<code>-mspe=</code><var>yes/no</var>\n</dt>\n<dd>This option has been deprecated. Use <code>-mspe</code> and <code>-mno-spe</code> instead. </dd>\n<dt>\n<code>-mvsx</code><dt><code>-mno-vsx</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) vector/scalar (VSX) instructions, and also enable the use of built-in functions that allow more direct access to the VSX instruction set. </dd>\n<dt>\n<code>-mcrypto</code><dt><code>-mno-crypto</code></dt>\n</dt>\n<dd>\nEnable the use (disable) of the built-in functions that allow direct access to the cryptographic instructions that were added in version 2.07 of the PowerPC ISA. </dd>\n<dt>\n<code>-mdirect-move</code><dt><code>-mno-direct-move</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the instructions to move data between the general purpose registers and the vector/scalar (VSX) registers that were added in version 2.07 of the PowerPC ISA. </dd>\n<dt>\n<code>-mpower8-fusion</code><dt><code>-mno-power8-fusion</code></dt>\n</dt>\n<dd>\nGenerate code that keeps (does not keeps) some integer operations adjacent so that the instructions can be fused together on power8 and later processors. </dd>\n<dt>\n<code>-mpower8-vector</code><dt><code>-mno-power8-vector</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the vector and scalar instructions that were added in version 2.07 of the PowerPC ISA. Also enable the use of built-in functions that allow more direct access to the vector instructions. </dd>\n<dt>\n<code>-mquad-memory</code><dt><code>-mno-quad-memory</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the non-atomic quad word memory instructions. The <code>-mquad-memory</code> option requires use of 64-bit mode. </dd>\n<dt>\n<code>-mquad-memory-atomic</code><dt><code>-mno-quad-memory-atomic</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the atomic quad word memory instructions. The <code>-mquad-memory-atomic</code> option requires use of 64-bit mode. </dd>\n<dt>\n<code>-mfloat-gprs=</code><var>yes/single/double/no</var><dt><code>-mfloat-gprs</code></dt>\n</dt>\n<dd>\nThis switch enables or disables the generation of floating-point operations on the general-purpose registers for architectures that support it. <p>The argument <var>yes</var> or <var>single</var> enables the use of single-precision floating-point operations. </p>\n<p>The argument <var>double</var> enables the use of single and double-precision floating-point operations. </p>\n<p>The argument <var>no</var> disables floating-point operations on the general-purpose registers. </p>\n<p>This option is currently only available on the MPC854x. </p>\n</dd>\n<dt>\n<code>-m32</code><dt><code>-m64</code></dt>\n</dt>\n<dd>\nGenerate code for 32-bit or 64-bit environments of Darwin and SVR4 targets (including GNU/Linux). The 32-bit environment sets int, long and pointer to 32 bits and generates code that runs on any PowerPC variant. The 64-bit environment sets int to 32 bits and long and pointer to 64 bits, and generates code for PowerPC64, as for <code>-mpowerpc64</code>. </dd>\n<dt>\n<code>-mfull-toc</code><dt>\n<code>-mno-fp-in-toc</code><dt>\n<code>-mno-sum-in-toc</code><dt><code>-mminimal-toc</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>\nModify generation of the TOC (Table Of Contents), which is created for every executable file. The <code>-mfull-toc</code> option is selected by default. In that case, GCC allocates at least one TOC entry for each unique non-automatic variable reference in your program. GCC also places floating-point constants in the TOC. However, only 16,384 entries are available in the TOC. <p>If you receive a linker error message that saying you have overflowed the available TOC space, you can reduce the amount of TOC space used with the <code>-mno-fp-in-toc</code> and <code>-mno-sum-in-toc</code> options. <code>-mno-fp-in-toc</code> prevents GCC from putting floating-point constants in the TOC and <code>-mno-sum-in-toc</code> forces GCC to generate code to calculate the sum of an address and a constant at run time instead of putting that sum into the TOC. You may specify one or both of these options. Each causes GCC to produce very slightly slower and larger code at the expense of conserving TOC space. </p>\n<p>If you still run out of space in the TOC even when you specify both of these options, specify <code>-mminimal-toc</code> instead. This option causes GCC to make only one TOC entry for every file. When you specify this option, GCC produces code that is slower and larger but which uses extremely little TOC space. You may wish to use this option only on files that contain less frequently-executed code. </p>\n</dd>\n<dt>\n<code>-maix64</code><dt><code>-maix32</code></dt>\n</dt>\n<dd>\nEnable 64-bit AIX ABI and calling convention: 64-bit pointers, 64-bit <code>long</code> type, and the infrastructure needed to support them. Specifying <code>-maix64</code> implies <code>-mpowerpc64</code>, while <code>-maix32</code> disables the 64-bit ABI and implies <code>-mno-powerpc64</code>. GCC defaults to <code>-maix32</code>. </dd>\n<dt>\n<code>-mxl-compat</code><dt><code>-mno-xl-compat</code></dt>\n</dt>\n<dd>\nProduce code that conforms more closely to IBM XL compiler semantics when using AIX-compatible ABI. Pass floating-point arguments to prototyped functions beyond the register save area (RSA) on the stack in addition to argument FPRs. Do not assume that most significant double in 128-bit long double value is properly rounded when comparing values and converting to double. Use XL symbol names for long double support routines. <p>The AIX calling convention was extended but not initially documented to handle an obscure K&amp;R C case of calling a function that takes the address of its arguments with fewer arguments than declared. IBM XL compilers access floating-point arguments that do not fit in the RSA from the stack when a subroutine is compiled without optimization. Because always storing floating-point arguments on the stack is inefficient and rarely needed, this option is not enabled by default and only is necessary when calling subroutines compiled by IBM XL compilers without optimization. </p>\n</dd>\n<dt><code>-mpe</code></dt>\n<dd>\nSupport IBM RS/6000 SP Parallel Environment (PE). Link an application written to use message passing with special startup code to enable the application to run. The system must have PE installed in the standard location (<code>/usr/lpp/ppe.poe/</code>), or the <code>specs</code> file must be overridden with the <code>-specs=</code> option to specify the appropriate directory location. The Parallel Environment does not support threads, so the <code>-mpe</code> option and the <code>-pthread</code> option are incompatible. </dd>\n<dt>\n<code>-malign-natural</code><dt><code>-malign-power</code></dt>\n</dt>\n<dd>\nOn AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option <code>-malign-natural</code> overrides the ABI-defined alignment of larger types, such as floating-point doubles, on their natural size-based boundary. The option <code>-malign-power</code> instructs GCC to follow the ABI-specified alignment rules. GCC defaults to the standard alignment defined in the ABI. <p>On 64-bit Darwin, natural alignment is the default, and <code>-malign-power</code> is not supported. </p>\n</dd>\n<dt>\n<code>-msoft-float</code><dt><code>-mhard-float</code></dt>\n</dt>\n<dd>\nGenerate code that does not use (uses) the floating-point register set. Software floating-point emulation is provided if you use the <code>-msoft-float</code> option, and pass the option to GCC when linking. </dd>\n<dt>\n<code>-msingle-float</code><dt><code>-mdouble-float</code></dt>\n</dt>\n<dd>\nGenerate code for single- or double-precision floating-point operations. <code>-mdouble-float</code> implies <code>-msingle-float</code>. </dd>\n<dt><code>-msimple-fpu</code></dt>\n<dd>\nDo not generate <code>sqrt</code> and <code>div</code> instructions for hardware floating-point unit. </dd>\n<dt>\n<code>-mfpu=</code><var>name</var>\n</dt>\n<dd>\nSpecify type of floating-point unit. Valid values for <var>name</var> are ‘<code>sp_lite</code>’ (equivalent to <code>-msingle-float -msimple-fpu</code>), ‘<code>dp_lite</code>’ (equivalent to <code>-mdouble-float -msimple-fpu</code>), ‘<code>sp_full</code>’ (equivalent to <code>-msingle-float</code>), and ‘<code>dp_full</code>’ (equivalent to <code>-mdouble-float</code>). </dd>\n<dt><code>-mxilinx-fpu</code></dt>\n<dd>\nPerform optimizations for the floating-point unit on Xilinx PPC 405/440. </dd>\n<dt>\n<code>-mmultiple</code><dt><code>-mno-multiple</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the load multiple word instructions and the store multiple word instructions. These instructions are generated by default on POWER systems, and not generated on PowerPC systems. Do not use <code>-mmultiple</code> on little-endian PowerPC systems, since those instructions do not work when the processor is in little-endian mode. The exceptions are PPC740 and PPC750 which permit these instructions in little-endian mode. </dd>\n<dt>\n<code>-mstring</code><dt><code>-mno-string</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the load string instructions and the store string word instructions to save multiple registers and do small block moves. These instructions are generated by default on POWER systems, and not generated on PowerPC systems. Do not use <code>-mstring</code> on little-endian PowerPC systems, since those instructions do not work when the processor is in little-endian mode. The exceptions are PPC740 and PPC750 which permit these instructions in little-endian mode. </dd>\n<dt>\n<code>-mupdate</code><dt><code>-mno-update</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the load or store instructions that update the base register to the address of the calculated memory location. These instructions are generated by default. If you use <code>-mno-update</code>, there is a small window between the time that the stack pointer is updated and the address of the previous frame is stored, which means code that walks the stack frame across interrupts or signals may get corrupted data. </dd>\n<dt>\n<code>-mavoid-indexed-addresses</code><dt><code>-mno-avoid-indexed-addresses</code></dt>\n</dt>\n<dd>\nGenerate code that tries to avoid (not avoid) the use of indexed load or store instructions. These instructions can incur a performance penalty on Power6 processors in certain situations, such as when stepping through large arrays that cross a 16M boundary. This option is enabled by default when targeting Power6 and disabled otherwise. </dd>\n<dt>\n<code>-mfused-madd</code><dt><code>-mno-fused-madd</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the floating-point multiply and accumulate instructions. These instructions are generated by default if hardware floating point is used. The machine-dependent <code>-mfused-madd</code> option is now mapped to the machine-independent <code>-ffp-contract=fast</code> option, and <code>-mno-fused-madd</code> is mapped to <code>-ffp-contract=off</code>. </dd>\n<dt>\n<code>-mmulhw</code><dt><code>-mno-mulhw</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the half-word multiply and multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors. These instructions are generated by default when targeting those processors. </dd>\n<dt>\n<code>-mdlmzb</code><dt><code>-mno-dlmzb</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the string-search ‘<code>dlmzb</code>’ instruction on the IBM 405, 440, 464 and 476 processors. This instruction is generated by default when targeting those processors. </dd>\n<dt>\n<code>-mno-bit-align</code><dt><code>-mbit-align</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems do not (do) force structures and unions that contain bit-fields to be aligned to the base type of the bit-field. <p>For example, by default a structure containing nothing but 8 <code>unsigned</code> bit-fields of length 1 is aligned to a 4-byte boundary and has a size of 4 bytes. By using <code>-mno-bit-align</code>, the structure is aligned to a 1-byte boundary and is 1 byte in size. </p>\n</dd>\n<dt>\n<code>-mno-strict-align</code><dt><code>-mstrict-align</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems do not (do) assume that unaligned memory references are handled by the system. </dd>\n<dt>\n<code>-mrelocatable</code><dt><code>-mno-relocatable</code></dt>\n</dt>\n<dd>\nGenerate code that allows (does not allow) a static executable to be relocated to a different address at run time. A simple embedded PowerPC system loader should relocate the entire contents of <code>.got2</code> and 4-byte locations listed in the <code>.fixup</code> section, a table of 32-bit addresses generated by this option. For this to work, all objects linked together must be compiled with <code>-mrelocatable</code> or <code>-mrelocatable-lib</code>. <code>-mrelocatable</code> code aligns the stack to an 8-byte boundary. </dd>\n<dt>\n<code>-mrelocatable-lib</code><dt><code>-mno-relocatable-lib</code></dt>\n</dt>\n<dd>\nLike <code>-mrelocatable</code>, <code>-mrelocatable-lib</code> generates a <code>.fixup</code> section to allow static executables to be relocated at run time, but <code>-mrelocatable-lib</code> does not use the smaller stack alignment of <code>-mrelocatable</code>. Objects compiled with <code>-mrelocatable-lib</code> may be linked with objects compiled with any combination of the <code>-mrelocatable</code> options. </dd>\n<dt>\n<code>-mno-toc</code><dt><code>-mtoc</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems do not (do) assume that register 2 contains a pointer to a global area pointing to the addresses used in the program. </dd>\n<dt>\n<code>-mlittle</code><dt><code>-mlittle-endian</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems compile code for the processor in little-endian mode. The <code>-mlittle-endian</code> option is the same as <code>-mlittle</code>. </dd>\n<dt>\n<code>-mbig</code><dt><code>-mbig-endian</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems compile code for the processor in big-endian mode. The <code>-mbig-endian</code> option is the same as <code>-mbig</code>. </dd>\n<dt><code>-mdynamic-no-pic</code></dt>\n<dd>\nOn Darwin and Mac OS X systems, compile code so that it is not relocatable, but that its external references are relocatable. The resulting code is suitable for applications, but not shared libraries. </dd>\n<dt><code>-msingle-pic-base</code></dt>\n<dd>\nTreat the register used for PIC addressing as read-only, rather than loading it in the prologue for each function. The runtime system is responsible for initializing this register with an appropriate value before execution begins. </dd>\n<dt>\n<code>-mprioritize-restricted-insns=</code><var>priority</var>\n</dt>\n<dd>\nThis option controls the priority that is assigned to dispatch-slot restricted instructions during the second scheduling pass. The argument <var>priority</var> takes the value ‘<code>0</code>’, ‘<code>1</code>’, or ‘<code>2</code>’ to assign no, highest, or second-highest (respectively) priority to dispatch-slot restricted instructions. </dd>\n<dt>\n<code>-msched-costly-dep=</code><var>dependence_type</var>\n</dt>\n<dd>\nThis option controls which dependences are considered costly by the target during instruction scheduling. The argument <var>dependence_type</var> takes one of the following values: <dl> <dt>‘<code>no</code>’</dt>\n<dd>No dependence is costly. </dd>\n<dt>‘<code>all</code>’</dt>\n<dd>All dependences are costly. </dd>\n<dt>‘<code>true_store_to_load</code>’</dt>\n<dd>A true dependence from store to load is costly. </dd>\n<dt>‘<code>store_to_load</code>’</dt>\n<dd>Any dependence from store to load is costly. </dd>\n<dt><var>number</var></dt>\n<dd>Any dependence for which the latency is greater than or equal to <var>number</var> is costly. </dd>\n</dl> </dd>\n<dt>\n<code>-minsert-sched-nops=</code><var>scheme</var>\n</dt>\n<dd>\nThis option controls which NOP insertion scheme is used during the second scheduling pass. The argument <var>scheme</var> takes one of the following values: <dl> <dt>‘<code>no</code>’</dt>\n<dd>Don't insert NOPs. </dd>\n<dt>‘<code>pad</code>’</dt>\n<dd>Pad with NOPs any dispatch group that has vacant issue slots, according to the scheduler's grouping. </dd>\n<dt>‘<code>regroup_exact</code>’</dt>\n<dd>Insert NOPs to force costly dependent insns into separate groups. Insert exactly as many NOPs as needed to force an insn to a new group, according to the estimated processor grouping. </dd>\n<dt><var>number</var></dt>\n<dd>Insert NOPs to force costly dependent insns into separate groups. Insert <var>number</var> NOPs to force an insn to a new group. </dd>\n</dl> </dd>\n<dt><code>-mcall-sysv</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems compile code using calling conventions that adhere to the March 1995 draft of the System V Application Binary Interface, PowerPC processor supplement. This is the default unless you configured GCC using ‘<code>powerpc-*-eabiaix</code>’. </dd>\n<dt>\n<code>-mcall-sysv-eabi</code><dt><code>-mcall-eabi</code></dt>\n</dt>\n<dd>\nSpecify both <code>-mcall-sysv</code> and <code>-meabi</code> options. </dd>\n<dt><code>-mcall-sysv-noeabi</code></dt>\n<dd>\nSpecify both <code>-mcall-sysv</code> and <code>-mno-eabi</code> options. </dd>\n<dt><code>-mcall-aixdesc</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems compile code for the AIX operating system. </dd>\n<dt><code>-mcall-linux</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems compile code for the Linux-based GNU system. </dd>\n<dt><code>-mcall-freebsd</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems compile code for the FreeBSD operating system. </dd>\n<dt><code>-mcall-netbsd</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems compile code for the NetBSD operating system. </dd>\n<dt><code>-mcall-openbsd</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems compile code for the OpenBSD operating system. </dd>\n<dt><code>-maix-struct-return</code></dt>\n<dd>\nReturn all structures in memory (as specified by the AIX ABI). </dd>\n<dt><code>-msvr4-struct-return</code></dt>\n<dd>\nReturn structures smaller than 8 bytes in registers (as specified by the SVR4 ABI). </dd>\n<dt>\n<code>-mabi=</code><var>abi-type</var>\n</dt>\n<dd>\nExtend the current ABI with a particular extension, or remove such extension. Valid values are <var>altivec</var>, <var>no-altivec</var>, <var>spe</var>, <var>no-spe</var>, <var>ibmlongdouble</var>, <var>ieeelongdouble</var>, <var>elfv1</var>, <var>elfv2</var>. </dd>\n<dt><code>-mabi=spe</code></dt>\n<dd>\nExtend the current ABI with SPE ABI extensions. This does not change the default ABI, instead it adds the SPE ABI extensions to the current ABI. </dd>\n<dt><code>-mabi=no-spe</code></dt>\n<dd>\nDisable Book-E SPE ABI extensions for the current ABI. </dd>\n<dt><code>-mabi=ibmlongdouble</code></dt>\n<dd>\nChange the current ABI to use IBM extended-precision long double. This is a PowerPC 32-bit SYSV ABI option. </dd>\n<dt><code>-mabi=ieeelongdouble</code></dt>\n<dd>\nChange the current ABI to use IEEE extended-precision long double. This is a PowerPC 32-bit Linux ABI option. </dd>\n<dt><code>-mabi=elfv1</code></dt>\n<dd>\nChange the current ABI to use the ELFv1 ABI. This is the default ABI for big-endian PowerPC 64-bit Linux. Overriding the default ABI requires special system support and is likely to fail in spectacular ways. </dd>\n<dt><code>-mabi=elfv2</code></dt>\n<dd>\nChange the current ABI to use the ELFv2 ABI. This is the default ABI for little-endian PowerPC 64-bit Linux. Overriding the default ABI requires special system support and is likely to fail in spectacular ways. </dd>\n<dt>\n<code>-mprototype</code><dt><code>-mno-prototype</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems assume that all calls to variable argument functions are properly prototyped. Otherwise, the compiler must insert an instruction before every non-prototyped call to set or clear bit 6 of the condition code register (<var>CR</var>) to indicate whether floating-point values are passed in the floating-point registers in case the function takes variable arguments. With <code>-mprototype</code>, only calls to prototyped variable argument functions set or clear the bit. </dd>\n<dt><code>-msim</code></dt>\n<dd>\nOn embedded PowerPC systems, assume that the startup module is called <code>sim-crt0.o</code> and that the standard C libraries are <code>libsim.a</code> and <code>libc.a</code>. This is the default for ‘<code>powerpc-*-eabisim</code>’ configurations. </dd>\n<dt><code>-mmvme</code></dt>\n<dd>\nOn embedded PowerPC systems, assume that the startup module is called <code>crt0.o</code> and the standard C libraries are <code>libmvme.a</code> and <code>libc.a</code>. </dd>\n<dt><code>-mads</code></dt>\n<dd>\nOn embedded PowerPC systems, assume that the startup module is called <code>crt0.o</code> and the standard C libraries are <code>libads.a</code> and <code>libc.a</code>. </dd>\n<dt><code>-myellowknife</code></dt>\n<dd>\nOn embedded PowerPC systems, assume that the startup module is called <code>crt0.o</code> and the standard C libraries are <code>libyk.a</code> and <code>libc.a</code>. </dd>\n<dt><code>-mvxworks</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems, specify that you are compiling for a VxWorks system. </dd>\n<dt><code>-memb</code></dt>\n<dd>\nOn embedded PowerPC systems, set the <var>PPC_EMB</var> bit in the ELF flags header to indicate that ‘<code>eabi</code>’ extended relocations are used. </dd>\n<dt>\n<code>-meabi</code><dt><code>-mno-eabi</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems do (do not) adhere to the Embedded Applications Binary Interface (EABI), which is a set of modifications to the System V.4 specifications. Selecting <code>-meabi</code> means that the stack is aligned to an 8-byte boundary, a function <code>__eabi</code> is called from <code>main</code> to set up the EABI environment, and the <code>-msdata</code> option can use both <code>r2</code> and <code>r13</code> to point to two separate small data areas. Selecting <code>-mno-eabi</code> means that the stack is aligned to a 16-byte boundary, no EABI initialization function is called from <code>main</code>, and the <code>-msdata</code> option only uses <code>r13</code> to point to a single small data area. The <code>-meabi</code> option is on by default if you configured GCC using one of the ‘<code>powerpc*-*-eabi*</code>’ options. </dd>\n<dt><code>-msdata=eabi</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems, put small initialized <code>const</code> global and static data in the ‘<code>.sdata2</code>’ section, which is pointed to by register <code>r2</code>. Put small initialized non-<code>const</code> global and static data in the ‘<code>.sdata</code>’ section, which is pointed to by register <code>r13</code>. Put small uninitialized global and static data in the ‘<code>.sbss</code>’ section, which is adjacent to the ‘<code>.sdata</code>’ section. The <code>-msdata=eabi</code> option is incompatible with the <code>-mrelocatable</code> option. The <code>-msdata=eabi</code> option also sets the <code>-memb</code> option. </dd>\n<dt><code>-msdata=sysv</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems, put small global and static data in the ‘<code>.sdata</code>’ section, which is pointed to by register <code>r13</code>. Put small uninitialized global and static data in the ‘<code>.sbss</code>’ section, which is adjacent to the ‘<code>.sdata</code>’ section. The <code>-msdata=sysv</code> option is incompatible with the <code>-mrelocatable</code> option. </dd>\n<dt>\n<code>-msdata=default</code><dt><code>-msdata</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems, if <code>-meabi</code> is used, compile code the same as <code>-msdata=eabi</code>, otherwise compile code the same as <code>-msdata=sysv</code>. </dd>\n<dt><code>-msdata=data</code></dt>\n<dd>\nOn System V.4 and embedded PowerPC systems, put small global data in the ‘<code>.sdata</code>’ section. Put small uninitialized global data in the ‘<code>.sbss</code>’ section. Do not use register <code>r13</code> to address small data however. This is the default behavior unless other <code>-msdata</code> options are used. </dd>\n<dt>\n<code>-msdata=none</code><dt><code>-mno-sdata</code></dt>\n</dt>\n<dd>\nOn embedded PowerPC systems, put all initialized global and static data in the ‘<code>.data</code>’ section, and all uninitialized data in the ‘<code>.bss</code>’ section. </dd>\n<dt>\n<code>-mblock-move-inline-limit=</code><var>num</var>\n</dt>\n<dd>\nInline all block moves (such as calls to <code>memcpy</code> or structure copies) less than or equal to <var>num</var> bytes. The minimum value for <var>num</var> is 32 bytes on 32-bit targets and 64 bytes on 64-bit targets. The default value is target-specific. </dd>\n<dt>\n<code>-G </code><var>num</var>\n</dt>\n<dd>\nOn embedded PowerPC systems, put global and static items less than or equal to <var>num</var> bytes into the small data or BSS sections instead of the normal data or BSS section. By default, <var>num</var> is 8. The <samp><span class=\"option\">-G </span><var>num</var></samp> switch is also passed to the linker. All modules should be compiled with the same <samp><span class=\"option\">-G </span><var>num</var></samp> value. </dd>\n<dt>\n<code>-mregnames</code><dt><code>-mno-regnames</code></dt>\n</dt>\n<dd>\nOn System V.4 and embedded PowerPC systems do (do not) emit register names in the assembly language output using symbolic forms. </dd>\n<dt>\n<code>-mlongcall</code><dt><code>-mno-longcall</code></dt>\n</dt>\n<dd>\nBy default assume that all calls are far away so that a longer and more expensive calling sequence is required. This is required for calls farther than 32 megabytes (33,554,432 bytes) from the current location. A short call is generated if the compiler knows the call cannot be that far away. This setting can be overridden by the <code>shortcall</code> function attribute, or by <code>#pragma\nlongcall(0)</code>. <p>Some linkers are capable of detecting out-of-range calls and generating glue code on the fly. On these systems, long calls are unnecessary and generate slower code. As of this writing, the AIX linker can do this, as can the GNU linker for PowerPC/64. It is planned to add this feature to the GNU linker for 32-bit PowerPC systems as well. </p>\n<p>On Darwin/PPC systems, <code>#pragma longcall</code> generates <code>jbsr\ncallee, L42</code>, plus a branch island (glue code). The two target addresses represent the callee and the branch island. The Darwin/PPC linker prefers the first address and generates a <code>bl\ncallee</code> if the PPC <code>bl</code> instruction reaches the callee directly; otherwise, the linker generates <code>bl L42</code> to call the branch island. The branch island is appended to the body of the calling function; it computes the full 32-bit address of the callee and jumps to it. </p>\n<p>On Mach-O (Darwin) systems, this option directs the compiler emit to the glue for every direct call, and the Darwin linker decides whether to use or discard it. </p>\n<p>In the future, GCC may ignore all longcall specifications when the linker is known to generate glue. </p>\n</dd>\n<dt>\n<code>-mtls-markers</code><dt><code>-mno-tls-markers</code></dt>\n</dt>\n<dd>\nMark (do not mark) calls to <code>__tls_get_addr</code> with a relocation specifying the function argument. The relocation allows the linker to reliably associate function call with argument setup instructions for TLS optimization, which in turn allows GCC to better schedule the sequence. </dd>\n<dt><code>-pthread</code></dt>\n<dd>\nAdds support for multithreading with the pthreads library. This option sets flags for both the preprocessor and linker. </dd>\n<dt>\n<code>-mrecip</code><dt><code>-mno-recip</code></dt>\n</dt>\n<dd>\nThis option enables use of the reciprocal estimate and reciprocal square root estimate instructions with additional Newton-Raphson steps to increase precision instead of doing a divide or square root and divide for floating-point arguments. You should use the <code>-ffast-math</code> option when using <code>-mrecip</code> (or at least <code>-funsafe-math-optimizations</code>, <code>-finite-math-only</code>, <code>-freciprocal-math</code> and <code>-fno-trapping-math</code>). Note that while the throughput of the sequence is generally higher than the throughput of the non-reciprocal instruction, the precision of the sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994) for reciprocal square roots. </dd>\n<dt>\n<code>-mrecip=</code><var>opt</var>\n</dt>\n<dd>\nThis option controls which reciprocal estimate instructions may be used. <var>opt</var> is a comma-separated list of options, which may be preceded by a <code>!</code> to invert the option: <code>all</code>: enable all estimate instructions, <code>default</code>: enable the default instructions, equivalent to <code>-mrecip</code>, <code>none</code>: disable all estimate instructions, equivalent to <code>-mno-recip</code>; <code>div</code>: enable the reciprocal approximation instructions for both single and double precision; <code>divf</code>: enable the single-precision reciprocal approximation instructions; <code>divd</code>: enable the double-precision reciprocal approximation instructions; <code>rsqrt</code>: enable the reciprocal square root approximation instructions for both single and double precision; <code>rsqrtf</code>: enable the single-precision reciprocal square root approximation instructions; <code>rsqrtd</code>: enable the double-precision reciprocal square root approximation instructions; <p>So, for example, <code>-mrecip=all,!rsqrtd</code> enables all of the reciprocal estimate instructions, except for the <code>FRSQRTE</code>, <code>XSRSQRTEDP</code>, and <code>XVRSQRTEDP</code> instructions which handle the double-precision reciprocal square root calculations. </p>\n</dd>\n<dt>\n<code>-mrecip-precision</code><dt><code>-mno-recip-precision</code></dt>\n</dt>\n<dd>\nAssume (do not assume) that the reciprocal estimate instructions provide higher-precision estimates than is mandated by the PowerPC ABI. Selecting <code>-mcpu=power6</code>, <code>-mcpu=power7</code> or <code>-mcpu=power8</code> automatically selects <code>-mrecip-precision</code>. The double-precision square root estimate instructions are not generated by default on low-precision machines, since they do not provide an estimate that converges after three steps. </dd>\n<dt>\n<code>-mveclibabi=</code><var>type</var>\n</dt>\n<dd>\nSpecifies the ABI type to use for vectorizing intrinsics using an external library. The only type supported at present is <code>mass</code>, which specifies to use IBM's Mathematical Acceleration Subsystem (MASS) libraries for vectorizing intrinsics using external libraries. GCC currently emits calls to <code>acosd2</code>, <code>acosf4</code>, <code>acoshd2</code>, <code>acoshf4</code>, <code>asind2</code>, <code>asinf4</code>, <code>asinhd2</code>, <code>asinhf4</code>, <code>atan2d2</code>, <code>atan2f4</code>, <code>atand2</code>, <code>atanf4</code>, <code>atanhd2</code>, <code>atanhf4</code>, <code>cbrtd2</code>, <code>cbrtf4</code>, <code>cosd2</code>, <code>cosf4</code>, <code>coshd2</code>, <code>coshf4</code>, <code>erfcd2</code>, <code>erfcf4</code>, <code>erfd2</code>, <code>erff4</code>, <code>exp2d2</code>, <code>exp2f4</code>, <code>expd2</code>, <code>expf4</code>, <code>expm1d2</code>, <code>expm1f4</code>, <code>hypotd2</code>, <code>hypotf4</code>, <code>lgammad2</code>, <code>lgammaf4</code>, <code>log10d2</code>, <code>log10f4</code>, <code>log1pd2</code>, <code>log1pf4</code>, <code>log2d2</code>, <code>log2f4</code>, <code>logd2</code>, <code>logf4</code>, <code>powd2</code>, <code>powf4</code>, <code>sind2</code>, <code>sinf4</code>, <code>sinhd2</code>, <code>sinhf4</code>, <code>sqrtd2</code>, <code>sqrtf4</code>, <code>tand2</code>, <code>tanf4</code>, <code>tanhd2</code>, and <code>tanhf4</code> when generating code for power7. Both <code>-ftree-vectorize</code> and <code>-funsafe-math-optimizations</code> must also be enabled. The MASS libraries must be specified at link time. </dd>\n<dt>\n<code>-mfriz</code><dt><code>-mno-friz</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) the <code>friz</code> instruction when the <code>-funsafe-math-optimizations</code> option is used to optimize rounding of floating-point values to 64-bit integer and back to floating point. The <code>friz</code> instruction does not return the same value if the floating-point number is too large to fit in an integer. </dd>\n<dt>\n<code>-mpointers-to-nested-functions</code><dt><code>-mno-pointers-to-nested-functions</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) code to load up the static chain register (<var>r11</var>) when calling through a pointer on AIX and 64-bit Linux systems where a function pointer points to a 3-word descriptor giving the function address, TOC value to be loaded in register <var>r2</var>, and static chain value to be loaded in register <var>r11</var>. The <code>-mpointers-to-nested-functions</code> is on by default. You cannot call through pointers to nested functions or pointers to functions compiled in other languages that use the static chain if you use the <code>-mno-pointers-to-nested-functions</code>. </dd>\n<dt>\n<code>-msave-toc-indirect</code><dt><code>-mno-save-toc-indirect</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) code to save the TOC value in the reserved stack location in the function prologue if the function calls through a pointer on AIX and 64-bit Linux systems. If the TOC value is not saved in the prologue, it is saved just before the call through the pointer. The <code>-mno-save-toc-indirect</code> option is the default. </dd>\n<dt>\n<code>-mcompat-align-parm</code><dt><code>-mno-compat-align-parm</code></dt>\n</dt>\n<dd>\nGenerate (do not generate) code to pass structure parameters with a maximum alignment of 64 bits, for compatibility with older versions of GCC. <p>Older versions of GCC (prior to 4.9.0) incorrectly did not align a structure parameter on a 128-bit boundary when that structure contained a member requiring 128-bit alignment. This is corrected in more recent versions of GCC. This option may be used to generate code that is compatible with functions compiled with older versions of GCC. </p>\n<p>The <code>-mno-compat-align-parm</code> option is the default. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RS_002f6000-and-PowerPC-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RS_002f6000-and-PowerPC-Options.html</a>\n  </p>\n</div>\n","rx-options":"<h1 class=\"subsection\" id=\"RX-Options\">3.17.39 RX Options</h1> <p> These command-line options are defined for RX targets: </p>\n<dl> <dt>\n<code>-m64bit-doubles</code><dt><code>-m32bit-doubles</code></dt>\n</dt>\n<dd>\nMake the <code>double</code> data type be 64 bits (<code>-m64bit-doubles</code>) or 32 bits (<code>-m32bit-doubles</code>) in size. The default is <code>-m32bit-doubles</code>. <em>Note</em> RX floating-point hardware only works on 32-bit values, which is why the default is <code>-m32bit-doubles</code>. </dd>\n<dt>\n<code>-fpu</code><dt><code>-nofpu</code></dt>\n</dt>\n<dd>\nEnables (<code>-fpu</code>) or disables (<code>-nofpu</code>) the use of RX floating-point hardware. The default is enabled for the <var>RX600</var> series and disabled for the <var>RX200</var> series. <p>Floating-point instructions are only generated for 32-bit floating-point values, however, so the FPU hardware is not used for doubles if the <code>-m64bit-doubles</code> option is used. </p>\n<p><em>Note</em> If the <code>-fpu</code> option is enabled then <code>-funsafe-math-optimizations</code> is also enabled automatically. This is because the RX FPU instructions are themselves unsafe. </p>\n</dd>\n<dt>\n<code>-mcpu=</code><var>name</var>\n</dt>\n<dd>\nSelects the type of RX CPU to be targeted. Currently three types are supported, the generic <var>RX600</var> and <var>RX200</var> series hardware and the specific <var>RX610</var> CPU. The default is <var>RX600</var>. <p>The only difference between <var>RX600</var> and <var>RX610</var> is that the <var>RX610</var> does not support the <code>MVTIPL</code> instruction. </p>\n<p>The <var>RX200</var> series does not have a hardware floating-point unit and so <code>-nofpu</code> is enabled by default when this type is selected. </p>\n</dd>\n<dt>\n<code>-mbig-endian-data</code><dt><code>-mlittle-endian-data</code></dt>\n</dt>\n<dd>\nStore data (but not code) in the big-endian format. The default is <code>-mlittle-endian-data</code>, i.e. to store data in the little-endian format. </dd>\n<dt>\n<code>-msmall-data-limit=</code><var>N</var>\n</dt>\n<dd>\nSpecifies the maximum size in bytes of global and static variables which can be placed into the small data area. Using the small data area can lead to smaller and faster code, but the size of area is limited and it is up to the programmer to ensure that the area does not overflow. Also when the small data area is used one of the RX's registers (usually <code>r13</code>) is reserved for use pointing to this area, so it is no longer available for use by the compiler. This could result in slower and/or larger code if variables are pushed onto the stack instead of being held in this register. <p>Note, common variables (variables that have not been initialized) and constants are not placed into the small data area as they are assigned to other sections in the output executable. </p>\n<p>The default value is zero, which disables this feature. Note, this feature is not enabled by default with higher optimization levels (<code>-O2</code> etc) because of the potentially detrimental effects of reserving a register. It is up to the programmer to experiment and discover whether this feature is of benefit to their program. See the description of the <code>-mpid</code> option for a description of how the actual register to hold the small data area pointer is chosen. </p>\n</dd>\n<dt>\n<code>-msim</code><dt><code>-mno-sim</code></dt>\n</dt>\n<dd>\nUse the simulator runtime. The default is to use the libgloss board-specific runtime. </dd>\n<dt>\n<code>-mas100-syntax</code><dt><code>-mno-as100-syntax</code></dt>\n</dt>\n<dd>\nWhen generating assembler output use a syntax that is compatible with Renesas's AS100 assembler. This syntax can also be handled by the GAS assembler, but it has some restrictions so it is not generated by default. </dd>\n<dt>\n<code>-mmax-constant-size=</code><var>N</var>\n</dt>\n<dd>\nSpecifies the maximum size, in bytes, of a constant that can be used as an operand in a RX instruction. Although the RX instruction set does allow constants of up to 4 bytes in length to be used in instructions, a longer value equates to a longer instruction. Thus in some circumstances it can be beneficial to restrict the size of constants that are used in instructions. Constants that are too big are instead placed into a constant pool and referenced via register indirection. <p>The value <var>N</var> can be between 0 and 4. A value of 0 (the default) or 4 means that constants of any size are allowed. </p>\n</dd>\n<dt><code>-mrelax</code></dt>\n<dd>\nEnable linker relaxation. Linker relaxation is a process whereby the linker attempts to reduce the size of a program by finding shorter versions of various instructions. Disabled by default. </dd>\n<dt>\n<code>-mint-register=</code><var>N</var>\n</dt>\n<dd>\nSpecify the number of registers to reserve for fast interrupt handler functions. The value <var>N</var> can be between 0 and 4. A value of 1 means that register <code>r13</code> is reserved for the exclusive use of fast interrupt handlers. A value of 2 reserves <code>r13</code> and <code>r12</code>. A value of 3 reserves <code>r13</code>, <code>r12</code> and <code>r11</code>, and a value of 4 reserves <code>r13</code> through <code>r10</code>. A value of 0, the default, does not reserve any registers. </dd>\n<dt><code>-msave-acc-in-interrupts</code></dt>\n<dd>\nSpecifies that interrupt handler functions should preserve the accumulator register. This is only necessary if normal code might use the accumulator register, for example because it performs 64-bit multiplications. The default is to ignore the accumulator as this makes the interrupt handlers faster. </dd>\n<dt>\n<code>-mpid</code><dt><code>-mno-pid</code></dt>\n</dt>\n<dd>\nEnables the generation of position independent data. When enabled any access to constant data is done via an offset from a base address held in a register. This allows the location of constant data to be determined at run time without requiring the executable to be relocated, which is a benefit to embedded applications with tight memory constraints. Data that can be modified is not affected by this option. <p>Note, using this feature reserves a register, usually <code>r13</code>, for the constant data base address. This can result in slower and/or larger code, especially in complicated functions. </p>\n<p>The actual register chosen to hold the constant data base address depends upon whether the <code>-msmall-data-limit</code> and/or the <code>-mint-register</code> command-line options are enabled. Starting with register <code>r13</code> and proceeding downwards, registers are allocated first to satisfy the requirements of <code>-mint-register</code>, then <code>-mpid</code> and finally <code>-msmall-data-limit</code>. Thus it is possible for the small data area register to be <code>r8</code> if both <code>-mint-register=4</code> and <code>-mpid</code> are specified on the command line. </p>\n<p>By default this feature is not enabled. The default can be restored via the <code>-mno-pid</code> command-line option. </p>\n</dd>\n<dt>\n<code>-mno-warn-multiple-fast-interrupts</code><dt><code>-mwarn-multiple-fast-interrupts</code></dt>\n</dt>\n<dd>\nPrevents GCC from issuing a warning message if it finds more than one fast interrupt handler when it is compiling a file. The default is to issue a warning for each extra fast interrupt handler found, as the RX only supports one such interrupt. </dd>\n</dl> <p><em>Note:</em> The generic GCC command-line option <samp><span class=\"option\">-ffixed-</span><var>reg</var></samp> has special significance to the RX port when used with the <code>interrupt</code> function attribute. This attribute indicates a function intended to process fast interrupts. GCC ensures that it only uses the registers <code>r10</code>, <code>r11</code>, <code>r12</code> and/or <code>r13</code> and only provided that the normal use of the corresponding registers have been restricted via the <samp><span class=\"option\">-ffixed-</span><var>reg</var></samp> or <code>-mint-register</code> command-line options. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RX-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RX-Options.html</a>\n  </p>\n</div>\n","s_002f390-and-zseries-options":"<h1 class=\"subsection\" id=\"S_002f390-and-zSeries-Options\">3.17.40 S/390 and zSeries Options</h1> <p> These are the ‘<code>-m</code>’ options defined for the S/390 and zSeries architecture. </p>\n<dl> <dt>\n<code>-mhard-float</code><dt><code>-msoft-float</code></dt>\n</dt>\n<dd>\nUse (do not use) the hardware floating-point instructions and registers for floating-point operations. When <code>-msoft-float</code> is specified, functions in <code>libgcc.a</code> are used to perform floating-point operations. When <code>-mhard-float</code> is specified, the compiler generates IEEE floating-point instructions. This is the default. </dd>\n<dt>\n<code>-mhard-dfp</code><dt><code>-mno-hard-dfp</code></dt>\n</dt>\n<dd>\nUse (do not use) the hardware decimal-floating-point instructions for decimal-floating-point operations. When <code>-mno-hard-dfp</code> is specified, functions in <code>libgcc.a</code> are used to perform decimal-floating-point operations. When <code>-mhard-dfp</code> is specified, the compiler generates decimal-floating-point hardware instructions. This is the default for <code>-march=z9-ec</code> or higher. </dd>\n<dt>\n<code>-mlong-double-64</code><dt><code>-mlong-double-128</code></dt>\n</dt>\n<dd>\nThese switches control the size of <code>long double</code> type. A size of 64 bits makes the <code>long double</code> type equivalent to the <code>double</code> type. This is the default. </dd>\n<dt>\n<code>-mbackchain</code><dt><code>-mno-backchain</code></dt>\n</dt>\n<dd>\nStore (do not store) the address of the caller's frame as backchain pointer into the callee's stack frame. A backchain may be needed to allow debugging using tools that do not understand DWARF 2 call frame information. When <code>-mno-packed-stack</code> is in effect, the backchain pointer is stored at the bottom of the stack frame; when <code>-mpacked-stack</code> is in effect, the backchain is placed into the topmost word of the 96/160 byte register save area. <p>In general, code compiled with <code>-mbackchain</code> is call-compatible with code compiled with <code>-mmo-backchain</code>; however, use of the backchain for debugging purposes usually requires that the whole binary is built with <code>-mbackchain</code>. Note that the combination of <code>-mbackchain</code>, <code>-mpacked-stack</code> and <code>-mhard-float</code> is not supported. In order to build a linux kernel use <code>-msoft-float</code>. </p>\n<p>The default is to not maintain the backchain. </p>\n</dd>\n<dt>\n<code>-mpacked-stack</code><dt><code>-mno-packed-stack</code></dt>\n</dt>\n<dd>\nUse (do not use) the packed stack layout. When <code>-mno-packed-stack</code> is specified, the compiler uses the all fields of the 96/160 byte register save area only for their default purpose; unused fields still take up stack space. When <code>-mpacked-stack</code> is specified, register save slots are densely packed at the top of the register save area; unused space is reused for other purposes, allowing for more efficient use of the available stack space. However, when <code>-mbackchain</code> is also in effect, the topmost word of the save area is always used to store the backchain, and the return address register is always saved two words below the backchain. <p>As long as the stack frame backchain is not used, code generated with <code>-mpacked-stack</code> is call-compatible with code generated with <code>-mno-packed-stack</code>. Note that some non-FSF releases of GCC 2.95 for S/390 or zSeries generated code that uses the stack frame backchain at run time, not just for debugging purposes. Such code is not call-compatible with code compiled with <code>-mpacked-stack</code>. Also, note that the combination of <code>-mbackchain</code>, <code>-mpacked-stack</code> and <code>-mhard-float</code> is not supported. In order to build a linux kernel use <code>-msoft-float</code>. </p>\n<p>The default is to not use the packed stack layout. </p>\n</dd>\n<dt>\n<code>-msmall-exec</code><dt><code>-mno-small-exec</code></dt>\n</dt>\n<dd>\nGenerate (or do not generate) code using the <code>bras</code> instruction to do subroutine calls. This only works reliably if the total executable size does not exceed 64k. The default is to use the <code>basr</code> instruction instead, which does not have this limitation. </dd>\n<dt>\n<code>-m64</code><dt><code>-m31</code></dt>\n</dt>\n<dd>\nWhen <code>-m31</code> is specified, generate code compliant to the GNU/Linux for S/390 ABI. When <code>-m64</code> is specified, generate code compliant to the GNU/Linux for zSeries ABI. This allows GCC in particular to generate 64-bit instructions. For the ‘<code>s390</code>’ targets, the default is <code>-m31</code>, while the ‘<code>s390x</code>’ targets default to <code>-m64</code>. </dd>\n<dt>\n<code>-mzarch</code><dt><code>-mesa</code></dt>\n</dt>\n<dd>\nWhen <code>-mzarch</code> is specified, generate code using the instructions available on z/Architecture. When <code>-mesa</code> is specified, generate code using the instructions available on ESA/390. Note that <code>-mesa</code> is not possible with <code>-m64</code>. When generating code compliant to the GNU/Linux for S/390 ABI, the default is <code>-mesa</code>. When generating code compliant to the GNU/Linux for zSeries ABI, the default is <code>-mzarch</code>. </dd>\n<dt>\n<code>-mmvcle</code><dt><code>-mno-mvcle</code></dt>\n</dt>\n<dd>\nGenerate (or do not generate) code using the <code>mvcle</code> instruction to perform block moves. When <code>-mno-mvcle</code> is specified, use a <code>mvc</code> loop instead. This is the default unless optimizing for size. </dd>\n<dt>\n<code>-mdebug</code><dt><code>-mno-debug</code></dt>\n</dt>\n<dd>\nPrint (or do not print) additional debug information when compiling. The default is to not print debug information. </dd>\n<dt>\n<code>-march=</code><var>cpu-type</var>\n</dt>\n<dd>\nGenerate code that runs on <var>cpu-type</var>, which is the name of a system representing a certain processor type. Possible values for <var>cpu-type</var> are ‘<code>g5</code>’, ‘<code>g6</code>’, ‘<code>z900</code>’, ‘<code>z990</code>’, ‘<code>z9-109</code>’, ‘<code>z9-ec</code>’, ‘<code>z10</code>’, ‘<code>z196</code>’, and ‘<code>zEC12</code>’. When generating code using the instructions available on z/Architecture, the default is <code>-march=z900</code>. Otherwise, the default is <code>-march=g5</code>. </dd>\n<dt>\n<code>-mtune=</code><var>cpu-type</var>\n</dt>\n<dd>\nTune to <var>cpu-type</var> everything applicable about the generated code, except for the ABI and the set of available instructions. The list of <var>cpu-type</var> values is the same as for <code>-march</code>. The default is the value used for <code>-march</code>. </dd>\n<dt>\n<code>-mtpf-trace</code><dt><code>-mno-tpf-trace</code></dt>\n</dt>\n<dd>\nGenerate code that adds (does not add) in TPF OS specific branches to trace routines in the operating system. This option is off by default, even when compiling for the TPF OS. </dd>\n<dt>\n<code>-mfused-madd</code><dt><code>-mno-fused-madd</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the floating-point multiply and accumulate instructions. These instructions are generated by default if hardware floating point is used. </dd>\n<dt>\n<code>-mwarn-framesize=</code><var>framesize</var>\n</dt>\n<dd>\nEmit a warning if the current function exceeds the given frame size. Because this is a compile-time check it doesn't need to be a real problem when the program runs. It is intended to identify functions that most probably cause a stack overflow. It is useful to be used in an environment with limited stack size e.g. the linux kernel. </dd>\n<dt><code>-mwarn-dynamicstack</code></dt>\n<dd>\nEmit a warning if the function calls <code>alloca</code> or uses dynamically-sized arrays. This is generally a bad idea with a limited stack size. </dd>\n<dt>\n<code>-mstack-guard=</code><var>stack-guard</var><dt>\n<code>-mstack-size=</code><var>stack-size</var>\n</dt>\n</dt>\n<dd>\nIf these options are provided the S/390 back end emits additional instructions in the function prologue that trigger a trap if the stack size is <var>stack-guard</var> bytes above the <var>stack-size</var> (remember that the stack on S/390 grows downward). If the <var>stack-guard</var> option is omitted the smallest power of 2 larger than the frame size of the compiled function is chosen. These options are intended to be used to help debugging stack overflow problems. The additionally emitted code causes only little overhead and hence can also be used in production-like systems without greater performance degradation. The given values have to be exact powers of 2 and <var>stack-size</var> has to be greater than <var>stack-guard</var> without exceeding 64k. In order to be efficient the extra code makes the assumption that the stack starts at an address aligned to the value given by <var>stack-size</var>. The <var>stack-guard</var> option can only be used in conjunction with <var>stack-size</var>. </dd>\n<dt>\n<code>-mhotpatch=</code><var>pre-halfwords</var><code>,</code><var>post-halfwords</var>\n</dt>\n<dd>\nIf the hotpatch option is enabled, a “hot-patching” function prologue is generated for all functions in the compilation unit. The funtion label is prepended with the given number of two-byte NOP instructions (<var>pre-halfwords</var>, maximum 1000000). After the label, 2 * <var>post-halfwords</var> bytes are appended, using the largest NOP like instructions the architecture allows (maximum 1000000). <p>If both arguments are zero, hotpatching is disabled. </p>\n<p>This option can be overridden for individual functions with the <code>hotpatch</code> attribute. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/S_002f390-and-zSeries-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/S_002f390-and-zSeries-Options.html</a>\n  </p>\n</div>\n","score-options":"<h1 class=\"subsection\" id=\"Score-Options\">3.17.41 Score Options</h1> <p> These options are defined for Score implementations: </p>\n<dl> <dt><code>-meb</code></dt>\n<dd>\nCompile code for big-endian mode. This is the default. </dd>\n<dt><code>-mel</code></dt>\n<dd>\nCompile code for little-endian mode. </dd>\n<dt><code>-mnhwloop</code></dt>\n<dd>\nDisable generation of <code>bcnz</code> instructions. </dd>\n<dt><code>-muls</code></dt>\n<dd>\nEnable generation of unaligned load and store instructions. </dd>\n<dt><code>-mmac</code></dt>\n<dd>\nEnable the use of multiply-accumulate instructions. Disabled by default. </dd>\n<dt><code>-mscore5</code></dt>\n<dd>\nSpecify the SCORE5 as the target architecture. </dd>\n<dt><code>-mscore5u</code></dt>\n<dd>\nSpecify the SCORE5U of the target architecture. </dd>\n<dt><code>-mscore7</code></dt>\n<dd>\nSpecify the SCORE7 as the target architecture. This is the default. </dd>\n<dt><code>-mscore7d</code></dt>\n<dd>\nSpecify the SCORE7D as the target architecture. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Score-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Score-Options.html</a>\n  </p>\n</div>\n","sh-options":"<h1 class=\"subsection\" id=\"SH-Options\">3.17.42 SH Options</h1> <p>These ‘<code>-m</code>’ options are defined for the SH implementations: </p>\n<dl> <dt><code>-m1</code></dt>\n<dd>\nGenerate code for the SH1. </dd>\n<dt><code>-m2</code></dt>\n<dd>\nGenerate code for the SH2. </dd>\n<dt><code>-m2e</code></dt>\n<dd>Generate code for the SH2e. </dd>\n<dt><code>-m2a-nofpu</code></dt>\n<dd>\nGenerate code for the SH2a without FPU, or for a SH2a-FPU in such a way that the floating-point unit is not used. </dd>\n<dt><code>-m2a-single-only</code></dt>\n<dd>\nGenerate code for the SH2a-FPU, in such a way that no double-precision floating-point operations are used. </dd>\n<dt><code>-m2a-single</code></dt>\n<dd>\nGenerate code for the SH2a-FPU assuming the floating-point unit is in single-precision mode by default. </dd>\n<dt><code>-m2a</code></dt>\n<dd>\nGenerate code for the SH2a-FPU assuming the floating-point unit is in double-precision mode by default. </dd>\n<dt><code>-m3</code></dt>\n<dd>\nGenerate code for the SH3. </dd>\n<dt><code>-m3e</code></dt>\n<dd>\nGenerate code for the SH3e. </dd>\n<dt><code>-m4-nofpu</code></dt>\n<dd>\nGenerate code for the SH4 without a floating-point unit. </dd>\n<dt><code>-m4-single-only</code></dt>\n<dd>\nGenerate code for the SH4 with a floating-point unit that only supports single-precision arithmetic. </dd>\n<dt><code>-m4-single</code></dt>\n<dd>\nGenerate code for the SH4 assuming the floating-point unit is in single-precision mode by default. </dd>\n<dt><code>-m4</code></dt>\n<dd>\nGenerate code for the SH4. </dd>\n<dt><code>-m4-100</code></dt>\n<dd>\nGenerate code for SH4-100. </dd>\n<dt><code>-m4-100-nofpu</code></dt>\n<dd>\nGenerate code for SH4-100 in such a way that the floating-point unit is not used. </dd>\n<dt><code>-m4-100-single</code></dt>\n<dd>\nGenerate code for SH4-100 assuming the floating-point unit is in single-precision mode by default. </dd>\n<dt><code>-m4-100-single-only</code></dt>\n<dd>\nGenerate code for SH4-100 in such a way that no double-precision floating-point operations are used. </dd>\n<dt><code>-m4-200</code></dt>\n<dd>\nGenerate code for SH4-200. </dd>\n<dt><code>-m4-200-nofpu</code></dt>\n<dd>\nGenerate code for SH4-200 without in such a way that the floating-point unit is not used. </dd>\n<dt><code>-m4-200-single</code></dt>\n<dd>\nGenerate code for SH4-200 assuming the floating-point unit is in single-precision mode by default. </dd>\n<dt><code>-m4-200-single-only</code></dt>\n<dd>\nGenerate code for SH4-200 in such a way that no double-precision floating-point operations are used. </dd>\n<dt><code>-m4-300</code></dt>\n<dd>\nGenerate code for SH4-300. </dd>\n<dt><code>-m4-300-nofpu</code></dt>\n<dd>\nGenerate code for SH4-300 without in such a way that the floating-point unit is not used. </dd>\n<dt><code>-m4-300-single</code></dt>\n<dd>\nGenerate code for SH4-300 in such a way that no double-precision floating-point operations are used. </dd>\n<dt><code>-m4-300-single-only</code></dt>\n<dd>\nGenerate code for SH4-300 in such a way that no double-precision floating-point operations are used. </dd>\n<dt><code>-m4-340</code></dt>\n<dd>\nGenerate code for SH4-340 (no MMU, no FPU). </dd>\n<dt><code>-m4-500</code></dt>\n<dd>\nGenerate code for SH4-500 (no FPU). Passes <code>-isa=sh4-nofpu</code> to the assembler. </dd>\n<dt><code>-m4a-nofpu</code></dt>\n<dd>\nGenerate code for the SH4al-dsp, or for a SH4a in such a way that the floating-point unit is not used. </dd>\n<dt><code>-m4a-single-only</code></dt>\n<dd>\nGenerate code for the SH4a, in such a way that no double-precision floating-point operations are used. </dd>\n<dt><code>-m4a-single</code></dt>\n<dd>\nGenerate code for the SH4a assuming the floating-point unit is in single-precision mode by default. </dd>\n<dt><code>-m4a</code></dt>\n<dd>\nGenerate code for the SH4a. </dd>\n<dt><code>-m4al</code></dt>\n<dd>\nSame as <code>-m4a-nofpu</code>, except that it implicitly passes <code>-dsp</code> to the assembler. GCC doesn't generate any DSP instructions at the moment. </dd>\n<dt><code>-m5-32media</code></dt>\n<dd>\nGenerate 32-bit code for SHmedia. </dd>\n<dt><code>-m5-32media-nofpu</code></dt>\n<dd>\nGenerate 32-bit code for SHmedia in such a way that the floating-point unit is not used. </dd>\n<dt><code>-m5-64media</code></dt>\n<dd>\nGenerate 64-bit code for SHmedia. </dd>\n<dt><code>-m5-64media-nofpu</code></dt>\n<dd>\nGenerate 64-bit code for SHmedia in such a way that the floating-point unit is not used. </dd>\n<dt><code>-m5-compact</code></dt>\n<dd>\nGenerate code for SHcompact. </dd>\n<dt><code>-m5-compact-nofpu</code></dt>\n<dd>\nGenerate code for SHcompact in such a way that the floating-point unit is not used. </dd>\n<dt><code>-mb</code></dt>\n<dd>\nCompile code for the processor in big-endian mode. </dd>\n<dt><code>-ml</code></dt>\n<dd>\nCompile code for the processor in little-endian mode. </dd>\n<dt><code>-mdalign</code></dt>\n<dd>\nAlign doubles at 64-bit boundaries. Note that this changes the calling conventions, and thus some functions from the standard C library do not work unless you recompile it first with <code>-mdalign</code>. </dd>\n<dt><code>-mrelax</code></dt>\n<dd>\nShorten some address references at link time, when possible; uses the linker option <code>-relax</code>. </dd>\n<dt><code>-mbigtable</code></dt>\n<dd>\nUse 32-bit offsets in <code>switch</code> tables. The default is to use 16-bit offsets. </dd>\n<dt><code>-mbitops</code></dt>\n<dd>\nEnable the use of bit manipulation instructions on SH2A. </dd>\n<dt><code>-mfmovd</code></dt>\n<dd>\nEnable the use of the instruction <code>fmovd</code>. Check <code>-mdalign</code> for alignment constraints. </dd>\n<dt><code>-mrenesas</code></dt>\n<dd>\nComply with the calling conventions defined by Renesas. </dd>\n<dt><code>-mno-renesas</code></dt>\n<dd>\nComply with the calling conventions defined for GCC before the Renesas conventions were available. This option is the default for all targets of the SH toolchain. </dd>\n<dt><code>-mnomacsave</code></dt>\n<dd>\nMark the <code>MAC</code> register as call-clobbered, even if <code>-mrenesas</code> is given. </dd>\n<dt>\n<code>-mieee</code><dt><code>-mno-ieee</code></dt>\n</dt>\n<dd>\nControl the IEEE compliance of floating-point comparisons, which affects the handling of cases where the result of a comparison is unordered. By default <code>-mieee</code> is implicitly enabled. If <code>-ffinite-math-only</code> is enabled <code>-mno-ieee</code> is implicitly set, which results in faster floating-point greater-equal and less-equal comparisons. The implcit settings can be overridden by specifying either <code>-mieee</code> or <code>-mno-ieee</code>. </dd>\n<dt><code>-minline-ic_invalidate</code></dt>\n<dd>\nInline code to invalidate instruction cache entries after setting up nested function trampolines. This option has no effect if <code>-musermode</code> is in effect and the selected code generation option (e.g. <code>-m4</code>) does not allow the use of the <code>icbi</code> instruction. If the selected code generation option does not allow the use of the <code>icbi</code> instruction, and <code>-musermode</code> is not in effect, the inlined code manipulates the instruction cache address array directly with an associative write. This not only requires privileged mode at run time, but it also fails if the cache line had been mapped via the TLB and has become unmapped. </dd>\n<dt><code>-misize</code></dt>\n<dd>\nDump instruction size and location in the assembly code. </dd>\n<dt><code>-mpadstruct</code></dt>\n<dd>\nThis option is deprecated. It pads structures to multiple of 4 bytes, which is incompatible with the SH ABI. </dd>\n<dt>\n<code>-matomic-model=</code><var>model</var>\n</dt>\n<dd>\nSets the model of atomic operations and additional parameters as a comma separated list. For details on the atomic built-in functions see <a href=\"_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins\">__atomic Builtins</a>. The following models and parameters are supported: <dl> <dt>‘<code>none</code>’</dt>\n<dd>Disable compiler generated atomic sequences and emit library calls for atomic operations. This is the default if the target is not <code>sh*-*-linux*</code>. </dd>\n<dt>‘<code>soft-gusa</code>’</dt>\n<dd>Generate GNU/Linux compatible gUSA software atomic sequences for the atomic built-in functions. The generated atomic sequences require additional support from the interrupt/exception handling code of the system and are only suitable for SH3* and SH4* single-core systems. This option is enabled by default when the target is <code>sh*-*-linux*</code> and SH3* or SH4*. When the target is SH4A, this option will also partially utilize the hardware atomic instructions <code>movli.l</code> and <code>movco.l</code> to create more efficient code, unless ‘<code>strict</code>’ is specified. </dd>\n<dt>‘<code>soft-tcb</code>’</dt>\n<dd>Generate software atomic sequences that use a variable in the thread control block. This is a variation of the gUSA sequences which can also be used on SH1* and SH2* targets. The generated atomic sequences require additional support from the interrupt/exception handling code of the system and are only suitable for single-core systems. When using this model, the ‘<code>gbr-offset=</code>’ parameter has to be specified as well. </dd>\n<dt>‘<code>soft-imask</code>’</dt>\n<dd>Generate software atomic sequences that temporarily disable interrupts by setting <code>SR.IMASK = 1111</code>. This model works only when the program runs in privileged mode and is only suitable for single-core systems. Additional support from the interrupt/exception handling code of the system is not required. This model is enabled by default when the target is <code>sh*-*-linux*</code> and SH1* or SH2*. </dd>\n<dt>‘<code>hard-llcs</code>’</dt>\n<dd>Generate hardware atomic sequences using the <code>movli.l</code> and <code>movco.l</code> instructions only. This is only available on SH4A and is suitable for multi-core systems. Since the hardware instructions support only 32 bit atomic variables access to 8 or 16 bit variables is emulated with 32 bit accesses. Code compiled with this option will also be compatible with other software atomic model interrupt/exception handling systems if executed on an SH4A system. Additional support from the interrupt/exception handling code of the system is not required for this model. </dd>\n<dt>‘<code>gbr-offset=</code>’</dt>\n<dd>This parameter specifies the offset in bytes of the variable in the thread control block structure that should be used by the generated atomic sequences when the ‘<code>soft-tcb</code>’ model has been selected. For other models this parameter is ignored. The specified value must be an integer multiple of four and in the range 0-1020. </dd>\n<dt>‘<code>strict</code>’</dt>\n<dd>This parameter prevents mixed usage of multiple atomic models, even though they would be compatible, and will make the compiler generate atomic sequences of the specified model only. </dd>\n</dl> </dd>\n<dt><code>-mtas</code></dt>\n<dd>\nGenerate the <code>tas.b</code> opcode for <code>__atomic_test_and_set</code>. Notice that depending on the particular hardware and software configuration this can degrade overall performance due to the operand cache line flushes that are implied by the <code>tas.b</code> instruction. On multi-core SH4A processors the <code>tas.b</code> instruction must be used with caution since it can result in data corruption for certain cache configurations. </dd>\n<dt><code>-mprefergot</code></dt>\n<dd>\nWhen generating position-independent code, emit function calls using the Global Offset Table instead of the Procedure Linkage Table. </dd>\n<dt>\n<code>-musermode</code><dt><code>-mno-usermode</code></dt>\n</dt>\n<dd>\nDon't allow (allow) the compiler generating privileged mode code. Specifying <code>-musermode</code> also implies <code>-mno-inline-ic_invalidate</code> if the inlined code would not work in user mode. <code>-musermode</code> is the default when the target is <code>sh*-*-linux*</code>. If the target is SH1* or SH2* <code>-musermode</code> has no effect, since there is no user mode. </dd>\n<dt>\n<code>-multcost=</code><var>number</var>\n</dt>\n<dd>\nSet the cost to assume for a multiply insn. </dd>\n<dt>\n<code>-mdiv=</code><var>strategy</var>\n</dt>\n<dd>\nSet the division strategy to be used for integer division operations. For SHmedia <var>strategy</var> can be one of: <dl> <dt>‘<code>fp</code>’</dt>\n<dd>Performs the operation in floating point. This has a very high latency, but needs only a few instructions, so it might be a good choice if your code has enough easily-exploitable ILP to allow the compiler to schedule the floating-point instructions together with other instructions. Division by zero causes a floating-point exception. </dd>\n<dt>‘<code>inv</code>’</dt>\n<dd>Uses integer operations to calculate the inverse of the divisor, and then multiplies the dividend with the inverse. This strategy allows CSE and hoisting of the inverse calculation. Division by zero calculates an unspecified result, but does not trap. </dd>\n<dt>‘<code>inv:minlat</code>’</dt>\n<dd>A variant of ‘<code>inv</code>’ where, if no CSE or hoisting opportunities have been found, or if the entire operation has been hoisted to the same place, the last stages of the inverse calculation are intertwined with the final multiply to reduce the overall latency, at the expense of using a few more instructions, and thus offering fewer scheduling opportunities with other code. </dd>\n<dt>‘<code>call</code>’</dt>\n<dd>Calls a library function that usually implements the ‘<code>inv:minlat</code>’ strategy. This gives high code density for <code>m5-*media-nofpu</code> compilations. </dd>\n<dt>‘<code>call2</code>’</dt>\n<dd>Uses a different entry point of the same library function, where it assumes that a pointer to a lookup table has already been set up, which exposes the pointer load to CSE and code hoisting optimizations. </dd>\n<dt>‘<code>inv:call</code>’<dt>‘<code>inv:call2</code>’<dt>‘<code>inv:fp</code>’</dt>\n</dt>\n</dt>\n<dd>Use the ‘<code>inv</code>’ algorithm for initial code generation, but if the code stays unoptimized, revert to the ‘<code>call</code>’, ‘<code>call2</code>’, or ‘<code>fp</code>’ strategies, respectively. Note that the potentially-trapping side effect of division by zero is carried by a separate instruction, so it is possible that all the integer instructions are hoisted out, but the marker for the side effect stays where it is. A recombination to floating-point operations or a call is not possible in that case. </dd>\n<dt>‘<code>inv20u</code>’<dt>‘<code>inv20l</code>’</dt>\n</dt>\n<dd>Variants of the ‘<code>inv:minlat</code>’ strategy. In the case that the inverse calculation is not separated from the multiply, they speed up division where the dividend fits into 20 bits (plus sign where applicable) by inserting a test to skip a number of operations in this case; this test slows down the case of larger dividends. ‘<code>inv20u</code>’ assumes the case of a such a small dividend to be unlikely, and ‘<code>inv20l</code>’ assumes it to be likely. </dd>\n</dl> <p>For targets other than SHmedia <var>strategy</var> can be one of: </p>\n<dl> <dt>‘<code>call-div1</code>’</dt>\n<dd>Calls a library function that uses the single-step division instruction <code>div1</code> to perform the operation. Division by zero calculates an unspecified result and does not trap. This is the default except for SH4, SH2A and SHcompact. </dd>\n<dt>‘<code>call-fp</code>’</dt>\n<dd>Calls a library function that performs the operation in double precision floating point. Division by zero causes a floating-point exception. This is the default for SHcompact with FPU. Specifying this for targets that do not have a double precision FPU will default to <code>call-div1</code>. </dd>\n<dt>‘<code>call-table</code>’</dt>\n<dd>Calls a library function that uses a lookup table for small divisors and the <code>div1</code> instruction with case distinction for larger divisors. Division by zero calculates an unspecified result and does not trap. This is the default for SH4. Specifying this for targets that do not have dynamic shift instructions will default to <code>call-div1</code>. </dd>\n</dl> <p>When a division strategy has not been specified the default strategy will be selected based on the current target. For SH2A the default strategy is to use the <code>divs</code> and <code>divu</code> instructions instead of library function calls. </p>\n</dd>\n<dt><code>-maccumulate-outgoing-args</code></dt>\n<dd>\nReserve space once for outgoing arguments in the function prologue rather than around each call. Generally beneficial for performance and size. Also needed for unwinding to avoid changing the stack frame around conditional code. </dd>\n<dt>\n<code>-mdivsi3_libfunc=</code><var>name</var>\n</dt>\n<dd>\nSet the name of the library function used for 32-bit signed division to <var>name</var>. This only affects the name used in the ‘<code>call</code>’ and ‘<code>inv:call</code>’ division strategies, and the compiler still expects the same sets of input/output/clobbered registers as if this option were not present. </dd>\n<dt>\n<code>-mfixed-range=</code><var>register-range</var>\n</dt>\n<dd>\nGenerate code treating the given register range as fixed registers. A fixed register is one that the register allocator can not use. This is useful when compiling kernel code. A register range is specified as two registers separated by a dash. Multiple register ranges can be specified separated by a comma. </dd>\n<dt><code>-mindexed-addressing</code></dt>\n<dd>\nEnable the use of the indexed addressing mode for SHmedia32/SHcompact. This is only safe if the hardware and/or OS implement 32-bit wrap-around semantics for the indexed addressing mode. The architecture allows the implementation of processors with 64-bit MMU, which the OS could use to get 32-bit addressing, but since no current hardware implementation supports this or any other way to make the indexed addressing mode safe to use in the 32-bit ABI, the default is <code>-mno-indexed-addressing</code>. </dd>\n<dt>\n<code>-mgettrcost=</code><var>number</var>\n</dt>\n<dd>\nSet the cost assumed for the <code>gettr</code> instruction to <var>number</var>. The default is 2 if <code>-mpt-fixed</code> is in effect, 100 otherwise. </dd>\n<dt><code>-mpt-fixed</code></dt>\n<dd>\nAssume <code>pt*</code> instructions won't trap. This generally generates better-scheduled code, but is unsafe on current hardware. The current architecture definition says that <code>ptabs</code> and <code>ptrel</code> trap when the target anded with 3 is 3. This has the unintentional effect of making it unsafe to schedule these instructions before a branch, or hoist them out of a loop. For example, <code>__do_global_ctors</code>, a part of <code>libgcc</code> that runs constructors at program startup, calls functions in a list which is delimited by −1. With the <code>-mpt-fixed</code> option, the <code>ptabs</code> is done before testing against −1. That means that all the constructors run a bit more quickly, but when the loop comes to the end of the list, the program crashes because <code>ptabs</code> loads −1 into a target register. <p>Since this option is unsafe for any hardware implementing the current architecture specification, the default is <code>-mno-pt-fixed</code>. Unless specified explicitly with <code>-mgettrcost</code>, <code>-mno-pt-fixed</code> also implies <code>-mgettrcost=100</code>; this deters register allocation from using target registers for storing ordinary integers. </p>\n</dd>\n<dt><code>-minvalid-symbols</code></dt>\n<dd>\nAssume symbols might be invalid. Ordinary function symbols generated by the compiler are always valid to load with <code>movi</code>/<code>shori</code>/<code>ptabs</code> or <code>movi</code>/<code>shori</code>/<code>ptrel</code>, but with assembler and/or linker tricks it is possible to generate symbols that cause <code>ptabs</code> or <code>ptrel</code> to trap. This option is only meaningful when <code>-mno-pt-fixed</code> is in effect. It prevents cross-basic-block CSE, hoisting and most scheduling of symbol loads. The default is <code>-mno-invalid-symbols</code>. </dd>\n<dt>\n<code>-mbranch-cost=</code><var>num</var>\n</dt>\n<dd>\nAssume <var>num</var> to be the cost for a branch instruction. Higher numbers make the compiler try to generate more branch-free code if possible. If not specified the value is selected depending on the processor type that is being compiled for. </dd>\n<dt>\n<code>-mzdcbranch</code><dt><code>-mno-zdcbranch</code></dt>\n</dt>\n<dd>\nAssume (do not assume) that zero displacement conditional branch instructions <code>bt</code> and <code>bf</code> are fast. If <code>-mzdcbranch</code> is specified, the compiler will try to prefer zero displacement branch code sequences. This is enabled by default when generating code for SH4 and SH4A. It can be explicitly disabled by specifying <code>-mno-zdcbranch</code>. </dd>\n<dt>\n<code>-mfused-madd</code><dt><code>-mno-fused-madd</code></dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the floating-point multiply and accumulate instructions. These instructions are generated by default if hardware floating point is used. The machine-dependent <code>-mfused-madd</code> option is now mapped to the machine-independent <code>-ffp-contract=fast</code> option, and <code>-mno-fused-madd</code> is mapped to <code>-ffp-contract=off</code>. </dd>\n<dt>\n<code>-mfsca</code><dt><code>-mno-fsca</code></dt>\n</dt>\n<dd>\nAllow or disallow the compiler to emit the <code>fsca</code> instruction for sine and cosine approximations. The option <code>-mfsca</code> must be used in combination with <code>-funsafe-math-optimizations</code>. It is enabled by default when generating code for SH4A. Using <code>-mno-fsca</code> disables sine and cosine approximations even if <code>-funsafe-math-optimizations</code> is in effect. </dd>\n<dt>\n<code>-mfsrra</code><dt><code>-mno-fsrra</code></dt>\n</dt>\n<dd>\nAllow or disallow the compiler to emit the <code>fsrra</code> instruction for reciprocal square root approximations. The option <code>-mfsrra</code> must be used in combination with <code>-funsafe-math-optimizations</code> and <code>-ffinite-math-only</code>. It is enabled by default when generating code for SH4A. Using <code>-mno-fsrra</code> disables reciprocal square root approximations even if <code>-funsafe-math-optimizations</code> and <code>-ffinite-math-only</code> are in effect. </dd>\n<dt><code>-mpretend-cmove</code></dt>\n<dd>\nPrefer zero-displacement conditional branches for conditional move instruction patterns. This can result in faster code on the SH4 processor. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SH-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SH-Options.html</a>\n  </p>\n</div>\n","solaris-2-options":"<h1 class=\"subsection\" id=\"Solaris-2-Options\">3.17.43 Solaris 2 Options</h1> <p> These ‘<code>-m</code>’ options are supported on Solaris 2: </p>\n<dl> <dt><code>-mclear-hwcap</code></dt>\n<dd>\n<code>-mclear-hwcap</code> tells the compiler to remove the hardware capabilities generated by the Solaris assembler. This is only necessary when object files use ISA extensions not supported by the current machine, but check at runtime whether or not to use them. </dd>\n<dt><code>-mimpure-text</code></dt>\n<dd>\n<code>-mimpure-text</code>, used in addition to <code>-shared</code>, tells the compiler to not pass <code>-z text</code> to the linker when linking a shared object. Using this option, you can link position-dependent code into a shared object. <p><code>-mimpure-text</code> suppresses the “relocations remain against allocatable but non-writable sections” linker error message. However, the necessary relocations trigger copy-on-write, and the shared object is not actually shared across processes. Instead of using <code>-mimpure-text</code>, you should compile all source code with <code>-fpic</code> or <code>-fPIC</code>. </p>\n</dd>\n</dl> <p>These switches are supported in addition to the above on Solaris 2: </p>\n<dl> <dt><code>-pthreads</code></dt>\n<dd>\nAdd support for multithreading using the POSIX threads library. This option sets flags for both the preprocessor and linker. This option does not affect the thread safety of object code produced by the compiler or that of libraries supplied with it. </dd>\n<dt><code>-pthread</code></dt>\n<dd>\nThis is a synonym for <code>-pthreads</code>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Solaris-2-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Solaris-2-Options.html</a>\n  </p>\n</div>\n","sparc-options":"<h1 class=\"subsection\" id=\"SPARC-Options\">3.17.44 SPARC Options</h1> <p> These ‘<code>-m</code>’ options are supported on the SPARC: </p>\n<dl> <dt>\n<code>-mno-app-regs</code><dt><code>-mapp-regs</code></dt>\n</dt>\n<dd>\nSpecify <code>-mapp-regs</code> to generate output using the global registers 2 through 4, which the SPARC SVR4 ABI reserves for applications. Like the global register 1, each global register 2 through 4 is then treated as an allocable register that is clobbered by function calls. This is the default. <p>To be fully SVR4 ABI-compliant at the cost of some performance loss, specify <code>-mno-app-regs</code>. You should compile libraries and system software with this option. </p>\n</dd>\n<dt>\n<code>-mflat</code><dt><code>-mno-flat</code></dt>\n</dt>\n<dd>\nWith <code>-mflat</code>, the compiler does not generate save/restore instructions and uses a “flat” or single register window model. This model is compatible with the regular register window model. The local registers and the input registers (0–5) are still treated as “call-saved” registers and are saved on the stack as needed. <p>With <code>-mno-flat</code> (the default), the compiler generates save/restore instructions (except for leaf functions). This is the normal operating mode. </p>\n</dd>\n<dt>\n<code>-mfpu</code><dt><code>-mhard-float</code></dt>\n</dt>\n<dd>\nGenerate output containing floating-point instructions. This is the default. </dd>\n<dt>\n<code>-mno-fpu</code><dt><code>-msoft-float</code></dt>\n</dt>\n<dd>\nGenerate output containing library calls for floating point. <strong>Warning:</strong> the requisite libraries are not available for all SPARC targets. Normally the facilities of the machine's usual C compiler are used, but this cannot be done directly in cross-compilation. You must make your own arrangements to provide suitable library functions for cross-compilation. The embedded targets ‘<code>sparc-*-aout</code>’ and ‘<code>sparclite-*-*</code>’ do provide software floating-point support. <p><code>-msoft-float</code> changes the calling convention in the output file; therefore, it is only useful if you compile <em>all</em> of a program with this option. In particular, you need to compile <code>libgcc.a</code>, the library that comes with GCC, with <code>-msoft-float</code> in order for this to work. </p>\n</dd>\n<dt><code>-mhard-quad-float</code></dt>\n<dd>\nGenerate output containing quad-word (long double) floating-point instructions. </dd>\n<dt><code>-msoft-quad-float</code></dt>\n<dd>\nGenerate output containing library calls for quad-word (long double) floating-point instructions. The functions called are those specified in the SPARC ABI. This is the default. <p>As of this writing, there are no SPARC implementations that have hardware support for the quad-word floating-point instructions. They all invoke a trap handler for one of these instructions, and then the trap handler emulates the effect of the instruction. Because of the trap handler overhead, this is much slower than calling the ABI library routines. Thus the <code>-msoft-quad-float</code> option is the default. </p>\n</dd>\n<dt>\n<code>-mno-unaligned-doubles</code><dt><code>-munaligned-doubles</code></dt>\n</dt>\n<dd>\nAssume that doubles have 8-byte alignment. This is the default. <p>With <code>-munaligned-doubles</code>, GCC assumes that doubles have 8-byte alignment only if they are contained in another type, or if they have an absolute address. Otherwise, it assumes they have 4-byte alignment. Specifying this option avoids some rare compatibility problems with code generated by other compilers. It is not the default because it results in a performance loss, especially for floating-point code. </p>\n</dd>\n<dt>\n<code>-muser-mode</code><dt><code>-mno-user-mode</code></dt>\n</dt>\n<dd>\nDo not generate code that can only run in supervisor mode. This is relevant only for the <code>casa</code> instruction emitted for the LEON3 processor. The default is <code>-mno-user-mode</code>. </dd>\n<dt>\n<code>-mno-faster-structs</code><dt><code>-mfaster-structs</code></dt>\n</dt>\n<dd>\nWith <code>-mfaster-structs</code>, the compiler assumes that structures should have 8-byte alignment. This enables the use of pairs of <code>ldd</code> and <code>std</code> instructions for copies in structure assignment, in place of twice as many <code>ld</code> and <code>st</code> pairs. However, the use of this changed alignment directly violates the SPARC ABI. Thus, it's intended only for use on targets where the developer acknowledges that their resulting code is not directly in line with the rules of the ABI. </dd>\n<dt>\n<code>-mcpu=</code><var>cpu_type</var>\n</dt>\n<dd>\nSet the instruction set, register set, and instruction scheduling parameters for machine type <var>cpu_type</var>. Supported values for <var>cpu_type</var> are ‘<code>v7</code>’, ‘<code>cypress</code>’, ‘<code>v8</code>’, ‘<code>supersparc</code>’, ‘<code>hypersparc</code>’, ‘<code>leon</code>’, ‘<code>leon3</code>’, ‘<code>leon3v7</code>’, ‘<code>sparclite</code>’, ‘<code>f930</code>’, ‘<code>f934</code>’, ‘<code>sparclite86x</code>’, ‘<code>sparclet</code>’, ‘<code>tsc701</code>’, ‘<code>v9</code>’, ‘<code>ultrasparc</code>’, ‘<code>ultrasparc3</code>’, ‘<code>niagara</code>’, ‘<code>niagara2</code>’, ‘<code>niagara3</code>’ and ‘<code>niagara4</code>’. <p>Native Solaris and GNU/Linux toolchains also support the value ‘<code>native</code>’, which selects the best architecture option for the host processor. <code>-mcpu=native</code> has no effect if GCC does not recognize the processor. </p>\n<p>Default instruction scheduling parameters are used for values that select an architecture and not an implementation. These are ‘<code>v7</code>’, ‘<code>v8</code>’, ‘<code>sparclite</code>’, ‘<code>sparclet</code>’, ‘<code>v9</code>’. </p>\n<p>Here is a list of each supported architecture and their supported implementations. </p>\n<dl> <dt>v7</dt>\n<dd>cypress, leon3v7 </dd>\n<dt>v8</dt>\n<dd>supersparc, hypersparc, leon, leon3 </dd>\n<dt>sparclite</dt>\n<dd>f930, f934, sparclite86x </dd>\n<dt>sparclet</dt>\n<dd>tsc701 </dd>\n<dt>v9</dt>\n<dd>ultrasparc, ultrasparc3, niagara, niagara2, niagara3, niagara4 </dd>\n</dl> <p>By default (unless configured otherwise), GCC generates code for the V7 variant of the SPARC architecture. With <code>-mcpu=cypress</code>, the compiler additionally optimizes it for the Cypress CY7C602 chip, as used in the SPARCStation/SPARCServer 3xx series. This is also appropriate for the older SPARCStation 1, 2, IPX etc. </p>\n<p>With <code>-mcpu=v8</code>, GCC generates code for the V8 variant of the SPARC architecture. The only difference from V7 code is that the compiler emits the integer multiply and integer divide instructions which exist in SPARC-V8 but not in SPARC-V7. With <code>-mcpu=supersparc</code>, the compiler additionally optimizes it for the SuperSPARC chip, as used in the SPARCStation 10, 1000 and 2000 series. </p>\n<p>With <code>-mcpu=sparclite</code>, GCC generates code for the SPARClite variant of the SPARC architecture. This adds the integer multiply, integer divide step and scan (<code>ffs</code>) instructions which exist in SPARClite but not in SPARC-V7. With <code>-mcpu=f930</code>, the compiler additionally optimizes it for the Fujitsu MB86930 chip, which is the original SPARClite, with no FPU. With <code>-mcpu=f934</code>, the compiler additionally optimizes it for the Fujitsu MB86934 chip, which is the more recent SPARClite with FPU. </p>\n<p>With <code>-mcpu=sparclet</code>, GCC generates code for the SPARClet variant of the SPARC architecture. This adds the integer multiply, multiply/accumulate, integer divide step and scan (<code>ffs</code>) instructions which exist in SPARClet but not in SPARC-V7. With <code>-mcpu=tsc701</code>, the compiler additionally optimizes it for the TEMIC SPARClet chip. </p>\n<p>With <code>-mcpu=v9</code>, GCC generates code for the V9 variant of the SPARC architecture. This adds 64-bit integer and floating-point move instructions, 3 additional floating-point condition code registers and conditional move instructions. With <code>-mcpu=ultrasparc</code>, the compiler additionally optimizes it for the Sun UltraSPARC I/II/IIi chips. With <code>-mcpu=ultrasparc3</code>, the compiler additionally optimizes it for the Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips. With <code>-mcpu=niagara</code>, the compiler additionally optimizes it for Sun UltraSPARC T1 chips. With <code>-mcpu=niagara2</code>, the compiler additionally optimizes it for Sun UltraSPARC T2 chips. With <code>-mcpu=niagara3</code>, the compiler additionally optimizes it for Sun UltraSPARC T3 chips. With <code>-mcpu=niagara4</code>, the compiler additionally optimizes it for Sun UltraSPARC T4 chips. </p>\n</dd>\n<dt>\n<code>-mtune=</code><var>cpu_type</var>\n</dt>\n<dd>\nSet the instruction scheduling parameters for machine type <var>cpu_type</var>, but do not set the instruction set or register set that the option <samp><span class=\"option\">-mcpu=</span><var>cpu_type</var></samp> does. <p>The same values for <samp><span class=\"option\">-mcpu=</span><var>cpu_type</var></samp> can be used for <samp><span class=\"option\">-mtune=</span><var>cpu_type</var></samp>, but the only useful values are those that select a particular CPU implementation. Those are ‘<code>cypress</code>’, ‘<code>supersparc</code>’, ‘<code>hypersparc</code>’, ‘<code>leon</code>’, ‘<code>leon3</code>’, ‘<code>leon3v7</code>’, ‘<code>f930</code>’, ‘<code>f934</code>’, ‘<code>sparclite86x</code>’, ‘<code>tsc701</code>’, ‘<code>ultrasparc</code>’, ‘<code>ultrasparc3</code>’, ‘<code>niagara</code>’, ‘<code>niagara2</code>’, ‘<code>niagara3</code>’ and ‘<code>niagara4</code>’. With native Solaris and GNU/Linux toolchains, ‘<code>native</code>’ can also be used. </p>\n</dd>\n<dt>\n<code>-mv8plus</code><dt><code>-mno-v8plus</code></dt>\n</dt>\n<dd>\nWith <code>-mv8plus</code>, GCC generates code for the SPARC-V8+ ABI. The difference from the V8 ABI is that the global and out registers are considered 64 bits wide. This is enabled by default on Solaris in 32-bit mode for all SPARC-V9 processors. </dd>\n<dt>\n<code>-mvis</code><dt><code>-mno-vis</code></dt>\n</dt>\n<dd>\nWith <code>-mvis</code>, GCC generates code that takes advantage of the UltraSPARC Visual Instruction Set extensions. The default is <code>-mno-vis</code>. </dd>\n<dt>\n<code>-mvis2</code><dt><code>-mno-vis2</code></dt>\n</dt>\n<dd>\nWith <code>-mvis2</code>, GCC generates code that takes advantage of version 2.0 of the UltraSPARC Visual Instruction Set extensions. The default is <code>-mvis2</code> when targeting a cpu that supports such instructions, such as UltraSPARC-III and later. Setting <code>-mvis2</code> also sets <code>-mvis</code>. </dd>\n<dt>\n<code>-mvis3</code><dt><code>-mno-vis3</code></dt>\n</dt>\n<dd>\nWith <code>-mvis3</code>, GCC generates code that takes advantage of version 3.0 of the UltraSPARC Visual Instruction Set extensions. The default is <code>-mvis3</code> when targeting a cpu that supports such instructions, such as niagara-3 and later. Setting <code>-mvis3</code> also sets <code>-mvis2</code> and <code>-mvis</code>. </dd>\n<dt>\n<code>-mcbcond</code><dt><code>-mno-cbcond</code></dt>\n</dt>\n<dd>\nWith <code>-mcbcond</code>, GCC generates code that takes advantage of compare-and-branch instructions, as defined in the Sparc Architecture 2011. The default is <code>-mcbcond</code> when targeting a cpu that supports such instructions, such as niagara-4 and later. </dd>\n<dt>\n<code>-mpopc</code><dt><code>-mno-popc</code></dt>\n</dt>\n<dd>\nWith <code>-mpopc</code>, GCC generates code that takes advantage of the UltraSPARC population count instruction. The default is <code>-mpopc</code> when targeting a cpu that supports such instructions, such as Niagara-2 and later. </dd>\n<dt>\n<code>-mfmaf</code><dt><code>-mno-fmaf</code></dt>\n</dt>\n<dd>\nWith <code>-mfmaf</code>, GCC generates code that takes advantage of the UltraSPARC Fused Multiply-Add Floating-point extensions. The default is <code>-mfmaf</code> when targeting a cpu that supports such instructions, such as Niagara-3 and later. </dd>\n<dt><code>-mfix-at697f</code></dt>\n<dd>\nEnable the documented workaround for the single erratum of the Atmel AT697F processor (which corresponds to erratum #13 of the AT697E processor). </dd>\n<dt><code>-mfix-ut699</code></dt>\n<dd>\nEnable the documented workarounds for the floating-point errata and the data cache nullify errata of the UT699 processor. </dd>\n</dl> <p>These ‘<code>-m</code>’ options are supported in addition to the above on SPARC-V9 processors in 64-bit environments: </p>\n<dl> <dt>\n<code>-m32</code><dt><code>-m64</code></dt>\n</dt>\n<dd>\nGenerate code for a 32-bit or 64-bit environment. The 32-bit environment sets int, long and pointer to 32 bits. The 64-bit environment sets int to 32 bits and long and pointer to 64 bits. </dd>\n<dt>\n<code>-mcmodel=</code><var>which</var>\n</dt>\n<dd>\nSet the code model to one of <dl> <dt>‘<code>medlow</code>’</dt>\n<dd>The Medium/Low code model: 64-bit addresses, programs must be linked in the low 32 bits of memory. Programs can be statically or dynamically linked. </dd>\n<dt>‘<code>medmid</code>’</dt>\n<dd>The Medium/Middle code model: 64-bit addresses, programs must be linked in the low 44 bits of memory, the text and data segments must be less than 2GB in size and the data segment must be located within 2GB of the text segment. </dd>\n<dt>‘<code>medany</code>’</dt>\n<dd>The Medium/Anywhere code model: 64-bit addresses, programs may be linked anywhere in memory, the text and data segments must be less than 2GB in size and the data segment must be located within 2GB of the text segment. </dd>\n<dt>‘<code>embmedany</code>’</dt>\n<dd>The Medium/Anywhere code model for embedded systems: 64-bit addresses, the text and data segments must be less than 2GB in size, both starting anywhere in memory (determined at link time). The global register %g4 points to the base of the data segment. Programs are statically linked and PIC is not supported. </dd>\n</dl> </dd>\n<dt>\n<code>-mmemory-model=</code><var>mem-model</var>\n</dt>\n<dd>\nSet the memory model in force on the processor to one of <dl> <dt>‘<code>default</code>’</dt>\n<dd>The default memory model for the processor and operating system. </dd>\n<dt>‘<code>rmo</code>’</dt>\n<dd>Relaxed Memory Order </dd>\n<dt>‘<code>pso</code>’</dt>\n<dd>Partial Store Order </dd>\n<dt>‘<code>tso</code>’</dt>\n<dd>Total Store Order </dd>\n<dt>‘<code>sc</code>’</dt>\n<dd>Sequential Consistency </dd>\n</dl> <p>These memory models are formally defined in Appendix D of the Sparc V9 architecture manual, as set in the processor's <code>PSTATE.MM</code> field. </p>\n</dd>\n<dt>\n<code>-mstack-bias</code><dt><code>-mno-stack-bias</code></dt>\n</dt>\n<dd>\nWith <code>-mstack-bias</code>, GCC assumes that the stack pointer, and frame pointer if present, are offset by −2047 which must be added back when making stack frame references. This is the default in 64-bit mode. Otherwise, assume no such offset is present. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SPARC-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SPARC-Options.html</a>\n  </p>\n</div>\n","spu-options":"<h1 class=\"subsection\" id=\"SPU-Options\">3.17.45 SPU Options</h1> <p> These ‘<code>-m</code>’ options are supported on the SPU: </p>\n<dl> <dt>\n<code>-mwarn-reloc</code><dt><code>-merror-reloc</code></dt>\n</dt>\n<dd>\n The loader for SPU does not handle dynamic relocations. By default, GCC gives an error when it generates code that requires a dynamic relocation. <code>-mno-error-reloc</code> disables the error, <code>-mwarn-reloc</code> generates a warning instead. </dd>\n<dt>\n<code>-msafe-dma</code><dt><code>-munsafe-dma</code></dt>\n</dt>\n<dd>\n Instructions that initiate or test completion of DMA must not be reordered with respect to loads and stores of the memory that is being accessed. With <code>-munsafe-dma</code> you must use the <code>volatile</code> keyword to protect memory accesses, but that can lead to inefficient code in places where the memory is known to not change. Rather than mark the memory as volatile, you can use <code>-msafe-dma</code> to tell the compiler to treat the DMA instructions as potentially affecting all memory. </dd>\n<dt><code>-mbranch-hints</code></dt>\n<dd>\n By default, GCC generates a branch hint instruction to avoid pipeline stalls for always-taken or probably-taken branches. A hint is not generated closer than 8 instructions away from its branch. There is little reason to disable them, except for debugging purposes, or to make an object a little bit smaller. </dd>\n<dt>\n<code>-msmall-mem</code><dt><code>-mlarge-mem</code></dt>\n</dt>\n<dd>\n By default, GCC generates code assuming that addresses are never larger than 18 bits. With <code>-mlarge-mem</code> code is generated that assumes a full 32-bit address. </dd>\n<dt><code>-mstdmain</code></dt>\n<dd>\n By default, GCC links against startup code that assumes the SPU-style main function interface (which has an unconventional parameter list). With <code>-mstdmain</code>, GCC links your program against startup code that assumes a C99-style interface to <code>main</code>, including a local copy of <code>argv</code> strings. </dd>\n<dt>\n<code>-mfixed-range=</code><var>register-range</var>\n</dt>\n<dd>\nGenerate code treating the given register range as fixed registers. A fixed register is one that the register allocator cannot use. This is useful when compiling kernel code. A register range is specified as two registers separated by a dash. Multiple register ranges can be specified separated by a comma. </dd>\n<dt>\n<code>-mea32</code><dt><code>-mea64</code></dt>\n</dt>\n<dd>\nCompile code assuming that pointers to the PPU address space accessed via the <code>__ea</code> named address space qualifier are either 32 or 64 bits wide. The default is 32 bits. As this is an ABI-changing option, all object code in an executable must be compiled with the same setting. </dd>\n<dt>\n<code>-maddress-space-conversion</code><dt><code>-mno-address-space-conversion</code></dt>\n</dt>\n<dd>\nAllow/disallow treating the <code>__ea</code> address space as superset of the generic address space. This enables explicit type casts between <code>__ea</code> and generic pointer as well as implicit conversions of generic pointers to <code>__ea</code> pointers. The default is to allow address space pointer conversions. </dd>\n<dt>\n<code>-mcache-size=</code><var>cache-size</var>\n</dt>\n<dd>\nThis option controls the version of libgcc that the compiler links to an executable and selects a software-managed cache for accessing variables in the <code>__ea</code> address space with a particular cache size. Possible options for <var>cache-size</var> are ‘<code>8</code>’, ‘<code>16</code>’, ‘<code>32</code>’, ‘<code>64</code>’ and ‘<code>128</code>’. The default cache size is 64KB. </dd>\n<dt>\n<code>-matomic-updates</code><dt><code>-mno-atomic-updates</code></dt>\n</dt>\n<dd>\nThis option controls the version of libgcc that the compiler links to an executable and selects whether atomic updates to the software-managed cache of PPU-side variables are used. If you use atomic updates, changes to a PPU variable from SPU code using the <code>__ea</code> named address space qualifier do not interfere with changes to other PPU variables residing in the same cache line from PPU code. If you do not use atomic updates, such interference may occur; however, writing back cache lines is more efficient. The default behavior is to use atomic updates. </dd>\n<dt>\n<code>-mdual-nops</code><dt>\n<code>-mdual-nops=</code><var>n</var>\n</dt>\n</dt>\n<dd>\nBy default, GCC inserts nops to increase dual issue when it expects it to increase performance. <var>n</var> can be a value from 0 to 10. A smaller <var>n</var> inserts fewer nops. 10 is the default, 0 is the same as <code>-mno-dual-nops</code>. Disabled with <code>-Os</code>. </dd>\n<dt>\n<code>-mhint-max-nops=</code><var>n</var>\n</dt>\n<dd>\nMaximum number of nops to insert for a branch hint. A branch hint must be at least 8 instructions away from the branch it is affecting. GCC inserts up to <var>n</var> nops to enforce this, otherwise it does not generate the branch hint. </dd>\n<dt>\n<code>-mhint-max-distance=</code><var>n</var>\n</dt>\n<dd>\nThe encoding of the branch hint instruction limits the hint to be within 256 instructions of the branch it is affecting. By default, GCC makes sure it is within 125. </dd>\n<dt><code>-msafe-hints</code></dt>\n<dd>\nWork around a hardware bug that causes the SPU to stall indefinitely. By default, GCC inserts the <code>hbrp</code> instruction to make sure this stall won't happen. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SPU-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SPU-Options.html</a>\n  </p>\n</div>\n","system-v-options":"<h1 class=\"subsection\" id=\"System-V-Options\">3.17.46 Options for System V</h1> <p>These additional options are available on System V Release 4 for compatibility with other compilers on those systems: </p>\n<dl> <dt><code>-G</code></dt>\n<dd>\nCreate a shared object. It is recommended that <code>-symbolic</code> or <code>-shared</code> be used instead. </dd>\n<dt><code>-Qy</code></dt>\n<dd>\nIdentify the versions of each tool used by the compiler, in a <code>.ident</code> assembler directive in the output. </dd>\n<dt><code>-Qn</code></dt>\n<dd>\nRefrain from adding <code>.ident</code> directives to the output file (this is the default). </dd>\n<dt>\n<code>-YP,</code><var>dirs</var>\n</dt>\n<dd>\nSearch the directories <var>dirs</var>, and no others, for libraries specified with <code>-l</code>. </dd>\n<dt>\n<code>-Ym,</code><var>dir</var>\n</dt>\n<dd>\nLook in the directory <var>dir</var> to find the M4 preprocessor. The assembler uses this option.   </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/System-V-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/System-V-Options.html</a>\n  </p>\n</div>\n","tile_002dgx-options":"<h1 class=\"subsection\" id=\"TILE_002dGx-Options\">3.17.47 TILE-Gx Options</h1> <p> These ‘<code>-m</code>’ options are supported on the TILE-Gx: </p>\n<dl> <dt><code>-mcmodel=small</code></dt>\n<dd>\nGenerate code for the small model. The distance for direct calls is limited to 500M in either direction. PC-relative addresses are 32 bits. Absolute addresses support the full address range. </dd>\n<dt><code>-mcmodel=large</code></dt>\n<dd>\nGenerate code for the large model. There is no limitation on call distance, pc-relative addresses, or absolute addresses. </dd>\n<dt>\n<code>-mcpu=</code><var>name</var>\n</dt>\n<dd>\nSelects the type of CPU to be targeted. Currently the only supported type is ‘<code>tilegx</code>’. </dd>\n<dt>\n<code>-m32</code><dt><code>-m64</code></dt>\n</dt>\n<dd>\nGenerate code for a 32-bit or 64-bit environment. The 32-bit environment sets int, long, and pointer to 32 bits. The 64-bit environment sets int to 32 bits and long and pointer to 64 bits. </dd>\n<dt>\n<code>-mbig-endian</code><dt><code>-mlittle-endian</code></dt>\n</dt>\n<dd>\nGenerate code in big/little endian mode, respectively. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TILE_002dGx-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TILE_002dGx-Options.html</a>\n  </p>\n</div>\n","tilepro-options":"<h1 class=\"subsection\" id=\"TILEPro-Options\">3.17.48 TILEPro Options</h1> <p> These ‘<code>-m</code>’ options are supported on the TILEPro: </p>\n<dl> <dt>\n<code>-mcpu=</code><var>name</var>\n</dt>\n<dd>\nSelects the type of CPU to be targeted. Currently the only supported type is ‘<code>tilepro</code>’. </dd>\n<dt><code>-m32</code></dt>\n<dd>\nGenerate code for a 32-bit environment, which sets int, long, and pointer to 32 bits. This is the only supported behavior so the flag is essentially ignored. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TILEPro-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TILEPro-Options.html</a>\n  </p>\n</div>\n","v850-options":"<h1 class=\"subsection\" id=\"V850-Options\">3.17.49 V850 Options</h1> <p> These ‘<code>-m</code>’ options are defined for V850 implementations: </p>\n<dl> <dt>\n<code>-mlong-calls</code><dt><code>-mno-long-calls</code></dt>\n</dt>\n<dd>\nTreat all calls as being far away (near). If calls are assumed to be far away, the compiler always loads the function's address into a register, and calls indirect through the pointer. </dd>\n<dt>\n<code>-mno-ep</code><dt><code>-mep</code></dt>\n</dt>\n<dd>\nDo not optimize (do optimize) basic blocks that use the same index pointer 4 or more times to copy pointer into the <code>ep</code> register, and use the shorter <code>sld</code> and <code>sst</code> instructions. The <code>-mep</code> option is on by default if you optimize. </dd>\n<dt>\n<code>-mno-prolog-function</code><dt><code>-mprolog-function</code></dt>\n</dt>\n<dd>\nDo not use (do use) external functions to save and restore registers at the prologue and epilogue of a function. The external functions are slower, but use less code space if more than one function saves the same number of registers. The <code>-mprolog-function</code> option is on by default if you optimize. </dd>\n<dt><code>-mspace</code></dt>\n<dd>\nTry to make the code as small as possible. At present, this just turns on the <code>-mep</code> and <code>-mprolog-function</code> options. </dd>\n<dt>\n<code>-mtda=</code><var>n</var>\n</dt>\n<dd>\nPut static or global variables whose size is <var>n</var> bytes or less into the tiny data area that register <code>ep</code> points to. The tiny data area can hold up to 256 bytes in total (128 bytes for byte references). </dd>\n<dt>\n<code>-msda=</code><var>n</var>\n</dt>\n<dd>\nPut static or global variables whose size is <var>n</var> bytes or less into the small data area that register <code>gp</code> points to. The small data area can hold up to 64 kilobytes. </dd>\n<dt>\n<code>-mzda=</code><var>n</var>\n</dt>\n<dd>\nPut static or global variables whose size is <var>n</var> bytes or less into the first 32 kilobytes of memory. </dd>\n<dt><code>-mv850</code></dt>\n<dd>\nSpecify that the target processor is the V850. </dd>\n<dt><code>-mv850e3v5</code></dt>\n<dd>\nSpecify that the target processor is the V850E3V5. The preprocessor constant ‘<code>__v850e3v5__</code>’ is defined if this option is used. </dd>\n<dt><code>-mv850e2v4</code></dt>\n<dd>\nSpecify that the target processor is the V850E3V5. This is an alias for the <code>-mv850e3v5</code> option. </dd>\n<dt><code>-mv850e2v3</code></dt>\n<dd>\nSpecify that the target processor is the V850E2V3. The preprocessor constant ‘<code>__v850e2v3__</code>’ is defined if this option is used. </dd>\n<dt><code>-mv850e2</code></dt>\n<dd>\nSpecify that the target processor is the V850E2. The preprocessor constant ‘<code>__v850e2__</code>’ is defined if this option is used. </dd>\n<dt><code>-mv850e1</code></dt>\n<dd>\nSpecify that the target processor is the V850E1. The preprocessor constants ‘<code>__v850e1__</code>’ and ‘<code>__v850e__</code>’ are defined if this option is used. </dd>\n<dt><code>-mv850es</code></dt>\n<dd>\nSpecify that the target processor is the V850ES. This is an alias for the <code>-mv850e1</code> option. </dd>\n<dt><code>-mv850e</code></dt>\n<dd>\nSpecify that the target processor is the V850E. The preprocessor constant ‘<code>__v850e__</code>’ is defined if this option is used. <p>If neither <code>-mv850</code> nor <code>-mv850e</code> nor <code>-mv850e1</code> nor <code>-mv850e2</code> nor <code>-mv850e2v3</code> nor <code>-mv850e3v5</code> are defined then a default target processor is chosen and the relevant ‘<code>__v850*__</code>’ preprocessor constant is defined. </p>\n<p>The preprocessor constants ‘<code>__v850</code>’ and ‘<code>__v851__</code>’ are always defined, regardless of which processor variant is the target. </p>\n</dd>\n<dt>\n<code>-mdisable-callt</code><dt><code>-mno-disable-callt</code></dt>\n</dt>\n<dd>\nThis option suppresses generation of the <code>CALLT</code> instruction for the v850e, v850e1, v850e2, v850e2v3 and v850e3v5 flavors of the v850 architecture. <p>This option is enabled by default when the RH850 ABI is in use (see <code>-mrh850-abi</code>), and disabled by default when the GCC ABI is in use. If <code>CALLT</code> instructions are being generated then the C preprocessor symbol <code>__V850_CALLT__</code> will be defined. </p>\n</dd>\n<dt>\n<code>-mrelax</code><dt><code>-mno-relax</code></dt>\n</dt>\n<dd>\nPass on (or do not pass on) the <code>-mrelax</code> command line option to the assembler. </dd>\n<dt>\n<code>-mlong-jumps</code><dt><code>-mno-long-jumps</code></dt>\n</dt>\n<dd>\nDisable (or re-enable) the generation of PC-relative jump instructions. </dd>\n<dt>\n<code>-msoft-float</code><dt><code>-mhard-float</code></dt>\n</dt>\n<dd>\nDisable (or re-enable) the generation of hardware floating point instructions. This option is only significant when the target architecture is ‘<code>V850E2V3</code>’ or higher. If hardware floating point instructions are being generated then the C preprocessor symbol <code>__FPU_OK__</code> will be defined, otherwise the symbol <code>__NO_FPU__</code> will be defined. </dd>\n<dt><code>-mloop</code></dt>\n<dd>\nEnables the use of the e3v5 LOOP instruction. The use of this instruction is not enabled by default when the e3v5 architecture is selected because its use is still experimental. </dd>\n<dt>\n<code>-mrh850-abi</code><dt><code>-mghs</code></dt>\n</dt>\n<dd>\nEnables support for the RH850 version of the V850 ABI. This is the default. With this version of the ABI the following rules apply: <ul> <li>Integer sized structures and unions are returned via a memory pointer rather than a register. </li>\n<li>Large structures and unions (more than 8 bytes in size) are passed by value. </li>\n<li>Functions are aligned to 16-bit boundaries. </li>\n<li>The <code>-m8byte-align</code> command line option is supported. </li>\n<li>The <code>-mdisable-callt</code> command line option is enabled by default. The <code>-mno-disable-callt</code> command line option is not supported. </li>\n</ul> <p>When this version of the ABI is enabled the C preprocessor symbol <code>__V850_RH850_ABI__</code> is defined. </p>\n</dd>\n<dt><code>-mgcc-abi</code></dt>\n<dd>\nEnables support for the old GCC version of the V850 ABI. With this version of the ABI the following rules apply: <ul> <li>Integer sized structures and unions are returned in register <code>r10</code>. </li>\n<li>Large structures and unions (more than 8 bytes in size) are passed by reference. </li>\n<li>Functions are aligned to 32-bit boundaries, unless optimizing for size. </li>\n<li>The <code>-m8byte-align</code> command line option is not supported. </li>\n<li>The <code>-mdisable-callt</code> command line option is supported but not enabled by default. </li>\n</ul> <p>When this version of the ABI is enabled the C preprocessor symbol <code>__V850_GCC_ABI__</code> is defined. </p>\n</dd>\n<dt>\n<code>-m8byte-align</code><dt><code>-mno-8byte-align</code></dt>\n</dt>\n<dd>\nEnables support for <code>doubles</code> and <code>long long</code> types to be aligned on 8-byte boundaries. The default is to restrict the alignment of all objects to at most 4-bytes. When <code>-m8byte-align</code> is in effect the C preprocessor symbol <code>__V850_8BYTE_ALIGN__</code> will be defined. </dd>\n<dt><code>-mbig-switch</code></dt>\n<dd>\nGenerate code suitable for big switch tables. Use this option only if the assembler/linker complain about out of range branches within a switch table. </dd>\n<dt><code>-mapp-regs</code></dt>\n<dd>\nThis option causes r2 and r5 to be used in the code generated by the compiler. This setting is the default. </dd>\n<dt><code>-mno-app-regs</code></dt>\n<dd>\nThis option causes r2 and r5 to be treated as fixed registers. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/V850-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/V850-Options.html</a>\n  </p>\n</div>\n","vax-options":"<h1 class=\"subsection\" id=\"VAX-Options\">3.17.50 VAX Options</h1> <p> These ‘<code>-m</code>’ options are defined for the VAX: </p>\n<dl> <dt><code>-munix</code></dt>\n<dd>\nDo not output certain jump instructions (<code>aobleq</code> and so on) that the Unix assembler for the VAX cannot handle across long ranges. </dd>\n<dt><code>-mgnu</code></dt>\n<dd>\nDo output those jump instructions, on the assumption that the GNU assembler is being used. </dd>\n<dt><code>-mg</code></dt>\n<dd>\nOutput code for G-format floating-point numbers instead of D-format. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/VAX-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/VAX-Options.html</a>\n  </p>\n</div>\n","vms-options":"<h1 class=\"subsection\" id=\"VMS-Options\">3.17.51 VMS Options</h1> <p>These ‘<code>-m</code>’ options are defined for the VMS implementations: </p>\n<dl> <dt><code>-mvms-return-codes</code></dt>\n<dd>\nReturn VMS condition codes from <code>main</code>. The default is to return POSIX-style condition (e.g. error) codes. </dd>\n<dt>\n<code>-mdebug-main=</code><var>prefix</var>\n</dt>\n<dd>\nFlag the first routine whose name starts with <var>prefix</var> as the main routine for the debugger. </dd>\n<dt><code>-mmalloc64</code></dt>\n<dd>\nDefault to 64-bit memory allocation routines. </dd>\n<dt>\n<code>-mpointer-size=</code><var>size</var>\n</dt>\n<dd>\nSet the default size of pointers. Possible options for <var>size</var> are ‘<code>32</code>’ or ‘<code>short</code>’ for 32 bit pointers, ‘<code>64</code>’ or ‘<code>long</code>’ for 64 bit pointers, and ‘<code>no</code>’ for supporting only 32 bit pointers. The later option disables <code>pragma pointer_size</code>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/VMS-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/VMS-Options.html</a>\n  </p>\n</div>\n","vxworks-options":"<h1 class=\"subsection\" id=\"VxWorks-Options\">3.17.52 VxWorks Options</h1> <p> The options in this section are defined for all VxWorks targets. Options specific to the target hardware are listed with the other options for that target. </p>\n<dl> <dt><code>-mrtp</code></dt>\n<dd>\nGCC can generate code for both VxWorks kernels and real time processes (RTPs). This option switches from the former to the latter. It also defines the preprocessor macro <code>__RTP__</code>. </dd>\n<dt><code>-non-static</code></dt>\n<dd>\nLink an RTP executable against shared libraries rather than static libraries. The options <code>-static</code> and <code>-shared</code> can also be used for RTPs (see <a href=\"link-options#Link-Options\">Link Options</a>); <code>-static</code> is the default. </dd>\n<dt>\n<code>-Bstatic</code><dt><code>-Bdynamic</code></dt>\n</dt>\n<dd>\nThese options are passed down to the linker. They are defined for compatibility with Diab. </dd>\n<dt><code>-Xbind-lazy</code></dt>\n<dd>\nEnable lazy binding of function calls. This option is equivalent to <code>-Wl,-z,now</code> and is defined for compatibility with Diab. </dd>\n<dt><code>-Xbind-now</code></dt>\n<dd>\nDisable lazy binding of function calls. This option is the default and is defined for compatibility with Diab. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/VxWorks-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/VxWorks-Options.html</a>\n  </p>\n</div>\n","x86_002d64-options":"<h1 class=\"subsection\" id=\"x86_002d64-Options\">3.17.53 x86-64 Options</h1> <p> These are listed under See <a href=\"i386-and-x86_002d64-options#i386-and-x86_002d64-Options\">i386 and x86-64 Options</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/x86_002d64-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/x86_002d64-Options.html</a>\n  </p>\n</div>\n","xstormy16-options":"<h1 class=\"subsection\" id=\"Xstormy16-Options\">3.17.54 Xstormy16 Options</h1> <p> These options are defined for Xstormy16: </p>\n<dl> <dt><code>-msim</code></dt>\n<dd>\nChoose startup files and linker script suitable for the simulator. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Xstormy16-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Xstormy16-Options.html</a>\n  </p>\n</div>\n","xtensa-options":"<h1 class=\"subsection\" id=\"Xtensa-Options\">3.17.55 Xtensa Options</h1> <p> These options are supported for Xtensa targets: </p>\n<dl> <dt>\n<code>-mconst16</code><dt><code>-mno-const16</code></dt>\n</dt>\n<dd>\nEnable or disable use of <code>CONST16</code> instructions for loading constant values. The <code>CONST16</code> instruction is currently not a standard option from Tensilica. When enabled, <code>CONST16</code> instructions are always used in place of the standard <code>L32R</code> instructions. The use of <code>CONST16</code> is enabled by default only if the <code>L32R</code> instruction is not available. </dd>\n<dt>\n<code>-mfused-madd</code><dt><code>-mno-fused-madd</code></dt>\n</dt>\n<dd>\nEnable or disable use of fused multiply/add and multiply/subtract instructions in the floating-point option. This has no effect if the floating-point option is not also enabled. Disabling fused multiply/add and multiply/subtract instructions forces the compiler to use separate instructions for the multiply and add/subtract operations. This may be desirable in some cases where strict IEEE 754-compliant results are required: the fused multiply add/subtract instructions do not round the intermediate result, thereby producing results with <em>more</em> bits of precision than specified by the IEEE standard. Disabling fused multiply add/subtract instructions also ensures that the program output is not sensitive to the compiler's ability to combine multiply and add/subtract operations. </dd>\n<dt>\n<code>-mserialize-volatile</code><dt><code>-mno-serialize-volatile</code></dt>\n</dt>\n<dd>\nWhen this option is enabled, GCC inserts <code>MEMW</code> instructions before <code>volatile</code> memory references to guarantee sequential consistency. The default is <code>-mserialize-volatile</code>. Use <code>-mno-serialize-volatile</code> to omit the <code>MEMW</code> instructions. </dd>\n<dt><code>-mforce-no-pic</code></dt>\n<dd>\nFor targets, like GNU/Linux, where all user-mode Xtensa code must be position-independent code (PIC), this option disables PIC for compiling kernel code. </dd>\n<dt>\n<code>-mtext-section-literals</code><dt><code>-mno-text-section-literals</code></dt>\n</dt>\n<dd>\nControl the treatment of literal pools. The default is <code>-mno-text-section-literals</code>, which places literals in a separate section in the output file. This allows the literal pool to be placed in a data RAM/ROM, and it also allows the linker to combine literal pools from separate object files to remove redundant literals and improve code size. With <code>-mtext-section-literals</code>, the literals are interspersed in the text section in order to keep them as close as possible to their references. This may be necessary for large assembly files. </dd>\n<dt>\n<code>-mtarget-align</code><dt><code>-mno-target-align</code></dt>\n</dt>\n<dd>\nWhen this option is enabled, GCC instructs the assembler to automatically align instructions to reduce branch penalties at the expense of some code density. The assembler attempts to widen density instructions to align branch targets and the instructions following call instructions. If there are not enough preceding safe density instructions to align a target, no widening is performed. The default is <code>-mtarget-align</code>. These options do not affect the treatment of auto-aligned instructions like <code>LOOP</code>, which the assembler always aligns, either by widening density instructions or by inserting NOP instructions. </dd>\n<dt>\n<code>-mlongcalls</code><dt><code>-mno-longcalls</code></dt>\n</dt>\n<dd>\nWhen this option is enabled, GCC instructs the assembler to translate direct calls to indirect calls unless it can determine that the target of a direct call is in the range allowed by the call instruction. This translation typically occurs for calls to functions in other source files. Specifically, the assembler translates a direct <code>CALL</code> instruction into an <code>L32R</code> followed by a <code>CALLX</code> instruction. The default is <code>-mno-longcalls</code>. This option should be used in programs where the call target can potentially be out of range. This option is implemented in the assembler, not the compiler, so the assembly code generated by GCC still shows direct call instructions—look at the disassembled object code to see the actual instructions. Note that the assembler uses an indirect call for every cross-file call, not just those that really are out of range. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Xtensa-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Xtensa-Options.html</a>\n  </p>\n</div>\n","zseries-options":"<h1 class=\"subsection\" id=\"zSeries-Options\">3.17.56 zSeries Options</h1> <p> These are listed under See <a href=\"s_002f390-and-zseries-options#S_002f390-and-zSeries-Options\">S/390 and zSeries Options</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/zSeries-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/zSeries-Options.html</a>\n  </p>\n</div>\n","code-gen-options":"<h1 class=\"section\" id=\"Code-Gen-Options\">3.18 Options for Code Generation Conventions</h1> <p> These machine-independent options control the interface conventions used in code generation. </p>\n<p>Most of them have both positive and negative forms; the negative form of <code>-ffoo</code> is <code>-fno-foo</code>. In the table below, only one of the forms is listed—the one that is not the default. You can figure out the other form by either removing ‘<code>no-</code>’ or adding it. </p>\n<dl> <dt><code>-fbounds-check</code></dt>\n<dd>\nFor front ends that support it, generate additional code to check that indices used to access arrays are within the declared range. This is currently only supported by the Java and Fortran front ends, where this option defaults to true and false respectively. </dd>\n<dt>\n<code>-fstack-reuse=</code><var>reuse-level</var>\n</dt>\n<dd>\nThis option controls stack space reuse for user declared local/auto variables and compiler generated temporaries. <var>reuse_level</var> can be ‘<code>all</code>’, ‘<code>named_vars</code>’, or ‘<code>none</code>’. ‘<code>all</code>’ enables stack reuse for all local variables and temporaries, ‘<code>named_vars</code>’ enables the reuse only for user defined local variables with names, and ‘<code>none</code>’ disables stack reuse completely. The default value is ‘<code>all</code>’. The option is needed when the program extends the lifetime of a scoped local variable or a compiler generated temporary beyond the end point defined by the language. When a lifetime of a variable ends, and if the variable lives in memory, the optimizing compiler has the freedom to reuse its stack space with other temporaries or scoped local variables whose live range does not overlap with it. Legacy code extending local lifetime will likely to break with the stack reuse optimization. <p>For example, </p>\n<pre class=\"smallexample\">int *p;\n{\n  int local1;\n          \n  p = &amp;local1;\n  local1 = 10;\n  ....\n}\n{\n   int local2;\n   local2 = 20;\n   ...\n}\n          \nif (*p == 10)  // out of scope use of local1\n  {\n          \n  }</pre> <p>Another example: </p>\n<pre class=\"smallexample\">struct A\n{\n    A(int k) : i(k), j(k) { }\n    int i;\n    int j;\n};\n          \nA *ap;\n          \nvoid foo(const A&amp; ar)\n{\n   ap = &amp;ar;\n}\n          \nvoid bar()\n{\n   foo(A(10)); // temp object's lifetime ends when foo returns\n          \n   {\n     A a(20);\n     ....\n   }\n   ap-&gt;i+= 10;  // ap references out of scope temp whose space\n                // is reused with a. What is the value of ap-&gt;i?\n}</pre> <p>The lifetime of a compiler generated temporary is well defined by the C++ standard. When a lifetime of a temporary ends, and if the temporary lives in memory, the optimizing compiler has the freedom to reuse its stack space with other temporaries or scoped local variables whose live range does not overlap with it. However some of the legacy code relies on the behavior of older compilers in which temporaries' stack space is not reused, the aggressive stack reuse can lead to runtime errors. This option is used to control the temporary stack reuse optimization. </p>\n</dd>\n<dt><code>-ftrapv</code></dt>\n<dd>\nThis option generates traps for signed overflow on addition, subtraction, multiplication operations. </dd>\n<dt><code>-fwrapv</code></dt>\n<dd>\nThis option instructs the compiler to assume that signed arithmetic overflow of addition, subtraction and multiplication wraps around using twos-complement representation. This flag enables some optimizations and disables others. This option is enabled by default for the Java front end, as required by the Java language specification. </dd>\n<dt><code>-fexceptions</code></dt>\n<dd>\nEnable exception handling. Generates extra code needed to propagate exceptions. For some targets, this implies GCC generates frame unwind information for all functions, which can produce significant data size overhead, although it does not affect execution. If you do not specify this option, GCC enables it by default for languages like C++ that normally require exception handling, and disables it for languages like C that do not normally require it. However, you may need to enable this option when compiling C code that needs to interoperate properly with exception handlers written in C++. You may also wish to disable this option if you are compiling older C++ programs that don't use exception handling. </dd>\n<dt><code>-fnon-call-exceptions</code></dt>\n<dd>\nGenerate code that allows trapping instructions to throw exceptions. Note that this requires platform-specific runtime support that does not exist everywhere. Moreover, it only allows <em>trapping</em> instructions to throw exceptions, i.e. memory references or floating-point instructions. It does not allow exceptions to be thrown from arbitrary signal handlers such as <code>SIGALRM</code>. </dd>\n<dt><code>-fdelete-dead-exceptions</code></dt>\n<dd>\nConsider that instructions that may throw exceptions but don't otherwise contribute to the execution of the program can be optimized away. This option is enabled by default for the Ada front end, as permitted by the Ada language specification. Optimization passes that cause dead exceptions to be removed are enabled independently at different optimization levels. </dd>\n<dt><code>-funwind-tables</code></dt>\n<dd>\nSimilar to <code>-fexceptions</code>, except that it just generates any needed static data, but does not affect the generated code in any other way. You normally do not need to enable this option; instead, a language processor that needs this handling enables it on your behalf. </dd>\n<dt><code>-fasynchronous-unwind-tables</code></dt>\n<dd>\nGenerate unwind table in DWARF 2 format, if supported by target machine. The table is exact at each instruction boundary, so it can be used for stack unwinding from asynchronous events (such as debugger or garbage collector). </dd>\n<dt><code>-fno-gnu-unique</code></dt>\n<dd>\nOn systems with recent GNU assembler and C library, the C++ compiler uses the <code>STB_GNU_UNIQUE</code> binding to make sure that definitions of template static data members and static local variables in inline functions are unique even in the presence of <code>RTLD_LOCAL</code>; this is necessary to avoid problems with a library used by two different <code>RTLD_LOCAL</code> plugins depending on a definition in one of them and therefore disagreeing with the other one about the binding of the symbol. But this causes <code>dlclose</code> to be ignored for affected DSOs; if your program relies on reinitialization of a DSO via <code>dlclose</code> and <code>dlopen</code>, you can use <code>-fno-gnu-unique</code>. </dd>\n<dt><code>-fpcc-struct-return</code></dt>\n<dd>\nReturn “short” <code>struct</code> and <code>union</code> values in memory like longer ones, rather than in registers. This convention is less efficient, but it has the advantage of allowing intercallability between GCC-compiled files and files compiled with other compilers, particularly the Portable C Compiler (pcc). <p>The precise convention for returning structures in memory depends on the target configuration macros. </p>\n<p>Short structures and unions are those whose size and alignment match that of some integer type. </p>\n<p><strong>Warning:</strong> code compiled with the <code>-fpcc-struct-return</code> switch is not binary compatible with code compiled with the <code>-freg-struct-return</code> switch. Use it to conform to a non-default application binary interface. </p>\n</dd>\n<dt><code>-freg-struct-return</code></dt>\n<dd>\nReturn <code>struct</code> and <code>union</code> values in registers when possible. This is more efficient for small structures than <code>-fpcc-struct-return</code>. <p>If you specify neither <code>-fpcc-struct-return</code> nor <code>-freg-struct-return</code>, GCC defaults to whichever convention is standard for the target. If there is no standard convention, GCC defaults to <code>-fpcc-struct-return</code>, except on targets where GCC is the principal compiler. In those cases, we can choose the standard, and we chose the more efficient register return alternative. </p>\n<p><strong>Warning:</strong> code compiled with the <code>-freg-struct-return</code> switch is not binary compatible with code compiled with the <code>-fpcc-struct-return</code> switch. Use it to conform to a non-default application binary interface. </p>\n</dd>\n<dt><code>-fshort-enums</code></dt>\n<dd>\nAllocate to an <code>enum</code> type only as many bytes as it needs for the declared range of possible values. Specifically, the <code>enum</code> type is equivalent to the smallest integer type that has enough room. <p><strong>Warning:</strong> the <code>-fshort-enums</code> switch causes GCC to generate code that is not binary compatible with code generated without that switch. Use it to conform to a non-default application binary interface. </p>\n</dd>\n<dt><code>-fshort-double</code></dt>\n<dd>\nUse the same size for <code>double</code> as for <code>float</code>. <p><strong>Warning:</strong> the <code>-fshort-double</code> switch causes GCC to generate code that is not binary compatible with code generated without that switch. Use it to conform to a non-default application binary interface. </p>\n</dd>\n<dt><code>-fshort-wchar</code></dt>\n<dd>\nOverride the underlying type for ‘<code>wchar_t</code>’ to be ‘<code>short unsigned int</code>’ instead of the default for the target. This option is useful for building programs to run under WINE. <p><strong>Warning:</strong> the <code>-fshort-wchar</code> switch causes GCC to generate code that is not binary compatible with code generated without that switch. Use it to conform to a non-default application binary interface. </p>\n</dd>\n<dt><code>-fno-common</code></dt>\n<dd>\nIn C code, controls the placement of uninitialized global variables. Unix C compilers have traditionally permitted multiple definitions of such variables in different compilation units by placing the variables in a common block. This is the behavior specified by <code>-fcommon</code>, and is the default for GCC on most targets. On the other hand, this behavior is not required by ISO C, and on some targets may carry a speed or code size penalty on variable references. The <code>-fno-common</code> option specifies that the compiler should place uninitialized global variables in the data section of the object file, rather than generating them as common blocks. This has the effect that if the same variable is declared (without <code>extern</code>) in two different compilations, you get a multiple-definition error when you link them. In this case, you must compile with <code>-fcommon</code> instead. Compiling with <code>-fno-common</code> is useful on targets for which it provides better performance, or if you wish to verify that the program will work on other systems that always treat uninitialized variable declarations this way. </dd>\n<dt><code>-fno-ident</code></dt>\n<dd>\nIgnore the ‘<code>#ident</code>’ directive. </dd>\n<dt><code>-finhibit-size-directive</code></dt>\n<dd>\nDon't output a <code>.size</code> assembler directive, or anything else that would cause trouble if the function is split in the middle, and the two halves are placed at locations far apart in memory. This option is used when compiling <code>crtstuff.c</code>; you should not need to use it for anything else. </dd>\n<dt><code>-fverbose-asm</code></dt>\n<dd>\nPut extra commentary information in the generated assembly code to make it more readable. This option is generally only of use to those who actually need to read the generated assembly code (perhaps while debugging the compiler itself). <p><code>-fno-verbose-asm</code>, the default, causes the extra information to be omitted and is useful when comparing two assembler files. </p>\n</dd>\n<dt><code>-frecord-gcc-switches</code></dt>\n<dd>\nThis switch causes the command line used to invoke the compiler to be recorded into the object file that is being created. This switch is only implemented on some targets and the exact format of the recording is target and binary file format dependent, but it usually takes the form of a section containing ASCII text. This switch is related to the <code>-fverbose-asm</code> switch, but that switch only records information in the assembler output file as comments, so it never reaches the object file. See also <code>-grecord-gcc-switches</code> for another way of storing compiler options into the object file. </dd>\n<dt><code>-fpic</code></dt>\n<dd>\nGenerate position-independent code (PIC) suitable for use in a shared library, if supported for the target machine. Such code accesses all constant addresses through a global offset table (GOT). The dynamic loader resolves the GOT entries when the program starts (the dynamic loader is not part of GCC; it is part of the operating system). If the GOT size for the linked executable exceeds a machine-specific maximum size, you get an error message from the linker indicating that <code>-fpic</code> does not work; in that case, recompile with <code>-fPIC</code> instead. (These maximums are 8k on the SPARC and 32k on the m68k and RS/6000. The 386 has no such limit.) <p>Position-independent code requires special support, and therefore works only on certain machines. For the 386, GCC supports PIC for System V but not for the Sun 386i. Code generated for the IBM RS/6000 is always position-independent. </p>\n<p>When this flag is set, the macros <code>__pic__</code> and <code>__PIC__</code> are defined to 1. </p>\n</dd>\n<dt><code>-fPIC</code></dt>\n<dd>\nIf supported for the target machine, emit position-independent code, suitable for dynamic linking and avoiding any limit on the size of the global offset table. This option makes a difference on the m68k, PowerPC and SPARC. <p>Position-independent code requires special support, and therefore works only on certain machines. </p>\n<p>When this flag is set, the macros <code>__pic__</code> and <code>__PIC__</code> are defined to 2. </p>\n</dd>\n<dt>\n<code>-fpie</code><dt><code>-fPIE</code></dt>\n</dt>\n<dd>\nThese options are similar to <code>-fpic</code> and <code>-fPIC</code>, but generated position independent code can be only linked into executables. Usually these options are used when <code>-pie</code> GCC option is used during linking. <p><code>-fpie</code> and <code>-fPIE</code> both define the macros <code>__pie__</code> and <code>__PIE__</code>. The macros have the value 1 for <code>-fpie</code> and 2 for <code>-fPIE</code>. </p>\n</dd>\n<dt><code>-fno-jump-tables</code></dt>\n<dd>\nDo not use jump tables for switch statements even where it would be more efficient than other code generation strategies. This option is of use in conjunction with <code>-fpic</code> or <code>-fPIC</code> for building code that forms part of a dynamic linker and cannot reference the address of a jump table. On some targets, jump tables do not require a GOT and this option is not needed. </dd>\n<dt>\n<code>-ffixed-</code><var>reg</var>\n</dt>\n<dd>\nTreat the register named <var>reg</var> as a fixed register; generated code should never refer to it (except perhaps as a stack pointer, frame pointer or in some other fixed role). <p><var>reg</var> must be the name of a register. The register names accepted are machine-specific and are defined in the <code>REGISTER_NAMES</code> macro in the machine description macro file. </p>\n<p>This flag does not have a negative form, because it specifies a three-way choice. </p>\n</dd>\n<dt>\n<code>-fcall-used-</code><var>reg</var>\n</dt>\n<dd>\nTreat the register named <var>reg</var> as an allocable register that is clobbered by function calls. It may be allocated for temporaries or variables that do not live across a call. Functions compiled this way do not save and restore the register <var>reg</var>. <p>It is an error to use this flag with the frame pointer or stack pointer. Use of this flag for other registers that have fixed pervasive roles in the machine's execution model produces disastrous results. </p>\n<p>This flag does not have a negative form, because it specifies a three-way choice. </p>\n</dd>\n<dt>\n<code>-fcall-saved-</code><var>reg</var>\n</dt>\n<dd>\nTreat the register named <var>reg</var> as an allocable register saved by functions. It may be allocated even for temporaries or variables that live across a call. Functions compiled this way save and restore the register <var>reg</var> if they use it. <p>It is an error to use this flag with the frame pointer or stack pointer. Use of this flag for other registers that have fixed pervasive roles in the machine's execution model produces disastrous results. </p>\n<p>A different sort of disaster results from the use of this flag for a register in which function values may be returned. </p>\n<p>This flag does not have a negative form, because it specifies a three-way choice. </p>\n</dd>\n<dt>\n<code>-fpack-struct[=</code><var>n</var><code>]</code>\n</dt>\n<dd>\nWithout a value specified, pack all structure members together without holes. When a value is specified (which must be a small power of two), pack structure members according to this value, representing the maximum alignment (that is, objects with default alignment requirements larger than this are output potentially unaligned at the next fitting location. <p><strong>Warning:</strong> the <code>-fpack-struct</code> switch causes GCC to generate code that is not binary compatible with code generated without that switch. Additionally, it makes the code suboptimal. Use it to conform to a non-default application binary interface. </p>\n</dd>\n<dt><code>-finstrument-functions</code></dt>\n<dd>\nGenerate instrumentation calls for entry and exit to functions. Just after function entry and just before function exit, the following profiling functions are called with the address of the current function and its call site. (On some platforms, <code>__builtin_return_address</code> does not work beyond the current function, so the call site information may not be available to the profiling functions otherwise.) <pre class=\"smallexample\">void __cyg_profile_func_enter (void *this_fn,\n                               void *call_site);\nvoid __cyg_profile_func_exit  (void *this_fn,\n                               void *call_site);</pre> <p>The first argument is the address of the start of the current function, which may be looked up exactly in the symbol table. </p>\n<p>This instrumentation is also done for functions expanded inline in other functions. The profiling calls indicate where, conceptually, the inline function is entered and exited. This means that addressable versions of such functions must be available. If all your uses of a function are expanded inline, this may mean an additional expansion of code size. If you use ‘<code>extern inline</code>’ in your C code, an addressable version of such functions must be provided. (This is normally the case anyway, but if you get lucky and the optimizer always expands the functions inline, you might have gotten away without providing static copies.) </p>\n<p>A function may be given the attribute <code>no_instrument_function</code>, in which case this instrumentation is not done. This can be used, for example, for the profiling functions listed above, high-priority interrupt routines, and any functions from which the profiling functions cannot safely be called (perhaps signal handlers, if the profiling routines generate output or allocate memory). </p>\n</dd>\n<dt>\n<code>-finstrument-functions-exclude-file-list=</code><var>file</var><code>,</code><var>file</var><code>,...</code>\n</dt>\n<dd>\n Set the list of functions that are excluded from instrumentation (see the description of <code>-finstrument-functions</code>). If the file that contains a function definition matches with one of <var>file</var>, then that function is not instrumented. The match is done on substrings: if the <var>file</var> parameter is a substring of the file name, it is considered to be a match. <p>For example: </p>\n<pre class=\"smallexample\">-finstrument-functions-exclude-file-list=/bits/stl,include/sys</pre> <p class=\"noindent\">excludes any inline function defined in files whose pathnames contain <code>/bits/stl</code> or <code>include/sys</code>. </p>\n<p>If, for some reason, you want to include letter <code>','</code> in one of <var>sym</var>, write <code>'\\,'</code>. For example, <code>-finstrument-functions-exclude-file-list='\\,\\,tmp'</code> (note the single quote surrounding the option). </p>\n</dd>\n<dt>\n<code>-finstrument-functions-exclude-function-list=</code><var>sym</var><code>,</code><var>sym</var><code>,...</code>\n</dt>\n<dd>\n This is similar to <code>-finstrument-functions-exclude-file-list</code>, but this option sets the list of function names to be excluded from instrumentation. The function name to be matched is its user-visible name, such as <code>vector&lt;int&gt; blah(const vector&lt;int&gt; &amp;)</code>, not the internal mangled name (e.g., <code>_Z4blahRSt6vectorIiSaIiEE</code>). The match is done on substrings: if the <var>sym</var> parameter is a substring of the function name, it is considered to be a match. For C99 and C++ extended identifiers, the function name must be given in UTF-8, not using universal character names. </dd>\n<dt><code>-fstack-check</code></dt>\n<dd>\nGenerate code to verify that you do not go beyond the boundary of the stack. You should specify this flag if you are running in an environment with multiple threads, but you only rarely need to specify it in a single-threaded environment since stack overflow is automatically detected on nearly all systems if there is only one stack. <p>Note that this switch does not actually cause checking to be done; the operating system or the language runtime must do that. The switch causes generation of code to ensure that they see the stack being extended. </p>\n<p>You can additionally specify a string parameter: <code>no</code> means no checking, <code>generic</code> means force the use of old-style checking, <code>specific</code> means use the best checking method and is equivalent to bare <code>-fstack-check</code>. </p>\n<p>Old-style checking is a generic mechanism that requires no specific target support in the compiler but comes with the following drawbacks: </p>\n<ol type=\"1\" start=\"1\"> <li>Modified allocation strategy for large objects: they are always allocated dynamically if their size exceeds a fixed threshold. </li>\n<li>Fixed limit on the size of the static frame of functions: when it is topped by a particular function, stack checking is not reliable and a warning is issued by the compiler. </li>\n<li>Inefficiency: because of both the modified allocation strategy and the generic implementation, code performance is hampered. </li>\n</ol> <p>Note that old-style stack checking is also the fallback method for <code>specific</code> if no target support has been added in the compiler. </p>\n</dd>\n<dt>\n<code>-fstack-limit-register=</code><var>reg</var><dt>\n<code>-fstack-limit-symbol=</code><var>sym</var><dt><code>-fno-stack-limit</code></dt>\n</dt>\n</dt>\n<dd>\nGenerate code to ensure that the stack does not grow beyond a certain value, either the value of a register or the address of a symbol. If a larger stack is required, a signal is raised at run time. For most targets, the signal is raised before the stack overruns the boundary, so it is possible to catch the signal without taking special precautions. <p>For instance, if the stack starts at absolute address ‘<code>0x80000000</code>’ and grows downwards, you can use the flags <code>-fstack-limit-symbol=__stack_limit</code> and <code>-Wl,--defsym,__stack_limit=0x7ffe0000</code> to enforce a stack limit of 128KB. Note that this may only work with the GNU linker. </p>\n</dd>\n<dt><code>-fsplit-stack</code></dt>\n<dd>\nGenerate code to automatically split the stack before it overflows. The resulting program has a discontiguous stack which can only overflow if the program is unable to allocate any more memory. This is most useful when running threaded programs, as it is no longer necessary to calculate a good stack size to use for each thread. This is currently only implemented for the i386 and x86_64 back ends running GNU/Linux. <p>When code compiled with <code>-fsplit-stack</code> calls code compiled without <code>-fsplit-stack</code>, there may not be much stack space available for the latter code to run. If compiling all code, including library code, with <code>-fsplit-stack</code> is not an option, then the linker can fix up these calls so that the code compiled without <code>-fsplit-stack</code> always has a large stack. Support for this is implemented in the gold linker in GNU binutils release 2.21 and later. </p>\n</dd>\n<dt><code>-fleading-underscore</code></dt>\n<dd>\nThis option and its counterpart, <code>-fno-leading-underscore</code>, forcibly change the way C symbols are represented in the object file. One use is to help link with legacy assembly code. <p><strong>Warning:</strong> the <code>-fleading-underscore</code> switch causes GCC to generate code that is not binary compatible with code generated without that switch. Use it to conform to a non-default application binary interface. Not all targets provide complete support for this switch. </p>\n</dd>\n<dt>\n<code>-ftls-model=</code><var>model</var>\n</dt>\n<dd>\nAlter the thread-local storage model to be used (see <a href=\"thread_002dlocal#Thread_002dLocal\">Thread-Local</a>). The <var>model</var> argument should be one of <code>global-dynamic</code>, <code>local-dynamic</code>, <code>initial-exec</code> or <code>local-exec</code>. Note that the choice is subject to optimization: the compiler may use a more efficient model for symbols not visible outside of the translation unit, or if <code>-fpic</code> is not given on the command line. <p>The default without <code>-fpic</code> is <code>initial-exec</code>; with <code>-fpic</code> the default is <code>global-dynamic</code>. </p>\n</dd>\n<dt>\n<code>-fvisibility=</code><var>default|internal|hidden|protected</var>\n</dt>\n<dd>\nSet the default ELF image symbol visibility to the specified option—all symbols are marked with this unless overridden within the code. Using this feature can very substantially improve linking and load times of shared object libraries, produce more optimized code, provide near-perfect API export and prevent symbol clashes. It is <strong>strongly</strong> recommended that you use this in any shared objects you distribute. <p>Despite the nomenclature, <code>default</code> always means public; i.e., available to be linked against from outside the shared object. <code>protected</code> and <code>internal</code> are pretty useless in real-world usage so the only other commonly used option is <code>hidden</code>. The default if <code>-fvisibility</code> isn't specified is <code>default</code>, i.e., make every symbol public—this causes the same behavior as previous versions of GCC. </p>\n<p>A good explanation of the benefits offered by ensuring ELF symbols have the correct visibility is given by “How To Write Shared Libraries” by Ulrich Drepper (which can be found at <a href=\"http://people.redhat.com/~drepper/\">http://people.redhat.com/~drepper/</a>)—however a superior solution made possible by this option to marking things hidden when the default is public is to make the default hidden and mark things public. This is the norm with DLLs on Windows and with <code>-fvisibility=hidden</code> and <code>__attribute__ ((visibility(\"default\")))</code> instead of <code>__declspec(dllexport)</code> you get almost identical semantics with identical syntax. This is a great boon to those working with cross-platform projects. </p>\n<p>For those adding visibility support to existing code, you may find ‘<code>#pragma GCC visibility</code>’ of use. This works by you enclosing the declarations you wish to set visibility for with (for example) ‘<code>#pragma GCC visibility push(hidden)</code>’ and ‘<code>#pragma GCC visibility pop</code>’. Bear in mind that symbol visibility should be viewed <strong>as part of the API interface contract</strong> and thus all new code should always specify visibility when it is not the default; i.e., declarations only for use within the local DSO should <strong>always</strong> be marked explicitly as hidden as so to avoid PLT indirection overheads—making this abundantly clear also aids readability and self-documentation of the code. Note that due to ISO C++ specification requirements, <code>operator new</code> and <code>operator delete</code> must always be of default visibility. </p>\n<p>Be aware that headers from outside your project, in particular system headers and headers from any other library you use, may not be expecting to be compiled with visibility other than the default. You may need to explicitly say ‘<code>#pragma GCC visibility push(default)</code>’ before including any such headers. </p>\n<p>‘<code>extern</code>’ declarations are not affected by <code>-fvisibility</code>, so a lot of code can be recompiled with <code>-fvisibility=hidden</code> with no modifications. However, this means that calls to <code>extern</code> functions with no explicit visibility use the PLT, so it is more effective to use <code>__attribute ((visibility))</code> and/or <code>#pragma GCC visibility</code> to tell the compiler which <code>extern</code> declarations should be treated as hidden. </p>\n<p>Note that <code>-fvisibility</code> does affect C++ vague linkage entities. This means that, for instance, an exception class that is be thrown between DSOs must be explicitly marked with default visibility so that the ‘<code>type_info</code>’ nodes are unified between the DSOs. </p>\n<p>An overview of these techniques, their benefits and how to use them is at <a href=\"http://gcc.gnu.org/wiki/Visibility\">http://gcc.gnu.org/wiki/Visibility</a>. </p>\n</dd>\n<dt><code>-fstrict-volatile-bitfields</code></dt>\n<dd>\nThis option should be used if accesses to volatile bit-fields (or other structure fields, although the compiler usually honors those types anyway) should use a single access of the width of the field's type, aligned to a natural alignment if possible. For example, targets with memory-mapped peripheral registers might require all such accesses to be 16 bits wide; with this flag you can declare all peripheral bit-fields as <code>unsigned short</code> (assuming short is 16 bits on these targets) to force GCC to use 16-bit accesses instead of, perhaps, a more efficient 32-bit access. <p>If this option is disabled, the compiler uses the most efficient instruction. In the previous example, that might be a 32-bit load instruction, even though that accesses bytes that do not contain any portion of the bit-field, or memory-mapped registers unrelated to the one being updated. </p>\n<p>In some cases, such as when the <code>packed</code> attribute is applied to a structure field, it may not be possible to access the field with a single read or write that is correctly aligned for the target machine. In this case GCC falls back to generating multiple accesses rather than code that will fault or truncate the result at run time. </p>\n<p>Note: Due to restrictions of the C/C++11 memory model, write accesses are not allowed to touch non bit-field members. It is therefore recommended to define all bits of the field's type as bit-field members. </p>\n<p>The default value of this option is determined by the application binary interface for the target processor. </p>\n</dd>\n<dt><code>-fsync-libcalls</code></dt>\n<dd>\nThis option controls whether any out-of-line instance of the <code>__sync</code> family of functions may be used to implement the C++11 <code>__atomic</code> family of functions. <p>The default value of this option is enabled, thus the only useful form of the option is <code>-fno-sync-libcalls</code>. This option is used in the implementation of the <code>libatomic</code> runtime library. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Code-Gen-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Code-Gen-Options.html</a>\n  </p>\n</div>\n","environment-variables":"<h1 class=\"section\" id=\"Environment-Variables\">3.19 Environment Variables Affecting GCC</h1> <p>  This section describes several environment variables that affect how GCC operates. Some of them work by specifying directories or prefixes to use when searching for various kinds of files. Some are used to specify other aspects of the compilation environment. </p>\n<p>Note that you can also specify places to search using options such as <code>-B</code>, <code>-I</code> and <code>-L</code> (see <a href=\"directory-options#Directory-Options\">Directory Options</a>). These take precedence over places specified using environment variables, which in turn take precedence over those specified by the configuration of GCC. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gccint/Driver.html#Driver\">Controlling the Compilation Driver <code>gcc</code></a>. </p>\n<dl> <dt>\n<code>LANG</code><dt><code>LC_CTYPE</code></dt>\n</dt>\n\n<dt><code>LC_MESSAGES</code></dt>\n\n<dt><code>LC_ALL</code></dt>\n<dd>\n    These environment variables control the way that GCC uses localization information which allows GCC to work with different national conventions. GCC inspects the locale categories <code>LC_CTYPE</code> and <code>LC_MESSAGES</code> if it has been configured to do so. These locale categories can be set to any value supported by your installation. A typical value is ‘<code>en_GB.UTF-8</code>’ for English in the United Kingdom encoded in UTF-8. <p>The <code>LC_CTYPE</code> environment variable specifies character classification. GCC uses it to determine the character boundaries in a string; this is needed for some multibyte encodings that contain quote and escape characters that are otherwise interpreted as a string end or escape. </p>\n<p>The <code>LC_MESSAGES</code> environment variable specifies the language to use in diagnostic messages. </p>\n<p>If the <code>LC_ALL</code> environment variable is set, it overrides the value of <code>LC_CTYPE</code> and <code>LC_MESSAGES</code>; otherwise, <code>LC_CTYPE</code> and <code>LC_MESSAGES</code> default to the value of the <code>LANG</code> environment variable. If none of these variables are set, GCC defaults to traditional C English behavior. </p>\n</dd>\n<dt><code>TMPDIR</code></dt>\n<dd>\nIf <code>TMPDIR</code> is set, it specifies the directory to use for temporary files. GCC uses temporary files to hold the output of one stage of compilation which is to be used as input to the next stage: for example, the output of the preprocessor, which is the input to the compiler proper. </dd>\n<dt><code>GCC_COMPARE_DEBUG</code></dt>\n<dd>\nSetting <code>GCC_COMPARE_DEBUG</code> is nearly equivalent to passing <code>-fcompare-debug</code> to the compiler driver. See the documentation of this option for more details. </dd>\n<dt><code>GCC_EXEC_PREFIX</code></dt>\n<dd>\nIf <code>GCC_EXEC_PREFIX</code> is set, it specifies a prefix to use in the names of the subprograms executed by the compiler. No slash is added when this prefix is combined with the name of a subprogram, but you can specify a prefix that ends with a slash if you wish. <p>If <code>GCC_EXEC_PREFIX</code> is not set, GCC attempts to figure out an appropriate prefix to use based on the pathname it is invoked with. </p>\n<p>If GCC cannot find the subprogram using the specified prefix, it tries looking in the usual places for the subprogram. </p>\n<p>The default value of <code>GCC_EXEC_PREFIX</code> is <samp><var>prefix</var><span class=\"file\">/lib/gcc/</span></samp> where <var>prefix</var> is the prefix to the installed compiler. In many cases <var>prefix</var> is the value of <code>prefix</code> when you ran the <code>configure</code> script. </p>\n<p>Other prefixes specified with <code>-B</code> take precedence over this prefix. </p>\n<p>This prefix is also used for finding files such as <code>crt0.o</code> that are used for linking. </p>\n<p>In addition, the prefix is used in an unusual way in finding the directories to search for header files. For each of the standard directories whose name normally begins with ‘<code>/usr/local/lib/gcc</code>’ (more precisely, with the value of <code>GCC_INCLUDE_DIR</code>), GCC tries replacing that beginning with the specified prefix to produce an alternate directory name. Thus, with <code>-Bfoo/</code>, GCC searches <code>foo/bar</code> just before it searches the standard directory <code>/usr/local/lib/bar</code>. If a standard directory begins with the configured <var>prefix</var> then the value of <var>prefix</var> is replaced by <code>GCC_EXEC_PREFIX</code> when looking for header files. </p>\n</dd>\n<dt><code>COMPILER_PATH</code></dt>\n<dd>\nThe value of <code>COMPILER_PATH</code> is a colon-separated list of directories, much like <code>PATH</code>. GCC tries the directories thus specified when searching for subprograms, if it can't find the subprograms using <code>GCC_EXEC_PREFIX</code>. </dd>\n<dt><code>LIBRARY_PATH</code></dt>\n<dd>\nThe value of <code>LIBRARY_PATH</code> is a colon-separated list of directories, much like <code>PATH</code>. When configured as a native compiler, GCC tries the directories thus specified when searching for special linker files, if it can't find them using <code>GCC_EXEC_PREFIX</code>. Linking using GCC also uses these directories when searching for ordinary libraries for the <code>-l</code> option (but directories specified with <code>-L</code> come first). </dd>\n<dt><code>LANG</code></dt>\n<dd>\nThis variable is used to pass locale information to the compiler. One way in which this information is used is to determine the character set to be used when character literals, string literals and comments are parsed in C and C++. When the compiler is configured to allow multibyte characters, the following values for <code>LANG</code> are recognized: <dl> <dt>‘<code>C-JIS</code>’</dt>\n<dd>Recognize JIS characters. </dd>\n<dt>‘<code>C-SJIS</code>’</dt>\n<dd>Recognize SJIS characters. </dd>\n<dt>‘<code>C-EUCJP</code>’</dt>\n<dd>Recognize EUCJP characters. </dd>\n</dl> <p>If <code>LANG</code> is not defined, or if it has some other value, then the compiler uses <code>mblen</code> and <code>mbtowc</code> as defined by the default locale to recognize and translate multibyte characters. </p>\n</dd>\n</dl> <p class=\"noindent\">Some additional environment variables affect the behavior of the preprocessor.         </p>\n<dl> <dt>\n<code>CPATH</code><dt>\n<code>C_INCLUDE_PATH</code><dt>\n<code>CPLUS_INCLUDE_PATH</code><dt>\n<code>OBJC_INCLUDE_PATH</code>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>  Each variable's value is a list of directories separated by a special character, much like <code>PATH</code>, in which to look for header files. The special character, <code>PATH_SEPARATOR</code>, is target-dependent and determined at GCC build time. For Microsoft Windows-based targets it is a semicolon, and for almost all other targets it is a colon. <p><code>CPATH</code> specifies a list of directories to be searched as if specified with <code>-I</code>, but after any paths given with <code>-I</code> options on the command line. This environment variable is used regardless of which language is being preprocessed. </p>\n<p>The remaining environment variables apply only when preprocessing the particular language indicated. Each specifies a list of directories to be searched as if specified with <code>-isystem</code>, but after any paths given with <code>-isystem</code> options on the command line. </p>\n<p>In all these variables, an empty element instructs the compiler to search its current working directory. Empty elements can appear at the beginning or end of a path. For instance, if the value of <code>CPATH</code> is <code>:/special/include</code>, that has the same effect as ‘<code>-I. -I/special/include</code>’.   </p>\n</dd>\n<dt>\n<code>DEPENDENCIES_OUTPUT</code>\n</dt>\n<dd>\nIf this variable is set, its value specifies how to output dependencies for Make based on the non-system header files processed by the compiler. System header files are ignored in the dependency output. <p>The value of <code>DEPENDENCIES_OUTPUT</code> can be just a file name, in which case the Make rules are written to that file, guessing the target name from the source file name. Or the value can have the form ‘<samp><var>file</var> <var>target</var></samp>’, in which case the rules are written to file <var>file</var> using <var>target</var> as the target name. </p>\n<p>In other words, this environment variable is equivalent to combining the options <code>-MM</code> and <code>-MF</code> (see <a href=\"preprocessor-options#Preprocessor-Options\">Preprocessor Options</a>), with an optional <code>-MT</code> switch too. </p>\n</dd>\n<dt>\n<code>SUNPRO_DEPENDENCIES</code>\n</dt>\n<dd>\nThis variable is the same as <code>DEPENDENCIES_OUTPUT</code> (see above), except that system header files are not ignored, so it implies <code>-M</code> rather than <code>-MM</code>. However, the dependence on the main input file is omitted. See <a href=\"preprocessor-options#Preprocessor-Options\">Preprocessor Options</a>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Environment-Variables.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Environment-Variables.html</a>\n  </p>\n</div>\n","precompiled-headers":"<h1 class=\"section\" id=\"Precompiled-Headers\">3.20 Using Precompiled Headers</h1> <p> Often large projects have many header files that are included in every source file. The time the compiler takes to process these header files over and over again can account for nearly all of the time required to build the project. To make builds faster, GCC allows you to precompile a header file. </p>\n<p>To create a precompiled header file, simply compile it as you would any other file, if necessary using the <code>-x</code> option to make the driver treat it as a C or C++ header file. You may want to use a tool like <code>make</code> to keep the precompiled header up-to-date when the headers it contains change. </p>\n<p>A precompiled header file is searched for when <code>#include</code> is seen in the compilation. As it searches for the included file (see <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Search-Path.html#Search-Path\">Search Path</a>) the compiler looks for a precompiled header in each directory just before it looks for the include file in that directory. The name searched for is the name specified in the <code>#include</code> with ‘<code>.gch</code>’ appended. If the precompiled header file can't be used, it is ignored. </p>\n<p>For instance, if you have <code>#include \"all.h\"</code>, and you have <code>all.h.gch</code> in the same directory as <code>all.h</code>, then the precompiled header file is used if possible, and the original header is used otherwise. </p>\n<p>Alternatively, you might decide to put the precompiled header file in a directory and use <code>-I</code> to ensure that directory is searched before (or instead of) the directory containing the original header. Then, if you want to check that the precompiled header file is always used, you can put a file of the same name as the original header in this directory containing an <code>#error</code> command. </p>\n<p>This also works with <code>-include</code>. So yet another way to use precompiled headers, good for projects not designed with precompiled header files in mind, is to simply take most of the header files used by a project, include them from another header file, precompile that header file, and <code>-include</code> the precompiled header. If the header files have guards against multiple inclusion, they are skipped because they've already been included (in the precompiled header). </p>\n<p>If you need to precompile the same header file for different languages, targets, or compiler options, you can instead make a <em>directory</em> named like <code>all.h.gch</code>, and put each precompiled header in the directory, perhaps using <code>-o</code>. It doesn't matter what you call the files in the directory; every precompiled header in the directory is considered. The first precompiled header encountered in the directory that is valid for this compilation is used; they're searched in no particular order. </p>\n<p>There are many other possibilities, limited only by your imagination, good sense, and the constraints of your build system. </p>\n<p>A precompiled header file can be used only when these conditions apply: </p>\n<ul> <li>Only one precompiled header can be used in a particular compilation. </li>\n<li>A precompiled header can't be used once the first C token is seen. You can have preprocessor directives before a precompiled header; you cannot include a precompiled header from inside another header. </li>\n<li>The precompiled header file must be produced for the same language as the current compilation. You can't use a C precompiled header for a C++ compilation. </li>\n<li>The precompiled header file must have been produced by the same compiler binary as the current compilation is using. </li>\n<li>Any macros defined before the precompiled header is included must either be defined in the same way as when the precompiled header was generated, or must not affect the precompiled header, which usually means that they don't appear in the precompiled header at all. <p>The <code>-D</code> option is one way to define a macro before a precompiled header is included; using a <code>#define</code> can also do it. There are also some options that define macros implicitly, like <code>-O</code> and <code>-Wdeprecated</code>; the same rule applies to macros defined this way. </p>\n</li>\n<li>If debugging information is output when using the precompiled header, using <code>-g</code> or similar, the same kind of debugging information must have been output when building the precompiled header. However, a precompiled header built using <code>-g</code> can be used in a compilation when no debugging information is being output. </li>\n<li>The same <code>-m</code> options must generally be used when building and using the precompiled header. See <a href=\"submodel-options#Submodel-Options\">Submodel Options</a>, for any cases where this rule is relaxed. </li>\n<li>Each of the following options must be the same when building and using the precompiled header: <pre class=\"smallexample\">-fexceptions</pre> </li>\n<li>Some other command-line options starting with <code>-f</code>, <code>-p</code>, or <code>-O</code> must be defined in the same way as when the precompiled header was generated. At present, it's not clear which options are safe to change and which are not; the safest choice is to use exactly the same options when generating and using the precompiled header. The following are known to be safe: <pre class=\"smallexample\">-fmessage-length=  -fpreprocessed  -fsched-interblock \n-fsched-spec  -fsched-spec-load  -fsched-spec-load-dangerous \n-fsched-verbose=<var>number</var>  -fschedule-insns  -fvisibility= \n-pedantic-errors</pre> </li>\n</ul> <p>For all of these except the last, the compiler automatically ignores the precompiled header if the conditions aren't met. If you find an option combination that doesn't work and doesn't cause the precompiled header to be ignored, please consider filing a bug report, see <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Bugs.html#Bugs\">Bugs</a>. </p>\n<p>If you do use differing options when generating and using the precompiled header, the actual behavior is a mixture of the behavior for the options. For instance, if you use <code>-g</code> to generate the precompiled header but not when using it, you may or may not get debugging information for routines in the precompiled header.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Precompiled-Headers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Precompiled-Headers.html</a>\n  </p>\n</div>\n","c-implementation":"<h1 class=\"chapter\" id=\"C-Implementation\">4 C Implementation-defined behavior</h1> <p> A conforming implementation of ISO C is required to document its choice of behavior in each of the areas that are designated “implementation defined”. The following lists all such areas, along with the section numbers from the ISO/IEC 9899:1990, ISO/IEC 9899:1999 and ISO/IEC 9899:2011 standards. Some areas are only implementation-defined in one version of the standard. </p>\n<p>Some choices depend on the externally determined ABI for the platform (including standard character encodings) which GCC follows; these are listed as “determined by ABI” below. See <a href=\"compatibility#Compatibility\">Binary Compatibility</a>, and <a href=\"http://gcc.gnu.org/readings.html\">http://gcc.gnu.org/readings.html</a>. Some choices are documented in the preprocessor manual. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. Some choices are made by the library and operating system (or other environment when compiling for a freestanding environment); refer to their documentation for details. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"translation-implementation#Translation-implementation\">Translation implementation</a> </li>\n<li>\n<a accesskey=\"2\" href=\"environment-implementation#Environment-implementation\">Environment implementation</a> </li>\n<li>\n<a accesskey=\"3\" href=\"identifiers-implementation#Identifiers-implementation\">Identifiers implementation</a> </li>\n<li>\n<a accesskey=\"4\" href=\"characters-implementation#Characters-implementation\">Characters implementation</a> </li>\n<li>\n<a accesskey=\"5\" href=\"integers-implementation#Integers-implementation\">Integers implementation</a> </li>\n<li>\n<a accesskey=\"6\" href=\"floating-point-implementation#Floating-point-implementation\">Floating point implementation</a> </li>\n<li>\n<a accesskey=\"7\" href=\"arrays-and-pointers-implementation#Arrays-and-pointers-implementation\">Arrays and pointers implementation</a> </li>\n<li>\n<a accesskey=\"8\" href=\"hints-implementation#Hints-implementation\">Hints implementation</a> </li>\n<li>\n<a accesskey=\"9\" href=\"structures-unions-enumerations-and-bit_002dfields-implementation#Structures-unions-enumerations-and-bit_002dfields-implementation\">Structures unions enumerations and bit-fields implementation</a> </li>\n<li>\n<a href=\"qualifiers-implementation#Qualifiers-implementation\">Qualifiers implementation</a> </li>\n<li>\n<a href=\"declarators-implementation#Declarators-implementation\">Declarators implementation</a> </li>\n<li>\n<a href=\"statements-implementation#Statements-implementation\">Statements implementation</a> </li>\n<li>\n<a href=\"preprocessing-directives-implementation#Preprocessing-directives-implementation\">Preprocessing directives implementation</a> </li>\n<li>\n<a href=\"library-functions-implementation#Library-functions-implementation\">Library functions implementation</a> </li>\n<li>\n<a href=\"architecture-implementation#Architecture-implementation\">Architecture implementation</a> </li>\n<li>\n<a href=\"locale_002dspecific-behavior-implementation#Locale_002dspecific-behavior-implementation\">Locale-specific behavior implementation</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C-Implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C-Implementation.html</a>\n  </p>\n</div>\n","translation-implementation":"<h1 class=\"section\" id=\"Translation-implementation\">4.1 Translation</h1> <ul> <li>How a diagnostic is identified (C90 3.7, C99 and C11 3.10, C90, C99 and C11 5.1.1.3). <p>Diagnostics consist of all the output sent to stderr by GCC. </p>\n</li>\n<li>Whether each nonempty sequence of white-space characters other than new-line is retained or replaced by one space character in translation phase 3 (C90, C99 and C11 5.1.1.2). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Translation-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Translation-implementation.html</a>\n  </p>\n</div>\n","environment-implementation":"<h1 class=\"section\" id=\"Environment-implementation\">4.2 Environment</h1> <p>The behavior of most of these points are dependent on the implementation of the C library, and are not defined by GCC itself. </p>\n<ul> <li>The mapping between physical source file multibyte characters and the source character set in translation phase 1 (C90, C99 and C11 5.1.1.2). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Environment-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Environment-implementation.html</a>\n  </p>\n</div>\n","identifiers-implementation":"<h1 class=\"section\" id=\"Identifiers-implementation\">4.3 Identifiers</h1> <ul> <li>Which additional multibyte characters may appear in identifiers and their correspondence to universal character names (C99 and C11 6.4.2). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. </p>\n</li>\n<li>The number of significant initial characters in an identifier (C90 6.1.2, C90, C99 and C11 5.2.4.1, C99 and C11 6.4.2). <p>For internal names, all characters are significant. For external names, the number of significant characters are defined by the linker; for almost all targets, all characters are significant. </p>\n</li>\n<li>Whether case distinctions are significant in an identifier with external linkage (C90 6.1.2). <p>This is a property of the linker. C99 and C11 require that case distinctions are always significant in identifiers with external linkage and systems without this property are not supported by GCC. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Identifiers-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Identifiers-implementation.html</a>\n  </p>\n</div>\n","characters-implementation":"<h1 class=\"section\" id=\"Characters-implementation\">4.4 Characters</h1> <ul> <li>The number of bits in a byte (C90 3.4, C99 and C11 3.6). <p>Determined by ABI. </p>\n</li>\n<li>The values of the members of the execution character set (C90, C99 and C11 5.2.1). <p>Determined by ABI. </p>\n</li>\n<li>The unique value of the member of the execution character set produced for each of the standard alphabetic escape sequences (C90, C99 and C11 5.2.2). <p>Determined by ABI. </p>\n</li>\n<li>The value of a <code>char</code> object into which has been stored any character other than a member of the basic execution character set (C90 6.1.2.5, C99 and C11 6.2.5). <p>Determined by ABI. </p>\n</li>\n<li>Which of <code>signed char</code> or <code>unsigned char</code> has the same range, representation, and behavior as “plain” <code>char</code> (C90 6.1.2.5, C90 6.2.1.1, C99 and C11 6.2.5, C99 and C11 6.3.1.1). <p>Determined by ABI. The options <code>-funsigned-char</code> and <code>-fsigned-char</code> change the default. See <a href=\"c-dialect-options#C-Dialect-Options\">Options Controlling C Dialect</a>. </p>\n</li>\n<li>The mapping of members of the source character set (in character constants and string literals) to members of the execution character set (C90 6.1.3.4, C99 and C11 6.4.4.4, C90, C99 and C11 5.1.1.2). <p>Determined by ABI. </p>\n</li>\n<li>The value of an integer character constant containing more than one character or containing a character or escape sequence that does not map to a single-byte execution character (C90 6.1.3.4, C99 and C11 6.4.4.4). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. </p>\n</li>\n<li>The value of a wide character constant containing more than one multibyte character or a single multibyte character that maps to multiple members of the extended execution character set, or containing a multibyte character or escape sequence not represented in the extended execution character set (C90 6.1.3.4, C99 and C11 6.4.4.4). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. </p>\n</li>\n<li>The current locale used to convert a wide character constant consisting of a single multibyte character that maps to a member of the extended execution character set into a corresponding wide character code (C90 6.1.3.4, C99 and C11 6.4.4.4). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. </p>\n</li>\n<li>Whether differently-prefixed wide string literal tokens can be concatenated and, if so, the treatment of the resulting multibyte character sequence (C11 6.4.5). <p>Such tokens may not be concatenated. </p>\n</li>\n<li>The current locale used to convert a wide string literal into corresponding wide character codes (C90 6.1.4, C99 and C11 6.4.5). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. </p>\n</li>\n<li>The value of a string literal containing a multibyte character or escape sequence not represented in the execution character set (C90 6.1.4, C99 and C11 6.4.5). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. </p>\n</li>\n<li>The encoding of any of <code>wchar_t</code>, <code>char16_t</code>, and <code>char32_t</code> where the corresponding standard encoding macro (<code>__STDC_ISO_10646__</code>, <code>__STDC_UTF_16__</code>, or <code>__STDC_UTF_32__</code>) is not defined (C11 6.10.8.2). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. <code>char16_t</code> and <code>char32_t</code> literals are always encoded in UTF-16 and UTF-32 respectively. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Characters-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Characters-implementation.html</a>\n  </p>\n</div>\n","integers-implementation":"<h1 class=\"section\" id=\"Integers-implementation\">4.5 Integers</h1> <ul> <li>Any extended integer types that exist in the implementation (C99 and C11 6.2.5). <p>GCC does not support any extended integer types.       </p>\n</li>\n<li>Whether signed integer types are represented using sign and magnitude, two's complement, or one's complement, and whether the extraordinary value is a trap representation or an ordinary value (C99 and C11 6.2.6.2). <p>GCC supports only two's complement integer types, and all bit patterns are ordinary values. </p>\n</li>\n<li>The rank of any extended integer type relative to another extended integer type with the same precision (C99 and C11 6.3.1.1). <p>GCC does not support any extended integer types.  </p>\n</li>\n<li>The result of, or the signal raised by, converting an integer to a signed integer type when the value cannot be represented in an object of that type (C90 6.2.1.2, C99 and C11 6.3.1.3). <p>For conversion to a type of width N, the value is reduced modulo 2^N to be within range of the type; no signal is raised. </p>\n</li>\n<li>The results of some bitwise operations on signed integers (C90 6.3, C99 and C11 6.5). <p>Bitwise operators act on the representation of the value including both the sign and value bits, where the sign bit is considered immediately above the highest-value value bit. Signed ‘<code>&gt;&gt;</code>’ acts on negative numbers by sign extension. </p>\n<p>GCC does not use the latitude given in C99 and C11 only to treat certain aspects of signed ‘<code>&lt;&lt;</code>’ as undefined, but this is subject to change. </p>\n</li>\n<li>The sign of the remainder on integer division (C90 6.3.5). <p>GCC always follows the C99 and C11 requirement that the result of division is truncated towards zero. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Integers-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Integers-implementation.html</a>\n  </p>\n</div>\n","floating-point-implementation":"<h1 class=\"section\" id=\"Floating-point-implementation\">4.6 Floating point</h1> <ul> <li>The accuracy of the floating-point operations and of the library functions in <code>&lt;math.h&gt;</code> and <code>&lt;complex.h&gt;</code> that return floating-point results (C90, C99 and C11 5.2.4.2.2). <p>The accuracy is unknown. </p>\n</li>\n<li>The rounding behaviors characterized by non-standard values of <code>FLT_ROUNDS</code> (C90, C99 and C11 5.2.4.2.2). <p>GCC does not use such values. </p>\n</li>\n<li>The evaluation methods characterized by non-standard negative values of <code>FLT_EVAL_METHOD</code> (C99 and C11 5.2.4.2.2). <p>GCC does not use such values. </p>\n</li>\n<li>The direction of rounding when an integer is converted to a floating-point number that cannot exactly represent the original value (C90 6.2.1.3, C99 and C11 6.3.1.4). <p>C99 Annex F is followed. </p>\n</li>\n<li>The direction of rounding when a floating-point number is converted to a narrower floating-point number (C90 6.2.1.4, C99 and C11 6.3.1.5). <p>C99 Annex F is followed. </p>\n</li>\n<li>How the nearest representable value or the larger or smaller representable value immediately adjacent to the nearest representable value is chosen for certain floating constants (C90 6.1.3.1, C99 and C11 6.4.4.2). <p>C99 Annex F is followed. </p>\n</li>\n<li>Whether and how floating expressions are contracted when not disallowed by the <code>FP_CONTRACT</code> pragma (C99 and C11 6.5). <p>Expressions are currently only contracted if <code>-ffp-contract=fast</code>, <code>-funsafe-math-optimizations</code> or <code>-ffast-math</code> are used. This is subject to change. </p>\n</li>\n<li>The default state for the <code>FENV_ACCESS</code> pragma (C99 and C11 7.6.1). <p>This pragma is not implemented, but the default is to “off” unless <code>-frounding-math</code> is used in which case it is “on”. </p>\n</li>\n<li>Additional floating-point exceptions, rounding modes, environments, and classifications, and their macro names (C99 and C11 7.6, C99 and C11 7.12). <p>This is dependent on the implementation of the C library, and is not defined by GCC itself. </p>\n</li>\n<li>The default state for the <code>FP_CONTRACT</code> pragma (C99 and C11 7.12.2). <p>This pragma is not implemented. Expressions are currently only contracted if <code>-ffp-contract=fast</code>, <code>-funsafe-math-optimizations</code> or <code>-ffast-math</code> are used. This is subject to change. </p>\n</li>\n<li>Whether the “inexact” floating-point exception can be raised when the rounded result actually does equal the mathematical result in an IEC 60559 conformant implementation (C99 F.9). <p>This is dependent on the implementation of the C library, and is not defined by GCC itself. </p>\n</li>\n<li>Whether the “underflow” (and “inexact”) floating-point exception can be raised when a result is tiny but not inexact in an IEC 60559 conformant implementation (C99 F.9). <p>This is dependent on the implementation of the C library, and is not defined by GCC itself. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Floating-point-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Floating-point-implementation.html</a>\n  </p>\n</div>\n","arrays-and-pointers-implementation":"<h1 class=\"section\" id=\"Arrays-and-pointers-implementation\">4.7 Arrays and pointers</h1> <ul> <li>The result of converting a pointer to an integer or vice versa (C90 6.3.4, C99 and C11 6.3.2.3). <p>A cast from pointer to integer discards most-significant bits if the pointer representation is larger than the integer type, sign-extends<a rel=\"footnote\" href=\"#fn-1\" name=\"fnd-1\" id=\"fnd-1\"><sup>1</sup></a> if the pointer representation is smaller than the integer type, otherwise the bits are unchanged.      </p>\n<p>A cast from integer to pointer discards most-significant bits if the pointer representation is smaller than the integer type, extends according to the signedness of the integer type if the pointer representation is larger than the integer type, otherwise the bits are unchanged. </p>\n<p>When casting from pointer to integer and back again, the resulting pointer must reference the same object as the original pointer, otherwise the behavior is undefined. That is, one may not use integer arithmetic to avoid the undefined behavior of pointer arithmetic as proscribed in C99 and C11 6.5.6/8. </p>\n</li>\n<li>The size of the result of subtracting two pointers to elements of the same array (C90 6.3.6, C99 and C11 6.5.6). <p>The value is as specified in the standard and the type is determined by the ABI. </p>\n</li>\n</ul> <div class=\"footnote\">  <h2>Footnotes</h2>\n<p class=\"footnote\"><small>[<a name=\"fn-1\" href=\"#fnd-1\" id=\"fn-1\">1</a>]</small> Future versions of GCC may zero-extend, or use a target-defined <code>ptr_extend</code> pattern. Do not rely on sign extension.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Arrays-and-pointers-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Arrays-and-pointers-implementation.html</a>\n  </p>\n</div>\n","hints-implementation":"<h1 class=\"section\" id=\"Hints-implementation\">4.8 Hints</h1> <ul> <li>The extent to which suggestions made by using the <code>register</code> storage-class specifier are effective (C90 6.5.1, C99 and C11 6.7.1). <p>The <code>register</code> specifier affects code generation only in these ways: </p>\n<ul> <li>When used as part of the register variable extension, see <a href=\"explicit-reg-vars#Explicit-Reg-Vars\">Explicit Reg Vars</a>. </li>\n<li>When <code>-O0</code> is in use, the compiler allocates distinct stack memory for all variables that do not have the <code>register</code> storage-class specifier; if <code>register</code> is specified, the variable may have a shorter lifespan than the code would indicate and may never be placed in memory. </li>\n<li>On some rare x86 targets, <code>setjmp</code> doesn't save the registers in all circumstances. In those cases, GCC doesn't allocate any variables in registers unless they are marked <code>register</code>. </li>\n</ul> </li>\n<li>The extent to which suggestions made by using the inline function specifier are effective (C99 and C11 6.7.4). <p>GCC will not inline any functions if the <code>-fno-inline</code> option is used or if <code>-O0</code> is used. Otherwise, GCC may still be unable to inline a function for many reasons; the <code>-Winline</code> option may be used to determine if a function has not been inlined and why not. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Hints-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Hints-implementation.html</a>\n  </p>\n</div>\n","structures-unions-enumerations-and-bit_002dfields-implementation":"<h1 class=\"section\" id=\"Structures-unions-enumerations-and-bit_002dfields-implementation\">4.9 Structures, unions, enumerations, and bit-fields</h1> <ul> <li>A member of a union object is accessed using a member of a different type (C90 6.3.2.3). <p>The relevant bytes of the representation of the object are treated as an object of the type used for the access. See <a href=\"optimize-options#Type_002dpunning\">Type-punning</a>. This may be a trap representation. </p>\n</li>\n<li>Whether a “plain” <code>int</code> bit-field is treated as a <code>signed int</code> bit-field or as an <code>unsigned int</code> bit-field (C90 6.5.2, C90 6.5.2.1, C99 and C11 6.7.2, C99 and C11 6.7.2.1). <p>By default it is treated as <code>signed int</code> but this may be changed by the <code>-funsigned-bitfields</code> option. </p>\n</li>\n<li>Allowable bit-field types other than <code>_Bool</code>, <code>signed int</code>, and <code>unsigned int</code> (C99 and C11 6.7.2.1). <p>Other integer types, such as <code>long int</code>, and enumerated types are permitted even in strictly conforming mode. </p>\n</li>\n<li>Whether atomic types are permitted for bit-fields (C11 6.7.2.1). <p>Atomic types are not permitted for bit-fields. </p>\n</li>\n<li>Whether a bit-field can straddle a storage-unit boundary (C90 6.5.2.1, C99 and C11 6.7.2.1). <p>Determined by ABI. </p>\n</li>\n<li>The order of allocation of bit-fields within a unit (C90 6.5.2.1, C99 and C11 6.7.2.1). <p>Determined by ABI. </p>\n</li>\n<li>The alignment of non-bit-field members of structures (C90 6.5.2.1, C99 and C11 6.7.2.1). <p>Determined by ABI. </p>\n</li>\n<li>The integer type compatible with each enumerated type (C90 6.5.2.2, C99 and C11 6.7.2.2). <p>Normally, the type is <code>unsigned int</code> if there are no negative values in the enumeration, otherwise <code>int</code>. If <code>-fshort-enums</code> is specified, then if there are negative values it is the first of <code>signed char</code>, <code>short</code> and <code>int</code> that can represent all the values, otherwise it is the first of <code>unsigned char</code>, <code>unsigned short</code> and <code>unsigned int</code> that can represent all the values.       </p>\n<p>On some targets, <code>-fshort-enums</code> is the default; this is determined by the ABI. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Structures-unions-enumerations-and-bit_002dfields-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Structures-unions-enumerations-and-bit_002dfields-implementation.html</a>\n  </p>\n</div>\n","qualifiers-implementation":"<h1 class=\"section\" id=\"Qualifiers-implementation\">4.10 Qualifiers</h1> <ul> <li>What constitutes an access to an object that has volatile-qualified type (C90 6.5.3, C99 and C11 6.7.3). <p>Such an object is normally accessed by pointers and used for accessing hardware. In most expressions, it is intuitively obvious what is a read and what is a write. For example </p>\n<pre class=\"smallexample\">volatile int *dst = <var>somevalue</var>;\nvolatile int *src = <var>someothervalue</var>;\n*dst = *src;</pre> <p class=\"noindent\">will cause a read of the volatile object pointed to by <var>src</var> and store the value into the volatile object pointed to by <var>dst</var>. There is no guarantee that these reads and writes are atomic, especially for objects larger than <code>int</code>. </p>\n<p>However, if the volatile storage is not being modified, and the value of the volatile storage is not used, then the situation is less obvious. For example </p>\n<pre class=\"smallexample\">volatile int *src = <var>somevalue</var>;\n*src;</pre> <p>According to the C standard, such an expression is an rvalue whose type is the unqualified version of its original type, i.e. <code>int</code>. Whether GCC interprets this as a read of the volatile object being pointed to or only as a request to evaluate the expression for its side-effects depends on this type. </p>\n<p>If it is a scalar type, or on most targets an aggregate type whose only member object is of a scalar type, or a union type whose member objects are of scalar types, the expression is interpreted by GCC as a read of the volatile object; in the other cases, the expression is only evaluated for its side-effects. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Qualifiers-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Qualifiers-implementation.html</a>\n  </p>\n</div>\n","declarators-implementation":"<h1 class=\"section\" id=\"Declarators-implementation\">4.11 Declarators</h1> <ul> <li>The maximum number of declarators that may modify an arithmetic, structure or union type (C90 6.5.4). <p>GCC is only limited by available memory. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Declarators-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Declarators-implementation.html</a>\n  </p>\n</div>\n","statements-implementation":"<h1 class=\"section\" id=\"Statements-implementation\">4.12 Statements</h1> <ul> <li>The maximum number of <code>case</code> values in a <code>switch</code> statement (C90 6.6.4.2). <p>GCC is only limited by available memory. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Statements-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Statements-implementation.html</a>\n  </p>\n</div>\n","preprocessing-directives-implementation":"<h1 class=\"section\" id=\"Preprocessing-directives-implementation\">4.13 Preprocessing directives</h1> <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>, for details of these aspects of implementation-defined behavior. </p>\n<ul> <li>The locations within <code>#pragma</code> directives where header name preprocessing tokens are recognized (C11 6.4, C11 6.4.7). </li>\n<li>How sequences in both forms of header names are mapped to headers or external source file names (C90 6.1.7, C99 and C11 6.4.7). </li>\n<li>Whether the value of a character constant in a constant expression that controls conditional inclusion matches the value of the same character constant in the execution character set (C90 6.8.1, C99 and C11 6.10.1). </li>\n<li>Whether the value of a single-character character constant in a constant expression that controls conditional inclusion may have a negative value (C90 6.8.1, C99 and C11 6.10.1). </li>\n<li>The places that are searched for an included ‘<code>&lt;&gt;</code>’ delimited header, and how the places are specified or the header is identified (C90 6.8.2, C99 and C11 6.10.2). </li>\n<li>How the named source file is searched for in an included ‘<code>\"\"</code>’ delimited header (C90 6.8.2, C99 and C11 6.10.2). </li>\n<li>The method by which preprocessing tokens (possibly resulting from macro expansion) in a <code>#include</code> directive are combined into a header name (C90 6.8.2, C99 and C11 6.10.2). </li>\n<li>The nesting limit for <code>#include</code> processing (C90 6.8.2, C99 and C11 6.10.2). </li>\n<li>Whether the ‘<code>#</code>’ operator inserts a ‘<code>\\</code>’ character before the ‘<code>\\</code>’ character that begins a universal character name in a character constant or string literal (C99 and C11 6.10.3.2). </li>\n<li>The behavior on each recognized non-<code>STDC #pragma</code> directive (C90 6.8.6, C99 and C11 6.10.6). <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Pragmas.html#Pragmas\">Pragmas</a>, for details of pragmas accepted by GCC on all targets. See <a href=\"pragmas#Pragmas\">Pragmas Accepted by GCC</a>, for details of target-specific pragmas. </p>\n</li>\n<li>The definitions for <code>__DATE__</code> and <code>__TIME__</code> when respectively, the date and time of translation are not available (C90 6.8.8, C99 6.10.8, C11 6.10.8.1). </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Preprocessing-directives-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Preprocessing-directives-implementation.html</a>\n  </p>\n</div>\n","library-functions-implementation":"<h1 class=\"section\" id=\"Library-functions-implementation\">4.14 Library functions</h1> <p>The behavior of most of these points are dependent on the implementation of the C library, and are not defined by GCC itself. </p>\n<ul> <li>The null pointer constant to which the macro <code>NULL</code> expands (C90 7.1.6, C99 7.17, C11 7.19). <p>In <code>&lt;stddef.h&gt;</code>, <code>NULL</code> expands to <code>((void *)0)</code>. GCC does not provide the other headers which define <code>NULL</code> and some library implementations may use other definitions in those headers. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Library-functions-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Library-functions-implementation.html</a>\n  </p>\n</div>\n","architecture-implementation":"<h1 class=\"section\" id=\"Architecture-implementation\">4.15 Architecture</h1> <ul> <li>The values or expressions assigned to the macros specified in the headers <code>&lt;float.h&gt;</code>, <code>&lt;limits.h&gt;</code>, and <code>&lt;stdint.h&gt;</code> (C90, C99 and C11 5.2.4.2, C99 7.18.2, C99 7.18.3, C11 7.20.2, C11 7.20.3). <p>Determined by ABI. </p>\n</li>\n<li>The result of attempting to indirectly access an object with automatic or thread storage duration from a thread other than the one with which it is associated (C11 6.2.4). <p>Such accesses are supported, subject to the same requirements for synchronization for concurrent accesses as for concurrent accesses to any object. </p>\n</li>\n<li>The number, order, and encoding of bytes in any object (when not explicitly specified in this International Standard) (C99 and C11 6.2.6.1). <p>Determined by ABI. </p>\n</li>\n<li>Whether any extended alignments are supported and the contexts in which they are supported (C11 6.2.8). <p>Extended alignments up to 2^28 (bytes) are supported for objects of automatic storage duration. Alignments supported for objects of static and thread storage duration are determined by the ABI. </p>\n</li>\n<li>Valid alignment values other than those returned by an _Alignof expression for fundamental types, if any (C11 6.2.8). <p>Valid alignments are powers of 2 up to and including 2^28. </p>\n</li>\n<li>The value of the result of the <code>sizeof</code> and <code>_Alignof</code> operators (C90 6.3.3.4, C99 and C11 6.5.3.4). <p>Determined by ABI. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Architecture-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Architecture-implementation.html</a>\n  </p>\n</div>\n","locale_002dspecific-behavior-implementation":"<h1 class=\"section\" id=\"Locale_002dspecific-behavior-implementation\">4.16 Locale-specific behavior</h1> <p>The behavior of these points are dependent on the implementation of the C library, and are not defined by GCC itself.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Locale_002dspecific-behavior-implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Locale_002dspecific-behavior-implementation.html</a>\n  </p>\n</div>\n","c_002b_002b-implementation":"<h1 class=\"chapter\" id=\"C_002b_002b-Implementation\">5 C++ Implementation-defined behavior</h1> <p> A conforming implementation of ISO C++ is required to document its choice of behavior in each of the areas that are designated “implementation defined”. The following lists all such areas, along with the section numbers from the ISO/IEC 14882:1998 and ISO/IEC 14882:2003 standards. Some areas are only implementation-defined in one version of the standard. </p>\n<p>Some choices depend on the externally determined ABI for the platform (including standard character encodings) which GCC follows; these are listed as “determined by ABI” below. See <a href=\"compatibility#Compatibility\">Binary Compatibility</a>, and <a href=\"http://gcc.gnu.org/readings.html\">http://gcc.gnu.org/readings.html</a>. Some choices are documented in the preprocessor manual. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior\">Implementation-defined behavior</a>. Some choices are documented in the corresponding document for the C language. See <a href=\"c-implementation#C-Implementation\">C Implementation</a>. Some choices are made by the library and operating system (or other environment when compiling for a freestanding environment); refer to their documentation for details. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"conditionally_002dsupported-behavior#Conditionally_002dsupported-behavior\">Conditionally-supported behavior</a> </li>\n<li>\n<a accesskey=\"2\" href=\"exception-handling#Exception-handling\">Exception handling</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Implementation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Implementation.html</a>\n  </p>\n</div>\n","conditionally_002dsupported-behavior":"<h1 class=\"section\" id=\"Conditionally_002dsupported-behavior\">5.1 Conditionally-supported behavior</h1> <p>Each implementation shall include documentation that identifies all conditionally-supported constructs that it does not support (C++0x 1.4). </p>\n<ul> <li>Whether an argument of class type with a non-trivial copy constructor or destructor can be passed to ... (C++0x 5.2.2). <p>Such argument passing is not supported. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Conditionally_002dsupported-behavior.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Conditionally_002dsupported-behavior.html</a>\n  </p>\n</div>\n","exception-handling":"<h1 class=\"section\" id=\"Exception-handling\">5.2 Exception handling</h1> <ul> <li>In the situation where no matching handler is found, it is implementation-defined whether or not the stack is unwound before std::terminate() is called (C++98 15.5.1). <p>The stack is not unwound before std::terminate is called. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Exception-handling.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Exception-handling.html</a>\n  </p>\n</div>\n","c-extensions":"<h1 class=\"chapter\" id=\"C-Extensions\">6 Extensions to the C Language Family</h1> <p> GNU C provides several language features not found in ISO standard C. (The <code>-pedantic</code> option directs GCC to print a warning message if any of these features is used.) To test for the availability of these features in conditional compilation, check for a predefined macro <code>__GNUC__</code>, which is always defined under GCC. </p>\n<p>These extensions are available in C and Objective-C. Most of them are also available in C++. See <a href=\"c_002b_002b-extensions#C_002b_002b-Extensions\">Extensions to the C++ Language</a>, for extensions that apply <em>only</em> to C++. </p>\n<p>Some features that are in ISO C99 but not C90 or C++ are also, as extensions, accepted by GCC in C90 mode and in C++. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"statement-exprs#Statement-Exprs\">Statement Exprs</a>: Putting statements and declarations inside expressions. </li>\n<li>\n<a accesskey=\"2\" href=\"local-labels#Local-Labels\">Local Labels</a>: Labels local to a block. </li>\n<li>\n<a accesskey=\"3\" href=\"labels-as-values#Labels-as-Values\">Labels as Values</a>: Getting pointers to labels, and computed gotos. </li>\n<li>\n<a accesskey=\"4\" href=\"nested-functions#Nested-Functions\">Nested Functions</a>: As in Algol and Pascal, lexical scoping of functions. </li>\n<li>\n<a accesskey=\"5\" href=\"constructing-calls#Constructing-Calls\">Constructing Calls</a>: Dispatching a call to another function. </li>\n<li>\n<a accesskey=\"6\" href=\"typeof#Typeof\">Typeof</a>: <code>typeof</code>: referring to the type of an expression. </li>\n<li>\n<a accesskey=\"7\" href=\"conditionals#Conditionals\">Conditionals</a>: Omitting the middle operand of a ‘<code>?:</code>’ expression. </li>\n<li>\n<a accesskey=\"8\" href=\"_005f_005fint128#g_t_005f_005fint128\">__int128</a>: 128-bit integers---<code>__int128</code>. </li>\n<li>\n<a accesskey=\"9\" href=\"long-long#Long-Long\">Long Long</a>: Double-word integers---<code>long long int</code>. </li>\n<li>\n<a href=\"complex#Complex\">Complex</a>: Data types for complex numbers. </li>\n<li>\n<a href=\"floating-types#Floating-Types\">Floating Types</a>: Additional Floating Types. </li>\n<li>\n<a href=\"half_002dprecision#Half_002dPrecision\">Half-Precision</a>: Half-Precision Floating Point. </li>\n<li>\n<a href=\"decimal-float#Decimal-Float\">Decimal Float</a>: Decimal Floating Types. </li>\n<li>\n<a href=\"hex-floats#Hex-Floats\">Hex Floats</a>: Hexadecimal floating-point constants. </li>\n<li>\n<a href=\"fixed_002dpoint#Fixed_002dPoint\">Fixed-Point</a>: Fixed-Point Types. </li>\n<li>\n<a href=\"named-address-spaces#Named-Address-Spaces\">Named Address Spaces</a>: Named address spaces. </li>\n<li>\n<a href=\"zero-length#Zero-Length\">Zero Length</a>: Zero-length arrays. </li>\n<li>\n<a href=\"empty-structures#Empty-Structures\">Empty Structures</a>: Structures with no members. </li>\n<li>\n<a href=\"variable-length#Variable-Length\">Variable Length</a>: Arrays whose length is computed at run time. </li>\n<li>\n<a href=\"variadic-macros#Variadic-Macros\">Variadic Macros</a>: Macros with a variable number of arguments. </li>\n<li>\n<a href=\"escaped-newlines#Escaped-Newlines\">Escaped Newlines</a>: Slightly looser rules for escaped newlines. </li>\n<li>\n<a href=\"subscripting#Subscripting\">Subscripting</a>: Any array can be subscripted, even if not an lvalue. </li>\n<li>\n<a href=\"pointer-arith#Pointer-Arith\">Pointer Arith</a>: Arithmetic on <code>void</code>-pointers and function pointers. </li>\n<li>\n<a href=\"initializers#Initializers\">Initializers</a>: Non-constant initializers. </li>\n<li>\n<a href=\"compound-literals#Compound-Literals\">Compound Literals</a>: Compound literals give structures, unions or arrays as values. </li>\n<li>\n<a href=\"designated-inits#Designated-Inits\">Designated Inits</a>: Labeling elements of initializers. </li>\n<li>\n<a href=\"case-ranges#Case-Ranges\">Case Ranges</a>: `case 1 ... 9' and such. </li>\n<li>\n<a href=\"cast-to-union#Cast-to-Union\">Cast to Union</a>: Casting to union type from any member of the union. </li>\n<li>\n<a href=\"mixed-declarations#Mixed-Declarations\">Mixed Declarations</a>: Mixing declarations and code. </li>\n<li>\n<a href=\"function-attributes#Function-Attributes\">Function Attributes</a>: Declaring that functions have no side effects, or that they can never return. </li>\n<li>\n<a href=\"attribute-syntax#Attribute-Syntax\">Attribute Syntax</a>: Formal syntax for attributes. </li>\n<li>\n<a href=\"function-prototypes#Function-Prototypes\">Function Prototypes</a>: Prototype declarations and old-style definitions. </li>\n<li>\n<a href=\"c_002b_002b-comments#C_002b_002b-Comments\">C++ Comments</a>: C++ comments are recognized. </li>\n<li>\n<a href=\"dollar-signs#Dollar-Signs\">Dollar Signs</a>: Dollar sign is allowed in identifiers. </li>\n<li>\n<a href=\"character-escapes#Character-Escapes\">Character Escapes</a>: ‘<code>\\e</code>’ stands for the character &lt;ESC&gt;. </li>\n<li>\n<a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>: Specifying attributes of variables. </li>\n<li>\n<a href=\"type-attributes#Type-Attributes\">Type Attributes</a>: Specifying attributes of types. </li>\n<li>\n<a href=\"alignment#Alignment\">Alignment</a>: Inquiring about the alignment of a type or variable. </li>\n<li>\n<a href=\"inline#Inline\">Inline</a>: Defining inline functions (as fast as macros). </li>\n<li>\n<a href=\"volatiles#Volatiles\">Volatiles</a>: What constitutes an access to a volatile object. </li>\n<li>\n<a href=\"extended-asm#Extended-Asm\">Extended Asm</a>: Assembler instructions with C expressions as operands. (With them you can define ``built-in'' functions.) </li>\n<li>\n<a href=\"constraints#Constraints\">Constraints</a>: Constraints for asm operands </li>\n<li>\n<a href=\"asm-labels#Asm-Labels\">Asm Labels</a>: Specifying the assembler name to use for a C symbol. </li>\n<li>\n<a href=\"explicit-reg-vars#Explicit-Reg-Vars\">Explicit Reg Vars</a>: Defining variables residing in specified registers. </li>\n<li>\n<a href=\"alternate-keywords#Alternate-Keywords\">Alternate Keywords</a>: <code>__const__</code>, <code>__asm__</code>, etc., for header files. </li>\n<li>\n<a href=\"incomplete-enums#Incomplete-Enums\">Incomplete Enums</a>: <code>enum foo;</code>, with details to follow. </li>\n<li>\n<a href=\"function-names#Function-Names\">Function Names</a>: Printable strings which are the name of the current function. </li>\n<li>\n<a href=\"return-address#Return-Address\">Return Address</a>: Getting the return or frame address of a function. </li>\n<li>\n<a href=\"vector-extensions#Vector-Extensions\">Vector Extensions</a>: Using vector instructions through built-in functions. </li>\n<li>\n<a href=\"offsetof#Offsetof\">Offsetof</a>: Special syntax for implementing <code>offsetof</code>. </li>\n<li>\n<a href=\"_005f_005fsync-builtins#g_t_005f_005fsync-Builtins\">__sync Builtins</a>: Legacy built-in functions for atomic memory access. </li>\n<li>\n<a href=\"_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins\">__atomic Builtins</a>: Atomic built-in functions with memory model. </li>\n<li>\n<a href=\"x86-specific-memory-model-extensions-for-transactional-memory#x86-specific-memory-model-extensions-for-transactional-memory\">x86 specific memory model extensions for transactional memory</a>: x86 memory models. </li>\n<li>\n<a href=\"object-size-checking#Object-Size-Checking\">Object Size Checking</a>: Built-in functions for limited buffer overflow checking. </li>\n<li>\n<a href=\"cilk-plus-builtins#Cilk-Plus-Builtins\">Cilk Plus Builtins</a>: Built-in functions for the Cilk Plus language extension. </li>\n<li>\n<a href=\"other-builtins#Other-Builtins\">Other Builtins</a>: Other built-in functions. </li>\n<li>\n<a href=\"target-builtins#Target-Builtins\">Target Builtins</a>: Built-in functions specific to particular targets. </li>\n<li>\n<a href=\"target-format-checks#Target-Format-Checks\">Target Format Checks</a>: Format checks specific to particular targets. </li>\n<li>\n<a href=\"pragmas#Pragmas\">Pragmas</a>: Pragmas accepted by GCC. </li>\n<li>\n<a href=\"unnamed-fields#Unnamed-Fields\">Unnamed Fields</a>: Unnamed struct/union fields within structs/unions. </li>\n<li>\n<a href=\"thread_002dlocal#Thread_002dLocal\">Thread-Local</a>: Per-thread variables. </li>\n<li>\n<a href=\"binary-constants#Binary-constants\">Binary constants</a>: Binary constants using the ‘<code>0b</code>’ prefix. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C-Extensions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C-Extensions.html</a>\n  </p>\n</div>\n","statement-exprs":"<h1 class=\"section\" id=\"Statement-Exprs\">6.1 Statements and Declarations in Expressions</h1> <p>   A compound statement enclosed in parentheses may appear as an expression in GNU C. This allows you to use loops, switches, and local variables within an expression. </p>\n<p>Recall that a compound statement is a sequence of statements surrounded by braces; in this construct, parentheses go around the braces. For example: </p>\n<pre class=\"smallexample\">({ int y = foo (); int z;\n   if (y &gt; 0) z = y;\n   else z = - y;\n   z; })</pre> <p class=\"noindent\">is a valid (though slightly more complex than necessary) expression for the absolute value of <code>foo ()</code>. </p>\n<p>The last thing in the compound statement should be an expression followed by a semicolon; the value of this subexpression serves as the value of the entire construct. (If you use some other kind of statement last within the braces, the construct has type <code>void</code>, and thus effectively no value.) </p>\n<p>This feature is especially useful in making macro definitions “safe” (so that they evaluate each operand exactly once). For example, the “maximum” function is commonly defined as a macro in standard C as follows: </p>\n<pre class=\"smallexample\">#define max(a,b) ((a) &gt; (b) ? (a) : (b))</pre> <p class=\"noindent\">But this definition computes either <var>a</var> or <var>b</var> twice, with bad results if the operand has side effects. In GNU C, if you know the type of the operands (here taken as <code>int</code>), you can define the macro safely as follows: </p>\n<pre class=\"smallexample\">#define maxint(a,b) \\\n  ({int _a = (a), _b = (b); _a &gt; _b ? _a : _b; })</pre> <p>Embedded statements are not allowed in constant expressions, such as the value of an enumeration constant, the width of a bit-field, or the initial value of a static variable. </p>\n<p>If you don't know the type of the operand, you can still do this, but you must use <code>typeof</code> or <code>__auto_type</code> (see <a href=\"typeof#Typeof\">Typeof</a>). </p>\n<p>In G++, the result value of a statement expression undergoes array and function pointer decay, and is returned by value to the enclosing expression. For instance, if <code>A</code> is a class, then </p>\n<pre class=\"smallexample\">A a;\n     \n({a;}).Foo ()</pre> <p class=\"noindent\">constructs a temporary <code>A</code> object to hold the result of the statement expression, and that is used to invoke <code>Foo</code>. Therefore the <code>this</code> pointer observed by <code>Foo</code> is not the address of <code>a</code>. </p>\n<p>In a statement expression, any temporaries created within a statement are destroyed at that statement's end. This makes statement expressions inside macros slightly different from function calls. In the latter case temporaries introduced during argument evaluation are destroyed at the end of the statement that includes the function call. In the statement expression case they are destroyed during the statement expression. For instance, </p>\n<pre class=\"smallexample\">#define macro(a)  ({__typeof__(a) b = (a); b + 3; })\ntemplate&lt;typename T&gt; T function(T a) { T b = a; return b + 3; }\n\nvoid foo ()\n{\n  macro (X ());\n  function (X ());\n}</pre> <p class=\"noindent\">has different places where temporaries are destroyed. For the <code>macro</code> case, the temporary <code>X</code> is destroyed just after the initialization of <code>b</code>. In the <code>function</code> case that temporary is destroyed when the function returns. </p>\n<p>These considerations mean that it is probably a bad idea to use statement expressions of this form in header files that are designed to work with C++. (Note that some versions of the GNU C Library contained header files using statement expressions that lead to precisely this bug.) </p>\n<p>Jumping into a statement expression with <code>goto</code> or using a <code>switch</code> statement outside the statement expression with a <code>case</code> or <code>default</code> label inside the statement expression is not permitted. Jumping into a statement expression with a computed <code>goto</code> (see <a href=\"labels-as-values#Labels-as-Values\">Labels as Values</a>) has undefined behavior. Jumping out of a statement expression is permitted, but if the statement expression is part of a larger expression then it is unspecified which other subexpressions of that expression have been evaluated except where the language definition requires certain subexpressions to be evaluated before or after the statement expression. In any case, as with a function call, the evaluation of a statement expression is not interleaved with the evaluation of other parts of the containing expression. For example, </p>\n<pre class=\"smallexample\">foo (), (({ bar1 (); goto a; 0; }) + bar2 ()), baz();</pre> <p class=\"noindent\">calls <code>foo</code> and <code>bar1</code> and does not call <code>baz</code> but may or may not call <code>bar2</code>. If <code>bar2</code> is called, it is called after <code>foo</code> and before <code>bar1</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Statement-Exprs.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Statement-Exprs.html</a>\n  </p>\n</div>\n","local-labels":"<h1 class=\"section\" id=\"Local-Labels\">6.2 Locally Declared Labels</h1> <p> GCC allows you to declare local labels in any nested block scope. A local label is just like an ordinary label, but you can only reference it (with a <code>goto</code> statement, or by taking its address) within the block in which it is declared. </p>\n<p>A local label declaration looks like this: </p>\n<pre class=\"smallexample\">__label__ <var>label</var>;</pre> <p class=\"noindent\">or </p>\n<pre class=\"smallexample\">__label__ <var>label1</var>, <var>label2</var>, /* <span class=\"roman\">...</span> */;</pre> <p>Local label declarations must come at the beginning of the block, before any ordinary declarations or statements. </p>\n<p>The label declaration defines the label <em>name</em>, but does not define the label itself. You must do this in the usual way, with <var>label</var><code>:</code>, within the statements of the statement expression. </p>\n<p>The local label feature is useful for complex macros. If a macro contains nested loops, a <code>goto</code> can be useful for breaking out of them. However, an ordinary label whose scope is the whole function cannot be used: if the macro can be expanded several times in one function, the label is multiply defined in that function. A local label avoids this problem. For example: </p>\n<pre class=\"smallexample\">#define SEARCH(value, array, target)              \\\ndo {                                              \\\n  __label__ found;                                \\\n  typeof (target) _SEARCH_target = (target);      \\\n  typeof (*(array)) *_SEARCH_array = (array);     \\\n  int i, j;                                       \\\n  int value;                                      \\\n  for (i = 0; i &lt; max; i++)                       \\\n    for (j = 0; j &lt; max; j++)                     \\\n      if (_SEARCH_array[i][j] == _SEARCH_target)  \\\n        { (value) = i; goto found; }              \\\n  (value) = -1;                                   \\\n found:;                                          \\\n} while (0)</pre> <p>This could also be written using a statement expression: </p>\n<pre class=\"smallexample\">#define SEARCH(array, target)                     \\\n({                                                \\\n  __label__ found;                                \\\n  typeof (target) _SEARCH_target = (target);      \\\n  typeof (*(array)) *_SEARCH_array = (array);     \\\n  int i, j;                                       \\\n  int value;                                      \\\n  for (i = 0; i &lt; max; i++)                       \\\n    for (j = 0; j &lt; max; j++)                     \\\n      if (_SEARCH_array[i][j] == _SEARCH_target)  \\\n        { value = i; goto found; }                \\\n  value = -1;                                     \\\n found:                                           \\\n  value;                                          \\\n})</pre> <p>Local label declarations also make the labels they declare visible to nested functions, if there are any. See <a href=\"nested-functions#Nested-Functions\">Nested Functions</a>, for details. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Local-Labels.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Local-Labels.html</a>\n  </p>\n</div>\n","labels-as-values":"<h1 class=\"section\" id=\"Labels-as-Values\">6.3 Labels as Values</h1> <p> You can get the address of a label defined in the current function (or a containing function) with the unary operator ‘<code>&amp;&amp;</code>’. The value has type <code>void *</code>. This value is a constant and can be used wherever a constant of that type is valid. For example: </p>\n<pre class=\"smallexample\">void *ptr;\n/* <span class=\"roman\">...</span> */\nptr = &amp;&amp;foo;</pre> <p>To use these values, you need to be able to jump to one. This is done with the computed goto statement<a rel=\"footnote\" href=\"#fn-1\" name=\"fnd-1\" id=\"fnd-1\"><sup>1</sup></a>, <code>goto *</code><var>exp</var><code>;</code>. For example, </p>\n<pre class=\"smallexample\">goto *ptr;</pre> <p class=\"noindent\">Any expression of type <code>void *</code> is allowed. </p>\n<p>One way of using these constants is in initializing a static array that serves as a jump table: </p>\n<pre class=\"smallexample\">static void *array[] = { &amp;&amp;foo, &amp;&amp;bar, &amp;&amp;hack };</pre> <p class=\"noindent\">Then you can select a label with indexing, like this: </p>\n<pre class=\"smallexample\">goto *array[i];</pre> <p class=\"noindent\">Note that this does not check whether the subscript is in bounds—array indexing in C never does that. </p>\n<p>Such an array of label values serves a purpose much like that of the <code>switch</code> statement. The <code>switch</code> statement is cleaner, so use that rather than an array unless the problem does not fit a <code>switch</code> statement very well. </p>\n<p>Another use of label values is in an interpreter for threaded code. The labels within the interpreter function can be stored in the threaded code for super-fast dispatching. </p>\n<p>You may not use this mechanism to jump to code in a different function. If you do that, totally unpredictable things happen. The best way to avoid this is to store the label address only in automatic variables and never pass it as an argument. </p>\n<p>An alternate way to write the above example is </p>\n<pre class=\"smallexample\">static const int array[] = { &amp;&amp;foo - &amp;&amp;foo, &amp;&amp;bar - &amp;&amp;foo,\n                             &amp;&amp;hack - &amp;&amp;foo };\ngoto *(&amp;&amp;foo + array[i]);</pre> <p class=\"noindent\">This is more friendly to code living in shared libraries, as it reduces the number of dynamic relocations that are needed, and by consequence, allows the data to be read-only. This alternative with label differences is not supported for the AVR target, please use the first approach for AVR programs. </p>\n<p>The <code>&amp;&amp;foo</code> expressions for the same label might have different values if the containing function is inlined or cloned. If a program relies on them being always the same, <code>__attribute__((__noinline__,__noclone__))</code> should be used to prevent inlining and cloning. If <code>&amp;&amp;foo</code> is used in a static variable initializer, inlining and cloning is forbidden. </p>\n<div class=\"footnote\">  <h2>Footnotes</h2>\n<p class=\"footnote\"><small>[<a name=\"fn-1\" href=\"#fnd-1\" id=\"fn-1\">1</a>]</small> The analogous feature in Fortran is called an assigned goto, but that name seems inappropriate in C, where one can do more than simply store label addresses in label variables.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Labels-as-Values.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Labels-as-Values.html</a>\n  </p>\n</div>\n","nested-functions":"<h1 class=\"section\" id=\"Nested-Functions\">6.4 Nested Functions</h1> <p> A nested function is a function defined inside another function. Nested functions are supported as an extension in GNU C, but are not supported by GNU C++. </p>\n<p>The nested function's name is local to the block where it is defined. For example, here we define a nested function named <code>square</code>, and call it twice: </p>\n<pre class=\"smallexample\">foo (double a, double b)\n{\n  double square (double z) { return z * z; }\n\n  return square (a) + square (b);\n}</pre> <p>The nested function can access all the variables of the containing function that are visible at the point of its definition. This is called lexical scoping. For example, here we show a nested function which uses an inherited variable named <code>offset</code>: </p>\n<pre class=\"smallexample\">bar (int *array, int offset, int size)\n{\n  int access (int *array, int index)\n    { return array[index + offset]; }\n  int i;\n  /* <span class=\"roman\">...</span> */\n  for (i = 0; i &lt; size; i++)\n    /* <span class=\"roman\">...</span> */ access (array, i) /* <span class=\"roman\">...</span> */\n}</pre> <p>Nested function definitions are permitted within functions in the places where variable definitions are allowed; that is, in any block, mixed with the other declarations and statements in the block. </p>\n<p>It is possible to call the nested function from outside the scope of its name by storing its address or passing the address to another function: </p>\n<pre class=\"smallexample\">hack (int *array, int size)\n{\n  void store (int index, int value)\n    { array[index] = value; }\n\n  intermediate (store, size);\n}</pre> <p>Here, the function <code>intermediate</code> receives the address of <code>store</code> as an argument. If <code>intermediate</code> calls <code>store</code>, the arguments given to <code>store</code> are used to store into <code>array</code>. But this technique works only so long as the containing function (<code>hack</code>, in this example) does not exit. </p>\n<p>If you try to call the nested function through its address after the containing function exits, all hell breaks loose. If you try to call it after a containing scope level exits, and if it refers to some of the variables that are no longer in scope, you may be lucky, but it's not wise to take the risk. If, however, the nested function does not refer to anything that has gone out of scope, you should be safe. </p>\n<p>GCC implements taking the address of a nested function using a technique called trampolines. This technique was described in Lexical Closures for C++ (Thomas M. Breuel, USENIX C++ Conference Proceedings, October 17-21, 1988). </p>\n<p>A nested function can jump to a label inherited from a containing function, provided the label is explicitly declared in the containing function (see <a href=\"local-labels#Local-Labels\">Local Labels</a>). Such a jump returns instantly to the containing function, exiting the nested function that did the <code>goto</code> and any intermediate functions as well. Here is an example: </p>\n<pre class=\"smallexample\">bar (int *array, int offset, int size)\n{\n  __label__ failure;\n  int access (int *array, int index)\n    {\n      if (index &gt; size)\n        goto failure;\n      return array[index + offset];\n    }\n  int i;\n  /* <span class=\"roman\">...</span> */\n  for (i = 0; i &lt; size; i++)\n    /* <span class=\"roman\">...</span> */ access (array, i) /* <span class=\"roman\">...</span> */\n  /* <span class=\"roman\">...</span> */\n  return 0;\n\n /* <span class=\"roman\">Control comes here from </span><code>access</code><span class=\"roman\">\n    if it detects an error.</span>  */\n failure:\n  return -1;\n}</pre> <p>A nested function always has no linkage. Declaring one with <code>extern</code> or <code>static</code> is erroneous. If you need to declare the nested function before its definition, use <code>auto</code> (which is otherwise meaningless for function declarations). </p>\n<pre class=\"smallexample\">bar (int *array, int offset, int size)\n{\n  __label__ failure;\n  auto int access (int *, int);\n  /* <span class=\"roman\">...</span> */\n  int access (int *array, int index)\n    {\n      if (index &gt; size)\n        goto failure;\n      return array[index + offset];\n    }\n  /* <span class=\"roman\">...</span> */\n}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Nested-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Nested-Functions.html</a>\n  </p>\n</div>\n","constructing-calls":"<h1 class=\"section\" id=\"Constructing-Calls\">6.5 Constructing Function Calls</h1> <p> Using the built-in functions described below, you can record the arguments a function received, and call another function with the same arguments, without knowing the number or types of the arguments. </p>\n<p>You can also record the return value of that function call, and later return that value, without knowing what data type the function tried to return (as long as your caller expects that data type). </p>\n<p>However, these built-in functions may interact badly with some sophisticated features or other extensions of the language. It is, therefore, not recommended to use them outside very simple functions acting as mere forwarders for their arguments. </p>\n<div class=\"defun\"> — Built-in Function: void * <b>__builtin_apply_args</b> () <blockquote>\n<p>This built-in function returns a pointer to data describing how to perform a call with the same arguments as are passed to the current function. </p>\n<p>The function saves the arg pointer register, structure value address, and all registers that might be used to pass arguments to a function into a block of memory allocated on the stack. Then it returns the address of that block. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void * <b>__builtin_apply</b> (<var>void </var>(<var>*function</var>)()<var>, void *arguments, size_t size</var>) <blockquote>\n<p>This built-in function invokes <var>function</var> with a copy of the parameters described by <var>arguments</var> and <var>size</var>. </p>\n<p>The value of <var>arguments</var> should be the value returned by <code>__builtin_apply_args</code>. The argument <var>size</var> specifies the size of the stack argument data, in bytes. </p>\n<p>This function returns a pointer to data describing how to return whatever value is returned by <var>function</var>. The data is saved in a block of memory allocated on the stack. </p>\n<p>It is not always simple to compute the proper value for <var>size</var>. The value is used by <code>__builtin_apply</code> to compute the amount of data that should be pushed on the stack and copied from the incoming argument area. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_return</b> (<var>void *result</var>) <blockquote><p>This built-in function returns the value described by <var>result</var> from the containing function. You should specify, for <var>result</var>, a value returned by <code>__builtin_apply</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: <b>__builtin_va_arg_pack</b> () <blockquote>\n<p>This built-in function represents all anonymous arguments of an inline function. It can be used only in inline functions that are always inlined, never compiled as a separate function, such as those using <code>__attribute__ ((__always_inline__))</code> or <code>__attribute__ ((__gnu_inline__))</code> extern inline functions. It must be only passed as last argument to some other function with variable arguments. This is useful for writing small wrapper inlines for variable argument functions, when using preprocessor macros is undesirable. For example: </p>\n<pre class=\"smallexample\">extern int myprintf (FILE *f, const char *format, ...);\nextern inline __attribute__ ((__gnu_inline__)) int\nmyprintf (FILE *f, const char *format, ...)\n{\n  int r = fprintf (f, \"myprintf: \");\n  if (r &lt; 0)\n    return r;\n  int s = fprintf (f, format, __builtin_va_arg_pack ());\n  if (s &lt; 0)\n    return s;\n  return r + s;\n}</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: size_t <b>__builtin_va_arg_pack_len</b> () <blockquote>\n<p>This built-in function returns the number of anonymous arguments of an inline function. It can be used only in inline functions that are always inlined, never compiled as a separate function, such as those using <code>__attribute__ ((__always_inline__))</code> or <code>__attribute__ ((__gnu_inline__))</code> extern inline functions. For example following does link- or run-time checking of open arguments for optimized code: </p>\n<pre class=\"smallexample\">#ifdef __OPTIMIZE__\nextern inline __attribute__((__gnu_inline__)) int\nmyopen (const char *path, int oflag, ...)\n{\n  if (__builtin_va_arg_pack_len () &gt; 1)\n    warn_open_too_many_arguments ();\n\n  if (__builtin_constant_p (oflag))\n    {\n      if ((oflag &amp; O_CREAT) != 0 &amp;&amp; __builtin_va_arg_pack_len () &lt; 1)\n        {\n          warn_open_missing_mode ();\n          return __open_2 (path, oflag);\n        }\n      return open (path, oflag, __builtin_va_arg_pack ());\n    }\n\n  if (__builtin_va_arg_pack_len () &lt; 1)\n    return __open_2 (path, oflag);\n\n  return open (path, oflag, __builtin_va_arg_pack ());\n}\n#endif</pre> </blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Constructing-Calls.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Constructing-Calls.html</a>\n  </p>\n</div>\n","typeof":"<h1 class=\"section\" id=\"Typeof\">6.6 Referring to a Type with <code>typeof</code>\n</h1> <p> Another way to refer to the type of an expression is with <code>typeof</code>. The syntax of using of this keyword looks like <code>sizeof</code>, but the construct acts semantically like a type name defined with <code>typedef</code>. </p>\n<p>There are two ways of writing the argument to <code>typeof</code>: with an expression or with a type. Here is an example with an expression: </p>\n<pre class=\"smallexample\">typeof (x[0](1))</pre> <p class=\"noindent\">This assumes that <code>x</code> is an array of pointers to functions; the type described is that of the values of the functions. </p>\n<p>Here is an example with a typename as the argument: </p>\n<pre class=\"smallexample\">typeof (int *)</pre> <p class=\"noindent\">Here the type described is that of pointers to <code>int</code>. </p>\n<p>If you are writing a header file that must work when included in ISO C programs, write <code>__typeof__</code> instead of <code>typeof</code>. See <a href=\"alternate-keywords#Alternate-Keywords\">Alternate Keywords</a>. </p>\n<p>A <code>typeof</code> construct can be used anywhere a typedef name can be used. For example, you can use it in a declaration, in a cast, or inside of <code>sizeof</code> or <code>typeof</code>. </p>\n<p>The operand of <code>typeof</code> is evaluated for its side effects if and only if it is an expression of variably modified type or the name of such a type. </p>\n<p><code>typeof</code> is often useful in conjunction with statement expressions (see <a href=\"statement-exprs#Statement-Exprs\">Statement Exprs</a>). Here is how the two together can be used to define a safe “maximum” macro which operates on any arithmetic type and evaluates each of its arguments exactly once: </p>\n<pre class=\"smallexample\">#define max(a,b) \\\n  ({ typeof (a) _a = (a); \\\n      typeof (b) _b = (b); \\\n    _a &gt; _b ? _a : _b; })</pre> <p> The reason for using names that start with underscores for the local variables is to avoid conflicts with variable names that occur within the expressions that are substituted for <code>a</code> and <code>b</code>. Eventually we hope to design a new form of declaration syntax that allows you to declare variables whose scopes start only after their initializers; this will be a more reliable way to prevent such conflicts. </p>\n<p class=\"noindent\">Some more examples of the use of <code>typeof</code>: </p>\n<ul> <li>This declares <code>y</code> with the type of what <code>x</code> points to. <pre class=\"smallexample\">typeof (*x) y;</pre> </li>\n<li>This declares <code>y</code> as an array of such values. <pre class=\"smallexample\">typeof (*x) y[4];</pre> </li>\n<li>This declares <code>y</code> as an array of pointers to characters: <pre class=\"smallexample\">typeof (typeof (char *)[4]) y;</pre> <p class=\"noindent\">It is equivalent to the following traditional C declaration: </p>\n<pre class=\"smallexample\">char *y[4];</pre> <p>To see the meaning of the declaration using <code>typeof</code>, and why it might be a useful way to write, rewrite it with these macros: </p>\n<pre class=\"smallexample\">#define pointer(T)  typeof(T *)\n#define array(T, N) typeof(T [N])</pre> <p class=\"noindent\">Now the declaration can be rewritten this way: </p>\n<pre class=\"smallexample\">array (pointer (char), 4) y;</pre> <p class=\"noindent\">Thus, <code>array (pointer (char), 4)</code> is the type of arrays of 4 pointers to <code>char</code>. </p>\n</li>\n</ul> <p>In GNU C, but not GNU C++, you may also declare the type of a variable as <code>__auto_type</code>. In that case, the declaration must declare only one variable, whose declarator must just be an identifier, the declaration must be initialized, and the type of the variable is determined by the initializer; the name of the variable is not in scope until after the initializer. (In C++, you should use C++11 <code>auto</code> for this purpose.) Using <code>__auto_type</code>, the “maximum” macro above could be written as: </p>\n<pre class=\"smallexample\">#define max(a,b) \\\n  ({ __auto_type _a = (a); \\\n      __auto_type _b = (b); \\\n    _a &gt; _b ? _a : _b; })</pre> <p>Using <code>__auto_type</code> instead of <code>typeof</code> has two advantages: </p>\n<ul> <li>Each argument to the macro appears only once in the expansion of the macro. This prevents the size of the macro expansion growing exponentially when calls to such macros are nested inside arguments of such macros. </li>\n<li>If the argument to the macro has variably modified type, it is evaluated only once when using <code>__auto_type</code>, but twice if <code>typeof</code> is used. </li>\n</ul> <p><em>Compatibility Note:</em> In addition to <code>typeof</code>, GCC 2 supported a more limited extension that permitted one to write </p>\n<pre class=\"smallexample\">typedef <var>T</var> = <var>expr</var>;</pre> <p class=\"noindent\">with the effect of declaring <var>T</var> to have the type of the expression <var>expr</var>. This extension does not work with GCC 3 (versions between 3.0 and 3.2 crash; 3.2.1 and later give an error). Code that relies on it should be rewritten to use <code>typeof</code>: </p>\n<pre class=\"smallexample\">typedef typeof(<var>expr</var>) <var>T</var>;</pre> <p class=\"noindent\">This works with all versions of GCC. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Typeof.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Typeof.html</a>\n  </p>\n</div>\n","conditionals":"<h1 class=\"section\" id=\"Conditionals\">6.7 Conditionals with Omitted Operands</h1> <p> The middle operand in a conditional expression may be omitted. Then if the first operand is nonzero, its value is the value of the conditional expression. </p>\n<p>Therefore, the expression </p>\n<pre class=\"smallexample\">x ? : y</pre> <p class=\"noindent\">has the value of <code>x</code> if that is nonzero; otherwise, the value of <code>y</code>. </p>\n<p>This example is perfectly equivalent to </p>\n<pre class=\"smallexample\">x ? x : y</pre> <p>In this simple case, the ability to omit the middle operand is not especially useful. When it becomes useful is when the first operand does, or may (if it is a macro argument), contain a side effect. Then repeating the operand in the middle would perform the side effect twice. Omitting the middle operand uses the value already computed without the undesirable effects of recomputing it. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Conditionals.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Conditionals.html</a>\n  </p>\n</div>\n","_005f_005fint128":"<h1 class=\"section\" id=\"g_t_005f_005fint128\">6.8 128-bit integers</h1> <p> As an extension the integer scalar type <code>__int128</code> is supported for targets which have an integer mode wide enough to hold 128 bits. Simply write <code>__int128</code> for a signed 128-bit integer, or <code>unsigned __int128</code> for an unsigned 128-bit integer. There is no support in GCC for expressing an integer constant of type <code>__int128</code> for targets with <code>long long</code> integer less than 128 bits wide. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/_005f_005fint128.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/_005f_005fint128.html</a>\n  </p>\n</div>\n","long-long":"<h1 class=\"section\" id=\"Long-Long\">6.9 Double-Word Integers</h1> <p> ISO C99 supports data types for integers that are at least 64 bits wide, and as an extension GCC supports them in C90 mode and in C++. Simply write <code>long long int</code> for a signed integer, or <code>unsigned long long int</code> for an unsigned integer. To make an integer constant of type <code>long long int</code>, add the suffix ‘<code>LL</code>’ to the integer. To make an integer constant of type <code>unsigned long\nlong int</code>, add the suffix ‘<code>ULL</code>’ to the integer. </p>\n<p>You can use these types in arithmetic like any other integer types. Addition, subtraction, and bitwise boolean operations on these types are open-coded on all types of machines. Multiplication is open-coded if the machine supports a fullword-to-doubleword widening multiply instruction. Division and shifts are open-coded only on machines that provide special support. The operations that are not open-coded use special library routines that come with GCC. </p>\n<p>There may be pitfalls when you use <code>long long</code> types for function arguments without function prototypes. If a function expects type <code>int</code> for its argument, and you pass a value of type <code>long long int</code>, confusion results because the caller and the subroutine disagree about the number of bytes for the argument. Likewise, if the function expects <code>long long int</code> and you pass <code>int</code>. The best way to avoid such problems is to use prototypes. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Long-Long.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Long-Long.html</a>\n  </p>\n</div>\n","complex":"<h1 class=\"section\" id=\"Complex\">6.10 Complex Numbers</h1> <p> ISO C99 supports complex floating data types, and as an extension GCC supports them in C90 mode and in C++. GCC also supports complex integer data types which are not part of ISO C99. You can declare complex types using the keyword <code>_Complex</code>. As an extension, the older GNU keyword <code>__complex__</code> is also supported. </p>\n<p>For example, ‘<code>_Complex double x;</code>’ declares <code>x</code> as a variable whose real part and imaginary part are both of type <code>double</code>. ‘<code>_Complex short int y;</code>’ declares <code>y</code> to have real and imaginary parts of type <code>short int</code>; this is not likely to be useful, but it shows that the set of complex types is complete. </p>\n<p>To write a constant with a complex data type, use the suffix ‘<code>i</code>’ or ‘<code>j</code>’ (either one; they are equivalent). For example, <code>2.5fi</code> has type <code>_Complex float</code> and <code>3i</code> has type <code>_Complex int</code>. Such a constant always has a pure imaginary value, but you can form any complex value you like by adding one to a real constant. This is a GNU extension; if you have an ISO C99 conforming C library (such as the GNU C Library), and want to construct complex constants of floating type, you should include <code>&lt;complex.h&gt;</code> and use the macros <code>I</code> or <code>_Complex_I</code> instead. </p>\n<p>To extract the real part of a complex-valued expression <var>exp</var>, write <code>__real__ </code><var>exp</var>. Likewise, use <code>__imag__</code> to extract the imaginary part. This is a GNU extension; for values of floating type, you should use the ISO C99 functions <code>crealf</code>, <code>creal</code>, <code>creall</code>, <code>cimagf</code>, <code>cimag</code> and <code>cimagl</code>, declared in <code>&lt;complex.h&gt;</code> and also provided as built-in functions by GCC. </p>\n<p>The operator ‘<code>~</code>’ performs complex conjugation when used on a value with a complex type. This is a GNU extension; for values of floating type, you should use the ISO C99 functions <code>conjf</code>, <code>conj</code> and <code>conjl</code>, declared in <code>&lt;complex.h&gt;</code> and also provided as built-in functions by GCC. </p>\n<p>GCC can allocate complex automatic variables in a noncontiguous fashion; it's even possible for the real part to be in a register while the imaginary part is on the stack (or vice versa). Only the DWARF 2 debug info format can represent this, so use of DWARF 2 is recommended. If you are using the stabs debug info format, GCC describes a noncontiguous complex variable as if it were two separate variables of noncomplex type. If the variable's actual name is <code>foo</code>, the two fictitious variables are named <code>foo$real</code> and <code>foo$imag</code>. You can examine and set these two fictitious variables with your debugger. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Complex.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Complex.html</a>\n  </p>\n</div>\n","floating-types":"<h1 class=\"section\" id=\"Floating-Types\">6.11 Additional Floating Types</h1> <p> As an extension, GNU C supports additional floating types, <code>__float80</code> and <code>__float128</code> to support 80-bit (<code>XFmode</code>) and 128-bit (<code>TFmode</code>) floating types. Support for additional types includes the arithmetic operators: add, subtract, multiply, divide; unary arithmetic operators; relational operators; equality operators; and conversions to and from integer and other floating types. Use a suffix ‘<code>w</code>’ or ‘<code>W</code>’ in a literal constant of type <code>__float80</code> and ‘<code>q</code>’ or ‘<code>Q</code>’ for <code>_float128</code>. You can declare complex types using the corresponding internal complex type, <code>XCmode</code> for <code>__float80</code> type and <code>TCmode</code> for <code>__float128</code> type: </p>\n<pre class=\"smallexample\">typedef _Complex float __attribute__((mode(TC))) _Complex128;\ntypedef _Complex float __attribute__((mode(XC))) _Complex80;</pre> <p>Not all targets support additional floating-point types. <code>__float80</code> and <code>__float128</code> types are supported on i386, x86_64 and IA-64 targets. The <code>__float128</code> type is supported on hppa HP-UX targets. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Floating-Types.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Floating-Types.html</a>\n  </p>\n</div>\n","half_002dprecision":"<h1 class=\"section\" id=\"Half_002dPrecision\">6.12 Half-Precision Floating Point</h1> <p> On ARM targets, GCC supports half-precision (16-bit) floating point via the <code>__fp16</code> type. You must enable this type explicitly with the <code>-mfp16-format</code> command-line option in order to use it. </p>\n<p>ARM supports two incompatible representations for half-precision floating-point values. You must choose one of the representations and use it consistently in your program. </p>\n<p>Specifying <code>-mfp16-format=ieee</code> selects the IEEE 754-2008 format. This format can represent normalized values in the range of 2^-14 to 65504. There are 11 bits of significand precision, approximately 3 decimal digits. </p>\n<p>Specifying <code>-mfp16-format=alternative</code> selects the ARM alternative format. This representation is similar to the IEEE format, but does not support infinities or NaNs. Instead, the range of exponents is extended, so that this format can represent normalized values in the range of 2^-14 to 131008. </p>\n<p>The <code>__fp16</code> type is a storage format only. For purposes of arithmetic and other operations, <code>__fp16</code> values in C or C++ expressions are automatically promoted to <code>float</code>. In addition, you cannot declare a function with a return value or parameters of type <code>__fp16</code>. </p>\n<p>Note that conversions from <code>double</code> to <code>__fp16</code> involve an intermediate conversion to <code>float</code>. Because of rounding, this can sometimes produce a different result than a direct conversion. </p>\n<p>ARM provides hardware support for conversions between <code>__fp16</code> and <code>float</code> values as an extension to VFP and NEON (Advanced SIMD). GCC generates code using these hardware instructions if you compile with options to select an FPU that provides them; for example, <code>-mfpu=neon-fp16 -mfloat-abi=softfp</code>, in addition to the <code>-mfp16-format</code> option to select a half-precision format. </p>\n<p>Language-level support for the <code>__fp16</code> data type is independent of whether GCC generates code using hardware floating-point instructions. In cases where hardware support is not specified, GCC implements conversions between <code>__fp16</code> and <code>float</code> values as library calls. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Half_002dPrecision.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Half_002dPrecision.html</a>\n  </p>\n</div>\n","decimal-float":"<h1 class=\"section\" id=\"Decimal-Float\">6.13 Decimal Floating Types</h1> <p> As an extension, GNU C supports decimal floating types as defined in the N1312 draft of ISO/IEC WDTR24732. Support for decimal floating types in GCC will evolve as the draft technical report changes. Calling conventions for any target might also change. Not all targets support decimal floating types. </p>\n<p>The decimal floating types are <code>_Decimal32</code>, <code>_Decimal64</code>, and <code>_Decimal128</code>. They use a radix of ten, unlike the floating types <code>float</code>, <code>double</code>, and <code>long double</code> whose radix is not specified by the C standard but is usually two. </p>\n<p>Support for decimal floating types includes the arithmetic operators add, subtract, multiply, divide; unary arithmetic operators; relational operators; equality operators; and conversions to and from integer and other floating types. Use a suffix ‘<code>df</code>’ or ‘<code>DF</code>’ in a literal constant of type <code>_Decimal32</code>, ‘<code>dd</code>’ or ‘<code>DD</code>’ for <code>_Decimal64</code>, and ‘<code>dl</code>’ or ‘<code>DL</code>’ for <code>_Decimal128</code>. </p>\n<p>GCC support of decimal float as specified by the draft technical report is incomplete: </p>\n<ul> <li>When the value of a decimal floating type cannot be represented in the integer type to which it is being converted, the result is undefined rather than the result value specified by the draft technical report. </li>\n<li>GCC does not provide the C library functionality associated with <code>math.h</code>, <code>fenv.h</code>, <code>stdio.h</code>, <code>stdlib.h</code>, and <code>wchar.h</code>, which must come from a separate C library implementation. Because of this the GNU C compiler does not define macro <code>__STDC_DEC_FP__</code> to indicate that the implementation conforms to the technical report. </li>\n</ul> <p>Types <code>_Decimal32</code>, <code>_Decimal64</code>, and <code>_Decimal128</code> are supported by the DWARF 2 debug information format. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Decimal-Float.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Decimal-Float.html</a>\n  </p>\n</div>\n","hex-floats":"<h1 class=\"section\" id=\"Hex-Floats\">6.14 Hex Floats</h1> <p> ISO C99 supports floating-point numbers written not only in the usual decimal notation, such as <code>1.55e1</code>, but also numbers such as <code>0x1.fp3</code> written in hexadecimal format. As a GNU extension, GCC supports this in C90 mode (except in some cases when strictly conforming) and in C++. In that format the ‘<code>0x</code>’ hex introducer and the ‘<code>p</code>’ or ‘<code>P</code>’ exponent field are mandatory. The exponent is a decimal number that indicates the power of 2 by which the significant part is multiplied. Thus ‘<code>0x1.f</code>’ is 1 15/16, ‘<code>p3</code>’ multiplies it by 8, and the value of <code>0x1.fp3</code> is the same as <code>1.55e1</code>. </p>\n<p>Unlike for floating-point numbers in the decimal notation the exponent is always required in the hexadecimal notation. Otherwise the compiler would not be able to resolve the ambiguity of, e.g., <code>0x1.f</code>. This could mean <code>1.0f</code> or <code>1.9375</code> since ‘<code>f</code>’ is also the extension for floating-point constants of type <code>float</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Hex-Floats.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Hex-Floats.html</a>\n  </p>\n</div>\n","fixed_002dpoint":"<h1 class=\"section\" id=\"Fixed_002dPoint\">6.15 Fixed-Point Types</h1> <p> As an extension, GNU C supports fixed-point types as defined in the N1169 draft of ISO/IEC DTR 18037. Support for fixed-point types in GCC will evolve as the draft technical report changes. Calling conventions for any target might also change. Not all targets support fixed-point types. </p>\n<p>The fixed-point types are <code>short _Fract</code>, <code>_Fract</code>, <code>long _Fract</code>, <code>long long _Fract</code>, <code>unsigned short _Fract</code>, <code>unsigned _Fract</code>, <code>unsigned long _Fract</code>, <code>unsigned long long _Fract</code>, <code>_Sat short _Fract</code>, <code>_Sat _Fract</code>, <code>_Sat long _Fract</code>, <code>_Sat long long _Fract</code>, <code>_Sat unsigned short _Fract</code>, <code>_Sat unsigned _Fract</code>, <code>_Sat unsigned long _Fract</code>, <code>_Sat unsigned long long _Fract</code>, <code>short _Accum</code>, <code>_Accum</code>, <code>long _Accum</code>, <code>long long _Accum</code>, <code>unsigned short _Accum</code>, <code>unsigned _Accum</code>, <code>unsigned long _Accum</code>, <code>unsigned long long _Accum</code>, <code>_Sat short _Accum</code>, <code>_Sat _Accum</code>, <code>_Sat long _Accum</code>, <code>_Sat long long _Accum</code>, <code>_Sat unsigned short _Accum</code>, <code>_Sat unsigned _Accum</code>, <code>_Sat unsigned long _Accum</code>, <code>_Sat unsigned long long _Accum</code>. </p>\n<p>Fixed-point data values contain fractional and optional integral parts. The format of fixed-point data varies and depends on the target machine. </p>\n<p>Support for fixed-point types includes: </p>\n<ul> <li>prefix and postfix increment and decrement operators (<code>++</code>, <code>--</code>) </li>\n<li>unary arithmetic operators (<code>+</code>, <code>-</code>, <code>!</code>) </li>\n<li>binary arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) </li>\n<li>binary shift operators (<code>&lt;&lt;</code>, <code>&gt;&gt;</code>) </li>\n<li>relational operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) </li>\n<li>equality operators (<code>==</code>, <code>!=</code>) </li>\n<li>assignment operators (<code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>) </li>\n<li>conversions to and from integer, floating-point, or fixed-point types </li>\n</ul> <p>Use a suffix in a fixed-point literal constant: </p>\n<ul> <li>‘<code>hr</code>’ or ‘<code>HR</code>’ for <code>short _Fract</code> and <code>_Sat short _Fract</code> </li>\n<li>‘<code>r</code>’ or ‘<code>R</code>’ for <code>_Fract</code> and <code>_Sat _Fract</code> </li>\n<li>‘<code>lr</code>’ or ‘<code>LR</code>’ for <code>long _Fract</code> and <code>_Sat long _Fract</code> </li>\n<li>‘<code>llr</code>’ or ‘<code>LLR</code>’ for <code>long long _Fract</code> and <code>_Sat long long _Fract</code> </li>\n<li>‘<code>uhr</code>’ or ‘<code>UHR</code>’ for <code>unsigned short _Fract</code> and <code>_Sat unsigned short _Fract</code> </li>\n<li>‘<code>ur</code>’ or ‘<code>UR</code>’ for <code>unsigned _Fract</code> and <code>_Sat unsigned _Fract</code> </li>\n<li>‘<code>ulr</code>’ or ‘<code>ULR</code>’ for <code>unsigned long _Fract</code> and <code>_Sat unsigned long _Fract</code> </li>\n<li>‘<code>ullr</code>’ or ‘<code>ULLR</code>’ for <code>unsigned long long _Fract</code> and <code>_Sat unsigned long long _Fract</code> </li>\n<li>‘<code>hk</code>’ or ‘<code>HK</code>’ for <code>short _Accum</code> and <code>_Sat short _Accum</code> </li>\n<li>‘<code>k</code>’ or ‘<code>K</code>’ for <code>_Accum</code> and <code>_Sat _Accum</code> </li>\n<li>‘<code>lk</code>’ or ‘<code>LK</code>’ for <code>long _Accum</code> and <code>_Sat long _Accum</code> </li>\n<li>‘<code>llk</code>’ or ‘<code>LLK</code>’ for <code>long long _Accum</code> and <code>_Sat long long _Accum</code> </li>\n<li>‘<code>uhk</code>’ or ‘<code>UHK</code>’ for <code>unsigned short _Accum</code> and <code>_Sat unsigned short _Accum</code> </li>\n<li>‘<code>uk</code>’ or ‘<code>UK</code>’ for <code>unsigned _Accum</code> and <code>_Sat unsigned _Accum</code> </li>\n<li>‘<code>ulk</code>’ or ‘<code>ULK</code>’ for <code>unsigned long _Accum</code> and <code>_Sat unsigned long _Accum</code> </li>\n<li>‘<code>ullk</code>’ or ‘<code>ULLK</code>’ for <code>unsigned long long _Accum</code> and <code>_Sat unsigned long long _Accum</code> </li>\n</ul> <p>GCC support of fixed-point types as specified by the draft technical report is incomplete: </p>\n<ul> <li>Pragmas to control overflow and rounding behaviors are not implemented. </li>\n</ul> <p>Fixed-point types are supported by the DWARF 2 debug information format. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fixed_002dPoint.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fixed_002dPoint.html</a>\n  </p>\n</div>\n","named-address-spaces":"<h1 class=\"section\" id=\"Named-Address-Spaces\">6.16 Named Address Spaces</h1> <p> As an extension, GNU C supports named address spaces as defined in the N1275 draft of ISO/IEC DTR 18037. Support for named address spaces in GCC will evolve as the draft technical report changes. Calling conventions for any target might also change. At present, only the AVR, SPU, M32C, and RL78 targets support address spaces other than the generic address space. </p>\n<p>Address space identifiers may be used exactly like any other C type qualifier (e.g., <code>const</code> or <code>volatile</code>). See the N1275 document for more details. </p>\n\n<h2 class=\"subsection\">6.16.1 AVR Named Address Spaces</h2> <p>On the AVR target, there are several address spaces that can be used in order to put read-only data into the flash memory and access that data by means of the special instructions <code>LPM</code> or <code>ELPM</code> needed to read from flash. </p>\n<p>Per default, any data including read-only data is located in RAM (the generic address space) so that non-generic address spaces are needed to locate read-only data in flash memory <em>and</em> to generate the right instructions to access this data without using (inline) assembler code. </p>\n<dl> <dt><code>__flash</code></dt>\n<dd>\nThe <code>__flash</code> qualifier locates data in the <code>.progmem.data</code> section. Data is read using the <code>LPM</code> instruction. Pointers to this address space are 16 bits wide. </dd>\n<dt>\n<code>__flash1</code><dt>\n<code>__flash2</code><dt>\n<code>__flash3</code><dt>\n<code>__flash4</code><dt><code>__flash5</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThese are 16-bit address spaces locating data in section <code>.progmem</code><var>N</var><code>.data</code> where <var>N</var> refers to address space <code>__flash</code><var>N</var>. The compiler sets the <code>RAMPZ</code> segment register appropriately before reading data by means of the <code>ELPM</code> instruction. </dd>\n<dt><code>__memx</code></dt>\n<dd>\nThis is a 24-bit address space that linearizes flash and RAM: If the high bit of the address is set, data is read from RAM using the lower two bytes as RAM address. If the high bit of the address is clear, data is read from flash with <code>RAMPZ</code> set according to the high byte of the address. See <a href=\"avr-built_002din-functions#AVR-Built_002din-Functions\"><code>__builtin_avr_flash_segment</code></a>. <p>Objects in this address space are located in <code>.progmemx.data</code>. </p>\n</dd>\n</dl> <p><b>Example</b> </p>\n<pre class=\"smallexample\">char my_read (const __flash char ** p)\n{\n    /* p is a pointer to RAM that points to a pointer to flash.\n       The first indirection of p reads that flash pointer\n       from RAM and the second indirection reads a char from this\n       flash address.  */\n\n    return **p;\n}\n\n/* Locate array[] in flash memory */\nconst __flash int array[] = { 3, 5, 7, 11, 13, 17, 19 };\n\nint i = 1;\n\nint main (void)\n{\n   /* Return 17 by reading from flash memory */\n   return array[array[i]];\n}</pre> <p class=\"noindent\">For each named address space supported by avr-gcc there is an equally named but uppercase built-in macro defined. The purpose is to facilitate testing if respective address space support is available or not: </p>\n<pre class=\"smallexample\">#ifdef __FLASH\nconst __flash int var = 1;\n\nint read_var (void)\n{\n    return var;\n}\n#else\n#include &lt;avr/pgmspace.h&gt; /* From AVR-LibC */\n\nconst int var PROGMEM = 1;\n\nint read_var (void)\n{\n    return (int) pgm_read_word (&amp;var);\n}\n#endif /* __FLASH */</pre> <p class=\"noindent\">Notice that attribute <a href=\"variable-attributes#AVR-Variable-Attributes\"><code>progmem</code></a> locates data in flash but accesses to these data read from generic address space, i.e. from RAM, so that you need special accessors like <code>pgm_read_byte</code> from <a href=\"http://nongnu.org/avr-libc/user-manual/\">AVR-LibC</a> together with attribute <code>progmem</code>. </p>\n<p class=\"noindent\"><b>Limitations and caveats</b> </p>\n<ul> <li>Reading across the 64 KiB section boundary of the <code>__flash</code> or <code>__flash</code><var>N</var> address spaces shows undefined behavior. The only address space that supports reading across the 64 KiB flash segment boundaries is <code>__memx</code>. </li>\n<li>If you use one of the <code>__flash</code><var>N</var> address spaces you must arrange your linker script to locate the <code>.progmem</code><var>N</var><code>.data</code> sections according to your needs. </li>\n<li>Any data or pointers to the non-generic address spaces must be qualified as <code>const</code>, i.e. as read-only data. This still applies if the data in one of these address spaces like software version number or calibration lookup table are intended to be changed after load time by, say, a boot loader. In this case the right qualification is <code>const</code> <code>volatile</code> so that the compiler must not optimize away known values or insert them as immediates into operands of instructions. </li>\n<li>The following code initializes a variable <code>pfoo</code> located in static storage with a 24-bit address: <pre class=\"smallexample\">extern const __memx char foo;\nconst __memx void *pfoo = &amp;foo;</pre> <p class=\"noindent\">Such code requires at least binutils 2.23, see <a href=\"http://sourceware.org/PR13503\">PR13503</a>. </p>\n</li>\n</ul> <h2 class=\"subsection\">6.16.2 M32C Named Address Spaces</h2> <p> On the M32C target, with the R8C and M16C CPU variants, variables qualified with <code>__far</code> are accessed using 32-bit addresses in order to access memory beyond the first 64 Ki bytes. If <code>__far</code> is used with the M32CM or M32C CPU variants, it has no effect. </p>\n<h2 class=\"subsection\">6.16.3 RL78 Named Address Spaces</h2> <p> On the RL78 target, variables qualified with <code>__far</code> are accessed with 32-bit pointers (20-bit addresses) rather than the default 16-bit addresses. Non-far variables are assumed to appear in the topmost 64 KiB of the address space. </p>\n<h2 class=\"subsection\">6.16.4 SPU Named Address Spaces</h2> <p> On the SPU target variables may be declared as belonging to another address space by qualifying the type with the <code>__ea</code> address space identifier: </p>\n<pre class=\"smallexample\">extern int __ea i;</pre> <p class=\"noindent\">The compiler generates special code to access the variable <code>i</code>. It may use runtime library support, or generate special machine instructions to access that address space. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Named-Address-Spaces.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Named-Address-Spaces.html</a>\n  </p>\n</div>\n","zero-length":"<h1 class=\"section\" id=\"Zero-Length\">6.17 Arrays of Length Zero</h1> <p> Zero-length arrays are allowed in GNU C. They are very useful as the last element of a structure that is really a header for a variable-length object: </p>\n<pre class=\"smallexample\">struct line {\n  int length;\n  char contents[0];\n};\n\nstruct line *thisline = (struct line *)\n  malloc (sizeof (struct line) + this_length);\nthisline-&gt;length = this_length;</pre> <p>In ISO C90, you would have to give <code>contents</code> a length of 1, which means either you waste space or complicate the argument to <code>malloc</code>. </p>\n<p>In ISO C99, you would use a flexible array member, which is slightly different in syntax and semantics: </p>\n<ul> <li>Flexible array members are written as <code>contents[]</code> without the <code>0</code>. </li>\n<li>Flexible array members have incomplete type, and so the <code>sizeof</code> operator may not be applied. As a quirk of the original implementation of zero-length arrays, <code>sizeof</code> evaluates to zero. </li>\n<li>Flexible array members may only appear as the last member of a <code>struct</code> that is otherwise non-empty. </li>\n<li>A structure containing a flexible array member, or a union containing such a structure (possibly recursively), may not be a member of a structure or an element of an array. (However, these uses are permitted by GCC as extensions.) </li>\n</ul> <p>GCC versions before 3.0 allowed zero-length arrays to be statically initialized, as if they were flexible arrays. In addition to those cases that were useful, it also allowed initializations in situations that would corrupt later data. Non-empty initialization of zero-length arrays is now treated like any case where there are more initializer elements than the array holds, in that a suitable warning about “excess elements in array” is given, and the excess elements (all of them, in this case) are ignored. </p>\n<p>Instead GCC allows static initialization of flexible array members. This is equivalent to defining a new structure containing the original structure followed by an array of sufficient size to contain the data. E.g. in the following, <code>f1</code> is constructed as if it were declared like <code>f2</code>. </p>\n<pre class=\"smallexample\">struct f1 {\n  int x; int y[];\n} f1 = { 1, { 2, 3, 4 } };\n\nstruct f2 {\n  struct f1 f1; int data[3];\n} f2 = { { 1 }, { 2, 3, 4 } };</pre> <p class=\"noindent\">The convenience of this extension is that <code>f1</code> has the desired type, eliminating the need to consistently refer to <code>f2.f1</code>. </p>\n<p>This has symmetry with normal static arrays, in that an array of unknown size is also written with <code>[]</code>. </p>\n<p>Of course, this extension only makes sense if the extra data comes at the end of a top-level object, as otherwise we would be overwriting data at subsequent offsets. To avoid undue complication and confusion with initialization of deeply nested arrays, we simply disallow any non-empty initialization except when the structure is the top-level object. For example: </p>\n<pre class=\"smallexample\">struct foo { int x; int y[]; };\nstruct bar { struct foo z; };\n\nstruct foo a = { 1, { 2, 3, 4 } };        // <span class=\"roman\">Valid.</span>\nstruct bar b = { { 1, { 2, 3, 4 } } };    // <span class=\"roman\">Invalid.</span>\nstruct bar c = { { 1, { } } };            // <span class=\"roman\">Valid.</span>\nstruct foo d[1] = { { 1 { 2, 3, 4 } } };  // <span class=\"roman\">Invalid.</span></pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Zero-Length.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Zero-Length.html</a>\n  </p>\n</div>\n","empty-structures":"<h1 class=\"section\" id=\"Empty-Structures\">6.18 Structures With No Members</h1> <p> GCC permits a C structure to have no members: </p>\n<pre class=\"smallexample\">struct empty {\n};</pre> <p>The structure has size zero. In C++, empty structures are part of the language. G++ treats empty structures as if they had a single member of type <code>char</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Empty-Structures.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Empty-Structures.html</a>\n  </p>\n</div>\n","variable-length":"<h1 class=\"section\" id=\"Variable-Length\">6.19 Arrays of Variable Length</h1> <p> Variable-length automatic arrays are allowed in ISO C99, and as an extension GCC accepts them in C90 mode and in C++. These arrays are declared like any other automatic arrays, but with a length that is not a constant expression. The storage is allocated at the point of declaration and deallocated when the block scope containing the declaration exits. For example: </p>\n<pre class=\"smallexample\">FILE *\nconcat_fopen (char *s1, char *s2, char *mode)\n{\n  char str[strlen (s1) + strlen (s2) + 1];\n  strcpy (str, s1);\n  strcat (str, s2);\n  return fopen (str, mode);\n}</pre> <p>Jumping or breaking out of the scope of the array name deallocates the storage. Jumping into the scope is not allowed; you get an error message for it. </p>\n<p>As an extension, GCC accepts variable-length arrays as a member of a structure or a union. For example: </p>\n<pre class=\"smallexample\">void\nfoo (int n)\n{\n  struct S { int x[n]; };\n}</pre> <p>You can use the function <code>alloca</code> to get an effect much like variable-length arrays. The function <code>alloca</code> is available in many other C implementations (but not in all). On the other hand, variable-length arrays are more elegant. </p>\n<p>There are other differences between these two methods. Space allocated with <code>alloca</code> exists until the containing <em>function</em> returns. The space for a variable-length array is deallocated as soon as the array name's scope ends. (If you use both variable-length arrays and <code>alloca</code> in the same function, deallocation of a variable-length array also deallocates anything more recently allocated with <code>alloca</code>.) </p>\n<p>You can also use variable-length arrays as arguments to functions: </p>\n<pre class=\"smallexample\">struct entry\ntester (int len, char data[len][len])\n{\n  /* <span class=\"roman\">...</span> */\n}</pre> <p>The length of an array is computed once when the storage is allocated and is remembered for the scope of the array in case you access it with <code>sizeof</code>. </p>\n<p>If you want to pass the array first and the length afterward, you can use a forward declaration in the parameter list—another GNU extension. </p>\n<pre class=\"smallexample\">struct entry\ntester (int len; char data[len][len], int len)\n{\n  /* <span class=\"roman\">...</span> */\n}</pre> <p>The ‘<code>int len</code>’ before the semicolon is a parameter forward declaration, and it serves the purpose of making the name <code>len</code> known when the declaration of <code>data</code> is parsed. </p>\n<p>You can write any number of such parameter forward declarations in the parameter list. They can be separated by commas or semicolons, but the last one must end with a semicolon, which is followed by the “real” parameter declarations. Each forward declaration must match a “real” declaration in parameter name and data type. ISO C99 does not support parameter forward declarations. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Variable-Length.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Variable-Length.html</a>\n  </p>\n</div>\n","variadic-macros":"<h1 class=\"section\" id=\"Variadic-Macros\">6.20 Macros with a Variable Number of Arguments.</h1> <p> In the ISO C standard of 1999, a macro can be declared to accept a variable number of arguments much as a function can. The syntax for defining the macro is similar to that of a function. Here is an example: </p>\n<pre class=\"smallexample\">#define debug(format, ...) fprintf (stderr, format, __VA_ARGS__)</pre> <p class=\"noindent\">Here ‘<code>...</code>’ is a variable argument. In the invocation of such a macro, it represents the zero or more tokens until the closing parenthesis that ends the invocation, including any commas. This set of tokens replaces the identifier <code>__VA_ARGS__</code> in the macro body wherever it appears. See the CPP manual for more information. </p>\n<p>GCC has long supported variadic macros, and used a different syntax that allowed you to give a name to the variable arguments just like any other argument. Here is an example: </p>\n<pre class=\"smallexample\">#define debug(format, args...) fprintf (stderr, format, args)</pre> <p class=\"noindent\">This is in all ways equivalent to the ISO C example above, but arguably more readable and descriptive. </p>\n<p>GNU CPP has two further variadic macro extensions, and permits them to be used with either of the above forms of macro definition. </p>\n<p>In standard C, you are not allowed to leave the variable argument out entirely; but you are allowed to pass an empty argument. For example, this invocation is invalid in ISO C, because there is no comma after the string: </p>\n<pre class=\"smallexample\">debug (\"A message\")</pre> <p>GNU CPP permits you to completely omit the variable arguments in this way. In the above examples, the compiler would complain, though since the expansion of the macro still has the extra comma after the format string. </p>\n<p>To help solve this problem, CPP behaves specially for variable arguments used with the token paste operator, ‘<code>##</code>’. If instead you write </p>\n<pre class=\"smallexample\">#define debug(format, ...) fprintf (stderr, format, ## __VA_ARGS__)</pre> <p class=\"noindent\">and if the variable arguments are omitted or empty, the ‘<code>##</code>’ operator causes the preprocessor to remove the comma before it. If you do provide some variable arguments in your macro invocation, GNU CPP does not complain about the paste operation and instead places the variable arguments after the comma. Just like any other pasted macro argument, these arguments are not macro expanded. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Variadic-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Variadic-Macros.html</a>\n  </p>\n</div>\n","escaped-newlines":"<h1 class=\"section\" id=\"Escaped-Newlines\">6.21 Slightly Looser Rules for Escaped Newlines</h1> <p> Recently, the preprocessor has relaxed its treatment of escaped newlines. Previously, the newline had to immediately follow a backslash. The current implementation allows whitespace in the form of spaces, horizontal and vertical tabs, and form feeds between the backslash and the subsequent newline. The preprocessor issues a warning, but treats it as a valid escaped newline and combines the two lines to form a single logical line. This works within comments and tokens, as well as between tokens. Comments are <em>not</em> treated as whitespace for the purposes of this relaxation, since they have not yet been replaced with spaces. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Escaped-Newlines.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Escaped-Newlines.html</a>\n  </p>\n</div>\n","subscripting":"<h1 class=\"section\" id=\"Subscripting\">6.22 Non-Lvalue Arrays May Have Subscripts</h1> <p> In ISO C99, arrays that are not lvalues still decay to pointers, and may be subscripted, although they may not be modified or used after the next sequence point and the unary ‘<code>&amp;</code>’ operator may not be applied to them. As an extension, GNU C allows such arrays to be subscripted in C90 mode, though otherwise they do not decay to pointers outside C99 mode. For example, this is valid in GNU C though not valid in C90: </p>\n<pre class=\"smallexample\">struct foo {int a[4];};\n\nstruct foo f();\n\nbar (int index)\n{\n  return f().a[index];\n}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Subscripting.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Subscripting.html</a>\n  </p>\n</div>\n","pointer-arith":"<h1 class=\"section\" id=\"Pointer-Arith\">6.23 Arithmetic on <code>void</code>- and Function-Pointers</h1> <p> In GNU C, addition and subtraction operations are supported on pointers to <code>void</code> and on pointers to functions. This is done by treating the size of a <code>void</code> or of a function as 1. </p>\n<p>A consequence of this is that <code>sizeof</code> is also allowed on <code>void</code> and on function types, and returns 1. </p>\n<p>The option <code>-Wpointer-arith</code> requests a warning if these extensions are used. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Pointer-Arith.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Pointer-Arith.html</a>\n  </p>\n</div>\n","initializers":"<h1 class=\"section\" id=\"Initializers\">6.24 Non-Constant Initializers</h1> <p> As in standard C++ and ISO C99, the elements of an aggregate initializer for an automatic variable are not required to be constant expressions in GNU C. Here is an example of an initializer with run-time varying elements: </p>\n<pre class=\"smallexample\">foo (float f, float g)\n{\n  float beat_freqs[2] = { f-g, f+g };\n  /* <span class=\"roman\">...</span> */\n}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Initializers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Initializers.html</a>\n  </p>\n</div>\n","compound-literals":"<h1 class=\"section\" id=\"Compound-Literals\">6.25 Compound Literals</h1> \n<p>ISO C99 supports compound literals. A compound literal looks like a cast containing an initializer. Its value is an object of the type specified in the cast, containing the elements specified in the initializer; it is an lvalue. As an extension, GCC supports compound literals in C90 mode and in C++, though the semantics are somewhat different in C++. </p>\n<p>Usually, the specified type is a structure. Assume that <code>struct foo</code> and <code>structure</code> are declared as shown: </p>\n<pre class=\"smallexample\">struct foo {int a; char b[2];} structure;</pre> <p class=\"noindent\">Here is an example of constructing a <code>struct foo</code> with a compound literal: </p>\n<pre class=\"smallexample\">structure = ((struct foo) {x + y, 'a', 0});</pre> <p class=\"noindent\">This is equivalent to writing the following: </p>\n<pre class=\"smallexample\">{\n  struct foo temp = {x + y, 'a', 0};\n  structure = temp;\n}</pre> <p>You can also construct an array, though this is dangerous in C++, as explained below. If all the elements of the compound literal are (made up of) simple constant expressions, suitable for use in initializers of objects of static storage duration, then the compound literal can be coerced to a pointer to its first element and used in such an initializer, as shown here: </p>\n<pre class=\"smallexample\">char **foo = (char *[]) { \"x\", \"y\", \"z\" };</pre> <p>Compound literals for scalar types and union types are also allowed, but then the compound literal is equivalent to a cast. </p>\n<p>As a GNU extension, GCC allows initialization of objects with static storage duration by compound literals (which is not possible in ISO C99, because the initializer is not a constant). It is handled as if the object is initialized only with the bracket enclosed list if the types of the compound literal and the object match. The initializer list of the compound literal must be constant. If the object being initialized has array type of unknown size, the size is determined by compound literal size. </p>\n<pre class=\"smallexample\">static struct foo x = (struct foo) {1, 'a', 'b'};\nstatic int y[] = (int []) {1, 2, 3};\nstatic int z[] = (int [3]) {1};</pre> <p class=\"noindent\">The above lines are equivalent to the following: </p>\n<pre class=\"smallexample\">static struct foo x = {1, 'a', 'b'};\nstatic int y[] = {1, 2, 3};\nstatic int z[] = {1, 0, 0};</pre> <p>In C, a compound literal designates an unnamed object with static or automatic storage duration. In C++, a compound literal designates a temporary object, which only lives until the end of its full-expression. As a result, well-defined C code that takes the address of a subobject of a compound literal can be undefined in C++. For instance, if the array compound literal example above appeared inside a function, any subsequent use of ‘<code>foo</code>’ in C++ has undefined behavior because the lifetime of the array ends after the declaration of ‘<code>foo</code>’. As a result, the C++ compiler now rejects the conversion of a temporary array to a pointer. </p>\n<p>As an optimization, the C++ compiler sometimes gives array compound literals longer lifetimes: when the array either appears outside a function or has const-qualified type. If ‘<code>foo</code>’ and its initializer had elements of ‘<code>char *const</code>’ type rather than ‘<code>char *</code>’, or if ‘<code>foo</code>’ were a global variable, the array would have static storage duration. But it is probably safest just to avoid the use of array compound literals in code compiled as C++. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Compound-Literals.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Compound-Literals.html</a>\n  </p>\n</div>\n","designated-inits":"<h1 class=\"section\" id=\"Designated-Inits\">6.26 Designated Initializers</h1> <p> Standard C90 requires the elements of an initializer to appear in a fixed order, the same as the order of the elements in the array or structure being initialized. </p>\n<p>In ISO C99 you can give the elements in any order, specifying the array indices or structure field names they apply to, and GNU C allows this as an extension in C90 mode as well. This extension is not implemented in GNU C++. </p>\n<p>To specify an array index, write ‘<samp><span class=\"samp\">[</span><var>index</var><span class=\"samp\">] =</span></samp>’ before the element value. For example, </p>\n<pre class=\"smallexample\">int a[6] = { [4] = 29, [2] = 15 };</pre> <p class=\"noindent\">is equivalent to </p>\n<pre class=\"smallexample\">int a[6] = { 0, 0, 15, 0, 29, 0 };</pre> <p class=\"noindent\">The index values must be constant expressions, even if the array being initialized is automatic. </p>\n<p>An alternative syntax for this that has been obsolete since GCC 2.5 but GCC still accepts is to write ‘<samp><span class=\"samp\">[</span><var>index</var><span class=\"samp\">]</span></samp>’ before the element value, with no ‘<code>=</code>’. </p>\n<p>To initialize a range of elements to the same value, write ‘<samp><span class=\"samp\">[</span><var>first</var><span class=\"samp\"> ... </span><var>last</var><span class=\"samp\">] = </span><var>value</var></samp>’. This is a GNU extension. For example, </p>\n<pre class=\"smallexample\">int widths[] = { [0 ... 9] = 1, [10 ... 99] = 2, [100] = 3 };</pre> <p class=\"noindent\">If the value in it has side-effects, the side-effects happen only once, not for each initialized field by the range initializer. </p>\n<p class=\"noindent\">Note that the length of the array is the highest value specified plus one. </p>\n<p>In a structure initializer, specify the name of a field to initialize with ‘<samp><span class=\"samp\">.</span><var>fieldname</var><span class=\"samp\"> =</span></samp>’ before the element value. For example, given the following structure, </p>\n<pre class=\"smallexample\">struct point { int x, y; };</pre> <p class=\"noindent\">the following initialization </p>\n<pre class=\"smallexample\">struct point p = { .y = yvalue, .x = xvalue };</pre> <p class=\"noindent\">is equivalent to </p>\n<pre class=\"smallexample\">struct point p = { xvalue, yvalue };</pre> <p>Another syntax that has the same meaning, obsolete since GCC 2.5, is ‘<samp><var>fieldname</var><span class=\"samp\">:</span></samp>’, as shown here: </p>\n<pre class=\"smallexample\">struct point p = { y: yvalue, x: xvalue };</pre> <p>Omitted field members are implicitly initialized the same as objects that have static storage duration. </p>\n<p>The ‘<samp><span class=\"samp\">[</span><var>index</var><span class=\"samp\">]</span></samp>’ or ‘<samp><span class=\"samp\">.</span><var>fieldname</var></samp>’ is known as a designator. You can also use a designator (or the obsolete colon syntax) when initializing a union, to specify which element of the union should be used. For example, </p>\n<pre class=\"smallexample\">union foo { int i; double d; };\n\nunion foo f = { .d = 4 };</pre> <p class=\"noindent\">converts 4 to a <code>double</code> to store it in the union using the second element. By contrast, casting 4 to type <code>union foo</code> stores it into the union as the integer <code>i</code>, since it is an integer. (See <a href=\"cast-to-union#Cast-to-Union\">Cast to Union</a>.) </p>\n<p>You can combine this technique of naming elements with ordinary C initialization of successive elements. Each initializer element that does not have a designator applies to the next consecutive element of the array or structure. For example, </p>\n<pre class=\"smallexample\">int a[6] = { [1] = v1, v2, [4] = v4 };</pre> <p class=\"noindent\">is equivalent to </p>\n<pre class=\"smallexample\">int a[6] = { 0, v1, v2, 0, v4, 0 };</pre> <p>Labeling the elements of an array initializer is especially useful when the indices are characters or belong to an <code>enum</code> type. For example: </p>\n<pre class=\"smallexample\">int whitespace[256]\n  = { [' '] = 1, ['\\t'] = 1, ['\\h'] = 1,\n      ['\\f'] = 1, ['\\n'] = 1, ['\\r'] = 1 };</pre> <p>You can also write a series of ‘<samp><span class=\"samp\">.</span><var>fieldname</var></samp>’ and ‘<samp><span class=\"samp\">[</span><var>index</var><span class=\"samp\">]</span></samp>’ designators before an ‘<code>=</code>’ to specify a nested subobject to initialize; the list is taken relative to the subobject corresponding to the closest surrounding brace pair. For example, with the ‘<code>struct point</code>’ declaration above: </p>\n<pre class=\"smallexample\">struct point ptarray[10] = { [2].y = yv2, [2].x = xv2, [0].x = xv0 };</pre> <p class=\"noindent\">If the same field is initialized multiple times, it has the value from the last initialization. If any such overridden initialization has side-effect, it is unspecified whether the side-effect happens or not. Currently, GCC discards them and issues a warning. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Designated-Inits.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Designated-Inits.html</a>\n  </p>\n</div>\n","case-ranges":"<h1 class=\"section\" id=\"Case-Ranges\">6.27 Case Ranges</h1> <p> You can specify a range of consecutive values in a single <code>case</code> label, like this: </p>\n<pre class=\"smallexample\">case <var>low</var> ... <var>high</var>:</pre> <p class=\"noindent\">This has the same effect as the proper number of individual <code>case</code> labels, one for each integer value from <var>low</var> to <var>high</var>, inclusive. </p>\n<p>This feature is especially useful for ranges of ASCII character codes: </p>\n<pre class=\"smallexample\">case 'A' ... 'Z':</pre> <p><strong>Be careful:</strong> Write spaces around the <code>...</code>, for otherwise it may be parsed wrong when you use it with integer values. For example, write this: </p>\n<pre class=\"smallexample\">case 1 ... 5:</pre> <p class=\"noindent\">rather than this: </p>\n<pre class=\"smallexample\">case 1...5:</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Case-Ranges.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Case-Ranges.html</a>\n  </p>\n</div>\n","cast-to-union":"<h1 class=\"section\" id=\"Cast-to-Union\">6.28 Cast to a Union Type</h1> <p> A cast to union type is similar to other casts, except that the type specified is a union type. You can specify the type either with <code>union </code><var>tag</var> or with a typedef name. A cast to union is actually a constructor, not a cast, and hence does not yield an lvalue like normal casts. (See <a href=\"compound-literals#Compound-Literals\">Compound Literals</a>.) </p>\n<p>The types that may be cast to the union type are those of the members of the union. Thus, given the following union and variables: </p>\n<pre class=\"smallexample\">union foo { int i; double d; };\nint x;\ndouble y;</pre> <p class=\"noindent\">both <code>x</code> and <code>y</code> can be cast to type <code>union foo</code>. </p>\n<p>Using the cast as the right-hand side of an assignment to a variable of union type is equivalent to storing in a member of the union: </p>\n<pre class=\"smallexample\">union foo u;\n/* <span class=\"roman\">...</span> */\nu = (union foo) x  ==  u.i = x\nu = (union foo) y  ==  u.d = y</pre> <p>You can also use the union cast as a function argument: </p>\n<pre class=\"smallexample\">void hack (union foo);\n/* <span class=\"roman\">...</span> */\nhack ((union foo) x);</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Cast-to-Union.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Cast-to-Union.html</a>\n  </p>\n</div>\n","mixed-declarations":"<h1 class=\"section\" id=\"Mixed-Declarations\">6.29 Mixed Declarations and Code</h1> <p> ISO C99 and ISO C++ allow declarations and code to be freely mixed within compound statements. As an extension, GNU C also allows this in C90 mode. For example, you could do: </p>\n<pre class=\"smallexample\">int i;\n/* <span class=\"roman\">...</span> */\ni++;\nint j = i + 2;</pre> <p>Each identifier is visible from where it is declared until the end of the enclosing block. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Mixed-Declarations.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Mixed-Declarations.html</a>\n  </p>\n</div>\n","function-attributes":"<h1 class=\"section\" id=\"Function-Attributes\">6.30 Declaring Attributes of Functions</h1> <p> In GNU C, you declare certain things about functions called in your program which help the compiler optimize function calls and check your code more carefully. </p>\n<p>The keyword <code>__attribute__</code> allows you to specify special attributes when making a declaration. This keyword is followed by an attribute specification inside double parentheses. The following attributes are currently defined for functions on all targets: <code>aligned</code>, <code>alloc_size</code>, <code>alloc_align</code>, <code>assume_aligned</code>, <code>noreturn</code>, <code>returns_twice</code>, <code>noinline</code>, <code>noclone</code>, <code>always_inline</code>, <code>flatten</code>, <code>pure</code>, <code>const</code>, <code>nothrow</code>, <code>sentinel</code>, <code>format</code>, <code>format_arg</code>, <code>no_instrument_function</code>, <code>no_split_stack</code>, <code>section</code>, <code>constructor</code>, <code>destructor</code>, <code>used</code>, <code>unused</code>, <code>deprecated</code>, <code>weak</code>, <code>malloc</code>, <code>alias</code>, <code>ifunc</code>, <code>warn_unused_result</code>, <code>nonnull</code>, <code>returns_nonnull</code>, <code>gnu_inline</code>, <code>externally_visible</code>, <code>hot</code>, <code>cold</code>, <code>artificial</code>, <code>no_sanitize_address</code>, <code>no_address_safety_analysis</code>, <code>no_sanitize_undefined</code>, <code>error</code> and <code>warning</code>. Several other attributes are defined for functions on particular target systems. Other attributes, including <code>section</code> are supported for variables declarations (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>) and for types (see <a href=\"type-attributes#Type-Attributes\">Type Attributes</a>). </p>\n<p>GCC plugins may provide their own attributes. </p>\n<p>You may also specify attributes with ‘<code>__</code>’ preceding and following each keyword. This allows you to use them in header files without being concerned about a possible macro of the same name. For example, you may use <code>__noreturn__</code> instead of <code>noreturn</code>. </p>\n<p>See <a href=\"attribute-syntax#Attribute-Syntax\">Attribute Syntax</a>, for details of the exact syntax for using attributes. </p>\n<dl>  <dt>\n<code>alias (\"</code><var>target</var><code>\")</code>\n</dt>\n<dd>\nThe <code>alias</code> attribute causes the declaration to be emitted as an alias for another symbol, which must be specified. For instance, <pre class=\"smallexample\">void __f () { /* <span class=\"roman\">Do something.</span> */; }\nvoid f () __attribute__ ((weak, alias (\"__f\")));</pre> <p class=\"noindent\">defines ‘<code>f</code>’ to be a weak alias for ‘<code>__f</code>’. In C++, the mangled name for the target must be used. It is an error if ‘<code>__f</code>’ is not defined in the same translation unit. </p>\n<p>Not all target machines support this attribute. </p>\n</dd>\n<dt>\n<code>aligned (</code><var>alignment</var><code>)</code>\n</dt>\n<dd>\nThis attribute specifies a minimum alignment for the function, measured in bytes. <p>You cannot use this attribute to decrease the alignment of a function, only to increase it. However, when you explicitly specify a function alignment this overrides the effect of the <code>-falign-functions</code> (see <a href=\"optimize-options#Optimize-Options\">Optimize Options</a>) option for this function. </p>\n<p>Note that the effectiveness of <code>aligned</code> attributes may be limited by inherent limitations in your linker. On many systems, the linker is only able to arrange for functions to be aligned up to a certain maximum alignment. (For some linkers, the maximum supported alignment may be very very small.) See your linker documentation for further information. </p>\n<p>The <code>aligned</code> attribute can also be used for variables and fields (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>.) </p>\n</dd>\n<dt><code>alloc_size</code></dt>\n<dd>\nThe <code>alloc_size</code> attribute is used to tell the compiler that the function return value points to memory, where the size is given by one or two of the functions parameters. GCC uses this information to improve the correctness of <code>__builtin_object_size</code>. <p>The function parameter(s) denoting the allocated size are specified by one or two integer arguments supplied to the attribute. The allocated size is either the value of the single function argument specified or the product of the two function arguments specified. Argument numbering starts at one. </p>\n<p>For instance, </p>\n<pre class=\"smallexample\">void* my_calloc(size_t, size_t) __attribute__((alloc_size(1,2)))\nvoid* my_realloc(void*, size_t) __attribute__((alloc_size(2)))</pre> <p class=\"noindent\">declares that <code>my_calloc</code> returns memory of the size given by the product of parameter 1 and 2 and that <code>my_realloc</code> returns memory of the size given by parameter 2. </p>\n</dd>\n<dt><code>alloc_align</code></dt>\n<dd>\nThe <code>alloc_align</code> attribute is used to tell the compiler that the function return value points to memory, where the returned pointer minimum alignment is given by one of the functions parameters. GCC uses this information to improve pointer alignment analysis. <p>The function parameter denoting the allocated alignment is specified by one integer argument, whose number is the argument of the attribute. Argument numbering starts at one. </p>\n<p>For instance, </p>\n<pre class=\"smallexample\">void* my_memalign(size_t, size_t) __attribute__((alloc_align(1)))</pre> <p class=\"noindent\">declares that <code>my_memalign</code> returns memory with minimum alignment given by parameter 1. </p>\n</dd>\n<dt><code>assume_aligned</code></dt>\n<dd>\nThe <code>assume_aligned</code> attribute is used to tell the compiler that the function return value points to memory, where the returned pointer minimum alignment is given by the first argument. If the attribute has two arguments, the second argument is misalignment offset. <p>For instance </p>\n<pre class=\"smallexample\">void* my_alloc1(size_t) __attribute__((assume_aligned(16)))\nvoid* my_alloc2(size_t) __attribute__((assume_aligned(32, 8)))</pre> <p class=\"noindent\">declares that <code>my_alloc1</code> returns 16-byte aligned pointer and that <code>my_alloc2</code> returns a pointer whose value modulo 32 is equal to 8. </p>\n</dd>\n<dt><code>always_inline</code></dt>\n<dd>\nGenerally, functions are not inlined unless optimization is specified. For functions declared inline, this attribute inlines the function even if no optimization level is specified. </dd>\n<dt><code>gnu_inline</code></dt>\n<dd>\nThis attribute should be used with a function that is also declared with the <code>inline</code> keyword. It directs GCC to treat the function as if it were defined in gnu90 mode even when compiling in C99 or gnu99 mode. <p>If the function is declared <code>extern</code>, then this definition of the function is used only for inlining. In no case is the function compiled as a standalone function, not even if you take its address explicitly. Such an address becomes an external reference, as if you had only declared the function, and had not defined it. This has almost the effect of a macro. The way to use this is to put a function definition in a header file with this attribute, and put another copy of the function, without <code>extern</code>, in a library file. The definition in the header file causes most calls to the function to be inlined. If any uses of the function remain, they refer to the single copy in the library. Note that the two definitions of the functions need not be precisely the same, although if they do not have the same effect your program may behave oddly. </p>\n<p>In C, if the function is neither <code>extern</code> nor <code>static</code>, then the function is compiled as a standalone function, as well as being inlined where possible. </p>\n<p>This is how GCC traditionally handled functions declared <code>inline</code>. Since ISO C99 specifies a different semantics for <code>inline</code>, this function attribute is provided as a transition measure and as a useful feature in its own right. This attribute is available in GCC 4.1.3 and later. It is available if either of the preprocessor macros <code>__GNUC_GNU_INLINE__</code> or <code>__GNUC_STDC_INLINE__</code> are defined. See <a href=\"inline#Inline\">An Inline Function is As Fast As a Macro</a>. </p>\n<p>In C++, this attribute does not depend on <code>extern</code> in any way, but it still requires the <code>inline</code> keyword to enable its special behavior. </p>\n</dd>\n<dt><code>artificial</code></dt>\n<dd>\nThis attribute is useful for small inline wrappers that if possible should appear during debugging as a unit. Depending on the debug info format it either means marking the function as artificial or using the caller location for all instructions within the inlined body. </dd>\n<dt><code>bank_switch</code></dt>\n<dd>\nWhen added to an interrupt handler with the M32C port, causes the prologue and epilogue to use bank switching to preserve the registers rather than saving them on the stack. </dd>\n<dt><code>flatten</code></dt>\n<dd>\nGenerally, inlining into a function is limited. For a function marked with this attribute, every call inside this function is inlined, if possible. Whether the function itself is considered for inlining depends on its size and the current inlining parameters. </dd>\n<dt>\n<code>error (\"</code><var>message</var><code>\")</code>\n</dt>\n<dd>\nIf this attribute is used on a function declaration and a call to such a function is not eliminated through dead code elimination or other optimizations, an error that includes <var>message</var> is diagnosed. This is useful for compile-time checking, especially together with <code>__builtin_constant_p</code> and inline functions where checking the inline function arguments is not possible through <code>extern char [(condition) ? 1 : -1];</code> tricks. While it is possible to leave the function undefined and thus invoke a link failure, when using this attribute the problem is diagnosed earlier and with exact location of the call even in presence of inline functions or when not emitting debugging information. </dd>\n<dt>\n<code>warning (\"</code><var>message</var><code>\")</code>\n</dt>\n<dd>\nIf this attribute is used on a function declaration and a call to such a function is not eliminated through dead code elimination or other optimizations, a warning that includes <var>message</var> is diagnosed. This is useful for compile-time checking, especially together with <code>__builtin_constant_p</code> and inline functions. While it is possible to define the function with a message in <code>.gnu.warning*</code> section, when using this attribute the problem is diagnosed earlier and with exact location of the call even in presence of inline functions or when not emitting debugging information. </dd>\n<dt><code>cdecl</code></dt>\n<dd>\nOn the Intel 386, the <code>cdecl</code> attribute causes the compiler to assume that the calling function pops off the stack space used to pass arguments. This is useful to override the effects of the <code>-mrtd</code> switch. </dd>\n<dt><code>const</code></dt>\n<dd>\nMany functions do not examine any values except their arguments, and have no effects except the return value. Basically this is just slightly more strict class than the <code>pure</code> attribute below, since function is not allowed to read global memory. <p>Note that a function that has pointer arguments and examines the data pointed to must <em>not</em> be declared <code>const</code>. Likewise, a function that calls a non-<code>const</code> function usually must not be <code>const</code>. It does not make sense for a <code>const</code> function to return <code>void</code>. </p>\n<p>The attribute <code>const</code> is not implemented in GCC versions earlier than 2.5. An alternative way to declare that a function has no side effects, which works in the current version and in some older versions, is as follows: </p>\n<pre class=\"smallexample\">typedef int intfn ();\n\nextern const intfn square;</pre> <p class=\"noindent\">This approach does not work in GNU C++ from 2.6.0 on, since the language specifies that the ‘<code>const</code>’ must be attached to the return value. </p>\n</dd>\n<dt>\n<code>constructor</code><dt>\n<code>destructor</code><dt>\n<code>constructor (</code><var>priority</var><code>)</code><dt>\n<code>destructor (</code><var>priority</var><code>)</code>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThe <code>constructor</code> attribute causes the function to be called automatically before execution enters <code>main ()</code>. Similarly, the <code>destructor</code> attribute causes the function to be called automatically after <code>main ()</code> completes or <code>exit ()</code> is called. Functions with these attributes are useful for initializing data that is used implicitly during the execution of the program. <p>You may provide an optional integer priority to control the order in which constructor and destructor functions are run. A constructor with a smaller priority number runs before a constructor with a larger priority number; the opposite relationship holds for destructors. So, if you have a constructor that allocates a resource and a destructor that deallocates the same resource, both functions typically have the same priority. The priorities for constructor and destructor functions are the same as those specified for namespace-scope C++ objects (see <a href=\"c_002b_002b-attributes#C_002b_002b-Attributes\">C++ Attributes</a>). </p>\n<p>These attributes are not currently implemented for Objective-C. </p>\n</dd>\n<dt>\n<code>deprecated</code><dt>\n<code>deprecated (</code><var>msg</var><code>)</code>\n</dt>\n</dt>\n<dd>\nThe <code>deprecated</code> attribute results in a warning if the function is used anywhere in the source file. This is useful when identifying functions that are expected to be removed in a future version of a program. The warning also includes the location of the declaration of the deprecated function, to enable users to easily find further information about why the function is deprecated, or what they should do instead. Note that the warnings only occurs for uses: <pre class=\"smallexample\">int old_fn () __attribute__ ((deprecated));\nint old_fn ();\nint (*fn_ptr)() = old_fn;</pre> <p class=\"noindent\">results in a warning on line 3 but not line 2. The optional <var>msg</var> argument, which must be a string, is printed in the warning if present. </p>\n<p>The <code>deprecated</code> attribute can also be used for variables and types (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>, see <a href=\"type-attributes#Type-Attributes\">Type Attributes</a>.) </p>\n</dd>\n<dt><code>disinterrupt</code></dt>\n<dd>\nOn Epiphany and MeP targets, this attribute causes the compiler to emit instructions to disable interrupts for the duration of the given function. </dd>\n<dt><code>dllexport</code></dt>\n<dd>\nOn Microsoft Windows targets and Symbian OS targets the <code>dllexport</code> attribute causes the compiler to provide a global pointer to a pointer in a DLL, so that it can be referenced with the <code>dllimport</code> attribute. On Microsoft Windows targets, the pointer name is formed by combining <code>_imp__</code> and the function or variable name. <p>You can use <code>__declspec(dllexport)</code> as a synonym for <code>__attribute__ ((dllexport))</code> for compatibility with other compilers. </p>\n<p>On systems that support the <code>visibility</code> attribute, this attribute also implies “default” visibility. It is an error to explicitly specify any other visibility. </p>\n<p>In previous versions of GCC, the <code>dllexport</code> attribute was ignored for inlined functions, unless the <code>-fkeep-inline-functions</code> flag had been used. The default behavior now is to emit all dllexported inline functions; however, this can cause object file-size bloat, in which case the old behavior can be restored by using <code>-fno-keep-inline-dllexport</code>. </p>\n<p>The attribute is also ignored for undefined symbols. </p>\n<p>When applied to C++ classes, the attribute marks defined non-inlined member functions and static data members as exports. Static consts initialized in-class are not marked unless they are also defined out-of-class. </p>\n<p>For Microsoft Windows targets there are alternative methods for including the symbol in the DLL's export table such as using a <code>.def</code> file with an <code>EXPORTS</code> section or, with GNU ld, using the <code>--export-all</code> linker flag. </p>\n</dd>\n<dt><code>dllimport</code></dt>\n<dd>\nOn Microsoft Windows and Symbian OS targets, the <code>dllimport</code> attribute causes the compiler to reference a function or variable via a global pointer to a pointer that is set up by the DLL exporting the symbol. The attribute implies <code>extern</code>. On Microsoft Windows targets, the pointer name is formed by combining <code>_imp__</code> and the function or variable name. <p>You can use <code>__declspec(dllimport)</code> as a synonym for <code>__attribute__ ((dllimport))</code> for compatibility with other compilers. </p>\n<p>On systems that support the <code>visibility</code> attribute, this attribute also implies “default” visibility. It is an error to explicitly specify any other visibility. </p>\n<p>Currently, the attribute is ignored for inlined functions. If the attribute is applied to a symbol <em>definition</em>, an error is reported. If a symbol previously declared <code>dllimport</code> is later defined, the attribute is ignored in subsequent references, and a warning is emitted. The attribute is also overridden by a subsequent declaration as <code>dllexport</code>. </p>\n<p>When applied to C++ classes, the attribute marks non-inlined member functions and static data members as imports. However, the attribute is ignored for virtual methods to allow creation of vtables using thunks. </p>\n<p>On the SH Symbian OS target the <code>dllimport</code> attribute also has another affect—it can cause the vtable and run-time type information for a class to be exported. This happens when the class has a dllimported constructor or a non-inline, non-pure virtual function and, for either of those two conditions, the class also has an inline constructor or destructor and has a key function that is defined in the current translation unit. </p>\n<p>For Microsoft Windows targets the use of the <code>dllimport</code> attribute on functions is not necessary, but provides a small performance benefit by eliminating a thunk in the DLL. The use of the <code>dllimport</code> attribute on imported variables was required on older versions of the GNU linker, but can now be avoided by passing the <code>--enable-auto-import</code> switch to the GNU linker. As with functions, using the attribute for a variable eliminates a thunk in the DLL. </p>\n<p>One drawback to using this attribute is that a pointer to a <em>variable</em> marked as <code>dllimport</code> cannot be used as a constant address. However, a pointer to a <em>function</em> with the <code>dllimport</code> attribute can be used as a constant initializer; in this case, the address of a stub function in the import lib is referenced. On Microsoft Windows targets, the attribute can be disabled for functions by setting the <code>-mnop-fun-dllimport</code> flag. </p>\n</dd>\n<dt><code>eightbit_data</code></dt>\n<dd>\nUse this attribute on the H8/300, H8/300H, and H8S to indicate that the specified variable should be placed into the eight-bit data section. The compiler generates more efficient code for certain operations on data in the eight-bit data area. Note the eight-bit data area is limited to 256 bytes of data. <p>You must use GAS and GLD from GNU binutils version 2.7 or later for this attribute to work correctly. </p>\n</dd>\n<dt><code>exception</code></dt>\n<dd>\nUse this attribute on the NDS32 target to indicate that the specified function is an exception handler. The compiler will generate corresponding sections for use in an exception handler. </dd>\n<dt><code>exception_handler</code></dt>\n<dd>\nUse this attribute on the Blackfin to indicate that the specified function is an exception handler. The compiler generates function entry and exit sequences suitable for use in an exception handler when this attribute is present. </dd>\n<dt><code>externally_visible</code></dt>\n<dd>\nThis attribute, attached to a global variable or function, nullifies the effect of the <code>-fwhole-program</code> command-line option, so the object remains visible outside the current compilation unit. <p>If <code>-fwhole-program</code> is used together with <code>-flto</code> and <code>gold</code> is used as the linker plugin, <code>externally_visible</code> attributes are automatically added to functions (not variable yet due to a current <code>gold</code> issue) that are accessed outside of LTO objects according to resolution file produced by <code>gold</code>. For other linkers that cannot generate resolution file, explicit <code>externally_visible</code> attributes are still necessary. </p>\n</dd>\n<dt><code>far</code></dt>\n<dd>\nOn 68HC11 and 68HC12 the <code>far</code> attribute causes the compiler to use a calling convention that takes care of switching memory banks when entering and leaving a function. This calling convention is also the default when using the <code>-mlong-calls</code> option. <p>On 68HC12 the compiler uses the <code>call</code> and <code>rtc</code> instructions to call and return from a function. </p>\n<p>On 68HC11 the compiler generates a sequence of instructions to invoke a board-specific routine to switch the memory bank and call the real function. The board-specific routine simulates a <code>call</code>. At the end of a function, it jumps to a board-specific routine instead of using <code>rts</code>. The board-specific return routine simulates the <code>rtc</code>. </p>\n<p>On MeP targets this causes the compiler to use a calling convention that assumes the called function is too far away for the built-in addressing modes. </p>\n</dd>\n<dt><code>fast_interrupt</code></dt>\n<dd>\nUse this attribute on the M32C and RX ports to indicate that the specified function is a fast interrupt handler. This is just like the <code>interrupt</code> attribute, except that <code>freit</code> is used to return instead of <code>reit</code>. </dd>\n<dt><code>fastcall</code></dt>\n<dd>\nOn the Intel 386, the <code>fastcall</code> attribute causes the compiler to pass the first argument (if of integral type) in the register ECX and the second argument (if of integral type) in the register EDX. Subsequent and other typed arguments are passed on the stack. The called function pops the arguments off the stack. If the number of arguments is variable all arguments are pushed on the stack. </dd>\n<dt><code>thiscall</code></dt>\n<dd>\nOn the Intel 386, the <code>thiscall</code> attribute causes the compiler to pass the first argument (if of integral type) in the register ECX. Subsequent and other typed arguments are passed on the stack. The called function pops the arguments off the stack. If the number of arguments is variable all arguments are pushed on the stack. The <code>thiscall</code> attribute is intended for C++ non-static member functions. As a GCC extension, this calling convention can be used for C functions and for static member methods. </dd>\n<dt>\n<code>format (</code><var>archetype</var><code>, </code><var>string-index</var><code>, </code><var>first-to-check</var><code>)</code>\n</dt>\n<dd>\nThe <code>format</code> attribute specifies that a function takes <code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code> style arguments that should be type-checked against a format string. For example, the declaration: <pre class=\"smallexample\">extern int\nmy_printf (void *my_object, const char *my_format, ...)\n      __attribute__ ((format (printf, 2, 3)));</pre> <p class=\"noindent\">causes the compiler to check the arguments in calls to <code>my_printf</code> for consistency with the <code>printf</code> style format string argument <code>my_format</code>. </p>\n<p>The parameter <var>archetype</var> determines how the format string is interpreted, and should be <code>printf</code>, <code>scanf</code>, <code>strftime</code>, <code>gnu_printf</code>, <code>gnu_scanf</code>, <code>gnu_strftime</code> or <code>strfmon</code>. (You can also use <code>__printf__</code>, <code>__scanf__</code>, <code>__strftime__</code> or <code>__strfmon__</code>.) On MinGW targets, <code>ms_printf</code>, <code>ms_scanf</code>, and <code>ms_strftime</code> are also present. <var>archetype</var> values such as <code>printf</code> refer to the formats accepted by the system's C runtime library, while values prefixed with ‘<code>gnu_</code>’ always refer to the formats accepted by the GNU C Library. On Microsoft Windows targets, values prefixed with ‘<code>ms_</code>’ refer to the formats accepted by the <code>msvcrt.dll</code> library. The parameter <var>string-index</var> specifies which argument is the format string argument (starting from 1), while <var>first-to-check</var> is the number of the first argument to check against the format string. For functions where the arguments are not available to be checked (such as <code>vprintf</code>), specify the third parameter as zero. In this case the compiler only checks the format string for consistency. For <code>strftime</code> formats, the third parameter is required to be zero. Since non-static C++ methods have an implicit <code>this</code> argument, the arguments of such methods should be counted from two, not one, when giving values for <var>string-index</var> and <var>first-to-check</var>. </p>\n<p>In the example above, the format string (<code>my_format</code>) is the second argument of the function <code>my_print</code>, and the arguments to check start with the third argument, so the correct parameters for the format attribute are 2 and 3. </p>\n<p>The <code>format</code> attribute allows you to identify your own functions that take format strings as arguments, so that GCC can check the calls to these functions for errors. The compiler always (unless <code>-ffreestanding</code> or <code>-fno-builtin</code> is used) checks formats for the standard library functions <code>printf</code>, <code>fprintf</code>, <code>sprintf</code>, <code>scanf</code>, <code>fscanf</code>, <code>sscanf</code>, <code>strftime</code>, <code>vprintf</code>, <code>vfprintf</code> and <code>vsprintf</code> whenever such warnings are requested (using <code>-Wformat</code>), so there is no need to modify the header file <code>stdio.h</code>. In C99 mode, the functions <code>snprintf</code>, <code>vsnprintf</code>, <code>vscanf</code>, <code>vfscanf</code> and <code>vsscanf</code> are also checked. Except in strictly conforming C standard modes, the X/Open function <code>strfmon</code> is also checked as are <code>printf_unlocked</code> and <code>fprintf_unlocked</code>. See <a href=\"c-dialect-options#C-Dialect-Options\">Options Controlling C Dialect</a>. </p>\n<p>For Objective-C dialects, <code>NSString</code> (or <code>__NSString__</code>) is recognized in the same context. Declarations including these format attributes are parsed for correct syntax, however the result of checking of such format strings is not yet defined, and is not carried out by this version of the compiler. </p>\n<p>The target may also provide additional types of format checks. See <a href=\"target-format-checks#Target-Format-Checks\">Format Checks Specific to Particular Target Machines</a>. </p>\n</dd>\n<dt>\n<code>format_arg (</code><var>string-index</var><code>)</code>\n</dt>\n<dd>\nThe <code>format_arg</code> attribute specifies that a function takes a format string for a <code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code> style function and modifies it (for example, to translate it into another language), so the result can be passed to a <code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code> style function (with the remaining arguments to the format function the same as they would have been for the unmodified string). For example, the declaration: <pre class=\"smallexample\">extern char *\nmy_dgettext (char *my_domain, const char *my_format)\n      __attribute__ ((format_arg (2)));</pre> <p class=\"noindent\">causes the compiler to check the arguments in calls to a <code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code> type function, whose format string argument is a call to the <code>my_dgettext</code> function, for consistency with the format string argument <code>my_format</code>. If the <code>format_arg</code> attribute had not been specified, all the compiler could tell in such calls to format functions would be that the format string argument is not constant; this would generate a warning when <code>-Wformat-nonliteral</code> is used, but the calls could not be checked without the attribute. </p>\n<p>The parameter <var>string-index</var> specifies which argument is the format string argument (starting from one). Since non-static C++ methods have an implicit <code>this</code> argument, the arguments of such methods should be counted from two. </p>\n<p>The <code>format_arg</code> attribute allows you to identify your own functions that modify format strings, so that GCC can check the calls to <code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code> type function whose operands are a call to one of your own function. The compiler always treats <code>gettext</code>, <code>dgettext</code>, and <code>dcgettext</code> in this manner except when strict ISO C support is requested by <code>-ansi</code> or an appropriate <code>-std</code> option, or <code>-ffreestanding</code> or <code>-fno-builtin</code> is used. See <a href=\"c-dialect-options#C-Dialect-Options\">Options Controlling C Dialect</a>. </p>\n<p>For Objective-C dialects, the <code>format-arg</code> attribute may refer to an <code>NSString</code> reference for compatibility with the <code>format</code> attribute above. </p>\n<p>The target may also allow additional types in <code>format-arg</code> attributes. See <a href=\"target-format-checks#Target-Format-Checks\">Format Checks Specific to Particular Target Machines</a>. </p>\n</dd>\n<dt><code>function_vector</code></dt>\n<dd>\nUse this attribute on the H8/300, H8/300H, and H8S to indicate that the specified function should be called through the function vector. Calling a function through the function vector reduces code size, however; the function vector has a limited size (maximum 128 entries on the H8/300 and 64 entries on the H8/300H and H8S) and shares space with the interrupt vector. <p>On SH2A targets, this attribute declares a function to be called using the TBR relative addressing mode. The argument to this attribute is the entry number of the same function in a vector table containing all the TBR relative addressable functions. For correct operation the TBR must be setup accordingly to point to the start of the vector table before any functions with this attribute are invoked. Usually a good place to do the initialization is the startup routine. The TBR relative vector table can have at max 256 function entries. The jumps to these functions are generated using a SH2A specific, non delayed branch instruction JSR/N @(disp8,TBR). You must use GAS and GLD from GNU binutils version 2.7 or later for this attribute to work correctly. </p>\n<p>Please refer the example of M16C target, to see the use of this attribute while declaring a function, </p>\n<p>In an application, for a function being called once, this attribute saves at least 8 bytes of code; and if other successive calls are being made to the same function, it saves 2 bytes of code per each of these calls. </p>\n<p>On M16C/M32C targets, the <code>function_vector</code> attribute declares a special page subroutine call function. Use of this attribute reduces the code size by 2 bytes for each call generated to the subroutine. The argument to the attribute is the vector number entry from the special page vector table which contains the 16 low-order bits of the subroutine's entry address. Each vector table has special page number (18 to 255) that is used in <code>jsrs</code> instructions. Jump addresses of the routines are generated by adding 0x0F0000 (in case of M16C targets) or 0xFF0000 (in case of M32C targets), to the 2-byte addresses set in the vector table. Therefore you need to ensure that all the special page vector routines should get mapped within the address range 0x0F0000 to 0x0FFFFF (for M16C) and 0xFF0000 to 0xFFFFFF (for M32C). </p>\n<p>In the following example 2 bytes are saved for each call to function <code>foo</code>. </p>\n<pre class=\"smallexample\">void foo (void) __attribute__((function_vector(0x18)));\nvoid foo (void)\n{\n}\n\nvoid bar (void)\n{\n    foo();\n}</pre> <p>If functions are defined in one file and are called in another file, then be sure to write this declaration in both files. </p>\n<p>This attribute is ignored for R8C target. </p>\n</dd>\n<dt>\n<code>ifunc (\"</code><var>resolver</var><code>\")</code>\n</dt>\n<dd>\nThe <code>ifunc</code> attribute is used to mark a function as an indirect function using the STT_GNU_IFUNC symbol type extension to the ELF standard. This allows the resolution of the symbol value to be determined dynamically at load time, and an optimized version of the routine can be selected for the particular processor or other system characteristics determined then. To use this attribute, first define the implementation functions available, and a resolver function that returns a pointer to the selected implementation function. The implementation functions' declarations must match the API of the function being implemented, the resolver's declaration is be a function returning pointer to void function returning void: <pre class=\"smallexample\">void *my_memcpy (void *dst, const void *src, size_t len)\n{\n  ...\n}\n\nstatic void (*resolve_memcpy (void)) (void)\n{\n  return my_memcpy; // we'll just always select this routine\n}</pre> <p class=\"noindent\">The exported header file declaring the function the user calls would contain: </p>\n<pre class=\"smallexample\">extern void *memcpy (void *, const void *, size_t);</pre> <p class=\"noindent\">allowing the user to call this as a regular function, unaware of the implementation. Finally, the indirect function needs to be defined in the same translation unit as the resolver function: </p>\n<pre class=\"smallexample\">void *memcpy (void *, const void *, size_t)\n     __attribute__ ((ifunc (\"resolve_memcpy\")));</pre> <p>Indirect functions cannot be weak, and require a recent binutils (at least version 2.20.1), and GNU C library (at least version 2.11.1). </p>\n</dd>\n<dt><code>interrupt</code></dt>\n<dd>\nUse this attribute on the ARC, ARM, AVR, CR16, Epiphany, M32C, M32R/D, m68k, MeP, MIPS, MSP430, RL78, RX and Xstormy16 ports to indicate that the specified function is an interrupt handler. The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present. With Epiphany targets it may also generate a special section with code to initialize the interrupt vector table. <p>Note, interrupt handlers for the Blackfin, H8/300, H8/300H, H8S, MicroBlaze, and SH processors can be specified via the <code>interrupt_handler</code> attribute. </p>\n<p>Note, on the ARC, you must specify the kind of interrupt to be handled in a parameter to the interrupt attribute like this: </p>\n<pre class=\"smallexample\">void f () __attribute__ ((interrupt (\"ilink1\")));</pre> <p>Permissible values for this parameter are: <code>ilink1</code> and <code>ilink2</code>. </p>\n<p>Note, on the AVR, the hardware globally disables interrupts when an interrupt is executed. The first instruction of an interrupt handler declared with this attribute is a <code>SEI</code> instruction to re-enable interrupts. See also the <code>signal</code> function attribute that does not insert a <code>SEI</code> instruction. If both <code>signal</code> and <code>interrupt</code> are specified for the same function, <code>signal</code> is silently ignored. </p>\n<p>Note, for the ARM, you can specify the kind of interrupt to be handled by adding an optional parameter to the interrupt attribute like this: </p>\n<pre class=\"smallexample\">void f () __attribute__ ((interrupt (\"IRQ\")));</pre> <p class=\"noindent\">Permissible values for this parameter are: <code>IRQ</code>, <code>FIQ</code>, <code>SWI</code>, <code>ABORT</code> and <code>UNDEF</code>. </p>\n<p>On ARMv7-M the interrupt type is ignored, and the attribute means the function may be called with a word-aligned stack pointer. </p>\n<p>Note, for the MSP430 you can provide an argument to the interrupt attribute which specifies a name or number. If the argument is a number it indicates the slot in the interrupt vector table (0 - 31) to which this handler should be assigned. If the argument is a name it is treated as a symbolic name for the vector slot. These names should match up with appropriate entries in the linker script. By default the names <code>watchdog</code> for vector 26, <code>nmi</code> for vector 30 and <code>reset</code> for vector 31 are recognised. </p>\n<p>You can also use the following function attributes to modify how normal functions interact with interrupt functions: </p>\n<dl> <dt><code>critical</code></dt>\n<dd>\nCritical functions disable interrupts upon entry and restore the previous interrupt state upon exit. Critical functions cannot also have the <code>naked</code> or <code>reentrant</code> attributes. They can have the <code>interrupt</code> attribute. </dd>\n<dt><code>reentrant</code></dt>\n<dd>\nReentrant functions disable interrupts upon entry and enable them upon exit. Reentrant functions cannot also have the <code>naked</code> or <code>critical</code> attributes. They can have the <code>interrupt</code> attribute. </dd>\n<dt><code>wakeup</code></dt>\n<dd>\nThis attribute only applies to interrupt functions. It is silently ignored if applied to a non-interrupt function. A wakeup interrupt function will rouse the processor from any low-power state that it might be in when the function exits. </dd>\n</dl> <p>On Epiphany targets one or more optional parameters can be added like this: </p>\n<pre class=\"smallexample\">void __attribute__ ((interrupt (\"dma0, dma1\"))) universal_dma_handler ();</pre> <p>Permissible values for these parameters are: <code>reset</code>, <code>software_exception</code>, <code>page_miss</code>, <code>timer0</code>, <code>timer1</code>, <code>message</code>, <code>dma0</code>, <code>dma1</code>, <code>wand</code> and <code>swi</code>. Multiple parameters indicate that multiple entries in the interrupt vector table should be initialized for this function, i.e. for each parameter <var>name</var>, a jump to the function is emitted in the section ivt_entry_<var>name</var>. The parameter(s) may be omitted entirely, in which case no interrupt vector table entry is provided. </p>\n<p>Note, on Epiphany targets, interrupts are enabled inside the function unless the <code>disinterrupt</code> attribute is also specified. </p>\n<p>On Epiphany targets, you can also use the following attribute to modify the behavior of an interrupt handler: </p>\n<dl> <dt><code>forwarder_section</code></dt>\n<dd>\nThe interrupt handler may be in external memory which cannot be reached by a branch instruction, so generate a local memory trampoline to transfer control. The single parameter identifies the section where the trampoline is placed. </dd>\n</dl> <p>The following examples are all valid uses of these attributes on Epiphany targets: </p>\n<pre class=\"smallexample\">void __attribute__ ((interrupt)) universal_handler ();\nvoid __attribute__ ((interrupt (\"dma1\"))) dma1_handler ();\nvoid __attribute__ ((interrupt (\"dma0, dma1\"))) universal_dma_handler ();\nvoid __attribute__ ((interrupt (\"timer0\"), disinterrupt))\n  fast_timer_handler ();\nvoid __attribute__ ((interrupt (\"dma0, dma1\"), forwarder_section (\"tramp\")))\n  external_dma_handler ();</pre> <p>On MIPS targets, you can use the following attributes to modify the behavior of an interrupt handler: </p>\n<dl> <dt><code>use_shadow_register_set</code></dt>\n<dd>\nAssume that the handler uses a shadow register set, instead of the main general-purpose registers. </dd>\n<dt><code>keep_interrupts_masked</code></dt>\n<dd>\nKeep interrupts masked for the whole function. Without this attribute, GCC tries to reenable interrupts for as much of the function as it can. </dd>\n<dt><code>use_debug_exception_return</code></dt>\n<dd>\nReturn using the <code>deret</code> instruction. Interrupt handlers that don't have this attribute return using <code>eret</code> instead. </dd>\n</dl> <p>You can use any combination of these attributes, as shown below: </p>\n<pre class=\"smallexample\">void __attribute__ ((interrupt)) v0 ();\nvoid __attribute__ ((interrupt, use_shadow_register_set)) v1 ();\nvoid __attribute__ ((interrupt, keep_interrupts_masked)) v2 ();\nvoid __attribute__ ((interrupt, use_debug_exception_return)) v3 ();\nvoid __attribute__ ((interrupt, use_shadow_register_set,\n                     keep_interrupts_masked)) v4 ();\nvoid __attribute__ ((interrupt, use_shadow_register_set,\n                     use_debug_exception_return)) v5 ();\nvoid __attribute__ ((interrupt, keep_interrupts_masked,\n                     use_debug_exception_return)) v6 ();\nvoid __attribute__ ((interrupt, use_shadow_register_set,\n                     keep_interrupts_masked,\n                     use_debug_exception_return)) v7 ();</pre> <p>On NDS32 target, this attribute is to indicate that the specified function is an interrupt handler. The compiler will generate corresponding sections for use in an interrupt handler. You can use the following attributes to modify the behavior: </p>\n<dl> <dt><code>nested</code></dt>\n<dd>\nThis interrupt service routine is interruptible. </dd>\n<dt><code>not_nested</code></dt>\n<dd>\nThis interrupt service routine is not interruptible. </dd>\n<dt><code>nested_ready</code></dt>\n<dd>\nThis interrupt service routine is interruptible after <code>PSW.GIE</code> (global interrupt enable) is set. This allows interrupt service routine to finish some short critical code before enabling interrupts. </dd>\n<dt><code>save_all</code></dt>\n<dd>\nThe system will help save all registers into stack before entering interrupt handler. </dd>\n<dt><code>partial_save</code></dt>\n<dd>\nThe system will help save caller registers into stack before entering interrupt handler. </dd>\n</dl> <p>On RL78, use <code>brk_interrupt</code> instead of <code>interrupt</code> for handlers intended to be used with the <code>BRK</code> opcode (i.e. those that must end with <code>RETB</code> instead of <code>RETI</code>). </p>\n</dd>\n<dt><code>interrupt_handler</code></dt>\n<dd>\nUse this attribute on the Blackfin, m68k, H8/300, H8/300H, H8S, and SH to indicate that the specified function is an interrupt handler. The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present. </dd>\n<dt><code>interrupt_thread</code></dt>\n<dd>\nUse this attribute on fido, a subarchitecture of the m68k, to indicate that the specified function is an interrupt handler that is designed to run as a thread. The compiler omits generate prologue/epilogue sequences and replaces the return instruction with a <code>sleep</code> instruction. This attribute is available only on fido. </dd>\n<dt><code>isr</code></dt>\n<dd>\nUse this attribute on ARM to write Interrupt Service Routines. This is an alias to the <code>interrupt</code> attribute above. </dd>\n<dt><code>kspisusp</code></dt>\n<dd>\nWhen used together with <code>interrupt_handler</code>, <code>exception_handler</code> or <code>nmi_handler</code>, code is generated to load the stack pointer from the USP register in the function prologue. </dd>\n<dt><code>l1_text</code></dt>\n<dd>\nThis attribute specifies a function to be placed into L1 Instruction SRAM. The function is put into a specific section named <code>.l1.text</code>. With <code>-mfdpic</code>, function calls with a such function as the callee or caller uses inlined PLT. </dd>\n<dt><code>l2</code></dt>\n<dd>\nOn the Blackfin, this attribute specifies a function to be placed into L2 SRAM. The function is put into a specific section named <code>.l1.text</code>. With <code>-mfdpic</code>, callers of such functions use an inlined PLT. </dd>\n<dt><code>leaf</code></dt>\n<dd>\nCalls to external functions with this attribute must return to the current compilation unit only by return or by exception handling. In particular, leaf functions are not allowed to call callback function passed to it from the current compilation unit or directly call functions exported by the unit or longjmp into the unit. Leaf function might still call functions from other compilation units and thus they are not necessarily leaf in the sense that they contain no function calls at all. <p>The attribute is intended for library functions to improve dataflow analysis. The compiler takes the hint that any data not escaping the current compilation unit can not be used or modified by the leaf function. For example, the <code>sin</code> function is a leaf function, but <code>qsort</code> is not. </p>\n<p>Note that leaf functions might invoke signals and signal handlers might be defined in the current compilation unit and use static variables. The only compliant way to write such a signal handler is to declare such variables <code>volatile</code>. </p>\n<p>The attribute has no effect on functions defined within the current compilation unit. This is to allow easy merging of multiple compilation units into one, for example, by using the link-time optimization. For this reason the attribute is not allowed on types to annotate indirect calls. </p>\n</dd>\n<dt><code>long_call/medium_call/short_call</code></dt>\n<dd>\nThese attributes specify how a particular function is called on ARC, ARM and Epiphany - with <code>medium_call</code> being specific to ARC. These attributes override the <code>-mlong-calls</code> (see <a href=\"arm-options#ARM-Options\">ARM Options</a> and <a href=\"arc-options#ARC-Options\">ARC Options</a>) and <code>-mmedium-calls</code> (see <a href=\"arc-options#ARC-Options\">ARC Options</a>) command-line switches and <code>#pragma long_calls</code> settings. For ARM, the <code>long_call</code> attribute indicates that the function might be far away from the call site and require a different (more expensive) calling sequence. The <code>short_call</code> attribute always places the offset to the function from the call site into the ‘<code>BL</code>’ instruction directly. <p>For ARC, a function marked with the <code>long_call</code> attribute is always called using register-indirect jump-and-link instructions, thereby enabling the called function to be placed anywhere within the 32-bit address space. A function marked with the <code>medium_call</code> attribute will always be close enough to be called with an unconditional branch-and-link instruction, which has a 25-bit offset from the call site. A function marked with the <code>short_call</code> attribute will always be close enough to be called with a conditional branch-and-link instruction, which has a 21-bit offset from the call site. </p>\n</dd>\n<dt><code>longcall/shortcall</code></dt>\n<dd>\nOn the Blackfin, RS/6000 and PowerPC, the <code>longcall</code> attribute indicates that the function might be far away from the call site and require a different (more expensive) calling sequence. The <code>shortcall</code> attribute indicates that the function is always close enough for the shorter calling sequence to be used. These attributes override both the <code>-mlongcall</code> switch and, on the RS/6000 and PowerPC, the <code>#pragma longcall</code> setting. <p>See <a href=\"rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options\">RS/6000 and PowerPC Options</a>, for more information on whether long calls are necessary. </p>\n</dd>\n<dt><code>long_call/near/far</code></dt>\n<dd>\nThese attributes specify how a particular function is called on MIPS. The attributes override the <code>-mlong-calls</code> (see <a href=\"mips-options#MIPS-Options\">MIPS Options</a>) command-line switch. The <code>long_call</code> and <code>far</code> attributes are synonyms, and cause the compiler to always call the function by first loading its address into a register, and then using the contents of that register. The <code>near</code> attribute has the opposite effect; it specifies that non-PIC calls should be made using the more efficient <code>jal</code> instruction. </dd>\n<dt><code>malloc</code></dt>\n<dd>\nThe <code>malloc</code> attribute is used to tell the compiler that a function may be treated as if any non-<code>NULL</code> pointer it returns cannot alias any other pointer valid when the function returns and that the memory has undefined content. This often improves optimization. Standard functions with this property include <code>malloc</code> and <code>calloc</code>. <code>realloc</code>-like functions do not have this property as the memory pointed to does not have undefined content. </dd>\n<dt><code>mips16/nomips16</code></dt>\n<dd>\n On MIPS targets, you can use the <code>mips16</code> and <code>nomips16</code> function attributes to locally select or turn off MIPS16 code generation. A function with the <code>mips16</code> attribute is emitted as MIPS16 code, while MIPS16 code generation is disabled for functions with the <code>nomips16</code> attribute. These attributes override the <code>-mips16</code> and <code>-mno-mips16</code> options on the command line (see <a href=\"mips-options#MIPS-Options\">MIPS Options</a>). <p>When compiling files containing mixed MIPS16 and non-MIPS16 code, the preprocessor symbol <code>__mips16</code> reflects the setting on the command line, not that within individual functions. Mixed MIPS16 and non-MIPS16 code may interact badly with some GCC extensions such as <code>__builtin_apply</code> (see <a href=\"constructing-calls#Constructing-Calls\">Constructing Calls</a>). </p>\n</dd>\n<dt><code>micromips/nomicromips</code></dt>\n<dd>\n On MIPS targets, you can use the <code>micromips</code> and <code>nomicromips</code> function attributes to locally select or turn off microMIPS code generation. A function with the <code>micromips</code> attribute is emitted as microMIPS code, while microMIPS code generation is disabled for functions with the <code>nomicromips</code> attribute. These attributes override the <code>-mmicromips</code> and <code>-mno-micromips</code> options on the command line (see <a href=\"mips-options#MIPS-Options\">MIPS Options</a>). <p>When compiling files containing mixed microMIPS and non-microMIPS code, the preprocessor symbol <code>__mips_micromips</code> reflects the setting on the command line, not that within individual functions. Mixed microMIPS and non-microMIPS code may interact badly with some GCC extensions such as <code>__builtin_apply</code> (see <a href=\"constructing-calls#Constructing-Calls\">Constructing Calls</a>). </p>\n</dd>\n<dt>\n<code>model (</code><var>model-name</var><code>)</code>\n</dt>\n<dd>\n On the M32R/D, use this attribute to set the addressability of an object, and of the code generated for a function. The identifier <var>model-name</var> is one of <code>small</code>, <code>medium</code>, or <code>large</code>, representing each of the code models. <p>Small model objects live in the lower 16MB of memory (so that their addresses can be loaded with the <code>ld24</code> instruction), and are callable with the <code>bl</code> instruction. </p>\n<p>Medium model objects may live anywhere in the 32-bit address space (the compiler generates <code>seth/add3</code> instructions to load their addresses), and are callable with the <code>bl</code> instruction. </p>\n<p>Large model objects may live anywhere in the 32-bit address space (the compiler generates <code>seth/add3</code> instructions to load their addresses), and may not be reachable with the <code>bl</code> instruction (the compiler generates the much slower <code>seth/add3/jl</code> instruction sequence). </p>\n<p>On IA-64, use this attribute to set the addressability of an object. At present, the only supported identifier for <var>model-name</var> is <code>small</code>, indicating addressability via “small” (22-bit) addresses (so that their addresses can be loaded with the <code>addl</code> instruction). Caveat: such addressing is by definition not position independent and hence this attribute must not be used for objects defined by shared libraries. </p>\n</dd>\n<dt><code>ms_abi/sysv_abi</code></dt>\n<dd>\n On 32-bit and 64-bit (i?86|x86_64)-*-* targets, you can use an ABI attribute to indicate which calling convention should be used for a function. The <code>ms_abi</code> attribute tells the compiler to use the Microsoft ABI, while the <code>sysv_abi</code> attribute tells the compiler to use the ABI used on GNU/Linux and other systems. The default is to use the Microsoft ABI when targeting Windows. On all other systems, the default is the x86/AMD ABI. <p>Note, the <code>ms_abi</code> attribute for Microsoft Windows 64-bit targets currently requires the <code>-maccumulate-outgoing-args</code> option. </p>\n</dd>\n<dt>\n<code>callee_pop_aggregate_return (</code><var>number</var><code>)</code>\n</dt>\n<dd>\n On 32-bit i?86-*-* targets, you can use this attribute to control how aggregates are returned in memory. If the caller is responsible for popping the hidden pointer together with the rest of the arguments, specify <var>number</var> equal to zero. If callee is responsible for popping the hidden pointer, specify <var>number</var> equal to one. <p>The default i386 ABI assumes that the callee pops the stack for hidden pointer. However, on 32-bit i386 Microsoft Windows targets, the compiler assumes that the caller pops the stack for hidden pointer. </p>\n</dd>\n<dt><code>ms_hook_prologue</code></dt>\n<dd>\n On 32-bit i[34567]86-*-* targets and 64-bit x86_64-*-* targets, you can use this function attribute to make GCC generate the “hot-patching” function prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2 and newer. </dd>\n<dt>\n<code>hotpatch (</code><var>halfwords-before-function-label</var><code>,</code><var>halfwords-after-function-label</var><code>)</code>\n</dt>\n<dd>\n On S/390 System z targets, you can use this function attribute to make GCC generate a “hot-patching” function prologue. If the <code>-mhotpatch=</code> command-line option is used at the same time, the <code>hotpatch</code> attribute takes precedence. The first of the two arguments specifies the number of halfwords to be added before the function label. A second argument can be used to specify the number of halfwords to be added after the function label. For both arguments the maximum allowed value is 1000000. <p>If both ar guments are zero, hotpatching is disabled. </p>\n</dd>\n<dt><code>naked</code></dt>\n<dd>\nUse this attribute on the ARM, AVR, MCORE, MSP430, NDS32, RL78, RX and SPU ports to indicate that the specified function does not need prologue/epilogue sequences generated by the compiler. It is up to the programmer to provide these sequences. The only statements that can be safely included in naked functions are <code>asm</code> statements that do not have operands. All other statements, including declarations of local variables, <code>if</code> statements, and so forth, should be avoided. Naked functions should be used to implement the body of an assembly function, while allowing the compiler to construct the requisite function declaration for the assembler. </dd>\n<dt><code>near</code></dt>\n<dd>\nOn 68HC11 and 68HC12 the <code>near</code> attribute causes the compiler to use the normal calling convention based on <code>jsr</code> and <code>rts</code>. This attribute can be used to cancel the effect of the <code>-mlong-calls</code> option. <p>On MeP targets this attribute causes the compiler to assume the called function is close enough to use the normal calling convention, overriding the <code>-mtf</code> command-line option. </p>\n</dd>\n<dt><code>nesting</code></dt>\n<dd>\nUse this attribute together with <code>interrupt_handler</code>, <code>exception_handler</code> or <code>nmi_handler</code> to indicate that the function entry code should enable nested interrupts or exceptions. </dd>\n<dt><code>nmi_handler</code></dt>\n<dd>\nUse this attribute on the Blackfin to indicate that the specified function is an NMI handler. The compiler generates function entry and exit sequences suitable for use in an NMI handler when this attribute is present. </dd>\n<dt><code>nocompression</code></dt>\n<dd>\nOn MIPS targets, you can use the <code>nocompression</code> function attribute to locally turn off MIPS16 and microMIPS code generation. This attribute overrides the <code>-mips16</code> and <code>-mmicromips</code> options on the command line (see <a href=\"mips-options#MIPS-Options\">MIPS Options</a>). </dd>\n<dt><code>no_instrument_function</code></dt>\n<dd>\nIf <code>-finstrument-functions</code> is given, profiling function calls are generated at entry and exit of most user-compiled functions. Functions with this attribute are not so instrumented. </dd>\n<dt><code>no_split_stack</code></dt>\n<dd>\nIf <code>-fsplit-stack</code> is given, functions have a small prologue which decides whether to split the stack. Functions with the <code>no_split_stack</code> attribute do not have that prologue, and thus may run with only a small amount of stack space available. </dd>\n<dt><code>noinline</code></dt>\n<dd>\nThis function attribute prevents a function from being considered for inlining.   If the function does not have side-effects, there are optimizations other than inlining that cause function calls to be optimized away, although the function call is live. To keep such calls from being optimized away, put <pre class=\"smallexample\">asm (\"\");</pre> <p class=\"noindent\">(see <a href=\"extended-asm#Extended-Asm\">Extended Asm</a>) in the called function, to serve as a special side-effect. </p>\n</dd>\n<dt><code>noclone</code></dt>\n<dd>\nThis function attribute prevents a function from being considered for cloning—a mechanism that produces specialized copies of functions and which is (currently) performed by interprocedural constant propagation. </dd>\n<dt>\n<code>nonnull (</code><var>arg-index</var><code>, ...)</code>\n</dt>\n<dd>\nThe <code>nonnull</code> attribute specifies that some function parameters should be non-null pointers. For instance, the declaration: <pre class=\"smallexample\">extern void *\nmy_memcpy (void *dest, const void *src, size_t len)\n        __attribute__((nonnull (1, 2)));</pre> <p class=\"noindent\">causes the compiler to check that, in calls to <code>my_memcpy</code>, arguments <var>dest</var> and <var>src</var> are non-null. If the compiler determines that a null pointer is passed in an argument slot marked as non-null, and the <code>-Wnonnull</code> option is enabled, a warning is issued. The compiler may also choose to make optimizations based on the knowledge that certain function arguments will never be null. </p>\n<p>If no argument index list is given to the <code>nonnull</code> attribute, all pointer arguments are marked as non-null. To illustrate, the following declaration is equivalent to the previous example: </p>\n<pre class=\"smallexample\">extern void *\nmy_memcpy (void *dest, const void *src, size_t len)\n        __attribute__((nonnull));</pre> </dd>\n<dt><code>returns_nonnull</code></dt>\n<dd>\nThe <code>returns_nonnull</code> attribute specifies that the function return value should be a non-null pointer. For instance, the declaration: <pre class=\"smallexample\">extern void *\nmymalloc (size_t len) __attribute__((returns_nonnull));</pre> <p class=\"noindent\">lets the compiler optimize callers based on the knowledge that the return value will never be null. </p>\n</dd>\n<dt><code>noreturn</code></dt>\n<dd>\nA few standard library functions, such as <code>abort</code> and <code>exit</code>, cannot return. GCC knows this automatically. Some programs define their own functions that never return. You can declare them <code>noreturn</code> to tell the compiler this fact. For example, <pre class=\"smallexample\">void fatal () __attribute__ ((noreturn));\n\nvoid\nfatal (/* <span class=\"roman\">...</span> */)\n{\n  /* <span class=\"roman\">...</span> */ /* <span class=\"roman\">Print error message.</span> */ /* <span class=\"roman\">...</span> */\n  exit (1);\n}</pre> <p>The <code>noreturn</code> keyword tells the compiler to assume that <code>fatal</code> cannot return. It can then optimize without regard to what would happen if <code>fatal</code> ever did return. This makes slightly better code. More importantly, it helps avoid spurious warnings of uninitialized variables. </p>\n<p>The <code>noreturn</code> keyword does not affect the exceptional path when that applies: a <code>noreturn</code>-marked function may still return to the caller by throwing an exception or calling <code>longjmp</code>. </p>\n<p>Do not assume that registers saved by the calling function are restored before calling the <code>noreturn</code> function. </p>\n<p>It does not make sense for a <code>noreturn</code> function to have a return type other than <code>void</code>. </p>\n<p>The attribute <code>noreturn</code> is not implemented in GCC versions earlier than 2.5. An alternative way to declare that a function does not return, which works in the current version and in some older versions, is as follows: </p>\n<pre class=\"smallexample\">typedef void voidfn ();\n\nvolatile voidfn fatal;</pre> <p class=\"noindent\">This approach does not work in GNU C++. </p>\n</dd>\n<dt><code>nothrow</code></dt>\n<dd>\nThe <code>nothrow</code> attribute is used to inform the compiler that a function cannot throw an exception. For example, most functions in the standard C library can be guaranteed not to throw an exception with the notable exceptions of <code>qsort</code> and <code>bsearch</code> that take function pointer arguments. The <code>nothrow</code> attribute is not implemented in GCC versions earlier than 3.3. </dd>\n<dt><code>nosave_low_regs</code></dt>\n<dd>\nUse this attribute on SH targets to indicate that an <code>interrupt_handler</code> function should not save and restore registers R0..R7. This can be used on SH3* and SH4* targets that have a second R0..R7 register bank for non-reentrant interrupt handlers. </dd>\n<dt><code>optimize</code></dt>\n<dd>\nThe <code>optimize</code> attribute is used to specify that a function is to be compiled with different optimization options than specified on the command line. Arguments can either be numbers or strings. Numbers are assumed to be an optimization level. Strings that begin with <code>O</code> are assumed to be an optimization option, while other options are assumed to be used with a <code>-f</code> prefix. You can also use the ‘<code>#pragma GCC optimize</code>’ pragma to set the optimization options that affect more than one function. See <a href=\"function-specific-option-pragmas#Function-Specific-Option-Pragmas\">Function Specific Option Pragmas</a>, for details about the ‘<code>#pragma GCC optimize</code>’ pragma. <p>This can be used for instance to have frequently-executed functions compiled with more aggressive optimization options that produce faster and larger code, while other functions can be compiled with less aggressive options. </p>\n</dd>\n<dt><code>OS_main/OS_task</code></dt>\n<dd>\nOn AVR, functions with the <code>OS_main</code> or <code>OS_task</code> attribute do not save/restore any call-saved register in their prologue/epilogue. <p>The <code>OS_main</code> attribute can be used when there <em>is guarantee</em> that interrupts are disabled at the time when the function is entered. This saves resources when the stack pointer has to be changed to set up a frame for local variables. </p>\n<p>The <code>OS_task</code> attribute can be used when there is <em>no guarantee</em> that interrupts are disabled at that time when the function is entered like for, e.g. task functions in a multi-threading operating system. In that case, changing the stack pointer register is guarded by save/clear/restore of the global interrupt enable flag. </p>\n<p>The differences to the <code>naked</code> function attribute are: </p>\n<ul> <li>\n<code>naked</code> functions do not have a return instruction whereas <code>OS_main</code> and <code>OS_task</code> functions have a <code>RET</code> or <code>RETI</code> return instruction. </li>\n<li>\n<code>naked</code> functions do not set up a frame for local variables or a frame pointer whereas <code>OS_main</code> and <code>OS_task</code> do this as needed. </li>\n</ul> </dd>\n<dt><code>pcs</code></dt>\n<dd>\n The <code>pcs</code> attribute can be used to control the calling convention used for a function on ARM. The attribute takes an argument that specifies the calling convention to use. <p>When compiling using the AAPCS ABI (or a variant of it) then valid values for the argument are <code>\"aapcs\"</code> and <code>\"aapcs-vfp\"</code>. In order to use a variant other than <code>\"aapcs\"</code> then the compiler must be permitted to use the appropriate co-processor registers (i.e., the VFP registers must be available in order to use <code>\"aapcs-vfp\"</code>). For example, </p>\n<pre class=\"smallexample\">/* Argument passed in r0, and result returned in r0+r1.  */\ndouble f2d (float) __attribute__((pcs(\"aapcs\")));</pre> <p>Variadic functions always use the <code>\"aapcs\"</code> calling convention and the compiler rejects attempts to specify an alternative. </p>\n</dd>\n<dt><code>pure</code></dt>\n<dd>\nMany functions have no effects except the return value and their return value depends only on the parameters and/or global variables. Such a function can be subject to common subexpression elimination and loop optimization just as an arithmetic operator would be. These functions should be declared with the attribute <code>pure</code>. For example, <pre class=\"smallexample\">int square (int) __attribute__ ((pure));</pre> <p class=\"noindent\">says that the hypothetical function <code>square</code> is safe to call fewer times than the program says. </p>\n<p>Some of common examples of pure functions are <code>strlen</code> or <code>memcmp</code>. Interesting non-pure functions are functions with infinite loops or those depending on volatile memory or other system resource, that may change between two consecutive calls (such as <code>feof</code> in a multithreading environment). </p>\n<p>The attribute <code>pure</code> is not implemented in GCC versions earlier than 2.96. </p>\n</dd>\n<dt><code>hot</code></dt>\n<dd>\nThe <code>hot</code> attribute on a function is used to inform the compiler that the function is a hot spot of the compiled program. The function is optimized more aggressively and on many target it is placed into special subsection of the text section so all hot functions appears close together improving locality. <p>When profile feedback is available, via <code>-fprofile-use</code>, hot functions are automatically detected and this attribute is ignored. </p>\n<p>The <code>hot</code> attribute on functions is not implemented in GCC versions earlier than 4.3. </p>\n<p>The <code>hot</code> attribute on a label is used to inform the compiler that path following the label are more likely than paths that are not so annotated. This attribute is used in cases where <code>__builtin_expect</code> cannot be used, for instance with computed goto or <code>asm goto</code>. </p>\n<p>The <code>hot</code> attribute on labels is not implemented in GCC versions earlier than 4.8. </p>\n</dd>\n<dt><code>cold</code></dt>\n<dd>\nThe <code>cold</code> attribute on functions is used to inform the compiler that the function is unlikely to be executed. The function is optimized for size rather than speed and on many targets it is placed into special subsection of the text section so all cold functions appears close together improving code locality of non-cold parts of program. The paths leading to call of cold functions within code are marked as unlikely by the branch prediction mechanism. It is thus useful to mark functions used to handle unlikely conditions, such as <code>perror</code>, as cold to improve optimization of hot functions that do call marked functions in rare occasions. <p>When profile feedback is available, via <code>-fprofile-use</code>, cold functions are automatically detected and this attribute is ignored. </p>\n<p>The <code>cold</code> attribute on functions is not implemented in GCC versions earlier than 4.3. </p>\n<p>The <code>cold</code> attribute on labels is used to inform the compiler that the path following the label is unlikely to be executed. This attribute is used in cases where <code>__builtin_expect</code> cannot be used, for instance with computed goto or <code>asm goto</code>. </p>\n<p>The <code>cold</code> attribute on labels is not implemented in GCC versions earlier than 4.8. </p>\n</dd>\n<dt>\n<code>no_sanitize_address</code><dt><code>no_address_safety_analysis</code></dt>\n</dt>\n<dd>\nThe <code>no_sanitize_address</code> attribute on functions is used to inform the compiler that it should not instrument memory accesses in the function when compiling with the <code>-fsanitize=address</code> option. The <code>no_address_safety_analysis</code> is a deprecated alias of the <code>no_sanitize_address</code> attribute, new code should use <code>no_sanitize_address</code>. </dd>\n<dt><code>no_sanitize_undefined</code></dt>\n<dd>\nThe <code>no_sanitize_undefined</code> attribute on functions is used to inform the compiler that it should not check for undefined behavior in the function when compiling with the <code>-fsanitize=undefined</code> option. </dd>\n<dt>\n<code>regparm (</code><var>number</var><code>)</code>\n</dt>\n<dd>\nOn the Intel 386, the <code>regparm</code> attribute causes the compiler to pass arguments number one to <var>number</var> if they are of integral type in registers EAX, EDX, and ECX instead of on the stack. Functions that take a variable number of arguments continue to be passed all of their arguments on the stack. <p>Beware that on some ELF systems this attribute is unsuitable for global functions in shared libraries with lazy binding (which is the default). Lazy binding sends the first call via resolving code in the loader, which might assume EAX, EDX and ECX can be clobbered, as per the standard calling conventions. Solaris 8 is affected by this. Systems with the GNU C Library version 2.1 or higher and FreeBSD are believed to be safe since the loaders there save EAX, EDX and ECX. (Lazy binding can be disabled with the linker or the loader if desired, to avoid the problem.) </p>\n</dd>\n<dt><code>reset</code></dt>\n<dd>\nUse this attribute on the NDS32 target to indicate that the specified function is a reset handler. The compiler will generate corresponding sections for use in a reset handler. You can use the following attributes to provide extra exception handling: <dl> <dt><code>nmi</code></dt>\n<dd>\nProvide a user-defined function to handle NMI exception. </dd>\n<dt><code>warm</code></dt>\n<dd>\nProvide a user-defined function to handle warm reset exception. </dd>\n</dl> </dd>\n<dt><code>sseregparm</code></dt>\n<dd>\nOn the Intel 386 with SSE support, the <code>sseregparm</code> attribute causes the compiler to pass up to 3 floating-point arguments in SSE registers instead of on the stack. Functions that take a variable number of arguments continue to pass all of their floating-point arguments on the stack. </dd>\n<dt><code>force_align_arg_pointer</code></dt>\n<dd>\nOn the Intel x86, the <code>force_align_arg_pointer</code> attribute may be applied to individual function definitions, generating an alternate prologue and epilogue that realigns the run-time stack if necessary. This supports mixing legacy codes that run with a 4-byte aligned stack with modern codes that keep a 16-byte stack for SSE compatibility. </dd>\n<dt><code>renesas</code></dt>\n<dd>\nOn SH targets this attribute specifies that the function or struct follows the Renesas ABI. </dd>\n<dt><code>resbank</code></dt>\n<dd>\nOn the SH2A target, this attribute enables the high-speed register saving and restoration using a register bank for <code>interrupt_handler</code> routines. Saving to the bank is performed automatically after the CPU accepts an interrupt that uses a register bank. <p>The nineteen 32-bit registers comprising general register R0 to R14, control register GBR, and system registers MACH, MACL, and PR and the vector table address offset are saved into a register bank. Register banks are stacked in first-in last-out (FILO) sequence. Restoration from the bank is executed by issuing a RESBANK instruction. </p>\n</dd>\n<dt><code>returns_twice</code></dt>\n<dd>\nThe <code>returns_twice</code> attribute tells the compiler that a function may return more than one time. The compiler ensures that all registers are dead before calling such a function and emits a warning about the variables that may be clobbered after the second return from the function. Examples of such functions are <code>setjmp</code> and <code>vfork</code>. The <code>longjmp</code>-like counterpart of such function, if any, might need to be marked with the <code>noreturn</code> attribute. </dd>\n<dt><code>saveall</code></dt>\n<dd>\nUse this attribute on the Blackfin, H8/300, H8/300H, and H8S to indicate that all registers except the stack pointer should be saved in the prologue regardless of whether they are used or not. </dd>\n<dt><code>save_volatiles</code></dt>\n<dd>\nUse this attribute on the MicroBlaze to indicate that the function is an interrupt handler. All volatile registers (in addition to non-volatile registers) are saved in the function prologue. If the function is a leaf function, only volatiles used by the function are saved. A normal function return is generated instead of a return from interrupt. </dd>\n<dt>\n<code>section (\"</code><var>section-name</var><code>\")</code>\n</dt>\n<dd>\nNormally, the compiler places the code it generates in the <code>text</code> section. Sometimes, however, you need additional sections, or you need certain particular functions to appear in special sections. The <code>section</code> attribute specifies that a function lives in a particular section. For example, the declaration: <pre class=\"smallexample\">extern void foobar (void) __attribute__ ((section (\"bar\")));</pre> <p class=\"noindent\">puts the function <code>foobar</code> in the <code>bar</code> section. </p>\n<p>Some file formats do not support arbitrary sections so the <code>section</code> attribute is not available on all platforms. If you need to map the entire contents of a module to a particular section, consider using the facilities of the linker instead. </p>\n</dd>\n<dt><code>sentinel</code></dt>\n<dd>\nThis function attribute ensures that a parameter in a function call is an explicit <code>NULL</code>. The attribute is only valid on variadic functions. By default, the sentinel is located at position zero, the last parameter of the function call. If an optional integer position argument P is supplied to the attribute, the sentinel must be located at position P counting backwards from the end of the argument list. <pre class=\"smallexample\">__attribute__ ((sentinel))\nis equivalent to\n__attribute__ ((sentinel(0)))</pre> <p>The attribute is automatically set with a position of 0 for the built-in functions <code>execl</code> and <code>execlp</code>. The built-in function <code>execle</code> has the attribute set with a position of 1. </p>\n<p>A valid <code>NULL</code> in this context is defined as zero with any pointer type. If your system defines the <code>NULL</code> macro with an integer type then you need to add an explicit cast. GCC replaces <code>stddef.h</code> with a copy that redefines NULL appropriately. </p>\n<p>The warnings for missing or incorrect sentinels are enabled with <code>-Wformat</code>. </p>\n</dd>\n<dt><code>short_call</code></dt>\n<dd>See <code>long_call/short_call</code>. </dd>\n<dt><code>shortcall</code></dt>\n<dd>See <code>longcall/shortcall</code>. </dd>\n<dt><code>signal</code></dt>\n<dd>\nUse this attribute on the AVR to indicate that the specified function is an interrupt handler. The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present. <p>See also the <code>interrupt</code> function attribute. </p>\n<p>The AVR hardware globally disables interrupts when an interrupt is executed. Interrupt handler functions defined with the <code>signal</code> attribute do not re-enable interrupts. It is save to enable interrupts in a <code>signal</code> handler. This “save” only applies to the code generated by the compiler and not to the IRQ layout of the application which is responsibility of the application. </p>\n<p>If both <code>signal</code> and <code>interrupt</code> are specified for the same function, <code>signal</code> is silently ignored. </p>\n</dd>\n<dt><code>sp_switch</code></dt>\n<dd>\nUse this attribute on the SH to indicate an <code>interrupt_handler</code> function should switch to an alternate stack. It expects a string argument that names a global variable holding the address of the alternate stack. <pre class=\"smallexample\">void *alt_stack;\nvoid f () __attribute__ ((interrupt_handler,\n                          sp_switch (\"alt_stack\")));</pre> </dd>\n<dt><code>stdcall</code></dt>\n<dd>\nOn the Intel 386, the <code>stdcall</code> attribute causes the compiler to assume that the called function pops off the stack space used to pass arguments, unless it takes a variable number of arguments. </dd>\n<dt><code>syscall_linkage</code></dt>\n<dd>\nThis attribute is used to modify the IA-64 calling convention by marking all input registers as live at all function exits. This makes it possible to restart a system call after an interrupt without having to save/restore the input registers. This also prevents kernel data from leaking into application code. </dd>\n<dt><code>target</code></dt>\n<dd>\nThe <code>target</code> attribute is used to specify that a function is to be compiled with different target options than specified on the command line. This can be used for instance to have functions compiled with a different ISA (instruction set architecture) than the default. You can also use the ‘<code>#pragma GCC target</code>’ pragma to set more than one function to be compiled with specific target options. See <a href=\"function-specific-option-pragmas#Function-Specific-Option-Pragmas\">Function Specific Option Pragmas</a>, for details about the ‘<code>#pragma GCC target</code>’ pragma. <p>For instance on a 386, you could compile one function with <code>target(\"sse4.1,arch=core2\")</code> and another with <code>target(\"sse4a,arch=amdfam10\")</code>. This is equivalent to compiling the first function with <code>-msse4.1</code> and <code>-march=core2</code> options, and the second function with <code>-msse4a</code> and <code>-march=amdfam10</code> options. It is up to the user to make sure that a function is only invoked on a machine that supports the particular ISA it is compiled for (for example by using <code>cpuid</code> on 386 to determine what feature bits and architecture family are used). </p>\n<pre class=\"smallexample\">int core2_func (void) __attribute__ ((__target__ (\"arch=core2\")));\nint sse3_func (void) __attribute__ ((__target__ (\"sse3\")));</pre> <p>You can either use multiple strings to specify multiple options, or separate the options with a comma (‘<code>,</code>’). </p>\n<p>The <code>target</code> attribute is presently implemented for i386/x86_64, PowerPC, and Nios II targets only. The options supported are specific to each target. </p>\n<p>On the 386, the following options are allowed: </p>\n<dl> <dt>‘<code>abm</code>’<dt>‘<code>no-abm</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the advanced bit instructions. </dd>\n<dt>‘<code>aes</code>’<dt>‘<code>no-aes</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the AES instructions. </dd>\n<dt>‘<code>default</code>’</dt>\n<dd>\nSee <a href=\"function-multiversioning#Function-Multiversioning\">Function Multiversioning</a>, where it is used to specify the default function version. </dd>\n<dt>‘<code>mmx</code>’<dt>‘<code>no-mmx</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the MMX instructions. </dd>\n<dt>‘<code>pclmul</code>’<dt>‘<code>no-pclmul</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the PCLMUL instructions. </dd>\n<dt>‘<code>popcnt</code>’<dt>‘<code>no-popcnt</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the POPCNT instruction. </dd>\n<dt>‘<code>sse</code>’<dt>‘<code>no-sse</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the SSE instructions. </dd>\n<dt>‘<code>sse2</code>’<dt>‘<code>no-sse2</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the SSE2 instructions. </dd>\n<dt>‘<code>sse3</code>’<dt>‘<code>no-sse3</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the SSE3 instructions. </dd>\n<dt>‘<code>sse4</code>’<dt>‘<code>no-sse4</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the SSE4 instructions (both SSE4.1 and SSE4.2). </dd>\n<dt>‘<code>sse4.1</code>’<dt>‘<code>no-sse4.1</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the sse4.1 instructions. </dd>\n<dt>‘<code>sse4.2</code>’<dt>‘<code>no-sse4.2</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the sse4.2 instructions. </dd>\n<dt>‘<code>sse4a</code>’<dt>‘<code>no-sse4a</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the SSE4A instructions. </dd>\n<dt>‘<code>fma4</code>’<dt>‘<code>no-fma4</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the FMA4 instructions. </dd>\n<dt>‘<code>xop</code>’<dt>‘<code>no-xop</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the XOP instructions. </dd>\n<dt>‘<code>lwp</code>’<dt>‘<code>no-lwp</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the LWP instructions. </dd>\n<dt>‘<code>ssse3</code>’<dt>‘<code>no-ssse3</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the SSSE3 instructions. </dd>\n<dt>‘<code>cld</code>’<dt>‘<code>no-cld</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the CLD before string moves. </dd>\n<dt>‘<code>fancy-math-387</code>’<dt>‘<code>no-fancy-math-387</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the <code>sin</code>, <code>cos</code>, and <code>sqrt</code> instructions on the 387 floating-point unit. </dd>\n<dt>‘<code>fused-madd</code>’<dt>‘<code>no-fused-madd</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the fused multiply/add instructions. </dd>\n<dt>‘<code>ieee-fp</code>’<dt>‘<code>no-ieee-fp</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of floating point that depends on IEEE arithmetic. </dd>\n<dt>‘<code>inline-all-stringops</code>’<dt>‘<code>no-inline-all-stringops</code>’</dt>\n</dt>\n<dd>\nEnable/disable inlining of string operations. </dd>\n<dt>‘<code>inline-stringops-dynamically</code>’<dt>‘<code>no-inline-stringops-dynamically</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of the inline code to do small string operations and calling the library routines for large operations. </dd>\n<dt>‘<code>align-stringops</code>’<dt>‘<code>no-align-stringops</code>’</dt>\n</dt>\n<dd>\nDo/do not align destination of inlined string operations. </dd>\n<dt>‘<code>recip</code>’<dt>‘<code>no-recip</code>’</dt>\n</dt>\n<dd>\nEnable/disable the generation of RCPSS, RCPPS, RSQRTSS and RSQRTPS instructions followed an additional Newton-Raphson step instead of doing a floating-point division. </dd>\n<dt>‘<samp><span class=\"samp\">arch=</span><var>ARCH</var></samp>’</dt>\n<dd>\nSpecify the architecture to generate code for in compiling the function. </dd>\n<dt>‘<samp><span class=\"samp\">tune=</span><var>TUNE</var></samp>’</dt>\n<dd>\nSpecify the architecture to tune for in compiling the function. </dd>\n<dt>‘<samp><span class=\"samp\">fpmath=</span><var>FPMATH</var></samp>’</dt>\n<dd>\nSpecify which floating-point unit to use. The <code>target(\"fpmath=sse,387\")</code> option must be specified as <code>target(\"fpmath=sse+387\")</code> because the comma would separate different options. </dd>\n</dl> <p>On the PowerPC, the following options are allowed: </p>\n<dl> <dt>‘<code>altivec</code>’<dt>‘<code>no-altivec</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) AltiVec instructions. In 32-bit code, you cannot enable AltiVec instructions unless <code>-mabi=altivec</code> is used on the command line. </dd>\n<dt>‘<code>cmpb</code>’<dt>‘<code>no-cmpb</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the compare bytes instruction implemented on the POWER6 processor and other processors that support the PowerPC V2.05 architecture. </dd>\n<dt>‘<code>dlmzb</code>’<dt>‘<code>no-dlmzb</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the string-search ‘<code>dlmzb</code>’ instruction on the IBM 405, 440, 464 and 476 processors. This instruction is generated by default when targeting those processors. </dd>\n<dt>‘<code>fprnd</code>’<dt>‘<code>no-fprnd</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the FP round to integer instructions implemented on the POWER5+ processor and other processors that support the PowerPC V2.03 architecture. </dd>\n<dt>‘<code>hard-dfp</code>’<dt>‘<code>no-hard-dfp</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the decimal floating-point instructions implemented on some POWER processors. </dd>\n<dt>‘<code>isel</code>’<dt>‘<code>no-isel</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) ISEL instruction. </dd>\n<dt>‘<code>mfcrf</code>’<dt>‘<code>no-mfcrf</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the move from condition register field instruction implemented on the POWER4 processor and other processors that support the PowerPC V2.01 architecture. </dd>\n<dt>‘<code>mfpgpr</code>’<dt>‘<code>no-mfpgpr</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the FP move to/from general purpose register instructions implemented on the POWER6X processor and other processors that support the extended PowerPC V2.05 architecture. </dd>\n<dt>‘<code>mulhw</code>’<dt>‘<code>no-mulhw</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the half-word multiply and multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors. These instructions are generated by default when targeting those processors. </dd>\n<dt>‘<code>multiple</code>’<dt>‘<code>no-multiple</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the load multiple word instructions and the store multiple word instructions. </dd>\n<dt>‘<code>update</code>’<dt>‘<code>no-update</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the load or store instructions that update the base register to the address of the calculated memory location. </dd>\n<dt>‘<code>popcntb</code>’<dt>‘<code>no-popcntb</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the popcount and double-precision FP reciprocal estimate instruction implemented on the POWER5 processor and other processors that support the PowerPC V2.02 architecture. </dd>\n<dt>‘<code>popcntd</code>’<dt>‘<code>no-popcntd</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the popcount instruction implemented on the POWER7 processor and other processors that support the PowerPC V2.06 architecture. </dd>\n<dt>‘<code>powerpc-gfxopt</code>’<dt>‘<code>no-powerpc-gfxopt</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the optional PowerPC architecture instructions in the Graphics group, including floating-point select. </dd>\n<dt>‘<code>powerpc-gpopt</code>’<dt>‘<code>no-powerpc-gpopt</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the optional PowerPC architecture instructions in the General Purpose group, including floating-point square root. </dd>\n<dt>‘<code>recip-precision</code>’<dt>‘<code>no-recip-precision</code>’</dt>\n</dt>\n<dd>\nAssume (do not assume) that the reciprocal estimate instructions provide higher-precision estimates than is mandated by the powerpc ABI. </dd>\n<dt>‘<code>string</code>’<dt>‘<code>no-string</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the load string instructions and the store string word instructions to save multiple registers and do small block moves. </dd>\n<dt>‘<code>vsx</code>’<dt>‘<code>no-vsx</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) vector/scalar (VSX) instructions, and also enable the use of built-in functions that allow more direct access to the VSX instruction set. In 32-bit code, you cannot enable VSX or AltiVec instructions unless <code>-mabi=altivec</code> is used on the command line. </dd>\n<dt>‘<code>friz</code>’<dt>‘<code>no-friz</code>’</dt>\n</dt>\n<dd>\nGenerate (do not generate) the <code>friz</code> instruction when the <code>-funsafe-math-optimizations</code> option is used to optimize rounding a floating-point value to 64-bit integer and back to floating point. The <code>friz</code> instruction does not return the same value if the floating-point number is too large to fit in an integer. </dd>\n<dt>‘<code>avoid-indexed-addresses</code>’<dt>‘<code>no-avoid-indexed-addresses</code>’</dt>\n</dt>\n<dd>\nGenerate code that tries to avoid (not avoid) the use of indexed load or store instructions. </dd>\n<dt>‘<code>paired</code>’<dt>‘<code>no-paired</code>’</dt>\n</dt>\n<dd>\nGenerate code that uses (does not use) the generation of PAIRED simd instructions. </dd>\n<dt>‘<code>longcall</code>’<dt>‘<code>no-longcall</code>’</dt>\n</dt>\n<dd>\nGenerate code that assumes (does not assume) that all calls are far away so that a longer more expensive calling sequence is required. </dd>\n<dt>‘<samp><span class=\"samp\">cpu=</span><var>CPU</var></samp>’</dt>\n<dd>\nSpecify the architecture to generate code for when compiling the function. If you select the <code>target(\"cpu=power7\")</code> attribute when generating 32-bit code, VSX and AltiVec instructions are not generated unless you use the <code>-mabi=altivec</code> option on the command line. </dd>\n<dt>‘<samp><span class=\"samp\">tune=</span><var>TUNE</var></samp>’</dt>\n<dd>\nSpecify the architecture to tune for when compiling the function. If you do not specify the <code>target(\"tune=</code><var>TUNE</var><code>\")</code> attribute and you do specify the <code>target(\"cpu=</code><var>CPU</var><code>\")</code> attribute, compilation tunes for the <var>CPU</var> architecture, and not the default tuning specified on the command line. </dd>\n</dl> <p>When compiling for Nios II, the following options are allowed: </p>\n<dl> <dt>‘<samp><span class=\"samp\">custom-</span><var>insn</var><span class=\"samp\">=</span><var>N</var></samp>’<dt>‘<samp><span class=\"samp\">no-custom-</span><var>insn</var></samp>’</dt>\n</dt>\n<dd>\nEach ‘<samp><span class=\"samp\">custom-</span><var>insn</var><span class=\"samp\">=</span><var>N</var></samp>’ attribute locally enables use of a custom instruction with encoding <var>N</var> when generating code that uses <var>insn</var>. Similarly, ‘<samp><span class=\"samp\">no-custom-</span><var>insn</var></samp>’ locally inhibits use of the custom instruction <var>insn</var>. These target attributes correspond to the <samp><span class=\"option\">-mcustom-</span><var>insn</var><span class=\"option\">=</span><var>N</var></samp> and <samp><span class=\"option\">-mno-custom-</span><var>insn</var></samp> command-line options, and support the same set of <var>insn</var> keywords. See <a href=\"nios-ii-options#Nios-II-Options\">Nios II Options</a>, for more information. </dd>\n<dt>‘<samp><span class=\"samp\">custom-fpu-cfg=</span><var>name</var></samp>’</dt>\n<dd>\nThis attribute corresponds to the <samp><span class=\"option\">-mcustom-fpu-cfg=</span><var>name</var></samp> command-line option, to select a predefined set of custom instructions named <var>name</var>. See <a href=\"nios-ii-options#Nios-II-Options\">Nios II Options</a>, for more information. </dd>\n</dl> <p>On the 386/x86_64 and PowerPC back ends, the inliner does not inline a function that has different target options than the caller, unless the callee has a subset of the target options of the caller. For example a function declared with <code>target(\"sse3\")</code> can inline a function with <code>target(\"sse2\")</code>, since <code>-msse3</code> implies <code>-msse2</code>. </p>\n</dd>\n<dt><code>tiny_data</code></dt>\n<dd>\nUse this attribute on the H8/300H and H8S to indicate that the specified variable should be placed into the tiny data section. The compiler generates more efficient code for loads and stores on data in the tiny data section. Note the tiny data area is limited to slightly under 32KB of data. </dd>\n<dt><code>trap_exit</code></dt>\n<dd>\nUse this attribute on the SH for an <code>interrupt_handler</code> to return using <code>trapa</code> instead of <code>rte</code>. This attribute expects an integer argument specifying the trap number to be used. </dd>\n<dt><code>trapa_handler</code></dt>\n<dd>\nOn SH targets this function attribute is similar to <code>interrupt_handler</code> but it does not save and restore all registers. </dd>\n<dt><code>unused</code></dt>\n<dd>\nThis attribute, attached to a function, means that the function is meant to be possibly unused. GCC does not produce a warning for this function. </dd>\n<dt><code>used</code></dt>\n<dd>\nThis attribute, attached to a function, means that code must be emitted for the function even if it appears that the function is not referenced. This is useful, for example, when the function is referenced only in inline assembly. <p>When applied to a member function of a C++ class template, the attribute also means that the function is instantiated if the class itself is instantiated. </p>\n</dd>\n<dt><code>version_id</code></dt>\n<dd>\nThis IA-64 HP-UX attribute, attached to a global variable or function, renames a symbol to contain a version string, thus allowing for function level versioning. HP-UX system header files may use function level versioning for some system calls. <pre class=\"smallexample\">extern int foo () __attribute__((version_id (\"20040821\")));</pre> <p class=\"noindent\">Calls to <var>foo</var> are mapped to calls to <var>foo{20040821}</var>. </p>\n</dd>\n<dt>\n<code>visibility (\"</code><var>visibility_type</var><code>\")</code>\n</dt>\n<dd>\nThis attribute affects the linkage of the declaration to which it is attached. There are four supported <var>visibility_type</var> values: default, hidden, protected or internal visibility. <pre class=\"smallexample\">void __attribute__ ((visibility (\"protected\")))\nf () { /* <span class=\"roman\">Do something.</span> */; }\nint i __attribute__ ((visibility (\"hidden\")));</pre> <p>The possible values of <var>visibility_type</var> correspond to the visibility settings in the ELF gABI. </p>\n<dl>  <dt>default</dt>\n<dd>Default visibility is the normal case for the object file format. This value is available for the visibility attribute to override other options that may change the assumed visibility of entities. <p>On ELF, default visibility means that the declaration is visible to other modules and, in shared libraries, means that the declared entity may be overridden. </p>\n<p>On Darwin, default visibility means that the declaration is visible to other modules. </p>\n<p>Default visibility corresponds to “external linkage” in the language. </p>\n</dd>\n<dt>hidden</dt>\n<dd>Hidden visibility indicates that the entity declared has a new form of linkage, which we call “hidden linkage”. Two declarations of an object with hidden linkage refer to the same object if they are in the same shared object. </dd>\n<dt>internal</dt>\n<dd>Internal visibility is like hidden visibility, but with additional processor specific semantics. Unless otherwise specified by the psABI, GCC defines internal visibility to mean that a function is <em>never</em> called from another module. Compare this with hidden functions which, while they cannot be referenced directly by other modules, can be referenced indirectly via function pointers. By indicating that a function cannot be called from outside the module, GCC may for instance omit the load of a PIC register since it is known that the calling function loaded the correct value. </dd>\n<dt>protected</dt>\n<dd>Protected visibility is like default visibility except that it indicates that references within the defining module bind to the definition in that module. That is, the declared entity cannot be overridden by another module. </dd>\n</dl> <p>All visibilities are supported on many, but not all, ELF targets (supported when the assembler supports the ‘<code>.visibility</code>’ pseudo-op). Default visibility is supported everywhere. Hidden visibility is supported on Darwin targets. </p>\n<p>The visibility attribute should be applied only to declarations that would otherwise have external linkage. The attribute should be applied consistently, so that the same entity should not be declared with different settings of the attribute. </p>\n<p>In C++, the visibility attribute applies to types as well as functions and objects, because in C++ types have linkage. A class must not have greater visibility than its non-static data member types and bases, and class members default to the visibility of their class. Also, a declaration without explicit visibility is limited to the visibility of its type. </p>\n<p>In C++, you can mark member functions and static member variables of a class with the visibility attribute. This is useful if you know a particular method or static member variable should only be used from one shared object; then you can mark it hidden while the rest of the class has default visibility. Care must be taken to avoid breaking the One Definition Rule; for example, it is usually not useful to mark an inline method as hidden without marking the whole class as hidden. </p>\n<p>A C++ namespace declaration can also have the visibility attribute. </p>\n<pre class=\"smallexample\">namespace nspace1 __attribute__ ((visibility (\"protected\")))\n{ /* <span class=\"roman\">Do something.</span> */; }</pre> <p>This attribute applies only to the particular namespace body, not to other definitions of the same namespace; it is equivalent to using ‘<code>#pragma GCC visibility</code>’ before and after the namespace definition (see <a href=\"visibility-pragmas#Visibility-Pragmas\">Visibility Pragmas</a>). </p>\n<p>In C++, if a template argument has limited visibility, this restriction is implicitly propagated to the template instantiation. Otherwise, template instantiations and specializations default to the visibility of their template. </p>\n<p>If both the template and enclosing class have explicit visibility, the visibility from the template is used. </p>\n</dd>\n<dt><code>vliw</code></dt>\n<dd>\nOn MeP, the <code>vliw</code> attribute tells the compiler to emit instructions in VLIW mode instead of core mode. Note that this attribute is not allowed unless a VLIW coprocessor has been configured and enabled through command-line options. </dd>\n<dt><code>warn_unused_result</code></dt>\n<dd>\nThe <code>warn_unused_result</code> attribute causes a warning to be emitted if a caller of the function with this attribute does not use its return value. This is useful for functions where not checking the result is either a security problem or always a bug, such as <code>realloc</code>. <pre class=\"smallexample\">int fn () __attribute__ ((warn_unused_result));\nint foo ()\n{\n  if (fn () &lt; 0) return -1;\n  fn ();\n  return 0;\n}</pre> <p class=\"noindent\">results in warning on line 5. </p>\n</dd>\n<dt><code>weak</code></dt>\n<dd>\nThe <code>weak</code> attribute causes the declaration to be emitted as a weak symbol rather than a global. This is primarily useful in defining library functions that can be overridden in user code, though it can also be used with non-function declarations. Weak symbols are supported for ELF targets, and also for a.out targets when using the GNU assembler and linker. </dd>\n<dt>\n<code>weakref</code><dt>\n<code>weakref (\"</code><var>target</var><code>\")</code>\n</dt>\n</dt>\n<dd>\nThe <code>weakref</code> attribute marks a declaration as a weak reference. Without arguments, it should be accompanied by an <code>alias</code> attribute naming the target symbol. Optionally, the <var>target</var> may be given as an argument to <code>weakref</code> itself. In either case, <code>weakref</code> implicitly marks the declaration as <code>weak</code>. Without a <var>target</var>, given as an argument to <code>weakref</code> or to <code>alias</code>, <code>weakref</code> is equivalent to <code>weak</code>. <pre class=\"smallexample\">static int x() __attribute__ ((weakref (\"y\")));\n/* is equivalent to... */\nstatic int x() __attribute__ ((weak, weakref, alias (\"y\")));\n/* and to... */\nstatic int x() __attribute__ ((weakref));\nstatic int x() __attribute__ ((alias (\"y\")));</pre> <p>A weak reference is an alias that does not by itself require a definition to be given for the target symbol. If the target symbol is only referenced through weak references, then it becomes a <code>weak</code> undefined symbol. If it is directly referenced, however, then such strong references prevail, and a definition is required for the symbol, not necessarily in the same translation unit. </p>\n<p>The effect is equivalent to moving all references to the alias to a separate translation unit, renaming the alias to the aliased symbol, declaring it as weak, compiling the two separate translation units and performing a reloadable link on them. </p>\n<p>At present, a declaration to which <code>weakref</code> is attached can only be <code>static</code>. </p>\n</dd>\n</dl> <p>You can specify multiple attributes in a declaration by separating them by commas within the double parentheses or by immediately following an attribute declaration with another attribute declaration. </p>\n<p>Some people object to the <code>__attribute__</code> feature, suggesting that ISO C's <code>#pragma</code> should be used instead. At the time <code>__attribute__</code> was designed, there were two reasons for not doing this. </p>\n<ol type=\"1\" start=\"1\"> <li>It is impossible to generate <code>#pragma</code> commands from a macro. </li>\n<li>There is no telling what the same <code>#pragma</code> might mean in another compiler. </li>\n</ol> <p>These two reasons applied to almost any application that might have been proposed for <code>#pragma</code>. It was basically a mistake to use <code>#pragma</code> for <em>anything</em>. </p>\n<p>The ISO C99 standard includes <code>_Pragma</code>, which now allows pragmas to be generated from macros. In addition, a <code>#pragma GCC</code> namespace is now in use for GCC-specific pragmas. However, it has been found convenient to use <code>__attribute__</code> to achieve a natural attachment of attributes to their corresponding declarations, whereas <code>#pragma GCC</code> is of use for constructs that do not naturally form part of the grammar. See <a href=\"pragmas#Pragmas\">Pragmas Accepted by GCC</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Attributes.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Attributes.html</a>\n  </p>\n</div>\n","attribute-syntax":"<h1 class=\"section\" id=\"Attribute-Syntax\">6.31 Attribute Syntax</h1> <p> This section describes the syntax with which <code>__attribute__</code> may be used, and the constructs to which attribute specifiers bind, for the C language. Some details may vary for C++ and Objective-C. Because of infelicities in the grammar for attributes, some forms described here may not be successfully parsed in all cases. </p>\n<p>There are some problems with the semantics of attributes in C++. For example, there are no manglings for attributes, although they may affect code generation, so problems may arise when attributed types are used in conjunction with templates or overloading. Similarly, <code>typeid</code> does not distinguish between types with different attributes. Support for attributes in C++ may be restricted in future to attributes on declarations only, but not on nested declarators. </p>\n<p>See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, for details of the semantics of attributes applying to functions. See <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>, for details of the semantics of attributes applying to variables. See <a href=\"type-attributes#Type-Attributes\">Type Attributes</a>, for details of the semantics of attributes applying to structure, union and enumerated types. </p>\n<p>An attribute specifier is of the form <code>__attribute__ ((</code><var>attribute-list</var><code>))</code>. An attribute list is a possibly empty comma-separated sequence of attributes, where each attribute is one of the following: </p>\n<ul> <li>Empty. Empty attributes are ignored. </li>\n<li>A word (which may be an identifier such as <code>unused</code>, or a reserved word such as <code>const</code>). </li>\n<li>A word, followed by, in parentheses, parameters for the attribute. These parameters take one of the following forms: <ul> <li>An identifier. For example, <code>mode</code> attributes use this form. </li>\n<li>An identifier followed by a comma and a non-empty comma-separated list of expressions. For example, <code>format</code> attributes use this form. </li>\n<li>A possibly empty comma-separated list of expressions. For example, <code>format_arg</code> attributes use this form with the list being a single integer constant expression, and <code>alias</code> attributes use this form with the list being a single string constant. </li>\n</ul> </li>\n</ul> <p>An attribute specifier list is a sequence of one or more attribute specifiers, not separated by any other tokens. </p>\n<p>In GNU C, an attribute specifier list may appear after the colon following a label, other than a <code>case</code> or <code>default</code> label. The only attribute it makes sense to use after a label is <code>unused</code>. This feature is intended for program-generated code that may contain unused labels, but which is compiled with <code>-Wall</code>. It is not normally appropriate to use in it human-written code, though it could be useful in cases where the code that jumps to the label is contained within an <code>#ifdef</code> conditional. GNU C++ only permits attributes on labels if the attribute specifier is immediately followed by a semicolon (i.e., the label applies to an empty statement). If the semicolon is missing, C++ label attributes are ambiguous, as it is permissible for a declaration, which could begin with an attribute list, to be labelled in C++. Declarations cannot be labelled in C90 or C99, so the ambiguity does not arise there. </p>\n<p>An attribute specifier list may appear as part of a <code>struct</code>, <code>union</code> or <code>enum</code> specifier. It may go either immediately after the <code>struct</code>, <code>union</code> or <code>enum</code> keyword, or after the closing brace. The former syntax is preferred. Where attribute specifiers follow the closing brace, they are considered to relate to the structure, union or enumerated type defined, not to any enclosing declaration the type specifier appears in, and the type defined is not complete until after the attribute specifiers.      </p>\n<p>Otherwise, an attribute specifier appears as part of a declaration, counting declarations of unnamed parameters and type names, and relates to that declaration (which may be nested in another declaration, for example in the case of a parameter declaration), or to a particular declarator within a declaration. Where an attribute specifier is applied to a parameter declared as a function or an array, it should apply to the function or array rather than the pointer to which the parameter is implicitly converted, but this is not yet correctly implemented. </p>\n<p>Any list of specifiers and qualifiers at the start of a declaration may contain attribute specifiers, whether or not such a list may in that context contain storage class specifiers. (Some attributes, however, are essentially in the nature of storage class specifiers, and only make sense where storage class specifiers may be used; for example, <code>section</code>.) There is one necessary limitation to this syntax: the first old-style parameter declaration in a function definition cannot begin with an attribute specifier, because such an attribute applies to the function instead by syntax described below (which, however, is not yet implemented in this case). In some other cases, attribute specifiers are permitted by this grammar but not yet supported by the compiler. All attribute specifiers in this place relate to the declaration as a whole. In the obsolescent usage where a type of <code>int</code> is implied by the absence of type specifiers, such a list of specifiers and qualifiers may be an attribute specifier list with no other specifiers or qualifiers. </p>\n<p>At present, the first parameter in a function prototype must have some type specifier that is not an attribute specifier; this resolves an ambiguity in the interpretation of <code>void f(int\n(__attribute__((foo)) x))</code>, but is subject to change. At present, if the parentheses of a function declarator contain only attributes then those attributes are ignored, rather than yielding an error or warning or implying a single parameter of type int, but this is subject to change. </p>\n<p>An attribute specifier list may appear immediately before a declarator (other than the first) in a comma-separated list of declarators in a declaration of more than one identifier using a single list of specifiers and qualifiers. Such attribute specifiers apply only to the identifier before whose declarator they appear. For example, in </p>\n<pre class=\"smallexample\">__attribute__((noreturn)) void d0 (void),\n    __attribute__((format(printf, 1, 2))) d1 (const char *, ...),\n     d2 (void)</pre> <p class=\"noindent\">the <code>noreturn</code> attribute applies to all the functions declared; the <code>format</code> attribute only applies to <code>d1</code>. </p>\n<p>An attribute specifier list may appear immediately before the comma, <code>=</code> or semicolon terminating the declaration of an identifier other than a function definition. Such attribute specifiers apply to the declared object or function. Where an assembler name for an object or function is specified (see <a href=\"asm-labels#Asm-Labels\">Asm Labels</a>), the attribute must follow the <code>asm</code> specification. </p>\n<p>An attribute specifier list may, in future, be permitted to appear after the declarator in a function definition (before any old-style parameter declarations or the function body). </p>\n<p>Attribute specifiers may be mixed with type qualifiers appearing inside the <code>[]</code> of a parameter array declarator, in the C99 construct by which such qualifiers are applied to the pointer to which the array is implicitly converted. Such attribute specifiers apply to the pointer, not to the array, but at present this is not implemented and they are ignored. </p>\n<p>An attribute specifier list may appear at the start of a nested declarator. At present, there are some limitations in this usage: the attributes correctly apply to the declarator, but for most individual attributes the semantics this implies are not implemented. When attribute specifiers follow the <code>*</code> of a pointer declarator, they may be mixed with any type qualifiers present. The following describes the formal semantics of this syntax. It makes the most sense if you are familiar with the formal specification of declarators in the ISO C standard. </p>\n<p>Consider (as in C99 subclause 6.7.5 paragraph 4) a declaration <code>T\nD1</code>, where <code>T</code> contains declaration specifiers that specify a type <var>Type</var> (such as <code>int</code>) and <code>D1</code> is a declarator that contains an identifier <var>ident</var>. The type specified for <var>ident</var> for derived declarators whose type does not include an attribute specifier is as in the ISO C standard. </p>\n<p>If <code>D1</code> has the form <code>( </code><var>attribute-specifier-list</var><code> D )</code>, and the declaration <code>T D</code> specifies the type “<var>derived-declarator-type-list</var> <var>Type</var>” for <var>ident</var>, then <code>T D1</code> specifies the type “<var>derived-declarator-type-list</var> <var>attribute-specifier-list</var> <var>Type</var>” for <var>ident</var>. </p>\n<p>If <code>D1</code> has the form <code>*\n</code><var>type-qualifier-and-attribute-specifier-list</var><code> D</code>, and the declaration <code>T D</code> specifies the type “<var>derived-declarator-type-list</var> <var>Type</var>” for <var>ident</var>, then <code>T D1</code> specifies the type “<var>derived-declarator-type-list</var> <var>type-qualifier-and-attribute-specifier-list</var> pointer to <var>Type</var>” for <var>ident</var>. </p>\n<p>For example, </p>\n<pre class=\"smallexample\">void (__attribute__((noreturn)) ****f) (void);</pre> <p class=\"noindent\">specifies the type “pointer to pointer to pointer to pointer to non-returning function returning <code>void</code>”. As another example, </p>\n<pre class=\"smallexample\">char *__attribute__((aligned(8))) *f;</pre> <p class=\"noindent\">specifies the type “pointer to 8-byte-aligned pointer to <code>char</code>”. Note again that this does not work with most attributes; for example, the usage of ‘<code>aligned</code>’ and ‘<code>noreturn</code>’ attributes given above is not yet supported. </p>\n<p>For compatibility with existing code written for compiler versions that did not implement attributes on nested declarators, some laxity is allowed in the placing of attributes. If an attribute that only applies to types is applied to a declaration, it is treated as applying to the type of that declaration. If an attribute that only applies to declarations is applied to the type of a declaration, it is treated as applying to that declaration; and, for compatibility with code placing the attributes immediately before the identifier declared, such an attribute applied to a function return type is treated as applying to the function type, and such an attribute applied to an array element type is treated as applying to the array type. If an attribute that only applies to function types is applied to a pointer-to-function type, it is treated as applying to the pointer target type; if such an attribute is applied to a function return type that is not a pointer-to-function type, it is treated as applying to the function type. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Attribute-Syntax.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Attribute-Syntax.html</a>\n  </p>\n</div>\n","function-prototypes":"<h1 class=\"section\" id=\"Function-Prototypes\">6.32 Prototypes and Old-Style Function Definitions</h1> <p> GNU C extends ISO C to allow a function prototype to override a later old-style non-prototype definition. Consider the following example: </p>\n<pre class=\"smallexample\">/* <span class=\"roman\">Use prototypes unless the compiler is old-fashioned.</span>  */\n#ifdef __STDC__\n#define P(x) x\n#else\n#define P(x) ()\n#endif\n\n/* <span class=\"roman\">Prototype function declaration.</span>  */\nint isroot P((uid_t));\n\n/* <span class=\"roman\">Old-style function definition.</span>  */\nint\nisroot (x)   /* <span class=\"roman\">??? lossage here ???</span> */\n     uid_t x;\n{\n  return x == 0;\n}</pre> <p>Suppose the type <code>uid_t</code> happens to be <code>short</code>. ISO C does not allow this example, because subword arguments in old-style non-prototype definitions are promoted. Therefore in this example the function definition's argument is really an <code>int</code>, which does not match the prototype argument type of <code>short</code>. </p>\n<p>This restriction of ISO C makes it hard to write code that is portable to traditional C compilers, because the programmer does not know whether the <code>uid_t</code> type is <code>short</code>, <code>int</code>, or <code>long</code>. Therefore, in cases like these GNU C allows a prototype to override a later old-style definition. More precisely, in GNU C, a function prototype argument type overrides the argument type specified by a later old-style definition if the former type is the same as the latter type before promotion. Thus in GNU C the above example is equivalent to the following: </p>\n<pre class=\"smallexample\">int isroot (uid_t);\n\nint\nisroot (uid_t x)\n{\n  return x == 0;\n}</pre> <p class=\"noindent\">GNU C++ does not support old-style function definitions, so this extension is irrelevant. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Prototypes.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Prototypes.html</a>\n  </p>\n</div>\n","c_002b_002b-comments":"<h1 class=\"section\" id=\"C_002b_002b-Comments\">6.33 C++ Style Comments</h1> <p> In GNU C, you may use C++ style comments, which start with ‘<code>//</code>’ and continue until the end of the line. Many other C implementations allow such comments, and they are included in the 1999 C standard. However, C++ style comments are not recognized if you specify an <code>-std</code> option specifying a version of ISO C before C99, or <code>-ansi</code> (equivalent to <code>-std=c90</code>). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Comments.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Comments.html</a>\n  </p>\n</div>\n","dollar-signs":"<h1 class=\"section\" id=\"Dollar-Signs\">6.34 Dollar Signs in Identifier Names</h1> <p> In GNU C, you may normally use dollar signs in identifier names. This is because many traditional C implementations allow such identifiers. However, dollar signs in identifiers are not supported on a few target machines, typically because the target assembler does not allow them. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Dollar-Signs.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Dollar-Signs.html</a>\n  </p>\n</div>\n","character-escapes":"<h1 class=\"section\" id=\"Character-Escapes\">6.35 The Character &lt;ESC&gt; in Constants</h1> <p>You can use the sequence ‘<code>\\e</code>’ in a string or character constant to stand for the ASCII character &lt;ESC&gt;. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Character-Escapes.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Character-Escapes.html</a>\n  </p>\n</div>\n","variable-attributes":"<h1 class=\"section\" id=\"Variable-Attributes\">6.36 Specifying Attributes of Variables</h1> <p> The keyword <code>__attribute__</code> allows you to specify special attributes of variables or structure fields. This keyword is followed by an attribute specification inside double parentheses. Some attributes are currently defined generically for variables. Other attributes are defined for variables on particular target systems. Other attributes are available for functions (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>) and for types (see <a href=\"type-attributes#Type-Attributes\">Type Attributes</a>). Other front ends might define more attributes (see <a href=\"c_002b_002b-extensions#C_002b_002b-Extensions\">Extensions to the C++ Language</a>). </p>\n<p>You may also specify attributes with ‘<code>__</code>’ preceding and following each keyword. This allows you to use them in header files without being concerned about a possible macro of the same name. For example, you may use <code>__aligned__</code> instead of <code>aligned</code>. </p>\n<p>See <a href=\"attribute-syntax#Attribute-Syntax\">Attribute Syntax</a>, for details of the exact syntax for using attributes.  </p>\n<dl>\n<dt>\n<code>aligned (</code><var>alignment</var><code>)</code>\n</dt>\n<dd>This attribute specifies a minimum alignment for the variable or structure field, measured in bytes. For example, the declaration: <pre class=\"smallexample\">int x __attribute__ ((aligned (16))) = 0;</pre> <p class=\"noindent\">causes the compiler to allocate the global variable <code>x</code> on a 16-byte boundary. On a 68040, this could be used in conjunction with an <code>asm</code> expression to access the <code>move16</code> instruction which requires 16-byte aligned operands. </p>\n<p>You can also specify the alignment of structure fields. For example, to create a double-word aligned <code>int</code> pair, you could write: </p>\n<pre class=\"smallexample\">struct foo { int x[2] __attribute__ ((aligned (8))); };</pre> <p class=\"noindent\">This is an alternative to creating a union with a <code>double</code> member, which forces the union to be double-word aligned. </p>\n<p>As in the preceding examples, you can explicitly specify the alignment (in bytes) that you wish the compiler to use for a given variable or structure field. Alternatively, you can leave out the alignment factor and just ask the compiler to align a variable or field to the default alignment for the target architecture you are compiling for. The default alignment is sufficient for all scalar types, but may not be enough for all vector types on a target that supports vector operations. The default alignment is fixed for a particular target ABI. </p>\n<p>GCC also provides a target specific macro <code>__BIGGEST_ALIGNMENT__</code>, which is the largest alignment ever used for any data type on the target machine you are compiling for. For example, you could write: </p>\n<pre class=\"smallexample\">short array[3] __attribute__ ((aligned (__BIGGEST_ALIGNMENT__)));</pre> <p>The compiler automatically sets the alignment for the declared variable or field to <code>__BIGGEST_ALIGNMENT__</code>. Doing this can often make copy operations more efficient, because the compiler can use whatever instructions copy the biggest chunks of memory when performing copies to or from the variables or fields that you have aligned this way. Note that the value of <code>__BIGGEST_ALIGNMENT__</code> may change depending on command-line options. </p>\n<p>When used on a struct, or struct member, the <code>aligned</code> attribute can only increase the alignment; in order to decrease it, the <code>packed</code> attribute must be specified as well. When used as part of a typedef, the <code>aligned</code> attribute can both increase and decrease alignment, and specifying the <code>packed</code> attribute generates a warning. </p>\n<p>Note that the effectiveness of <code>aligned</code> attributes may be limited by inherent limitations in your linker. On many systems, the linker is only able to arrange for variables to be aligned up to a certain maximum alignment. (For some linkers, the maximum supported alignment may be very very small.) If your linker is only able to align variables up to a maximum of 8-byte alignment, then specifying <code>aligned(16)</code> in an <code>__attribute__</code> still only provides you with 8-byte alignment. See your linker documentation for further information. </p>\n<p>The <code>aligned</code> attribute can also be used for functions (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>.) </p>\n</dd>\n<dt>\n<code>cleanup (</code><var>cleanup_function</var><code>)</code>\n</dt>\n<dd>\nThe <code>cleanup</code> attribute runs a function when the variable goes out of scope. This attribute can only be applied to auto function scope variables; it may not be applied to parameters or variables with static storage duration. The function must take one parameter, a pointer to a type compatible with the variable. The return value of the function (if any) is ignored. <p>If <code>-fexceptions</code> is enabled, then <var>cleanup_function</var> is run during the stack unwinding that happens during the processing of the exception. Note that the <code>cleanup</code> attribute does not allow the exception to be caught, only to perform an action. It is undefined what happens if <var>cleanup_function</var> does not return normally. </p>\n</dd>\n<dt>\n<code>common</code><dt><code>nocommon</code></dt>\n</dt>\n<dd>\nThe <code>common</code> attribute requests GCC to place a variable in “common” storage. The <code>nocommon</code> attribute requests the opposite—to allocate space for it directly. <p>These attributes override the default chosen by the <code>-fno-common</code> and <code>-fcommon</code> flags respectively. </p>\n</dd>\n<dt>\n<code>deprecated</code><dt>\n<code>deprecated (</code><var>msg</var><code>)</code>\n</dt>\n</dt>\n<dd>\nThe <code>deprecated</code> attribute results in a warning if the variable is used anywhere in the source file. This is useful when identifying variables that are expected to be removed in a future version of a program. The warning also includes the location of the declaration of the deprecated variable, to enable users to easily find further information about why the variable is deprecated, or what they should do instead. Note that the warning only occurs for uses: <pre class=\"smallexample\">extern int old_var __attribute__ ((deprecated));\nextern int old_var;\nint new_fn () { return old_var; }</pre> <p class=\"noindent\">results in a warning on line 3 but not line 2. The optional <var>msg</var> argument, which must be a string, is printed in the warning if present. </p>\n<p>The <code>deprecated</code> attribute can also be used for functions and types (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, see <a href=\"type-attributes#Type-Attributes\">Type Attributes</a>.) </p>\n</dd>\n<dt>\n<code>mode (</code><var>mode</var><code>)</code>\n</dt>\n<dd>\nThis attribute specifies the data type for the declaration—whichever type corresponds to the mode <var>mode</var>. This in effect lets you request an integer or floating-point type according to its width. <p>You may also specify a mode of <code>byte</code> or <code>__byte__</code> to indicate the mode corresponding to a one-byte integer, <code>word</code> or <code>__word__</code> for the mode of a one-word integer, and <code>pointer</code> or <code>__pointer__</code> for the mode used to represent pointers. </p>\n</dd>\n<dt><code>packed</code></dt>\n<dd>\nThe <code>packed</code> attribute specifies that a variable or structure field should have the smallest possible alignment—one byte for a variable, and one bit for a field, unless you specify a larger value with the <code>aligned</code> attribute. <p>Here is a structure in which the field <code>x</code> is packed, so that it immediately follows <code>a</code>: </p>\n<pre class=\"smallexample\">struct foo\n{\n  char a;\n  int x[2] __attribute__ ((packed));\n};</pre> <p><em>Note:</em> The 4.1, 4.2 and 4.3 series of GCC ignore the <code>packed</code> attribute on bit-fields of type <code>char</code>. This has been fixed in GCC 4.4 but the change can lead to differences in the structure layout. See the documentation of <code>-Wpacked-bitfield-compat</code> for more information. </p>\n</dd>\n<dt>\n<code>section (\"</code><var>section-name</var><code>\")</code>\n</dt>\n<dd>\nNormally, the compiler places the objects it generates in sections like <code>data</code> and <code>bss</code>. Sometimes, however, you need additional sections, or you need certain particular variables to appear in special sections, for example to map to special hardware. The <code>section</code> attribute specifies that a variable (or function) lives in a particular section. For example, this small program uses several specific section names: <pre class=\"smallexample\">struct duart a __attribute__ ((section (\"DUART_A\"))) = { 0 };\nstruct duart b __attribute__ ((section (\"DUART_B\"))) = { 0 };\nchar stack[10000] __attribute__ ((section (\"STACK\"))) = { 0 };\nint init_data __attribute__ ((section (\"INITDATA\")));\n\nmain()\n{\n  /* <span class=\"roman\">Initialize stack pointer</span> */\n  init_sp (stack + sizeof (stack));\n\n  /* <span class=\"roman\">Initialize initialized data</span> */\n  memcpy (&amp;init_data, &amp;data, &amp;edata - &amp;data);\n\n  /* <span class=\"roman\">Turn on the serial ports</span> */\n  init_duart (&amp;a);\n  init_duart (&amp;b);\n}</pre> <p class=\"noindent\">Use the <code>section</code> attribute with <em>global</em> variables and not <em>local</em> variables, as shown in the example. </p>\n<p>You may use the <code>section</code> attribute with initialized or uninitialized global variables but the linker requires each object be defined once, with the exception that uninitialized variables tentatively go in the <code>common</code> (or <code>bss</code>) section and can be multiply “defined”. Using the <code>section</code> attribute changes what section the variable goes into and may cause the linker to issue an error if an uninitialized variable has multiple definitions. You can force a variable to be initialized with the <code>-fno-common</code> flag or the <code>nocommon</code> attribute. </p>\n<p>Some file formats do not support arbitrary sections so the <code>section</code> attribute is not available on all platforms. If you need to map the entire contents of a module to a particular section, consider using the facilities of the linker instead. </p>\n</dd>\n<dt><code>shared</code></dt>\n<dd>\nOn Microsoft Windows, in addition to putting variable definitions in a named section, the section can also be shared among all running copies of an executable or DLL. For example, this small program defines shared data by putting it in a named section <code>shared</code> and marking the section shareable: <pre class=\"smallexample\">int foo __attribute__((section (\"shared\"), shared)) = 0;\n\nint\nmain()\n{\n  /* <span class=\"roman\">Read and write foo.  All running\n     copies see the same value.</span>  */\n  return 0;\n}</pre> <p class=\"noindent\">You may only use the <code>shared</code> attribute along with <code>section</code> attribute with a fully-initialized global definition because of the way linkers work. See <code>section</code> attribute for more information. </p>\n<p>The <code>shared</code> attribute is only available on Microsoft Windows. </p>\n</dd>\n<dt>\n<code>tls_model (\"</code><var>tls_model</var><code>\")</code>\n</dt>\n<dd>\nThe <code>tls_model</code> attribute sets thread-local storage model (see <a href=\"thread_002dlocal#Thread_002dLocal\">Thread-Local</a>) of a particular <code>__thread</code> variable, overriding <code>-ftls-model=</code> command-line switch on a per-variable basis. The <var>tls_model</var> argument should be one of <code>global-dynamic</code>, <code>local-dynamic</code>, <code>initial-exec</code> or <code>local-exec</code>. <p>Not all targets support this attribute. </p>\n</dd>\n<dt><code>unused</code></dt>\n<dd>This attribute, attached to a variable, means that the variable is meant to be possibly unused. GCC does not produce a warning for this variable. </dd>\n<dt><code>used</code></dt>\n<dd>This attribute, attached to a variable with the static storage, means that the variable must be emitted even if it appears that the variable is not referenced. <p>When applied to a static data member of a C++ class template, the attribute also means that the member is instantiated if the class itself is instantiated. </p>\n</dd>\n<dt>\n<code>vector_size (</code><var>bytes</var><code>)</code>\n</dt>\n<dd>This attribute specifies the vector size for the variable, measured in bytes. For example, the declaration: <pre class=\"smallexample\">int foo __attribute__ ((vector_size (16)));</pre> <p class=\"noindent\">causes the compiler to set the mode for <code>foo</code>, to be 16 bytes, divided into <code>int</code> sized units. Assuming a 32-bit int (a vector of 4 units of 4 bytes), the corresponding mode of <code>foo</code> is V4SI. </p>\n<p>This attribute is only applicable to integral and float scalars, although arrays, pointers, and function return values are allowed in conjunction with this construct. </p>\n<p>Aggregates with this attribute are invalid, even if they are of the same size as a corresponding scalar. For example, the declaration: </p>\n<pre class=\"smallexample\">struct S { int a; };\nstruct S  __attribute__ ((vector_size (16))) foo;</pre> <p class=\"noindent\">is invalid even if the size of the structure is the same as the size of the <code>int</code>. </p>\n</dd>\n<dt><code>selectany</code></dt>\n<dd>The <code>selectany</code> attribute causes an initialized global variable to have link-once semantics. When multiple definitions of the variable are encountered by the linker, the first is selected and the remainder are discarded. Following usage by the Microsoft compiler, the linker is told <em>not</em> to warn about size or content differences of the multiple definitions. <p>Although the primary usage of this attribute is for POD types, the attribute can also be applied to global C++ objects that are initialized by a constructor. In this case, the static initialization and destruction code for the object is emitted in each translation defining the object, but the calls to the constructor and destructor are protected by a link-once guard variable. </p>\n<p>The <code>selectany</code> attribute is only available on Microsoft Windows targets. You can use <code>__declspec (selectany)</code> as a synonym for <code>__attribute__ ((selectany))</code> for compatibility with other compilers. </p>\n</dd>\n<dt><code>weak</code></dt>\n<dd>The <code>weak</code> attribute is described in <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>. </dd>\n<dt><code>dllimport</code></dt>\n<dd>The <code>dllimport</code> attribute is described in <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>. </dd>\n<dt><code>dllexport</code></dt>\n<dd>The <code>dllexport</code> attribute is described in <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>. </dd>\n</dl> \n<h2 class=\"subsection\">6.36.1 AVR Variable Attributes</h2> <dl> <dt><code>progmem</code></dt>\n<dd>\nThe <code>progmem</code> attribute is used on the AVR to place read-only data in the non-volatile program memory (flash). The <code>progmem</code> attribute accomplishes this by putting respective variables into a section whose name starts with <code>.progmem</code>. <p>This attribute works similar to the <code>section</code> attribute but adds additional checking. Notice that just like the <code>section</code> attribute, <code>progmem</code> affects the location of the data but not how this data is accessed. </p>\n<p>In order to read data located with the <code>progmem</code> attribute (inline) assembler must be used. </p>\n<pre class=\"smallexample\">/* Use custom macros from <a href=\"http://nongnu.org/avr-libc/user-manual/\">AVR-LibC</a> */\n#include &lt;avr/pgmspace.h&gt;\n\n/* Locate var in flash memory */\nconst int var[2] PROGMEM = { 1, 2 };\n\nint read_var (int i)\n{\n    /* Access var[] by accessor macro from avr/pgmspace.h */\n    return (int) pgm_read_word (&amp; var[i]);\n}</pre> <p>AVR is a Harvard architecture processor and data and read-only data normally resides in the data memory (RAM). </p>\n<p>See also the <a href=\"named-address-spaces#AVR-Named-Address-Spaces\">AVR Named Address Spaces</a> section for an alternate way to locate and access data in flash memory. </p>\n</dd>\n</dl> <h2 class=\"subsection\">6.36.2 Blackfin Variable Attributes</h2> <p>Three attributes are currently defined for the Blackfin. </p>\n<dl> <dt>\n<code>l1_data</code><dt>\n<code>l1_data_A</code><dt><code>l1_data_B</code></dt>\n</dt>\n</dt>\n<dd>\nUse these attributes on the Blackfin to place the variable into L1 Data SRAM. Variables with <code>l1_data</code> attribute are put into the specific section named <code>.l1.data</code>. Those with <code>l1_data_A</code> attribute are put into the specific section named <code>.l1.data.A</code>. Those with <code>l1_data_B</code> attribute are put into the specific section named <code>.l1.data.B</code>. </dd>\n<dt><code>l2</code></dt>\n<dd>\nUse this attribute on the Blackfin to place the variable into L2 SRAM. Variables with <code>l2</code> attribute are put into the specific section named <code>.l2.data</code>. </dd>\n</dl> <h2 class=\"subsection\">6.36.3 M32R/D Variable Attributes</h2> <p>One attribute is currently defined for the M32R/D. </p>\n<dl> <dt>\n<code>model (</code><var>model-name</var><code>)</code>\n</dt>\n<dd>\nUse this attribute on the M32R/D to set the addressability of an object. The identifier <var>model-name</var> is one of <code>small</code>, <code>medium</code>, or <code>large</code>, representing each of the code models. <p>Small model objects live in the lower 16MB of memory (so that their addresses can be loaded with the <code>ld24</code> instruction). </p>\n<p>Medium and large model objects may live anywhere in the 32-bit address space (the compiler generates <code>seth/add3</code> instructions to load their addresses). </p>\n</dd>\n</dl> \n<h2 class=\"subsection\">6.36.4 MeP Variable Attributes</h2> <p>The MeP target has a number of addressing modes and busses. The <code>near</code> space spans the standard memory space's first 16 megabytes (24 bits). The <code>far</code> space spans the entire 32-bit memory space. The <code>based</code> space is a 128-byte region in the memory space that is addressed relative to the <code>$tp</code> register. The <code>tiny</code> space is a 65536-byte region relative to the <code>$gp</code> register. In addition to these memory regions, the MeP target has a separate 16-bit control bus which is specified with <code>cb</code> attributes. </p>\n<dl> <dt><code>based</code></dt>\n<dd>Any variable with the <code>based</code> attribute is assigned to the <code>.based</code> section, and is accessed with relative to the <code>$tp</code> register. </dd>\n<dt><code>tiny</code></dt>\n<dd>Likewise, the <code>tiny</code> attribute assigned variables to the <code>.tiny</code> section, relative to the <code>$gp</code> register. </dd>\n<dt><code>near</code></dt>\n<dd>Variables with the <code>near</code> attribute are assumed to have addresses that fit in a 24-bit addressing mode. This is the default for large variables (<code>-mtiny=4</code> is the default) but this attribute can override <code>-mtiny=</code> for small variables, or override <code>-ml</code>. </dd>\n<dt><code>far</code></dt>\n<dd>Variables with the <code>far</code> attribute are addressed using a full 32-bit address. Since this covers the entire memory space, this allows modules to make no assumptions about where variables might be stored. </dd>\n<dt>\n<code>io</code><dt>\n<code>io (</code><var>addr</var><code>)</code>\n</dt>\n</dt>\n<dd>Variables with the <code>io</code> attribute are used to address memory-mapped peripherals. If an address is specified, the variable is assigned that address, else it is not assigned an address (it is assumed some other module assigns an address). Example: <pre class=\"smallexample\">int timer_count __attribute__((io(0x123)));</pre> </dd>\n<dt>\n<code>cb</code><dt>\n<code>cb (</code><var>addr</var><code>)</code>\n</dt>\n</dt>\n<dd>Variables with the <code>cb</code> attribute are used to access the control bus, using special instructions. <code>addr</code> indicates the control bus address. Example: <pre class=\"smallexample\">int cpu_clock __attribute__((cb(0x123)));</pre> </dd>\n</dl> \n<h2 class=\"subsection\">6.36.5 i386 Variable Attributes</h2> <p>Two attributes are currently defined for i386 configurations: <code>ms_struct</code> and <code>gcc_struct</code> </p>\n<dl> <dt>\n<code>ms_struct</code><dt><code>gcc_struct</code></dt>\n</dt>\n<dd>\n If <code>packed</code> is used on a structure, or if bit-fields are used, it may be that the Microsoft ABI lays out the structure differently than the way GCC normally does. Particularly when moving packed data between functions compiled with GCC and the native Microsoft compiler (either via function call or as data in a file), it may be necessary to access either format. <p>Currently <code>-m[no-]ms-bitfields</code> is provided for the Microsoft Windows X86 compilers to match the native Microsoft compiler. </p>\n<p>The Microsoft structure layout algorithm is fairly simple with the exception of the bit-field packing. The padding and alignment of members of structures and whether a bit-field can straddle a storage-unit boundary are determine by these rules: </p>\n<ol type=\"1\" start=\"1\"> <li>Structure members are stored sequentially in the order in which they are declared: the first member has the lowest memory address and the last member the highest. </li>\n<li>Every data object has an alignment requirement. The alignment requirement for all data except structures, unions, and arrays is either the size of the object or the current packing size (specified with either the <code>aligned</code> attribute or the <code>pack</code> pragma), whichever is less. For structures, unions, and arrays, the alignment requirement is the largest alignment requirement of its members. Every object is allocated an offset so that: <pre class=\"smallexample\">offset % alignment_requirement == 0</pre> </li>\n<li>Adjacent bit-fields are packed into the same 1-, 2-, or 4-byte allocation unit if the integral types are the same size and if the next bit-field fits into the current allocation unit without crossing the boundary imposed by the common alignment requirements of the bit-fields. </li>\n</ol> <p>MSVC interprets zero-length bit-fields in the following ways: </p>\n<ol type=\"1\" start=\"1\"> <li>If a zero-length bit-field is inserted between two bit-fields that are normally coalesced, the bit-fields are not coalesced. <p>For example: </p>\n<pre class=\"smallexample\">struct\n {\n   unsigned long bf_1 : 12;\n   unsigned long : 0;\n   unsigned long bf_2 : 12;\n } t1;</pre> <p class=\"noindent\">The size of <code>t1</code> is 8 bytes with the zero-length bit-field. If the zero-length bit-field were removed, <code>t1</code>'s size would be 4 bytes. </p>\n</li>\n<li>If a zero-length bit-field is inserted after a bit-field, <code>foo</code>, and the alignment of the zero-length bit-field is greater than the member that follows it, <code>bar</code>, <code>bar</code> is aligned as the type of the zero-length bit-field. <p>For example: </p>\n<pre class=\"smallexample\">struct\n {\n   char foo : 4;\n   short : 0;\n   char bar;\n } t2;\n\nstruct\n {\n   char foo : 4;\n   short : 0;\n   double bar;\n } t3;</pre> <p class=\"noindent\">For <code>t2</code>, <code>bar</code> is placed at offset 2, rather than offset 1. Accordingly, the size of <code>t2</code> is 4. For <code>t3</code>, the zero-length bit-field does not affect the alignment of <code>bar</code> or, as a result, the size of the structure. </p>\n<p>Taking this into account, it is important to note the following: </p>\n<ol type=\"1\" start=\"1\"> <li>If a zero-length bit-field follows a normal bit-field, the type of the zero-length bit-field may affect the alignment of the structure as whole. For example, <code>t2</code> has a size of 4 bytes, since the zero-length bit-field follows a normal bit-field, and is of type short. </li>\n<li>Even if a zero-length bit-field is not followed by a normal bit-field, it may still affect the alignment of the structure: <pre class=\"smallexample\">struct\n {\n   char foo : 6;\n   long : 0;\n } t4;</pre> <p class=\"noindent\">Here, <code>t4</code> takes up 4 bytes. </p>\n</li>\n</ol> </li>\n<li>Zero-length bit-fields following non-bit-field members are ignored: <pre class=\"smallexample\">struct\n {\n   char foo;\n   long : 0;\n   char bar;\n } t5;</pre> <p class=\"noindent\">Here, <code>t5</code> takes up 2 bytes. </p>\n</li>\n</ol> </dd>\n</dl> <h2 class=\"subsection\">6.36.6 PowerPC Variable Attributes</h2> <p>Three attributes currently are defined for PowerPC configurations: <code>altivec</code>, <code>ms_struct</code> and <code>gcc_struct</code>. </p>\n<p>For full documentation of the struct attributes please see the documentation in <a href=\"variable-attributes#i386-Variable-Attributes\">i386 Variable Attributes</a>. </p>\n<p>For documentation of <code>altivec</code> attribute please see the documentation in <a href=\"type-attributes#PowerPC-Type-Attributes\">PowerPC Type Attributes</a>. </p>\n<h2 class=\"subsection\">6.36.7 SPU Variable Attributes</h2> <p>The SPU supports the <code>spu_vector</code> attribute for variables. For documentation of this attribute please see the documentation in <a href=\"type-attributes#SPU-Type-Attributes\">SPU Type Attributes</a>. </p>\n<h2 class=\"subsection\">6.36.8 Xstormy16 Variable Attributes</h2> <p>One attribute is currently defined for xstormy16 configurations: <code>below100</code>. </p>\n<dl> <dt><code>below100</code></dt>\n<dd>\n If a variable has the <code>below100</code> attribute (<code>BELOW100</code> is allowed also), GCC places the variable in the first 0x100 bytes of memory and use special opcodes to access it. Such variables are placed in either the <code>.bss_below100</code> section or the <code>.data_below100</code> section. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Variable-Attributes.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Variable-Attributes.html</a>\n  </p>\n</div>\n","type-attributes":"<h1 class=\"section\" id=\"Type-Attributes\">6.37 Specifying Attributes of Types</h1> <p> The keyword <code>__attribute__</code> allows you to specify special attributes of <code>struct</code> and <code>union</code> types when you define such types. This keyword is followed by an attribute specification inside double parentheses. Seven attributes are currently defined for types: <code>aligned</code>, <code>packed</code>, <code>transparent_union</code>, <code>unused</code>, <code>deprecated</code>, <code>visibility</code>, and <code>may_alias</code>. Other attributes are defined for functions (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>) and for variables (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>). </p>\n<p>You may also specify any one of these attributes with ‘<code>__</code>’ preceding and following its keyword. This allows you to use these attributes in header files without being concerned about a possible macro of the same name. For example, you may use <code>__aligned__</code> instead of <code>aligned</code>. </p>\n<p>You may specify type attributes in an enum, struct or union type declaration or definition, or for other types in a <code>typedef</code> declaration. </p>\n<p>For an enum, struct or union type, you may specify attributes either between the enum, struct or union tag and the name of the type, or just past the closing curly brace of the <em>definition</em>. The former syntax is preferred. </p>\n<p>See <a href=\"attribute-syntax#Attribute-Syntax\">Attribute Syntax</a>, for details of the exact syntax for using attributes.  </p>\n<dl>\n<dt>\n<code>aligned (</code><var>alignment</var><code>)</code>\n</dt>\n<dd>This attribute specifies a minimum alignment (in bytes) for variables of the specified type. For example, the declarations: <pre class=\"smallexample\">struct S { short f[3]; } __attribute__ ((aligned (8)));\ntypedef int more_aligned_int __attribute__ ((aligned (8)));</pre> <p class=\"noindent\">force the compiler to ensure (as far as it can) that each variable whose type is <code>struct S</code> or <code>more_aligned_int</code> is allocated and aligned <em>at least</em> on a 8-byte boundary. On a SPARC, having all variables of type <code>struct S</code> aligned to 8-byte boundaries allows the compiler to use the <code>ldd</code> and <code>std</code> (doubleword load and store) instructions when copying one variable of type <code>struct S</code> to another, thus improving run-time efficiency. </p>\n<p>Note that the alignment of any given <code>struct</code> or <code>union</code> type is required by the ISO C standard to be at least a perfect multiple of the lowest common multiple of the alignments of all of the members of the <code>struct</code> or <code>union</code> in question. This means that you <em>can</em> effectively adjust the alignment of a <code>struct</code> or <code>union</code> type by attaching an <code>aligned</code> attribute to any one of the members of such a type, but the notation illustrated in the example above is a more obvious, intuitive, and readable way to request the compiler to adjust the alignment of an entire <code>struct</code> or <code>union</code> type. </p>\n<p>As in the preceding example, you can explicitly specify the alignment (in bytes) that you wish the compiler to use for a given <code>struct</code> or <code>union</code> type. Alternatively, you can leave out the alignment factor and just ask the compiler to align a type to the maximum useful alignment for the target machine you are compiling for. For example, you could write: </p>\n<pre class=\"smallexample\">struct S { short f[3]; } __attribute__ ((aligned));</pre> <p>Whenever you leave out the alignment factor in an <code>aligned</code> attribute specification, the compiler automatically sets the alignment for the type to the largest alignment that is ever used for any data type on the target machine you are compiling for. Doing this can often make copy operations more efficient, because the compiler can use whatever instructions copy the biggest chunks of memory when performing copies to or from the variables that have types that you have aligned this way. </p>\n<p>In the example above, if the size of each <code>short</code> is 2 bytes, then the size of the entire <code>struct S</code> type is 6 bytes. The smallest power of two that is greater than or equal to that is 8, so the compiler sets the alignment for the entire <code>struct S</code> type to 8 bytes. </p>\n<p>Note that although you can ask the compiler to select a time-efficient alignment for a given type and then declare only individual stand-alone objects of that type, the compiler's ability to select a time-efficient alignment is primarily useful only when you plan to create arrays of variables having the relevant (efficiently aligned) type. If you declare or use arrays of variables of an efficiently-aligned type, then it is likely that your program also does pointer arithmetic (or subscripting, which amounts to the same thing) on pointers to the relevant type, and the code that the compiler generates for these pointer arithmetic operations is often more efficient for efficiently-aligned types than for other types. </p>\n<p>The <code>aligned</code> attribute can only increase the alignment; but you can decrease it by specifying <code>packed</code> as well. See below. </p>\n<p>Note that the effectiveness of <code>aligned</code> attributes may be limited by inherent limitations in your linker. On many systems, the linker is only able to arrange for variables to be aligned up to a certain maximum alignment. (For some linkers, the maximum supported alignment may be very very small.) If your linker is only able to align variables up to a maximum of 8-byte alignment, then specifying <code>aligned(16)</code> in an <code>__attribute__</code> still only provides you with 8-byte alignment. See your linker documentation for further information. </p>\n</dd>\n<dt><code>packed</code></dt>\n<dd>This attribute, attached to <code>struct</code> or <code>union</code> type definition, specifies that each member (other than zero-width bit-fields) of the structure or union is placed to minimize the memory required. When attached to an <code>enum</code> definition, it indicates that the smallest integral type should be used. <p>Specifying this attribute for <code>struct</code> and <code>union</code> types is equivalent to specifying the <code>packed</code> attribute on each of the structure or union members. Specifying the <code>-fshort-enums</code> flag on the line is equivalent to specifying the <code>packed</code> attribute on all <code>enum</code> definitions. </p>\n<p>In the following example <code>struct my_packed_struct</code>'s members are packed closely together, but the internal layout of its <code>s</code> member is not packed—to do that, <code>struct my_unpacked_struct</code> needs to be packed too. </p>\n<pre class=\"smallexample\">struct my_unpacked_struct\n {\n    char c;\n    int i;\n };\n\nstruct __attribute__ ((__packed__)) my_packed_struct\n  {\n     char c;\n     int  i;\n     struct my_unpacked_struct s;\n  };</pre> <p>You may only specify this attribute on the definition of an <code>enum</code>, <code>struct</code> or <code>union</code>, not on a <code>typedef</code> that does not also define the enumerated type, structure or union. </p>\n</dd>\n<dt><code>transparent_union</code></dt>\n<dd>This attribute, attached to a <code>union</code> type definition, indicates that any function parameter having that union type causes calls to that function to be treated in a special way. <p>First, the argument corresponding to a transparent union type can be of any type in the union; no cast is required. Also, if the union contains a pointer type, the corresponding argument can be a null pointer constant or a void pointer expression; and if the union contains a void pointer type, the corresponding argument can be any pointer expression. If the union member type is a pointer, qualifiers like <code>const</code> on the referenced type must be respected, just as with normal pointer conversions. </p>\n<p>Second, the argument is passed to the function using the calling conventions of the first member of the transparent union, not the calling conventions of the union itself. All members of the union must have the same machine representation; this is necessary for this argument passing to work properly. </p>\n<p>Transparent unions are designed for library functions that have multiple interfaces for compatibility reasons. For example, suppose the <code>wait</code> function must accept either a value of type <code>int *</code> to comply with POSIX, or a value of type <code>union wait *</code> to comply with the 4.1BSD interface. If <code>wait</code>'s parameter were <code>void *</code>, <code>wait</code> would accept both kinds of arguments, but it would also accept any other pointer type and this would make argument type checking less useful. Instead, <code>&lt;sys/wait.h&gt;</code> might define the interface as follows: </p>\n<pre class=\"smallexample\">typedef union __attribute__ ((__transparent_union__))\n  {\n    int *__ip;\n    union wait *__up;\n  } wait_status_ptr_t;\n\npid_t wait (wait_status_ptr_t);</pre> <p class=\"noindent\">This interface allows either <code>int *</code> or <code>union wait *</code> arguments to be passed, using the <code>int *</code> calling convention. The program can call <code>wait</code> with arguments of either type: </p>\n<pre class=\"smallexample\">int w1 () { int w; return wait (&amp;w); }\nint w2 () { union wait w; return wait (&amp;w); }</pre> <p class=\"noindent\">With this interface, <code>wait</code>'s implementation might look like this: </p>\n<pre class=\"smallexample\">pid_t wait (wait_status_ptr_t p)\n{\n  return waitpid (-1, p.__ip, 0);\n}</pre> </dd>\n<dt><code>unused</code></dt>\n<dd>When attached to a type (including a <code>union</code> or a <code>struct</code>), this attribute means that variables of that type are meant to appear possibly unused. GCC does not produce a warning for any variables of that type, even if the variable appears to do nothing. This is often the case with lock or thread classes, which are usually defined and then not referenced, but contain constructors and destructors that have nontrivial bookkeeping functions. </dd>\n<dt>\n<code>deprecated</code><dt>\n<code>deprecated (</code><var>msg</var><code>)</code>\n</dt>\n</dt>\n<dd>The <code>deprecated</code> attribute results in a warning if the type is used anywhere in the source file. This is useful when identifying types that are expected to be removed in a future version of a program. If possible, the warning also includes the location of the declaration of the deprecated type, to enable users to easily find further information about why the type is deprecated, or what they should do instead. Note that the warnings only occur for uses and then only if the type is being applied to an identifier that itself is not being declared as deprecated. <pre class=\"smallexample\">typedef int T1 __attribute__ ((deprecated));\nT1 x;\ntypedef T1 T2;\nT2 y;\ntypedef T1 T3 __attribute__ ((deprecated));\nT3 z __attribute__ ((deprecated));</pre> <p class=\"noindent\">results in a warning on line 2 and 3 but not lines 4, 5, or 6. No warning is issued for line 4 because T2 is not explicitly deprecated. Line 5 has no warning because T3 is explicitly deprecated. Similarly for line 6. The optional <var>msg</var> argument, which must be a string, is printed in the warning if present. </p>\n<p>The <code>deprecated</code> attribute can also be used for functions and variables (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>.) </p>\n</dd>\n<dt><code>may_alias</code></dt>\n<dd>Accesses through pointers to types with this attribute are not subject to type-based alias analysis, but are instead assumed to be able to alias any other type of objects. In the context of section 6.5 paragraph 7 of the C99 standard, an lvalue expression dereferencing such a pointer is treated like having a character type. See <code>-fstrict-aliasing</code> for more information on aliasing issues. This extension exists to support some vector APIs, in which pointers to one vector type are permitted to alias pointers to a different vector type. <p>Note that an object of a type with this attribute does not have any special semantics. </p>\n<p>Example of use: </p>\n<pre class=\"smallexample\">typedef short __attribute__((__may_alias__)) short_a;\n\nint\nmain (void)\n{\n  int a = 0x12345678;\n  short_a *b = (short_a *) &amp;a;\n\n  b[1] = 0;\n\n  if (a == 0x12345678)\n    abort();\n\n  exit(0);\n}</pre> <p class=\"noindent\">If you replaced <code>short_a</code> with <code>short</code> in the variable declaration, the above program would abort when compiled with <code>-fstrict-aliasing</code>, which is on by default at <code>-O2</code> or above in recent GCC versions. </p>\n</dd>\n<dt><code>visibility</code></dt>\n<dd>In C++, attribute visibility (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>) can also be applied to class, struct, union and enum types. Unlike other type attributes, the attribute must appear between the initial keyword and the name of the type; it cannot appear after the body of the type. <p>Note that the type visibility is applied to vague linkage entities associated with the class (vtable, typeinfo node, etc.). In particular, if a class is thrown as an exception in one shared object and caught in another, the class must have default visibility. Otherwise the two shared objects are unable to use the same typeinfo node and exception handling will break. </p>\n</dd>\n</dl> <p>To specify multiple attributes, separate them by commas within the double parentheses: for example, ‘<code>__attribute__ ((aligned (16), packed))</code>’. </p>\n<h2 class=\"subsection\">6.37.1 ARM Type Attributes</h2> <p>On those ARM targets that support <code>dllimport</code> (such as Symbian OS), you can use the <code>notshared</code> attribute to indicate that the virtual table and other similar data for a class should not be exported from a DLL. For example: </p>\n<pre class=\"smallexample\">class __declspec(notshared) C {\npublic:\n  __declspec(dllimport) C();\n  virtual void f();\n}\n\n__declspec(dllexport)\nC::C() {}</pre> <p class=\"noindent\">In this code, <code>C::C</code> is exported from the current DLL, but the virtual table for <code>C</code> is not exported. (You can use <code>__attribute__</code> instead of <code>__declspec</code> if you prefer, but most Symbian OS code uses <code>__declspec</code>.) </p>\n\n<h2 class=\"subsection\">6.37.2 MeP Type Attributes</h2> <p>Many of the MeP variable attributes may be applied to types as well. Specifically, the <code>based</code>, <code>tiny</code>, <code>near</code>, and <code>far</code> attributes may be applied to either. The <code>io</code> and <code>cb</code> attributes may not be applied to types. </p>\n\n<h2 class=\"subsection\">6.37.3 i386 Type Attributes</h2> <p>Two attributes are currently defined for i386 configurations: <code>ms_struct</code> and <code>gcc_struct</code>. </p>\n<dl> <dt>\n<code>ms_struct</code><dt><code>gcc_struct</code></dt>\n</dt>\n<dd>\n If <code>packed</code> is used on a structure, or if bit-fields are used it may be that the Microsoft ABI packs them differently than GCC normally packs them. Particularly when moving packed data between functions compiled with GCC and the native Microsoft compiler (either via function call or as data in a file), it may be necessary to access either format. <p>Currently <code>-m[no-]ms-bitfields</code> is provided for the Microsoft Windows X86 compilers to match the native Microsoft compiler. </p>\n</dd>\n</dl> \n<h2 class=\"subsection\">6.37.4 PowerPC Type Attributes</h2> <p>Three attributes currently are defined for PowerPC configurations: <code>altivec</code>, <code>ms_struct</code> and <code>gcc_struct</code>. </p>\n<p>For full documentation of the <code>ms_struct</code> and <code>gcc_struct</code> attributes please see the documentation in <a href=\"variable-attributes#i386-Type-Attributes\">i386 Type Attributes</a>. </p>\n<p>The <code>altivec</code> attribute allows one to declare AltiVec vector data types supported by the AltiVec Programming Interface Manual. The attribute requires an argument to specify one of three vector types: <code>vector__</code>, <code>pixel__</code> (always followed by unsigned short), and <code>bool__</code> (always followed by unsigned). </p>\n<pre class=\"smallexample\">__attribute__((altivec(vector__)))\n__attribute__((altivec(pixel__))) unsigned short\n__attribute__((altivec(bool__))) unsigned</pre> <p>These attributes mainly are intended to support the <code>__vector</code>, <code>__pixel</code>, and <code>__bool</code> AltiVec keywords. </p>\n\n<h2 class=\"subsection\">6.37.5 SPU Type Attributes</h2> <p>The SPU supports the <code>spu_vector</code> attribute for types. This attribute allows one to declare vector data types supported by the Sony/Toshiba/IBM SPU Language Extensions Specification. It is intended to support the <code>__vector</code> keyword. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Type-Attributes.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Type-Attributes.html</a>\n  </p>\n</div>\n","alignment":"<h1 class=\"section\" id=\"Alignment\">6.38 Inquiring on Alignment of Types or Variables</h1> <p> The keyword <code>__alignof__</code> allows you to inquire about how an object is aligned, or the minimum alignment usually required by a type. Its syntax is just like <code>sizeof</code>. </p>\n<p>For example, if the target machine requires a <code>double</code> value to be aligned on an 8-byte boundary, then <code>__alignof__ (double)</code> is 8. This is true on many RISC machines. On more traditional machine designs, <code>__alignof__ (double)</code> is 4 or even 2. </p>\n<p>Some machines never actually require alignment; they allow reference to any data type even at an odd address. For these machines, <code>__alignof__</code> reports the smallest alignment that GCC gives the data type, usually as mandated by the target ABI. </p>\n<p>If the operand of <code>__alignof__</code> is an lvalue rather than a type, its value is the required alignment for its type, taking into account any minimum alignment specified with GCC's <code>__attribute__</code> extension (see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>). For example, after this declaration: </p>\n<pre class=\"smallexample\">struct foo { int x; char y; } foo1;</pre> <p class=\"noindent\">the value of <code>__alignof__ (foo1.y)</code> is 1, even though its actual alignment is probably 2 or 4, the same as <code>__alignof__ (int)</code>. </p>\n<p>It is an error to ask for the alignment of an incomplete type. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Alignment.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Alignment.html</a>\n  </p>\n</div>\n","inline":"<h1 class=\"section\" id=\"Inline\">6.39 An Inline Function is As Fast As a Macro</h1> <p> By declaring a function inline, you can direct GCC to make calls to that function faster. One way GCC can achieve this is to integrate that function's code into the code for its callers. This makes execution faster by eliminating the function-call overhead; in addition, if any of the actual argument values are constant, their known values may permit simplifications at compile time so that not all of the inline function's code needs to be included. The effect on code size is less predictable; object code may be larger or smaller with function inlining, depending on the particular case. You can also direct GCC to try to integrate all “simple enough” functions into their callers with the option <code>-finline-functions</code>. </p>\n<p>GCC implements three different semantics of declaring a function inline. One is available with <code>-std=gnu89</code> or <code>-fgnu89-inline</code> or when <code>gnu_inline</code> attribute is present on all inline declarations, another when <code>-std=c99</code>, <code>-std=c11</code>, <code>-std=gnu99</code> or <code>-std=gnu11</code> (without <code>-fgnu89-inline</code>), and the third is used when compiling C++. </p>\n<p>To declare a function inline, use the <code>inline</code> keyword in its declaration, like this: </p>\n<pre class=\"smallexample\">static inline int\ninc (int *a)\n{\n  return (*a)++;\n}</pre> <p>If you are writing a header file to be included in ISO C90 programs, write <code>__inline__</code> instead of <code>inline</code>. See <a href=\"alternate-keywords#Alternate-Keywords\">Alternate Keywords</a>. </p>\n<p>The three types of inlining behave similarly in two important cases: when the <code>inline</code> keyword is used on a <code>static</code> function, like the example above, and when a function is first declared without using the <code>inline</code> keyword and then is defined with <code>inline</code>, like this: </p>\n<pre class=\"smallexample\">extern int inc (int *a);\ninline int\ninc (int *a)\n{\n  return (*a)++;\n}</pre> <p>In both of these common cases, the program behaves the same as if you had not used the <code>inline</code> keyword, except for its speed. </p>\n<p>When a function is both inline and <code>static</code>, if all calls to the function are integrated into the caller, and the function's address is never used, then the function's own assembler code is never referenced. In this case, GCC does not actually output assembler code for the function, unless you specify the option <code>-fkeep-inline-functions</code>. Some calls cannot be integrated for various reasons (in particular, calls that precede the function's definition cannot be integrated, and neither can recursive calls within the definition). If there is a nonintegrated call, then the function is compiled to assembler code as usual. The function must also be compiled as usual if the program refers to its address, because that can't be inlined. </p>\n<p>Note that certain usages in a function definition can make it unsuitable for inline substitution. Among these usages are: variadic functions, use of <code>alloca</code>, use of variable-length data types (see <a href=\"variable-length#Variable-Length\">Variable Length</a>), use of computed goto (see <a href=\"labels-as-values#Labels-as-Values\">Labels as Values</a>), use of nonlocal goto, and nested functions (see <a href=\"nested-functions#Nested-Functions\">Nested Functions</a>). Using <code>-Winline</code> warns when a function marked <code>inline</code> could not be substituted, and gives the reason for the failure. </p>\n<p>As required by ISO C++, GCC considers member functions defined within the body of a class to be marked inline even if they are not explicitly declared with the <code>inline</code> keyword. You can override this with <code>-fno-default-inline</code>; see <a href=\"c_002b_002b-dialect-options#C_002b_002b-Dialect-Options\">Options Controlling C++ Dialect</a>. </p>\n<p>GCC does not inline any functions when not optimizing unless you specify the ‘<code>always_inline</code>’ attribute for the function, like this: </p>\n<pre class=\"smallexample\">/* <span class=\"roman\">Prototype.</span>  */\ninline void foo (const char) __attribute__((always_inline));</pre> <p>The remainder of this section is specific to GNU C90 inlining. </p>\n<p>When an inline function is not <code>static</code>, then the compiler must assume that there may be calls from other source files; since a global symbol can be defined only once in any program, the function must not be defined in the other source files, so the calls therein cannot be integrated. Therefore, a non-<code>static</code> inline function is always compiled on its own in the usual fashion. </p>\n<p>If you specify both <code>inline</code> and <code>extern</code> in the function definition, then the definition is used only for inlining. In no case is the function compiled on its own, not even if you refer to its address explicitly. Such an address becomes an external reference, as if you had only declared the function, and had not defined it. </p>\n<p>This combination of <code>inline</code> and <code>extern</code> has almost the effect of a macro. The way to use it is to put a function definition in a header file with these keywords, and put another copy of the definition (lacking <code>inline</code> and <code>extern</code>) in a library file. The definition in the header file causes most calls to the function to be inlined. If any uses of the function remain, they refer to the single copy in the library. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Inline.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Inline.html</a>\n  </p>\n</div>\n","volatiles":"<h1 class=\"section\" id=\"Volatiles\">6.40 When is a Volatile Object Accessed?</h1> <p> C has the concept of volatile objects. These are normally accessed by pointers and used for accessing hardware or inter-thread communication. The standard encourages compilers to refrain from optimizations concerning accesses to volatile objects, but leaves it implementation defined as to what constitutes a volatile access. The minimum requirement is that at a sequence point all previous accesses to volatile objects have stabilized and no subsequent accesses have occurred. Thus an implementation is free to reorder and combine volatile accesses that occur between sequence points, but cannot do so for accesses across a sequence point. The use of volatile does not allow you to violate the restriction on updating objects multiple times between two sequence points. </p>\n<p>Accesses to non-volatile objects are not ordered with respect to volatile accesses. You cannot use a volatile object as a memory barrier to order a sequence of writes to non-volatile memory. For instance: </p>\n<pre class=\"smallexample\">int *ptr = <var>something</var>;\nvolatile int vobj;\n*ptr = <var>something</var>;\nvobj = 1;</pre> <p class=\"noindent\">Unless <var>*ptr</var> and <var>vobj</var> can be aliased, it is not guaranteed that the write to <var>*ptr</var> occurs by the time the update of <var>vobj</var> happens. If you need this guarantee, you must use a stronger memory barrier such as: </p>\n<pre class=\"smallexample\">int *ptr = <var>something</var>;\nvolatile int vobj;\n*ptr = <var>something</var>;\nasm volatile (\"\" : : : \"memory\");\nvobj = 1;</pre> <p>A scalar volatile object is read when it is accessed in a void context: </p>\n<pre class=\"smallexample\">volatile int *src = <var>somevalue</var>;\n*src;</pre> <p>Such expressions are rvalues, and GCC implements this as a read of the volatile object being pointed to. </p>\n<p>Assignments are also expressions and have an rvalue. However when assigning to a scalar volatile, the volatile object is not reread, regardless of whether the assignment expression's rvalue is used or not. If the assignment's rvalue is used, the value is that assigned to the volatile object. For instance, there is no read of <var>vobj</var> in all the following cases: </p>\n<pre class=\"smallexample\">int obj;\nvolatile int vobj;\nvobj = <var>something</var>;\nobj = vobj = <var>something</var>;\nobj ? vobj = <var>onething</var> : vobj = <var>anotherthing</var>;\nobj = (<var>something</var>, vobj = <var>anotherthing</var>);</pre> <p>If you need to read the volatile object after an assignment has occurred, you must use a separate expression with an intervening sequence point. </p>\n<p>As bit-fields are not individually addressable, volatile bit-fields may be implicitly read when written to, or when adjacent bit-fields are accessed. Bit-field operations may be optimized such that adjacent bit-fields are only partially accessed, if they straddle a storage unit boundary. For these reasons it is unwise to use volatile bit-fields to access hardware. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Volatiles.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Volatiles.html</a>\n  </p>\n</div>\n","extended-asm":"<h1 class=\"section\" id=\"Extended-Asm\">6.41 Assembler Instructions with C Expression Operands</h1> <p> In an assembler instruction using <code>asm</code>, you can specify the operands of the instruction using C expressions. This means you need not guess which registers or memory locations contain the data you want to use. </p>\n<p>You must specify an assembler instruction template much like what appears in a machine description, plus an operand constraint string for each operand. </p>\n<p>For example, here is how to use the 68881's <code>fsinx</code> instruction: </p>\n<pre class=\"smallexample\">asm (\"fsinx %1,%0\" : \"=f\" (result) : \"f\" (angle));</pre> <p class=\"noindent\">Here <code>angle</code> is the C expression for the input operand while <code>result</code> is that of the output operand. Each has ‘<code>\"f\"</code>’ as its operand constraint, saying that a floating-point register is required. The ‘<code>=</code>’ in ‘<code>=f</code>’ indicates that the operand is an output; all output operands' constraints must use ‘<code>=</code>’. The constraints use the same language used in the machine description (see <a href=\"constraints#Constraints\">Constraints</a>). </p>\n<p>Each operand is described by an operand-constraint string followed by the C expression in parentheses. A colon separates the assembler template from the first output operand and another separates the last output operand from the first input, if any. Commas separate the operands within each group. The total number of operands is currently limited to 30; this limitation may be lifted in some future version of GCC. </p>\n<p>If there are no output operands but there are input operands, you must place two consecutive colons surrounding the place where the output operands would go. </p>\n<p>As of GCC version 3.1, it is also possible to specify input and output operands using symbolic names which can be referenced within the assembler code. These names are specified inside square brackets preceding the constraint string, and can be referenced inside the assembler code using <code>%[</code><var>name</var><code>]</code> instead of a percentage sign followed by the operand number. Using named operands the above example could look like: </p>\n<pre class=\"smallexample\">asm (\"fsinx %[angle],%[output]\"\n     : [output] \"=f\" (result)\n     : [angle] \"f\" (angle));</pre> <p class=\"noindent\">Note that the symbolic operand names have no relation whatsoever to other C identifiers. You may use any name you like, even those of existing C symbols, but you must ensure that no two operands within the same assembler construct use the same symbolic name. </p>\n<p>Output operand expressions must be lvalues; the compiler can check this. The input operands need not be lvalues. The compiler cannot check whether the operands have data types that are reasonable for the instruction being executed. It does not parse the assembler instruction template and does not know what it means or even whether it is valid assembler input. The extended <code>asm</code> feature is most often used for machine instructions the compiler itself does not know exist. If the output expression cannot be directly addressed (for example, it is a bit-field), your constraint must allow a register. In that case, GCC uses the register as the output of the <code>asm</code>, and then stores that register into the output. </p>\n<p>The ordinary output operands must be write-only; GCC assumes that the values in these operands before the instruction are dead and need not be generated. Extended asm supports input-output or read-write operands. Use the constraint character ‘<code>+</code>’ to indicate such an operand and list it with the output operands. </p>\n<p>You may, as an alternative, logically split its function into two separate operands, one input operand and one write-only output operand. The connection between them is expressed by constraints that say they need to be in the same location when the instruction executes. You can use the same C expression for both operands, or different expressions. For example, here we write the (fictitious) ‘<code>combine</code>’ instruction with <code>bar</code> as its read-only source operand and <code>foo</code> as its read-write destination: </p>\n<pre class=\"smallexample\">asm (\"combine %2,%0\" : \"=r\" (foo) : \"0\" (foo), \"g\" (bar));</pre> <p class=\"noindent\">The constraint ‘<code>\"0\"</code>’ for operand 1 says that it must occupy the same location as operand 0. A number in constraint is allowed only in an input operand and it must refer to an output operand. </p>\n<p>Only a number in the constraint can guarantee that one operand is in the same place as another. The mere fact that <code>foo</code> is the value of both operands is not enough to guarantee that they are in the same place in the generated assembler code. The following does not work reliably: </p>\n<pre class=\"smallexample\">asm (\"combine %2,%0\" : \"=r\" (foo) : \"r\" (foo), \"g\" (bar));</pre> <p>Various optimizations or reloading could cause operands 0 and 1 to be in different registers; GCC knows no reason not to do so. For example, the compiler might find a copy of the value of <code>foo</code> in one register and use it for operand 1, but generate the output operand 0 in a different register (copying it afterward to <code>foo</code>'s own address). Of course, since the register for operand 1 is not even mentioned in the assembler code, the result will not work, but GCC can't tell that. </p>\n<p>As of GCC version 3.1, one may write <code>[</code><var>name</var><code>]</code> instead of the operand number for a matching constraint. For example: </p>\n<pre class=\"smallexample\">asm (\"cmoveq %1,%2,%[result]\"\n     : [result] \"=r\"(result)\n     : \"r\" (test), \"r\"(new), \"[result]\"(old));</pre> <p>Sometimes you need to make an <code>asm</code> operand be a specific register, but there's no matching constraint letter for that register <em>by itself</em>. To force the operand into that register, use a local variable for the operand and specify the register in the variable declaration. See <a href=\"explicit-reg-vars#Explicit-Reg-Vars\">Explicit Reg Vars</a>. Then for the <code>asm</code> operand, use any register constraint letter that matches the register: </p>\n<pre class=\"smallexample\">register int *p1 asm (\"r0\") = ...;\nregister int *p2 asm (\"r1\") = ...;\nregister int *result asm (\"r0\");\nasm (\"sysint\" : \"=r\" (result) : \"0\" (p1), \"r\" (p2));</pre> <p>In the above example, beware that a register that is call-clobbered by the target ABI will be overwritten by any function call in the assignment, including library calls for arithmetic operators. Also a register may be clobbered when generating some operations, like variable shift, memory copy or memory move on x86. Assuming it is a call-clobbered register, this may happen to <code>r0</code> above by the assignment to <code>p2</code>. If you have to use such a register, use temporary variables for expressions between the register assignment and use: </p>\n<pre class=\"smallexample\">int t1 = ...;\nregister int *p1 asm (\"r0\") = ...;\nregister int *p2 asm (\"r1\") = t1;\nregister int *result asm (\"r0\");\nasm (\"sysint\" : \"=r\" (result) : \"0\" (p1), \"r\" (p2));</pre> <p>Some instructions clobber specific hard registers. To describe this, write a third colon after the input operands, followed by the names of the clobbered hard registers (given as strings). Here is a realistic example for the VAX: </p>\n<pre class=\"smallexample\">asm volatile (\"movc3 %0,%1,%2\"\n              : /* <span class=\"roman\">no outputs</span> */\n              : \"g\" (from), \"g\" (to), \"g\" (count)\n              : \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\");</pre> <p>You may not write a clobber description in a way that overlaps with an input or output operand. For example, you may not have an operand describing a register class with one member if you mention that register in the clobber list. Variables declared to live in specific registers (see <a href=\"explicit-reg-vars#Explicit-Reg-Vars\">Explicit Reg Vars</a>), and used as asm input or output operands must have no part mentioned in the clobber description. There is no way for you to specify that an input operand is modified without also specifying it as an output operand. Note that if all the output operands you specify are for this purpose (and hence unused), you then also need to specify <code>volatile</code> for the <code>asm</code> construct, as described below, to prevent GCC from deleting the <code>asm</code> statement as unused. </p>\n<p>If you refer to a particular hardware register from the assembler code, you probably have to list the register after the third colon to tell the compiler the register's value is modified. In some assemblers, the register names begin with ‘<code>%</code>’; to produce one ‘<code>%</code>’ in the assembler code, you must write ‘<code>%%</code>’ in the input. </p>\n<p>If your assembler instruction can alter the condition code register, add ‘<code>cc</code>’ to the list of clobbered registers. GCC on some machines represents the condition codes as a specific hardware register; ‘<code>cc</code>’ serves to name this register. On other machines, the condition code is handled differently, and specifying ‘<code>cc</code>’ has no effect. But it is valid no matter what the machine. </p>\n<p>If your assembler instructions access memory in an unpredictable fashion, add ‘<code>memory</code>’ to the list of clobbered registers. This causes GCC to not keep memory values cached in registers across the assembler instruction and not optimize stores or loads to that memory. You also should add the <code>volatile</code> keyword if the memory affected is not listed in the inputs or outputs of the <code>asm</code>, as the ‘<code>memory</code>’ clobber does not count as a side-effect of the <code>asm</code>. If you know how large the accessed memory is, you can add it as input or output but if this is not known, you should add ‘<code>memory</code>’. As an example, if you access ten bytes of a string, you can use a memory input like: </p>\n<pre class=\"smallexample\">{\"m\"( ({ struct { char x[10]; } *p = (void *)ptr ; *p; }) )}.</pre> <p>Note that in the following example the memory input is necessary, otherwise GCC might optimize the store to <code>x</code> away: </p>\n<pre class=\"smallexample\">int foo ()\n{\n  int x = 42;\n  int *y = &amp;x;\n  int result;\n  asm (\"magic stuff accessing an 'int' pointed to by '%1'\"\n       : \"=&amp;d\" (result) : \"a\" (y), \"m\" (*y));\n  return result;\n}</pre> <p>You can put multiple assembler instructions together in a single <code>asm</code> template, separated by the characters normally used in assembly code for the system. A combination that works in most places is a newline to break the line, plus a tab character to move to the instruction field (written as ‘<code>\\n\\t</code>’). Sometimes semicolons can be used, if the assembler allows semicolons as a line-breaking character. Note that some assembler dialects use semicolons to start a comment. The input operands are guaranteed not to use any of the clobbered registers, and neither do the output operands' addresses, so you can read and write the clobbered registers as many times as you like. Here is an example of multiple instructions in a template; it assumes the subroutine <code>_foo</code> accepts arguments in registers 9 and 10: </p>\n<pre class=\"smallexample\">asm (\"movl %0,r9\\n\\tmovl %1,r10\\n\\tcall _foo\"\n     : /* no outputs */\n     : \"g\" (from), \"g\" (to)\n     : \"r9\", \"r10\");</pre> <p>Unless an output operand has the ‘<code>&amp;</code>’ constraint modifier, GCC may allocate it in the same register as an unrelated input operand, on the assumption the inputs are consumed before the outputs are produced. This assumption may be false if the assembler code actually consists of more than one instruction. In such a case, use ‘<code>&amp;</code>’ for each output operand that may not overlap an input. See <a href=\"modifiers#Modifiers\">Modifiers</a>. </p>\n<p>If you want to test the condition code produced by an assembler instruction, you must include a branch and a label in the <code>asm</code> construct, as follows: </p>\n<pre class=\"smallexample\">asm (\"clr %0\\n\\tfrob %1\\n\\tbeq 0f\\n\\tmov #1,%0\\n0:\"\n     : \"g\" (result)\n     : \"g\" (input));</pre> <p class=\"noindent\">This assumes your assembler supports local labels, as the GNU assembler and most Unix assemblers do. </p>\n<p>Speaking of labels, jumps from one <code>asm</code> to another are not supported. The compiler's optimizers do not know about these jumps, and therefore they cannot take account of them when deciding how to optimize. See <a href=\"extended-asm#Extended-asm-with-goto\">Extended asm with goto</a>. </p>\n<p>Usually the most convenient way to use these <code>asm</code> instructions is to encapsulate them in macros that look like functions. For example, </p>\n<pre class=\"smallexample\">#define sin(x)       \\\n({ double __value, __arg = (x);   \\\n   asm (\"fsinx %1,%0\": \"=f\" (__value): \"f\" (__arg));  \\\n   __value; })</pre> <p class=\"noindent\">Here the variable <code>__arg</code> is used to make sure that the instruction operates on a proper <code>double</code> value, and to accept only those arguments <code>x</code> that can convert automatically to a <code>double</code>. </p>\n<p>Another way to make sure the instruction operates on the correct data type is to use a cast in the <code>asm</code>. This is different from using a variable <code>__arg</code> in that it converts more different types. For example, if the desired type is <code>int</code>, casting the argument to <code>int</code> accepts a pointer with no complaint, while assigning the argument to an <code>int</code> variable named <code>__arg</code> warns about using a pointer unless the caller explicitly casts it. </p>\n<p>If an <code>asm</code> has output operands, GCC assumes for optimization purposes the instruction has no side effects except to change the output operands. This does not mean instructions with a side effect cannot be used, but you must be careful, because the compiler may eliminate them if the output operands aren't used, or move them out of loops, or replace two with one if they constitute a common subexpression. Also, if your instruction does have a side effect on a variable that otherwise appears not to change, the old value of the variable may be reused later if it happens to be found in a register. </p>\n<p>You can prevent an <code>asm</code> instruction from being deleted by writing the keyword <code>volatile</code> after the <code>asm</code>. For example: </p>\n<pre class=\"smallexample\">#define get_and_set_priority(new)              \\\n({ int __old;                                  \\\n   asm volatile (\"get_and_set_priority %0, %1\" \\\n                 : \"=g\" (__old) : \"g\" (new));  \\\n   __old; })</pre> <p class=\"noindent\">The <code>volatile</code> keyword indicates that the instruction has important side-effects. GCC does not delete a volatile <code>asm</code> if it is reachable. (The instruction can still be deleted if GCC can prove that control flow never reaches the location of the instruction.) Note that even a volatile <code>asm</code> instruction can be moved relative to other code, including across jump instructions. For example, on many targets there is a system register that can be set to control the rounding mode of floating-point operations. You might try setting it with a volatile <code>asm</code>, like this PowerPC example: </p>\n<pre class=\"smallexample\">asm volatile(\"mtfsf 255,%0\" : : \"f\" (fpenv));\nsum = x + y;</pre> <p class=\"noindent\">This does not work reliably, as the compiler may move the addition back before the volatile <code>asm</code>. To make it work you need to add an artificial dependency to the <code>asm</code> referencing a variable in the code you don't want moved, for example: </p>\n<pre class=\"smallexample\">asm volatile (\"mtfsf 255,%1\" : \"=X\"(sum): \"f\"(fpenv));\nsum = x + y;</pre> <p>Similarly, you can't expect a sequence of volatile <code>asm</code> instructions to remain perfectly consecutive. If you want consecutive output, use a single <code>asm</code>. Also, GCC performs some optimizations across a volatile <code>asm</code> instruction; GCC does not “forget everything” when it encounters a volatile <code>asm</code> instruction the way some other compilers do. </p>\n<p>An <code>asm</code> instruction without any output operands is treated identically to a volatile <code>asm</code> instruction. </p>\n<p>It is a natural idea to look for a way to give access to the condition code left by the assembler instruction. However, when we attempted to implement this, we found no way to make it work reliably. The problem is that output operands might need reloading, which result in additional following “store” instructions. On most machines, these instructions alter the condition code before there is time to test it. This problem doesn't arise for ordinary “test” and “compare” instructions because they don't have any output operands. </p>\n<p>For reasons similar to those described above, it is not possible to give an assembler instruction access to the condition code left by previous instructions. </p>\n<p>As of GCC version 4.5, <code>asm goto</code> may be used to have the assembly jump to one or more C labels. In this form, a fifth section after the clobber list contains a list of all C labels to which the assembly may jump. Each label operand is implicitly self-named. The <code>asm</code> is also assumed to fall through to the next statement. </p>\n<p>This form of <code>asm</code> is restricted to not have outputs. This is due to a internal restriction in the compiler that control transfer instructions cannot have outputs. This restriction on <code>asm goto</code> may be lifted in some future version of the compiler. In the meantime, <code>asm goto</code> may include a memory clobber, and so leave outputs in memory. </p>\n<pre class=\"smallexample\">int frob(int x)\n{\n  int y;\n  asm goto (\"frob %%r5, %1; jc %l[error]; mov (%2), %%r5\"\n            : : \"r\"(x), \"r\"(&amp;y) : \"r5\", \"memory\" : error);\n  return y;\n error:\n  return -1;\n}</pre> <p class=\"noindent\">In this (inefficient) example, the <code>frob</code> instruction sets the carry bit to indicate an error. The <code>jc</code> instruction detects this and branches to the <code>error</code> label. Finally, the output of the <code>frob</code> instruction (<code>%r5</code>) is stored into the memory for variable <code>y</code>, which is later read by the <code>return</code> statement. </p>\n<pre class=\"smallexample\">void doit(void)\n{\n  int i = 0;\n  asm goto (\"mfsr %%r1, 123; jmp %%r1;\"\n            \".pushsection doit_table;\"\n            \".long %l0, %l1, %l2, %l3;\"\n            \".popsection\"\n            : : : \"r1\" : label1, label2, label3, label4);\n  __builtin_unreachable ();\n\n label1:\n  f1();\n  return;\n label2:\n  f2();\n  return;\n label3:\n  i = 1;\n label4:\n  f3(i);\n}</pre> <p class=\"noindent\">In this (also inefficient) example, the <code>mfsr</code> instruction reads an address from some out-of-band machine register, and the following <code>jmp</code> instruction branches to that address. The address read by the <code>mfsr</code> instruction is assumed to have been previously set via some application-specific mechanism to be one of the four values stored in the <code>doit_table</code> section. Finally, the <code>asm</code> is followed by a call to <code>__builtin_unreachable</code> to indicate that the <code>asm</code> does not in fact fall through. </p>\n<pre class=\"smallexample\">#define TRACE1(NUM)                         \\\n  do {                                      \\\n    asm goto (\"0: nop;\"                     \\\n              \".pushsection trace_table;\"   \\\n              \".long 0b, %l0;\"              \\\n              \".popsection\"                 \\\n              : : : : trace#NUM);           \\\n    if (0) { trace#NUM: trace(); }          \\\n  } while (0)\n#define TRACE  TRACE1(__COUNTER__)</pre> <p class=\"noindent\">In this example (which in fact inspired the <code>asm goto</code> feature) we want on rare occasions to call the <code>trace</code> function; on other occasions we'd like to keep the overhead to the absolute minimum. The normal code path consists of a single <code>nop</code> instruction. However, we record the address of this <code>nop</code> together with the address of a label that calls the <code>trace</code> function. This allows the <code>nop</code> instruction to be patched at run time to be an unconditional branch to the stored label. It is assumed that an optimizing compiler moves the labeled block out of line, to optimize the fall through path from the <code>asm</code>. </p>\n<p>If you are writing a header file that should be includable in ISO C programs, write <code>__asm__</code> instead of <code>asm</code>. See <a href=\"alternate-keywords#Alternate-Keywords\">Alternate Keywords</a>. </p>\n<h2 class=\"subsection\">6.41.1 Size of an <code>asm</code>\n</h2> <p>Some targets require that GCC track the size of each instruction used in order to generate correct code. Because the final length of an <code>asm</code> is only known by the assembler, GCC must make an estimate as to how big it will be. The estimate is formed by counting the number of statements in the pattern of the <code>asm</code> and multiplying that by the length of the longest instruction on that processor. Statements in the <code>asm</code> are identified by newline characters and whatever statement separator characters are supported by the assembler; on most processors this is the ‘<code>;</code>’ character. </p>\n<p>Normally, GCC's estimate is perfectly adequate to ensure that correct code is generated, but it is possible to confuse the compiler if you use pseudo instructions or assembler macros that expand into multiple real instructions or if you use assembler directives that expand to more space in the object file than is needed for a single instruction. If this happens then the assembler produces a diagnostic saying that a label is unreachable. </p>\n<h2 class=\"subsection\">6.41.2 i386 floating-point asm operands</h2> <p>On i386 targets, there are several rules on the usage of stack-like registers in the operands of an <code>asm</code>. These rules apply only to the operands that are stack-like registers: </p>\n<ol type=\"1\" start=\"1\"> <li>Given a set of input registers that die in an <code>asm</code>, it is necessary to know which are implicitly popped by the <code>asm</code>, and which must be explicitly popped by GCC. <p>An input register that is implicitly popped by the <code>asm</code> must be explicitly clobbered, unless it is constrained to match an output operand. </p>\n</li>\n<li>For any input register that is implicitly popped by an <code>asm</code>, it is necessary to know how to adjust the stack to compensate for the pop. If any non-popped input is closer to the top of the reg-stack than the implicitly popped register, it would not be possible to know what the stack looked like—it's not clear how the rest of the stack “slides up”. <p>All implicitly popped input registers must be closer to the top of the reg-stack than any input that is not implicitly popped. </p>\n<p>It is possible that if an input dies in an <code>asm</code>, the compiler might use the input register for an output reload. Consider this example: </p>\n<pre class=\"smallexample\">asm (\"foo\" : \"=t\" (a) : \"f\" (b));</pre> <p class=\"noindent\">This code says that input <code>b</code> is not popped by the <code>asm</code>, and that the <code>asm</code> pushes a result onto the reg-stack, i.e., the stack is one deeper after the <code>asm</code> than it was before. But, it is possible that reload may think that it can use the same register for both the input and the output. </p>\n<p>To prevent this from happening, if any input operand uses the <code>f</code> constraint, all output register constraints must use the <code>&amp;</code> early-clobber modifier. </p>\n<p>The example above would be correctly written as: </p>\n<pre class=\"smallexample\">asm (\"foo\" : \"=&amp;t\" (a) : \"f\" (b));</pre> </li>\n<li>Some operands need to be in particular places on the stack. All output operands fall in this category—GCC has no other way to know which registers the outputs appear in unless you indicate this in the constraints. <p>Output operands must specifically indicate which register an output appears in after an <code>asm</code>. <code>=f</code> is not allowed: the operand constraints must select a class with a single register. </p>\n</li>\n<li>Output operands may not be “inserted” between existing stack registers. Since no 387 opcode uses a read/write operand, all output operands are dead before the <code>asm</code>, and are pushed by the <code>asm</code>. It makes no sense to push anywhere but the top of the reg-stack. <p>Output operands must start at the top of the reg-stack: output operands may not “skip” a register. </p>\n</li>\n<li>Some <code>asm</code> statements may need extra stack space for internal calculations. This can be guaranteed by clobbering stack registers unrelated to the inputs and outputs. </li>\n</ol> <p>Here are a couple of reasonable <code>asm</code>s to want to write. This <code>asm</code> takes one input, which is internally popped, and produces two outputs. </p>\n<pre class=\"smallexample\">asm (\"fsincos\" : \"=t\" (cos), \"=u\" (sin) : \"0\" (inp));</pre> <p class=\"noindent\">This <code>asm</code> takes two inputs, which are popped by the <code>fyl2xp1</code> opcode, and replaces them with one output. The <code>st(1)</code> clobber is necessary for the compiler to know that <code>fyl2xp1</code> pops both inputs. </p>\n<pre class=\"smallexample\">asm (\"fyl2xp1\" : \"=t\" (result) : \"0\" (x), \"u\" (y) : \"st(1)\");</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Extended-Asm.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Extended-Asm.html</a>\n  </p>\n</div>\n","constraints":"<h1 class=\"section\" id=\"Constraints\">6.42 Constraints for <code>asm</code> Operands</h1> <p> Here are specific details on what constraint letters you can use with <code>asm</code> operands. Constraints can say whether an operand may be in a register, and which kinds of register; whether the operand can be a memory reference, and which kinds of address; whether the operand may be an immediate constant, and which possible values it may have. Constraints can also require two operands to match. Side-effects aren't allowed in operands of inline <code>asm</code>, unless ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’ constraints are used, because there is no guarantee that the side-effects will happen exactly once in an instruction that can update the addressing register. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"simple-constraints#Simple-Constraints\">Simple Constraints</a>: Basic use of constraints. </li>\n<li>\n<a accesskey=\"2\" href=\"multi_002dalternative#Multi_002dAlternative\">Multi-Alternative</a>: When an insn has two alternative constraint-patterns. </li>\n<li>\n<a accesskey=\"3\" href=\"modifiers#Modifiers\">Modifiers</a>: More precise control over effects of constraints. </li>\n<li>\n<a accesskey=\"4\" href=\"machine-constraints#Machine-Constraints\">Machine Constraints</a>: Special constraints for some particular machines. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Constraints.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Constraints.html</a>\n  </p>\n</div>\n","simple-constraints":"<h1 class=\"subsection\" id=\"Simple-Constraints\">6.42.1 Simple Constraints</h1> <p> The simplest kind of constraint is a string full of letters, each of which describes one kind of operand that is permitted. Here are the letters that are allowed: </p>\n<dl> <dt>whitespace</dt>\n<dd>Whitespace characters are ignored and can be inserted at any position except the first. This enables each alternative for different operands to be visually aligned in the machine description even if they have different number of constraints and modifiers. \n</dd>\n<dt>‘<code>m</code>’</dt>\n<dd>A memory operand is allowed, with any kind of address that the machine supports in general. Note that the letter used for the general memory constraint can be re-defined by a back end using the <code>TARGET_MEM_CONSTRAINT</code> macro. \n</dd>\n<dt>‘<code>o</code>’</dt>\n<dd>A memory operand is allowed, but only if the address is offsettable. This means that adding a small integer (actually, the width in bytes of the operand, as determined by its machine mode) may be added to the address and the result is also a valid memory address. <p>For example, an address which is constant is offsettable; so is an address that is the sum of a register and a constant (as long as a slightly larger constant is also within the range of address-offsets supported by the machine); but an autoincrement or autodecrement address is not offsettable. More complicated indirect/indexed addresses may or may not be offsettable depending on the other addressing modes that the machine supports. </p>\n<p>Note that in an output operand which can be matched by another operand, the constraint letter ‘<code>o</code>’ is valid only when accompanied by both ‘<code>&lt;</code>’ (if the target machine has predecrement addressing) and ‘<code>&gt;</code>’ (if the target machine has preincrement addressing). </p>\n\n</dd>\n<dt>‘<code>V</code>’</dt>\n<dd>A memory operand that is not offsettable. In other words, anything that would fit the ‘<code>m</code>’ constraint but not the ‘<code>o</code>’ constraint. \n</dd>\n<dt>‘<code>&lt;</code>’</dt>\n<dd>A memory operand with autodecrement addressing (either predecrement or postdecrement) is allowed. In inline <code>asm</code> this constraint is only allowed if the operand is used exactly once in an instruction that can handle the side-effects. Not using an operand with ‘<code>&lt;</code>’ in constraint string in the inline <code>asm</code> pattern at all or using it in multiple instructions isn't valid, because the side-effects wouldn't be performed or would be performed more than once. Furthermore, on some targets the operand with ‘<code>&lt;</code>’ in constraint string must be accompanied by special instruction suffixes like <code>%U0</code> instruction suffix on PowerPC or <code>%P0</code> on IA-64. \n</dd>\n<dt>‘<code>&gt;</code>’</dt>\n<dd>A memory operand with autoincrement addressing (either preincrement or postincrement) is allowed. In inline <code>asm</code> the same restrictions as for ‘<code>&lt;</code>’ apply. \n</dd>\n<dt>‘<code>r</code>’</dt>\n<dd>A register operand is allowed provided that it is in a general register. \n</dd>\n<dt>‘<code>i</code>’</dt>\n<dd>An immediate integer operand (one with constant value) is allowed. This includes symbolic constants whose values will be known only at assembly time or later. \n</dd>\n<dt>‘<code>n</code>’</dt>\n<dd>An immediate integer operand with a known numeric value is allowed. Many systems cannot support assembly-time constants for operands less than a word wide. Constraints for these operands should use ‘<code>n</code>’ rather than ‘<code>i</code>’. \n</dd>\n<dt>‘<code>I</code>’, ‘<code>J</code>’, ‘<code>K</code>’, <small class=\"dots\">...</small> ‘<code>P</code>’</dt>\n<dd>Other letters in the range ‘<code>I</code>’ through ‘<code>P</code>’ may be defined in a machine-dependent fashion to permit immediate integer operands with explicit integer values in specified ranges. For example, on the 68000, ‘<code>I</code>’ is defined to stand for the range of values 1 to 8. This is the range permitted as a shift count in the shift instructions. \n</dd>\n<dt>‘<code>E</code>’</dt>\n<dd>An immediate floating operand (expression code <code>const_double</code>) is allowed, but only if the target floating point format is the same as that of the host machine (on which the compiler is running). \n</dd>\n<dt>‘<code>F</code>’</dt>\n<dd>An immediate floating operand (expression code <code>const_double</code> or <code>const_vector</code>) is allowed. \n</dd>\n<dt>‘<code>G</code>’, ‘<code>H</code>’</dt>\n<dd>‘<code>G</code>’ and ‘<code>H</code>’ may be defined in a machine-dependent fashion to permit immediate floating operands in particular ranges of values. \n</dd>\n<dt>‘<code>s</code>’</dt>\n<dd>An immediate integer operand whose value is not an explicit integer is allowed. <p>This might appear strange; if an insn allows a constant operand with a value not known at compile time, it certainly must allow any known value. So why use ‘<code>s</code>’ instead of ‘<code>i</code>’? Sometimes it allows better code to be generated. </p>\n<p>For example, on the 68000 in a fullword instruction it is possible to use an immediate operand; but if the immediate value is between −128 and 127, better code results from loading the value into a register and using the register. This is because the load into the register can be done with a ‘<code>moveq</code>’ instruction. We arrange for this to happen by defining the letter ‘<code>K</code>’ to mean “any integer outside the range −128 to 127”, and then specifying ‘<code>Ks</code>’ in the operand constraints. </p>\n\n</dd>\n<dt>‘<code>g</code>’</dt>\n<dd>Any register, memory or immediate integer operand is allowed, except for registers that are not general registers. \n</dd>\n<dt>‘<code>X</code>’</dt>\n<dd>Any operand whatsoever is allowed. \n</dd>\n<dt>‘<code>0</code>’, ‘<code>1</code>’, ‘<code>2</code>’, <small class=\"dots\">...</small> ‘<code>9</code>’</dt>\n<dd>An operand that matches the specified operand number is allowed. If a digit is used together with letters within the same alternative, the digit should come last. <p>This number is allowed to be more than a single digit. If multiple digits are encountered consecutively, they are interpreted as a single decimal integer. There is scant chance for ambiguity, since to-date it has never been desirable that ‘<code>10</code>’ be interpreted as matching either operand 1 <em>or</em> operand 0. Should this be desired, one can use multiple alternatives instead. </p>\n<p>This is called a matching constraint and what it really means is that the assembler has only a single operand that fills two roles which <code>asm</code> distinguishes. For example, an add instruction uses two input operands and an output operand, but on most CISC machines an add instruction really has only two operands, one of them an input-output operand: </p>\n<pre class=\"smallexample\">addl #35,r12</pre> <p>Matching constraints are used in these circumstances. More precisely, the two operands that match must include one input-only operand and one output-only operand. Moreover, the digit must be a smaller number than the number of the operand that uses it in the constraint. </p>\n\n</dd>\n<dt>‘<code>p</code>’</dt>\n<dd>An operand that is a valid memory address is allowed. This is for “load address” and “push address” instructions. <p>‘<code>p</code>’ in the constraint must be accompanied by <code>address_operand</code> as the predicate in the <code>match_operand</code>. This predicate interprets the mode specified in the <code>match_operand</code> as the mode of the memory reference for which the address would be valid. </p>\n\n</dd>\n<dt><var>other-letters</var></dt>\n<dd>Other letters can be defined in machine-dependent fashion to stand for particular classes of registers or other arbitrary operand types. ‘<code>d</code>’, ‘<code>a</code>’ and ‘<code>f</code>’ are defined on the 68000/68020 to stand for data, address and floating point registers. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Simple-Constraints.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Simple-Constraints.html</a>\n  </p>\n</div>\n","multi_002dalternative":"<h1 class=\"subsection\" id=\"Multi_002dAlternative\">6.42.2 Multiple Alternative Constraints</h1> <p> Sometimes a single instruction has multiple alternative sets of possible operands. For example, on the 68000, a logical-or instruction can combine register or an immediate value into memory, or it can combine any kind of operand into a register; but it cannot combine one memory location into another. </p>\n<p>These constraints are represented as multiple alternatives. An alternative can be described by a series of letters for each operand. The overall constraint for an operand is made from the letters for this operand from the first alternative, a comma, the letters for this operand from the second alternative, a comma, and so on until the last alternative.  </p>\n<p>If all the operands fit any one alternative, the instruction is valid. Otherwise, for each alternative, the compiler counts how many instructions must be added to copy the operands so that that alternative applies. The alternative requiring the least copying is chosen. If two alternatives need the same amount of copying, the one that comes first is chosen. These choices can be altered with the ‘<code>?</code>’ and ‘<code>!</code>’ characters:   </p>\n<dl>\n<dt><code>?</code></dt>\n<dd>Disparage slightly the alternative that the ‘<code>?</code>’ appears in, as a choice when no alternative applies exactly. The compiler regards this alternative as one unit more costly for each ‘<code>?</code>’ that appears in it. \n</dd>\n<dt><code>!</code></dt>\n<dd>Disparage severely the alternative that the ‘<code>!</code>’ appears in. This alternative can still be used if it fits without reloading, but if reloading is needed, some other alternative will be used. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Multi_002dAlternative.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Multi_002dAlternative.html</a>\n  </p>\n</div>\n","modifiers":"<h1 class=\"subsection\" id=\"Modifiers\">6.42.3 Constraint Modifier Characters</h1> <p>  Here are constraint modifier characters.  </p>\n<dl>\n<dt>‘<code>=</code>’</dt>\n<dd>Means that this operand is write-only for this instruction: the previous value is discarded and replaced by output data. \n</dd>\n<dt>‘<code>+</code>’</dt>\n<dd>Means that this operand is both read and written by the instruction. <p>When the compiler fixes up the operands to satisfy the constraints, it needs to know which operands are inputs to the instruction and which are outputs from it. ‘<code>=</code>’ identifies an output; ‘<code>+</code>’ identifies an operand that is both input and output; all other operands are assumed to be input only. </p>\n<p>If you specify ‘<code>=</code>’ or ‘<code>+</code>’ in a constraint, you put it in the first character of the constraint string. </p>\n\n</dd>\n<dt>‘<code>&amp;</code>’</dt>\n<dd>Means (in a particular alternative) that this operand is an earlyclobber operand, which is modified before the instruction is finished using the input operands. Therefore, this operand may not lie in a register that is used as an input operand or as part of any memory address. <p>‘<code>&amp;</code>’ applies only to the alternative in which it is written. In constraints with multiple alternatives, sometimes one alternative requires ‘<code>&amp;</code>’ while others do not. See, for example, the ‘<code>movdf</code>’ insn of the 68000. </p>\n<p>An input operand can be tied to an earlyclobber operand if its only use as an input occurs before the early result is written. Adding alternatives of this form often allows GCC to produce better code when only some of the inputs can be affected by the earlyclobber. See, for example, the ‘<code>mulsi3</code>’ insn of the ARM. </p>\n<p>‘<code>&amp;</code>’ does not obviate the need to write ‘<code>=</code>’. </p>\n\n</dd>\n<dt>‘<code>%</code>’</dt>\n<dd>Declares the instruction to be commutative for this operand and the following operand. This means that the compiler may interchange the two operands if that is the cheapest way to make all operands fit the constraints. GCC can only handle one commutative pair in an asm; if you use more, the compiler may fail. Note that you need not use the modifier if the two alternatives are strictly identical; this would only waste time in the reload pass. The modifier is not operational after register allocation, so the result of <code>define_peephole2</code> and <code>define_split</code>s performed after reload cannot rely on ‘<code>%</code>’ to make the intended insn match. \n</dd>\n<dt>‘<code>#</code>’</dt>\n<dd>Says that all following characters, up to the next comma, are to be ignored as a constraint. They are significant only for choosing register preferences. \n</dd>\n<dt>‘<code>*</code>’</dt>\n<dd>Says that the following character should be ignored when choosing register preferences. ‘<code>*</code>’ has no effect on the meaning of the constraint as a constraint, and no effect on reloading. For LRA ‘<code>*</code>’ additionally disparages slightly the alternative if the following character matches the operand. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Modifiers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Modifiers.html</a>\n  </p>\n</div>\n","machine-constraints":"<h1 class=\"subsection\" id=\"Machine-Constraints\">6.42.4 Constraints for Particular Machines</h1> <p> Whenever possible, you should use the general-purpose constraint letters in <code>asm</code> arguments, since they will convey meaning more readily to people reading your code. Failing that, use the constraint letters that usually have very similar meanings across architectures. The most commonly used constraints are ‘<code>m</code>’ and ‘<code>r</code>’ (for memory and general-purpose registers respectively; see <a href=\"simple-constraints#Simple-Constraints\">Simple Constraints</a>), and ‘<code>I</code>’, usually the letter indicating the most common immediate-constant format. </p>\n<p>Each architecture defines additional constraints. These constraints are used by the compiler itself for instruction generation, as well as for <code>asm</code> statements; therefore, some of the constraints are not particularly useful for <code>asm</code>. Here is a summary of some of the machine-dependent constraints available on some particular machines; it includes both constraints that are useful for <code>asm</code> and constraints that aren't. The compiler source file mentioned in the table heading for each architecture is the definitive reference for the meanings of that architecture's constraints. </p>\n<dl> <dt>AArch64 family—<code>config/aarch64/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>k</code></dt>\n<dd>The stack pointer register (<code>SP</code>) </dd>\n<dt><code>w</code></dt>\n<dd>Floating point or SIMD vector register </dd>\n<dt><code>I</code></dt>\n<dd>Integer constant that is valid as an immediate operand in an <code>ADD</code> instruction </dd>\n<dt><code>J</code></dt>\n<dd>Integer constant that is valid as an immediate operand in a <code>SUB</code> instruction (once negated) </dd>\n<dt><code>K</code></dt>\n<dd>Integer constant that can be used with a 32-bit logical instruction </dd>\n<dt><code>L</code></dt>\n<dd>Integer constant that can be used with a 64-bit logical instruction </dd>\n<dt><code>M</code></dt>\n<dd>Integer constant that is valid as an immediate operand in a 32-bit <code>MOV</code> pseudo instruction. The <code>MOV</code> may be assembled to one of several different machine instructions depending on the value </dd>\n<dt><code>N</code></dt>\n<dd>Integer constant that is valid as an immediate operand in a 64-bit <code>MOV</code> pseudo instruction </dd>\n<dt><code>S</code></dt>\n<dd>An absolute symbolic address or a label reference </dd>\n<dt><code>Y</code></dt>\n<dd>Floating point constant zero </dd>\n<dt><code>Z</code></dt>\n<dd>Integer constant zero </dd>\n<dt><code>Ush</code></dt>\n<dd>The high part (bits 12 and upwards) of the pc-relative address of a symbol within 4GB of the instruction </dd>\n<dt><code>Q</code></dt>\n<dd>A memory address which uses a single base register with no offset </dd>\n<dt><code>Ump</code></dt>\n<dd>A memory address suitable for a load/store pair instruction in SI, DI, SF and DF modes </dd>\n</dl> </dd>\n<dt>ARC —<code>config/arc/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>q</code></dt>\n<dd>Registers usable in ARCompact 16-bit instructions: <code>r0</code>-<code>r3</code>, <code>r12</code>-<code>r15</code>. This constraint can only match when the <code>-mq</code> option is in effect. </dd>\n<dt><code>e</code></dt>\n<dd>Registers usable as base-regs of memory addresses in ARCompact 16-bit memory instructions: <code>r0</code>-<code>r3</code>, <code>r12</code>-<code>r15</code>, <code>sp</code>. This constraint can only match when the <code>-mq</code> option is in effect. </dd>\n<dt><code>D</code></dt>\n<dd>ARC FPX (dpfp) 64-bit registers. <code>D0</code>, <code>D1</code>. </dd>\n<dt><code>I</code></dt>\n<dd>A signed 12-bit integer constant. </dd>\n<dt><code>Cal</code></dt>\n<dd>constant for arithmetic/logical operations. This might be any constant that can be put into a long immediate by the assmbler or linker without involving a PIC relocation. </dd>\n<dt><code>K</code></dt>\n<dd>A 3-bit unsigned integer constant. </dd>\n<dt><code>L</code></dt>\n<dd>A 6-bit unsigned integer constant. </dd>\n<dt><code>CnL</code></dt>\n<dd>One's complement of a 6-bit unsigned integer constant. </dd>\n<dt><code>CmL</code></dt>\n<dd>Two's complement of a 6-bit unsigned integer constant. </dd>\n<dt><code>M</code></dt>\n<dd>A 5-bit unsigned integer constant. </dd>\n<dt><code>O</code></dt>\n<dd>A 7-bit unsigned integer constant. </dd>\n<dt><code>P</code></dt>\n<dd>A 8-bit unsigned integer constant. </dd>\n<dt><code>H</code></dt>\n<dd>Any const_double value. </dd>\n</dl> </dd>\n<dt>ARM family—<code>config/arm/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>w</code></dt>\n<dd>VFP floating-point register </dd>\n<dt><code>G</code></dt>\n<dd>The floating-point constant 0.0 </dd>\n<dt><code>I</code></dt>\n<dd>Integer that is valid as an immediate operand in a data processing instruction. That is, an integer in the range 0 to 255 rotated by a multiple of 2 </dd>\n<dt><code>J</code></dt>\n<dd>Integer in the range −4095 to 4095 </dd>\n<dt><code>K</code></dt>\n<dd>Integer that satisfies constraint ‘<code>I</code>’ when inverted (ones complement) </dd>\n<dt><code>L</code></dt>\n<dd>Integer that satisfies constraint ‘<code>I</code>’ when negated (twos complement) </dd>\n<dt><code>M</code></dt>\n<dd>Integer in the range 0 to 32 </dd>\n<dt><code>Q</code></dt>\n<dd>A memory reference where the exact address is in a single register (`‘<code>m</code>’' is preferable for <code>asm</code> statements) </dd>\n<dt><code>R</code></dt>\n<dd>An item in the constant pool </dd>\n<dt><code>S</code></dt>\n<dd>A symbol in the text segment of the current file </dd>\n<dt><code>Uv</code></dt>\n<dd>A memory reference suitable for VFP load/store insns (reg+constant offset) </dd>\n<dt><code>Uy</code></dt>\n<dd>A memory reference suitable for iWMMXt load/store instructions. </dd>\n<dt><code>Uq</code></dt>\n<dd>A memory reference suitable for the ARMv4 ldrsb instruction. </dd>\n</dl> </dd>\n<dt>AVR family—<code>config/avr/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>l</code></dt>\n<dd>Registers from r0 to r15 </dd>\n<dt><code>a</code></dt>\n<dd>Registers from r16 to r23 </dd>\n<dt><code>d</code></dt>\n<dd>Registers from r16 to r31 </dd>\n<dt><code>w</code></dt>\n<dd>Registers from r24 to r31. These registers can be used in ‘<code>adiw</code>’ command </dd>\n<dt><code>e</code></dt>\n<dd>Pointer register (r26–r31) </dd>\n<dt><code>b</code></dt>\n<dd>Base pointer register (r28–r31) </dd>\n<dt><code>q</code></dt>\n<dd>Stack pointer register (SPH:SPL) </dd>\n<dt><code>t</code></dt>\n<dd>Temporary register r0 </dd>\n<dt><code>x</code></dt>\n<dd>Register pair X (r27:r26) </dd>\n<dt><code>y</code></dt>\n<dd>Register pair Y (r29:r28) </dd>\n<dt><code>z</code></dt>\n<dd>Register pair Z (r31:r30) </dd>\n<dt><code>I</code></dt>\n<dd>Constant greater than −1, less than 64 </dd>\n<dt><code>J</code></dt>\n<dd>Constant greater than −64, less than 1 </dd>\n<dt><code>K</code></dt>\n<dd>Constant integer 2 </dd>\n<dt><code>L</code></dt>\n<dd>Constant integer 0 </dd>\n<dt><code>M</code></dt>\n<dd>Constant that fits in 8 bits </dd>\n<dt><code>N</code></dt>\n<dd>Constant integer −1 </dd>\n<dt><code>O</code></dt>\n<dd>Constant integer 8, 16, or 24 </dd>\n<dt><code>P</code></dt>\n<dd>Constant integer 1 </dd>\n<dt><code>G</code></dt>\n<dd>A floating point constant 0.0 </dd>\n<dt><code>Q</code></dt>\n<dd>A memory address based on Y or Z pointer with displacement. </dd>\n</dl> </dd>\n<dt>Epiphany—<code>config/epiphany/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>U16</code></dt>\n<dd>An unsigned 16-bit constant. </dd>\n<dt><code>K</code></dt>\n<dd>An unsigned 5-bit constant. </dd>\n<dt><code>L</code></dt>\n<dd>A signed 11-bit constant. </dd>\n<dt><code>Cm1</code></dt>\n<dd>A signed 11-bit constant added to −1. Can only match when the <samp><span class=\"option\">-m1reg-</span><var>reg</var></samp> option is active. </dd>\n<dt><code>Cl1</code></dt>\n<dd>Left-shift of −1, i.e., a bit mask with a block of leading ones, the rest being a block of trailing zeroes. Can only match when the <samp><span class=\"option\">-m1reg-</span><var>reg</var></samp> option is active. </dd>\n<dt><code>Cr1</code></dt>\n<dd>Right-shift of −1, i.e., a bit mask with a trailing block of ones, the rest being zeroes. Or to put it another way, one less than a power of two. Can only match when the <samp><span class=\"option\">-m1reg-</span><var>reg</var></samp> option is active. </dd>\n<dt><code>Cal</code></dt>\n<dd>Constant for arithmetic/logical operations. This is like <code>i</code>, except that for position independent code, no symbols / expressions needing relocations are allowed. </dd>\n<dt><code>Csy</code></dt>\n<dd>Symbolic constant for call/jump instruction. </dd>\n<dt><code>Rcs</code></dt>\n<dd>The register class usable in short insns. This is a register class constraint, and can thus drive register allocation. This constraint won't match unless <code>-mprefer-short-insn-regs</code> is in effect. </dd>\n<dt><code>Rsc</code></dt>\n<dd>The the register class of registers that can be used to hold a sibcall call address. I.e., a caller-saved register. </dd>\n<dt><code>Rct</code></dt>\n<dd>Core control register class. </dd>\n<dt><code>Rgs</code></dt>\n<dd>The register group usable in short insns. This constraint does not use a register class, so that it only passively matches suitable registers, and doesn't drive register allocation. </dd>\n<dt><code>Rra</code></dt>\n<dd>Matches the return address if it can be replaced with the link register. </dd>\n<dt><code>Rcc</code></dt>\n<dd>Matches the integer condition code register. </dd>\n<dt><code>Sra</code></dt>\n<dd>Matches the return address if it is in a stack slot. </dd>\n<dt><code>Cfm</code></dt>\n<dd>Matches control register values to switch fp mode, which are encapsulated in <code>UNSPEC_FP_MODE</code>. </dd>\n</dl> </dd>\n<dt>CR16 Architecture—<code>config/cr16/cr16.h</code>\n</dt>\n<dd> <dl> <dt><code>b</code></dt>\n<dd>Registers from r0 to r14 (registers without stack pointer) </dd>\n<dt><code>t</code></dt>\n<dd>Register from r0 to r11 (all 16-bit registers) </dd>\n<dt><code>p</code></dt>\n<dd>Register from r12 to r15 (all 32-bit registers) </dd>\n<dt><code>I</code></dt>\n<dd>Signed constant that fits in 4 bits </dd>\n<dt><code>J</code></dt>\n<dd>Signed constant that fits in 5 bits </dd>\n<dt><code>K</code></dt>\n<dd>Signed constant that fits in 6 bits </dd>\n<dt><code>L</code></dt>\n<dd>Unsigned constant that fits in 4 bits </dd>\n<dt><code>M</code></dt>\n<dd>Signed constant that fits in 32 bits </dd>\n<dt><code>N</code></dt>\n<dd>Check for 64 bits wide constants for add/sub instructions </dd>\n<dt><code>G</code></dt>\n<dd>Floating point constant that is legal for store immediate </dd>\n</dl> </dd>\n<dt>Hewlett-Packard PA-RISC—<code>config/pa/pa.h</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>General register 1 </dd>\n<dt><code>f</code></dt>\n<dd>Floating point register </dd>\n<dt><code>q</code></dt>\n<dd>Shift amount register </dd>\n<dt><code>x</code></dt>\n<dd>Floating point register (deprecated) </dd>\n<dt><code>y</code></dt>\n<dd>Upper floating point register (32-bit), floating point register (64-bit) </dd>\n<dt><code>Z</code></dt>\n<dd>Any register </dd>\n<dt><code>I</code></dt>\n<dd>Signed 11-bit integer constant </dd>\n<dt><code>J</code></dt>\n<dd>Signed 14-bit integer constant </dd>\n<dt><code>K</code></dt>\n<dd>Integer constant that can be deposited with a <code>zdepi</code> instruction </dd>\n<dt><code>L</code></dt>\n<dd>Signed 5-bit integer constant </dd>\n<dt><code>M</code></dt>\n<dd>Integer constant 0 </dd>\n<dt><code>N</code></dt>\n<dd>Integer constant that can be loaded with a <code>ldil</code> instruction </dd>\n<dt><code>O</code></dt>\n<dd>Integer constant whose value plus one is a power of 2 </dd>\n<dt><code>P</code></dt>\n<dd>Integer constant that can be used for <code>and</code> operations in <code>depi</code> and <code>extru</code> instructions </dd>\n<dt><code>S</code></dt>\n<dd>Integer constant 31 </dd>\n<dt><code>U</code></dt>\n<dd>Integer constant 63 </dd>\n<dt><code>G</code></dt>\n<dd>Floating-point constant 0.0 </dd>\n<dt><code>A</code></dt>\n<dd>A <code>lo_sum</code> data-linkage-table memory operand </dd>\n<dt><code>Q</code></dt>\n<dd>A memory operand that can be used as the destination operand of an integer store instruction </dd>\n<dt><code>R</code></dt>\n<dd>A scaled or unscaled indexed memory operand </dd>\n<dt><code>T</code></dt>\n<dd>A memory operand for floating-point loads and stores </dd>\n<dt><code>W</code></dt>\n<dd>A register indirect memory operand </dd>\n</dl> </dd>\n<dt>picoChip family—<code>picochip.h</code>\n</dt>\n<dd> <dl> <dt><code>k</code></dt>\n<dd>Stack register. </dd>\n<dt><code>f</code></dt>\n<dd>Pointer register. A register which can be used to access memory without supplying an offset. Any other register can be used to access memory, but will need a constant offset. In the case of the offset being zero, it is more efficient to use a pointer register, since this reduces code size. </dd>\n<dt><code>t</code></dt>\n<dd>A twin register. A register which may be paired with an adjacent register to create a 32-bit register. </dd>\n<dt><code>a</code></dt>\n<dd>Any absolute memory address (e.g., symbolic constant, symbolic constant + offset). </dd>\n<dt><code>I</code></dt>\n<dd>4-bit signed integer. </dd>\n<dt><code>J</code></dt>\n<dd>4-bit unsigned integer. </dd>\n<dt><code>K</code></dt>\n<dd>8-bit signed integer. </dd>\n<dt><code>M</code></dt>\n<dd>Any constant whose absolute value is no greater than 4-bits. </dd>\n<dt><code>N</code></dt>\n<dd>10-bit signed integer </dd>\n<dt><code>O</code></dt>\n<dd>16-bit signed integer. </dd>\n</dl> </dd>\n<dt>PowerPC and IBM RS6000—<code>config/rs6000/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>b</code></dt>\n<dd>Address base register </dd>\n<dt><code>d</code></dt>\n<dd>Floating point register (containing 64-bit value) </dd>\n<dt><code>f</code></dt>\n<dd>Floating point register (containing 32-bit value) </dd>\n<dt><code>v</code></dt>\n<dd>Altivec vector register </dd>\n<dt><code>wa</code></dt>\n<dd>Any VSX register if the -mvsx option was used or NO_REGS. <p>When using any of the register constraints (<code>wa</code>, <code>wd</code>, <code>wf</code>, <code>wg</code>, <code>wh</code>, <code>wi</code>, <code>wj</code>, <code>wk</code>, <code>wl</code>, <code>wm</code>, <code>ws</code>, <code>wt</code>, <code>wu</code>, <code>wv</code>, <code>ww</code>, or <code>wy</code>) that take VSX registers, you must use <code>%x&lt;n&gt;</code> in the template so that the correct register is used. Otherwise the register number output in the assembly file will be incorrect if an Altivec register is an operand of a VSX instruction that expects VSX register numbering. </p>\n<pre class=\"smallexample\">asm (\"xvadddp %x0,%x1,%x2\" : \"=wa\" (v1) : \"wa\" (v2), \"wa\" (v3));</pre> <p>is correct, but: </p>\n<pre class=\"smallexample\">asm (\"xvadddp %0,%1,%2\" : \"=wa\" (v1) : \"wa\" (v2), \"wa\" (v3));</pre> <p>is not correct. </p>\n</dd>\n<dt><code>wd</code></dt>\n<dd>VSX vector register to hold vector double data or NO_REGS. </dd>\n<dt><code>wf</code></dt>\n<dd>VSX vector register to hold vector float data or NO_REGS. </dd>\n<dt><code>wg</code></dt>\n<dd>If <code>-mmfpgpr</code> was used, a floating point register or NO_REGS. </dd>\n<dt><code>wh</code></dt>\n<dd>Floating point register if direct moves are available, or NO_REGS. </dd>\n<dt><code>wi</code></dt>\n<dd>FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS. </dd>\n<dt><code>wj</code></dt>\n<dd>FP or VSX register to hold 64-bit integers for direct moves or NO_REGS. </dd>\n<dt><code>wk</code></dt>\n<dd>FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS. </dd>\n<dt><code>wl</code></dt>\n<dd>Floating point register if the LFIWAX instruction is enabled or NO_REGS. </dd>\n<dt><code>wm</code></dt>\n<dd>VSX register if direct move instructions are enabled, or NO_REGS. </dd>\n<dt><code>wn</code></dt>\n<dd>No register (NO_REGS). </dd>\n<dt><code>wr</code></dt>\n<dd>General purpose register if 64-bit instructions are enabled or NO_REGS. </dd>\n<dt><code>ws</code></dt>\n<dd>VSX vector register to hold scalar double values or NO_REGS. </dd>\n<dt><code>wt</code></dt>\n<dd>VSX vector register to hold 128 bit integer or NO_REGS. </dd>\n<dt><code>wu</code></dt>\n<dd>Altivec register to use for float/32-bit int loads/stores or NO_REGS. </dd>\n<dt><code>wv</code></dt>\n<dd>Altivec register to use for double loads/stores or NO_REGS. </dd>\n<dt><code>ww</code></dt>\n<dd>FP or VSX register to perform float operations under <code>-mvsx</code> or NO_REGS. </dd>\n<dt><code>wx</code></dt>\n<dd>Floating point register if the STFIWX instruction is enabled or NO_REGS. </dd>\n<dt><code>wy</code></dt>\n<dd>FP or VSX register to perform ISA 2.07 float ops or NO_REGS. </dd>\n<dt><code>wz</code></dt>\n<dd>Floating point register if the LFIWZX instruction is enabled or NO_REGS. </dd>\n<dt><code>wD</code></dt>\n<dd>Int constant that is the element number of the 64-bit scalar in a vector. </dd>\n<dt><code>wQ</code></dt>\n<dd>A memory address that will work with the <code>lq</code> and <code>stq</code> instructions. </dd>\n<dt><code>h</code></dt>\n<dd>‘<code>MQ</code>’, ‘<code>CTR</code>’, or ‘<code>LINK</code>’ register </dd>\n<dt><code>q</code></dt>\n<dd>‘<code>MQ</code>’ register </dd>\n<dt><code>c</code></dt>\n<dd>‘<code>CTR</code>’ register </dd>\n<dt><code>l</code></dt>\n<dd>‘<code>LINK</code>’ register </dd>\n<dt><code>x</code></dt>\n<dd>‘<code>CR</code>’ register (condition register) number 0 </dd>\n<dt><code>y</code></dt>\n<dd>‘<code>CR</code>’ register (condition register) </dd>\n<dt><code>z</code></dt>\n<dd>‘<code>XER[CA]</code>’ carry bit (part of the XER register) </dd>\n<dt><code>I</code></dt>\n<dd>Signed 16-bit constant </dd>\n<dt><code>J</code></dt>\n<dd>Unsigned 16-bit constant shifted left 16 bits (use ‘<code>L</code>’ instead for <code>SImode</code> constants) </dd>\n<dt><code>K</code></dt>\n<dd>Unsigned 16-bit constant </dd>\n<dt><code>L</code></dt>\n<dd>Signed 16-bit constant shifted left 16 bits </dd>\n<dt><code>M</code></dt>\n<dd>Constant larger than 31 </dd>\n<dt><code>N</code></dt>\n<dd>Exact power of 2 </dd>\n<dt><code>O</code></dt>\n<dd>Zero </dd>\n<dt><code>P</code></dt>\n<dd>Constant whose negation is a signed 16-bit constant </dd>\n<dt><code>G</code></dt>\n<dd>Floating point constant that can be loaded into a register with one instruction per word </dd>\n<dt><code>H</code></dt>\n<dd>Integer/Floating point constant that can be loaded into a register using three instructions </dd>\n<dt><code>m</code></dt>\n<dd>Memory operand. Normally, <code>m</code> does not allow addresses that update the base register. If ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’ constraint is also used, they are allowed and therefore on PowerPC targets in that case it is only safe to use ‘<code>m&lt;&gt;</code>’ in an <code>asm</code> statement if that <code>asm</code> statement accesses the operand exactly once. The <code>asm</code> statement must also use ‘<samp><span class=\"samp\">%U</span><var>&lt;opno&gt;</var></samp>’ as a placeholder for the “update” flag in the corresponding load or store instruction. For example: <pre class=\"smallexample\">asm (\"st%U0 %1,%0\" : \"=m&lt;&gt;\" (mem) : \"r\" (val));</pre> <p>is correct but: </p>\n<pre class=\"smallexample\">asm (\"st %1,%0\" : \"=m&lt;&gt;\" (mem) : \"r\" (val));</pre> <p>is not. </p>\n</dd>\n<dt><code>es</code></dt>\n<dd>A “stable” memory operand; that is, one which does not include any automodification of the base register. This used to be useful when ‘<code>m</code>’ allowed automodification of the base register, but as those are now only allowed when ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’ is used, ‘<code>es</code>’ is basically the same as ‘<code>m</code>’ without ‘<code>&lt;</code>’ and ‘<code>&gt;</code>’. </dd>\n<dt><code>Q</code></dt>\n<dd>Memory operand that is an offset from a register (it is usually better to use ‘<code>m</code>’ or ‘<code>es</code>’ in <code>asm</code> statements) </dd>\n<dt><code>Z</code></dt>\n<dd>Memory operand that is an indexed or indirect from a register (it is usually better to use ‘<code>m</code>’ or ‘<code>es</code>’ in <code>asm</code> statements) </dd>\n<dt><code>R</code></dt>\n<dd>AIX TOC entry </dd>\n<dt><code>a</code></dt>\n<dd>Address operand that is an indexed or indirect from a register (‘<code>p</code>’ is preferable for <code>asm</code> statements) </dd>\n<dt><code>S</code></dt>\n<dd>Constant suitable as a 64-bit mask operand </dd>\n<dt><code>T</code></dt>\n<dd>Constant suitable as a 32-bit mask operand </dd>\n<dt><code>U</code></dt>\n<dd>System V Release 4 small data area reference </dd>\n<dt><code>t</code></dt>\n<dd>AND masks that can be performed by two rldic{l, r} instructions </dd>\n<dt><code>W</code></dt>\n<dd>Vector constant that does not require memory </dd>\n<dt><code>j</code></dt>\n<dd>Vector constant that is all zeros. </dd>\n</dl> </dd>\n<dt>Intel 386—<code>config/i386/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>R</code></dt>\n<dd>Legacy register—the eight integer registers available on all i386 processors (<code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>si</code>, <code>di</code>, <code>bp</code>, <code>sp</code>). </dd>\n<dt><code>q</code></dt>\n<dd>Any register accessible as <var>r</var><code>l</code>. In 32-bit mode, <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>; in 64-bit mode, any integer register. </dd>\n<dt><code>Q</code></dt>\n<dd>Any register accessible as <var>r</var><code>h</code>: <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>. </dd>\n<dt><code>a</code></dt>\n<dd>The <code>a</code> register. </dd>\n<dt><code>b</code></dt>\n<dd>The <code>b</code> register. </dd>\n<dt><code>c</code></dt>\n<dd>The <code>c</code> register. </dd>\n<dt><code>d</code></dt>\n<dd>The <code>d</code> register. </dd>\n<dt><code>S</code></dt>\n<dd>The <code>si</code> register. </dd>\n<dt><code>D</code></dt>\n<dd>The <code>di</code> register. </dd>\n<dt><code>A</code></dt>\n<dd>The <code>a</code> and <code>d</code> registers. This class is used for instructions that return double word results in the <code>ax:dx</code> register pair. Single word values will be allocated either in <code>ax</code> or <code>dx</code>. For example on i386 the following implements <code>rdtsc</code>: <pre class=\"smallexample\">unsigned long long rdtsc (void)\n{\n  unsigned long long tick;\n  __asm__ __volatile__(\"rdtsc\":\"=A\"(tick));\n  return tick;\n}</pre> <p>This is not correct on x86_64 as it would allocate tick in either <code>ax</code> or <code>dx</code>. You have to use the following variant instead: </p>\n<pre class=\"smallexample\">unsigned long long rdtsc (void)\n{\n  unsigned int tickl, tickh;\n  __asm__ __volatile__(\"rdtsc\":\"=a\"(tickl),\"=d\"(tickh));\n  return ((unsigned long long)tickh &lt;&lt; 32)|tickl;\n}</pre> </dd>\n<dt><code>f</code></dt>\n<dd>Any 80387 floating-point (stack) register. </dd>\n<dt><code>t</code></dt>\n<dd>Top of 80387 floating-point stack (<code>%st(0)</code>). </dd>\n<dt><code>u</code></dt>\n<dd>Second from top of 80387 floating-point stack (<code>%st(1)</code>). </dd>\n<dt><code>y</code></dt>\n<dd>Any MMX register. </dd>\n<dt><code>x</code></dt>\n<dd>Any SSE register. </dd>\n<dt><code>Yz</code></dt>\n<dd>First SSE register (<code>%xmm0</code>). </dd>\n<dt><code>I</code></dt>\n<dd>Integer constant in the range 0 <small class=\"dots\">...</small> 31, for 32-bit shifts. </dd>\n<dt><code>J</code></dt>\n<dd>Integer constant in the range 0 <small class=\"dots\">...</small> 63, for 64-bit shifts. </dd>\n<dt><code>K</code></dt>\n<dd>Signed 8-bit integer constant. </dd>\n<dt><code>L</code></dt>\n<dd>\n<code>0xFF</code> or <code>0xFFFF</code>, for andsi as a zero-extending move. </dd>\n<dt><code>M</code></dt>\n<dd>0, 1, 2, or 3 (shifts for the <code>lea</code> instruction). </dd>\n<dt><code>N</code></dt>\n<dd>Unsigned 8-bit integer constant (for <code>in</code> and <code>out</code> instructions). </dd>\n<dt><code>G</code></dt>\n<dd>Standard 80387 floating point constant. </dd>\n<dt><code>C</code></dt>\n<dd>Standard SSE floating point constant. </dd>\n<dt><code>e</code></dt>\n<dd>32-bit signed integer constant, or a symbolic reference known to fit that range (for immediate operands in sign-extending x86-64 instructions). </dd>\n<dt><code>Z</code></dt>\n<dd>32-bit unsigned integer constant, or a symbolic reference known to fit that range (for immediate operands in zero-extending x86-64 instructions). </dd>\n</dl> </dd>\n<dt>Intel IA-64—<code>config/ia64/ia64.h</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>General register <code>r0</code> to <code>r3</code> for <code>addl</code> instruction </dd>\n<dt><code>b</code></dt>\n<dd>Branch register </dd>\n<dt><code>c</code></dt>\n<dd>Predicate register (‘<code>c</code>’ as in “conditional”) </dd>\n<dt><code>d</code></dt>\n<dd>Application register residing in M-unit </dd>\n<dt><code>e</code></dt>\n<dd>Application register residing in I-unit </dd>\n<dt><code>f</code></dt>\n<dd>Floating-point register </dd>\n<dt><code>m</code></dt>\n<dd>Memory operand. If used together with ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’, the operand can have postincrement and postdecrement which require printing with ‘<code>%Pn</code>’ on IA-64. </dd>\n<dt><code>G</code></dt>\n<dd>Floating-point constant 0.0 or 1.0 </dd>\n<dt><code>I</code></dt>\n<dd>14-bit signed integer constant </dd>\n<dt><code>J</code></dt>\n<dd>22-bit signed integer constant </dd>\n<dt><code>K</code></dt>\n<dd>8-bit signed integer constant for logical instructions </dd>\n<dt><code>L</code></dt>\n<dd>8-bit adjusted signed integer constant for compare pseudo-ops </dd>\n<dt><code>M</code></dt>\n<dd>6-bit unsigned integer constant for shift counts </dd>\n<dt><code>N</code></dt>\n<dd>9-bit signed integer constant for load and store postincrements </dd>\n<dt><code>O</code></dt>\n<dd>The constant zero </dd>\n<dt><code>P</code></dt>\n<dd>0 or −1 for <code>dep</code> instruction </dd>\n<dt><code>Q</code></dt>\n<dd>Non-volatile memory for floating-point loads and stores </dd>\n<dt><code>R</code></dt>\n<dd>Integer constant in the range 1 to 4 for <code>shladd</code> instruction </dd>\n<dt><code>S</code></dt>\n<dd>Memory operand except postincrement and postdecrement. This is now roughly the same as ‘<code>m</code>’ when not used together with ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’. </dd>\n</dl> </dd>\n<dt>FRV—<code>config/frv/frv.h</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>Register in the class <code>ACC_REGS</code> (<code>acc0</code> to <code>acc7</code>). </dd>\n<dt><code>b</code></dt>\n<dd>Register in the class <code>EVEN_ACC_REGS</code> (<code>acc0</code> to <code>acc7</code>). </dd>\n<dt><code>c</code></dt>\n<dd>Register in the class <code>CC_REGS</code> (<code>fcc0</code> to <code>fcc3</code> and <code>icc0</code> to <code>icc3</code>). </dd>\n<dt><code>d</code></dt>\n<dd>Register in the class <code>GPR_REGS</code> (<code>gr0</code> to <code>gr63</code>). </dd>\n<dt><code>e</code></dt>\n<dd>Register in the class <code>EVEN_REGS</code> (<code>gr0</code> to <code>gr63</code>). Odd registers are excluded not in the class but through the use of a machine mode larger than 4 bytes. </dd>\n<dt><code>f</code></dt>\n<dd>Register in the class <code>FPR_REGS</code> (<code>fr0</code> to <code>fr63</code>). </dd>\n<dt><code>h</code></dt>\n<dd>Register in the class <code>FEVEN_REGS</code> (<code>fr0</code> to <code>fr63</code>). Odd registers are excluded not in the class but through the use of a machine mode larger than 4 bytes. </dd>\n<dt><code>l</code></dt>\n<dd>Register in the class <code>LR_REG</code> (the <code>lr</code> register). </dd>\n<dt><code>q</code></dt>\n<dd>Register in the class <code>QUAD_REGS</code> (<code>gr2</code> to <code>gr63</code>). Register numbers not divisible by 4 are excluded not in the class but through the use of a machine mode larger than 8 bytes. </dd>\n<dt><code>t</code></dt>\n<dd>Register in the class <code>ICC_REGS</code> (<code>icc0</code> to <code>icc3</code>). </dd>\n<dt><code>u</code></dt>\n<dd>Register in the class <code>FCC_REGS</code> (<code>fcc0</code> to <code>fcc3</code>). </dd>\n<dt><code>v</code></dt>\n<dd>Register in the class <code>ICR_REGS</code> (<code>cc4</code> to <code>cc7</code>). </dd>\n<dt><code>w</code></dt>\n<dd>Register in the class <code>FCR_REGS</code> (<code>cc0</code> to <code>cc3</code>). </dd>\n<dt><code>x</code></dt>\n<dd>Register in the class <code>QUAD_FPR_REGS</code> (<code>fr0</code> to <code>fr63</code>). Register numbers not divisible by 4 are excluded not in the class but through the use of a machine mode larger than 8 bytes. </dd>\n<dt><code>z</code></dt>\n<dd>Register in the class <code>SPR_REGS</code> (<code>lcr</code> and <code>lr</code>). </dd>\n<dt><code>A</code></dt>\n<dd>Register in the class <code>QUAD_ACC_REGS</code> (<code>acc0</code> to <code>acc7</code>). </dd>\n<dt><code>B</code></dt>\n<dd>Register in the class <code>ACCG_REGS</code> (<code>accg0</code> to <code>accg7</code>). </dd>\n<dt><code>C</code></dt>\n<dd>Register in the class <code>CR_REGS</code> (<code>cc0</code> to <code>cc7</code>). </dd>\n<dt><code>G</code></dt>\n<dd>Floating point constant zero </dd>\n<dt><code>I</code></dt>\n<dd>6-bit signed integer constant </dd>\n<dt><code>J</code></dt>\n<dd>10-bit signed integer constant </dd>\n<dt><code>L</code></dt>\n<dd>16-bit signed integer constant </dd>\n<dt><code>M</code></dt>\n<dd>16-bit unsigned integer constant </dd>\n<dt><code>N</code></dt>\n<dd>12-bit signed integer constant that is negative—i.e. in the range of −2048 to −1 </dd>\n<dt><code>O</code></dt>\n<dd>Constant zero </dd>\n<dt><code>P</code></dt>\n<dd>12-bit signed integer constant that is greater than zero—i.e. in the range of 1 to 2047. </dd>\n</dl> </dd>\n<dt>Blackfin family—<code>config/bfin/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>P register </dd>\n<dt><code>d</code></dt>\n<dd>D register </dd>\n<dt><code>z</code></dt>\n<dd>A call clobbered P register. </dd>\n<dt>\n<code>q</code><var>n</var>\n</dt>\n<dd>A single register. If <var>n</var> is in the range 0 to 7, the corresponding D register. If it is <code>A</code>, then the register P0. </dd>\n<dt><code>D</code></dt>\n<dd>Even-numbered D register </dd>\n<dt><code>W</code></dt>\n<dd>Odd-numbered D register </dd>\n<dt><code>e</code></dt>\n<dd>Accumulator register. </dd>\n<dt><code>A</code></dt>\n<dd>Even-numbered accumulator register. </dd>\n<dt><code>B</code></dt>\n<dd>Odd-numbered accumulator register. </dd>\n<dt><code>b</code></dt>\n<dd>I register </dd>\n<dt><code>v</code></dt>\n<dd>B register </dd>\n<dt><code>f</code></dt>\n<dd>M register </dd>\n<dt><code>c</code></dt>\n<dd>Registers used for circular buffering, i.e. I, B, or L registers. </dd>\n<dt><code>C</code></dt>\n<dd>The CC register. </dd>\n<dt><code>t</code></dt>\n<dd>LT0 or LT1. </dd>\n<dt><code>k</code></dt>\n<dd>LC0 or LC1. </dd>\n<dt><code>u</code></dt>\n<dd>LB0 or LB1. </dd>\n<dt><code>x</code></dt>\n<dd>Any D, P, B, M, I or L register. </dd>\n<dt><code>y</code></dt>\n<dd>Additional registers typically used only in prologues and epilogues: RETS, RETN, RETI, RETX, RETE, ASTAT, SEQSTAT and USP. </dd>\n<dt><code>w</code></dt>\n<dd>Any register except accumulators or CC. </dd>\n<dt><code>Ksh</code></dt>\n<dd>Signed 16 bit integer (in the range −32768 to 32767) </dd>\n<dt><code>Kuh</code></dt>\n<dd>Unsigned 16 bit integer (in the range 0 to 65535) </dd>\n<dt><code>Ks7</code></dt>\n<dd>Signed 7 bit integer (in the range −64 to 63) </dd>\n<dt><code>Ku7</code></dt>\n<dd>Unsigned 7 bit integer (in the range 0 to 127) </dd>\n<dt><code>Ku5</code></dt>\n<dd>Unsigned 5 bit integer (in the range 0 to 31) </dd>\n<dt><code>Ks4</code></dt>\n<dd>Signed 4 bit integer (in the range −8 to 7) </dd>\n<dt><code>Ks3</code></dt>\n<dd>Signed 3 bit integer (in the range −3 to 4) </dd>\n<dt><code>Ku3</code></dt>\n<dd>Unsigned 3 bit integer (in the range 0 to 7) </dd>\n<dt>\n<code>P</code><var>n</var>\n</dt>\n<dd>Constant <var>n</var>, where <var>n</var> is a single-digit constant in the range 0 to 4. </dd>\n<dt><code>PA</code></dt>\n<dd>An integer equal to one of the MACFLAG_XXX constants that is suitable for use with either accumulator. </dd>\n<dt><code>PB</code></dt>\n<dd>An integer equal to one of the MACFLAG_XXX constants that is suitable for use only with accumulator A1. </dd>\n<dt><code>M1</code></dt>\n<dd>Constant 255. </dd>\n<dt><code>M2</code></dt>\n<dd>Constant 65535. </dd>\n<dt><code>J</code></dt>\n<dd>An integer constant with exactly a single bit set. </dd>\n<dt><code>L</code></dt>\n<dd>An integer constant with all bits set except exactly one. </dd>\n<dt>\n<code>H</code> <dt><code>Q</code></dt>\n</dt>\n<dd>Any SYMBOL_REF. </dd>\n</dl> </dd>\n<dt>M32C—<code>config/m32c/m32c.c</code>\n</dt>\n<dd> <dl> <dt>\n<code>Rsp</code><dt>\n<code>Rfb</code><dt><code>Rsb</code></dt>\n</dt>\n</dt>\n<dd>‘<code>$sp</code>’, ‘<code>$fb</code>’, ‘<code>$sb</code>’. </dd>\n<dt><code>Rcr</code></dt>\n<dd>Any control register, when they're 16 bits wide (nothing if control registers are 24 bits wide) </dd>\n<dt><code>Rcl</code></dt>\n<dd>Any control register, when they're 24 bits wide. </dd>\n<dt>\n<code>R0w</code><dt>\n<code>R1w</code><dt>\n<code>R2w</code><dt><code>R3w</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>$r0, $r1, $r2, $r3. </dd>\n<dt><code>R02</code></dt>\n<dd>$r0 or $r2, or $r2r0 for 32 bit values. </dd>\n<dt><code>R13</code></dt>\n<dd>$r1 or $r3, or $r3r1 for 32 bit values. </dd>\n<dt><code>Rdi</code></dt>\n<dd>A register that can hold a 64 bit value. </dd>\n<dt><code>Rhl</code></dt>\n<dd>$r0 or $r1 (registers with addressable high/low bytes) </dd>\n<dt><code>R23</code></dt>\n<dd>$r2 or $r3 </dd>\n<dt><code>Raa</code></dt>\n<dd>Address registers </dd>\n<dt><code>Raw</code></dt>\n<dd>Address registers when they're 16 bits wide. </dd>\n<dt><code>Ral</code></dt>\n<dd>Address registers when they're 24 bits wide. </dd>\n<dt><code>Rqi</code></dt>\n<dd>Registers that can hold QI values. </dd>\n<dt><code>Rad</code></dt>\n<dd>Registers that can be used with displacements ($a0, $a1, $sb). </dd>\n<dt><code>Rsi</code></dt>\n<dd>Registers that can hold 32 bit values. </dd>\n<dt><code>Rhi</code></dt>\n<dd>Registers that can hold 16 bit values. </dd>\n<dt><code>Rhc</code></dt>\n<dd>Registers chat can hold 16 bit values, including all control registers. </dd>\n<dt><code>Rra</code></dt>\n<dd>$r0 through R1, plus $a0 and $a1. </dd>\n<dt><code>Rfl</code></dt>\n<dd>The flags register. </dd>\n<dt><code>Rmm</code></dt>\n<dd>The memory-based pseudo-registers $mem0 through $mem15. </dd>\n<dt><code>Rpi</code></dt>\n<dd>Registers that can hold pointers (16 bit registers for r8c, m16c; 24 bit registers for m32cm, m32c). </dd>\n<dt><code>Rpa</code></dt>\n<dd>Matches multiple registers in a PARALLEL to form a larger register. Used to match function return values. </dd>\n<dt><code>Is3</code></dt>\n<dd>−8 <small class=\"dots\">...</small> 7 </dd>\n<dt><code>IS1</code></dt>\n<dd>−128 <small class=\"dots\">...</small> 127 </dd>\n<dt><code>IS2</code></dt>\n<dd>−32768 <small class=\"dots\">...</small> 32767 </dd>\n<dt><code>IU2</code></dt>\n<dd>0 <small class=\"dots\">...</small> 65535 </dd>\n<dt><code>In4</code></dt>\n<dd>−8 <small class=\"dots\">...</small> −1 or 1 <small class=\"dots\">...</small> 8 </dd>\n<dt><code>In5</code></dt>\n<dd>−16 <small class=\"dots\">...</small> −1 or 1 <small class=\"dots\">...</small> 16 </dd>\n<dt><code>In6</code></dt>\n<dd>−32 <small class=\"dots\">...</small> −1 or 1 <small class=\"dots\">...</small> 32 </dd>\n<dt><code>IM2</code></dt>\n<dd>−65536 <small class=\"dots\">...</small> −1 </dd>\n<dt><code>Ilb</code></dt>\n<dd>An 8 bit value with exactly one bit set. </dd>\n<dt><code>Ilw</code></dt>\n<dd>A 16 bit value with exactly one bit set. </dd>\n<dt><code>Sd</code></dt>\n<dd>The common src/dest memory addressing modes. </dd>\n<dt><code>Sa</code></dt>\n<dd>Memory addressed using $a0 or $a1. </dd>\n<dt><code>Si</code></dt>\n<dd>Memory addressed with immediate addresses. </dd>\n<dt><code>Ss</code></dt>\n<dd>Memory addressed using the stack pointer ($sp). </dd>\n<dt><code>Sf</code></dt>\n<dd>Memory addressed using the frame base register ($fb). </dd>\n<dt><code>Ss</code></dt>\n<dd>Memory addressed using the small base register ($sb). </dd>\n<dt><code>S1</code></dt>\n<dd>$r1h </dd>\n</dl> </dd>\n<dt>MeP—<code>config/mep/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>The $sp register. </dd>\n<dt><code>b</code></dt>\n<dd>The $tp register. </dd>\n<dt><code>c</code></dt>\n<dd>Any control register. </dd>\n<dt><code>d</code></dt>\n<dd>Either the $hi or the $lo register. </dd>\n<dt><code>em</code></dt>\n<dd>Coprocessor registers that can be directly loaded ($c0-$c15). </dd>\n<dt><code>ex</code></dt>\n<dd>Coprocessor registers that can be moved to each other. </dd>\n<dt><code>er</code></dt>\n<dd>Coprocessor registers that can be moved to core registers. </dd>\n<dt><code>h</code></dt>\n<dd>The $hi register. </dd>\n<dt><code>j</code></dt>\n<dd>The $rpc register. </dd>\n<dt><code>l</code></dt>\n<dd>The $lo register. </dd>\n<dt><code>t</code></dt>\n<dd>Registers which can be used in $tp-relative addressing. </dd>\n<dt><code>v</code></dt>\n<dd>The $gp register. </dd>\n<dt><code>x</code></dt>\n<dd>The coprocessor registers. </dd>\n<dt><code>y</code></dt>\n<dd>The coprocessor control registers. </dd>\n<dt><code>z</code></dt>\n<dd>The $0 register. </dd>\n<dt><code>A</code></dt>\n<dd>User-defined register set A. </dd>\n<dt><code>B</code></dt>\n<dd>User-defined register set B. </dd>\n<dt><code>C</code></dt>\n<dd>User-defined register set C. </dd>\n<dt><code>D</code></dt>\n<dd>User-defined register set D. </dd>\n<dt><code>I</code></dt>\n<dd>Offsets for $gp-rel addressing. </dd>\n<dt><code>J</code></dt>\n<dd>Constants that can be used directly with boolean insns. </dd>\n<dt><code>K</code></dt>\n<dd>Constants that can be moved directly to registers. </dd>\n<dt><code>L</code></dt>\n<dd>Small constants that can be added to registers. </dd>\n<dt><code>M</code></dt>\n<dd>Long shift counts. </dd>\n<dt><code>N</code></dt>\n<dd>Small constants that can be compared to registers. </dd>\n<dt><code>O</code></dt>\n<dd>Constants that can be loaded into the top half of registers. </dd>\n<dt><code>S</code></dt>\n<dd>Signed 8-bit immediates. </dd>\n<dt><code>T</code></dt>\n<dd>Symbols encoded for $tp-rel or $gp-rel addressing. </dd>\n<dt><code>U</code></dt>\n<dd>Non-constant addresses for loading/saving coprocessor registers. </dd>\n<dt><code>W</code></dt>\n<dd>The top half of a symbol's value. </dd>\n<dt><code>Y</code></dt>\n<dd>A register indirect address without offset. </dd>\n<dt><code>Z</code></dt>\n<dd>Symbolic references to the control bus. </dd>\n</dl> </dd>\n<dt>MicroBlaze—<code>config/microblaze/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>d</code></dt>\n<dd>A general register (<code>r0</code> to <code>r31</code>). </dd>\n<dt><code>z</code></dt>\n<dd>A status register (<code>rmsr</code>, <code>$fcc1</code> to <code>$fcc7</code>). </dd>\n</dl> </dd>\n<dt>MIPS—<code>config/mips/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>d</code></dt>\n<dd>An address register. This is equivalent to <code>r</code> unless generating MIPS16 code. </dd>\n<dt><code>f</code></dt>\n<dd>A floating-point register (if available). </dd>\n<dt><code>h</code></dt>\n<dd>Formerly the <code>hi</code> register. This constraint is no longer supported. </dd>\n<dt><code>l</code></dt>\n<dd>The <code>lo</code> register. Use this register to store values that are no bigger than a word. </dd>\n<dt><code>x</code></dt>\n<dd>The concatenated <code>hi</code> and <code>lo</code> registers. Use this register to store doubleword values. </dd>\n<dt><code>c</code></dt>\n<dd>A register suitable for use in an indirect jump. This will always be <code>$25</code> for <code>-mabicalls</code>. </dd>\n<dt><code>v</code></dt>\n<dd>Register <code>$3</code>. Do not use this constraint in new code; it is retained only for compatibility with glibc. </dd>\n<dt><code>y</code></dt>\n<dd>Equivalent to <code>r</code>; retained for backwards compatibility. </dd>\n<dt><code>z</code></dt>\n<dd>A floating-point condition code register. </dd>\n<dt><code>I</code></dt>\n<dd>A signed 16-bit constant (for arithmetic instructions). </dd>\n<dt><code>J</code></dt>\n<dd>Integer zero. </dd>\n<dt><code>K</code></dt>\n<dd>An unsigned 16-bit constant (for logic instructions). </dd>\n<dt><code>L</code></dt>\n<dd>A signed 32-bit constant in which the lower 16 bits are zero. Such constants can be loaded using <code>lui</code>. </dd>\n<dt><code>M</code></dt>\n<dd>A constant that cannot be loaded using <code>lui</code>, <code>addiu</code> or <code>ori</code>. </dd>\n<dt><code>N</code></dt>\n<dd>A constant in the range −65535 to −1 (inclusive). </dd>\n<dt><code>O</code></dt>\n<dd>A signed 15-bit constant. </dd>\n<dt><code>P</code></dt>\n<dd>A constant in the range 1 to 65535 (inclusive). </dd>\n<dt><code>G</code></dt>\n<dd>Floating-point zero. </dd>\n<dt><code>R</code></dt>\n<dd>An address that can be used in a non-macro load or store. </dd>\n<dt><code>ZC</code></dt>\n<dd>When compiling microMIPS code, this constraint matches a memory operand whose address is formed from a base register and a 12-bit offset. These operands can be used for microMIPS instructions such as <code>ll</code> and <code>sc</code>. When not compiling for microMIPS code, <code>ZC</code> is equivalent to <code>R</code>. </dd>\n<dt><code>ZD</code></dt>\n<dd>When compiling microMIPS code, this constraint matches an address operand that is formed from a base register and a 12-bit offset. These operands can be used for microMIPS instructions such as <code>prefetch</code>. When not compiling for microMIPS code, <code>ZD</code> is equivalent to <code>p</code>. </dd>\n</dl> </dd>\n<dt>Motorola 680x0—<code>config/m68k/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>Address register </dd>\n<dt><code>d</code></dt>\n<dd>Data register </dd>\n<dt><code>f</code></dt>\n<dd>68881 floating-point register, if available </dd>\n<dt><code>I</code></dt>\n<dd>Integer in the range 1 to 8 </dd>\n<dt><code>J</code></dt>\n<dd>16-bit signed number </dd>\n<dt><code>K</code></dt>\n<dd>Signed number whose magnitude is greater than 0x80 </dd>\n<dt><code>L</code></dt>\n<dd>Integer in the range −8 to −1 </dd>\n<dt><code>M</code></dt>\n<dd>Signed number whose magnitude is greater than 0x100 </dd>\n<dt><code>N</code></dt>\n<dd>Range 24 to 31, rotatert:SI 8 to 1 expressed as rotate </dd>\n<dt><code>O</code></dt>\n<dd>16 (for rotate using swap) </dd>\n<dt><code>P</code></dt>\n<dd>Range 8 to 15, rotatert:HI 8 to 1 expressed as rotate </dd>\n<dt><code>R</code></dt>\n<dd>Numbers that mov3q can handle </dd>\n<dt><code>G</code></dt>\n<dd>Floating point constant that is not a 68881 constant </dd>\n<dt><code>S</code></dt>\n<dd>Operands that satisfy 'm' when -mpcrel is in effect </dd>\n<dt><code>T</code></dt>\n<dd>Operands that satisfy 's' when -mpcrel is not in effect </dd>\n<dt><code>Q</code></dt>\n<dd>Address register indirect addressing mode </dd>\n<dt><code>U</code></dt>\n<dd>Register offset addressing </dd>\n<dt><code>W</code></dt>\n<dd>const_call_operand </dd>\n<dt><code>Cs</code></dt>\n<dd>symbol_ref or const </dd>\n<dt><code>Ci</code></dt>\n<dd>const_int </dd>\n<dt><code>C0</code></dt>\n<dd>const_int 0 </dd>\n<dt><code>Cj</code></dt>\n<dd>Range of signed numbers that don't fit in 16 bits </dd>\n<dt><code>Cmvq</code></dt>\n<dd>Integers valid for mvq </dd>\n<dt><code>Capsw</code></dt>\n<dd>Integers valid for a moveq followed by a swap </dd>\n<dt><code>Cmvz</code></dt>\n<dd>Integers valid for mvz </dd>\n<dt><code>Cmvs</code></dt>\n<dd>Integers valid for mvs </dd>\n<dt><code>Ap</code></dt>\n<dd>push_operand </dd>\n<dt><code>Ac</code></dt>\n<dd>Non-register operands allowed in clr </dd>\n</dl> </dd>\n<dt>Moxie—<code>config/moxie/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>A</code></dt>\n<dd>An absolute address </dd>\n<dt><code>B</code></dt>\n<dd>An offset address </dd>\n<dt><code>W</code></dt>\n<dd>A register indirect memory operand </dd>\n<dt><code>I</code></dt>\n<dd>A constant in the range of 0 to 255. </dd>\n<dt><code>N</code></dt>\n<dd>A constant in the range of 0 to −255. </dd>\n</dl> </dd>\n<dt>MSP430–<code>config/msp430/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>R12</code></dt>\n<dd>Register R12. </dd>\n<dt><code>R13</code></dt>\n<dd>Register R13. </dd>\n<dt><code>K</code></dt>\n<dd>Integer constant 1. </dd>\n<dt><code>L</code></dt>\n<dd>Integer constant -1^20..1^19. </dd>\n<dt><code>M</code></dt>\n<dd>Integer constant 1-4. </dd>\n<dt><code>Ya</code></dt>\n<dd>Memory references which do not require an extended MOVX instruction. </dd>\n<dt><code>Yl</code></dt>\n<dd>Memory reference, labels only. </dd>\n<dt><code>Ys</code></dt>\n<dd>Memory reference, stack only. </dd>\n</dl> </dd>\n<dt>NDS32—<code>config/nds32/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>w</code></dt>\n<dd>LOW register class $r0 to $r7 constraint for V3/V3M ISA. </dd>\n<dt><code>l</code></dt>\n<dd>LOW register class $r0 to $r7. </dd>\n<dt><code>d</code></dt>\n<dd>MIDDLE register class $r0 to $r11, $r16 to $r19. </dd>\n<dt><code>h</code></dt>\n<dd>HIGH register class $r12 to $r14, $r20 to $r31. </dd>\n<dt><code>t</code></dt>\n<dd>Temporary assist register $ta (i.e. $r15). </dd>\n<dt><code>k</code></dt>\n<dd>Stack register $sp. </dd>\n<dt><code>Iu03</code></dt>\n<dd>Unsigned immediate 3-bit value. </dd>\n<dt><code>In03</code></dt>\n<dd>Negative immediate 3-bit value in the range of −7–0. </dd>\n<dt><code>Iu04</code></dt>\n<dd>Unsigned immediate 4-bit value. </dd>\n<dt><code>Is05</code></dt>\n<dd>Signed immediate 5-bit value. </dd>\n<dt><code>Iu05</code></dt>\n<dd>Unsigned immediate 5-bit value. </dd>\n<dt><code>In05</code></dt>\n<dd>Negative immediate 5-bit value in the range of −31–0. </dd>\n<dt><code>Ip05</code></dt>\n<dd>Unsigned immediate 5-bit value for movpi45 instruction with range 16–47. </dd>\n<dt><code>Iu06</code></dt>\n<dd>Unsigned immediate 6-bit value constraint for addri36.sp instruction. </dd>\n<dt><code>Iu08</code></dt>\n<dd>Unsigned immediate 8-bit value. </dd>\n<dt><code>Iu09</code></dt>\n<dd>Unsigned immediate 9-bit value. </dd>\n<dt><code>Is10</code></dt>\n<dd>Signed immediate 10-bit value. </dd>\n<dt><code>Is11</code></dt>\n<dd>Signed immediate 11-bit value. </dd>\n<dt><code>Is15</code></dt>\n<dd>Signed immediate 15-bit value. </dd>\n<dt><code>Iu15</code></dt>\n<dd>Unsigned immediate 15-bit value. </dd>\n<dt><code>Ic15</code></dt>\n<dd>A constant which is not in the range of imm15u but ok for bclr instruction. </dd>\n<dt><code>Ie15</code></dt>\n<dd>A constant which is not in the range of imm15u but ok for bset instruction. </dd>\n<dt><code>It15</code></dt>\n<dd>A constant which is not in the range of imm15u but ok for btgl instruction. </dd>\n<dt><code>Ii15</code></dt>\n<dd>A constant whose compliment value is in the range of imm15u and ok for bitci instruction. </dd>\n<dt><code>Is16</code></dt>\n<dd>Signed immediate 16-bit value. </dd>\n<dt><code>Is17</code></dt>\n<dd>Signed immediate 17-bit value. </dd>\n<dt><code>Is19</code></dt>\n<dd>Signed immediate 19-bit value. </dd>\n<dt><code>Is20</code></dt>\n<dd>Signed immediate 20-bit value. </dd>\n<dt><code>Ihig</code></dt>\n<dd>The immediate value that can be simply set high 20-bit. </dd>\n<dt><code>Izeb</code></dt>\n<dd>The immediate value 0xff. </dd>\n<dt><code>Izeh</code></dt>\n<dd>The immediate value 0xffff. </dd>\n<dt><code>Ixls</code></dt>\n<dd>The immediate value 0x01. </dd>\n<dt><code>Ix11</code></dt>\n<dd>The immediate value 0x7ff. </dd>\n<dt><code>Ibms</code></dt>\n<dd>The immediate value with power of 2. </dd>\n<dt><code>Ifex</code></dt>\n<dd>The immediate value with power of 2 minus 1. </dd>\n<dt><code>U33</code></dt>\n<dd>Memory constraint for 333 format. </dd>\n<dt><code>U45</code></dt>\n<dd>Memory constraint for 45 format. </dd>\n<dt><code>U37</code></dt>\n<dd>Memory constraint for 37 format. </dd>\n</dl> </dd>\n<dt>Nios II family—<code>config/nios2/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>I</code></dt>\n<dd>Integer that is valid as an immediate operand in an instruction taking a signed 16-bit number. Range −32768 to 32767. </dd>\n<dt><code>J</code></dt>\n<dd>Integer that is valid as an immediate operand in an instruction taking an unsigned 16-bit number. Range 0 to 65535. </dd>\n<dt><code>K</code></dt>\n<dd>Integer that is valid as an immediate operand in an instruction taking only the upper 16-bits of a 32-bit number. Range 32-bit numbers with the lower 16-bits being 0. </dd>\n<dt><code>L</code></dt>\n<dd>Integer that is valid as an immediate operand for a shift instruction. Range 0 to 31. </dd>\n<dt><code>M</code></dt>\n<dd>Integer that is valid as an immediate operand for only the value 0. Can be used in conjunction with the format modifier <code>z</code> to use <code>r0</code> instead of <code>0</code> in the assembly output. </dd>\n<dt><code>N</code></dt>\n<dd>Integer that is valid as an immediate operand for a custom instruction opcode. Range 0 to 255. </dd>\n<dt><code>S</code></dt>\n<dd>Matches immediates which are addresses in the small data section and therefore can be added to <code>gp</code> as a 16-bit immediate to re-create their 32-bit value. </dd>\n</dl> </dd>\n<dt>PDP-11—<code>config/pdp11/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>Floating point registers AC0 through AC3. These can be loaded from/to memory with a single instruction. </dd>\n<dt><code>d</code></dt>\n<dd>Odd numbered general registers (R1, R3, R5). These are used for 16-bit multiply operations. </dd>\n<dt><code>f</code></dt>\n<dd>Any of the floating point registers (AC0 through AC5). </dd>\n<dt><code>G</code></dt>\n<dd>Floating point constant 0. </dd>\n<dt><code>I</code></dt>\n<dd>An integer constant that fits in 16 bits. </dd>\n<dt><code>J</code></dt>\n<dd>An integer constant whose low order 16 bits are zero. </dd>\n<dt><code>K</code></dt>\n<dd>An integer constant that does not meet the constraints for codes ‘<code>I</code>’ or ‘<code>J</code>’. </dd>\n<dt><code>L</code></dt>\n<dd>The integer constant 1. </dd>\n<dt><code>M</code></dt>\n<dd>The integer constant −1. </dd>\n<dt><code>N</code></dt>\n<dd>The integer constant 0. </dd>\n<dt><code>O</code></dt>\n<dd>Integer constants −4 through −1 and 1 through 4; shifts by these amounts are handled as multiple single-bit shifts rather than a single variable-length shift. </dd>\n<dt><code>Q</code></dt>\n<dd>A memory reference which requires an additional word (address or offset) after the opcode. </dd>\n<dt><code>R</code></dt>\n<dd>A memory reference that is encoded within the opcode. </dd>\n</dl> </dd>\n<dt>RL78—<code>config/rl78/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>Int3</code></dt>\n<dd>An integer constant in the range 1 <small class=\"dots\">...</small> 7. </dd>\n<dt><code>Int8</code></dt>\n<dd>An integer constant in the range 0 <small class=\"dots\">...</small> 255. </dd>\n<dt><code>J</code></dt>\n<dd>An integer constant in the range −255 <small class=\"dots\">...</small> 0 </dd>\n<dt><code>K</code></dt>\n<dd>The integer constant 1. </dd>\n<dt><code>L</code></dt>\n<dd>The integer constant -1. </dd>\n<dt><code>M</code></dt>\n<dd>The integer constant 0. </dd>\n<dt><code>N</code></dt>\n<dd>The integer constant 2. </dd>\n<dt><code>O</code></dt>\n<dd>The integer constant -2. </dd>\n<dt><code>P</code></dt>\n<dd>An integer constant in the range 1 <small class=\"dots\">...</small> 15. </dd>\n<dt><code>Qbi</code></dt>\n<dd>The built-in compare types–eq, ne, gtu, ltu, geu, and leu. </dd>\n<dt><code>Qsc</code></dt>\n<dd>The synthetic compare types–gt, lt, ge, and le. </dd>\n<dt><code>Wab</code></dt>\n<dd>A memory reference with an absolute address. </dd>\n<dt><code>Wbc</code></dt>\n<dd>A memory reference using <code>BC</code> as a base register, with an optional offset. </dd>\n<dt><code>Wca</code></dt>\n<dd>A memory reference using <code>AX</code>, <code>BC</code>, <code>DE</code>, or <code>HL</code> for the address, for calls. </dd>\n<dt><code>Wcv</code></dt>\n<dd>A memory reference using any 16-bit register pair for the address, for calls. </dd>\n<dt><code>Wd2</code></dt>\n<dd>A memory reference using <code>DE</code> as a base register, with an optional offset. </dd>\n<dt><code>Wde</code></dt>\n<dd>A memory reference using <code>DE</code> as a base register, without any offset. </dd>\n<dt><code>Wfr</code></dt>\n<dd>Any memory reference to an address in the far address space. </dd>\n<dt><code>Wh1</code></dt>\n<dd>A memory reference using <code>HL</code> as a base register, with an optional one-byte offset. </dd>\n<dt><code>Whb</code></dt>\n<dd>A memory reference using <code>HL</code> as a base register, with <code>B</code> or <code>C</code> as the index register. </dd>\n<dt><code>Whl</code></dt>\n<dd>A memory reference using <code>HL</code> as a base register, without any offset. </dd>\n<dt><code>Ws1</code></dt>\n<dd>A memory reference using <code>SP</code> as a base register, with an optional one-byte offset. </dd>\n<dt><code>Y</code></dt>\n<dd>Any memory reference to an address in the near address space. </dd>\n<dt><code>A</code></dt>\n<dd>The <code>AX</code> register. </dd>\n<dt><code>B</code></dt>\n<dd>The <code>BC</code> register. </dd>\n<dt><code>D</code></dt>\n<dd>The <code>DE</code> register. </dd>\n<dt><code>R</code></dt>\n<dd>\n<code>A</code> through <code>L</code> registers. </dd>\n<dt><code>S</code></dt>\n<dd>The <code>SP</code> register. </dd>\n<dt><code>T</code></dt>\n<dd>The <code>HL</code> register. </dd>\n<dt><code>Z08W</code></dt>\n<dd>The 16-bit <code>R8</code> register. </dd>\n<dt><code>Z10W</code></dt>\n<dd>The 16-bit <code>R10</code> register. </dd>\n<dt><code>Zint</code></dt>\n<dd>The registers reserved for interrupts (<code>R24</code> to <code>R31</code>). </dd>\n<dt><code>a</code></dt>\n<dd>The <code>A</code> register. </dd>\n<dt><code>b</code></dt>\n<dd>The <code>B</code> register. </dd>\n<dt><code>c</code></dt>\n<dd>The <code>C</code> register. </dd>\n<dt><code>d</code></dt>\n<dd>The <code>D</code> register. </dd>\n<dt><code>e</code></dt>\n<dd>The <code>E</code> register. </dd>\n<dt><code>h</code></dt>\n<dd>The <code>H</code> register. </dd>\n<dt><code>l</code></dt>\n<dd>The <code>L</code> register. </dd>\n<dt><code>v</code></dt>\n<dd>The virtual registers. </dd>\n<dt><code>w</code></dt>\n<dd>The <code>PSW</code> register. </dd>\n<dt><code>x</code></dt>\n<dd>The <code>X</code> register. </dd>\n</dl> </dd>\n<dt>RX—<code>config/rx/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>Q</code></dt>\n<dd>An address which does not involve register indirect addressing or pre/post increment/decrement addressing. </dd>\n<dt><code>Symbol</code></dt>\n<dd>A symbol reference. </dd>\n<dt><code>Int08</code></dt>\n<dd>A constant in the range −256 to 255, inclusive. </dd>\n<dt><code>Sint08</code></dt>\n<dd>A constant in the range −128 to 127, inclusive. </dd>\n<dt><code>Sint16</code></dt>\n<dd>A constant in the range −32768 to 32767, inclusive. </dd>\n<dt><code>Sint24</code></dt>\n<dd>A constant in the range −8388608 to 8388607, inclusive. </dd>\n<dt><code>Uint04</code></dt>\n<dd>A constant in the range 0 to 15, inclusive. </dd>\n</dl> </dd>\n<dt>SPARC—<code>config/sparc/sparc.h</code>\n</dt>\n<dd> <dl> <dt><code>f</code></dt>\n<dd>Floating-point register on the SPARC-V8 architecture and lower floating-point register on the SPARC-V9 architecture. </dd>\n<dt><code>e</code></dt>\n<dd>Floating-point register. It is equivalent to ‘<code>f</code>’ on the SPARC-V8 architecture and contains both lower and upper floating-point registers on the SPARC-V9 architecture. </dd>\n<dt><code>c</code></dt>\n<dd>Floating-point condition code register. </dd>\n<dt><code>d</code></dt>\n<dd>Lower floating-point register. It is only valid on the SPARC-V9 architecture when the Visual Instruction Set is available. </dd>\n<dt><code>b</code></dt>\n<dd>Floating-point register. It is only valid on the SPARC-V9 architecture when the Visual Instruction Set is available. </dd>\n<dt><code>h</code></dt>\n<dd>64-bit global or out register for the SPARC-V8+ architecture. </dd>\n<dt><code>C</code></dt>\n<dd>The constant all-ones, for floating-point. </dd>\n<dt><code>A</code></dt>\n<dd>Signed 5-bit constant </dd>\n<dt><code>D</code></dt>\n<dd>A vector constant </dd>\n<dt><code>I</code></dt>\n<dd>Signed 13-bit constant </dd>\n<dt><code>J</code></dt>\n<dd>Zero </dd>\n<dt><code>K</code></dt>\n<dd>32-bit constant with the low 12 bits clear (a constant that can be loaded with the <code>sethi</code> instruction) </dd>\n<dt><code>L</code></dt>\n<dd>A constant in the range supported by <code>movcc</code> instructions (11-bit signed immediate) </dd>\n<dt><code>M</code></dt>\n<dd>A constant in the range supported by <code>movrcc</code> instructions (10-bit signed immediate) </dd>\n<dt><code>N</code></dt>\n<dd>Same as ‘<code>K</code>’, except that it verifies that bits that are not in the lower 32-bit range are all zero. Must be used instead of ‘<code>K</code>’ for modes wider than <code>SImode</code> </dd>\n<dt><code>O</code></dt>\n<dd>The constant 4096 </dd>\n<dt><code>G</code></dt>\n<dd>Floating-point zero </dd>\n<dt><code>H</code></dt>\n<dd>Signed 13-bit constant, sign-extended to 32 or 64 bits </dd>\n<dt><code>P</code></dt>\n<dd>The constant -1 </dd>\n<dt><code>Q</code></dt>\n<dd>Floating-point constant whose integral representation can be moved into an integer register using a single sethi instruction </dd>\n<dt><code>R</code></dt>\n<dd>Floating-point constant whose integral representation can be moved into an integer register using a single mov instruction </dd>\n<dt><code>S</code></dt>\n<dd>Floating-point constant whose integral representation can be moved into an integer register using a high/lo_sum instruction sequence </dd>\n<dt><code>T</code></dt>\n<dd>Memory address aligned to an 8-byte boundary </dd>\n<dt><code>U</code></dt>\n<dd>Even register </dd>\n<dt><code>W</code></dt>\n<dd>Memory address for ‘<code>e</code>’ constraint registers </dd>\n<dt><code>w</code></dt>\n<dd>Memory address with only a base register </dd>\n<dt><code>Y</code></dt>\n<dd>Vector zero </dd>\n</dl> </dd>\n<dt>SPU—<code>config/spu/spu.h</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>An immediate which can be loaded with the il/ila/ilh/ilhu instructions. const_int is treated as a 64 bit value. </dd>\n<dt><code>c</code></dt>\n<dd>An immediate for and/xor/or instructions. const_int is treated as a 64 bit value. </dd>\n<dt><code>d</code></dt>\n<dd>An immediate for the <code>iohl</code> instruction. const_int is treated as a 64 bit value. </dd>\n<dt><code>f</code></dt>\n<dd>An immediate which can be loaded with <code>fsmbi</code>. </dd>\n<dt><code>A</code></dt>\n<dd>An immediate which can be loaded with the il/ila/ilh/ilhu instructions. const_int is treated as a 32 bit value. </dd>\n<dt><code>B</code></dt>\n<dd>An immediate for most arithmetic instructions. const_int is treated as a 32 bit value. </dd>\n<dt><code>C</code></dt>\n<dd>An immediate for and/xor/or instructions. const_int is treated as a 32 bit value. </dd>\n<dt><code>D</code></dt>\n<dd>An immediate for the <code>iohl</code> instruction. const_int is treated as a 32 bit value. </dd>\n<dt><code>I</code></dt>\n<dd>A constant in the range [−64, 63] for shift/rotate instructions. </dd>\n<dt><code>J</code></dt>\n<dd>An unsigned 7-bit constant for conversion/nop/channel instructions. </dd>\n<dt><code>K</code></dt>\n<dd>A signed 10-bit constant for most arithmetic instructions. </dd>\n<dt><code>M</code></dt>\n<dd>A signed 16 bit immediate for <code>stop</code>. </dd>\n<dt><code>N</code></dt>\n<dd>An unsigned 16-bit constant for <code>iohl</code> and <code>fsmbi</code>. </dd>\n<dt><code>O</code></dt>\n<dd>An unsigned 7-bit constant whose 3 least significant bits are 0. </dd>\n<dt><code>P</code></dt>\n<dd>An unsigned 3-bit constant for 16-byte rotates and shifts </dd>\n<dt><code>R</code></dt>\n<dd>Call operand, reg, for indirect calls </dd>\n<dt><code>S</code></dt>\n<dd>Call operand, symbol, for relative calls. </dd>\n<dt><code>T</code></dt>\n<dd>Call operand, const_int, for absolute calls. </dd>\n<dt><code>U</code></dt>\n<dd>An immediate which can be loaded with the il/ila/ilh/ilhu instructions. const_int is sign extended to 128 bit. </dd>\n<dt><code>W</code></dt>\n<dd>An immediate for shift and rotate instructions. const_int is treated as a 32 bit value. </dd>\n<dt><code>Y</code></dt>\n<dd>An immediate for and/xor/or instructions. const_int is sign extended as a 128 bit. </dd>\n<dt><code>Z</code></dt>\n<dd>An immediate for the <code>iohl</code> instruction. const_int is sign extended to 128 bit. </dd>\n</dl> </dd>\n<dt>S/390 and zSeries—<code>config/s390/s390.h</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>Address register (general purpose register except r0) </dd>\n<dt><code>c</code></dt>\n<dd>Condition code register </dd>\n<dt><code>d</code></dt>\n<dd>Data register (arbitrary general purpose register) </dd>\n<dt><code>f</code></dt>\n<dd>Floating-point register </dd>\n<dt><code>I</code></dt>\n<dd>Unsigned 8-bit constant (0–255) </dd>\n<dt><code>J</code></dt>\n<dd>Unsigned 12-bit constant (0–4095) </dd>\n<dt><code>K</code></dt>\n<dd>Signed 16-bit constant (−32768–32767) </dd>\n<dt><code>L</code></dt>\n<dd>Value appropriate as displacement. <dl> <dt><code>(0..4095)</code></dt>\n<dd>for short displacement </dd>\n<dt><code>(−524288..524287)</code></dt>\n<dd>for long displacement </dd>\n</dl> </dd>\n<dt><code>M</code></dt>\n<dd>Constant integer with a value of 0x7fffffff. </dd>\n<dt><code>N</code></dt>\n<dd>Multiple letter constraint followed by 4 parameter letters. <dl> <dt><code>0..9:</code></dt>\n<dd>number of the part counting from most to least significant </dd>\n<dt><code>H,Q:</code></dt>\n<dd>mode of the part </dd>\n<dt><code>D,S,H:</code></dt>\n<dd>mode of the containing operand </dd>\n<dt><code>0,F:</code></dt>\n<dd>value of the other parts (F—all bits set) </dd>\n</dl> The constraint matches if the specified part of a constant has a value different from its other parts. </dd>\n<dt><code>Q</code></dt>\n<dd>Memory reference without index register and with short displacement. </dd>\n<dt><code>R</code></dt>\n<dd>Memory reference with index register and short displacement. </dd>\n<dt><code>S</code></dt>\n<dd>Memory reference without index register but with long displacement. </dd>\n<dt><code>T</code></dt>\n<dd>Memory reference with index register and long displacement. </dd>\n<dt><code>U</code></dt>\n<dd>Pointer with short displacement. </dd>\n<dt><code>W</code></dt>\n<dd>Pointer with long displacement. </dd>\n<dt><code>Y</code></dt>\n<dd>Shift count operand. </dd>\n</dl> </dd>\n<dt>Score family—<code>config/score/score.h</code>\n</dt>\n<dd> <dl> <dt><code>d</code></dt>\n<dd>Registers from r0 to r32. </dd>\n<dt><code>e</code></dt>\n<dd>Registers from r0 to r16. </dd>\n<dt><code>t</code></dt>\n<dd>r8—r11 or r22—r27 registers. </dd>\n<dt><code>h</code></dt>\n<dd>hi register. </dd>\n<dt><code>l</code></dt>\n<dd>lo register. </dd>\n<dt><code>x</code></dt>\n<dd>hi + lo register. </dd>\n<dt><code>q</code></dt>\n<dd>cnt register. </dd>\n<dt><code>y</code></dt>\n<dd>lcb register. </dd>\n<dt><code>z</code></dt>\n<dd>scb register. </dd>\n<dt><code>a</code></dt>\n<dd>cnt + lcb + scb register. </dd>\n<dt><code>c</code></dt>\n<dd>cr0—cr15 register. </dd>\n<dt><code>b</code></dt>\n<dd>cp1 registers. </dd>\n<dt><code>f</code></dt>\n<dd>cp2 registers. </dd>\n<dt><code>i</code></dt>\n<dd>cp3 registers. </dd>\n<dt><code>j</code></dt>\n<dd>cp1 + cp2 + cp3 registers. </dd>\n<dt><code>I</code></dt>\n<dd>High 16-bit constant (32-bit constant with 16 LSBs zero). </dd>\n<dt><code>J</code></dt>\n<dd>Unsigned 5 bit integer (in the range 0 to 31). </dd>\n<dt><code>K</code></dt>\n<dd>Unsigned 16 bit integer (in the range 0 to 65535). </dd>\n<dt><code>L</code></dt>\n<dd>Signed 16 bit integer (in the range −32768 to 32767). </dd>\n<dt><code>M</code></dt>\n<dd>Unsigned 14 bit integer (in the range 0 to 16383). </dd>\n<dt><code>N</code></dt>\n<dd>Signed 14 bit integer (in the range −8192 to 8191). </dd>\n<dt><code>Z</code></dt>\n<dd>Any SYMBOL_REF. </dd>\n</dl> </dd>\n<dt>Xstormy16—<code>config/stormy16/stormy16.h</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>Register r0. </dd>\n<dt><code>b</code></dt>\n<dd>Register r1. </dd>\n<dt><code>c</code></dt>\n<dd>Register r2. </dd>\n<dt><code>d</code></dt>\n<dd>Register r8. </dd>\n<dt><code>e</code></dt>\n<dd>Registers r0 through r7. </dd>\n<dt><code>t</code></dt>\n<dd>Registers r0 and r1. </dd>\n<dt><code>y</code></dt>\n<dd>The carry register. </dd>\n<dt><code>z</code></dt>\n<dd>Registers r8 and r9. </dd>\n<dt><code>I</code></dt>\n<dd>A constant between 0 and 3 inclusive. </dd>\n<dt><code>J</code></dt>\n<dd>A constant that has exactly one bit set. </dd>\n<dt><code>K</code></dt>\n<dd>A constant that has exactly one bit clear. </dd>\n<dt><code>L</code></dt>\n<dd>A constant between 0 and 255 inclusive. </dd>\n<dt><code>M</code></dt>\n<dd>A constant between −255 and 0 inclusive. </dd>\n<dt><code>N</code></dt>\n<dd>A constant between −3 and 0 inclusive. </dd>\n<dt><code>O</code></dt>\n<dd>A constant between 1 and 4 inclusive. </dd>\n<dt><code>P</code></dt>\n<dd>A constant between −4 and −1 inclusive. </dd>\n<dt><code>Q</code></dt>\n<dd>A memory reference that is a stack push. </dd>\n<dt><code>R</code></dt>\n<dd>A memory reference that is a stack pop. </dd>\n<dt><code>S</code></dt>\n<dd>A memory reference that refers to a constant address of known value. </dd>\n<dt><code>T</code></dt>\n<dd>The register indicated by Rx (not implemented yet). </dd>\n<dt><code>U</code></dt>\n<dd>A constant that is not between 2 and 15 inclusive. </dd>\n<dt><code>Z</code></dt>\n<dd>The constant 0. </dd>\n</dl> </dd>\n<dt>TI C6X family—<code>config/c6x/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>Register file A (A0–A31). </dd>\n<dt><code>b</code></dt>\n<dd>Register file B (B0–B31). </dd>\n<dt><code>A</code></dt>\n<dd>Predicate registers in register file A (A0–A2 on C64X and higher, A1 and A2 otherwise). </dd>\n<dt><code>B</code></dt>\n<dd>Predicate registers in register file B (B0–B2). </dd>\n<dt><code>C</code></dt>\n<dd>A call-used register in register file B (B0–B9, B16–B31). </dd>\n<dt><code>Da</code></dt>\n<dd>Register file A, excluding predicate registers (A3–A31, plus A0 if not C64X or higher). </dd>\n<dt><code>Db</code></dt>\n<dd>Register file B, excluding predicate registers (B3–B31). </dd>\n<dt><code>Iu4</code></dt>\n<dd>Integer constant in the range 0 <small class=\"dots\">...</small> 15. </dd>\n<dt><code>Iu5</code></dt>\n<dd>Integer constant in the range 0 <small class=\"dots\">...</small> 31. </dd>\n<dt><code>In5</code></dt>\n<dd>Integer constant in the range −31 <small class=\"dots\">...</small> 0. </dd>\n<dt><code>Is5</code></dt>\n<dd>Integer constant in the range −16 <small class=\"dots\">...</small> 15. </dd>\n<dt><code>I5x</code></dt>\n<dd>Integer constant that can be the operand of an ADDA or a SUBA insn. </dd>\n<dt><code>IuB</code></dt>\n<dd>Integer constant in the range 0 <small class=\"dots\">...</small> 65535. </dd>\n<dt><code>IsB</code></dt>\n<dd>Integer constant in the range −32768 <small class=\"dots\">...</small> 32767. </dd>\n<dt><code>IsC</code></dt>\n<dd>Integer constant in the range -2^20 <small class=\"dots\">...</small> 2^20 - 1. </dd>\n<dt><code>Jc</code></dt>\n<dd>Integer constant that is a valid mask for the clr instruction. </dd>\n<dt><code>Js</code></dt>\n<dd>Integer constant that is a valid mask for the set instruction. </dd>\n<dt><code>Q</code></dt>\n<dd>Memory location with A base register. </dd>\n<dt><code>R</code></dt>\n<dd>Memory location with B base register. </dd>\n<dt><code>Z</code></dt>\n<dd>Register B14 (aka DP). </dd>\n</dl> </dd>\n<dt>TILE-Gx—<code>config/tilegx/constraints.md</code>\n</dt>\n<dd> <dl> <dt>\n<code>R00</code><dt>\n<code>R01</code><dt>\n<code>R02</code><dt>\n<code>R03</code><dt>\n<code>R04</code><dt>\n<code>R05</code><dt>\n<code>R06</code><dt>\n<code>R07</code><dt>\n<code>R08</code><dt>\n<code>R09</code><dt><code>R10</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Each of these represents a register constraint for an individual register, from r0 to r10. </dd>\n<dt><code>I</code></dt>\n<dd>Signed 8-bit integer constant. </dd>\n<dt><code>J</code></dt>\n<dd>Signed 16-bit integer constant. </dd>\n<dt><code>K</code></dt>\n<dd>Unsigned 16-bit integer constant. </dd>\n<dt><code>L</code></dt>\n<dd>Integer constant that fits in one signed byte when incremented by one (−129 <small class=\"dots\">...</small> 126). </dd>\n<dt><code>m</code></dt>\n<dd>Memory operand. If used together with ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’, the operand can have postincrement which requires printing with ‘<code>%In</code>’ and ‘<code>%in</code>’ on TILE-Gx. For example: <pre class=\"smallexample\">asm (\"st_add %I0,%1,%i0\" : \"=m&lt;&gt;\" (*mem) : \"r\" (val));</pre> </dd>\n<dt><code>M</code></dt>\n<dd>A bit mask suitable for the BFINS instruction. </dd>\n<dt><code>N</code></dt>\n<dd>Integer constant that is a byte tiled out eight times. </dd>\n<dt><code>O</code></dt>\n<dd>The integer zero constant. </dd>\n<dt><code>P</code></dt>\n<dd>Integer constant that is a sign-extended byte tiled out as four shorts. </dd>\n<dt><code>Q</code></dt>\n<dd>Integer constant that fits in one signed byte when incremented (−129 <small class=\"dots\">...</small> 126), but excluding -1. </dd>\n<dt><code>S</code></dt>\n<dd>Integer constant that has all 1 bits consecutive and starting at bit 0. </dd>\n<dt><code>T</code></dt>\n<dd>A 16-bit fragment of a got, tls, or pc-relative reference. </dd>\n<dt><code>U</code></dt>\n<dd>Memory operand except postincrement. This is roughly the same as ‘<code>m</code>’ when not used together with ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’. </dd>\n<dt><code>W</code></dt>\n<dd>An 8-element vector constant with identical elements. </dd>\n<dt><code>Y</code></dt>\n<dd>A 4-element vector constant with identical elements. </dd>\n<dt><code>Z0</code></dt>\n<dd>The integer constant 0xffffffff. </dd>\n<dt><code>Z1</code></dt>\n<dd>The integer constant 0xffffffff00000000. </dd>\n</dl> </dd>\n<dt>TILEPro—<code>config/tilepro/constraints.md</code>\n</dt>\n<dd> <dl> <dt>\n<code>R00</code><dt>\n<code>R01</code><dt>\n<code>R02</code><dt>\n<code>R03</code><dt>\n<code>R04</code><dt>\n<code>R05</code><dt>\n<code>R06</code><dt>\n<code>R07</code><dt>\n<code>R08</code><dt>\n<code>R09</code><dt><code>R10</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Each of these represents a register constraint for an individual register, from r0 to r10. </dd>\n<dt><code>I</code></dt>\n<dd>Signed 8-bit integer constant. </dd>\n<dt><code>J</code></dt>\n<dd>Signed 16-bit integer constant. </dd>\n<dt><code>K</code></dt>\n<dd>Nonzero integer constant with low 16 bits zero. </dd>\n<dt><code>L</code></dt>\n<dd>Integer constant that fits in one signed byte when incremented by one (−129 <small class=\"dots\">...</small> 126). </dd>\n<dt><code>m</code></dt>\n<dd>Memory operand. If used together with ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’, the operand can have postincrement which requires printing with ‘<code>%In</code>’ and ‘<code>%in</code>’ on TILEPro. For example: <pre class=\"smallexample\">asm (\"swadd %I0,%1,%i0\" : \"=m&lt;&gt;\" (mem) : \"r\" (val));</pre> </dd>\n<dt><code>M</code></dt>\n<dd>A bit mask suitable for the MM instruction. </dd>\n<dt><code>N</code></dt>\n<dd>Integer constant that is a byte tiled out four times. </dd>\n<dt><code>O</code></dt>\n<dd>The integer zero constant. </dd>\n<dt><code>P</code></dt>\n<dd>Integer constant that is a sign-extended byte tiled out as two shorts. </dd>\n<dt><code>Q</code></dt>\n<dd>Integer constant that fits in one signed byte when incremented (−129 <small class=\"dots\">...</small> 126), but excluding -1. </dd>\n<dt><code>T</code></dt>\n<dd>A symbolic operand, or a 16-bit fragment of a got, tls, or pc-relative reference. </dd>\n<dt><code>U</code></dt>\n<dd>Memory operand except postincrement. This is roughly the same as ‘<code>m</code>’ when not used together with ‘<code>&lt;</code>’ or ‘<code>&gt;</code>’. </dd>\n<dt><code>W</code></dt>\n<dd>A 4-element vector constant with identical elements. </dd>\n<dt><code>Y</code></dt>\n<dd>A 2-element vector constant with identical elements. </dd>\n</dl> </dd>\n<dt>Xtensa—<code>config/xtensa/constraints.md</code>\n</dt>\n<dd> <dl> <dt><code>a</code></dt>\n<dd>General-purpose 32-bit register </dd>\n<dt><code>b</code></dt>\n<dd>One-bit boolean register </dd>\n<dt><code>A</code></dt>\n<dd>MAC16 40-bit accumulator register </dd>\n<dt><code>I</code></dt>\n<dd>Signed 12-bit integer constant, for use in MOVI instructions </dd>\n<dt><code>J</code></dt>\n<dd>Signed 8-bit integer constant, for use in ADDI instructions </dd>\n<dt><code>K</code></dt>\n<dd>Integer constant valid for BccI instructions </dd>\n<dt><code>L</code></dt>\n<dd>Unsigned constant valid for BccUI instructions </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Machine-Constraints.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Machine-Constraints.html</a>\n  </p>\n</div>\n","asm-labels":"<h1 class=\"section\" id=\"Asm-Labels\">6.43 Controlling Names Used in Assembler Code</h1> <p> You can specify the name to be used in the assembler code for a C function or variable by writing the <code>asm</code> (or <code>__asm__</code>) keyword after the declarator as follows: </p>\n<pre class=\"smallexample\">int foo asm (\"myfoo\") = 2;</pre> <p class=\"noindent\">This specifies that the name to be used for the variable <code>foo</code> in the assembler code should be ‘<code>myfoo</code>’ rather than the usual ‘<code>_foo</code>’. </p>\n<p>On systems where an underscore is normally prepended to the name of a C function or variable, this feature allows you to define names for the linker that do not start with an underscore. </p>\n<p>It does not make sense to use this feature with a non-static local variable since such variables do not have assembler names. If you are trying to put the variable in a particular register, see <a href=\"explicit-reg-vars#Explicit-Reg-Vars\">Explicit Reg Vars</a>. GCC presently accepts such code with a warning, but will probably be changed to issue an error, rather than a warning, in the future. </p>\n<p>You cannot use <code>asm</code> in this way in a function <em>definition</em>; but you can get the same effect by writing a declaration for the function before its definition and putting <code>asm</code> there, like this: </p>\n<pre class=\"smallexample\">extern func () asm (\"FUNC\");\n\nfunc (x, y)\n     int x, y;\n/* <span class=\"roman\">...</span> */</pre> <p>It is up to you to make sure that the assembler names you choose do not conflict with any other assembler symbols. Also, you must not use a register name; that would produce completely invalid assembler code. GCC does not as yet have the ability to store static variables in registers. Perhaps that will be added. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Asm-Labels.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Asm-Labels.html</a>\n  </p>\n</div>\n","explicit-reg-vars":"<h1 class=\"section\" id=\"Explicit-Reg-Vars\">6.44 Variables in Specified Registers</h1> <p> GNU C allows you to put a few global variables into specified hardware registers. You can also specify the register in which an ordinary register variable should be allocated. </p>\n<ul> <li>Global register variables reserve registers throughout the program. This may be useful in programs such as programming language interpreters that have a couple of global variables that are accessed very often. </li>\n<li>Local register variables in specific registers do not reserve the registers, except at the point where they are used as input or output operands in an <code>asm</code> statement and the <code>asm</code> statement itself is not deleted. The compiler's data flow analysis is capable of determining where the specified registers contain live values, and where they are available for other uses. Stores into local register variables may be deleted when they appear to be dead according to dataflow analysis. References to local register variables may be deleted or moved or simplified. <p>These local variables are sometimes convenient for use with the extended <code>asm</code> feature (see <a href=\"extended-asm#Extended-Asm\">Extended Asm</a>), if you want to write one output of the assembler instruction directly into a particular register. (This works provided the register you specify fits the constraints specified for that operand in the <code>asm</code>.) </p>\n</li>\n</ul> <ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"global-reg-vars#Global-Reg-Vars\">Global Reg Vars</a> </li>\n<li>\n<a accesskey=\"2\" href=\"local-reg-vars#Local-Reg-Vars\">Local Reg Vars</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Explicit-Reg-Vars.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Explicit-Reg-Vars.html</a>\n  </p>\n</div>\n","global-reg-vars":"<h1 class=\"subsection\" id=\"Global-Reg-Vars\">6.44.1 Defining Global Register Variables</h1> <p> You can define a global register variable in GNU C like this: </p>\n<pre class=\"smallexample\">register int *foo asm (\"a5\");</pre> <p class=\"noindent\">Here <code>a5</code> is the name of the register that should be used. Choose a register that is normally saved and restored by function calls on your machine, so that library routines will not clobber it. </p>\n<p>Naturally the register name is cpu-dependent, so you need to conditionalize your program according to cpu type. The register <code>a5</code> is a good choice on a 68000 for a variable of pointer type. On machines with register windows, be sure to choose a “global” register that is not affected magically by the function call mechanism. </p>\n<p>In addition, different operating systems on the same CPU may differ in how they name the registers; then you need additional conditionals. For example, some 68000 operating systems call this register <code>%a5</code>. </p>\n<p>Eventually there may be a way of asking the compiler to choose a register automatically, but first we need to figure out how it should choose and how to enable you to guide the choice. No solution is evident. </p>\n<p>Defining a global register variable in a certain register reserves that register entirely for this use, at least within the current compilation. The register is not allocated for any other purpose in the functions in the current compilation, and is not saved and restored by these functions. Stores into this register are never deleted even if they appear to be dead, but references may be deleted or moved or simplified. </p>\n<p>It is not safe to access the global register variables from signal handlers, or from more than one thread of control, because the system library routines may temporarily use the register for other things (unless you recompile them specially for the task at hand). </p>\n<p>It is not safe for one function that uses a global register variable to call another such function <code>foo</code> by way of a third function <code>lose</code> that is compiled without knowledge of this variable (i.e. in a different source file in which the variable isn't declared). This is because <code>lose</code> might save the register and put some other value there. For example, you can't expect a global register variable to be available in the comparison-function that you pass to <code>qsort</code>, since <code>qsort</code> might have put something else in that register. (If you are prepared to recompile <code>qsort</code> with the same global register variable, you can solve this problem.) </p>\n<p>If you want to recompile <code>qsort</code> or other source files that do not actually use your global register variable, so that they do not use that register for any other purpose, then it suffices to specify the compiler option <samp><span class=\"option\">-ffixed-</span><var>reg</var></samp>. You need not actually add a global register declaration to their source code. </p>\n<p>A function that can alter the value of a global register variable cannot safely be called from a function compiled without this variable, because it could clobber the value the caller expects to find there on return. Therefore, the function that is the entry point into the part of the program that uses the global register variable must explicitly save and restore the value that belongs to its caller. </p>\n<p>On most machines, <code>longjmp</code> restores to each global register variable the value it had at the time of the <code>setjmp</code>. On some machines, however, <code>longjmp</code> does not change the value of global register variables. To be portable, the function that called <code>setjmp</code> should make other arrangements to save the values of the global register variables, and to restore them in a <code>longjmp</code>. This way, the same thing happens regardless of what <code>longjmp</code> does. </p>\n<p>All global register variable declarations must precede all function definitions. If such a declaration could appear after function definitions, the declaration would be too late to prevent the register from being used for other purposes in the preceding functions. </p>\n<p>Global register variables may not have initial values, because an executable file has no means to supply initial contents for a register. </p>\n<p>On the SPARC, there are reports that g3 <small class=\"dots\">...</small> g7 are suitable registers, but certain library functions, such as <code>getwd</code>, as well as the subroutines for division and remainder, modify g3 and g4. g1 and g2 are local temporaries. </p>\n<p>On the 68000, a2 <small class=\"dots\">...</small> a5 should be suitable, as should d2 <small class=\"dots\">...</small> d7. Of course, it does not do to use more than a few of those. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Global-Reg-Vars.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Global-Reg-Vars.html</a>\n  </p>\n</div>\n","local-reg-vars":"<h1 class=\"subsection\" id=\"Local-Reg-Vars\">6.44.2 Specifying Registers for Local Variables</h1> <p> You can define a local register variable with a specified register like this: </p>\n<pre class=\"smallexample\">register int *foo asm (\"a5\");</pre> <p class=\"noindent\">Here <code>a5</code> is the name of the register that should be used. Note that this is the same syntax used for defining global register variables, but for a local variable it appears within a function. </p>\n<p>Naturally the register name is cpu-dependent, but this is not a problem, since specific registers are most often useful with explicit assembler instructions (see <a href=\"extended-asm#Extended-Asm\">Extended Asm</a>). Both of these things generally require that you conditionalize your program according to cpu type. </p>\n<p>In addition, operating systems on one type of cpu may differ in how they name the registers; then you need additional conditionals. For example, some 68000 operating systems call this register <code>%a5</code>. </p>\n<p>Defining such a register variable does not reserve the register; it remains available for other uses in places where flow control determines the variable's value is not live. </p>\n<p>This option does not guarantee that GCC generates code that has this variable in the register you specify at all times. You may not code an explicit reference to this register in the <em>assembler instruction template</em> part of an <code>asm</code> statement and assume it always refers to this variable. However, using the variable as an <code>asm</code> <em>operand</em> guarantees that the specified register is used for the operand. </p>\n<p>Stores into local register variables may be deleted when they appear to be dead according to dataflow analysis. References to local register variables may be deleted or moved or simplified. </p>\n<p>As for global register variables, it's recommended that you choose a register that is normally saved and restored by function calls on your machine, so that library routines will not clobber it. A common pitfall is to initialize multiple call-clobbered registers with arbitrary expressions, where a function call or library call for an arithmetic operator overwrites a register value from a previous assignment, for example <code>r0</code> below: </p>\n<pre class=\"smallexample\">register int *p1 asm (\"r0\") = ...;\nregister int *p2 asm (\"r1\") = ...;</pre> <p class=\"noindent\">In those cases, a solution is to use a temporary variable for each arbitrary expression. See <a href=\"extended-asm#Example-of-asm-with-clobbered-asm-reg\">Example of asm with clobbered asm reg</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Local-Reg-Vars.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Local-Reg-Vars.html</a>\n  </p>\n</div>\n","alternate-keywords":"<h1 class=\"section\" id=\"Alternate-Keywords\">6.45 Alternate Keywords</h1> <p> <code>-ansi</code> and the various <code>-std</code> options disable certain keywords. This causes trouble when you want to use GNU C extensions, or a general-purpose header file that should be usable by all programs, including ISO C programs. The keywords <code>asm</code>, <code>typeof</code> and <code>inline</code> are not available in programs compiled with <code>-ansi</code> or <code>-std</code> (although <code>inline</code> can be used in a program compiled with <code>-std=c99</code> or <code>-std=c11</code>). The ISO C99 keyword <code>restrict</code> is only available when <code>-std=gnu99</code> (which will eventually be the default) or <code>-std=c99</code> (or the equivalent <code>-std=iso9899:1999</code>), or an option for a later standard version, is used. </p>\n<p>The way to solve these problems is to put ‘<code>__</code>’ at the beginning and end of each problematical keyword. For example, use <code>__asm__</code> instead of <code>asm</code>, and <code>__inline__</code> instead of <code>inline</code>. </p>\n<p>Other C compilers won't accept these alternative keywords; if you want to compile with another compiler, you can define the alternate keywords as macros to replace them with the customary keywords. It looks like this: </p>\n<pre class=\"smallexample\">#ifndef __GNUC__\n#define __asm__ asm\n#endif</pre> <p><code>-pedantic</code> and other options cause warnings for many GNU C extensions. You can prevent such warnings within one expression by writing <code>__extension__</code> before the expression. <code>__extension__</code> has no effect aside from this. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Alternate-Keywords.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Alternate-Keywords.html</a>\n  </p>\n</div>\n","incomplete-enums":"<h1 class=\"section\" id=\"Incomplete-Enums\">6.46 Incomplete <code>enum</code> Types</h1> <p>You can define an <code>enum</code> tag without specifying its possible values. This results in an incomplete type, much like what you get if you write <code>struct foo</code> without describing the elements. A later declaration that does specify the possible values completes the type. </p>\n<p>You can't allocate variables or storage using the type while it is incomplete. However, you can work with pointers to that type. </p>\n<p>This extension may not be very useful, but it makes the handling of <code>enum</code> more consistent with the way <code>struct</code> and <code>union</code> are handled. </p>\n<p>This extension is not supported by GNU C++. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Incomplete-Enums.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Incomplete-Enums.html</a>\n  </p>\n</div>\n","function-names":"<h1 class=\"section\" id=\"Function-Names\">6.47 Function Names as Strings</h1> <p> GCC provides three magic variables that hold the name of the current function, as a string. The first of these is <code>__func__</code>, which is part of the C99 standard: </p>\n<p>The identifier <code>__func__</code> is implicitly declared by the translator as if, immediately following the opening brace of each function definition, the declaration </p>\n<pre class=\"smallexample\">static const char __func__[] = \"function-name\";</pre> <p class=\"noindent\">appeared, where function-name is the name of the lexically-enclosing function. This name is the unadorned name of the function. </p>\n<p><code>__FUNCTION__</code> is another name for <code>__func__</code>. Older versions of GCC recognize only this name. However, it is not standardized. For maximum portability, we recommend you use <code>__func__</code>, but provide a fallback definition with the preprocessor: </p>\n<pre class=\"smallexample\">#if __STDC_VERSION__ &lt; 199901L\n# if __GNUC__ &gt;= 2\n#  define __func__ __FUNCTION__\n# else\n#  define __func__ \"&lt;unknown&gt;\"\n# endif\n#endif</pre> <p>In C, <code>__PRETTY_FUNCTION__</code> is yet another name for <code>__func__</code>. However, in C++, <code>__PRETTY_FUNCTION__</code> contains the type signature of the function as well as its bare name. For example, this program: </p>\n<pre class=\"smallexample\">extern \"C\" {\nextern int printf (char *, ...);\n}\n\nclass a {\n public:\n  void sub (int i)\n    {\n      printf (\"__FUNCTION__ = %s\\n\", __FUNCTION__);\n      printf (\"__PRETTY_FUNCTION__ = %s\\n\", __PRETTY_FUNCTION__);\n    }\n};\n\nint\nmain (void)\n{\n  a ax;\n  ax.sub (0);\n  return 0;\n}</pre> <p class=\"noindent\">gives this output: </p>\n<pre class=\"smallexample\">__FUNCTION__ = sub\n__PRETTY_FUNCTION__ = void a::sub(int)</pre> <p>These identifiers are not preprocessor macros. In GCC 3.3 and earlier, in C only, <code>__FUNCTION__</code> and <code>__PRETTY_FUNCTION__</code> were treated as string literals; they could be used to initialize <code>char</code> arrays, and they could be concatenated with other string literals. GCC 3.4 and later treat them as variables, like <code>__func__</code>. In C++, <code>__FUNCTION__</code> and <code>__PRETTY_FUNCTION__</code> have always been variables. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Names.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Names.html</a>\n  </p>\n</div>\n","return-address":"<h1 class=\"section\" id=\"Return-Address\">6.48 Getting the Return or Frame Address of a Function</h1> <p>These functions may be used to get information about the callers of a function. </p>\n<div class=\"defun\"> — Built-in Function: void * <b>__builtin_return_address</b> (<var>unsigned int level</var>) <blockquote>\n<p>This function returns the return address of the current function, or of one of its callers. The <var>level</var> argument is number of frames to scan up the call stack. A value of <code>0</code> yields the return address of the current function, a value of <code>1</code> yields the return address of the caller of the current function, and so forth. When inlining the expected behavior is that the function returns the address of the function that is returned to. To work around this behavior use the <code>noinline</code> function attribute. </p>\n<p>The <var>level</var> argument must be a constant integer. </p>\n<p>On some machines it may be impossible to determine the return address of any function other than the current one; in such cases, or when the top of the stack has been reached, this function returns <code>0</code> or a random value. In addition, <code>__builtin_frame_address</code> may be used to determine if the top of the stack has been reached. </p>\n<p>Additional post-processing of the returned value may be needed, see <code>__builtin_extract_return_addr</code>. </p>\n<p>This function should only be used with a nonzero argument for debugging purposes. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void * <b>__builtin_extract_return_addr</b> (<var>void *addr</var>) <blockquote>\n<p>The address as returned by <code>__builtin_return_address</code> may have to be fed through this function to get the actual encoded address. For example, on the 31-bit S/390 platform the highest bit has to be masked out, or on SPARC platforms an offset has to be added for the true next instruction to be executed. </p>\n<p>If no fixup is needed, this function simply passes through <var>addr</var>. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void * <b>__builtin_frob_return_address</b> (<var>void *addr</var>) <blockquote><p>This function does the reverse of <code>__builtin_extract_return_addr</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void * <b>__builtin_frame_address</b> (<var>unsigned int level</var>) <blockquote>\n<p>This function is similar to <code>__builtin_return_address</code>, but it returns the address of the function frame rather than the return address of the function. Calling <code>__builtin_frame_address</code> with a value of <code>0</code> yields the frame address of the current function, a value of <code>1</code> yields the frame address of the caller of the current function, and so forth. </p>\n<p>The frame is the area on the stack that holds local variables and saved registers. The frame address is normally the address of the first word pushed on to the stack by the function. However, the exact definition depends upon the processor and the calling convention. If the processor has a dedicated frame pointer register, and the function has a frame, then <code>__builtin_frame_address</code> returns the value of the frame pointer register. </p>\n<p>On some machines it may be impossible to determine the frame address of any function other than the current one; in such cases, or when the top of the stack has been reached, this function returns <code>0</code> if the first frame pointer is properly initialized by the startup code. </p>\n<p>This function should only be used with a nonzero argument for debugging purposes. </p>\n</blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Return-Address.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Return-Address.html</a>\n  </p>\n</div>\n","vector-extensions":"<h1 class=\"section\" id=\"Vector-Extensions\">6.49 Using Vector Instructions through Built-in Functions</h1> <p>On some targets, the instruction set contains SIMD vector instructions which operate on multiple values contained in one large register at the same time. For example, on the i386 the MMX, 3DNow! and SSE extensions can be used this way. </p>\n<p>The first step in using these extensions is to provide the necessary data types. This should be done using an appropriate <code>typedef</code>: </p>\n<pre class=\"smallexample\">typedef int v4si __attribute__ ((vector_size (16)));</pre> <p class=\"noindent\">The <code>int</code> type specifies the base type, while the attribute specifies the vector size for the variable, measured in bytes. For example, the declaration above causes the compiler to set the mode for the <code>v4si</code> type to be 16 bytes wide and divided into <code>int</code> sized units. For a 32-bit <code>int</code> this means a vector of 4 units of 4 bytes, and the corresponding mode of <code>foo</code> is V4SI. </p>\n<p>The <code>vector_size</code> attribute is only applicable to integral and float scalars, although arrays, pointers, and function return values are allowed in conjunction with this construct. Only sizes that are a power of two are currently allowed. </p>\n<p>All the basic integer types can be used as base types, both as signed and as unsigned: <code>char</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code>. In addition, <code>float</code> and <code>double</code> can be used to build floating-point vector types. </p>\n<p>Specifying a combination that is not valid for the current architecture causes GCC to synthesize the instructions using a narrower mode. For example, if you specify a variable of type <code>V4SI</code> and your architecture does not allow for this specific SIMD type, GCC produces code that uses 4 <code>SIs</code>. </p>\n<p>The types defined in this manner can be used with a subset of normal C operations. Currently, GCC allows using the following operators on these types: <code>+, -, *, /, unary minus, ^, |, &amp;, ~, %</code>. </p>\n<p>The operations behave like C++ <code>valarrays</code>. Addition is defined as the addition of the corresponding elements of the operands. For example, in the code below, each of the 4 elements in <var>a</var> is added to the corresponding 4 elements in <var>b</var> and the resulting vector is stored in <var>c</var>. </p>\n<pre class=\"smallexample\">typedef int v4si __attribute__ ((vector_size (16)));\n\nv4si a, b, c;\n\nc = a + b;</pre> <p>Subtraction, multiplication, division, and the logical operations operate in a similar manner. Likewise, the result of using the unary minus or complement operators on a vector type is a vector whose elements are the negative or complemented values of the corresponding elements in the operand. </p>\n<p>It is possible to use shifting operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code> on integer-type vectors. The operation is defined as following: <code>{a0,\na1, ..., an} &gt;&gt; {b0, b1, ..., bn} == {a0 &gt;&gt; b0, a1 &gt;&gt; b1,\n..., an &gt;&gt; bn}</code>. Vector operands must have the same number of elements. </p>\n<p>For convenience, it is allowed to use a binary vector operation where one operand is a scalar. In that case the compiler transforms the scalar operand into a vector where each element is the scalar from the operation. The transformation happens only if the scalar could be safely converted to the vector-element type. Consider the following code. </p>\n<pre class=\"smallexample\">typedef int v4si __attribute__ ((vector_size (16)));\n\nv4si a, b, c;\nlong l;\n\na = b + 1;    /* a = b + {1,1,1,1}; */\na = 2 * b;    /* a = {2,2,2,2} * b; */\n\na = l + a;    /* Error, cannot convert long to int. */</pre> <p>Vectors can be subscripted as if the vector were an array with the same number of elements and base type. Out of bound accesses invoke undefined behavior at run time. Warnings for out of bound accesses for vector subscription can be enabled with <code>-Warray-bounds</code>. </p>\n<p>Vector comparison is supported with standard comparison operators: <code>==, !=, &lt;, &lt;=, &gt;, &gt;=</code>. Comparison operands can be vector expressions of integer-type or real-type. Comparison between integer-type vectors and real-type vectors are not supported. The result of the comparison is a vector of the same width and number of elements as the comparison operands with a signed integral element type. </p>\n<p>Vectors are compared element-wise producing 0 when comparison is false and -1 (constant of the appropriate type where all bits are set) otherwise. Consider the following example. </p>\n<pre class=\"smallexample\">typedef int v4si __attribute__ ((vector_size (16)));\n\nv4si a = {1,2,3,4};\nv4si b = {3,2,1,4};\nv4si c;\n\nc = a &gt;  b;     /* The result would be {0, 0,-1, 0}  */\nc = a == b;     /* The result would be {0,-1, 0,-1}  */</pre> <p>In C++, the ternary operator <code>?:</code> is available. <code>a?b:c</code>, where <code>b</code> and <code>c</code> are vectors of the same type and <code>a</code> is an integer vector with the same number of elements of the same size as <code>b</code> and <code>c</code>, computes all three arguments and creates a vector <code>{a[0]?b[0]:c[0], a[1]?b[1]:c[1], ...}</code>. Note that unlike in OpenCL, <code>a</code> is thus interpreted as <code>a != 0</code> and not <code>a &lt; 0</code>. As in the case of binary operations, this syntax is also accepted when one of <code>b</code> or <code>c</code> is a scalar that is then transformed into a vector. If both <code>b</code> and <code>c</code> are scalars and the type of <code>true?b:c</code> has the same size as the element type of <code>a</code>, then <code>b</code> and <code>c</code> are converted to a vector type whose elements have this type and with the same number of elements as <code>a</code>. </p>\n<p>Vector shuffling is available using functions <code>__builtin_shuffle (vec, mask)</code> and <code>__builtin_shuffle (vec0, vec1, mask)</code>. Both functions construct a permutation of elements from one or two vectors and return a vector of the same type as the input vector(s). The <var>mask</var> is an integral vector with the same width (<var>W</var>) and element count (<var>N</var>) as the output vector. </p>\n<p>The elements of the input vectors are numbered in memory ordering of <var>vec0</var> beginning at 0 and <var>vec1</var> beginning at <var>N</var>. The elements of <var>mask</var> are considered modulo <var>N</var> in the single-operand case and modulo 2*<var>N</var> in the two-operand case. </p>\n<p>Consider the following example, </p>\n<pre class=\"smallexample\">typedef int v4si __attribute__ ((vector_size (16)));\n\nv4si a = {1,2,3,4};\nv4si b = {5,6,7,8};\nv4si mask1 = {0,1,1,3};\nv4si mask2 = {0,4,2,5};\nv4si res;\n\nres = __builtin_shuffle (a, mask1);       /* res is {1,2,2,4}  */\nres = __builtin_shuffle (a, b, mask2);    /* res is {1,5,3,6}  */</pre> <p>Note that <code>__builtin_shuffle</code> is intentionally semantically compatible with the OpenCL <code>shuffle</code> and <code>shuffle2</code> functions. </p>\n<p>You can declare variables and use them in function calls and returns, as well as in assignments and some casts. You can specify a vector type as a return type for a function. Vector types can also be used as function arguments. It is possible to cast from one vector type to another, provided they are of the same size (in fact, you can also cast vectors to and from other datatypes of the same size). </p>\n<p>You cannot operate between vectors of different lengths or different signedness without a cast. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Vector-Extensions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Vector-Extensions.html</a>\n  </p>\n</div>\n","offsetof":"<h1 class=\"section\" id=\"Offsetof\">6.50 Offsetof</h1> <p> GCC implements for both C and C++ a syntactic extension to implement the <code>offsetof</code> macro. </p>\n<pre class=\"smallexample\">primary:\n        \"__builtin_offsetof\" \"(\" <code>typename</code> \",\" offsetof_member_designator \")\"\n\noffsetof_member_designator:\n          <code>identifier</code>\n        | offsetof_member_designator \".\" <code>identifier</code>\n        | offsetof_member_designator \"[\" <code>expr</code> \"]\"</pre> <p>This extension is sufficient such that </p>\n<pre class=\"smallexample\">#define offsetof(<var>type</var>, <var>member</var>)  __builtin_offsetof (<var>type</var>, <var>member</var>)</pre> <p class=\"noindent\">is a suitable definition of the <code>offsetof</code> macro. In C++, <var>type</var> may be dependent. In either case, <var>member</var> may consist of a single identifier, or a sequence of member accesses and array references. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Offsetof.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Offsetof.html</a>\n  </p>\n</div>\n","_005f_005fsync-builtins":"<h1 class=\"section\" id=\"g_t_005f_005fsync-Builtins\">6.51 Legacy __sync Built-in Functions for Atomic Memory Access</h1> <p>The following built-in functions are intended to be compatible with those described in the Intel Itanium Processor-specific Application Binary Interface, section 7.4. As such, they depart from the normal GCC practice of using the ‘<code>__builtin_</code>’ prefix, and further that they are overloaded such that they work on multiple types. </p>\n<p>The definition given in the Intel documentation allows only for the use of the types <code>int</code>, <code>long</code>, <code>long long</code> as well as their unsigned counterparts. GCC allows any integral scalar or pointer type that is 1, 2, 4 or 8 bytes in length. </p>\n<p>Not all operations are supported by all target processors. If a particular operation cannot be implemented on the target processor, a warning is generated and a call an external function is generated. The external function carries the same name as the built-in version, with an additional suffix ‘<samp><span class=\"samp\">_</span><var>n</var></samp>’ where <var>n</var> is the size of the data type.    </p>\n<p>In most cases, these built-in functions are considered a full barrier. That is, no memory operand is moved across the operation, either forward or backward. Further, instructions are issued as necessary to prevent the processor from speculating loads across the operation and from queuing stores after the operation. </p>\n<p>All of the routines are described in the Intel documentation to take “an optional list of variables protected by the memory barrier”. It's not clear what is meant by that; it could mean that <em>only</em> the following variables are protected, or it could mean that these variables should in addition be protected. At present GCC ignores this list and protects all variables that are globally accessible. If in the future we make some use of this list, an empty list will continue to mean all globally accessible variables. </p>\n<dl> <dt>\n<var>type</var><code> __sync_fetch_and_add (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_fetch_and_sub (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_fetch_and_or (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_fetch_and_and (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_fetch_and_xor (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_fetch_and_nand (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThese built-in functions perform the operation suggested by the name, and returns the value that had previously been in memory. That is, <pre class=\"smallexample\">{ tmp = *ptr; *ptr <var>op</var>= value; return tmp; }\n{ tmp = *ptr; *ptr = ~(tmp &amp; value); return tmp; }   // nand</pre> <p><em>Note:</em> GCC 4.4 and later implement <code>__sync_fetch_and_nand</code> as <code>*ptr = ~(tmp &amp; value)</code> instead of <code>*ptr = ~tmp &amp; value</code>. </p>\n</dd>\n<dt>\n<var>type</var><code> __sync_add_and_fetch (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_sub_and_fetch (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_or_and_fetch (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_and_and_fetch (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_xor_and_fetch (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code><dt>\n<var>type</var><code> __sync_nand_and_fetch (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThese built-in functions perform the operation suggested by the name, and return the new value. That is, <pre class=\"smallexample\">{ *ptr <var>op</var>= value; return *ptr; }\n{ *ptr = ~(*ptr &amp; value); return *ptr; }   // nand</pre> <p><em>Note:</em> GCC 4.4 and later implement <code>__sync_nand_and_fetch</code> as <code>*ptr = ~(*ptr &amp; value)</code> instead of <code>*ptr = ~*ptr &amp; value</code>. </p>\n</dd>\n<dt>\n<code>bool __sync_bool_compare_and_swap (</code><var>type</var><code> *ptr, </code><var>type</var><code> oldval, </code><var>type</var><code> newval, ...)</code><dt>\n<var>type</var><code> __sync_val_compare_and_swap (</code><var>type</var><code> *ptr, </code><var>type</var><code> oldval, </code><var>type</var><code> newval, ...)</code>\n</dt>\n</dt>\n<dd>\nThese built-in functions perform an atomic compare and swap. That is, if the current value of <code>*</code><var>ptr</var> is <var>oldval</var>, then write <var>newval</var> into <code>*</code><var>ptr</var>. <p>The “bool” version returns true if the comparison is successful and <var>newval</var> is written. The “val” version returns the contents of <code>*</code><var>ptr</var> before the operation. </p>\n</dd>\n<dt><code>__sync_synchronize (...)</code></dt>\n<dd>\nThis built-in function issues a full memory barrier. </dd>\n<dt>\n<var>type</var><code> __sync_lock_test_and_set (</code><var>type</var><code> *ptr, </code><var>type</var><code> value, ...)</code>\n</dt>\n<dd>\nThis built-in function, as described by Intel, is not a traditional test-and-set operation, but rather an atomic exchange operation. It writes <var>value</var> into <code>*</code><var>ptr</var>, and returns the previous contents of <code>*</code><var>ptr</var>. <p>Many targets have only minimal support for such locks, and do not support a full exchange operation. In this case, a target may support reduced functionality here by which the <em>only</em> valid value to store is the immediate constant 1. The exact value actually stored in <code>*</code><var>ptr</var> is implementation defined. </p>\n<p>This built-in function is not a full barrier, but rather an acquire barrier. This means that references after the operation cannot move to (or be speculated to) before the operation, but previous memory stores may not be globally visible yet, and previous memory loads may not yet be satisfied. </p>\n</dd>\n<dt>\n<code>void __sync_lock_release (</code><var>type</var><code> *ptr, ...)</code>\n</dt>\n<dd>\nThis built-in function releases the lock acquired by <code>__sync_lock_test_and_set</code>. Normally this means writing the constant 0 to <code>*</code><var>ptr</var>. <p>This built-in function is not a full barrier, but rather a release barrier. This means that all previous memory stores are globally visible, and all previous memory loads have been satisfied, but following memory reads are not prevented from being speculated to before the barrier. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/_005f_005fsync-Builtins.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/_005f_005fsync-Builtins.html</a>\n  </p>\n</div>\n","_005f_005fatomic-builtins":"<h1 class=\"section\" id=\"g_t_005f_005fatomic-Builtins\">6.52 Built-in functions for memory model aware atomic operations</h1> <p>The following built-in functions approximately match the requirements for C++11 memory model. Many are similar to the ‘<code>__sync</code>’ prefixed built-in functions, but all also have a memory model parameter. These are all identified by being prefixed with ‘<code>__atomic</code>’, and most are overloaded such that they work with multiple types. </p>\n<p>GCC allows any integral scalar or pointer type that is 1, 2, 4, or 8 bytes in length. 16-byte integral types are also allowed if ‘<code>__int128</code>’ (see <a href=\"_005f_005fint128#g_t_005f_005fint128\">__int128</a>) is supported by the architecture. </p>\n<p>Target architectures are encouraged to provide their own patterns for each of these built-in functions. If no target is provided, the original non-memory model set of ‘<code>__sync</code>’ atomic built-in functions are utilized, along with any required synchronization fences surrounding it in order to achieve the proper behavior. Execution in this case is subject to the same restrictions as those built-in functions. </p>\n<p>If there is no pattern or mechanism to provide a lock free instruction sequence, a call is made to an external routine with the same parameters to be resolved at run time. </p>\n<p>The four non-arithmetic functions (load, store, exchange, and compare_exchange) all have a generic version as well. This generic version works on any data type. If the data type size maps to one of the integral sizes that may have lock free support, the generic version utilizes the lock free built-in function. Otherwise an external call is left to be resolved at run time. This external call is the same format with the addition of a ‘<code>size_t</code>’ parameter inserted as the first parameter indicating the size of the object being pointed to. All objects must be the same size. </p>\n<p>There are 6 different memory models that can be specified. These map to the same names in the C++11 standard. Refer there or to the <a href=\"http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync\">GCC wiki on atomic synchronization</a> for more detailed definitions. These memory models integrate both barriers to code motion as well as synchronization requirements with other threads. These are listed in approximately ascending order of strength. It is also possible to use target specific flags for memory model flags, like Hardware Lock Elision. </p>\n<dl> <dt><code>__ATOMIC_RELAXED</code></dt>\n<dd>No barriers or synchronization. </dd>\n<dt><code>__ATOMIC_CONSUME</code></dt>\n<dd>Data dependency only for both barrier and synchronization with another thread. </dd>\n<dt><code>__ATOMIC_ACQUIRE</code></dt>\n<dd>Barrier to hoisting of code and synchronizes with release (or stronger) semantic stores from another thread. </dd>\n<dt><code>__ATOMIC_RELEASE</code></dt>\n<dd>Barrier to sinking of code and synchronizes with acquire (or stronger) semantic loads from another thread. </dd>\n<dt><code>__ATOMIC_ACQ_REL</code></dt>\n<dd>Full barrier in both directions and synchronizes with acquire loads and release stores in another thread. </dd>\n<dt><code>__ATOMIC_SEQ_CST</code></dt>\n<dd>Full barrier in both directions and synchronizes with acquire loads and release stores in all threads. </dd>\n</dl> <p>When implementing patterns for these built-in functions, the memory model parameter can be ignored as long as the pattern implements the most restrictive <code>__ATOMIC_SEQ_CST</code> model. Any of the other memory models execute correctly with this memory model but they may not execute as efficiently as they could with a more appropriate implementation of the relaxed requirements. </p>\n<p>Note that the C++11 standard allows for the memory model parameter to be determined at run time rather than at compile time. These built-in functions map any run-time value to <code>__ATOMIC_SEQ_CST</code> rather than invoke a runtime library call or inline a switch statement. This is standard compliant, safe, and the simplest approach for now. </p>\n<p>The memory model parameter is a signed int, but only the lower 8 bits are reserved for the memory model. The remainder of the signed int is reserved for future use and should be 0. Use of the predefined atomic values ensures proper usage. </p>\n<div class=\"defun\"> — Built-in Function: <var>type</var> <b>__atomic_load_n</b> (<var>type *ptr, int memmodel</var>) <blockquote>\n<p>This built-in function implements an atomic load operation. It returns the contents of <code>*</code><var>ptr</var>. </p>\n<p>The valid memory model variants are <code>__ATOMIC_RELAXED</code>, <code>__ATOMIC_SEQ_CST</code>, <code>__ATOMIC_ACQUIRE</code>, and <code>__ATOMIC_CONSUME</code>. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__atomic_load</b> (<var>type *ptr, type *ret, int memmodel</var>) <blockquote><p>This is the generic version of an atomic load. It returns the contents of <code>*</code><var>ptr</var> in <code>*</code><var>ret</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__atomic_store_n</b> (<var>type *ptr, type val, int memmodel</var>) <blockquote>\n<p>This built-in function implements an atomic store operation. It writes <var>val</var> into <code>*</code><var>ptr</var>. </p>\n<p>The valid memory model variants are <code>__ATOMIC_RELAXED</code>, <code>__ATOMIC_SEQ_CST</code>, and <code>__ATOMIC_RELEASE</code>. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__atomic_store</b> (<var>type *ptr, type *val, int memmodel</var>) <blockquote><p>This is the generic version of an atomic store. It stores the value of <code>*</code><var>val</var> into <code>*</code><var>ptr</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: <var>type</var> <b>__atomic_exchange_n</b> (<var>type *ptr, type val, int memmodel</var>) <blockquote>\n<p>This built-in function implements an atomic exchange operation. It writes <var>val</var> into <code>*</code><var>ptr</var>, and returns the previous contents of <code>*</code><var>ptr</var>. </p>\n<p>The valid memory model variants are <code>__ATOMIC_RELAXED</code>, <code>__ATOMIC_SEQ_CST</code>, <code>__ATOMIC_ACQUIRE</code>, <code>__ATOMIC_RELEASE</code>, and <code>__ATOMIC_ACQ_REL</code>. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__atomic_exchange</b> (<var>type *ptr, type *val, type *ret, int memmodel</var>) <blockquote><p>This is the generic version of an atomic exchange. It stores the contents of <code>*</code><var>val</var> into <code>*</code><var>ptr</var>. The original value of <code>*</code><var>ptr</var> is copied into <code>*</code><var>ret</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: bool <b>__atomic_compare_exchange_n</b> (<var>type *ptr, type *expected, type desired, bool weak, int success_memmodel, int failure_memmodel</var>) <blockquote>\n<p>This built-in function implements an atomic compare and exchange operation. This compares the contents of <code>*</code><var>ptr</var> with the contents of <code>*</code><var>expected</var> and if equal, writes <var>desired</var> into <code>*</code><var>ptr</var>. If they are not equal, the current contents of <code>*</code><var>ptr</var> is written into <code>*</code><var>expected</var>. <var>weak</var> is true for weak compare_exchange, and false for the strong variation. Many targets only offer the strong variation and ignore the parameter. When in doubt, use the strong variation. </p>\n<p>True is returned if <var>desired</var> is written into <code>*</code><var>ptr</var> and the execution is considered to conform to the memory model specified by <var>success_memmodel</var>. There are no restrictions on what memory model can be used here. </p>\n<p>False is returned otherwise, and the execution is considered to conform to <var>failure_memmodel</var>. This memory model cannot be <code>__ATOMIC_RELEASE</code> nor <code>__ATOMIC_ACQ_REL</code>. It also cannot be a stronger model than that specified by <var>success_memmodel</var>. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: bool <b>__atomic_compare_exchange</b> (<var>type *ptr, type *expected, type *desired, bool weak, int success_memmodel, int failure_memmodel</var>) <blockquote><p>This built-in function implements the generic version of <code>__atomic_compare_exchange</code>. The function is virtually identical to <code>__atomic_compare_exchange_n</code>, except the desired value is also a pointer. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: <var>type</var> <b>__atomic_add_fetch</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_sub_fetch</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_and_fetch</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_xor_fetch</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_or_fetch</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_nand_fetch</b> (<var>type *ptr, type val, int memmodel</var>) <blockquote>\n<p>These built-in functions perform the operation suggested by the name, and return the result of the operation. That is, </p>\n<pre class=\"smallexample\">{ *ptr <var>op</var>= val; return *ptr; }</pre> <p>All memory models are valid. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: <var>type</var> <b>__atomic_fetch_add</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_fetch_sub</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_fetch_and</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_fetch_xor</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_fetch_or</b> (<var>type *ptr, type val, int memmodel</var>) — Built-in Function: <var>type</var> <b>__atomic_fetch_nand</b> (<var>type *ptr, type val, int memmodel</var>) <blockquote>\n<p>These built-in functions perform the operation suggested by the name, and return the value that had previously been in <code>*</code><var>ptr</var>. That is, </p>\n<pre class=\"smallexample\">{ tmp = *ptr; *ptr <var>op</var>= val; return tmp; }</pre> <p>All memory models are valid. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: bool <b>__atomic_test_and_set</b> (<var>void *ptr, int memmodel</var>) <blockquote> <p>This built-in function performs an atomic test-and-set operation on the byte at <code>*</code><var>ptr</var>. The byte is set to some implementation defined nonzero “set” value and the return value is <code>true</code> if and only if the previous contents were “set”. It should be only used for operands of type <code>bool</code> or <code>char</code>. For other types only part of the value may be set. </p>\n<p>All memory models are valid. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__atomic_clear</b> (<var>bool *ptr, int memmodel</var>) <blockquote> <p>This built-in function performs an atomic clear operation on <code>*</code><var>ptr</var>. After the operation, <code>*</code><var>ptr</var> contains 0. It should be only used for operands of type <code>bool</code> or <code>char</code> and in conjunction with <code>__atomic_test_and_set</code>. For other types it may only clear partially. If the type is not <code>bool</code> prefer using <code>__atomic_store</code>. </p>\n<p>The valid memory model variants are <code>__ATOMIC_RELAXED</code>, <code>__ATOMIC_SEQ_CST</code>, and <code>__ATOMIC_RELEASE</code>. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__atomic_thread_fence</b> (<var>int memmodel</var>) <blockquote> <p>This built-in function acts as a synchronization fence between threads based on the specified memory model. </p>\n<p>All memory orders are valid. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__atomic_signal_fence</b> (<var>int memmodel</var>) <blockquote> <p>This built-in function acts as a synchronization fence between a thread and signal handlers based in the same thread. </p>\n<p>All memory orders are valid. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: bool <b>__atomic_always_lock_free</b> (<var>size_t size, void *ptr</var>) <blockquote> <p>This built-in function returns true if objects of <var>size</var> bytes always generate lock free atomic instructions for the target architecture. <var>size</var> must resolve to a compile-time constant and the result also resolves to a compile-time constant. </p>\n<p><var>ptr</var> is an optional pointer to the object that may be used to determine alignment. A value of 0 indicates typical alignment should be used. The compiler may also ignore this parameter. </p>\n<pre class=\"smallexample\">if (_atomic_always_lock_free (sizeof (long long), 0))</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: bool <b>__atomic_is_lock_free</b> (<var>size_t size, void *ptr</var>) <blockquote> <p>This built-in function returns true if objects of <var>size</var> bytes always generate lock free atomic instructions for the target architecture. If it is not known to be lock free a call is made to a runtime routine named <code>__atomic_is_lock_free</code>. </p>\n<p><var>ptr</var> is an optional pointer to the object that may be used to determine alignment. A value of 0 indicates typical alignment should be used. The compiler may also ignore this parameter. </p>\n</blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/_005f_005fatomic-Builtins.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/_005f_005fatomic-Builtins.html</a>\n  </p>\n</div>\n","x86-specific-memory-model-extensions-for-transactional-memory":"<h1 class=\"section\" id=\"x86-specific-memory-model-extensions-for-transactional-memory\">6.53 x86 specific memory model extensions for transactional memory</h1> <p>The i386 architecture supports additional memory ordering flags to mark lock critical sections for hardware lock elision. These must be specified in addition to an existing memory model to atomic intrinsics. </p>\n<dl> <dt><code>__ATOMIC_HLE_ACQUIRE</code></dt>\n<dd>Start lock elision on a lock variable. Memory model must be <code>__ATOMIC_ACQUIRE</code> or stronger. </dd>\n<dt><code>__ATOMIC_HLE_RELEASE</code></dt>\n<dd>End lock elision on a lock variable. Memory model must be <code>__ATOMIC_RELEASE</code> or stronger. </dd>\n</dl> <p>When a lock acquire fails it is required for good performance to abort the transaction quickly. This can be done with a <code>_mm_pause</code> </p>\n<pre class=\"smallexample\">#include &lt;immintrin.h&gt; // For _mm_pause\n\nint lockvar;\n\n/* Acquire lock with lock elision */\nwhile (__atomic_exchange_n(&amp;lockvar, 1, __ATOMIC_ACQUIRE|__ATOMIC_HLE_ACQUIRE))\n    _mm_pause(); /* Abort failed transaction */\n...\n/* Free lock with lock elision */\n__atomic_store_n(&amp;lockvar, 0, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/x86-specific-memory-model-extensions-for-transactional-memory.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/x86-specific-memory-model-extensions-for-transactional-memory.html</a>\n  </p>\n</div>\n","object-size-checking":"<h1 class=\"section\" id=\"Object-Size-Checking\">6.54 Object Size Checking Built-in Functions</h1> <p> GCC implements a limited buffer overflow protection mechanism that can prevent some buffer overflow attacks. </p>\n<div class=\"defun\"> — Built-in Function: size_t <b>__builtin_object_size</b> (<var>void * ptr, int type</var>) <blockquote>\n<p>is a built-in construct that returns a constant number of bytes from <var>ptr</var> to the end of the object <var>ptr</var> pointer points to (if known at compile time). <code>__builtin_object_size</code> never evaluates its arguments for side-effects. If there are any side-effects in them, it returns <code>(size_t) -1</code> for <var>type</var> 0 or 1 and <code>(size_t) 0</code> for <var>type</var> 2 or 3. If there are multiple objects <var>ptr</var> can point to and all of them are known at compile time, the returned number is the maximum of remaining byte counts in those objects if <var>type</var> &amp; 2 is 0 and minimum if nonzero. If it is not possible to determine which objects <var>ptr</var> points to at compile time, <code>__builtin_object_size</code> should return <code>(size_t) -1</code> for <var>type</var> 0 or 1 and <code>(size_t) 0</code> for <var>type</var> 2 or 3. </p>\n<p><var>type</var> is an integer constant from 0 to 3. If the least significant bit is clear, objects are whole variables, if it is set, a closest surrounding subobject is considered the object a pointer points to. The second bit determines if maximum or minimum of remaining bytes is computed. </p>\n<pre class=\"smallexample\">struct V { char buf1[10]; int b; char buf2[10]; } var;\nchar *p = &amp;var.buf1[1], *q = &amp;var.b;\n\n/* Here the object p points to is var.  */\nassert (__builtin_object_size (p, 0) == sizeof (var) - 1);\n/* The subobject p points to is var.buf1.  */\nassert (__builtin_object_size (p, 1) == sizeof (var.buf1) - 1);\n/* The object q points to is var.  */\nassert (__builtin_object_size (q, 0)\n        == (char *) (&amp;var + 1) - (char *) &amp;var.b);\n/* The subobject q points to is var.b.  */\nassert (__builtin_object_size (q, 1) == sizeof (var.b));</pre> </blockquote>\n</div> <p>There are built-in functions added for many common string operation functions, e.g., for <code>memcpy</code> <code>__builtin___memcpy_chk</code> built-in is provided. This built-in has an additional last argument, which is the number of bytes remaining in object the <var>dest</var> argument points to or <code>(size_t) -1</code> if the size is not known. </p>\n<p>The built-in functions are optimized into the normal string functions like <code>memcpy</code> if the last argument is <code>(size_t) -1</code> or if it is known at compile time that the destination object will not be overflown. If the compiler can determine at compile time the object will be always overflown, it issues a warning. </p>\n<p>The intended use can be e.g. </p>\n<pre class=\"smallexample\">#undef memcpy\n#define bos0(dest) __builtin_object_size (dest, 0)\n#define memcpy(dest, src, n) \\\n  __builtin___memcpy_chk (dest, src, n, bos0 (dest))\n\nchar *volatile p;\nchar buf[10];\n/* It is unknown what object p points to, so this is optimized\n   into plain memcpy - no checking is possible.  */\nmemcpy (p, \"abcde\", n);\n/* Destination is known and length too.  It is known at compile\n   time there will be no overflow.  */\nmemcpy (&amp;buf[5], \"abcde\", 5);\n/* Destination is known, but the length is not known at compile time.\n   This will result in __memcpy_chk call that can check for overflow\n   at run time.  */\nmemcpy (&amp;buf[5], \"abcde\", n);\n/* Destination is known and it is known at compile time there will\n   be overflow.  There will be a warning and __memcpy_chk call that\n   will abort the program at run time.  */\nmemcpy (&amp;buf[6], \"abcde\", 5);</pre> <p>Such built-in functions are provided for <code>memcpy</code>, <code>mempcpy</code>, <code>memmove</code>, <code>memset</code>, <code>strcpy</code>, <code>stpcpy</code>, <code>strncpy</code>, <code>strcat</code> and <code>strncat</code>. </p>\n<p>There are also checking built-in functions for formatted output functions. </p>\n<pre class=\"smallexample\">int __builtin___sprintf_chk (char *s, int flag, size_t os, const char *fmt, ...);\nint __builtin___snprintf_chk (char *s, size_t maxlen, int flag, size_t os,\n                              const char *fmt, ...);\nint __builtin___vsprintf_chk (char *s, int flag, size_t os, const char *fmt,\n                              va_list ap);\nint __builtin___vsnprintf_chk (char *s, size_t maxlen, int flag, size_t os,\n                               const char *fmt, va_list ap);</pre> <p>The added <var>flag</var> argument is passed unchanged to <code>__sprintf_chk</code> etc. functions and can contain implementation specific flags on what additional security measures the checking function might take, such as handling <code>%n</code> differently. </p>\n<p>The <var>os</var> argument is the object size <var>s</var> points to, like in the other built-in functions. There is a small difference in the behavior though, if <var>os</var> is <code>(size_t) -1</code>, the built-in functions are optimized into the non-checking functions only if <var>flag</var> is 0, otherwise the checking function is called with <var>os</var> argument set to <code>(size_t) -1</code>. </p>\n<p>In addition to this, there are checking built-in functions <code>__builtin___printf_chk</code>, <code>__builtin___vprintf_chk</code>, <code>__builtin___fprintf_chk</code> and <code>__builtin___vfprintf_chk</code>. These have just one additional argument, <var>flag</var>, right before format string <var>fmt</var>. If the compiler is able to optimize them to <code>fputc</code> etc. functions, it does, otherwise the checking function is called and the <var>flag</var> argument passed to it. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Object-Size-Checking.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Object-Size-Checking.html</a>\n  </p>\n</div>\n","cilk-plus-builtins":"<h1 class=\"section\" id=\"Cilk-Plus-Builtins\">6.55 Cilk Plus C/C++ language extension Built-in Functions.</h1> <p>GCC provides support for the following built-in reduction funtions if Cilk Plus is enabled. Cilk Plus can be enabled using the <code>-fcilkplus</code> flag. </p>\n<ul> <li>__sec_implicit_index </li>\n<li>__sec_reduce </li>\n<li>__sec_reduce_add </li>\n<li>__sec_reduce_all_nonzero </li>\n<li>__sec_reduce_all_zero </li>\n<li>__sec_reduce_any_nonzero </li>\n<li>__sec_reduce_any_zero </li>\n<li>__sec_reduce_max </li>\n<li>__sec_reduce_min </li>\n<li>__sec_reduce_max_ind </li>\n<li>__sec_reduce_min_ind </li>\n<li>__sec_reduce_mul </li>\n<li>__sec_reduce_mutating </li>\n</ul> <p>Further details and examples about these built-in functions are described in the Cilk Plus language manual which can be found at <a href=\"http://www.cilkplus.org\">http://www.cilkplus.org</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Cilk-Plus-Builtins.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Cilk-Plus-Builtins.html</a>\n  </p>\n</div>\n","other-builtins":"<h1 class=\"section\" id=\"Other-Builtins\">6.56 Other Built-in Functions Provided by GCC</h1> <p> GCC provides a large number of built-in functions other than the ones mentioned above. Some of these are for internal use in the processing of exceptions or variable-length argument lists and are not documented here because they may change from time to time; we do not recommend general use of these functions. </p>\n<p>The remaining functions are provided for optimization purposes. </p>\n<p>GCC includes built-in versions of many of the functions in the standard C library. The versions prefixed with <code>__builtin_</code> are always treated as having the same meaning as the C library function even if you specify the <code>-fno-builtin</code> option. (see <a href=\"c-dialect-options#C-Dialect-Options\">C Dialect Options</a>) Many of these functions are only optimized in certain cases; if they are not optimized in a particular case, a call to the library function is emitted. </p>\n<p>Outside strict ISO C mode (<code>-ansi</code>, <code>-std=c90</code>, <code>-std=c99</code> or <code>-std=c11</code>), the functions <code>_exit</code>, <code>alloca</code>, <code>bcmp</code>, <code>bzero</code>, <code>dcgettext</code>, <code>dgettext</code>, <code>dremf</code>, <code>dreml</code>, <code>drem</code>, <code>exp10f</code>, <code>exp10l</code>, <code>exp10</code>, <code>ffsll</code>, <code>ffsl</code>, <code>ffs</code>, <code>fprintf_unlocked</code>, <code>fputs_unlocked</code>, <code>gammaf</code>, <code>gammal</code>, <code>gamma</code>, <code>gammaf_r</code>, <code>gammal_r</code>, <code>gamma_r</code>, <code>gettext</code>, <code>index</code>, <code>isascii</code>, <code>j0f</code>, <code>j0l</code>, <code>j0</code>, <code>j1f</code>, <code>j1l</code>, <code>j1</code>, <code>jnf</code>, <code>jnl</code>, <code>jn</code>, <code>lgammaf_r</code>, <code>lgammal_r</code>, <code>lgamma_r</code>, <code>mempcpy</code>, <code>pow10f</code>, <code>pow10l</code>, <code>pow10</code>, <code>printf_unlocked</code>, <code>rindex</code>, <code>scalbf</code>, <code>scalbl</code>, <code>scalb</code>, <code>signbit</code>, <code>signbitf</code>, <code>signbitl</code>, <code>signbitd32</code>, <code>signbitd64</code>, <code>signbitd128</code>, <code>significandf</code>, <code>significandl</code>, <code>significand</code>, <code>sincosf</code>, <code>sincosl</code>, <code>sincos</code>, <code>stpcpy</code>, <code>stpncpy</code>, <code>strcasecmp</code>, <code>strdup</code>, <code>strfmon</code>, <code>strncasecmp</code>, <code>strndup</code>, <code>toascii</code>, <code>y0f</code>, <code>y0l</code>, <code>y0</code>, <code>y1f</code>, <code>y1l</code>, <code>y1</code>, <code>ynf</code>, <code>ynl</code> and <code>yn</code> may be handled as built-in functions. All these functions have corresponding versions prefixed with <code>__builtin_</code>, which may be used even in strict C90 mode. </p>\n<p>The ISO C99 functions <code>_Exit</code>, <code>acoshf</code>, <code>acoshl</code>, <code>acosh</code>, <code>asinhf</code>, <code>asinhl</code>, <code>asinh</code>, <code>atanhf</code>, <code>atanhl</code>, <code>atanh</code>, <code>cabsf</code>, <code>cabsl</code>, <code>cabs</code>, <code>cacosf</code>, <code>cacoshf</code>, <code>cacoshl</code>, <code>cacosh</code>, <code>cacosl</code>, <code>cacos</code>, <code>cargf</code>, <code>cargl</code>, <code>carg</code>, <code>casinf</code>, <code>casinhf</code>, <code>casinhl</code>, <code>casinh</code>, <code>casinl</code>, <code>casin</code>, <code>catanf</code>, <code>catanhf</code>, <code>catanhl</code>, <code>catanh</code>, <code>catanl</code>, <code>catan</code>, <code>cbrtf</code>, <code>cbrtl</code>, <code>cbrt</code>, <code>ccosf</code>, <code>ccoshf</code>, <code>ccoshl</code>, <code>ccosh</code>, <code>ccosl</code>, <code>ccos</code>, <code>cexpf</code>, <code>cexpl</code>, <code>cexp</code>, <code>cimagf</code>, <code>cimagl</code>, <code>cimag</code>, <code>clogf</code>, <code>clogl</code>, <code>clog</code>, <code>conjf</code>, <code>conjl</code>, <code>conj</code>, <code>copysignf</code>, <code>copysignl</code>, <code>copysign</code>, <code>cpowf</code>, <code>cpowl</code>, <code>cpow</code>, <code>cprojf</code>, <code>cprojl</code>, <code>cproj</code>, <code>crealf</code>, <code>creall</code>, <code>creal</code>, <code>csinf</code>, <code>csinhf</code>, <code>csinhl</code>, <code>csinh</code>, <code>csinl</code>, <code>csin</code>, <code>csqrtf</code>, <code>csqrtl</code>, <code>csqrt</code>, <code>ctanf</code>, <code>ctanhf</code>, <code>ctanhl</code>, <code>ctanh</code>, <code>ctanl</code>, <code>ctan</code>, <code>erfcf</code>, <code>erfcl</code>, <code>erfc</code>, <code>erff</code>, <code>erfl</code>, <code>erf</code>, <code>exp2f</code>, <code>exp2l</code>, <code>exp2</code>, <code>expm1f</code>, <code>expm1l</code>, <code>expm1</code>, <code>fdimf</code>, <code>fdiml</code>, <code>fdim</code>, <code>fmaf</code>, <code>fmal</code>, <code>fmaxf</code>, <code>fmaxl</code>, <code>fmax</code>, <code>fma</code>, <code>fminf</code>, <code>fminl</code>, <code>fmin</code>, <code>hypotf</code>, <code>hypotl</code>, <code>hypot</code>, <code>ilogbf</code>, <code>ilogbl</code>, <code>ilogb</code>, <code>imaxabs</code>, <code>isblank</code>, <code>iswblank</code>, <code>lgammaf</code>, <code>lgammal</code>, <code>lgamma</code>, <code>llabs</code>, <code>llrintf</code>, <code>llrintl</code>, <code>llrint</code>, <code>llroundf</code>, <code>llroundl</code>, <code>llround</code>, <code>log1pf</code>, <code>log1pl</code>, <code>log1p</code>, <code>log2f</code>, <code>log2l</code>, <code>log2</code>, <code>logbf</code>, <code>logbl</code>, <code>logb</code>, <code>lrintf</code>, <code>lrintl</code>, <code>lrint</code>, <code>lroundf</code>, <code>lroundl</code>, <code>lround</code>, <code>nearbyintf</code>, <code>nearbyintl</code>, <code>nearbyint</code>, <code>nextafterf</code>, <code>nextafterl</code>, <code>nextafter</code>, <code>nexttowardf</code>, <code>nexttowardl</code>, <code>nexttoward</code>, <code>remainderf</code>, <code>remainderl</code>, <code>remainder</code>, <code>remquof</code>, <code>remquol</code>, <code>remquo</code>, <code>rintf</code>, <code>rintl</code>, <code>rint</code>, <code>roundf</code>, <code>roundl</code>, <code>round</code>, <code>scalblnf</code>, <code>scalblnl</code>, <code>scalbln</code>, <code>scalbnf</code>, <code>scalbnl</code>, <code>scalbn</code>, <code>snprintf</code>, <code>tgammaf</code>, <code>tgammal</code>, <code>tgamma</code>, <code>truncf</code>, <code>truncl</code>, <code>trunc</code>, <code>vfscanf</code>, <code>vscanf</code>, <code>vsnprintf</code> and <code>vsscanf</code> are handled as built-in functions except in strict ISO C90 mode (<code>-ansi</code> or <code>-std=c90</code>). </p>\n<p>There are also built-in versions of the ISO C99 functions <code>acosf</code>, <code>acosl</code>, <code>asinf</code>, <code>asinl</code>, <code>atan2f</code>, <code>atan2l</code>, <code>atanf</code>, <code>atanl</code>, <code>ceilf</code>, <code>ceill</code>, <code>cosf</code>, <code>coshf</code>, <code>coshl</code>, <code>cosl</code>, <code>expf</code>, <code>expl</code>, <code>fabsf</code>, <code>fabsl</code>, <code>floorf</code>, <code>floorl</code>, <code>fmodf</code>, <code>fmodl</code>, <code>frexpf</code>, <code>frexpl</code>, <code>ldexpf</code>, <code>ldexpl</code>, <code>log10f</code>, <code>log10l</code>, <code>logf</code>, <code>logl</code>, <code>modfl</code>, <code>modf</code>, <code>powf</code>, <code>powl</code>, <code>sinf</code>, <code>sinhf</code>, <code>sinhl</code>, <code>sinl</code>, <code>sqrtf</code>, <code>sqrtl</code>, <code>tanf</code>, <code>tanhf</code>, <code>tanhl</code> and <code>tanl</code> that are recognized in any mode since ISO C90 reserves these names for the purpose to which ISO C99 puts them. All these functions have corresponding versions prefixed with <code>__builtin_</code>. </p>\n<p>The ISO C94 functions <code>iswalnum</code>, <code>iswalpha</code>, <code>iswcntrl</code>, <code>iswdigit</code>, <code>iswgraph</code>, <code>iswlower</code>, <code>iswprint</code>, <code>iswpunct</code>, <code>iswspace</code>, <code>iswupper</code>, <code>iswxdigit</code>, <code>towlower</code> and <code>towupper</code> are handled as built-in functions except in strict ISO C90 mode (<code>-ansi</code> or <code>-std=c90</code>). </p>\n<p>The ISO C90 functions <code>abort</code>, <code>abs</code>, <code>acos</code>, <code>asin</code>, <code>atan2</code>, <code>atan</code>, <code>calloc</code>, <code>ceil</code>, <code>cosh</code>, <code>cos</code>, <code>exit</code>, <code>exp</code>, <code>fabs</code>, <code>floor</code>, <code>fmod</code>, <code>fprintf</code>, <code>fputs</code>, <code>frexp</code>, <code>fscanf</code>, <code>isalnum</code>, <code>isalpha</code>, <code>iscntrl</code>, <code>isdigit</code>, <code>isgraph</code>, <code>islower</code>, <code>isprint</code>, <code>ispunct</code>, <code>isspace</code>, <code>isupper</code>, <code>isxdigit</code>, <code>tolower</code>, <code>toupper</code>, <code>labs</code>, <code>ldexp</code>, <code>log10</code>, <code>log</code>, <code>malloc</code>, <code>memchr</code>, <code>memcmp</code>, <code>memcpy</code>, <code>memset</code>, <code>modf</code>, <code>pow</code>, <code>printf</code>, <code>putchar</code>, <code>puts</code>, <code>scanf</code>, <code>sinh</code>, <code>sin</code>, <code>snprintf</code>, <code>sprintf</code>, <code>sqrt</code>, <code>sscanf</code>, <code>strcat</code>, <code>strchr</code>, <code>strcmp</code>, <code>strcpy</code>, <code>strcspn</code>, <code>strlen</code>, <code>strncat</code>, <code>strncmp</code>, <code>strncpy</code>, <code>strpbrk</code>, <code>strrchr</code>, <code>strspn</code>, <code>strstr</code>, <code>tanh</code>, <code>tan</code>, <code>vfprintf</code>, <code>vprintf</code> and <code>vsprintf</code> are all recognized as built-in functions unless <code>-fno-builtin</code> is specified (or <samp><span class=\"option\">-fno-builtin-</span><var>function</var></samp> is specified for an individual function). All of these functions have corresponding versions prefixed with <code>__builtin_</code>. </p>\n<p>GCC provides built-in versions of the ISO C99 floating-point comparison macros that avoid raising exceptions for unordered operands. They have the same names as the standard macros ( <code>isgreater</code>, <code>isgreaterequal</code>, <code>isless</code>, <code>islessequal</code>, <code>islessgreater</code>, and <code>isunordered</code>) , with <code>__builtin_</code> prefixed. We intend for a library implementor to be able to simply <code>#define</code> each standard macro to its built-in equivalent. In the same fashion, GCC provides <code>fpclassify</code>, <code>isfinite</code>, <code>isinf_sign</code> and <code>isnormal</code> built-ins used with <code>__builtin_</code> prefixed. The <code>isinf</code> and <code>isnan</code> built-in functions appear both with and without the <code>__builtin_</code> prefix. </p>\n<div class=\"defun\"> — Built-in Function: int <b>__builtin_types_compatible_p</b> (<var>type1, type2</var>) <blockquote> <p>You can use the built-in function <code>__builtin_types_compatible_p</code> to determine whether two types are the same. </p>\n<p>This built-in function returns 1 if the unqualified versions of the types <var>type1</var> and <var>type2</var> (which are types, not expressions) are compatible, 0 otherwise. The result of this built-in function can be used in integer constant expressions. </p>\n<p>This built-in function ignores top level qualifiers (e.g., <code>const</code>, <code>volatile</code>). For example, <code>int</code> is equivalent to <code>const\nint</code>. </p>\n<p>The type <code>int[]</code> and <code>int[5]</code> are compatible. On the other hand, <code>int</code> and <code>char *</code> are not compatible, even if the size of their types, on the particular architecture are the same. Also, the amount of pointer indirection is taken into account when determining similarity. Consequently, <code>short *</code> is not similar to <code>short **</code>. Furthermore, two types that are typedefed are considered compatible if their underlying types are compatible. </p>\n<p>An <code>enum</code> type is not considered to be compatible with another <code>enum</code> type even if both are compatible with the same integer type; this is what the C standard specifies. For example, <code>enum {foo, bar}</code> is not similar to <code>enum {hot, dog}</code>. </p>\n<p>You typically use this function in code whose execution varies depending on the arguments' types. For example: </p>\n<pre class=\"smallexample\">#define foo(x)                                                  \\\n  ({                                                           \\\n    typeof (x) tmp = (x);                                       \\\n    if (__builtin_types_compatible_p (typeof (x), long double)) \\\n      tmp = foo_long_double (tmp);                              \\\n    else if (__builtin_types_compatible_p (typeof (x), double)) \\\n      tmp = foo_double (tmp);                                   \\\n    else if (__builtin_types_compatible_p (typeof (x), float))  \\\n      tmp = foo_float (tmp);                                    \\\n    else                                                        \\\n      abort ();                                                 \\\n    tmp;                                                        \\\n  })</pre> <p><em>Note:</em> This construct is only available for C. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: <var>type</var> <b>__builtin_choose_expr</b> (<var>const_exp, exp1, exp2</var>) <blockquote> <p>You can use the built-in function <code>__builtin_choose_expr</code> to evaluate code depending on the value of a constant expression. This built-in function returns <var>exp1</var> if <var>const_exp</var>, which is an integer constant expression, is nonzero. Otherwise it returns <var>exp2</var>. </p>\n<p>This built-in function is analogous to the ‘<code>? :</code>’ operator in C, except that the expression returned has its type unaltered by promotion rules. Also, the built-in function does not evaluate the expression that is not chosen. For example, if <var>const_exp</var> evaluates to true, <var>exp2</var> is not evaluated even if it has side-effects. </p>\n<p>This built-in function can return an lvalue if the chosen argument is an lvalue. </p>\n<p>If <var>exp1</var> is returned, the return type is the same as <var>exp1</var>'s type. Similarly, if <var>exp2</var> is returned, its return type is the same as <var>exp2</var>. </p>\n<p>Example: </p>\n<pre class=\"smallexample\">#define foo(x)                                                    \\\n  __builtin_choose_expr (                                         \\\n    __builtin_types_compatible_p (typeof (x), double),            \\\n    foo_double (x),                                               \\\n    __builtin_choose_expr (                                       \\\n      __builtin_types_compatible_p (typeof (x), float),           \\\n      foo_float (x),                                              \\\n      /* <span class=\"roman\">The void expression results in a compile-time error</span>  \\\n         <span class=\"roman\">when assigning the result to something.</span>  */          \\\n      (void)0))</pre> <p><em>Note:</em> This construct is only available for C. Furthermore, the unused expression (<var>exp1</var> or <var>exp2</var> depending on the value of <var>const_exp</var>) may still generate syntax errors. This may change in future revisions. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: <var>type</var> <b>__builtin_complex</b> (<var>real, imag</var>) <blockquote> <p>The built-in function <code>__builtin_complex</code> is provided for use in implementing the ISO C11 macros <code>CMPLXF</code>, <code>CMPLX</code> and <code>CMPLXL</code>. <var>real</var> and <var>imag</var> must have the same type, a real binary floating-point type, and the result has the corresponding complex type with real and imaginary parts <var>real</var> and <var>imag</var>. Unlike ‘<samp><var>real</var><span class=\"samp\"> + I * </span><var>imag</var></samp>’, this works even when infinities, NaNs and negative zeros are involved. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_constant_p</b> (<var>exp</var>) <blockquote>\n<p>You can use the built-in function <code>__builtin_constant_p</code> to determine if a value is known to be constant at compile time and hence that GCC can perform constant-folding on expressions involving that value. The argument of the function is the value to test. The function returns the integer 1 if the argument is known to be a compile-time constant and 0 if it is not known to be a compile-time constant. A return of 0 does not indicate that the value is <em>not</em> a constant, but merely that GCC cannot prove it is a constant with the specified value of the <code>-O</code> option. </p>\n<p>You typically use this function in an embedded application where memory is a critical resource. If you have some complex calculation, you may want it to be folded if it involves constants, but need to call a function if it does not. For example: </p>\n<pre class=\"smallexample\">#define Scale_Value(X)      \\\n  (__builtin_constant_p (X) \\\n  ? ((X) * SCALE + OFFSET) : Scale (X))</pre> <p>You may use this built-in function in either a macro or an inline function. However, if you use it in an inlined function and pass an argument of the function as the argument to the built-in, GCC never returns 1 when you call the inline function with a string constant or compound literal (see <a href=\"compound-literals#Compound-Literals\">Compound Literals</a>) and does not return 1 when you pass a constant numeric value to the inline function unless you specify the <code>-O</code> option. </p>\n<p>You may also use <code>__builtin_constant_p</code> in initializers for static data. For instance, you can write </p>\n<pre class=\"smallexample\">static const int table[] = {\n   __builtin_constant_p (EXPRESSION) ? (EXPRESSION) : -1,\n   /* <span class=\"roman\">...</span> */\n};</pre> <p class=\"noindent\">This is an acceptable initializer even if <var>EXPRESSION</var> is not a constant expression, including the case where <code>__builtin_constant_p</code> returns 1 because <var>EXPRESSION</var> can be folded to a constant but <var>EXPRESSION</var> contains operands that are not otherwise permitted in a static initializer (for example, <code>0 &amp;&amp; foo ()</code>). GCC must be more conservative about evaluating the built-in in this case, because it has no opportunity to perform optimization. </p>\n<p>Previous versions of GCC did not accept this built-in in data initializers. The earliest version where it is completely safe is 3.0.1. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: long <b>__builtin_expect</b> (<var>long exp, long c</var>) <blockquote>\n<p>You may use <code>__builtin_expect</code> to provide the compiler with branch prediction information. In general, you should prefer to use actual profile feedback for this (<code>-fprofile-arcs</code>), as programmers are notoriously bad at predicting how their programs actually perform. However, there are applications in which this data is hard to collect. </p>\n<p>The return value is the value of <var>exp</var>, which should be an integral expression. The semantics of the built-in are that it is expected that <var>exp</var> == <var>c</var>. For example: </p>\n<pre class=\"smallexample\">if (__builtin_expect (x, 0))\n  foo ();</pre> <p class=\"noindent\">indicates that we do not expect to call <code>foo</code>, since we expect <code>x</code> to be zero. Since you are limited to integral expressions for <var>exp</var>, you should use constructions such as </p>\n<pre class=\"smallexample\">if (__builtin_expect (ptr != NULL, 1))\n  foo (*ptr);</pre> <p class=\"noindent\">when testing pointer or floating-point values. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_trap</b> (<var>void</var>) <blockquote><p>This function causes the program to exit abnormally. GCC implements this function by using a target-dependent mechanism (such as intentionally executing an illegal instruction) or by calling <code>abort</code>. The mechanism used may vary from release to release so you should not rely on any particular implementation. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_unreachable</b> (<var>void</var>) <blockquote>\n<p>If control flow reaches the point of the <code>__builtin_unreachable</code>, the program is undefined. It is useful in situations where the compiler cannot deduce the unreachability of the code. </p>\n<p>One such case is immediately following an <code>asm</code> statement that either never terminates, or one that transfers control elsewhere and never returns. In this example, without the <code>__builtin_unreachable</code>, GCC issues a warning that control reaches the end of a non-void function. It also generates code to return after the <code>asm</code>. </p>\n<pre class=\"smallexample\">int f (int c, int v)\n{\n  if (c)\n    {\n      return v;\n    }\n  else\n    {\n      asm(\"jmp error_handler\");\n      __builtin_unreachable ();\n    }\n}</pre> <p class=\"noindent\">Because the <code>asm</code> statement unconditionally transfers control out of the function, control never reaches the end of the function body. The <code>__builtin_unreachable</code> is in fact unreachable and communicates this fact to the compiler. </p>\n<p>Another use for <code>__builtin_unreachable</code> is following a call a function that never returns but that is not declared <code>__attribute__((noreturn))</code>, as in this example: </p>\n<pre class=\"smallexample\">void function_that_never_returns (void);\n\nint g (int c)\n{\n  if (c)\n    {\n      return 1;\n    }\n  else\n    {\n      function_that_never_returns ();\n      __builtin_unreachable ();\n    }\n}</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>*__builtin_assume_aligned</b> (<var>const void *exp, size_t align, ...</var>) <blockquote>\n<p>This function returns its first argument, and allows the compiler to assume that the returned pointer is at least <var>align</var> bytes aligned. This built-in can have either two or three arguments, if it has three, the third argument should have integer type, and if it is nonzero means misalignment offset. For example: </p>\n<pre class=\"smallexample\">void *x = __builtin_assume_aligned (arg, 16);</pre> <p class=\"noindent\">means that the compiler can assume <code>x</code>, set to <code>arg</code>, is at least 16-byte aligned, while: </p>\n<pre class=\"smallexample\">void *x = __builtin_assume_aligned (arg, 32, 8);</pre> <p class=\"noindent\">means that the compiler can assume for <code>x</code>, set to <code>arg</code>, that <code>(char *) x - 8</code> is 32-byte aligned. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_LINE</b> () <blockquote><p>This function is the equivalent to the preprocessor <code>__LINE__</code> macro and returns the line number of the invocation of the built-in. In a C++ default argument for a function <var>F</var>, it gets the line number of the call to <var>F</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: const char * <b>__builtin_FUNCTION</b> () <blockquote><p>This function is the equivalent to the preprocessor <code>__FUNCTION__</code> macro and returns the function name the invocation of the built-in is in. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: const char * <b>__builtin_FILE</b> () <blockquote><p>This function is the equivalent to the preprocessor <code>__FILE__</code> macro and returns the file name the invocation of the built-in is in. In a C++ default argument for a function <var>F</var>, it gets the file name of the call to <var>F</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin___clear_cache</b> (<var>char *begin, char *end</var>) <blockquote>\n<p>This function is used to flush the processor's instruction cache for the region of memory between <var>begin</var> inclusive and <var>end</var> exclusive. Some targets require that the instruction cache be flushed, after modifying memory containing code, in order to obtain deterministic behavior. </p>\n<p>If the target does not require instruction cache flushes, <code>__builtin___clear_cache</code> has no effect. Otherwise either instructions are emitted in-line to clear the instruction cache or a call to the <code>__clear_cache</code> function in libgcc is made. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_prefetch</b> (<var>const void *addr, ...</var>) <blockquote>\n<p>This function is used to minimize cache-miss latency by moving data into a cache before it is accessed. You can insert calls to <code>__builtin_prefetch</code> into code for which you know addresses of data in memory that is likely to be accessed soon. If the target supports them, data prefetch instructions are generated. If the prefetch is done early enough before the access then the data will be in the cache by the time it is accessed. </p>\n<p>The value of <var>addr</var> is the address of the memory to prefetch. There are two optional arguments, <var>rw</var> and <var>locality</var>. The value of <var>rw</var> is a compile-time constant one or zero; one means that the prefetch is preparing for a write to the memory address and zero, the default, means that the prefetch is preparing for a read. The value <var>locality</var> must be a compile-time constant integer between zero and three. A value of zero means that the data has no temporal locality, so it need not be left in the cache after the access. A value of three means that the data has a high degree of temporal locality and should be left in all levels of cache possible. Values of one and two mean, respectively, a low or moderate degree of temporal locality. The default is three. </p>\n<pre class=\"smallexample\">for (i = 0; i &lt; n; i++)\n  {\n    a[i] = a[i] + b[i];\n    __builtin_prefetch (&amp;a[i+j], 1, 1);\n    __builtin_prefetch (&amp;b[i+j], 0, 1);\n    /* <span class=\"roman\">...</span> */\n  }</pre> <p>Data prefetch does not generate faults if <var>addr</var> is invalid, but the address expression itself must be valid. For example, a prefetch of <code>p-&gt;next</code> does not fault if <code>p-&gt;next</code> is not a valid address, but evaluation faults if <code>p</code> is not a valid address. </p>\n<p>If the target does not support data prefetch, the address expression is evaluated if it includes side effects but no other code is generated and GCC does not issue a warning. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: double <b>__builtin_huge_val</b> (<var>void</var>) <blockquote><p>Returns a positive infinity, if supported by the floating-point format, else <code>DBL_MAX</code>. This function is suitable for implementing the ISO C macro <code>HUGE_VAL</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: float <b>__builtin_huge_valf</b> (<var>void</var>) <blockquote><p>Similar to <code>__builtin_huge_val</code>, except the return type is <code>float</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: long double <b>__builtin_huge_vall</b> (<var>void</var>) <blockquote><p>Similar to <code>__builtin_huge_val</code>, except the return type is <code>long double</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_fpclassify</b> (<var>int, int, int, int, int, ...</var>) <blockquote><p>This built-in implements the C99 fpclassify functionality. The first five int arguments should be the target library's notion of the possible FP classes and are used for return values. They must be constant values and they must appear in this order: <code>FP_NAN</code>, <code>FP_INFINITE</code>, <code>FP_NORMAL</code>, <code>FP_SUBNORMAL</code> and <code>FP_ZERO</code>. The ellipsis is for exactly one floating-point value to classify. GCC treats the last argument as type-generic, which means it does not do default promotion from float to double. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: double <b>__builtin_inf</b> (<var>void</var>) <blockquote><p>Similar to <code>__builtin_huge_val</code>, except a warning is generated if the target floating-point format does not support infinities. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: _Decimal32 <b>__builtin_infd32</b> (<var>void</var>) <blockquote><p>Similar to <code>__builtin_inf</code>, except the return type is <code>_Decimal32</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: _Decimal64 <b>__builtin_infd64</b> (<var>void</var>) <blockquote><p>Similar to <code>__builtin_inf</code>, except the return type is <code>_Decimal64</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: _Decimal128 <b>__builtin_infd128</b> (<var>void</var>) <blockquote><p>Similar to <code>__builtin_inf</code>, except the return type is <code>_Decimal128</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: float <b>__builtin_inff</b> (<var>void</var>) <blockquote><p>Similar to <code>__builtin_inf</code>, except the return type is <code>float</code>. This function is suitable for implementing the ISO C99 macro <code>INFINITY</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: long double <b>__builtin_infl</b> (<var>void</var>) <blockquote><p>Similar to <code>__builtin_inf</code>, except the return type is <code>long double</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_isinf_sign</b> (<var>...</var>) <blockquote><p>Similar to <code>isinf</code>, except the return value is -1 for an argument of <code>-Inf</code> and 1 for an argument of <code>+Inf</code>. Note while the parameter list is an ellipsis, this function only accepts exactly one floating-point argument. GCC treats this parameter as type-generic, which means it does not do default promotion from float to double. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: double <b>__builtin_nan</b> (<var>const char *str</var>) <blockquote>\n<p>This is an implementation of the ISO C99 function <code>nan</code>. </p>\n<p>Since ISO C99 defines this function in terms of <code>strtod</code>, which we do not implement, a description of the parsing is in order. The string is parsed as by <code>strtol</code>; that is, the base is recognized by leading ‘<code>0</code>’ or ‘<code>0x</code>’ prefixes. The number parsed is placed in the significand such that the least significant bit of the number is at the least significant bit of the significand. The number is truncated to fit the significand field provided. The significand is forced to be a quiet NaN. </p>\n<p>This function, if given a string literal all of which would have been consumed by <code>strtol</code>, is evaluated early enough that it is considered a compile-time constant. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: _Decimal32 <b>__builtin_nand32</b> (<var>const char *str</var>) <blockquote><p>Similar to <code>__builtin_nan</code>, except the return type is <code>_Decimal32</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: _Decimal64 <b>__builtin_nand64</b> (<var>const char *str</var>) <blockquote><p>Similar to <code>__builtin_nan</code>, except the return type is <code>_Decimal64</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: _Decimal128 <b>__builtin_nand128</b> (<var>const char *str</var>) <blockquote><p>Similar to <code>__builtin_nan</code>, except the return type is <code>_Decimal128</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: float <b>__builtin_nanf</b> (<var>const char *str</var>) <blockquote><p>Similar to <code>__builtin_nan</code>, except the return type is <code>float</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: long double <b>__builtin_nanl</b> (<var>const char *str</var>) <blockquote><p>Similar to <code>__builtin_nan</code>, except the return type is <code>long double</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: double <b>__builtin_nans</b> (<var>const char *str</var>) <blockquote><p>Similar to <code>__builtin_nan</code>, except the significand is forced to be a signaling NaN. The <code>nans</code> function is proposed by <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n965.htm\">WG14 N965</a>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: float <b>__builtin_nansf</b> (<var>const char *str</var>) <blockquote><p>Similar to <code>__builtin_nans</code>, except the return type is <code>float</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: long double <b>__builtin_nansl</b> (<var>const char *str</var>) <blockquote><p>Similar to <code>__builtin_nans</code>, except the return type is <code>long double</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_ffs</b> (<var>int x</var>) <blockquote><p>Returns one plus the index of the least significant 1-bit of <var>x</var>, or if <var>x</var> is zero, returns zero. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_clz</b> (<var>unsigned int x</var>) <blockquote><p>Returns the number of leading 0-bits in <var>x</var>, starting at the most significant bit position. If <var>x</var> is 0, the result is undefined. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_ctz</b> (<var>unsigned int x</var>) <blockquote><p>Returns the number of trailing 0-bits in <var>x</var>, starting at the least significant bit position. If <var>x</var> is 0, the result is undefined. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_clrsb</b> (<var>int x</var>) <blockquote><p>Returns the number of leading redundant sign bits in <var>x</var>, i.e. the number of bits following the most significant bit that are identical to it. There are no special cases for 0 or other values. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_popcount</b> (<var>unsigned int x</var>) <blockquote><p>Returns the number of 1-bits in <var>x</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_parity</b> (<var>unsigned int x</var>) <blockquote><p>Returns the parity of <var>x</var>, i.e. the number of 1-bits in <var>x</var> modulo 2. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_ffsl</b> (<var>long</var>) <blockquote><p>Similar to <code>__builtin_ffs</code>, except the argument type is <code>long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_clzl</b> (<var>unsigned long</var>) <blockquote><p>Similar to <code>__builtin_clz</code>, except the argument type is <code>unsigned long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_ctzl</b> (<var>unsigned long</var>) <blockquote><p>Similar to <code>__builtin_ctz</code>, except the argument type is <code>unsigned long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_clrsbl</b> (<var>long</var>) <blockquote><p>Similar to <code>__builtin_clrsb</code>, except the argument type is <code>long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_popcountl</b> (<var>unsigned long</var>) <blockquote><p>Similar to <code>__builtin_popcount</code>, except the argument type is <code>unsigned long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_parityl</b> (<var>unsigned long</var>) <blockquote><p>Similar to <code>__builtin_parity</code>, except the argument type is <code>unsigned long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_ffsll</b> (<var>long long</var>) <blockquote><p>Similar to <code>__builtin_ffs</code>, except the argument type is <code>long long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_clzll</b> (<var>unsigned long long</var>) <blockquote><p>Similar to <code>__builtin_clz</code>, except the argument type is <code>unsigned long long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_ctzll</b> (<var>unsigned long long</var>) <blockquote><p>Similar to <code>__builtin_ctz</code>, except the argument type is <code>unsigned long long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_clrsbll</b> (<var>long long</var>) <blockquote><p>Similar to <code>__builtin_clrsb</code>, except the argument type is <code>long long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_popcountll</b> (<var>unsigned long long</var>) <blockquote><p>Similar to <code>__builtin_popcount</code>, except the argument type is <code>unsigned long long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_parityll</b> (<var>unsigned long long</var>) <blockquote><p>Similar to <code>__builtin_parity</code>, except the argument type is <code>unsigned long long</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: double <b>__builtin_powi</b> (<var>double, int</var>) <blockquote><p>Returns the first argument raised to the power of the second. Unlike the <code>pow</code> function no guarantees about precision and rounding are made. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: float <b>__builtin_powif</b> (<var>float, int</var>) <blockquote><p>Similar to <code>__builtin_powi</code>, except the argument and return types are <code>float</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: long double <b>__builtin_powil</b> (<var>long double, int</var>) <blockquote><p>Similar to <code>__builtin_powi</code>, except the argument and return types are <code>long double</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: uint16_t <b>__builtin_bswap16</b> (<var>uint16_t x</var>) <blockquote><p>Returns <var>x</var> with the order of the bytes reversed; for example, <code>0xaabb</code> becomes <code>0xbbaa</code>. Byte here always means exactly 8 bits. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: uint32_t <b>__builtin_bswap32</b> (<var>uint32_t x</var>) <blockquote><p>Similar to <code>__builtin_bswap16</code>, except the argument and return types are 32 bit. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: uint64_t <b>__builtin_bswap64</b> (<var>uint64_t x</var>) <blockquote><p>Similar to <code>__builtin_bswap32</code>, except the argument and return types are 64 bit. </p></blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Other-Builtins.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Other-Builtins.html</a>\n  </p>\n</div>\n","target-builtins":"<h1 class=\"section\" id=\"Target-Builtins\">6.57 Built-in Functions Specific to Particular Target Machines</h1> <p>On some target machines, GCC supports many built-in functions specific to those machines. Generally these generate calls to specific machine instructions, but allow the compiler to schedule those calls. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"alpha-built_002din-functions#Alpha-Built_002din-Functions\">Alpha Built-in Functions</a> </li>\n<li>\n<a accesskey=\"2\" href=\"altera-nios-ii-built_002din-functions#Altera-Nios-II-Built_002din-Functions\">Altera Nios II Built-in Functions</a> </li>\n<li>\n<a accesskey=\"3\" href=\"arc-built_002din-functions#ARC-Built_002din-Functions\">ARC Built-in Functions</a> </li>\n<li>\n<a accesskey=\"4\" href=\"arc-simd-built_002din-functions#ARC-SIMD-Built_002din-Functions\">ARC SIMD Built-in Functions</a> </li>\n<li>\n<a accesskey=\"5\" href=\"arm-iwmmxt-built_002din-functions#ARM-iWMMXt-Built_002din-Functions\">ARM iWMMXt Built-in Functions</a> </li>\n<li>\n<a accesskey=\"6\" href=\"arm-neon-intrinsics#ARM-NEON-Intrinsics\">ARM NEON Intrinsics</a> </li>\n<li>\n<a accesskey=\"7\" href=\"arm-acle-intrinsics#ARM-ACLE-Intrinsics\">ARM ACLE Intrinsics</a> </li>\n<li>\n<a accesskey=\"8\" href=\"avr-built_002din-functions#AVR-Built_002din-Functions\">AVR Built-in Functions</a> </li>\n<li>\n<a accesskey=\"9\" href=\"blackfin-built_002din-functions#Blackfin-Built_002din-Functions\">Blackfin Built-in Functions</a> </li>\n<li>\n<a href=\"fr_002dv-built_002din-functions#FR_002dV-Built_002din-Functions\">FR-V Built-in Functions</a> </li>\n<li>\n<a href=\"x86-built_002din-functions#X86-Built_002din-Functions\">X86 Built-in Functions</a> </li>\n<li>\n<a href=\"x86-transactional-memory-intrinsics#X86-transactional-memory-intrinsics\">X86 transactional memory intrinsics</a> </li>\n<li>\n<a href=\"mips-dsp-built_002din-functions#MIPS-DSP-Built_002din-Functions\">MIPS DSP Built-in Functions</a> </li>\n<li>\n<a href=\"mips-paired_002dsingle-support#MIPS-Paired_002dSingle-Support\">MIPS Paired-Single Support</a> </li>\n<li>\n<a href=\"mips-loongson-built_002din-functions#MIPS-Loongson-Built_002din-Functions\">MIPS Loongson Built-in Functions</a> </li>\n<li>\n<a href=\"other-mips-built_002din-functions#Other-MIPS-Built_002din-Functions\">Other MIPS Built-in Functions</a> </li>\n<li>\n<a href=\"msp430-built_002din-functions#MSP430-Built_002din-Functions\">MSP430 Built-in Functions</a> </li>\n<li>\n<a href=\"nds32-built_002din-functions#NDS32-Built_002din-Functions\">NDS32 Built-in Functions</a> </li>\n<li>\n<a href=\"picochip-built_002din-functions#picoChip-Built_002din-Functions\">picoChip Built-in Functions</a> </li>\n<li>\n<a href=\"powerpc-built_002din-functions#PowerPC-Built_002din-Functions\">PowerPC Built-in Functions</a> </li>\n<li>\n<a href=\"powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions\">PowerPC AltiVec/VSX Built-in Functions</a> </li>\n<li>\n<a href=\"powerpc-hardware-transactional-memory-built_002din-functions#PowerPC-Hardware-Transactional-Memory-Built_002din-Functions\">PowerPC Hardware Transactional Memory Built-in Functions</a> </li>\n<li>\n<a href=\"rx-built_002din-functions#RX-Built_002din-Functions\">RX Built-in Functions</a> </li>\n<li>\n<a href=\"s_002f390-system-z-built_002din-functions#S_002f390-System-z-Built_002din-Functions\">S/390 System z Built-in Functions</a> </li>\n<li>\n<a href=\"sh-built_002din-functions#SH-Built_002din-Functions\">SH Built-in Functions</a> </li>\n<li>\n<a href=\"sparc-vis-built_002din-functions#SPARC-VIS-Built_002din-Functions\">SPARC VIS Built-in Functions</a> </li>\n<li>\n<a href=\"spu-built_002din-functions#SPU-Built_002din-Functions\">SPU Built-in Functions</a> </li>\n<li>\n<a href=\"ti-c6x-built_002din-functions#TI-C6X-Built_002din-Functions\">TI C6X Built-in Functions</a> </li>\n<li>\n<a href=\"tile_002dgx-built_002din-functions#TILE_002dGx-Built_002din-Functions\">TILE-Gx Built-in Functions</a> </li>\n<li>\n<a href=\"tilepro-built_002din-functions#TILEPro-Built_002din-Functions\">TILEPro Built-in Functions</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Target-Builtins.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Target-Builtins.html</a>\n  </p>\n</div>\n","alpha-built_002din-functions":"<h1 class=\"subsection\" id=\"Alpha-Built_002din-Functions\">6.57.1 Alpha Built-in Functions</h1> <p>These built-in functions are available for the Alpha family of processors, depending on the command-line switches used. </p>\n<p>The following built-in functions are always available. They all generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">long __builtin_alpha_implver (void)\nlong __builtin_alpha_rpcc (void)\nlong __builtin_alpha_amask (long)\nlong __builtin_alpha_cmpbge (long, long)\nlong __builtin_alpha_extbl (long, long)\nlong __builtin_alpha_extwl (long, long)\nlong __builtin_alpha_extll (long, long)\nlong __builtin_alpha_extql (long, long)\nlong __builtin_alpha_extwh (long, long)\nlong __builtin_alpha_extlh (long, long)\nlong __builtin_alpha_extqh (long, long)\nlong __builtin_alpha_insbl (long, long)\nlong __builtin_alpha_inswl (long, long)\nlong __builtin_alpha_insll (long, long)\nlong __builtin_alpha_insql (long, long)\nlong __builtin_alpha_inswh (long, long)\nlong __builtin_alpha_inslh (long, long)\nlong __builtin_alpha_insqh (long, long)\nlong __builtin_alpha_mskbl (long, long)\nlong __builtin_alpha_mskwl (long, long)\nlong __builtin_alpha_mskll (long, long)\nlong __builtin_alpha_mskql (long, long)\nlong __builtin_alpha_mskwh (long, long)\nlong __builtin_alpha_msklh (long, long)\nlong __builtin_alpha_mskqh (long, long)\nlong __builtin_alpha_umulh (long, long)\nlong __builtin_alpha_zap (long, long)\nlong __builtin_alpha_zapnot (long, long)</pre> <p>The following built-in functions are always with <code>-mmax</code> or <samp><span class=\"option\">-mcpu=</span><var>cpu</var></samp> where <var>cpu</var> is <code>pca56</code> or later. They all generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">long __builtin_alpha_pklb (long)\nlong __builtin_alpha_pkwb (long)\nlong __builtin_alpha_unpkbl (long)\nlong __builtin_alpha_unpkbw (long)\nlong __builtin_alpha_minub8 (long, long)\nlong __builtin_alpha_minsb8 (long, long)\nlong __builtin_alpha_minuw4 (long, long)\nlong __builtin_alpha_minsw4 (long, long)\nlong __builtin_alpha_maxub8 (long, long)\nlong __builtin_alpha_maxsb8 (long, long)\nlong __builtin_alpha_maxuw4 (long, long)\nlong __builtin_alpha_maxsw4 (long, long)\nlong __builtin_alpha_perr (long, long)</pre> <p>The following built-in functions are always with <code>-mcix</code> or <samp><span class=\"option\">-mcpu=</span><var>cpu</var></samp> where <var>cpu</var> is <code>ev67</code> or later. They all generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">long __builtin_alpha_cttz (long)\nlong __builtin_alpha_ctlz (long)\nlong __builtin_alpha_ctpop (long)</pre> <p>The following built-in functions are available on systems that use the OSF/1 PALcode. Normally they invoke the <code>rduniq</code> and <code>wruniq</code> PAL calls, but when invoked with <code>-mtls-kernel</code>, they invoke <code>rdval</code> and <code>wrval</code>. </p>\n<pre class=\"smallexample\">void *__builtin_thread_pointer (void)\nvoid __builtin_set_thread_pointer (void *)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Alpha-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Alpha-Built_002din-Functions.html</a>\n  </p>\n</div>\n","altera-nios-ii-built_002din-functions":"<h1 class=\"subsection\" id=\"Altera-Nios-II-Built_002din-Functions\">6.57.2 Altera Nios II Built-in Functions</h1> <p>These built-in functions are available for the Altera Nios II family of processors. </p>\n<p>The following built-in functions are always available. They all generate the machine instruction that is part of the name. </p>\n<pre class=\"example\">int __builtin_ldbio (volatile const void *)\nint __builtin_ldbuio (volatile const void *)\nint __builtin_ldhio (volatile const void *)\nint __builtin_ldhuio (volatile const void *)\nint __builtin_ldwio (volatile const void *)\nvoid __builtin_stbio (volatile void *, int)\nvoid __builtin_sthio (volatile void *, int)\nvoid __builtin_stwio (volatile void *, int)\nvoid __builtin_sync (void)\nint __builtin_rdctl (int)\nvoid __builtin_wrctl (int, int)</pre> <p>The following built-in functions are always available. They all generate a Nios II Custom Instruction. The name of the function represents the types that the function takes and returns. The letter before the <code>n</code> is the return type or void if absent. The <code>n</code> represents the first parameter to all the custom instructions, the custom instruction number. The two letters after the <code>n</code> represent the up to two parameters to the function. </p>\n<p>The letters represent the following data types: </p>\n<dl> <dt><code>&lt;no letter&gt;</code></dt>\n<dd>\n<code>void</code> for return type and no parameter for parameter types. </dd>\n<dt><code>i</code></dt>\n<dd>\n<code>int</code> for return type and parameter type </dd>\n<dt><code>f</code></dt>\n<dd>\n<code>float</code> for return type and parameter type </dd>\n<dt><code>p</code></dt>\n<dd>\n<code>void *</code> for return type and parameter type </dd>\n</dl> <p>And the function names are: </p>\n<pre class=\"example\">void __builtin_custom_n (void)\nvoid __builtin_custom_ni (int)\nvoid __builtin_custom_nf (float)\nvoid __builtin_custom_np (void *)\nvoid __builtin_custom_nii (int, int)\nvoid __builtin_custom_nif (int, float)\nvoid __builtin_custom_nip (int, void *)\nvoid __builtin_custom_nfi (float, int)\nvoid __builtin_custom_nff (float, float)\nvoid __builtin_custom_nfp (float, void *)\nvoid __builtin_custom_npi (void *, int)\nvoid __builtin_custom_npf (void *, float)\nvoid __builtin_custom_npp (void *, void *)\nint __builtin_custom_in (void)\nint __builtin_custom_ini (int)\nint __builtin_custom_inf (float)\nint __builtin_custom_inp (void *)\nint __builtin_custom_inii (int, int)\nint __builtin_custom_inif (int, float)\nint __builtin_custom_inip (int, void *)\nint __builtin_custom_infi (float, int)\nint __builtin_custom_inff (float, float)\nint __builtin_custom_infp (float, void *)\nint __builtin_custom_inpi (void *, int)\nint __builtin_custom_inpf (void *, float)\nint __builtin_custom_inpp (void *, void *)\nfloat __builtin_custom_fn (void)\nfloat __builtin_custom_fni (int)\nfloat __builtin_custom_fnf (float)\nfloat __builtin_custom_fnp (void *)\nfloat __builtin_custom_fnii (int, int)\nfloat __builtin_custom_fnif (int, float)\nfloat __builtin_custom_fnip (int, void *)\nfloat __builtin_custom_fnfi (float, int)\nfloat __builtin_custom_fnff (float, float)\nfloat __builtin_custom_fnfp (float, void *)\nfloat __builtin_custom_fnpi (void *, int)\nfloat __builtin_custom_fnpf (void *, float)\nfloat __builtin_custom_fnpp (void *, void *)\nvoid * __builtin_custom_pn (void)\nvoid * __builtin_custom_pni (int)\nvoid * __builtin_custom_pnf (float)\nvoid * __builtin_custom_pnp (void *)\nvoid * __builtin_custom_pnii (int, int)\nvoid * __builtin_custom_pnif (int, float)\nvoid * __builtin_custom_pnip (int, void *)\nvoid * __builtin_custom_pnfi (float, int)\nvoid * __builtin_custom_pnff (float, float)\nvoid * __builtin_custom_pnfp (float, void *)\nvoid * __builtin_custom_pnpi (void *, int)\nvoid * __builtin_custom_pnpf (void *, float)\nvoid * __builtin_custom_pnpp (void *, void *)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Altera-Nios-II-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Altera-Nios-II-Built_002din-Functions.html</a>\n  </p>\n</div>\n","arc-built_002din-functions":"<h1 class=\"subsection\" id=\"ARC-Built_002din-Functions\">6.57.3 ARC Built-in Functions</h1> <p>The following built-in functions are provided for ARC targets. The built-ins generate the corresponding assembly instructions. In the examples given below, the generated code often requires an operand or result to be in a register. Where necessary further code will be generated to ensure this is true, but for brevity this is not described in each case. </p>\n<p><em>Note:</em> Using a built-in to generate an instruction not supported by a target may cause problems. At present the compiler is not guaranteed to detect such misuse, and as a result an internal compiler error may be generated. </p>\n<div class=\"defun\"> — Built-in Function: int <b>__builtin_arc_aligned</b> (<var>void *val, int alignval</var>) <blockquote>\n<p>Return 1 if <var>val</var> is known to have the byte alignment given by <var>alignval</var>, otherwise return 0. Note that this is different from </p>\n<pre class=\"smallexample\">__alignof__(*(char *)<var>val</var>) &gt;= alignval</pre> <p>because __alignof__ sees only the type of the dereference, whereas __builtin_arc_align uses alignment information from the pointer as well as from the pointed-to type. The information available will depend on optimization level. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_brk</b> (<var>void</var>) <blockquote>\n<p>Generates </p>\n<pre class=\"example\">brk</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: unsigned int <b>__builtin_arc_core_read</b> (<var>unsigned int regno</var>) <blockquote>\n<p>The operand is the number of a register to be read. Generates: </p>\n<pre class=\"example\">mov  <var>dest</var>, r<var>regno</var></pre> <p>where the value in <var>dest</var> will be the result returned from the built-in. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_core_write</b> (<var>unsigned int regno, unsigned int val</var>) <blockquote>\n<p>The first operand is the number of a register to be written, the second operand is a compile time constant to write into that register. Generates: </p>\n<pre class=\"example\">mov  r<var>regno</var>, <var>val</var></pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_arc_divaw</b> (<var>int a, int b</var>) <blockquote>\n<p>Only available if either <code>-mcpu=ARC700</code> or <code>-meA</code> is set. Generates: </p>\n<pre class=\"example\">divaw  <var>dest</var>, <var>a</var>, <var>b</var></pre> <p>where the value in <var>dest</var> will be the result returned from the built-in. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_flag</b> (<var>unsigned int a</var>) <blockquote>\n<p>Generates </p>\n<pre class=\"example\">flag  <var>a</var></pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: unsigned int <b>__builtin_arc_lr</b> (<var>unsigned int auxr</var>) <blockquote>\n<p>The operand, <var>auxv</var>, is the address of an auxiliary register and must be a compile time constant. Generates: </p>\n<pre class=\"example\">lr  <var>dest</var>, [<var>auxr</var>]</pre> <p>Where the value in <var>dest</var> will be the result returned from the built-in. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_mul64</b> (<var>int a, int b</var>) <blockquote>\n<p>Only available with <code>-mmul64</code>. Generates: </p>\n<pre class=\"example\">mul64  <var>a</var>, <var>b</var></pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_mulu64</b> (<var>unsigned int a, unsigned int b</var>) <blockquote>\n<p>Only available with <code>-mmul64</code>. Generates: </p>\n<pre class=\"example\">mulu64  <var>a</var>, <var>b</var></pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_nop</b> (<var>void</var>) <blockquote>\n<p>Generates: </p>\n<pre class=\"example\">nop</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_arc_norm</b> (<var>int src</var>) <blockquote>\n<p>Only valid if the ‘<code>norm</code>’ instruction is available through the <code>-mnorm</code> option or by default with <code>-mcpu=ARC700</code>. Generates: </p>\n<pre class=\"example\">norm  <var>dest</var>, <var>src</var></pre> <p>Where the value in <var>dest</var> will be the result returned from the built-in. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: short int <b>__builtin_arc_normw</b> (<var>short int src</var>) <blockquote>\n<p>Only valid if the ‘<code>normw</code>’ instruction is available through the <code>-mnorm</code> option or by default with <code>-mcpu=ARC700</code>. Generates: </p>\n<pre class=\"example\">normw  <var>dest</var>, <var>src</var></pre> <p>Where the value in <var>dest</var> will be the result returned from the built-in. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_rtie</b> (<var>void</var>) <blockquote>\n<p>Generates: </p>\n<pre class=\"example\">rtie</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_sleep</b> (<var>int a</var> <blockquote>\n<p>Generates: </p>\n<pre class=\"example\">sleep  <var>a</var></pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_sr</b> (<var>unsigned int auxr, unsigned int val</var>) <blockquote>\n<p>The first argument, <var>auxv</var>, is the address of an auxiliary register, the second argument, <var>val</var>, is a compile time constant to be written to the register. Generates: </p>\n<pre class=\"example\">sr  <var>auxr</var>, [<var>val</var>]</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_arc_swap</b> (<var>int src</var>) <blockquote>\n<p>Only valid with <code>-mswap</code>. Generates: </p>\n<pre class=\"example\">swap  <var>dest</var>, <var>src</var></pre> <p>Where the value in <var>dest</var> will be the result returned from the built-in. </p>\n</blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_swi</b> (<var>void</var>) <blockquote>\n<p>Generates: </p>\n<pre class=\"example\">swi</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_sync</b> (<var>void</var>) <blockquote>\n<p>Only available with <code>-mcpu=ARC700</code>. Generates: </p>\n<pre class=\"example\">sync</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_trap_s</b> (<var>unsigned int c</var>) <blockquote>\n<p>Only available with <code>-mcpu=ARC700</code>. Generates: </p>\n<pre class=\"example\">trap_s  <var>c</var></pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_arc_unimp_s</b> (<var>void</var>) <blockquote>\n<p>Only available with <code>-mcpu=ARC700</code>. Generates: </p>\n<pre class=\"example\">unimp_s</pre> </blockquote>\n</div> <p>The instructions generated by the following builtins are not considered as candidates for scheduling. They are not moved around by the compiler during scheduling, and thus can be expected to appear where they are put in the C code: </p>\n<pre class=\"example\">__builtin_arc_brk()\n__builtin_arc_core_read()\n__builtin_arc_core_write()\n__builtin_arc_flag()\n__builtin_arc_lr()\n__builtin_arc_sleep()\n__builtin_arc_sr()\n__builtin_arc_swi()</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARC-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARC-Built_002din-Functions.html</a>\n  </p>\n</div>\n","arc-simd-built_002din-functions":"<h1 class=\"subsection\" id=\"ARC-SIMD-Built_002din-Functions\">6.57.4 ARC SIMD Built-in Functions</h1> <p>SIMD builtins provided by the compiler can be used to generate the vector instructions. This section describes the available builtins and their usage in programs. With the <code>-msimd</code> option, the compiler provides 128-bit vector types, which can be specified using the <code>vector_size</code> attribute. The header file <code>arc-simd.h</code> can be included to use the following predefined types: </p>\n<pre class=\"example\">typedef int __v4si   __attribute__((vector_size(16)));\ntypedef short __v8hi __attribute__((vector_size(16)));</pre> <p>These types can be used to define 128-bit variables. The built-in functions listed in the following section can be used on these variables to generate the vector operations. </p>\n<p>For all builtins, <code>__builtin_arc_</code><var>someinsn</var>, the header file <code>arc-simd.h</code> also provides equivalent macros called <code>_</code><var>someinsn</var> that can be used for programming ease and improved readability. The following macros for DMA control are also provided: </p>\n<pre class=\"example\">#define _setup_dma_in_channel_reg _vdiwr\n#define _setup_dma_out_channel_reg _vdowr</pre> <p>The following is a complete list of all the SIMD built-ins provided for ARC, grouped by calling signature. </p>\n<p>The following take two <code>__v8hi</code> arguments and return a <code>__v8hi</code> result: </p>\n<pre class=\"example\">__v8hi __builtin_arc_vaddaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vaddw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vand (__v8hi, __v8hi)\n__v8hi __builtin_arc_vandaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vavb (__v8hi, __v8hi)\n__v8hi __builtin_arc_vavrb (__v8hi, __v8hi)\n__v8hi __builtin_arc_vbic (__v8hi, __v8hi)\n__v8hi __builtin_arc_vbicaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vdifaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vdifw (__v8hi, __v8hi)\n__v8hi __builtin_arc_veqw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vh264f (__v8hi, __v8hi)\n__v8hi __builtin_arc_vh264ft (__v8hi, __v8hi)\n__v8hi __builtin_arc_vh264fw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vlew (__v8hi, __v8hi)\n__v8hi __builtin_arc_vltw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmaxaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmaxw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vminaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vminw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr1aw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr1w (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr2aw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr2w (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr3aw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr3w (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr4aw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr4w (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr5aw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr5w (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr6aw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr6w (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr7aw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmr7w (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmrb (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmulaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmulfaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmulfw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vmulw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vnew (__v8hi, __v8hi)\n__v8hi __builtin_arc_vor (__v8hi, __v8hi)\n__v8hi __builtin_arc_vsubaw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vsubw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vsummw (__v8hi, __v8hi)\n__v8hi __builtin_arc_vvc1f (__v8hi, __v8hi)\n__v8hi __builtin_arc_vvc1ft (__v8hi, __v8hi)\n__v8hi __builtin_arc_vxor (__v8hi, __v8hi)\n__v8hi __builtin_arc_vxoraw (__v8hi, __v8hi)</pre> <p>The following take one <code>__v8hi</code> and one <code>int</code> argument and return a <code>__v8hi</code> result: </p>\n<pre class=\"example\">__v8hi __builtin_arc_vbaddw (__v8hi, int)\n__v8hi __builtin_arc_vbmaxw (__v8hi, int)\n__v8hi __builtin_arc_vbminw (__v8hi, int)\n__v8hi __builtin_arc_vbmulaw (__v8hi, int)\n__v8hi __builtin_arc_vbmulfw (__v8hi, int)\n__v8hi __builtin_arc_vbmulw (__v8hi, int)\n__v8hi __builtin_arc_vbrsubw (__v8hi, int)\n__v8hi __builtin_arc_vbsubw (__v8hi, int)</pre> <p>The following take one <code>__v8hi</code> argument and one <code>int</code> argument which must be a 3-bit compile time constant indicating a register number I0-I7. They return a <code>__v8hi</code> result. </p>\n<pre class=\"example\">__v8hi __builtin_arc_vasrw (__v8hi, const int)\n__v8hi __builtin_arc_vsr8 (__v8hi, const int)\n__v8hi __builtin_arc_vsr8aw (__v8hi, const int)</pre> <p>The following take one <code>__v8hi</code> argument and one <code>int</code> argument which must be a 6-bit compile time constant. They return a <code>__v8hi</code> result. </p>\n<pre class=\"example\">__v8hi __builtin_arc_vasrpwbi (__v8hi, const int)\n__v8hi __builtin_arc_vasrrpwbi (__v8hi, const int)\n__v8hi __builtin_arc_vasrrwi (__v8hi, const int)\n__v8hi __builtin_arc_vasrsrwi (__v8hi, const int)\n__v8hi __builtin_arc_vasrwi (__v8hi, const int)\n__v8hi __builtin_arc_vsr8awi (__v8hi, const int)\n__v8hi __builtin_arc_vsr8i (__v8hi, const int)</pre> <p>The following take one <code>__v8hi</code> argument and one <code>int</code> argument which must be a 8-bit compile time constant. They return a <code>__v8hi</code> result. </p>\n<pre class=\"example\">__v8hi __builtin_arc_vd6tapf (__v8hi, const int)\n__v8hi __builtin_arc_vmvaw (__v8hi, const int)\n__v8hi __builtin_arc_vmvw (__v8hi, const int)\n__v8hi __builtin_arc_vmvzw (__v8hi, const int)</pre> <p>The following take two <code>int</code> arguments, the second of which which must be a 8-bit compile time constant. They return a <code>__v8hi</code> result: </p>\n<pre class=\"example\">__v8hi __builtin_arc_vmovaw (int, const int)\n__v8hi __builtin_arc_vmovw (int, const int)\n__v8hi __builtin_arc_vmovzw (int, const int)</pre> <p>The following take a single <code>__v8hi</code> argument and return a <code>__v8hi</code> result: </p>\n<pre class=\"example\">__v8hi __builtin_arc_vabsaw (__v8hi)\n__v8hi __builtin_arc_vabsw (__v8hi)\n__v8hi __builtin_arc_vaddsuw (__v8hi)\n__v8hi __builtin_arc_vexch1 (__v8hi)\n__v8hi __builtin_arc_vexch2 (__v8hi)\n__v8hi __builtin_arc_vexch4 (__v8hi)\n__v8hi __builtin_arc_vsignw (__v8hi)\n__v8hi __builtin_arc_vupbaw (__v8hi)\n__v8hi __builtin_arc_vupbw (__v8hi)\n__v8hi __builtin_arc_vupsbaw (__v8hi)\n__v8hi __builtin_arc_vupsbw (__v8hi)</pre> <p>The followign take two <code>int</code> arguments and return no result: </p>\n<pre class=\"example\">void __builtin_arc_vdirun (int, int)\nvoid __builtin_arc_vdorun (int, int)</pre> <p>The following take two <code>int</code> arguments and return no result. The first argument must a 3-bit compile time constant indicating one of the DR0-DR7 DMA setup channels: </p>\n<pre class=\"example\">void __builtin_arc_vdiwr (const int, int)\nvoid __builtin_arc_vdowr (const int, int)</pre> <p>The following take an <code>int</code> argument and return no result: </p>\n<pre class=\"example\">void __builtin_arc_vendrec (int)\nvoid __builtin_arc_vrec (int)\nvoid __builtin_arc_vrecrun (int)\nvoid __builtin_arc_vrun (int)</pre> <p>The following take a <code>__v8hi</code> argument and two <code>int</code> arguments and return a <code>__v8hi</code> result. The second argument must be a 3-bit compile time constants, indicating one the registers I0-I7, and the third argument must be an 8-bit compile time constant. </p>\n<p><em>Note:</em> Although the equivalent hardware instructions do not take an SIMD register as an operand, these builtins overwrite the relevant bits of the <code>__v8hi</code> register provided as the first argument with the value loaded from the <code>[Ib, u8]</code> location in the SDM. </p>\n<pre class=\"example\">__v8hi __builtin_arc_vld32 (__v8hi, const int, const int)\n__v8hi __builtin_arc_vld32wh (__v8hi, const int, const int)\n__v8hi __builtin_arc_vld32wl (__v8hi, const int, const int)\n__v8hi __builtin_arc_vld64 (__v8hi, const int, const int)</pre> <p>The following take two <code>int</code> arguments and return a <code>__v8hi</code> result. The first argument must be a 3-bit compile time constants, indicating one the registers I0-I7, and the second argument must be an 8-bit compile time constant. </p>\n<pre class=\"example\">__v8hi __builtin_arc_vld128 (const int, const int)\n__v8hi __builtin_arc_vld64w (const int, const int)</pre> <p>The following take a <code>__v8hi</code> argument and two <code>int</code> arguments and return no result. The second argument must be a 3-bit compile time constants, indicating one the registers I0-I7, and the third argument must be an 8-bit compile time constant. </p>\n<pre class=\"example\">void __builtin_arc_vst128 (__v8hi, const int, const int)\nvoid __builtin_arc_vst64 (__v8hi, const int, const int)</pre> <p>The following take a <code>__v8hi</code> argument and three <code>int</code> arguments and return no result. The second argument must be a 3-bit compile-time constant, identifying the 16-bit sub-register to be stored, the third argument must be a 3-bit compile time constants, indicating one the registers I0-I7, and the fourth argument must be an 8-bit compile time constant. </p>\n<pre class=\"example\">void __builtin_arc_vst16_n (__v8hi, const int, const int, const int)\nvoid __builtin_arc_vst32_n (__v8hi, const int, const int, const int)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARC-SIMD-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARC-SIMD-Built_002din-Functions.html</a>\n  </p>\n</div>\n","arm-iwmmxt-built_002din-functions":"<h1 class=\"subsection\" id=\"ARM-iWMMXt-Built_002din-Functions\">6.57.5 ARM iWMMXt Built-in Functions</h1> <p>These built-in functions are available for the ARM family of processors when the <code>-mcpu=iwmmxt</code> switch is used: </p>\n<pre class=\"smallexample\">typedef int v2si __attribute__ ((vector_size (8)));\ntypedef short v4hi __attribute__ ((vector_size (8)));\ntypedef char v8qi __attribute__ ((vector_size (8)));\n\nint __builtin_arm_getwcgr0 (void)\nvoid __builtin_arm_setwcgr0 (int)\nint __builtin_arm_getwcgr1 (void)\nvoid __builtin_arm_setwcgr1 (int)\nint __builtin_arm_getwcgr2 (void)\nvoid __builtin_arm_setwcgr2 (int)\nint __builtin_arm_getwcgr3 (void)\nvoid __builtin_arm_setwcgr3 (int)\nint __builtin_arm_textrmsb (v8qi, int)\nint __builtin_arm_textrmsh (v4hi, int)\nint __builtin_arm_textrmsw (v2si, int)\nint __builtin_arm_textrmub (v8qi, int)\nint __builtin_arm_textrmuh (v4hi, int)\nint __builtin_arm_textrmuw (v2si, int)\nv8qi __builtin_arm_tinsrb (v8qi, int, int)\nv4hi __builtin_arm_tinsrh (v4hi, int, int)\nv2si __builtin_arm_tinsrw (v2si, int, int)\nlong long __builtin_arm_tmia (long long, int, int)\nlong long __builtin_arm_tmiabb (long long, int, int)\nlong long __builtin_arm_tmiabt (long long, int, int)\nlong long __builtin_arm_tmiaph (long long, int, int)\nlong long __builtin_arm_tmiatb (long long, int, int)\nlong long __builtin_arm_tmiatt (long long, int, int)\nint __builtin_arm_tmovmskb (v8qi)\nint __builtin_arm_tmovmskh (v4hi)\nint __builtin_arm_tmovmskw (v2si)\nlong long __builtin_arm_waccb (v8qi)\nlong long __builtin_arm_wacch (v4hi)\nlong long __builtin_arm_waccw (v2si)\nv8qi __builtin_arm_waddb (v8qi, v8qi)\nv8qi __builtin_arm_waddbss (v8qi, v8qi)\nv8qi __builtin_arm_waddbus (v8qi, v8qi)\nv4hi __builtin_arm_waddh (v4hi, v4hi)\nv4hi __builtin_arm_waddhss (v4hi, v4hi)\nv4hi __builtin_arm_waddhus (v4hi, v4hi)\nv2si __builtin_arm_waddw (v2si, v2si)\nv2si __builtin_arm_waddwss (v2si, v2si)\nv2si __builtin_arm_waddwus (v2si, v2si)\nv8qi __builtin_arm_walign (v8qi, v8qi, int)\nlong long __builtin_arm_wand(long long, long long)\nlong long __builtin_arm_wandn (long long, long long)\nv8qi __builtin_arm_wavg2b (v8qi, v8qi)\nv8qi __builtin_arm_wavg2br (v8qi, v8qi)\nv4hi __builtin_arm_wavg2h (v4hi, v4hi)\nv4hi __builtin_arm_wavg2hr (v4hi, v4hi)\nv8qi __builtin_arm_wcmpeqb (v8qi, v8qi)\nv4hi __builtin_arm_wcmpeqh (v4hi, v4hi)\nv2si __builtin_arm_wcmpeqw (v2si, v2si)\nv8qi __builtin_arm_wcmpgtsb (v8qi, v8qi)\nv4hi __builtin_arm_wcmpgtsh (v4hi, v4hi)\nv2si __builtin_arm_wcmpgtsw (v2si, v2si)\nv8qi __builtin_arm_wcmpgtub (v8qi, v8qi)\nv4hi __builtin_arm_wcmpgtuh (v4hi, v4hi)\nv2si __builtin_arm_wcmpgtuw (v2si, v2si)\nlong long __builtin_arm_wmacs (long long, v4hi, v4hi)\nlong long __builtin_arm_wmacsz (v4hi, v4hi)\nlong long __builtin_arm_wmacu (long long, v4hi, v4hi)\nlong long __builtin_arm_wmacuz (v4hi, v4hi)\nv4hi __builtin_arm_wmadds (v4hi, v4hi)\nv4hi __builtin_arm_wmaddu (v4hi, v4hi)\nv8qi __builtin_arm_wmaxsb (v8qi, v8qi)\nv4hi __builtin_arm_wmaxsh (v4hi, v4hi)\nv2si __builtin_arm_wmaxsw (v2si, v2si)\nv8qi __builtin_arm_wmaxub (v8qi, v8qi)\nv4hi __builtin_arm_wmaxuh (v4hi, v4hi)\nv2si __builtin_arm_wmaxuw (v2si, v2si)\nv8qi __builtin_arm_wminsb (v8qi, v8qi)\nv4hi __builtin_arm_wminsh (v4hi, v4hi)\nv2si __builtin_arm_wminsw (v2si, v2si)\nv8qi __builtin_arm_wminub (v8qi, v8qi)\nv4hi __builtin_arm_wminuh (v4hi, v4hi)\nv2si __builtin_arm_wminuw (v2si, v2si)\nv4hi __builtin_arm_wmulsm (v4hi, v4hi)\nv4hi __builtin_arm_wmulul (v4hi, v4hi)\nv4hi __builtin_arm_wmulum (v4hi, v4hi)\nlong long __builtin_arm_wor (long long, long long)\nv2si __builtin_arm_wpackdss (long long, long long)\nv2si __builtin_arm_wpackdus (long long, long long)\nv8qi __builtin_arm_wpackhss (v4hi, v4hi)\nv8qi __builtin_arm_wpackhus (v4hi, v4hi)\nv4hi __builtin_arm_wpackwss (v2si, v2si)\nv4hi __builtin_arm_wpackwus (v2si, v2si)\nlong long __builtin_arm_wrord (long long, long long)\nlong long __builtin_arm_wrordi (long long, int)\nv4hi __builtin_arm_wrorh (v4hi, long long)\nv4hi __builtin_arm_wrorhi (v4hi, int)\nv2si __builtin_arm_wrorw (v2si, long long)\nv2si __builtin_arm_wrorwi (v2si, int)\nv2si __builtin_arm_wsadb (v2si, v8qi, v8qi)\nv2si __builtin_arm_wsadbz (v8qi, v8qi)\nv2si __builtin_arm_wsadh (v2si, v4hi, v4hi)\nv2si __builtin_arm_wsadhz (v4hi, v4hi)\nv4hi __builtin_arm_wshufh (v4hi, int)\nlong long __builtin_arm_wslld (long long, long long)\nlong long __builtin_arm_wslldi (long long, int)\nv4hi __builtin_arm_wsllh (v4hi, long long)\nv4hi __builtin_arm_wsllhi (v4hi, int)\nv2si __builtin_arm_wsllw (v2si, long long)\nv2si __builtin_arm_wsllwi (v2si, int)\nlong long __builtin_arm_wsrad (long long, long long)\nlong long __builtin_arm_wsradi (long long, int)\nv4hi __builtin_arm_wsrah (v4hi, long long)\nv4hi __builtin_arm_wsrahi (v4hi, int)\nv2si __builtin_arm_wsraw (v2si, long long)\nv2si __builtin_arm_wsrawi (v2si, int)\nlong long __builtin_arm_wsrld (long long, long long)\nlong long __builtin_arm_wsrldi (long long, int)\nv4hi __builtin_arm_wsrlh (v4hi, long long)\nv4hi __builtin_arm_wsrlhi (v4hi, int)\nv2si __builtin_arm_wsrlw (v2si, long long)\nv2si __builtin_arm_wsrlwi (v2si, int)\nv8qi __builtin_arm_wsubb (v8qi, v8qi)\nv8qi __builtin_arm_wsubbss (v8qi, v8qi)\nv8qi __builtin_arm_wsubbus (v8qi, v8qi)\nv4hi __builtin_arm_wsubh (v4hi, v4hi)\nv4hi __builtin_arm_wsubhss (v4hi, v4hi)\nv4hi __builtin_arm_wsubhus (v4hi, v4hi)\nv2si __builtin_arm_wsubw (v2si, v2si)\nv2si __builtin_arm_wsubwss (v2si, v2si)\nv2si __builtin_arm_wsubwus (v2si, v2si)\nv4hi __builtin_arm_wunpckehsb (v8qi)\nv2si __builtin_arm_wunpckehsh (v4hi)\nlong long __builtin_arm_wunpckehsw (v2si)\nv4hi __builtin_arm_wunpckehub (v8qi)\nv2si __builtin_arm_wunpckehuh (v4hi)\nlong long __builtin_arm_wunpckehuw (v2si)\nv4hi __builtin_arm_wunpckelsb (v8qi)\nv2si __builtin_arm_wunpckelsh (v4hi)\nlong long __builtin_arm_wunpckelsw (v2si)\nv4hi __builtin_arm_wunpckelub (v8qi)\nv2si __builtin_arm_wunpckeluh (v4hi)\nlong long __builtin_arm_wunpckeluw (v2si)\nv8qi __builtin_arm_wunpckihb (v8qi, v8qi)\nv4hi __builtin_arm_wunpckihh (v4hi, v4hi)\nv2si __builtin_arm_wunpckihw (v2si, v2si)\nv8qi __builtin_arm_wunpckilb (v8qi, v8qi)\nv4hi __builtin_arm_wunpckilh (v4hi, v4hi)\nv2si __builtin_arm_wunpckilw (v2si, v2si)\nlong long __builtin_arm_wxor (long long, long long)\nlong long __builtin_arm_wzero ()</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-iWMMXt-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-iWMMXt-Built_002din-Functions.html</a>\n  </p>\n</div>\n","arm-neon-intrinsics":"<h1 class=\"subsection\" id=\"ARM-NEON-Intrinsics\">6.57.6 ARM NEON Intrinsics</h1> <p>These built-in intrinsics for the ARM Advanced SIMD extension are available when the <code>-mfpu=neon</code> switch is used:    </p>\n<h2 class=\"subsubsection\">6.57.6.1 Addition</h2> <ul> <li>uint32x2_t vadd_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vadd.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vadd_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vadd.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vadd_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vadd.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vadd_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vadd.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vadd_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vadd.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vadd_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vadd.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vadd_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vadd.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vadd_u64 (uint64x1_t, uint64x1_t) </li>\n</ul> <ul> <li>int64x1_t vadd_s64 (int64x1_t, int64x1_t) </li>\n</ul> <ul> <li>uint32x4_t vaddq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vadd.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vaddq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vadd.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vaddq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vadd.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vaddq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vadd.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vaddq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vadd.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vaddq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vadd.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vaddq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vadd.i64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vaddq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vadd.i64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vaddq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vadd.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vaddl_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vaddl.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vaddl_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vaddl.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vaddl_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vaddl.u8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vaddl_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vaddl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vaddl_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vaddl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vaddl_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vaddl.s8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x2_t vaddw_u32 (uint64x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vaddw.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vaddw_u16 (uint32x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vaddw.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vaddw_u8 (uint16x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vaddw.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vaddw_s32 (int64x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vaddw.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vaddw_s16 (int32x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vaddw.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vaddw_s8 (int16x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vaddw.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vhadd_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vhadd.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vhadd_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vhadd.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vhadd_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vhadd.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vhadd_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vhadd.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vhadd_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vhadd.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vhadd_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vhadd.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vhaddq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vhadd.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vhaddq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vhadd.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vhaddq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vhadd.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vhaddq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vhadd.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vhaddq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vhadd.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vhaddq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vhadd.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vrhadd_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vrhadd.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vrhadd_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vrhadd.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vrhadd_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vrhadd.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vrhadd_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vrhadd.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vrhadd_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vrhadd.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vrhadd_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vrhadd.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vrhaddq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vrhadd.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vrhaddq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vrhadd.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vrhaddq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vrhadd.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vrhaddq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vrhadd.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vrhaddq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vrhadd.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vrhaddq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vrhadd.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vqadd_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vqadd.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vqadd_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vqadd.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vqadd_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vqadd.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vqadd_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqadd.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vqadd_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqadd.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vqadd_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vqadd.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vqadd_u64 (uint64x1_t, uint64x1_t) <em>Form of expected instruction(s):</em> <code>vqadd.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vqadd_s64 (int64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vqadd.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vqaddq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vqadd.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vqaddq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vqadd.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vqaddq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vqadd.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vqaddq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vqadd.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vqaddq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vqadd.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vqaddq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vqadd.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vqaddq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vqadd.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vqaddq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vqadd.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vaddhn_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vaddhn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x4_t vaddhn_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vaddhn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x8_t vaddhn_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vaddhn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vaddhn_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vaddhn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x4_t vaddhn_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vaddhn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x8_t vaddhn_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vaddhn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vraddhn_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vraddhn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x4_t vraddhn_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vraddhn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x8_t vraddhn_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vraddhn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vraddhn_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vraddhn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x4_t vraddhn_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vraddhn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x8_t vraddhn_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vraddhn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.2 Multiplication</h2> <ul> <li>uint32x2_t vmul_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vmul_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vmul_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmul.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vmul_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vmul_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vmul_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vmul.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vmul_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vmul.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vmul_p8 (poly8x8_t, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vmul.p8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmulq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vmulq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vmulq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vmul.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vmulq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vmulq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vmulq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vmul.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vmulq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vmul.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly8x16_t vmulq_p8 (poly8x16_t, poly8x16_t) <em>Form of expected instruction(s):</em> <code>vmul.p8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vqdmulh_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqdmulh.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vqdmulh_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqdmulh.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vqdmulhq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vqdmulh.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vqdmulhq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vqdmulh.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vqrdmulh_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vqrdmulh_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vqrdmulhq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vqrdmulhq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vmull_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmull.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmull_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmull.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vmull_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmull.u8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vmull_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vmull.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vmull_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vmull.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vmull_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vmull.s8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly16x8_t vmull_p8 (poly8x8_t, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vmull.p8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vqdmull_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqdmull.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vqdmull_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqdmull.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.3 Multiply-accumulate</h2> <ul> <li>uint32x2_t vmla_u32 (uint32x2_t, uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vmla_u16 (uint16x4_t, uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vmla_u8 (uint8x8_t, uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmla.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vmla_s32 (int32x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vmla_s16 (int16x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vmla_s8 (int8x8_t, int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vmla.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vmla_f32 (float32x2_t, float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vmla.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmlaq_u32 (uint32x4_t, uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vmlaq_u16 (uint16x8_t, uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vmlaq_u8 (uint8x16_t, uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vmla.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vmlaq_s32 (int32x4_t, int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vmlaq_s16 (int16x8_t, int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vmlaq_s8 (int8x16_t, int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vmla.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vmlaq_f32 (float32x4_t, float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vmla.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vmlal_u32 (uint64x2_t, uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmlal.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmlal_u16 (uint32x4_t, uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmlal.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vmlal_u8 (uint16x8_t, uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmlal.u8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vmlal_s32 (int64x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vmlal.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vmlal_s16 (int32x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vmlal.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vmlal_s8 (int16x8_t, int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vmlal.s8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vqdmlal_s32 (int64x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqdmlal.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vqdmlal_s16 (int32x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqdmlal.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.4 Multiply-subtract</h2> <ul> <li>uint32x2_t vmls_u32 (uint32x2_t, uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vmls_u16 (uint16x4_t, uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vmls_u8 (uint8x8_t, uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmls.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vmls_s32 (int32x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vmls_s16 (int16x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vmls_s8 (int8x8_t, int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vmls.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vmls_f32 (float32x2_t, float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vmls.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmlsq_u32 (uint32x4_t, uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vmlsq_u16 (uint16x8_t, uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vmlsq_u8 (uint8x16_t, uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vmls.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vmlsq_s32 (int32x4_t, int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vmlsq_s16 (int16x8_t, int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vmlsq_s8 (int8x16_t, int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vmls.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vmlsq_f32 (float32x4_t, float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vmls.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vmlsl_u32 (uint64x2_t, uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmlsl.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmlsl_u16 (uint32x4_t, uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmlsl.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vmlsl_u8 (uint16x8_t, uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmlsl.u8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vmlsl_s32 (int64x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vmlsl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vmlsl_s16 (int32x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vmlsl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vmlsl_s8 (int16x8_t, int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vmlsl.s8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vqdmlsl_s32 (int64x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqdmlsl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vqdmlsl_s16 (int32x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqdmlsl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.5 Fused-multiply-accumulate</h2> <ul> <li>float32x2_t vfma_f32 (float32x2_t, float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vfma.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vfmaq_f32 (float32x4_t, float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vfma.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.6 Fused-multiply-subtract</h2> <ul> <li>float32x2_t vfms_f32 (float32x2_t, float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vfms.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vfmsq_f32 (float32x4_t, float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vfms.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.7 Round to integral (to nearest, ties to even)</h2> <ul> <li>float32x2_t vrndn_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vrintn.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrndqn_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vrintn.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.8 Round to integral (to nearest, ties away from zero)</h2> <ul> <li>float32x2_t vrnda_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vrinta.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrndqa_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vrinta.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.9 Round to integral (towards +Inf)</h2> <ul> <li>float32x2_t vrndp_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vrintp.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrndqp_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vrintp.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.10 Round to integral (towards -Inf)</h2> <ul> <li>float32x2_t vrndm_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vrintm.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrndqm_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vrintm.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.11 Round to integral (towards 0)</h2> <ul> <li>float32x2_t vrnd_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vrintz.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrndq_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vrintz.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.12 Subtraction</h2> <ul> <li>uint32x2_t vsub_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vsub.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vsub_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vsub.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vsub_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vsub.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vsub_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vsub.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vsub_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vsub.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vsub_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vsub.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vsub_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vsub.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vsub_u64 (uint64x1_t, uint64x1_t) </li>\n</ul> <ul> <li>int64x1_t vsub_s64 (int64x1_t, int64x1_t) </li>\n</ul> <ul> <li>uint32x4_t vsubq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vsub.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vsubq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vsub.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vsubq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vsub.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vsubq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vsub.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vsubq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vsub.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vsubq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vsub.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vsubq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vsub.i64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vsubq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vsub.i64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vsubq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vsub.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vsubl_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vsubl.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vsubl_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vsubl.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vsubl_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vsubl.u8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vsubl_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vsubl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vsubl_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vsubl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vsubl_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vsubl.s8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x2_t vsubw_u32 (uint64x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vsubw.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vsubw_u16 (uint32x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vsubw.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vsubw_u8 (uint16x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vsubw.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vsubw_s32 (int64x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vsubw.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vsubw_s16 (int32x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vsubw.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vsubw_s8 (int16x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vsubw.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vhsub_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vhsub.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vhsub_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vhsub.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vhsub_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vhsub.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vhsub_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vhsub.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vhsub_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vhsub.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vhsub_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vhsub.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vhsubq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vhsub.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vhsubq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vhsub.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vhsubq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vhsub.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vhsubq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vhsub.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vhsubq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vhsub.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vhsubq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vhsub.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vqsub_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vqsub.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vqsub_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vqsub.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vqsub_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vqsub.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vqsub_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqsub.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vqsub_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqsub.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vqsub_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vqsub.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vqsub_u64 (uint64x1_t, uint64x1_t) <em>Form of expected instruction(s):</em> <code>vqsub.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vqsub_s64 (int64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vqsub.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vqsubq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vqsub.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vqsubq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vqsub.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vqsubq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vqsub.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vqsubq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vqsub.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vqsubq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vqsub.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vqsubq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vqsub.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vqsubq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vqsub.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vqsubq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vqsub.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vsubhn_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vsubhn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x4_t vsubhn_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vsubhn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x8_t vsubhn_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vsubhn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vsubhn_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vsubhn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x4_t vsubhn_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vsubhn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x8_t vsubhn_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vsubhn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vrsubhn_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vrsubhn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x4_t vrsubhn_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vrsubhn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x8_t vrsubhn_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vrsubhn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vrsubhn_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vrsubhn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x4_t vrsubhn_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vrsubhn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x8_t vrsubhn_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vrsubhn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.13 Comparison (equal-to)</h2> <ul> <li>uint32x2_t vceq_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vceq.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vceq_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vceq.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vceq_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vceq.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vceq_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vceq.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vceq_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vceq.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vceq_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vceq.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vceq_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vceq.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vceq_p8 (poly8x8_t, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vceq.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vceqq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vceq.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vceqq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vceq.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vceqq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vceq.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vceqq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vceq.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vceqq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vceq.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vceqq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vceq.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vceqq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vceq.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vceqq_p8 (poly8x16_t, poly8x16_t) <em>Form of expected instruction(s):</em> <code>vceq.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.14 Comparison (greater-than-or-equal-to)</h2> <ul> <li>uint32x2_t vcge_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vcge.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vcge_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vcge.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vcge_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vcge.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vcge_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vcge.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vcge_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vcge.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vcge_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vcge.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vcge_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vcge.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vcgeq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vcge.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vcgeq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vcge.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vcgeq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vcge.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcgeq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vcge.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcgeq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vcge.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vcgeq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vcge.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vcgeq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vcge.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.15 Comparison (less-than-or-equal-to)</h2> <ul> <li>uint32x2_t vcle_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vcge.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vcle_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vcge.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vcle_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vcge.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vcle_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vcge.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vcle_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vcge.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vcle_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vcge.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vcle_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vcge.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vcleq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vcge.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vcleq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vcge.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vcleq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vcge.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcleq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vcge.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcleq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vcge.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vcleq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vcge.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vcleq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vcge.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.16 Comparison (greater-than)</h2> <ul> <li>uint32x2_t vcgt_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vcgt.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vcgt_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vcgt_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vcgt.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vcgt_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vcgt.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vcgt_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vcgt.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vcgt_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vcgt_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vcgt.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vcgtq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vcgtq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vcgt.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vcgtq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vcgt.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcgtq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcgtq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vcgtq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vcgt.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vcgtq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vcgt.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.17 Comparison (less-than)</h2> <ul> <li>uint32x2_t vclt_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vcgt.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vclt_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vclt_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vcgt.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vclt_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vcgt.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vclt_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vcgt.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vclt_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vclt_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vcgt.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vcltq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vcltq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vcgt.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vcltq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vcgt.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcltq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcltq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vcgt.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vcltq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vcgt.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vcltq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vcgt.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.18 Comparison (absolute greater-than-or-equal-to)</h2> <ul> <li>uint32x2_t vcage_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vacge.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vcageq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vacge.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.19 Comparison (absolute less-than-or-equal-to)</h2> <ul> <li>uint32x2_t vcale_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vacge.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vcaleq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vacge.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.20 Comparison (absolute greater-than)</h2> <ul> <li>uint32x2_t vcagt_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vacgt.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vcagtq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vacgt.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.21 Comparison (absolute less-than)</h2> <ul> <li>uint32x2_t vcalt_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vacgt.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vcaltq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vacgt.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.22 Test bits</h2> <ul> <li>uint32x2_t vtst_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vtst.32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vtst_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vtst.16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtst_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtst.8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vtst_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vtst.32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vtst_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vtst.16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtst_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtst.8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtst_p8 (poly8x8_t, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vtst.8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vtstq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vtst.32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vtstq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vtst.16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vtstq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vtst.8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vtstq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vtst.32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vtstq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vtst.16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vtstq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vtst.8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vtstq_p8 (poly8x16_t, poly8x16_t) <em>Form of expected instruction(s):</em> <code>vtst.8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.23 Absolute difference</h2> <ul> <li>uint32x2_t vabd_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vabd.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vabd_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vabd.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vabd_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vabd.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vabd_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vabd.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vabd_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vabd.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vabd_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vabd.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vabd_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vabd.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vabdq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vabd.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vabdq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vabd.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vabdq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vabd.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vabdq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vabd.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vabdq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vabd.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vabdq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vabd.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vabdq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vabd.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vabdl_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vabdl.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vabdl_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vabdl.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vabdl_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vabdl.u8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vabdl_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vabdl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vabdl_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vabdl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vabdl_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vabdl.s8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.24 Absolute difference and accumulate</h2> <ul> <li>uint32x2_t vaba_u32 (uint32x2_t, uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vaba.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vaba_u16 (uint16x4_t, uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vaba.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vaba_u8 (uint8x8_t, uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vaba.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vaba_s32 (int32x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vaba.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vaba_s16 (int16x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vaba.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vaba_s8 (int8x8_t, int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vaba.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vabaq_u32 (uint32x4_t, uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vaba.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vabaq_u16 (uint16x8_t, uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vaba.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vabaq_u8 (uint8x16_t, uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vaba.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vabaq_s32 (int32x4_t, int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vaba.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vabaq_s16 (int16x8_t, int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vaba.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vabaq_s8 (int8x16_t, int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vaba.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vabal_u32 (uint64x2_t, uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vabal.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vabal_u16 (uint32x4_t, uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vabal.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vabal_u8 (uint16x8_t, uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vabal.u8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vabal_s32 (int64x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vabal.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vabal_s16 (int32x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vabal.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vabal_s8 (int16x8_t, int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vabal.s8 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.25 Maximum</h2> <ul> <li>uint32x2_t vmax_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmax.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vmax_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmax.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vmax_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmax.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vmax_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vmax.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vmax_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vmax.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vmax_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vmax.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vmax_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vmax.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmaxq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vmax.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vmaxq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vmax.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vmaxq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vmax.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vmaxq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vmax.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vmaxq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vmax.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vmaxq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vmax.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vmaxq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vmax.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.26 Minimum</h2> <ul> <li>uint32x2_t vmin_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmin.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vmin_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmin.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vmin_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmin.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vmin_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vmin.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vmin_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vmin.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vmin_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vmin.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vmin_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vmin.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vminq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vmin.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vminq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vmin.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vminq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vmin.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vminq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vmin.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vminq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vmin.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vminq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vmin.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vminq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vmin.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.27 Pairwise add</h2> <ul> <li>uint32x2_t vpadd_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vpadd.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vpadd_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vpadd.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vpadd_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vpadd.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vpadd_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vpadd.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vpadd_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vpadd.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vpadd_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vpadd.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vpadd_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vpadd.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vpaddl_u32 (uint32x2_t) <em>Form of expected instruction(s):</em> <code>vpaddl.u32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vpaddl_u16 (uint16x4_t) <em>Form of expected instruction(s):</em> <code>vpaddl.u16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vpaddl_u8 (uint8x8_t) <em>Form of expected instruction(s):</em> <code>vpaddl.u8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vpaddl_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vpaddl.s32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vpaddl_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vpaddl.s16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vpaddl_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vpaddl.s8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x2_t vpaddlq_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vpaddl.u32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vpaddlq_u16 (uint16x8_t) <em>Form of expected instruction(s):</em> <code>vpaddl.u16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vpaddlq_u8 (uint8x16_t) <em>Form of expected instruction(s):</em> <code>vpaddl.u8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vpaddlq_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vpaddl.s32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vpaddlq_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vpaddl.s16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vpaddlq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vpaddl.s8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.28 Pairwise add, single_opcode widen and accumulate</h2> <ul> <li>uint64x1_t vpadal_u32 (uint64x1_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vpadal.u32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vpadal_u16 (uint32x2_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vpadal.u16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vpadal_u8 (uint16x4_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vpadal.u8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vpadal_s32 (int64x1_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vpadal.s32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vpadal_s16 (int32x2_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vpadal.s16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vpadal_s8 (int16x4_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vpadal.s8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x2_t vpadalq_u32 (uint64x2_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vpadal.u32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vpadalq_u16 (uint32x4_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vpadal.u16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vpadalq_u8 (uint16x8_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vpadal.u8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vpadalq_s32 (int64x2_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vpadal.s32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vpadalq_s16 (int32x4_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vpadal.s16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vpadalq_s8 (int16x8_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vpadal.s8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.29 Folding maximum</h2> <ul> <li>uint32x2_t vpmax_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vpmax.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vpmax_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vpmax.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vpmax_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vpmax.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vpmax_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vpmax.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vpmax_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vpmax.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vpmax_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vpmax.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vpmax_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vpmax.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.30 Folding minimum</h2> <ul> <li>uint32x2_t vpmin_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vpmin.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vpmin_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vpmin.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vpmin_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vpmin.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vpmin_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vpmin.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vpmin_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vpmin.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vpmin_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vpmin.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vpmin_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vpmin.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.31 Reciprocal step</h2> <ul> <li>float32x2_t vrecps_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vrecps.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrecpsq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vrecps.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x2_t vrsqrts_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vrsqrts.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrsqrtsq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vrsqrts.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.32 Vector shift left</h2> <ul> <li>uint32x2_t vshl_u32 (uint32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vshl.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vshl_u16 (uint16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vshl.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vshl_u8 (uint8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vshl.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vshl_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vshl.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vshl_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vshl.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vshl_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vshl.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vshl_u64 (uint64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vshl.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vshl_s64 (int64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vshl.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vshlq_u32 (uint32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vshl.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vshlq_u16 (uint16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vshl.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vshlq_u8 (uint8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vshl.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vshlq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vshl.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vshlq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vshl.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vshlq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vshl.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vshlq_u64 (uint64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vshl.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vshlq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vshl.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vrshl_u32 (uint32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vrshl.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vrshl_u16 (uint16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vrshl.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vrshl_u8 (uint8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vrshl.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vrshl_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vrshl.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vrshl_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vrshl.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vrshl_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vrshl.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vrshl_u64 (uint64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vrshl.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vrshl_s64 (int64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vrshl.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vrshlq_u32 (uint32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vrshl.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vrshlq_u16 (uint16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vrshl.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vrshlq_u8 (uint8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vrshl.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vrshlq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vrshl.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vrshlq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vrshl.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vrshlq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vrshl.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vrshlq_u64 (uint64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vrshl.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vrshlq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vrshl.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vqshl_u32 (uint32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqshl.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vqshl_u16 (uint16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqshl.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vqshl_u8 (uint8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vqshl.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vqshl_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqshl.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vqshl_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqshl.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vqshl_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vqshl.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vqshl_u64 (uint64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vqshl.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vqshl_s64 (int64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vqshl.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vqshlq_u32 (uint32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vqshl.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vqshlq_u16 (uint16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vqshl.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vqshlq_u8 (uint8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vqshl.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vqshlq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vqshl.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vqshlq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vqshl.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vqshlq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vqshl.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vqshlq_u64 (uint64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vqshl.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vqshlq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vqshl.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vqrshl_u32 (uint32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqrshl.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vqrshl_u16 (uint16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqrshl.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vqrshl_u8 (uint8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vqrshl.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vqrshl_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vqrshl.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vqrshl_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vqrshl.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vqrshl_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vqrshl.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vqrshl_u64 (uint64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vqrshl.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vqrshl_s64 (int64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vqrshl.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vqrshlq_u32 (uint32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vqrshl.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vqrshlq_u16 (uint16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vqrshl.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vqrshlq_u8 (uint8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vqrshl.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vqrshlq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vqrshl.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vqrshlq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vqrshl.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vqrshlq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vqrshl.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vqrshlq_u64 (uint64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vqrshl.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vqrshlq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vqrshl.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.33 Vector shift left by constant</h2> <ul> <li>uint32x2_t vshl_n_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vshl_n_u16 (uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vshl_n_u8 (uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vshl_n_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vshl_n_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vshl_n_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vshl_n_u64 (uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vshl_n_s64 (int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vshlq_n_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vshlq_n_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vshlq_n_u8 (uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vshlq_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vshlq_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vshlq_n_s8 (int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vshlq_n_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vshlq_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshl.i64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vqshl_n_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vqshl_n_u16 (uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vqshl_n_u8 (uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vqshl_n_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vqshl_n_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vqshl_n_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vqshl_n_u64 (uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vqshl_n_s64 (int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vqshlq_n_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vqshlq_n_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vqshlq_n_u8 (uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vqshlq_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vqshlq_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vqshlq_n_s8 (int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vqshlq_n_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vqshlq_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshl.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vqshlu_n_s64 (int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vqshlu.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vqshlu_n_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshlu.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vqshlu_n_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshlu.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vqshlu_n_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshlu.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vqshluq_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshlu.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vqshluq_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshlu.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vqshluq_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshlu.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vqshluq_n_s8 (int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vqshlu.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vshll_n_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshll.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vshll_n_u16 (uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshll.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vshll_n_u8 (uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshll.u8 </code><var>q0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vshll_n_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshll.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vshll_n_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshll.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vshll_n_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshll.s8 </code><var>q0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.34 Vector shift right by constant</h2> <ul> <li>uint32x2_t vshr_n_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vshr_n_u16 (uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vshr_n_u8 (uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vshr_n_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vshr_n_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vshr_n_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vshr_n_u64 (uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vshr_n_s64 (int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vshrq_n_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vshrq_n_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vshrq_n_u8 (uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vshrq_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vshrq_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vshrq_n_s8 (int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vshrq_n_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vshrq_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshr.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vrshr_n_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vrshr_n_u16 (uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vrshr_n_u8 (uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vrshr_n_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vrshr_n_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vrshr_n_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vrshr_n_u64 (uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vrshr_n_s64 (int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vrshrq_n_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vrshrq_n_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vrshrq_n_u8 (uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vrshrq_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vrshrq_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vrshrq_n_s8 (int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vrshrq_n_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vrshrq_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrshr.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vshrn_n_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshrn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vshrn_n_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshrn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vshrn_n_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshrn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vshrn_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vshrn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vshrn_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vshrn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vshrn_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vshrn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vrshrn_n_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrshrn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vrshrn_n_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrshrn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vrshrn_n_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrshrn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vrshrn_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrshrn.i64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vrshrn_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrshrn.i32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vrshrn_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrshrn.i16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vqshrn_n_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrn.u64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vqshrn_n_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrn.u32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vqshrn_n_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrn.u16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vqshrn_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrn.s64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vqshrn_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrn.s32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vqshrn_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrn.s16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vqrshrn_n_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrn.u64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vqrshrn_n_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrn.u32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vqrshrn_n_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrn.u16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vqrshrn_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrn.s64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vqrshrn_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrn.s32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vqrshrn_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrn.s16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vqshrun_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrun.s64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vqshrun_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrun.s32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vqshrun_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqshrun.s16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vqrshrun_n_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrun.s64 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vqrshrun_n_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrun.s32 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vqrshrun_n_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vqrshrun.s16 </code><var>d0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.35 Vector shift right by constant and accumulate</h2> <ul> <li>uint32x2_t vsra_n_u32 (uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vsra_n_u16 (uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vsra_n_u8 (uint8x8_t, uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vsra_n_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vsra_n_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vsra_n_s8 (int8x8_t, int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vsra_n_u64 (uint64x1_t, uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vsra_n_s64 (int64x1_t, int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vsraq_n_u32 (uint32x4_t, uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vsraq_n_u16 (uint16x8_t, uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vsraq_n_u8 (uint8x16_t, uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vsraq_n_s32 (int32x4_t, int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vsraq_n_s16 (int16x8_t, int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vsraq_n_s8 (int8x16_t, int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vsraq_n_u64 (uint64x2_t, uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vsraq_n_s64 (int64x2_t, int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsra.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vrsra_n_u32 (uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vrsra_n_u16 (uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.u16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vrsra_n_u8 (uint8x8_t, uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.u8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vrsra_n_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vrsra_n_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vrsra_n_s8 (int8x8_t, int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.s8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vrsra_n_u64 (uint64x1_t, uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.u64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vrsra_n_s64 (int64x1_t, int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.s64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vrsraq_n_u32 (uint32x4_t, uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vrsraq_n_u16 (uint16x8_t, uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.u16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vrsraq_n_u8 (uint8x16_t, uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.u8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vrsraq_n_s32 (int32x4_t, int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vrsraq_n_s16 (int16x8_t, int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vrsraq_n_s8 (int8x16_t, int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.s8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vrsraq_n_u64 (uint64x2_t, uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.u64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vrsraq_n_s64 (int64x2_t, int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vrsra.s64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.36 Vector shift right and insert</h2> <ul> <li>poly64x1_t vsri_n_p64 (poly64x1_t, poly64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vsri_n_u32 (uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vsri_n_u16 (uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vsri_n_u8 (uint8x8_t, uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vsri_n_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vsri_n_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vsri_n_s8 (int8x8_t, int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vsri_n_u64 (uint64x1_t, uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vsri_n_s64 (int64x1_t, int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly16x4_t vsri_n_p16 (poly16x4_t, poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly8x8_t vsri_n_p8 (poly8x8_t, poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly64x2_t vsriq_n_p64 (poly64x2_t, poly64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vsriq_n_u32 (uint32x4_t, uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vsriq_n_u16 (uint16x8_t, uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vsriq_n_u8 (uint8x16_t, uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vsriq_n_s32 (int32x4_t, int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vsriq_n_s16 (int16x8_t, int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vsriq_n_s8 (int8x16_t, int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vsriq_n_u64 (uint64x2_t, uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vsriq_n_s64 (int64x2_t, int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly16x8_t vsriq_n_p16 (poly16x8_t, poly16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly8x16_t vsriq_n_p8 (poly8x16_t, poly8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vsri.8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.37 Vector shift left and insert</h2> <ul> <li>poly64x1_t vsli_n_p64 (poly64x1_t, poly64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vsli_n_u32 (uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vsli_n_u16 (uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vsli_n_u8 (uint8x8_t, uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vsli_n_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vsli_n_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vsli_n_s8 (int8x8_t, int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vsli_n_u64 (uint64x1_t, uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vsli_n_s64 (int64x1_t, int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.64 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly16x4_t vsli_n_p16 (poly16x4_t, poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.16 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly8x8_t vsli_n_p8 (poly8x8_t, poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.8 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly64x2_t vsliq_n_p64 (poly64x2_t, poly64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vsliq_n_u32 (uint32x4_t, uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vsliq_n_u16 (uint16x8_t, uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vsliq_n_u8 (uint8x16_t, uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vsliq_n_s32 (int32x4_t, int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vsliq_n_s16 (int16x8_t, int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vsliq_n_s8 (int8x16_t, int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vsliq_n_u64 (uint64x2_t, uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vsliq_n_s64 (int64x2_t, int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.64 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly16x8_t vsliq_n_p16 (poly16x8_t, poly16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.16 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly8x16_t vsliq_n_p8 (poly8x16_t, poly8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vsli.8 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.38 Absolute value</h2> <ul> <li>float32x2_t vabs_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vabs.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vabs_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vabs.s32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vabs_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vabs.s16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vabs_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vabs.s8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vabsq_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vabs.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vabsq_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vabs.s32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vabsq_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vabs.s16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vabsq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vabs.s8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vqabs_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vqabs.s32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vqabs_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vqabs.s16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vqabs_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vqabs.s8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vqabsq_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vqabs.s32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vqabsq_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vqabs.s16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vqabsq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vqabs.s8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.39 Negation</h2> <ul> <li>float32x2_t vneg_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vneg.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vneg_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vneg.s32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vneg_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vneg.s16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vneg_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vneg.s8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vnegq_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vneg.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vnegq_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vneg.s32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vnegq_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vneg.s16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vnegq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vneg.s8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vqneg_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vqneg.s32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vqneg_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vqneg.s16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vqneg_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vqneg.s8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vqnegq_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vqneg.s32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vqnegq_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vqneg.s16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vqnegq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vqneg.s8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.40 Bitwise not</h2> <ul> <li>uint32x2_t vmvn_u32 (uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vmvn_u16 (uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vmvn_u8 (uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vmvn_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vmvn_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vmvn_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vmvn_p8 (poly8x8_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmvnq_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vmvnq_u16 (uint16x8_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vmvnq_u8 (uint8x16_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vmvnq_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vmvnq_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vmvnq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly8x16_t vmvnq_p8 (poly8x16_t) <em>Form of expected instruction(s):</em> <code>vmvn </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.41 Count leading sign bits</h2> <ul> <li>int32x2_t vcls_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vcls.s32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vcls_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vcls.s16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vcls_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vcls.s8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vclsq_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vcls.s32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vclsq_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vcls.s16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vclsq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vcls.s8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.42 Count leading zeros</h2> <ul> <li>uint32x2_t vclz_u32 (uint32x2_t) <em>Form of expected instruction(s):</em> <code>vclz.i32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vclz_u16 (uint16x4_t) <em>Form of expected instruction(s):</em> <code>vclz.i16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vclz_u8 (uint8x8_t) <em>Form of expected instruction(s):</em> <code>vclz.i8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vclz_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vclz.i32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vclz_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vclz.i16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vclz_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vclz.i8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vclzq_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vclz.i32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vclzq_u16 (uint16x8_t) <em>Form of expected instruction(s):</em> <code>vclz.i16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vclzq_u8 (uint8x16_t) <em>Form of expected instruction(s):</em> <code>vclz.i8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vclzq_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vclz.i32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vclzq_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vclz.i16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vclzq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vclz.i8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.43 Count number of set bits</h2> <ul> <li>uint8x8_t vcnt_u8 (uint8x8_t) <em>Form of expected instruction(s):</em> <code>vcnt.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vcnt_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vcnt.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vcnt_p8 (poly8x8_t) <em>Form of expected instruction(s):</em> <code>vcnt.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x16_t vcntq_u8 (uint8x16_t) <em>Form of expected instruction(s):</em> <code>vcnt.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vcntq_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vcnt.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly8x16_t vcntq_p8 (poly8x16_t) <em>Form of expected instruction(s):</em> <code>vcnt.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.44 Reciprocal estimate</h2> <ul> <li>float32x2_t vrecpe_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vrecpe.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vrecpe_u32 (uint32x2_t) <em>Form of expected instruction(s):</em> <code>vrecpe.u32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrecpeq_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vrecpe.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vrecpeq_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vrecpe.u32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.45 Reciprocal square-root estimate</h2> <ul> <li>float32x2_t vrsqrte_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vrsqrte.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vrsqrte_u32 (uint32x2_t) <em>Form of expected instruction(s):</em> <code>vrsqrte.u32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vrsqrteq_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vrsqrte.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vrsqrteq_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vrsqrte.u32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.46 Get lanes from a vector</h2> <ul> <li>uint32_t vget_lane_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16_t vget_lane_u16 (uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.u16 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint8_t vget_lane_u8 (uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.u8 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32_t vget_lane_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16_t vget_lane_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.s16 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int8_t vget_lane_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.s8 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32_t vget_lane_f32 (float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly16_t vget_lane_p16 (poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.u16 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly8_t vget_lane_p8 (poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.u8 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint64_t vget_lane_u64 (uint64x1_t, const int) </li>\n</ul> <ul> <li>int64_t vget_lane_s64 (int64x1_t, const int) </li>\n</ul> <ul> <li>uint32_t vgetq_lane_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16_t vgetq_lane_u16 (uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.u16 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint8_t vgetq_lane_u8 (uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.u8 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32_t vgetq_lane_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16_t vgetq_lane_s16 (int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.s16 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int8_t vgetq_lane_s8 (int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.s8 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32_t vgetq_lane_f32 (float32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly16_t vgetq_lane_p16 (poly16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.u16 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly8_t vgetq_lane_p8 (poly8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.u8 </code><var>r0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint64_t vgetq_lane_u64 (uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>d0</var> <em>or</em> <code>fmrrd </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64_t vgetq_lane_s64 (int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>d0</var> <em>or</em> <code>fmrrd </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.47 Set lanes in a vector</h2> <ul> <li>uint32x2_t vset_lane_u32 (uint32_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>uint16x4_t vset_lane_u16 (uint16_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.16 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>uint8x8_t vset_lane_u8 (uint8_t, uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.8 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>int32x2_t vset_lane_s32 (int32_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>int16x4_t vset_lane_s16 (int16_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.16 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>int8x8_t vset_lane_s8 (int8_t, int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.8 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>float32x2_t vset_lane_f32 (float32_t, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>poly16x4_t vset_lane_p16 (poly16_t, poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.16 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>poly8x8_t vset_lane_p8 (poly8_t, poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.8 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>uint64x1_t vset_lane_u64 (uint64_t, uint64x1_t, const int) </li>\n</ul> <ul> <li>int64x1_t vset_lane_s64 (int64_t, int64x1_t, const int) </li>\n</ul> <ul> <li>uint32x4_t vsetq_lane_u32 (uint32_t, uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>uint16x8_t vsetq_lane_u16 (uint16_t, uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.16 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>uint8x16_t vsetq_lane_u8 (uint8_t, uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.8 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>int32x4_t vsetq_lane_s32 (int32_t, int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>int16x8_t vsetq_lane_s16 (int16_t, int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.16 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>int8x16_t vsetq_lane_s8 (int8_t, int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.8 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>float32x4_t vsetq_lane_f32 (float32_t, float32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.32 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>poly16x8_t vsetq_lane_p16 (poly16_t, poly16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.16 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>poly8x16_t vsetq_lane_p8 (poly8_t, poly8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vmov.8 </code><var>d0</var><code>[</code><var>0</var><code>], </code><var>r0</var> </li>\n</ul> <ul> <li>uint64x2_t vsetq_lane_u64 (uint64_t, uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int64x2_t vsetq_lane_s64 (int64_t, int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.48 Create vector from literal bit pattern</h2> <ul> <li>poly64x1_t vcreate_p64 (uint64_t) </li>\n</ul> <ul> <li>uint32x2_t vcreate_u32 (uint64_t) </li>\n</ul> <ul> <li>uint16x4_t vcreate_u16 (uint64_t) </li>\n</ul> <ul> <li>uint8x8_t vcreate_u8 (uint64_t) </li>\n</ul> <ul> <li>int32x2_t vcreate_s32 (uint64_t) </li>\n</ul> <ul> <li>int16x4_t vcreate_s16 (uint64_t) </li>\n</ul> <ul> <li>int8x8_t vcreate_s8 (uint64_t) </li>\n</ul> <ul> <li>uint64x1_t vcreate_u64 (uint64_t) </li>\n</ul> <ul> <li>int64x1_t vcreate_s64 (uint64_t) </li>\n</ul> <ul> <li>float32x2_t vcreate_f32 (uint64_t) </li>\n</ul> <ul> <li>poly16x4_t vcreate_p16 (uint64_t) </li>\n</ul> <ul> <li>poly8x8_t vcreate_p8 (uint64_t) </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.49 Set all lanes to the same value</h2> <ul> <li>uint32x2_t vdup_n_u32 (uint32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint16x4_t vdup_n_u16 (uint16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint8x8_t vdup_n_u8 (uint8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int32x2_t vdup_n_s32 (int32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int16x4_t vdup_n_s16 (int16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int8x8_t vdup_n_s8 (int8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>float32x2_t vdup_n_f32 (float32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly16x4_t vdup_n_p16 (poly16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly8x8_t vdup_n_p8 (poly8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly64x1_t vdup_n_p64 (poly64_t) </li>\n</ul> <ul> <li>uint64x1_t vdup_n_u64 (uint64_t) </li>\n</ul> <ul> <li>int64x1_t vdup_n_s64 (int64_t) </li>\n</ul> <ul> <li>poly64x2_t vdupq_n_p64 (poly64_t) </li>\n</ul> <ul> <li>uint32x4_t vdupq_n_u32 (uint32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint16x8_t vdupq_n_u16 (uint16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint8x16_t vdupq_n_u8 (uint8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int32x4_t vdupq_n_s32 (int32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int16x8_t vdupq_n_s16 (int16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int8x16_t vdupq_n_s8 (int8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>float32x4_t vdupq_n_f32 (float32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly16x8_t vdupq_n_p16 (poly16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly8x16_t vdupq_n_p8 (poly8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint64x2_t vdupq_n_u64 (uint64_t) </li>\n</ul> <ul> <li>int64x2_t vdupq_n_s64 (int64_t) </li>\n</ul> <ul> <li>uint32x2_t vmov_n_u32 (uint32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint16x4_t vmov_n_u16 (uint16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint8x8_t vmov_n_u8 (uint8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int32x2_t vmov_n_s32 (int32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int16x4_t vmov_n_s16 (int16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int8x8_t vmov_n_s8 (int8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>float32x2_t vmov_n_f32 (float32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly16x4_t vmov_n_p16 (poly16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly8x8_t vmov_n_p8 (poly8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint64x1_t vmov_n_u64 (uint64_t) </li>\n</ul> <ul> <li>int64x1_t vmov_n_s64 (int64_t) </li>\n</ul> <ul> <li>uint32x4_t vmovq_n_u32 (uint32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint16x8_t vmovq_n_u16 (uint16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint8x16_t vmovq_n_u8 (uint8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int32x4_t vmovq_n_s32 (int32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int16x8_t vmovq_n_s16 (int16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>int8x16_t vmovq_n_s8 (int8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>float32x4_t vmovq_n_f32 (float32_t) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly16x8_t vmovq_n_p16 (poly16_t) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>poly8x16_t vmovq_n_p8 (poly8_t) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint64x2_t vmovq_n_u64 (uint64_t) </li>\n</ul> <ul> <li>int64x2_t vmovq_n_s64 (int64_t) </li>\n</ul> <ul> <li>uint32x2_t vdup_lane_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vdup_lane_u16 (uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8_t vdup_lane_u8 (uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vdup_lane_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vdup_lane_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8_t vdup_lane_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2_t vdup_lane_f32 (float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4_t vdup_lane_p16 (poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8_t vdup_lane_p8 (poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1_t vdup_lane_p64 (poly64x1_t, const int) </li>\n</ul> <ul> <li>uint64x1_t vdup_lane_u64 (uint64x1_t, const int) </li>\n</ul> <ul> <li>int64x1_t vdup_lane_s64 (int64x1_t, const int) </li>\n</ul> <ul> <li>uint32x4_t vdupq_lane_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vdupq_lane_u16 (uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x16_t vdupq_lane_u8 (uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vdupq_lane_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vdupq_lane_s16 (int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int8x16_t vdupq_lane_s8 (int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vdupq_lane_f32 (float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.32 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8_t vdupq_lane_p16 (poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.16 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x16_t vdupq_lane_p8 (poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vdup.8 </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x2_t vdupq_lane_p64 (poly64x1_t, const int) </li>\n</ul> <ul> <li>uint64x2_t vdupq_lane_u64 (uint64x1_t, const int) </li>\n</ul> <ul> <li>int64x2_t vdupq_lane_s64 (int64x1_t, const int) </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.50 Combining vectors</h2> <ul> <li>poly64x2_t vcombine_p64 (poly64x1_t, poly64x1_t) </li>\n</ul> <ul> <li>uint32x4_t vcombine_u32 (uint32x2_t, uint32x2_t) </li>\n</ul> <ul> <li>uint16x8_t vcombine_u16 (uint16x4_t, uint16x4_t) </li>\n</ul> <ul> <li>uint8x16_t vcombine_u8 (uint8x8_t, uint8x8_t) </li>\n</ul> <ul> <li>int32x4_t vcombine_s32 (int32x2_t, int32x2_t) </li>\n</ul> <ul> <li>int16x8_t vcombine_s16 (int16x4_t, int16x4_t) </li>\n</ul> <ul> <li>int8x16_t vcombine_s8 (int8x8_t, int8x8_t) </li>\n</ul> <ul> <li>uint64x2_t vcombine_u64 (uint64x1_t, uint64x1_t) </li>\n</ul> <ul> <li>int64x2_t vcombine_s64 (int64x1_t, int64x1_t) </li>\n</ul> <ul> <li>float32x4_t vcombine_f32 (float32x2_t, float32x2_t) </li>\n</ul> <ul> <li>poly16x8_t vcombine_p16 (poly16x4_t, poly16x4_t) </li>\n</ul> <ul> <li>poly8x16_t vcombine_p8 (poly8x8_t, poly8x8_t) </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.51 Splitting vectors</h2> <ul> <li>poly64x1_t vget_high_p64 (poly64x2_t) </li>\n</ul> <ul> <li>uint32x2_t vget_high_u32 (uint32x4_t) </li>\n</ul> <ul> <li>uint16x4_t vget_high_u16 (uint16x8_t) </li>\n</ul> <ul> <li>uint8x8_t vget_high_u8 (uint8x16_t) </li>\n</ul> <ul> <li>int32x2_t vget_high_s32 (int32x4_t) </li>\n</ul> <ul> <li>int16x4_t vget_high_s16 (int16x8_t) </li>\n</ul> <ul> <li>int8x8_t vget_high_s8 (int8x16_t) </li>\n</ul> <ul> <li>uint64x1_t vget_high_u64 (uint64x2_t) </li>\n</ul> <ul> <li>int64x1_t vget_high_s64 (int64x2_t) </li>\n</ul> <ul> <li>float32x2_t vget_high_f32 (float32x4_t) </li>\n</ul> <ul> <li>poly16x4_t vget_high_p16 (poly16x8_t) </li>\n</ul> <ul> <li>poly8x8_t vget_high_p8 (poly8x16_t) </li>\n</ul> <ul> <li>uint32x2_t vget_low_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vget_low_u16 (uint16x8_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vget_low_u8 (uint8x16_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vget_low_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vget_low_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vget_low_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vget_low_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly16x4_t vget_low_p16 (poly16x8_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vget_low_p8 (poly8x16_t) <em>Form of expected instruction(s):</em> <code>vmov </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly64x1_t vget_low_p64 (poly64x2_t) </li>\n</ul> <ul> <li>uint64x1_t vget_low_u64 (uint64x2_t) </li>\n</ul> <ul> <li>int64x1_t vget_low_s64 (int64x2_t) </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.52 Conversions</h2> <ul> <li>float32x2_t vcvt_f32_u32 (uint32x2_t) <em>Form of expected instruction(s):</em> <code>vcvt.f32.u32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vcvt_f32_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vcvt.f32.s32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vcvt_u32_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vcvt.u32.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vcvt_s32_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vcvt.s32.f32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x4_t vcvtq_f32_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vcvt.f32.u32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vcvtq_f32_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vcvt.f32.s32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vcvtq_u32_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vcvt.u32.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vcvtq_s32_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vcvt.s32.f32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float16x4_t vcvt_f16_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vcvt.f16.f32 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vcvt_f32_f16 (float16x4_t) <em>Form of expected instruction(s):</em> <code>vcvt.f32.f16 </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vcvt_n_f32_u32 (uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vcvt.f32.u32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>float32x2_t vcvt_n_f32_s32 (int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vcvt.f32.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vcvt_n_u32_f32 (float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vcvt.u32.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vcvt_n_s32_f32 (float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vcvt.s32.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>float32x4_t vcvtq_n_f32_u32 (uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vcvt.f32.u32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>float32x4_t vcvtq_n_f32_s32 (int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vcvt.f32.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vcvtq_n_u32_f32 (float32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vcvt.u32.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vcvtq_n_s32_f32 (float32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vcvt.s32.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.53 Move, single_opcode narrowing</h2> <ul> <li>uint32x2_t vmovn_u64 (uint64x2_t) <em>Form of expected instruction(s):</em> <code>vmovn.i64 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x4_t vmovn_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vmovn.i32 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x8_t vmovn_u16 (uint16x8_t) <em>Form of expected instruction(s):</em> <code>vmovn.i16 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vmovn_s64 (int64x2_t) <em>Form of expected instruction(s):</em> <code>vmovn.i64 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x4_t vmovn_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vmovn.i32 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x8_t vmovn_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vmovn.i16 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vqmovn_u64 (uint64x2_t) <em>Form of expected instruction(s):</em> <code>vqmovn.u64 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x4_t vqmovn_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vqmovn.u32 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x8_t vqmovn_u16 (uint16x8_t) <em>Form of expected instruction(s):</em> <code>vqmovn.u16 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x2_t vqmovn_s64 (int64x2_t) <em>Form of expected instruction(s):</em> <code>vqmovn.s64 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x4_t vqmovn_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vqmovn.s32 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x8_t vqmovn_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vqmovn.s16 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x2_t vqmovun_s64 (int64x2_t) <em>Form of expected instruction(s):</em> <code>vqmovun.s64 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x4_t vqmovun_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vqmovun.s32 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x8_t vqmovun_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vqmovun.s16 </code><var>d0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.54 Move, single_opcode long</h2> <ul> <li>uint64x2_t vmovl_u32 (uint32x2_t) <em>Form of expected instruction(s):</em> <code>vmovl.u32 </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vmovl_u16 (uint16x4_t) <em>Form of expected instruction(s):</em> <code>vmovl.u16 </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vmovl_u8 (uint8x8_t) <em>Form of expected instruction(s):</em> <code>vmovl.u8 </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x2_t vmovl_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vmovl.s32 </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x4_t vmovl_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vmovl.s16 </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x8_t vmovl_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vmovl.s8 </code><var>q0</var><code>, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.55 Table lookup</h2> <ul> <li>poly8x8_t vtbl1_p8 (poly8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vtbl1_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtbl1_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vtbl2_p8 (poly8x8x2_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vtbl2_s8 (int8x8x2_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtbl2_u8 (uint8x8x2_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vtbl3_p8 (poly8x8x3_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vtbl3_s8 (int8x8x3_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtbl3_u8 (uint8x8x3_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vtbl4_p8 (poly8x8x4_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vtbl4_s8 (int8x8x4_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtbl4_u8 (uint8x8x4_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbl.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.56 Extended table lookup</h2> <ul> <li>poly8x8_t vtbx1_p8 (poly8x8_t, poly8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vtbx1_s8 (int8x8_t, int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtbx1_u8 (uint8x8_t, uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vtbx2_p8 (poly8x8_t, poly8x8x2_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vtbx2_s8 (int8x8_t, int8x8x2_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtbx2_u8 (uint8x8_t, uint8x8x2_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vtbx3_p8 (poly8x8_t, poly8x8x3_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vtbx3_s8 (int8x8_t, int8x8x3_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtbx3_u8 (uint8x8_t, uint8x8x3_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vtbx4_p8 (poly8x8_t, poly8x8x4_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vtbx4_s8 (int8x8_t, int8x8x4_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vtbx4_u8 (uint8x8_t, uint8x8x4_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtbx.8 </code><var>d0</var><code>, {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, </code><var>d0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.57 Multiply, lane</h2> <ul> <li>float32x2_t vmul_lane_f32 (float32x2_t, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vmul_lane_u32 (uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vmul_lane_u16 (uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vmul_lane_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vmul_lane_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vmulq_lane_f32 (float32x4_t, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmulq_lane_u32 (uint32x4_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vmulq_lane_u16 (uint16x8_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmulq_lane_s32 (int32x4_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vmulq_lane_s16 (int16x8_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.58 Long multiply, lane</h2> <ul> <li>uint64x2_t vmull_lane_u32 (uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmull.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmull_lane_u16 (uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmull.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vmull_lane_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmull.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmull_lane_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmull.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.59 Saturating doubling long multiply, lane</h2> <ul> <li>int64x2_t vqdmull_lane_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmull.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vqdmull_lane_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmull.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.60 Saturating doubling multiply high, lane</h2> <ul> <li>int32x4_t vqdmulhq_lane_s32 (int32x4_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmulh.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vqdmulhq_lane_s16 (int16x8_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmulh.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vqdmulh_lane_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmulh.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vqdmulh_lane_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmulh.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vqrdmulhq_lane_s32 (int32x4_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vqrdmulhq_lane_s16 (int16x8_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vqrdmulh_lane_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vqrdmulh_lane_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.61 Multiply-accumulate, lane</h2> <ul> <li>float32x2_t vmla_lane_f32 (float32x2_t, float32x2_t, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vmla_lane_u32 (uint32x2_t, uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vmla_lane_u16 (uint16x4_t, uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vmla_lane_s32 (int32x2_t, int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vmla_lane_s16 (int16x4_t, int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vmlaq_lane_f32 (float32x4_t, float32x4_t, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmlaq_lane_u32 (uint32x4_t, uint32x4_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vmlaq_lane_u16 (uint16x8_t, uint16x8_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmlaq_lane_s32 (int32x4_t, int32x4_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vmlaq_lane_s16 (int16x8_t, int16x8_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x2_t vmlal_lane_u32 (uint64x2_t, uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmlal.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmlal_lane_u16 (uint32x4_t, uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmlal.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vmlal_lane_s32 (int64x2_t, int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmlal.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmlal_lane_s16 (int32x4_t, int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmlal.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vqdmlal_lane_s32 (int64x2_t, int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmlal.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vqdmlal_lane_s16 (int32x4_t, int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmlal.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.62 Multiply-subtract, lane</h2> <ul> <li>float32x2_t vmls_lane_f32 (float32x2_t, float32x2_t, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vmls_lane_u32 (uint32x2_t, uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vmls_lane_u16 (uint16x4_t, uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vmls_lane_s32 (int32x2_t, int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vmls_lane_s16 (int16x4_t, int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vmlsq_lane_f32 (float32x4_t, float32x4_t, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmlsq_lane_u32 (uint32x4_t, uint32x4_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vmlsq_lane_u16 (uint16x8_t, uint16x8_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmlsq_lane_s32 (int32x4_t, int32x4_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vmlsq_lane_s16 (int16x8_t, int16x8_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x2_t vmlsl_lane_u32 (uint64x2_t, uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmlsl.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmlsl_lane_u16 (uint32x4_t, uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmlsl.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vmlsl_lane_s32 (int64x2_t, int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vmlsl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmlsl_lane_s16 (int32x4_t, int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vmlsl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vqdmlsl_lane_s32 (int64x2_t, int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmlsl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vqdmlsl_lane_s16 (int32x4_t, int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vqdmlsl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.63 Vector multiply by scalar</h2> <ul> <li>float32x2_t vmul_n_f32 (float32x2_t, float32_t) <em>Form of expected instruction(s):</em> <code>vmul.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vmul_n_u32 (uint32x2_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vmul_n_u16 (uint16x4_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vmul_n_s32 (int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vmul_n_s16 (int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vmulq_n_f32 (float32x4_t, float32_t) <em>Form of expected instruction(s):</em> <code>vmul.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmulq_n_u32 (uint32x4_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vmulq_n_u16 (uint16x8_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmulq_n_s32 (int32x4_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmul.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vmulq_n_s16 (int16x8_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmul.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.64 Vector long multiply by scalar</h2> <ul> <li>uint64x2_t vmull_n_u32 (uint32x2_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmull.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmull_n_u16 (uint16x4_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmull.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vmull_n_s32 (int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmull.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmull_n_s16 (int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmull.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.65 Vector saturating doubling long multiply by scalar</h2> <ul> <li>int64x2_t vqdmull_n_s32 (int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vqdmull.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vqdmull_n_s16 (int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vqdmull.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.66 Vector saturating doubling multiply high by scalar</h2> <ul> <li>int32x4_t vqdmulhq_n_s32 (int32x4_t, int32_t) <em>Form of expected instruction(s):</em> <code>vqdmulh.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vqdmulhq_n_s16 (int16x8_t, int16_t) <em>Form of expected instruction(s):</em> <code>vqdmulh.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vqdmulh_n_s32 (int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vqdmulh.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vqdmulh_n_s16 (int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vqdmulh.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vqrdmulhq_n_s32 (int32x4_t, int32_t) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vqrdmulhq_n_s16 (int16x8_t, int16_t) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vqrdmulh_n_s32 (int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vqrdmulh_n_s16 (int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vqrdmulh.s16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.67 Vector multiply-accumulate by scalar</h2> <ul> <li>float32x2_t vmla_n_f32 (float32x2_t, float32x2_t, float32_t) <em>Form of expected instruction(s):</em> <code>vmla.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vmla_n_u32 (uint32x2_t, uint32x2_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vmla_n_u16 (uint16x4_t, uint16x4_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vmla_n_s32 (int32x2_t, int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vmla_n_s16 (int16x4_t, int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vmlaq_n_f32 (float32x4_t, float32x4_t, float32_t) <em>Form of expected instruction(s):</em> <code>vmla.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmlaq_n_u32 (uint32x4_t, uint32x4_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vmlaq_n_u16 (uint16x8_t, uint16x8_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmlaq_n_s32 (int32x4_t, int32x4_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmla.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vmlaq_n_s16 (int16x8_t, int16x8_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmla.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x2_t vmlal_n_u32 (uint64x2_t, uint32x2_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmlal.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmlal_n_u16 (uint32x4_t, uint16x4_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmlal.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vmlal_n_s32 (int64x2_t, int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmlal.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmlal_n_s16 (int32x4_t, int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmlal.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vqdmlal_n_s32 (int64x2_t, int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vqdmlal.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vqdmlal_n_s16 (int32x4_t, int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vqdmlal.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.68 Vector multiply-subtract by scalar</h2> <ul> <li>float32x2_t vmls_n_f32 (float32x2_t, float32x2_t, float32_t) <em>Form of expected instruction(s):</em> <code>vmls.f32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vmls_n_u32 (uint32x2_t, uint32x2_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vmls_n_u16 (uint16x4_t, uint16x4_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vmls_n_s32 (int32x2_t, int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vmls_n_s16 (int16x4_t, int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vmlsq_n_f32 (float32x4_t, float32x4_t, float32_t) <em>Form of expected instruction(s):</em> <code>vmls.f32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmlsq_n_u32 (uint32x4_t, uint32x4_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vmlsq_n_u16 (uint16x8_t, uint16x8_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmlsq_n_s32 (int32x4_t, int32x4_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmls.i32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vmlsq_n_s16 (int16x8_t, int16x8_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmls.i16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x2_t vmlsl_n_u32 (uint64x2_t, uint32x2_t, uint32_t) <em>Form of expected instruction(s):</em> <code>vmlsl.u32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vmlsl_n_u16 (uint32x4_t, uint16x4_t, uint16_t) <em>Form of expected instruction(s):</em> <code>vmlsl.u16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vmlsl_n_s32 (int64x2_t, int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vmlsl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vmlsl_n_s16 (int32x4_t, int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vmlsl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vqdmlsl_n_s32 (int64x2_t, int32x2_t, int32_t) <em>Form of expected instruction(s):</em> <code>vqdmlsl.s32 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vqdmlsl_n_s16 (int32x4_t, int16x4_t, int16_t) <em>Form of expected instruction(s):</em> <code>vqdmlsl.s16 </code><var>q0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>[</code><var>0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.69 Vector extract</h2> <ul> <li>poly64x1_t vext_p64 (poly64x1_t, poly64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vext.64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x2_t vext_u32 (uint32x2_t, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vext.32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x4_t vext_u16 (uint16x4_t, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vext.16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x8_t vext_u8 (uint8x8_t, uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vext.8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x2_t vext_s32 (int32x2_t, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vext.32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x4_t vext_s16 (int16x4_t, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vext.16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x8_t vext_s8 (int8x8_t, int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vext.8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x1_t vext_u64 (uint64x1_t, uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vext.64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x1_t vext_s64 (int64x1_t, int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vext.64 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>float32x2_t vext_f32 (float32x2_t, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vext.32 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly16x4_t vext_p16 (poly16x4_t, poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vext.16 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly8x8_t vext_p8 (poly8x8_t, poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vext.8 </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly64x2_t vextq_p64 (poly64x2_t, poly64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vext.64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint32x4_t vextq_u32 (uint32x4_t, uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vext.32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint16x8_t vextq_u16 (uint16x8_t, uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vext.16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint8x16_t vextq_u8 (uint8x16_t, uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vext.8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int32x4_t vextq_s32 (int32x4_t, int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vext.32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int16x8_t vextq_s16 (int16x8_t, int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vext.16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int8x16_t vextq_s8 (int8x16_t, int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vext.8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>uint64x2_t vextq_u64 (uint64x2_t, uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vext.64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>int64x2_t vextq_s64 (int64x2_t, int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vext.64 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>float32x4_t vextq_f32 (float32x4_t, float32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vext.32 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly16x8_t vextq_p16 (poly16x8_t, poly16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vext.16 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <ul> <li>poly8x16_t vextq_p8 (poly8x16_t, poly8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vext.8 </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var><code>, #</code><var>0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.70 Reverse elements</h2> <ul> <li>uint32x2_t vrev64_u32 (uint32x2_t) <em>Form of expected instruction(s):</em> <code>vrev64.32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vrev64_u16 (uint16x4_t) <em>Form of expected instruction(s):</em> <code>vrev64.16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vrev64_u8 (uint8x8_t) <em>Form of expected instruction(s):</em> <code>vrev64.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vrev64_s32 (int32x2_t) <em>Form of expected instruction(s):</em> <code>vrev64.32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vrev64_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vrev64.16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vrev64_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vrev64.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vrev64_f32 (float32x2_t) <em>Form of expected instruction(s):</em> <code>vrev64.32 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly16x4_t vrev64_p16 (poly16x4_t) <em>Form of expected instruction(s):</em> <code>vrev64.16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vrev64_p8 (poly8x8_t) <em>Form of expected instruction(s):</em> <code>vrev64.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x4_t vrev64q_u32 (uint32x4_t) <em>Form of expected instruction(s):</em> <code>vrev64.32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vrev64q_u16 (uint16x8_t) <em>Form of expected instruction(s):</em> <code>vrev64.16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vrev64q_u8 (uint8x16_t) <em>Form of expected instruction(s):</em> <code>vrev64.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vrev64q_s32 (int32x4_t) <em>Form of expected instruction(s):</em> <code>vrev64.32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vrev64q_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vrev64.16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vrev64q_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vrev64.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vrev64q_f32 (float32x4_t) <em>Form of expected instruction(s):</em> <code>vrev64.32 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly16x8_t vrev64q_p16 (poly16x8_t) <em>Form of expected instruction(s):</em> <code>vrev64.16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly8x16_t vrev64q_p8 (poly8x16_t) <em>Form of expected instruction(s):</em> <code>vrev64.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x4_t vrev32_u16 (uint16x4_t) <em>Form of expected instruction(s):</em> <code>vrev32.16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vrev32_s16 (int16x4_t) <em>Form of expected instruction(s):</em> <code>vrev32.16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vrev32_u8 (uint8x8_t) <em>Form of expected instruction(s):</em> <code>vrev32.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vrev32_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vrev32.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly16x4_t vrev32_p16 (poly16x4_t) <em>Form of expected instruction(s):</em> <code>vrev32.16 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vrev32_p8 (poly8x8_t) <em>Form of expected instruction(s):</em> <code>vrev32.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x8_t vrev32q_u16 (uint16x8_t) <em>Form of expected instruction(s):</em> <code>vrev32.16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vrev32q_s16 (int16x8_t) <em>Form of expected instruction(s):</em> <code>vrev32.16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vrev32q_u8 (uint8x16_t) <em>Form of expected instruction(s):</em> <code>vrev32.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vrev32q_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vrev32.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly16x8_t vrev32q_p16 (poly16x8_t) <em>Form of expected instruction(s):</em> <code>vrev32.16 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly8x16_t vrev32q_p8 (poly8x16_t) <em>Form of expected instruction(s):</em> <code>vrev32.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x8_t vrev16_u8 (uint8x8_t) <em>Form of expected instruction(s):</em> <code>vrev16.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vrev16_s8 (int8x8_t) <em>Form of expected instruction(s):</em> <code>vrev16.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vrev16_p8 (poly8x8_t) <em>Form of expected instruction(s):</em> <code>vrev16.8 </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x16_t vrev16q_u8 (uint8x16_t) <em>Form of expected instruction(s):</em> <code>vrev16.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vrev16q_s8 (int8x16_t) <em>Form of expected instruction(s):</em> <code>vrev16.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly8x16_t vrev16q_p8 (poly8x16_t) <em>Form of expected instruction(s):</em> <code>vrev16.8 </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.71 Bit selection</h2> <ul> <li>poly64x1_t vbsl_p64 (uint64x1_t, poly64x1_t, poly64x1_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint32x2_t vbsl_u32 (uint32x2_t, uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vbsl_u16 (uint16x4_t, uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vbsl_u8 (uint8x8_t, uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vbsl_s32 (uint32x2_t, int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vbsl_s16 (uint16x4_t, int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vbsl_s8 (uint8x8_t, int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vbsl_u64 (uint64x1_t, uint64x1_t, uint64x1_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int64x1_t vbsl_s64 (uint64x1_t, int64x1_t, int64x1_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>float32x2_t vbsl_f32 (uint32x2_t, float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly16x4_t vbsl_p16 (uint16x4_t, poly16x4_t, poly16x4_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly8x8_t vbsl_p8 (uint8x8_t, poly8x8_t, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbit </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> <em>or</em> <code>vbif </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>poly64x2_t vbslq_p64 (uint64x2_t, poly64x2_t, poly64x2_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint32x4_t vbslq_u32 (uint32x4_t, uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vbslq_u16 (uint16x8_t, uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vbslq_u8 (uint8x16_t, uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vbslq_s32 (uint32x4_t, int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vbslq_s16 (uint16x8_t, int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vbslq_s8 (uint8x16_t, int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vbslq_u64 (uint64x2_t, uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vbslq_s64 (uint64x2_t, int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>float32x4_t vbslq_f32 (uint32x4_t, float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly16x8_t vbslq_p16 (uint16x8_t, poly16x8_t, poly16x8_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>poly8x16_t vbslq_p8 (uint8x16_t, poly8x16_t, poly8x16_t) <em>Form of expected instruction(s):</em> <code>vbsl </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbit </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> <em>or</em> <code>vbif </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.72 Transpose elements</h2> <ul> <li>uint16x4x2_t vtrn_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vtrn.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint8x8x2_t vtrn_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vtrn.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int16x4x2_t vtrn_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vtrn.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int8x8x2_t vtrn_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vtrn.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>poly16x4x2_t vtrn_p16 (poly16x4_t, poly16x4_t) <em>Form of expected instruction(s):</em> <code>vtrn.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>poly8x8x2_t vtrn_p8 (poly8x8_t, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vtrn.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>float32x2x2_t vtrn_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint32x2x2_t vtrn_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int32x2x2_t vtrn_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint32x4x2_t vtrnq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vtrn.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>uint16x8x2_t vtrnq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vtrn.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>uint8x16x2_t vtrnq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vtrn.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int32x4x2_t vtrnq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vtrn.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int16x8x2_t vtrnq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vtrn.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int8x16x2_t vtrnq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vtrn.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>float32x4x2_t vtrnq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vtrn.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>poly16x8x2_t vtrnq_p16 (poly16x8_t, poly16x8_t) <em>Form of expected instruction(s):</em> <code>vtrn.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>poly8x16x2_t vtrnq_p8 (poly8x16_t, poly8x16_t) <em>Form of expected instruction(s):</em> <code>vtrn.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.73 Zip elements</h2> <ul> <li>uint16x4x2_t vzip_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vzip.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint8x8x2_t vzip_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vzip.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int16x4x2_t vzip_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vzip.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int8x8x2_t vzip_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vzip.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>poly16x4x2_t vzip_p16 (poly16x4_t, poly16x4_t) <em>Form of expected instruction(s):</em> <code>vzip.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>poly8x8x2_t vzip_p8 (poly8x8_t, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vzip.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>float32x2x2_t vzip_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint32x2x2_t vzip_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int32x2x2_t vzip_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint32x4x2_t vzipq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vzip.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>uint16x8x2_t vzipq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vzip.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>uint8x16x2_t vzipq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vzip.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int32x4x2_t vzipq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vzip.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int16x8x2_t vzipq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vzip.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int8x16x2_t vzipq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vzip.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>float32x4x2_t vzipq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vzip.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>poly16x8x2_t vzipq_p16 (poly16x8_t, poly16x8_t) <em>Form of expected instruction(s):</em> <code>vzip.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>poly8x16x2_t vzipq_p8 (poly8x16_t, poly8x16_t) <em>Form of expected instruction(s):</em> <code>vzip.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.74 Unzip elements</h2> <ul> <li>uint32x2x2_t vuzp_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint16x4x2_t vuzp_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vuzp.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint8x8x2_t vuzp_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vuzp.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int32x2x2_t vuzp_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int16x4x2_t vuzp_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vuzp.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>int8x8x2_t vuzp_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vuzp.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>float32x2x2_t vuzp_f32 (float32x2_t, float32x2_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>poly16x4x2_t vuzp_p16 (poly16x4_t, poly16x4_t) <em>Form of expected instruction(s):</em> <code>vuzp.16 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>poly8x8x2_t vuzp_p8 (poly8x8_t, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vuzp.8 </code><var>d0</var><code>, </code><var>d1</var> </li>\n</ul> <ul> <li>uint32x4x2_t vuzpq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>uint16x8x2_t vuzpq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vuzp.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>uint8x16x2_t vuzpq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vuzp.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int32x4x2_t vuzpq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int16x8x2_t vuzpq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vuzp.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>int8x16x2_t vuzpq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vuzp.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>float32x4x2_t vuzpq_f32 (float32x4_t, float32x4_t) <em>Form of expected instruction(s):</em> <code>vuzp.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>poly16x8x2_t vuzpq_p16 (poly16x8_t, poly16x8_t) <em>Form of expected instruction(s):</em> <code>vuzp.16 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>poly8x16x2_t vuzpq_p8 (poly8x16_t, poly8x16_t) <em>Form of expected instruction(s):</em> <code>vuzp.8 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.75 Element/structure loads, VLD1 variants</h2> <ul> <li>poly64x1_t vld1_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vld1_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vld1_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8_t vld1_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vld1_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vld1_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8_t vld1_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1_t vld1_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1_t vld1_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2_t vld1_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4_t vld1_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8_t vld1_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x2_t vld1q_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vld1q_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vld1q_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x16_t vld1q_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vld1q_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vld1q_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x16_t vld1q_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x2_t vld1q_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vld1q_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vld1q_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8_t vld1q_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x16_t vld1q_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vld1_lane_u32 (const uint32_t *, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vld1_lane_u16 (const uint16_t *, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8_t vld1_lane_u8 (const uint8_t *, uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vld1_lane_s32 (const int32_t *, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vld1_lane_s16 (const int16_t *, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8_t vld1_lane_s8 (const int8_t *, int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2_t vld1_lane_f32 (const float32_t *, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4_t vld1_lane_p16 (const poly16_t *, poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8_t vld1_lane_p8 (const poly8_t *, poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1_t vld1_lane_p64 (const poly64_t *, poly64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1_t vld1_lane_u64 (const uint64_t *, uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1_t vld1_lane_s64 (const int64_t *, int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vld1q_lane_u32 (const uint32_t *, uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vld1q_lane_u16 (const uint16_t *, uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x16_t vld1q_lane_u8 (const uint8_t *, uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vld1q_lane_s32 (const int32_t *, int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vld1q_lane_s16 (const int16_t *, int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x16_t vld1q_lane_s8 (const int8_t *, int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vld1q_lane_f32 (const float32_t *, float32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8_t vld1q_lane_p16 (const poly16_t *, poly16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x16_t vld1q_lane_p8 (const poly8_t *, poly8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x2_t vld1q_lane_p64 (const poly64_t *, poly64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x2_t vld1q_lane_u64 (const uint64_t *, uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vld1q_lane_s64 (const int64_t *, int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2_t vld1_dup_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4_t vld1_dup_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8_t vld1_dup_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2_t vld1_dup_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4_t vld1_dup_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8_t vld1_dup_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2_t vld1_dup_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4_t vld1_dup_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8_t vld1_dup_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1_t vld1_dup_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1_t vld1_dup_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1_t vld1_dup_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4_t vld1q_dup_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8_t vld1q_dup_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x16_t vld1q_dup_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4_t vld1q_dup_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8_t vld1q_dup_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x16_t vld1q_dup_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4_t vld1q_dup_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld1.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8_t vld1q_dup_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld1.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x16_t vld1q_dup_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld1.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x2_t vld1q_dup_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x2_t vld1q_dup_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x2_t vld1q_dup_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.76 Element/structure stores, VST1 variants</h2> <ul> <li>void vst1_p64 (poly64_t *, poly64x1_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_u32 (uint32_t *, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_u16 (uint16_t *, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_u8 (uint8_t *, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_s32 (int32_t *, int32x2_t) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_s16 (int16_t *, int16x4_t) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_s8 (int8_t *, int8x8_t) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_u64 (uint64_t *, uint64x1_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_s64 (int64_t *, int64x1_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_f32 (float32_t *, float32x2_t) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_p16 (poly16_t *, poly16x4_t) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_p8 (poly8_t *, poly8x8_t) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_p64 (poly64_t *, poly64x2_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_u32 (uint32_t *, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_u16 (uint16_t *, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_u8 (uint8_t *, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_s32 (int32_t *, int32x4_t) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_s16 (int16_t *, int16x8_t) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_s8 (int8_t *, int8x16_t) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_u64 (uint64_t *, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_s64 (int64_t *, int64x2_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_f32 (float32_t *, float32x4_t) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_p16 (poly16_t *, poly16x8_t) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_p8 (poly8_t *, poly8x16_t) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_u32 (uint32_t *, uint32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_u16 (uint16_t *, uint16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_u8 (uint8_t *, uint8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_s32 (int32_t *, int32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_s16 (int16_t *, int16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_s8 (int8_t *, int8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_f32 (float32_t *, float32x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_p16 (poly16_t *, poly16x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_p8 (poly8_t *, poly8x8_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_p64 (poly64_t *, poly64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_s64 (int64_t *, int64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1_lane_u64 (uint64_t *, uint64x1_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_u32 (uint32_t *, uint32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_u16 (uint16_t *, uint16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_u8 (uint8_t *, uint8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_s32 (int32_t *, int32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_s16 (int16_t *, int16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_s8 (int8_t *, int8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_f32 (float32_t *, float32x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.32 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_p16 (poly16_t *, poly16x8_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.16 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_p8 (poly8_t *, poly8x16_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.8 {</code><var>d0</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_p64 (poly64_t *, poly64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_s64 (int64_t *, int64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst1q_lane_u64 (uint64_t *, uint64x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.77 Element/structure loads, VLD2 variants</h2> <ul> <li>uint32x2x2_t vld2_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x2_t vld2_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x2_t vld2_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x2_t vld2_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x2_t vld2_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x2_t vld2_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x2_t vld2_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x2_t vld2_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x2_t vld2_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1x2_t vld2_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1x2_t vld2_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1x2_t vld2_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4x2_t vld2q_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8x2_t vld2q_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x16x2_t vld2q_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4x2_t vld2q_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8x2_t vld2q_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x16x2_t vld2q_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4x2_t vld2q_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8x2_t vld2q_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x16x2_t vld2q_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2x2_t vld2_lane_u32 (const uint32_t *, uint32x2x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x2_t vld2_lane_u16 (const uint16_t *, uint16x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x2_t vld2_lane_u8 (const uint8_t *, uint8x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x2_t vld2_lane_s32 (const int32_t *, int32x2x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x2_t vld2_lane_s16 (const int16_t *, int16x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x2_t vld2_lane_s8 (const int8_t *, int8x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x2_t vld2_lane_f32 (const float32_t *, float32x2x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x2_t vld2_lane_p16 (const poly16_t *, poly16x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x2_t vld2_lane_p8 (const poly8_t *, poly8x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4x2_t vld2q_lane_s32 (const int32_t *, int32x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8x2_t vld2q_lane_s16 (const int16_t *, int16x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4x2_t vld2q_lane_u32 (const uint32_t *, uint32x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8x2_t vld2q_lane_u16 (const uint16_t *, uint16x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4x2_t vld2q_lane_f32 (const float32_t *, float32x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8x2_t vld2q_lane_p16 (const poly16_t *, poly16x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2x2_t vld2_dup_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x2_t vld2_dup_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x2_t vld2_dup_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x2_t vld2_dup_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x2_t vld2_dup_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x2_t vld2_dup_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x2_t vld2_dup_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld2.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x2_t vld2_dup_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld2.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x2_t vld2_dup_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld2.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1x2_t vld2_dup_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1x2_t vld2_dup_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1x2_t vld2_dup_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.78 Element/structure stores, VST2 variants</h2> <ul> <li>void vst2_u32 (uint32_t *, uint32x2x2_t) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_u16 (uint16_t *, uint16x4x2_t) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_u8 (uint8_t *, uint8x8x2_t) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_s32 (int32_t *, int32x2x2_t) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_s16 (int16_t *, int16x4x2_t) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_s8 (int8_t *, int8x8x2_t) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_f32 (float32_t *, float32x2x2_t) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_p16 (poly16_t *, poly16x4x2_t) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_p8 (poly8_t *, poly8x8x2_t) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_p64 (poly64_t *, poly64x1x2_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_u64 (uint64_t *, uint64x1x2_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_s64 (int64_t *, int64x1x2_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_u32 (uint32_t *, uint32x4x2_t) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_u16 (uint16_t *, uint16x8x2_t) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_u8 (uint8_t *, uint8x16x2_t) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_s32 (int32_t *, int32x4x2_t) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_s16 (int16_t *, int16x8x2_t) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_s8 (int8_t *, int8x16x2_t) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_f32 (float32_t *, float32x4x2_t) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_p16 (poly16_t *, poly16x8x2_t) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_p8 (poly8_t *, poly8x16x2_t) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>, </code><var>d1</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_u32 (uint32_t *, uint32x2x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_u16 (uint16_t *, uint16x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_u8 (uint8_t *, uint8x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_s32 (int32_t *, int32x2x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_s16 (int16_t *, int16x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_s8 (int8_t *, int8x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_f32 (float32_t *, float32x2x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_p16 (poly16_t *, poly16x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2_lane_p8 (poly8_t *, poly8x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_lane_s32 (int32_t *, int32x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_lane_s16 (int16_t *, int16x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_lane_u32 (uint32_t *, uint32x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_lane_u16 (uint16_t *, uint16x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_lane_f32 (float32_t *, float32x4x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst2q_lane_p16 (poly16_t *, poly16x8x2_t, const int) <em>Form of expected instruction(s):</em> <code>vst2.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.79 Element/structure loads, VLD3 variants</h2> <ul> <li>uint32x2x3_t vld3_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x3_t vld3_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x3_t vld3_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x3_t vld3_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x3_t vld3_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x3_t vld3_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x3_t vld3_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x3_t vld3_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x3_t vld3_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1x3_t vld3_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1x3_t vld3_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1x3_t vld3_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4x3_t vld3q_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8x3_t vld3q_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x16x3_t vld3q_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4x3_t vld3q_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8x3_t vld3q_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x16x3_t vld3q_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4x3_t vld3q_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8x3_t vld3q_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x16x3_t vld3q_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2x3_t vld3_lane_u32 (const uint32_t *, uint32x2x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x3_t vld3_lane_u16 (const uint16_t *, uint16x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x3_t vld3_lane_u8 (const uint8_t *, uint8x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x3_t vld3_lane_s32 (const int32_t *, int32x2x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x3_t vld3_lane_s16 (const int16_t *, int16x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x3_t vld3_lane_s8 (const int8_t *, int8x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x3_t vld3_lane_f32 (const float32_t *, float32x2x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x3_t vld3_lane_p16 (const poly16_t *, poly16x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x3_t vld3_lane_p8 (const poly8_t *, poly8x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4x3_t vld3q_lane_s32 (const int32_t *, int32x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8x3_t vld3q_lane_s16 (const int16_t *, int16x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4x3_t vld3q_lane_u32 (const uint32_t *, uint32x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8x3_t vld3q_lane_u16 (const uint16_t *, uint16x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4x3_t vld3q_lane_f32 (const float32_t *, float32x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8x3_t vld3q_lane_p16 (const poly16_t *, poly16x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2x3_t vld3_dup_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x3_t vld3_dup_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x3_t vld3_dup_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x3_t vld3_dup_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x3_t vld3_dup_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x3_t vld3_dup_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x3_t vld3_dup_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld3.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x3_t vld3_dup_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld3.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x3_t vld3_dup_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld3.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1x3_t vld3_dup_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1x3_t vld3_dup_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1x3_t vld3_dup_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.80 Element/structure stores, VST3 variants</h2> <ul> <li>void vst3_u32 (uint32_t *, uint32x2x3_t) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_u16 (uint16_t *, uint16x4x3_t) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_u8 (uint8_t *, uint8x8x3_t) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_s32 (int32_t *, int32x2x3_t) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_s16 (int16_t *, int16x4x3_t) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_s8 (int8_t *, int8x8x3_t) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_f32 (float32_t *, float32x2x3_t) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_p16 (poly16_t *, poly16x4x3_t) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_p8 (poly8_t *, poly8x8x3_t) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_p64 (poly64_t *, poly64x1x3_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_u64 (uint64_t *, uint64x1x3_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_s64 (int64_t *, int64x1x3_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_u32 (uint32_t *, uint32x4x3_t) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_u16 (uint16_t *, uint16x8x3_t) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_u8 (uint8_t *, uint8x16x3_t) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_s32 (int32_t *, int32x4x3_t) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_s16 (int16_t *, int16x8x3_t) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_s8 (int8_t *, int8x16x3_t) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_f32 (float32_t *, float32x4x3_t) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_p16 (poly16_t *, poly16x8x3_t) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_p8 (poly8_t *, poly8x16x3_t) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_u32 (uint32_t *, uint32x2x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_u16 (uint16_t *, uint16x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_u8 (uint8_t *, uint8x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_s32 (int32_t *, int32x2x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_s16 (int16_t *, int16x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_s8 (int8_t *, int8x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_f32 (float32_t *, float32x2x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_p16 (poly16_t *, poly16x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3_lane_p8 (poly8_t *, poly8x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_lane_s32 (int32_t *, int32x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_lane_s16 (int16_t *, int16x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_lane_u32 (uint32_t *, uint32x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_lane_u16 (uint16_t *, uint16x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_lane_f32 (float32_t *, float32x4x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst3q_lane_p16 (poly16_t *, poly16x8x3_t, const int) <em>Form of expected instruction(s):</em> <code>vst3.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.81 Element/structure loads, VLD4 variants</h2> <ul> <li>uint32x2x4_t vld4_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x4_t vld4_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x4_t vld4_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x4_t vld4_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x4_t vld4_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x4_t vld4_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x4_t vld4_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x4_t vld4_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x4_t vld4_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1x4_t vld4_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1x4_t vld4_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1x4_t vld4_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4x4_t vld4q_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8x4_t vld4q_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x16x4_t vld4q_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4x4_t vld4q_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8x4_t vld4q_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x16x4_t vld4q_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4x4_t vld4q_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8x4_t vld4q_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x16x4_t vld4q_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2x4_t vld4_lane_u32 (const uint32_t *, uint32x2x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x4_t vld4_lane_u16 (const uint16_t *, uint16x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x4_t vld4_lane_u8 (const uint8_t *, uint8x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x4_t vld4_lane_s32 (const int32_t *, int32x2x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x4_t vld4_lane_s16 (const int16_t *, int16x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x4_t vld4_lane_s8 (const int8_t *, int8x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x4_t vld4_lane_f32 (const float32_t *, float32x2x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x4_t vld4_lane_p16 (const poly16_t *, poly16x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x4_t vld4_lane_p8 (const poly8_t *, poly8x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x4x4_t vld4q_lane_s32 (const int32_t *, int32x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x8x4_t vld4q_lane_s16 (const int16_t *, int16x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x4x4_t vld4q_lane_u32 (const uint32_t *, uint32x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x8x4_t vld4q_lane_u16 (const uint16_t *, uint16x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x4x4_t vld4q_lane_f32 (const float32_t *, float32x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x8x4_t vld4q_lane_p16 (const poly16_t *, poly16x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint32x2x4_t vld4_dup_u32 (const uint32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint16x4x4_t vld4_dup_u16 (const uint16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint8x8x4_t vld4_dup_u8 (const uint8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int32x2x4_t vld4_dup_s32 (const int32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int16x4x4_t vld4_dup_s16 (const int16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int8x8x4_t vld4_dup_s8 (const int8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>float32x2x4_t vld4_dup_f32 (const float32_t *) <em>Form of expected instruction(s):</em> <code>vld4.32 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly16x4x4_t vld4_dup_p16 (const poly16_t *) <em>Form of expected instruction(s):</em> <code>vld4.16 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly8x8x4_t vld4_dup_p8 (const poly8_t *) <em>Form of expected instruction(s):</em> <code>vld4.8 {</code><var>d0</var><code>[], </code><var>d1</var><code>[], </code><var>d2</var><code>[], </code><var>d3</var><code>[]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>poly64x1x4_t vld4_dup_p64 (const poly64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>uint64x1x4_t vld4_dup_u64 (const uint64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>int64x1x4_t vld4_dup_s64 (const int64_t *) <em>Form of expected instruction(s):</em> <code>vld1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.82 Element/structure stores, VST4 variants</h2> <ul> <li>void vst4_u32 (uint32_t *, uint32x2x4_t) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_u16 (uint16_t *, uint16x4x4_t) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_u8 (uint8_t *, uint8x8x4_t) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_s32 (int32_t *, int32x2x4_t) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_s16 (int16_t *, int16x4x4_t) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_s8 (int8_t *, int8x8x4_t) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_f32 (float32_t *, float32x2x4_t) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_p16 (poly16_t *, poly16x4x4_t) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_p8 (poly8_t *, poly8x8x4_t) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_p64 (poly64_t *, poly64x1x4_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_u64 (uint64_t *, uint64x1x4_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_s64 (int64_t *, int64x1x4_t) <em>Form of expected instruction(s):</em> <code>vst1.64 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_u32 (uint32_t *, uint32x4x4_t) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_u16 (uint16_t *, uint16x8x4_t) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_u8 (uint8_t *, uint8x16x4_t) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_s32 (int32_t *, int32x4x4_t) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_s16 (int16_t *, int16x8x4_t) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_s8 (int8_t *, int8x16x4_t) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_f32 (float32_t *, float32x4x4_t) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_p16 (poly16_t *, poly16x8x4_t) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_p8 (poly8_t *, poly8x16x4_t) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>, </code><var>d1</var><code>, </code><var>d2</var><code>, </code><var>d3</var><code>}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_u32 (uint32_t *, uint32x2x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_u16 (uint16_t *, uint16x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_u8 (uint8_t *, uint8x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_s32 (int32_t *, int32x2x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_s16 (int16_t *, int16x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_s8 (int8_t *, int8x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_f32 (float32_t *, float32x2x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_p16 (poly16_t *, poly16x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4_lane_p8 (poly8_t *, poly8x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.8 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_lane_s32 (int32_t *, int32x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_lane_s16 (int16_t *, int16x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_lane_u32 (uint32_t *, uint32x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_lane_u16 (uint16_t *, uint16x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_lane_f32 (float32_t *, float32x4x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.32 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <ul> <li>void vst4q_lane_p16 (poly16_t *, poly16x8x4_t, const int) <em>Form of expected instruction(s):</em> <code>vst4.16 {</code><var>d0</var><code>[</code><var>0</var><code>], </code><var>d1</var><code>[</code><var>0</var><code>], </code><var>d2</var><code>[</code><var>0</var><code>], </code><var>d3</var><code>[</code><var>0</var><code>]}, [</code><var>r0</var><code>]</code> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.83 Logical operations (AND)</h2> <ul> <li>uint32x2_t vand_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vand_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vand_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vand_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vand_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vand_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vand_u64 (uint64x1_t, uint64x1_t) </li>\n</ul> <ul> <li>int64x1_t vand_s64 (int64x1_t, int64x1_t) </li>\n</ul> <ul> <li>uint32x4_t vandq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vandq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vandq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vandq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vandq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vandq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vandq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vandq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vand </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.84 Logical operations (OR)</h2> <ul> <li>uint32x2_t vorr_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vorr_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vorr_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vorr_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vorr_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vorr_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vorr_u64 (uint64x1_t, uint64x1_t) </li>\n</ul> <ul> <li>int64x1_t vorr_s64 (int64x1_t, int64x1_t) </li>\n</ul> <ul> <li>uint32x4_t vorrq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vorrq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vorrq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vorrq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vorrq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vorrq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vorrq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vorrq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vorr </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.85 Logical operations (exclusive OR)</h2> <ul> <li>uint32x2_t veor_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t veor_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t veor_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t veor_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t veor_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t veor_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t veor_u64 (uint64x1_t, uint64x1_t) </li>\n</ul> <ul> <li>int64x1_t veor_s64 (int64x1_t, int64x1_t) </li>\n</ul> <ul> <li>uint32x4_t veorq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t veorq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t veorq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t veorq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t veorq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t veorq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t veorq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t veorq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>veor </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.86 Logical operations (AND-NOT)</h2> <ul> <li>uint32x2_t vbic_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vbic_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vbic_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vbic_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vbic_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vbic_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vbic_u64 (uint64x1_t, uint64x1_t) </li>\n</ul> <ul> <li>int64x1_t vbic_s64 (int64x1_t, int64x1_t) </li>\n</ul> <ul> <li>uint32x4_t vbicq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vbicq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vbicq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vbicq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vbicq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vbicq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vbicq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vbicq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vbic </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.87 Logical operations (OR-NOT)</h2> <ul> <li>uint32x2_t vorn_u32 (uint32x2_t, uint32x2_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint16x4_t vorn_u16 (uint16x4_t, uint16x4_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint8x8_t vorn_u8 (uint8x8_t, uint8x8_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int32x2_t vorn_s32 (int32x2_t, int32x2_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int16x4_t vorn_s16 (int16x4_t, int16x4_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>int8x8_t vorn_s8 (int8x8_t, int8x8_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>d0</var><code>, </code><var>d0</var><code>, </code><var>d0</var> </li>\n</ul> <ul> <li>uint64x1_t vorn_u64 (uint64x1_t, uint64x1_t) </li>\n</ul> <ul> <li>int64x1_t vorn_s64 (int64x1_t, int64x1_t) </li>\n</ul> <ul> <li>uint32x4_t vornq_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint16x8_t vornq_u16 (uint16x8_t, uint16x8_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint8x16_t vornq_u8 (uint8x16_t, uint8x16_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int32x4_t vornq_s32 (int32x4_t, int32x4_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int16x8_t vornq_s16 (int16x8_t, int16x8_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int8x16_t vornq_s8 (int8x16_t, int8x16_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>uint64x2_t vornq_u64 (uint64x2_t, uint64x2_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <ul> <li>int64x2_t vornq_s64 (int64x2_t, int64x2_t) <em>Form of expected instruction(s):</em> <code>vorn </code><var>q0</var><code>, </code><var>q0</var><code>, </code><var>q0</var> </li>\n</ul> <h2 class=\"subsubsection\">6.57.6.88 Reinterpret casts</h2> <ul> <li>poly8x8_t vreinterpret_p8_p16 (poly16x4_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_f32 (float32x2_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_p64 (poly64x1_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_s64 (int64x1_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_u64 (uint64x1_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_s8 (int8x8_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_s16 (int16x4_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_s32 (int32x2_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_u8 (uint8x8_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_u16 (uint16x4_t) </li>\n</ul> <ul> <li>poly8x8_t vreinterpret_p8_u32 (uint32x2_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_p8 (poly8x8_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_f32 (float32x2_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_p64 (poly64x1_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_s64 (int64x1_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_u64 (uint64x1_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_s8 (int8x8_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_s16 (int16x4_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_s32 (int32x2_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_u8 (uint8x8_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_u16 (uint16x4_t) </li>\n</ul> <ul> <li>poly16x4_t vreinterpret_p16_u32 (uint32x2_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_p8 (poly8x8_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_p16 (poly16x4_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_p64 (poly64x1_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_s64 (int64x1_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_u64 (uint64x1_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_s8 (int8x8_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_s16 (int16x4_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_s32 (int32x2_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_u8 (uint8x8_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_u16 (uint16x4_t) </li>\n</ul> <ul> <li>float32x2_t vreinterpret_f32_u32 (uint32x2_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_p8 (poly8x8_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_p16 (poly16x4_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_f32 (float32x2_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_s64 (int64x1_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_u64 (uint64x1_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_s8 (int8x8_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_s16 (int16x4_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_s32 (int32x2_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_u8 (uint8x8_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_u16 (uint16x4_t) </li>\n</ul> <ul> <li>poly64x1_t vreinterpret_p64_u32 (uint32x2_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_p8 (poly8x8_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_p16 (poly16x4_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_f32 (float32x2_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_p64 (poly64x1_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_u64 (uint64x1_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_s8 (int8x8_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_s16 (int16x4_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_s32 (int32x2_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_u8 (uint8x8_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_u16 (uint16x4_t) </li>\n</ul> <ul> <li>int64x1_t vreinterpret_s64_u32 (uint32x2_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_p8 (poly8x8_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_p16 (poly16x4_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_f32 (float32x2_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_p64 (poly64x1_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_s64 (int64x1_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_s8 (int8x8_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_s16 (int16x4_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_s32 (int32x2_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_u8 (uint8x8_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_u16 (uint16x4_t) </li>\n</ul> <ul> <li>uint64x1_t vreinterpret_u64_u32 (uint32x2_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_p8 (poly8x8_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_p16 (poly16x4_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_f32 (float32x2_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_p64 (poly64x1_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_s64 (int64x1_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_u64 (uint64x1_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_s16 (int16x4_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_s32 (int32x2_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_u8 (uint8x8_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_u16 (uint16x4_t) </li>\n</ul> <ul> <li>int8x8_t vreinterpret_s8_u32 (uint32x2_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_p8 (poly8x8_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_p16 (poly16x4_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_f32 (float32x2_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_p64 (poly64x1_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_s64 (int64x1_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_u64 (uint64x1_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_s8 (int8x8_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_s32 (int32x2_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_u8 (uint8x8_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_u16 (uint16x4_t) </li>\n</ul> <ul> <li>int16x4_t vreinterpret_s16_u32 (uint32x2_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_p8 (poly8x8_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_p16 (poly16x4_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_f32 (float32x2_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_p64 (poly64x1_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_s64 (int64x1_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_u64 (uint64x1_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_s8 (int8x8_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_s16 (int16x4_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_u8 (uint8x8_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_u16 (uint16x4_t) </li>\n</ul> <ul> <li>int32x2_t vreinterpret_s32_u32 (uint32x2_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_p8 (poly8x8_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_p16 (poly16x4_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_f32 (float32x2_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_p64 (poly64x1_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_s64 (int64x1_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_u64 (uint64x1_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_s8 (int8x8_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_s16 (int16x4_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_s32 (int32x2_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_u16 (uint16x4_t) </li>\n</ul> <ul> <li>uint8x8_t vreinterpret_u8_u32 (uint32x2_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_p8 (poly8x8_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_p16 (poly16x4_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_f32 (float32x2_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_p64 (poly64x1_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_s64 (int64x1_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_u64 (uint64x1_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_s8 (int8x8_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_s16 (int16x4_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_s32 (int32x2_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_u8 (uint8x8_t) </li>\n</ul> <ul> <li>uint16x4_t vreinterpret_u16_u32 (uint32x2_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_p8 (poly8x8_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_p16 (poly16x4_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_f32 (float32x2_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_p64 (poly64x1_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_s64 (int64x1_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_u64 (uint64x1_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_s8 (int8x8_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_s16 (int16x4_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_s32 (int32x2_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_u8 (uint8x8_t) </li>\n</ul> <ul> <li>uint32x2_t vreinterpret_u32_u16 (uint16x4_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_p16 (poly16x8_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_f32 (float32x4_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_p64 (poly64x2_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_p128 (poly128_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_s64 (int64x2_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_u64 (uint64x2_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_s8 (int8x16_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_s16 (int16x8_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_s32 (int32x4_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_u8 (uint8x16_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_u16 (uint16x8_t) </li>\n</ul> <ul> <li>poly8x16_t vreinterpretq_p8_u32 (uint32x4_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_p8 (poly8x16_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_f32 (float32x4_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_p64 (poly64x2_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_p128 (poly128_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_s64 (int64x2_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_u64 (uint64x2_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_s8 (int8x16_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_s16 (int16x8_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_s32 (int32x4_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_u8 (uint8x16_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_u16 (uint16x8_t) </li>\n</ul> <ul> <li>poly16x8_t vreinterpretq_p16_u32 (uint32x4_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_p8 (poly8x16_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_p16 (poly16x8_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_p64 (poly64x2_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_p128 (poly128_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_s64 (int64x2_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_u64 (uint64x2_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_s8 (int8x16_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_s16 (int16x8_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_s32 (int32x4_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_u8 (uint8x16_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_u16 (uint16x8_t) </li>\n</ul> <ul> <li>float32x4_t vreinterpretq_f32_u32 (uint32x4_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_p8 (poly8x16_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_p16 (poly16x8_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_f32 (float32x4_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_p128 (poly128_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_s64 (int64x2_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_u64 (uint64x2_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_s8 (int8x16_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_s16 (int16x8_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_s32 (int32x4_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_u8 (uint8x16_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_u16 (uint16x8_t) </li>\n</ul> <ul> <li>poly64x2_t vreinterpretq_p64_u32 (uint32x4_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_p8 (poly8x16_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_p16 (poly16x8_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_f32 (float32x4_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_p64 (poly64x2_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_s64 (int64x2_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_u64 (uint64x2_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_s8 (int8x16_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_s16 (int16x8_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_s32 (int32x4_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_u8 (uint8x16_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_u16 (uint16x8_t) </li>\n</ul> <ul> <li>poly128_t vreinterpretq_p128_u32 (uint32x4_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_p8 (poly8x16_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_p16 (poly16x8_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_f32 (float32x4_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_p64 (poly64x2_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_p128 (poly128_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_u64 (uint64x2_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_s8 (int8x16_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_s16 (int16x8_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_s32 (int32x4_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_u8 (uint8x16_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_u16 (uint16x8_t) </li>\n</ul> <ul> <li>int64x2_t vreinterpretq_s64_u32 (uint32x4_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_p8 (poly8x16_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_p16 (poly16x8_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_f32 (float32x4_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_p64 (poly64x2_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_p128 (poly128_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_s64 (int64x2_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_s8 (int8x16_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_s16 (int16x8_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_s32 (int32x4_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_u8 (uint8x16_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_u16 (uint16x8_t) </li>\n</ul> <ul> <li>uint64x2_t vreinterpretq_u64_u32 (uint32x4_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_p8 (poly8x16_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_p16 (poly16x8_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_f32 (float32x4_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_p64 (poly64x2_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_p128 (poly128_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_s64 (int64x2_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_u64 (uint64x2_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_s16 (int16x8_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_s32 (int32x4_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_u8 (uint8x16_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_u16 (uint16x8_t) </li>\n</ul> <ul> <li>int8x16_t vreinterpretq_s8_u32 (uint32x4_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_p8 (poly8x16_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_p16 (poly16x8_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_f32 (float32x4_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_p64 (poly64x2_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_p128 (poly128_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_s64 (int64x2_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_u64 (uint64x2_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_s8 (int8x16_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_s32 (int32x4_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_u8 (uint8x16_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_u16 (uint16x8_t) </li>\n</ul> <ul> <li>int16x8_t vreinterpretq_s16_u32 (uint32x4_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_p8 (poly8x16_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_p16 (poly16x8_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_f32 (float32x4_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_p64 (poly64x2_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_p128 (poly128_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_s64 (int64x2_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_u64 (uint64x2_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_s8 (int8x16_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_s16 (int16x8_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_u8 (uint8x16_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_u16 (uint16x8_t) </li>\n</ul> <ul> <li>int32x4_t vreinterpretq_s32_u32 (uint32x4_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_p8 (poly8x16_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_p16 (poly16x8_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_f32 (float32x4_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_p64 (poly64x2_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_p128 (poly128_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_s64 (int64x2_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_u64 (uint64x2_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_s8 (int8x16_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_s16 (int16x8_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_s32 (int32x4_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_u16 (uint16x8_t) </li>\n</ul> <ul> <li>uint8x16_t vreinterpretq_u8_u32 (uint32x4_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_p8 (poly8x16_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_p16 (poly16x8_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_f32 (float32x4_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_p64 (poly64x2_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_p128 (poly128_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_s64 (int64x2_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_u64 (uint64x2_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_s8 (int8x16_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_s16 (int16x8_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_s32 (int32x4_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_u8 (uint8x16_t) </li>\n</ul> <ul> <li>uint16x8_t vreinterpretq_u16_u32 (uint32x4_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_p8 (poly8x16_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_p16 (poly16x8_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_f32 (float32x4_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_p64 (poly64x2_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_p128 (poly128_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_s64 (int64x2_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_u64 (uint64x2_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_s8 (int8x16_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_s16 (int16x8_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_s32 (int32x4_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_u8 (uint8x16_t) </li>\n</ul> <ul> <li>uint32x4_t vreinterpretq_u32_u16 (uint16x8_t) </li>\n</ul> <ul> <li>poly128_t vldrq_p128(poly128_t const *) </li>\n</ul> <ul> <li>void vstrq_p128(poly128_t *, poly128_t) </li>\n</ul> <ul> <li>uint64x1_t vceq_p64 (poly64x1_t, poly64x1_t) </li>\n</ul> <ul> <li>uint64x1_t vtst_p64 (poly64x1_t, poly64x1_t) </li>\n</ul> <ul> <li>uint32_t vsha1h_u32 (uint32_t) <em>Form of expected instruction(s):</em> <code>sha1h.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>uint32x4_t vsha1cq_u32 (uint32x4_t, uint32_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha1c.32 </code><var>q0</var><code>, </code><var>q1</var><code>, </code><var>q2</var> </li>\n</ul> <ul> <li>uint32x4_t vsha1pq_u32 (uint32x4_t, uint32_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha1p.32 </code><var>q0</var><code>, </code><var>q1</var><code>, </code><var>q2</var> </li>\n</ul> <ul> <li>uint32x4_t vsha1mq_u32 (uint32x4_t, uint32_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha1m.32 </code><var>q0</var><code>, </code><var>q1</var><code>, </code><var>q2</var> </li>\n</ul> <ul> <li>uint32x4_t vsha1su0q_u32 (uint32x4_t, uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha1su0.32 </code><var>q0</var><code>, </code><var>q1</var><code>, </code><var>q2</var> </li>\n</ul> <ul> <li>uint32x4_t vsha1su1q_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha1su1.32 </code><var>q0</var><code>, </code><var>q1</var><code>, </code><var>q2</var> </li>\n</ul> <ul> <li>uint32x4_t vsha256hq_u32 (uint32x4_t, uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha256h.32 </code><var>q0</var><code>, </code><var>q1</var><code>, </code><var>q2</var> </li>\n</ul> <ul> <li>uint32x4_t vsha256h2q_u32 (uint32x4_t, uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha256h2.32 </code><var>q0</var><code>, </code><var>q1</var><code>, </code><var>q2</var> </li>\n</ul> <ul> <li>uint32x4_t vsha256su0q_u32 (uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha256su0.32 </code><var>q0</var><code>, </code><var>q1</var> </li>\n</ul> <ul> <li>uint32x4_t vsha256su1q_u32 (uint32x4_t, uint32x4_t, uint32x4_t) <em>Form of expected instruction(s):</em> <code>sha256su1.32 </code><var>q0</var><code>, </code><var>q1</var><code>, </code><var>q2</var> </li>\n</ul> <ul> <li>poly128_t vmull_p64 (poly64_t a, poly64_t b) <em>Form of expected instruction(s):</em> <code>vmull.p64 </code><var>q0</var><code>, </code><var>d1</var><code>, </code><var>d2</var> </li>\n</ul> <ul> <li>poly128_t vmull_high_p64 (poly64x2_t a, poly64x2_t b) <em>Form of expected instruction(s):</em> <code>vmull.p64 </code><var>q0</var><code>, </code><var>d1</var><code>, </code><var>d2</var> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-NEON-Intrinsics.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-NEON-Intrinsics.html</a>\n  </p>\n</div>\n","arm-acle-intrinsics":"<h1 class=\"subsection\" id=\"ARM-ACLE-Intrinsics\">6.57.7 ARM ACLE Intrinsics</h1>    <h2 class=\"subsubsection\">6.57.7.1 CRC32 intrinsics</h2> <p>These intrinsics are available when the CRC32 architecture extension is specified, e.g. when the <code>-march=armv8-a+crc</code> switch is used, or when the target processor specified with <code>-mcpu</code> supports it. </p>\n<ul> <li>uint32_t __crc32b (uint32_t, uint8_t) <em>Form of expected instruction(s):</em> <code>crc32b </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint32_t __crc32h (uint32_t, uint16_t) <em>Form of expected instruction(s):</em> <code>crc32h </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint32_t __crc32w (uint32_t, uint32_t) <em>Form of expected instruction(s):</em> <code>crc32w </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint32_t __crc32d (uint32_t, uint64_t) <em>Form of expected instruction(s):</em> Two <code>crc32w </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> instructions. </li>\n</ul> <ul> <li>uint32_t __crc32cb (uint32_t, uint8_t) <em>Form of expected instruction(s):</em> <code>crc32cb </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint32_t __crc32ch (uint32_t, uint16_t) <em>Form of expected instruction(s):</em> <code>crc32ch </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint32_t __crc32cw (uint32_t, uint32_t) <em>Form of expected instruction(s):</em> <code>crc32cw </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> </li>\n</ul> <ul> <li>uint32_t __crc32cd (uint32_t, uint64_t) <em>Form of expected instruction(s):</em> Two <code>crc32cw </code><var>r0</var><code>, </code><var>r0</var><code>, </code><var>r0</var> instructions. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-ACLE-Intrinsics.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-ACLE-Intrinsics.html</a>\n  </p>\n</div>\n","avr-built_002din-functions":"<h1 class=\"subsection\" id=\"AVR-Built_002din-Functions\">6.57.8 AVR Built-in Functions</h1> <p>For each built-in function for AVR, there is an equally named, uppercase built-in macro defined. That way users can easily query if or if not a specific built-in is implemented or not. For example, if <code>__builtin_avr_nop</code> is available the macro <code>__BUILTIN_AVR_NOP</code> is defined to <code>1</code> and undefined otherwise. </p>\n<p>The following built-in functions map to the respective machine instruction, i.e. <code>nop</code>, <code>sei</code>, <code>cli</code>, <code>sleep</code>, <code>wdr</code>, <code>swap</code>, <code>fmul</code>, <code>fmuls</code> resp. <code>fmulsu</code>. The three <code>fmul*</code> built-ins are implemented as library call if no hardware multiplier is available. </p>\n<pre class=\"smallexample\">void __builtin_avr_nop (void)\nvoid __builtin_avr_sei (void)\nvoid __builtin_avr_cli (void)\nvoid __builtin_avr_sleep (void)\nvoid __builtin_avr_wdr (void)\nunsigned char __builtin_avr_swap (unsigned char)\nunsigned int __builtin_avr_fmul (unsigned char, unsigned char)\nint __builtin_avr_fmuls (char, char)\nint __builtin_avr_fmulsu (char, unsigned char)</pre> <p>In order to delay execution for a specific number of cycles, GCC implements </p>\n<pre class=\"smallexample\">void __builtin_avr_delay_cycles (unsigned long ticks)</pre> <p class=\"noindent\"><code>ticks</code> is the number of ticks to delay execution. Note that this built-in does not take into account the effect of interrupts that might increase delay time. <code>ticks</code> must be a compile-time integer constant; delays with a variable number of cycles are not supported. </p>\n<pre class=\"smallexample\">char __builtin_avr_flash_segment (const __memx void*)</pre> <p class=\"noindent\">This built-in takes a byte address to the 24-bit <a href=\"named-address-spaces#AVR-Named-Address-Spaces\">address space</a> <code>__memx</code> and returns the number of the flash segment (the 64 KiB chunk) where the address points to. Counting starts at <code>0</code>. If the address does not point to flash memory, return <code>-1</code>. </p>\n<pre class=\"smallexample\">unsigned char __builtin_avr_insert_bits (unsigned long map, unsigned char bits, unsigned char val)</pre> <p class=\"noindent\">Insert bits from <var>bits</var> into <var>val</var> and return the resulting value. The nibbles of <var>map</var> determine how the insertion is performed: Let <var>X</var> be the <var>n</var>-th nibble of <var>map</var> </p>\n<ol type=\"1\" start=\"1\"> <li>If <var>X</var> is <code>0xf</code>, then the <var>n</var>-th bit of <var>val</var> is returned unaltered. </li>\n<li>If X is in the range 0<small class=\"dots\">...</small>7, then the <var>n</var>-th result bit is set to the <var>X</var>-th bit of <var>bits</var> </li>\n<li>If X is in the range 8<small class=\"dots\">...</small><code>0xe</code>, then the <var>n</var>-th result bit is undefined. </li>\n</ol> <p class=\"noindent\">One typical use case for this built-in is adjusting input and output values to non-contiguous port layouts. Some examples: </p>\n<pre class=\"smallexample\">// same as val, bits is unused\n__builtin_avr_insert_bits (0xffffffff, bits, val)</pre> <pre class=\"smallexample\">// same as bits, val is unused\n__builtin_avr_insert_bits (0x76543210, bits, val)</pre> <pre class=\"smallexample\">// same as rotating bits by 4\n__builtin_avr_insert_bits (0x32107654, bits, 0)</pre> <pre class=\"smallexample\">// high nibble of result is the high nibble of val\n// low nibble of result is the low nibble of bits\n__builtin_avr_insert_bits (0xffff3210, bits, val)</pre> <pre class=\"smallexample\">// reverse the bit order of bits\n__builtin_avr_insert_bits (0x01234567, bits, 0)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/AVR-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/AVR-Built_002din-Functions.html</a>\n  </p>\n</div>\n","blackfin-built_002din-functions":"<h1 class=\"subsection\" id=\"Blackfin-Built_002din-Functions\">6.57.9 Blackfin Built-in Functions</h1> <p>Currently, there are two Blackfin-specific built-in functions. These are used for generating <code>CSYNC</code> and <code>SSYNC</code> machine insns without using inline assembly; by using these built-in functions the compiler can automatically add workarounds for hardware errata involving these instructions. These functions are named as follows: </p>\n<pre class=\"smallexample\">void __builtin_bfin_csync (void)\nvoid __builtin_bfin_ssync (void)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Blackfin-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Blackfin-Built_002din-Functions.html</a>\n  </p>\n</div>\n","fr_002dv-built_002din-functions":"<h1 class=\"subsection\" id=\"FR_002dV-Built_002din-Functions\">6.57.10 FR-V Built-in Functions</h1> <p>GCC provides many FR-V-specific built-in functions. In general, these functions are intended to be compatible with those described by FR-V Family, Softune C/C++ Compiler Manual (V6), Fujitsu Semiconductor. The two exceptions are <code>__MDUNPACKH</code> and <code>__MBTOHE</code>, the GCC forms of which pass 128-bit values by pointer rather than by value. </p>\n<p>Most of the functions are named after specific FR-V instructions. Such functions are said to be “directly mapped” and are summarized here in tabular form. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"argument-types#Argument-Types\">Argument Types</a> </li>\n<li>\n<a accesskey=\"2\" href=\"directly_002dmapped-integer-functions#Directly_002dmapped-Integer-Functions\">Directly-mapped Integer Functions</a> </li>\n<li>\n<a accesskey=\"3\" href=\"directly_002dmapped-media-functions#Directly_002dmapped-Media-Functions\">Directly-mapped Media Functions</a> </li>\n<li>\n<a accesskey=\"4\" href=\"raw-read_002fwrite-functions#Raw-read_002fwrite-Functions\">Raw read/write Functions</a> </li>\n<li>\n<a accesskey=\"5\" href=\"other-built_002din-functions#Other-Built_002din-Functions\">Other Built-in Functions</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/FR_002dV-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/FR_002dV-Built_002din-Functions.html</a>\n  </p>\n</div>\n","argument-types":"<h1 class=\"subsubsection\" id=\"Argument-Types\">6.57.10.1 Argument Types</h1> <p>The arguments to the built-in functions can be divided into three groups: register numbers, compile-time constants and run-time values. In order to make this classification clear at a glance, the arguments and return values are given the following pseudo types: </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Pseudo type </td>\n<td valign=\"top\" width=\"30%\">Real C type </td>\n<td valign=\"top\" width=\"15%\">Constant? </td>\n<td valign=\"top\" width=\"35%\">Description </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>uh</code> </td>\n<td valign=\"top\" width=\"30%\">\n<code>unsigned short</code> </td>\n<td valign=\"top\" width=\"15%\">No </td>\n<td valign=\"top\" width=\"35%\">an unsigned halfword </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>uw1</code> </td>\n<td valign=\"top\" width=\"30%\">\n<code>unsigned int</code> </td>\n<td valign=\"top\" width=\"15%\">No </td>\n<td valign=\"top\" width=\"35%\">an unsigned word </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>sw1</code> </td>\n<td valign=\"top\" width=\"30%\">\n<code>int</code> </td>\n<td valign=\"top\" width=\"15%\">No </td>\n<td valign=\"top\" width=\"35%\">a signed word </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>uw2</code> </td>\n<td valign=\"top\" width=\"30%\">\n<code>unsigned long long</code> </td>\n<td valign=\"top\" width=\"15%\">No </td>\n<td valign=\"top\" width=\"35%\">an unsigned doubleword </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>sw2</code> </td>\n<td valign=\"top\" width=\"30%\">\n<code>long long</code> </td>\n<td valign=\"top\" width=\"15%\">No </td>\n<td valign=\"top\" width=\"35%\">a signed doubleword </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>const</code> </td>\n<td valign=\"top\" width=\"30%\">\n<code>int</code> </td>\n<td valign=\"top\" width=\"15%\">Yes </td>\n<td valign=\"top\" width=\"35%\">an integer constant </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>acc</code> </td>\n<td valign=\"top\" width=\"30%\">\n<code>int</code> </td>\n<td valign=\"top\" width=\"15%\">Yes </td>\n<td valign=\"top\" width=\"35%\">an ACC register number </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>iacc</code> </td>\n<td valign=\"top\" width=\"30%\">\n<code>int</code> </td>\n<td valign=\"top\" width=\"15%\">Yes </td>\n<td valign=\"top\" width=\"35%\">an IACC register number </td>\n</tr>\n</table> <p>These pseudo types are not defined by GCC, they are simply a notational convenience used in this manual. </p>\n<p>Arguments of type <code>uh</code>, <code>uw1</code>, <code>sw1</code>, <code>uw2</code> and <code>sw2</code> are evaluated at run time. They correspond to register operands in the underlying FR-V instructions. </p>\n<p><code>const</code> arguments represent immediate operands in the underlying FR-V instructions. They must be compile-time constants. </p>\n<p><code>acc</code> arguments are evaluated at compile time and specify the number of an accumulator register. For example, an <code>acc</code> argument of 2 selects the ACC2 register. </p>\n<p><code>iacc</code> arguments are similar to <code>acc</code> arguments but specify the number of an IACC register. See see <a href=\"other-built_002din-functions#Other-Built_002din-Functions\">Other Built-in Functions</a> for more details. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Argument-Types.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Argument-Types.html</a>\n  </p>\n</div>\n","directly_002dmapped-integer-functions":"<h1 class=\"subsubsection\" id=\"Directly_002dmapped-Integer-Functions\">6.57.10.2 Directly-mapped Integer Functions</h1> <p>The functions listed below map directly to FR-V I-type instructions. </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">Function prototype </td>\n<td valign=\"top\" width=\"32%\">Example usage </td>\n<td valign=\"top\" width=\"23%\">Assembly output </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __ADDSS (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __ADDSS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>ADDSS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __SCAN (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __SCAN (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>SCAN </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __SCUTSS (sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __SCUTSS (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>SCUTSS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __SLASS (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __SLASS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>SLASS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __SMASS (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__SMASS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>SMASS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __SMSSS (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__SMSSS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>SMSSS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __SMU (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__SMU (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>SMU </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw2 __SMUL (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __SMUL (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>SMUL </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __SUBSS (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __SUBSS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>SUBSS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __UMUL (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __UMUL (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>UMUL </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n</table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Directly_002dmapped-Integer-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Directly_002dmapped-Integer-Functions.html</a>\n  </p>\n</div>\n","directly_002dmapped-media-functions":"<h1 class=\"subsubsection\" id=\"Directly_002dmapped-Media-Functions\">6.57.10.3 Directly-mapped Media Functions</h1> <p>The functions listed below map directly to FR-V M-type instructions. </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">Function prototype </td>\n<td valign=\"top\" width=\"32%\">Example usage </td>\n<td valign=\"top\" width=\"23%\">Assembly output </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MABSHS (sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MABSHS (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MABSHS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MADDACCS (acc, acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MADDACCS (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MADDACCS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __MADDHSS (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MADDHSS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MADDHSS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MADDHUS (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MADDHUS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MADDHUS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MAND (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MAND (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MAND </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MASACCS (acc, acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MASACCS (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MASACCS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MAVEH (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MAVEH (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MAVEH </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MBTOH (uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MBTOH (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MBTOH </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MBTOHE (uw1 *, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MBTOHE (&amp;</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MBTOHE </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MCLRACC (acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MCLRACC (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCLRACC </code><var>a</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MCLRACCA (void)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MCLRACCA ()</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCLRACCA</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __Mcop1 (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __Mcop1 (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>Mcop1 </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __Mcop2 (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __Mcop2 (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>Mcop2 </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MCPLHI (uw2, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MCPLHI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCPLHI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MCPLI (uw2, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MCPLI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCPLI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MCPXIS (acc, sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MCPXIS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCPXIS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MCPXIU (acc, uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MCPXIU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCPXIU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MCPXRS (acc, sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MCPXRS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCPXRS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MCPXRU (acc, uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MCPXRU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCPXRU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MCUT (acc, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MCUT (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCUT </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MCUTSS (acc, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MCUTSS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MCUTSS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MDADDACCS (acc, acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MDADDACCS (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MDADDACCS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MDASACCS (acc, acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MDASACCS (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MDASACCS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MDCUTSSI (acc, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MDCUTSSI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MDCUTSSI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MDPACKH (uw2, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MDPACKH (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MDPACKH </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MDROTLI (uw2, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MDROTLI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MDROTLI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MDSUBACCS (acc, acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MDSUBACCS (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MDSUBACCS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MDUNPACKH (uw1 *, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MDUNPACKH (&amp;</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MDUNPACKH </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MEXPDHD (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MEXPDHD (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MEXPDHD </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MEXPDHW (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MEXPDHW (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MEXPDHW </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MHDSETH (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MHDSETH (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MHDSETH </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __MHDSETS (const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MHDSETS (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MHDSETS #</code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MHSETHIH (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MHSETHIH (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MHSETHIH #</code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __MHSETHIS (sw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MHSETHIS (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MHSETHIS #</code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MHSETLOH (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MHSETLOH (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MHSETLOH #</code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __MHSETLOS (sw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MHSETLOS (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MHSETLOS #</code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MHTOB (uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MHTOB (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MHTOB </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MMACHS (acc, sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MMACHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MMACHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MMACHU (acc, uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MMACHU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MMACHU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MMRDHS (acc, sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MMRDHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MMRDHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MMRDHU (acc, uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MMRDHU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MMRDHU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MMULHS (acc, sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MMULHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MMULHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MMULHU (acc, uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MMULHU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MMULHU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MMULXHS (acc, sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MMULXHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MMULXHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MMULXHU (acc, uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MMULXHU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MMULXHU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MNOT (uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MNOT (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MNOT </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MOR (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MOR (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MOR </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MPACKH (uh, uh)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MPACKH (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MPACKH </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw2 __MQADDHSS (sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQADDHSS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQADDHSS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MQADDHUS (uw2, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQADDHUS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQADDHUS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQCPXIS (acc, sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQCPXIS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQCPXIS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQCPXIU (acc, uw2, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQCPXIU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQCPXIU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQCPXRS (acc, sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQCPXRS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQCPXRS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQCPXRU (acc, uw2, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQCPXRU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQCPXRU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw2 __MQLCLRHS (sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQLCLRHS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQLCLRHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw2 __MQLMTHS (sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQLMTHS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQLMTHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQMACHS (acc, sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQMACHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQMACHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQMACHU (acc, uw2, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQMACHU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQMACHU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQMACXHS (acc, sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQMACXHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQMACXHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQMULHS (acc, sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQMULHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQMULHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQMULHU (acc, uw2, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQMULHU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQMULHU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQMULXHS (acc, sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQMULXHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQMULXHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQMULXHU (acc, uw2, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQMULXHU (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQMULXHU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw2 __MQSATHS (sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQSATHS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQSATHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MQSLLHI (uw2, int)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQSLLHI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQSLLHI </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw2 __MQSRAHI (sw2, int)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQSRAHI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQSRAHI </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw2 __MQSUBHSS (sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQSUBHSS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQSUBHSS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MQSUBHUS (uw2, uw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MQSUBHUS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQSUBHUS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQXMACHS (acc, sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQXMACHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQXMACHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MQXMACXHS (acc, sw2, sw2)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MQXMACXHS (</code><var>c</var><code>, </code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MQXMACXHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MRDACC (acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MRDACC (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MRDACC </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MRDACCG (acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MRDACCG (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MRDACCG </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MROTLI (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MROTLI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MROTLI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MROTRI (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MROTRI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MROTRI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __MSATHS (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MSATHS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MSATHS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MSATHU (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MSATHU (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MSATHU </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MSLLHI (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MSLLHI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MSLLHI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __MSRAHI (sw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MSRAHI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MSRAHI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MSRLHI (uw1, const)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MSRLHI (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MSRLHI </code><var>a</var><code>,#</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MSUBACCS (acc, acc)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MSUBACCS (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MSUBACCS </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>sw1 __MSUBHSS (sw1, sw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MSUBHSS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MSUBHSS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MSUBHUS (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MSUBHUS (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MSUBHUS </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MTRAP (void)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MTRAP ()</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MTRAP</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw2 __MUNPACKH (uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>b</var><code> = __MUNPACKH (</code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MUNPACKH </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MWCUT (uw2, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MWCUT (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MWCUT </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MWTACC (acc, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MWTACC (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MWTACC </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>void __MWTACCG (acc, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<code>__MWTACCG (</code><var>b</var><code>, </code><var>a</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MWTACCG </code><var>a</var><code>,</code><var>b</var> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"45%\">\n<code>uw1 __MXOR (uw1, uw1)</code> </td>\n<td valign=\"top\" width=\"32%\">\n<var>c</var><code> = __MXOR (</code><var>a</var><code>, </code><var>b</var><code>)</code> </td>\n<td valign=\"top\" width=\"23%\">\n<code>MXOR </code><var>a</var><code>,</code><var>b</var><code>,</code><var>c</var> </td>\n</tr>\n</table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Directly_002dmapped-Media-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Directly_002dmapped-Media-Functions.html</a>\n  </p>\n</div>\n","raw-read_002fwrite-functions":"<h1 class=\"subsubsection\" id=\"Raw-read_002fwrite-Functions\">6.57.10.4 Raw read/write Functions</h1> <p>This sections describes built-in functions related to read and write instructions to access memory. These functions generate <code>membar</code> instructions to flush the I/O load and stores where appropriate, as described in Fujitsu's manual described above. </p>\n<dl> <dt>\n<code>unsigned char __builtin_read8 (void *</code><var>data</var><code>)</code><dt>\n<code>unsigned short __builtin_read16 (void *</code><var>data</var><code>)</code><dt>\n<code>unsigned long __builtin_read32 (void *</code><var>data</var><code>)</code><dt>\n<code>unsigned long long __builtin_read64 (void *</code><var>data</var><code>)</code> <dt>\n<code>void __builtin_write8 (void *</code><var>data</var><code>, unsigned char </code><var>datum</var><code>)</code><dt>\n<code>void __builtin_write16 (void *</code><var>data</var><code>, unsigned short </code><var>datum</var><code>)</code><dt>\n<code>void __builtin_write32 (void *</code><var>data</var><code>, unsigned long </code><var>datum</var><code>)</code><dt>\n<code>void __builtin_write64 (void *</code><var>data</var><code>, unsigned long long </code><var>datum</var><code>)</code>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Raw-read_002fwrite-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Raw-read_002fwrite-Functions.html</a>\n  </p>\n</div>\n","other-built_002din-functions":"<h1 class=\"subsubsection\" id=\"Other-Built_002din-Functions\">6.57.10.5 Other Built-in Functions</h1> <p>This section describes built-in functions that are not named after a specific FR-V instruction. </p>\n<dl> <dt>\n<code>sw2 __IACCreadll (iacc </code><var>reg</var><code>)</code>\n</dt>\n<dd>Return the full 64-bit value of IACC0. The <var>reg</var> argument is reserved for future expansion and must be 0. </dd>\n<dt>\n<code>sw1 __IACCreadl (iacc </code><var>reg</var><code>)</code>\n</dt>\n<dd>Return the value of IACC0H if <var>reg</var> is 0 and IACC0L if <var>reg</var> is 1. Other values of <var>reg</var> are rejected as invalid. </dd>\n<dt>\n<code>void __IACCsetll (iacc </code><var>reg</var><code>, sw2 </code><var>x</var><code>)</code>\n</dt>\n<dd>Set the full 64-bit value of IACC0 to <var>x</var>. The <var>reg</var> argument is reserved for future expansion and must be 0. </dd>\n<dt>\n<code>void __IACCsetl (iacc </code><var>reg</var><code>, sw1 </code><var>x</var><code>)</code>\n</dt>\n<dd>Set IACC0H to <var>x</var> if <var>reg</var> is 0 and IACC0L to <var>x</var> if <var>reg</var> is 1. Other values of <var>reg</var> are rejected as invalid. </dd>\n<dt>\n<code>void __data_prefetch0 (const void *</code><var>x</var><code>)</code>\n</dt>\n<dd>Use the <code>dcpl</code> instruction to load the contents of address <var>x</var> into the data cache. </dd>\n<dt>\n<code>void __data_prefetch (const void *</code><var>x</var><code>)</code>\n</dt>\n<dd>Use the <code>nldub</code> instruction to load the contents of address <var>x</var> into the data cache. The instruction is issued in slot I1. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Other-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Other-Built_002din-Functions.html</a>\n  </p>\n</div>\n","x86-built_002din-functions":"<h1 class=\"subsection\" id=\"X86-Built_002din-Functions\">6.57.11 X86 Built-in Functions</h1> <p>These built-in functions are available for the i386 and x86-64 family of computers, depending on the command-line switches used. </p>\n<p>If you specify command-line switches such as <code>-msse</code>, the compiler could use the extended instruction sets even if the built-ins are not used explicitly in the program. For this reason, applications that perform run-time CPU detection must compile separate files for each supported architecture, using the appropriate flags. In particular, the file containing the CPU detection code should be compiled without these options. </p>\n<p>The following machine modes are available for use with MMX built-in functions (see <a href=\"vector-extensions#Vector-Extensions\">Vector Extensions</a>): <code>V2SI</code> for a vector of two 32-bit integers, <code>V4HI</code> for a vector of four 16-bit integers, and <code>V8QI</code> for a vector of eight 8-bit integers. Some of the built-in functions operate on MMX registers as a whole 64-bit entity, these use <code>V1DI</code> as their mode. </p>\n<p>If 3DNow! extensions are enabled, <code>V2SF</code> is used as a mode for a vector of two 32-bit floating-point values. </p>\n<p>If SSE extensions are enabled, <code>V4SF</code> is used for a vector of four 32-bit floating-point values. Some instructions use a vector of four 32-bit integers, these use <code>V4SI</code>. Finally, some instructions operate on an entire vector register, interpreting it as a 128-bit integer, these use mode <code>TI</code>. </p>\n<p>In 64-bit mode, the x86-64 family of processors uses additional built-in functions for efficient use of <code>TF</code> (<code>__float128</code>) 128-bit floating point and <code>TC</code> 128-bit complex floating-point values. </p>\n<p>The following floating-point built-in functions are available in 64-bit mode. All of them implement the function that is part of the name. </p>\n<pre class=\"smallexample\">__float128 __builtin_fabsq (__float128)\n__float128 __builtin_copysignq (__float128, __float128)</pre> <p>The following built-in function is always available. </p>\n<dl> <dt><code>void __builtin_ia32_pause (void)</code></dt>\n<dd>Generates the <code>pause</code> machine instruction with a compiler memory barrier. </dd>\n</dl> <p>The following floating-point built-in functions are made available in the 64-bit mode. </p>\n<dl> <dt><code>__float128 __builtin_infq (void)</code></dt>\n<dd>Similar to <code>__builtin_inf</code>, except the return type is <code>__float128</code>.  </dd>\n<dt><code>__float128 __builtin_huge_valq (void)</code></dt>\n<dd>Similar to <code>__builtin_huge_val</code>, except the return type is <code>__float128</code>. \n</dd>\n</dl> <p>The following built-in functions are always available and can be used to check the target platform type. </p>\n<div class=\"defun\"> — Built-in Function: void <b>__builtin_cpu_init</b> (<var>void</var>) <blockquote>\n<p>This function runs the CPU detection code to check the type of CPU and the features supported. This built-in function needs to be invoked along with the built-in functions to check CPU type and features, <code>__builtin_cpu_is</code> and <code>__builtin_cpu_supports</code>, only when used in a function that is executed before any constructors are called. The CPU detection code is automatically executed in a very high priority constructor. </p>\n<p>For example, this function has to be used in <code>ifunc</code> resolvers that check for CPU type using the built-in functions <code>__builtin_cpu_is</code> and <code>__builtin_cpu_supports</code>, or in constructors on targets that don't support constructor priority. </p>\n<pre class=\"smallexample\">static void (*resolve_memcpy (void)) (void)\n{\n  // ifunc resolvers fire before constructors, explicitly call the init\n  // function.\n  __builtin_cpu_init ();\n  if (__builtin_cpu_supports (\"ssse3\"))\n    return ssse3_memcpy; // super fast memcpy with ssse3 instructions.\n  else\n    return default_memcpy;\n}\n\nvoid *memcpy (void *, const void *, size_t)\n     __attribute__ ((ifunc (\"resolve_memcpy\")));</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_cpu_is</b> (<var>const char *cpuname</var>) <blockquote>\n<p>This function returns a positive integer if the run-time CPU is of type <var>cpuname</var> and returns <code>0</code> otherwise. The following CPU names can be detected: </p>\n<dl> <dt>‘<code>intel</code>’</dt>\n<dd>Intel CPU. </dd>\n<dt>‘<code>atom</code>’</dt>\n<dd>Intel Atom CPU. </dd>\n<dt>‘<code>core2</code>’</dt>\n<dd>Intel Core 2 CPU. </dd>\n<dt>‘<code>corei7</code>’</dt>\n<dd>Intel Core i7 CPU. </dd>\n<dt>‘<code>nehalem</code>’</dt>\n<dd>Intel Core i7 Nehalem CPU. </dd>\n<dt>‘<code>westmere</code>’</dt>\n<dd>Intel Core i7 Westmere CPU. </dd>\n<dt>‘<code>sandybridge</code>’</dt>\n<dd>Intel Core i7 Sandy Bridge CPU. </dd>\n<dt>‘<code>amd</code>’</dt>\n<dd>AMD CPU. </dd>\n<dt>‘<code>amdfam10h</code>’</dt>\n<dd>AMD Family 10h CPU. </dd>\n<dt>‘<code>barcelona</code>’</dt>\n<dd>AMD Family 10h Barcelona CPU. </dd>\n<dt>‘<code>shanghai</code>’</dt>\n<dd>AMD Family 10h Shanghai CPU. </dd>\n<dt>‘<code>istanbul</code>’</dt>\n<dd>AMD Family 10h Istanbul CPU. </dd>\n<dt>‘<code>btver1</code>’</dt>\n<dd>AMD Family 14h CPU. </dd>\n<dt>‘<code>amdfam15h</code>’</dt>\n<dd>AMD Family 15h CPU. </dd>\n<dt>‘<code>bdver1</code>’</dt>\n<dd>AMD Family 15h Bulldozer version 1. </dd>\n<dt>‘<code>bdver2</code>’</dt>\n<dd>AMD Family 15h Bulldozer version 2. </dd>\n<dt>‘<code>bdver3</code>’</dt>\n<dd>AMD Family 15h Bulldozer version 3. </dd>\n<dt>‘<code>bdver4</code>’</dt>\n<dd>AMD Family 15h Bulldozer version 4. </dd>\n<dt>‘<code>btver2</code>’</dt>\n<dd>AMD Family 16h CPU. </dd>\n</dl> <p>Here is an example: </p>\n<pre class=\"smallexample\">if (__builtin_cpu_is (\"corei7\"))\n  {\n     do_corei7 (); // Core i7 specific implementation.\n  }\nelse\n  {\n     do_generic (); // Generic implementation.\n  }</pre> </blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_cpu_supports</b> (<var>const char *feature</var>) <blockquote>\n<p>This function returns a positive integer if the run-time CPU supports <var>feature</var> and returns <code>0</code> otherwise. The following features can be detected: </p>\n<dl> <dt>‘<code>cmov</code>’</dt>\n<dd>CMOV instruction. </dd>\n<dt>‘<code>mmx</code>’</dt>\n<dd>MMX instructions. </dd>\n<dt>‘<code>popcnt</code>’</dt>\n<dd>POPCNT instruction. </dd>\n<dt>‘<code>sse</code>’</dt>\n<dd>SSE instructions. </dd>\n<dt>‘<code>sse2</code>’</dt>\n<dd>SSE2 instructions. </dd>\n<dt>‘<code>sse3</code>’</dt>\n<dd>SSE3 instructions. </dd>\n<dt>‘<code>ssse3</code>’</dt>\n<dd>SSSE3 instructions. </dd>\n<dt>‘<code>sse4.1</code>’</dt>\n<dd>SSE4.1 instructions. </dd>\n<dt>‘<code>sse4.2</code>’</dt>\n<dd>SSE4.2 instructions. </dd>\n<dt>‘<code>avx</code>’</dt>\n<dd>AVX instructions. </dd>\n<dt>‘<code>avx2</code>’</dt>\n<dd>AVX2 instructions. </dd>\n</dl> <p>Here is an example: </p>\n<pre class=\"smallexample\">if (__builtin_cpu_supports (\"popcnt\"))\n  {\n     asm(\"popcnt %1,%0\" : \"=r\"(count) : \"rm\"(n) : \"cc\");\n  }\nelse\n  {\n     count = generic_countbits (n); //generic implementation.\n  }</pre> </blockquote>\n</div> <p>The following built-in functions are made available by <code>-mmmx</code>. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v8qi __builtin_ia32_paddb (v8qi, v8qi)\nv4hi __builtin_ia32_paddw (v4hi, v4hi)\nv2si __builtin_ia32_paddd (v2si, v2si)\nv8qi __builtin_ia32_psubb (v8qi, v8qi)\nv4hi __builtin_ia32_psubw (v4hi, v4hi)\nv2si __builtin_ia32_psubd (v2si, v2si)\nv8qi __builtin_ia32_paddsb (v8qi, v8qi)\nv4hi __builtin_ia32_paddsw (v4hi, v4hi)\nv8qi __builtin_ia32_psubsb (v8qi, v8qi)\nv4hi __builtin_ia32_psubsw (v4hi, v4hi)\nv8qi __builtin_ia32_paddusb (v8qi, v8qi)\nv4hi __builtin_ia32_paddusw (v4hi, v4hi)\nv8qi __builtin_ia32_psubusb (v8qi, v8qi)\nv4hi __builtin_ia32_psubusw (v4hi, v4hi)\nv4hi __builtin_ia32_pmullw (v4hi, v4hi)\nv4hi __builtin_ia32_pmulhw (v4hi, v4hi)\ndi __builtin_ia32_pand (di, di)\ndi __builtin_ia32_pandn (di,di)\ndi __builtin_ia32_por (di, di)\ndi __builtin_ia32_pxor (di, di)\nv8qi __builtin_ia32_pcmpeqb (v8qi, v8qi)\nv4hi __builtin_ia32_pcmpeqw (v4hi, v4hi)\nv2si __builtin_ia32_pcmpeqd (v2si, v2si)\nv8qi __builtin_ia32_pcmpgtb (v8qi, v8qi)\nv4hi __builtin_ia32_pcmpgtw (v4hi, v4hi)\nv2si __builtin_ia32_pcmpgtd (v2si, v2si)\nv8qi __builtin_ia32_punpckhbw (v8qi, v8qi)\nv4hi __builtin_ia32_punpckhwd (v4hi, v4hi)\nv2si __builtin_ia32_punpckhdq (v2si, v2si)\nv8qi __builtin_ia32_punpcklbw (v8qi, v8qi)\nv4hi __builtin_ia32_punpcklwd (v4hi, v4hi)\nv2si __builtin_ia32_punpckldq (v2si, v2si)\nv8qi __builtin_ia32_packsswb (v4hi, v4hi)\nv4hi __builtin_ia32_packssdw (v2si, v2si)\nv8qi __builtin_ia32_packuswb (v4hi, v4hi)\n\nv4hi __builtin_ia32_psllw (v4hi, v4hi)\nv2si __builtin_ia32_pslld (v2si, v2si)\nv1di __builtin_ia32_psllq (v1di, v1di)\nv4hi __builtin_ia32_psrlw (v4hi, v4hi)\nv2si __builtin_ia32_psrld (v2si, v2si)\nv1di __builtin_ia32_psrlq (v1di, v1di)\nv4hi __builtin_ia32_psraw (v4hi, v4hi)\nv2si __builtin_ia32_psrad (v2si, v2si)\nv4hi __builtin_ia32_psllwi (v4hi, int)\nv2si __builtin_ia32_pslldi (v2si, int)\nv1di __builtin_ia32_psllqi (v1di, int)\nv4hi __builtin_ia32_psrlwi (v4hi, int)\nv2si __builtin_ia32_psrldi (v2si, int)\nv1di __builtin_ia32_psrlqi (v1di, int)\nv4hi __builtin_ia32_psrawi (v4hi, int)\nv2si __builtin_ia32_psradi (v2si, int)</pre> <p>The following built-in functions are made available either with <code>-msse</code>, or with a combination of <code>-m3dnow</code> and <code>-march=athlon</code>. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v4hi __builtin_ia32_pmulhuw (v4hi, v4hi)\nv8qi __builtin_ia32_pavgb (v8qi, v8qi)\nv4hi __builtin_ia32_pavgw (v4hi, v4hi)\nv1di __builtin_ia32_psadbw (v8qi, v8qi)\nv8qi __builtin_ia32_pmaxub (v8qi, v8qi)\nv4hi __builtin_ia32_pmaxsw (v4hi, v4hi)\nv8qi __builtin_ia32_pminub (v8qi, v8qi)\nv4hi __builtin_ia32_pminsw (v4hi, v4hi)\nint __builtin_ia32_pmovmskb (v8qi)\nvoid __builtin_ia32_maskmovq (v8qi, v8qi, char *)\nvoid __builtin_ia32_movntq (di *, di)\nvoid __builtin_ia32_sfence (void)</pre> <p>The following built-in functions are available when <code>-msse</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">int __builtin_ia32_comieq (v4sf, v4sf)\nint __builtin_ia32_comineq (v4sf, v4sf)\nint __builtin_ia32_comilt (v4sf, v4sf)\nint __builtin_ia32_comile (v4sf, v4sf)\nint __builtin_ia32_comigt (v4sf, v4sf)\nint __builtin_ia32_comige (v4sf, v4sf)\nint __builtin_ia32_ucomieq (v4sf, v4sf)\nint __builtin_ia32_ucomineq (v4sf, v4sf)\nint __builtin_ia32_ucomilt (v4sf, v4sf)\nint __builtin_ia32_ucomile (v4sf, v4sf)\nint __builtin_ia32_ucomigt (v4sf, v4sf)\nint __builtin_ia32_ucomige (v4sf, v4sf)\nv4sf __builtin_ia32_addps (v4sf, v4sf)\nv4sf __builtin_ia32_subps (v4sf, v4sf)\nv4sf __builtin_ia32_mulps (v4sf, v4sf)\nv4sf __builtin_ia32_divps (v4sf, v4sf)\nv4sf __builtin_ia32_addss (v4sf, v4sf)\nv4sf __builtin_ia32_subss (v4sf, v4sf)\nv4sf __builtin_ia32_mulss (v4sf, v4sf)\nv4sf __builtin_ia32_divss (v4sf, v4sf)\nv4sf __builtin_ia32_cmpeqps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpltps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpleps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpgtps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpgeps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpunordps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpneqps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpnltps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpnleps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpngtps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpngeps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpordps (v4sf, v4sf)\nv4sf __builtin_ia32_cmpeqss (v4sf, v4sf)\nv4sf __builtin_ia32_cmpltss (v4sf, v4sf)\nv4sf __builtin_ia32_cmpless (v4sf, v4sf)\nv4sf __builtin_ia32_cmpunordss (v4sf, v4sf)\nv4sf __builtin_ia32_cmpneqss (v4sf, v4sf)\nv4sf __builtin_ia32_cmpnltss (v4sf, v4sf)\nv4sf __builtin_ia32_cmpnless (v4sf, v4sf)\nv4sf __builtin_ia32_cmpordss (v4sf, v4sf)\nv4sf __builtin_ia32_maxps (v4sf, v4sf)\nv4sf __builtin_ia32_maxss (v4sf, v4sf)\nv4sf __builtin_ia32_minps (v4sf, v4sf)\nv4sf __builtin_ia32_minss (v4sf, v4sf)\nv4sf __builtin_ia32_andps (v4sf, v4sf)\nv4sf __builtin_ia32_andnps (v4sf, v4sf)\nv4sf __builtin_ia32_orps (v4sf, v4sf)\nv4sf __builtin_ia32_xorps (v4sf, v4sf)\nv4sf __builtin_ia32_movss (v4sf, v4sf)\nv4sf __builtin_ia32_movhlps (v4sf, v4sf)\nv4sf __builtin_ia32_movlhps (v4sf, v4sf)\nv4sf __builtin_ia32_unpckhps (v4sf, v4sf)\nv4sf __builtin_ia32_unpcklps (v4sf, v4sf)\nv4sf __builtin_ia32_cvtpi2ps (v4sf, v2si)\nv4sf __builtin_ia32_cvtsi2ss (v4sf, int)\nv2si __builtin_ia32_cvtps2pi (v4sf)\nint __builtin_ia32_cvtss2si (v4sf)\nv2si __builtin_ia32_cvttps2pi (v4sf)\nint __builtin_ia32_cvttss2si (v4sf)\nv4sf __builtin_ia32_rcpps (v4sf)\nv4sf __builtin_ia32_rsqrtps (v4sf)\nv4sf __builtin_ia32_sqrtps (v4sf)\nv4sf __builtin_ia32_rcpss (v4sf)\nv4sf __builtin_ia32_rsqrtss (v4sf)\nv4sf __builtin_ia32_sqrtss (v4sf)\nv4sf __builtin_ia32_shufps (v4sf, v4sf, int)\nvoid __builtin_ia32_movntps (float *, v4sf)\nint __builtin_ia32_movmskps (v4sf)</pre> <p>The following built-in functions are available when <code>-msse</code> is used. </p>\n<dl> <dt><code>v4sf __builtin_ia32_loadups (float *)</code></dt>\n<dd>Generates the <code>movups</code> machine instruction as a load from memory. </dd>\n<dt><code>void __builtin_ia32_storeups (float *, v4sf)</code></dt>\n<dd>Generates the <code>movups</code> machine instruction as a store to memory. </dd>\n<dt><code>v4sf __builtin_ia32_loadss (float *)</code></dt>\n<dd>Generates the <code>movss</code> machine instruction as a load from memory. </dd>\n<dt><code>v4sf __builtin_ia32_loadhps (v4sf, const v2sf *)</code></dt>\n<dd>Generates the <code>movhps</code> machine instruction as a load from memory. </dd>\n<dt><code>v4sf __builtin_ia32_loadlps (v4sf, const v2sf *)</code></dt>\n<dd>Generates the <code>movlps</code> machine instruction as a load from memory </dd>\n<dt><code>void __builtin_ia32_storehps (v2sf *, v4sf)</code></dt>\n<dd>Generates the <code>movhps</code> machine instruction as a store to memory. </dd>\n<dt><code>void __builtin_ia32_storelps (v2sf *, v4sf)</code></dt>\n<dd>Generates the <code>movlps</code> machine instruction as a store to memory. </dd>\n</dl> <p>The following built-in functions are available when <code>-msse2</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">int __builtin_ia32_comisdeq (v2df, v2df)\nint __builtin_ia32_comisdlt (v2df, v2df)\nint __builtin_ia32_comisdle (v2df, v2df)\nint __builtin_ia32_comisdgt (v2df, v2df)\nint __builtin_ia32_comisdge (v2df, v2df)\nint __builtin_ia32_comisdneq (v2df, v2df)\nint __builtin_ia32_ucomisdeq (v2df, v2df)\nint __builtin_ia32_ucomisdlt (v2df, v2df)\nint __builtin_ia32_ucomisdle (v2df, v2df)\nint __builtin_ia32_ucomisdgt (v2df, v2df)\nint __builtin_ia32_ucomisdge (v2df, v2df)\nint __builtin_ia32_ucomisdneq (v2df, v2df)\nv2df __builtin_ia32_cmpeqpd (v2df, v2df)\nv2df __builtin_ia32_cmpltpd (v2df, v2df)\nv2df __builtin_ia32_cmplepd (v2df, v2df)\nv2df __builtin_ia32_cmpgtpd (v2df, v2df)\nv2df __builtin_ia32_cmpgepd (v2df, v2df)\nv2df __builtin_ia32_cmpunordpd (v2df, v2df)\nv2df __builtin_ia32_cmpneqpd (v2df, v2df)\nv2df __builtin_ia32_cmpnltpd (v2df, v2df)\nv2df __builtin_ia32_cmpnlepd (v2df, v2df)\nv2df __builtin_ia32_cmpngtpd (v2df, v2df)\nv2df __builtin_ia32_cmpngepd (v2df, v2df)\nv2df __builtin_ia32_cmpordpd (v2df, v2df)\nv2df __builtin_ia32_cmpeqsd (v2df, v2df)\nv2df __builtin_ia32_cmpltsd (v2df, v2df)\nv2df __builtin_ia32_cmplesd (v2df, v2df)\nv2df __builtin_ia32_cmpunordsd (v2df, v2df)\nv2df __builtin_ia32_cmpneqsd (v2df, v2df)\nv2df __builtin_ia32_cmpnltsd (v2df, v2df)\nv2df __builtin_ia32_cmpnlesd (v2df, v2df)\nv2df __builtin_ia32_cmpordsd (v2df, v2df)\nv2di __builtin_ia32_paddq (v2di, v2di)\nv2di __builtin_ia32_psubq (v2di, v2di)\nv2df __builtin_ia32_addpd (v2df, v2df)\nv2df __builtin_ia32_subpd (v2df, v2df)\nv2df __builtin_ia32_mulpd (v2df, v2df)\nv2df __builtin_ia32_divpd (v2df, v2df)\nv2df __builtin_ia32_addsd (v2df, v2df)\nv2df __builtin_ia32_subsd (v2df, v2df)\nv2df __builtin_ia32_mulsd (v2df, v2df)\nv2df __builtin_ia32_divsd (v2df, v2df)\nv2df __builtin_ia32_minpd (v2df, v2df)\nv2df __builtin_ia32_maxpd (v2df, v2df)\nv2df __builtin_ia32_minsd (v2df, v2df)\nv2df __builtin_ia32_maxsd (v2df, v2df)\nv2df __builtin_ia32_andpd (v2df, v2df)\nv2df __builtin_ia32_andnpd (v2df, v2df)\nv2df __builtin_ia32_orpd (v2df, v2df)\nv2df __builtin_ia32_xorpd (v2df, v2df)\nv2df __builtin_ia32_movsd (v2df, v2df)\nv2df __builtin_ia32_unpckhpd (v2df, v2df)\nv2df __builtin_ia32_unpcklpd (v2df, v2df)\nv16qi __builtin_ia32_paddb128 (v16qi, v16qi)\nv8hi __builtin_ia32_paddw128 (v8hi, v8hi)\nv4si __builtin_ia32_paddd128 (v4si, v4si)\nv2di __builtin_ia32_paddq128 (v2di, v2di)\nv16qi __builtin_ia32_psubb128 (v16qi, v16qi)\nv8hi __builtin_ia32_psubw128 (v8hi, v8hi)\nv4si __builtin_ia32_psubd128 (v4si, v4si)\nv2di __builtin_ia32_psubq128 (v2di, v2di)\nv8hi __builtin_ia32_pmullw128 (v8hi, v8hi)\nv8hi __builtin_ia32_pmulhw128 (v8hi, v8hi)\nv2di __builtin_ia32_pand128 (v2di, v2di)\nv2di __builtin_ia32_pandn128 (v2di, v2di)\nv2di __builtin_ia32_por128 (v2di, v2di)\nv2di __builtin_ia32_pxor128 (v2di, v2di)\nv16qi __builtin_ia32_pavgb128 (v16qi, v16qi)\nv8hi __builtin_ia32_pavgw128 (v8hi, v8hi)\nv16qi __builtin_ia32_pcmpeqb128 (v16qi, v16qi)\nv8hi __builtin_ia32_pcmpeqw128 (v8hi, v8hi)\nv4si __builtin_ia32_pcmpeqd128 (v4si, v4si)\nv16qi __builtin_ia32_pcmpgtb128 (v16qi, v16qi)\nv8hi __builtin_ia32_pcmpgtw128 (v8hi, v8hi)\nv4si __builtin_ia32_pcmpgtd128 (v4si, v4si)\nv16qi __builtin_ia32_pmaxub128 (v16qi, v16qi)\nv8hi __builtin_ia32_pmaxsw128 (v8hi, v8hi)\nv16qi __builtin_ia32_pminub128 (v16qi, v16qi)\nv8hi __builtin_ia32_pminsw128 (v8hi, v8hi)\nv16qi __builtin_ia32_punpckhbw128 (v16qi, v16qi)\nv8hi __builtin_ia32_punpckhwd128 (v8hi, v8hi)\nv4si __builtin_ia32_punpckhdq128 (v4si, v4si)\nv2di __builtin_ia32_punpckhqdq128 (v2di, v2di)\nv16qi __builtin_ia32_punpcklbw128 (v16qi, v16qi)\nv8hi __builtin_ia32_punpcklwd128 (v8hi, v8hi)\nv4si __builtin_ia32_punpckldq128 (v4si, v4si)\nv2di __builtin_ia32_punpcklqdq128 (v2di, v2di)\nv16qi __builtin_ia32_packsswb128 (v8hi, v8hi)\nv8hi __builtin_ia32_packssdw128 (v4si, v4si)\nv16qi __builtin_ia32_packuswb128 (v8hi, v8hi)\nv8hi __builtin_ia32_pmulhuw128 (v8hi, v8hi)\nvoid __builtin_ia32_maskmovdqu (v16qi, v16qi)\nv2df __builtin_ia32_loadupd (double *)\nvoid __builtin_ia32_storeupd (double *, v2df)\nv2df __builtin_ia32_loadhpd (v2df, double const *)\nv2df __builtin_ia32_loadlpd (v2df, double const *)\nint __builtin_ia32_movmskpd (v2df)\nint __builtin_ia32_pmovmskb128 (v16qi)\nvoid __builtin_ia32_movnti (int *, int)\nvoid __builtin_ia32_movnti64 (long long int *, long long int)\nvoid __builtin_ia32_movntpd (double *, v2df)\nvoid __builtin_ia32_movntdq (v2df *, v2df)\nv4si __builtin_ia32_pshufd (v4si, int)\nv8hi __builtin_ia32_pshuflw (v8hi, int)\nv8hi __builtin_ia32_pshufhw (v8hi, int)\nv2di __builtin_ia32_psadbw128 (v16qi, v16qi)\nv2df __builtin_ia32_sqrtpd (v2df)\nv2df __builtin_ia32_sqrtsd (v2df)\nv2df __builtin_ia32_shufpd (v2df, v2df, int)\nv2df __builtin_ia32_cvtdq2pd (v4si)\nv4sf __builtin_ia32_cvtdq2ps (v4si)\nv4si __builtin_ia32_cvtpd2dq (v2df)\nv2si __builtin_ia32_cvtpd2pi (v2df)\nv4sf __builtin_ia32_cvtpd2ps (v2df)\nv4si __builtin_ia32_cvttpd2dq (v2df)\nv2si __builtin_ia32_cvttpd2pi (v2df)\nv2df __builtin_ia32_cvtpi2pd (v2si)\nint __builtin_ia32_cvtsd2si (v2df)\nint __builtin_ia32_cvttsd2si (v2df)\nlong long __builtin_ia32_cvtsd2si64 (v2df)\nlong long __builtin_ia32_cvttsd2si64 (v2df)\nv4si __builtin_ia32_cvtps2dq (v4sf)\nv2df __builtin_ia32_cvtps2pd (v4sf)\nv4si __builtin_ia32_cvttps2dq (v4sf)\nv2df __builtin_ia32_cvtsi2sd (v2df, int)\nv2df __builtin_ia32_cvtsi642sd (v2df, long long)\nv4sf __builtin_ia32_cvtsd2ss (v4sf, v2df)\nv2df __builtin_ia32_cvtss2sd (v2df, v4sf)\nvoid __builtin_ia32_clflush (const void *)\nvoid __builtin_ia32_lfence (void)\nvoid __builtin_ia32_mfence (void)\nv16qi __builtin_ia32_loaddqu (const char *)\nvoid __builtin_ia32_storedqu (char *, v16qi)\nv1di __builtin_ia32_pmuludq (v2si, v2si)\nv2di __builtin_ia32_pmuludq128 (v4si, v4si)\nv8hi __builtin_ia32_psllw128 (v8hi, v8hi)\nv4si __builtin_ia32_pslld128 (v4si, v4si)\nv2di __builtin_ia32_psllq128 (v2di, v2di)\nv8hi __builtin_ia32_psrlw128 (v8hi, v8hi)\nv4si __builtin_ia32_psrld128 (v4si, v4si)\nv2di __builtin_ia32_psrlq128 (v2di, v2di)\nv8hi __builtin_ia32_psraw128 (v8hi, v8hi)\nv4si __builtin_ia32_psrad128 (v4si, v4si)\nv2di __builtin_ia32_pslldqi128 (v2di, int)\nv8hi __builtin_ia32_psllwi128 (v8hi, int)\nv4si __builtin_ia32_pslldi128 (v4si, int)\nv2di __builtin_ia32_psllqi128 (v2di, int)\nv2di __builtin_ia32_psrldqi128 (v2di, int)\nv8hi __builtin_ia32_psrlwi128 (v8hi, int)\nv4si __builtin_ia32_psrldi128 (v4si, int)\nv2di __builtin_ia32_psrlqi128 (v2di, int)\nv8hi __builtin_ia32_psrawi128 (v8hi, int)\nv4si __builtin_ia32_psradi128 (v4si, int)\nv4si __builtin_ia32_pmaddwd128 (v8hi, v8hi)\nv2di __builtin_ia32_movq128 (v2di)</pre> <p>The following built-in functions are available when <code>-msse3</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v2df __builtin_ia32_addsubpd (v2df, v2df)\nv4sf __builtin_ia32_addsubps (v4sf, v4sf)\nv2df __builtin_ia32_haddpd (v2df, v2df)\nv4sf __builtin_ia32_haddps (v4sf, v4sf)\nv2df __builtin_ia32_hsubpd (v2df, v2df)\nv4sf __builtin_ia32_hsubps (v4sf, v4sf)\nv16qi __builtin_ia32_lddqu (char const *)\nvoid __builtin_ia32_monitor (void *, unsigned int, unsigned int)\nv4sf __builtin_ia32_movshdup (v4sf)\nv4sf __builtin_ia32_movsldup (v4sf)\nvoid __builtin_ia32_mwait (unsigned int, unsigned int)</pre> <p>The following built-in functions are available when <code>-mssse3</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v2si __builtin_ia32_phaddd (v2si, v2si)\nv4hi __builtin_ia32_phaddw (v4hi, v4hi)\nv4hi __builtin_ia32_phaddsw (v4hi, v4hi)\nv2si __builtin_ia32_phsubd (v2si, v2si)\nv4hi __builtin_ia32_phsubw (v4hi, v4hi)\nv4hi __builtin_ia32_phsubsw (v4hi, v4hi)\nv4hi __builtin_ia32_pmaddubsw (v8qi, v8qi)\nv4hi __builtin_ia32_pmulhrsw (v4hi, v4hi)\nv8qi __builtin_ia32_pshufb (v8qi, v8qi)\nv8qi __builtin_ia32_psignb (v8qi, v8qi)\nv2si __builtin_ia32_psignd (v2si, v2si)\nv4hi __builtin_ia32_psignw (v4hi, v4hi)\nv1di __builtin_ia32_palignr (v1di, v1di, int)\nv8qi __builtin_ia32_pabsb (v8qi)\nv2si __builtin_ia32_pabsd (v2si)\nv4hi __builtin_ia32_pabsw (v4hi)</pre> <p>The following built-in functions are available when <code>-mssse3</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v4si __builtin_ia32_phaddd128 (v4si, v4si)\nv8hi __builtin_ia32_phaddw128 (v8hi, v8hi)\nv8hi __builtin_ia32_phaddsw128 (v8hi, v8hi)\nv4si __builtin_ia32_phsubd128 (v4si, v4si)\nv8hi __builtin_ia32_phsubw128 (v8hi, v8hi)\nv8hi __builtin_ia32_phsubsw128 (v8hi, v8hi)\nv8hi __builtin_ia32_pmaddubsw128 (v16qi, v16qi)\nv8hi __builtin_ia32_pmulhrsw128 (v8hi, v8hi)\nv16qi __builtin_ia32_pshufb128 (v16qi, v16qi)\nv16qi __builtin_ia32_psignb128 (v16qi, v16qi)\nv4si __builtin_ia32_psignd128 (v4si, v4si)\nv8hi __builtin_ia32_psignw128 (v8hi, v8hi)\nv2di __builtin_ia32_palignr128 (v2di, v2di, int)\nv16qi __builtin_ia32_pabsb128 (v16qi)\nv4si __builtin_ia32_pabsd128 (v4si)\nv8hi __builtin_ia32_pabsw128 (v8hi)</pre> <p>The following built-in functions are available when <code>-msse4.1</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v2df __builtin_ia32_blendpd (v2df, v2df, const int)\nv4sf __builtin_ia32_blendps (v4sf, v4sf, const int)\nv2df __builtin_ia32_blendvpd (v2df, v2df, v2df)\nv4sf __builtin_ia32_blendvps (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_dppd (v2df, v2df, const int)\nv4sf __builtin_ia32_dpps (v4sf, v4sf, const int)\nv4sf __builtin_ia32_insertps128 (v4sf, v4sf, const int)\nv2di __builtin_ia32_movntdqa (v2di *);\nv16qi __builtin_ia32_mpsadbw128 (v16qi, v16qi, const int)\nv8hi __builtin_ia32_packusdw128 (v4si, v4si)\nv16qi __builtin_ia32_pblendvb128 (v16qi, v16qi, v16qi)\nv8hi __builtin_ia32_pblendw128 (v8hi, v8hi, const int)\nv2di __builtin_ia32_pcmpeqq (v2di, v2di)\nv8hi __builtin_ia32_phminposuw128 (v8hi)\nv16qi __builtin_ia32_pmaxsb128 (v16qi, v16qi)\nv4si __builtin_ia32_pmaxsd128 (v4si, v4si)\nv4si __builtin_ia32_pmaxud128 (v4si, v4si)\nv8hi __builtin_ia32_pmaxuw128 (v8hi, v8hi)\nv16qi __builtin_ia32_pminsb128 (v16qi, v16qi)\nv4si __builtin_ia32_pminsd128 (v4si, v4si)\nv4si __builtin_ia32_pminud128 (v4si, v4si)\nv8hi __builtin_ia32_pminuw128 (v8hi, v8hi)\nv4si __builtin_ia32_pmovsxbd128 (v16qi)\nv2di __builtin_ia32_pmovsxbq128 (v16qi)\nv8hi __builtin_ia32_pmovsxbw128 (v16qi)\nv2di __builtin_ia32_pmovsxdq128 (v4si)\nv4si __builtin_ia32_pmovsxwd128 (v8hi)\nv2di __builtin_ia32_pmovsxwq128 (v8hi)\nv4si __builtin_ia32_pmovzxbd128 (v16qi)\nv2di __builtin_ia32_pmovzxbq128 (v16qi)\nv8hi __builtin_ia32_pmovzxbw128 (v16qi)\nv2di __builtin_ia32_pmovzxdq128 (v4si)\nv4si __builtin_ia32_pmovzxwd128 (v8hi)\nv2di __builtin_ia32_pmovzxwq128 (v8hi)\nv2di __builtin_ia32_pmuldq128 (v4si, v4si)\nv4si __builtin_ia32_pmulld128 (v4si, v4si)\nint __builtin_ia32_ptestc128 (v2di, v2di)\nint __builtin_ia32_ptestnzc128 (v2di, v2di)\nint __builtin_ia32_ptestz128 (v2di, v2di)\nv2df __builtin_ia32_roundpd (v2df, const int)\nv4sf __builtin_ia32_roundps (v4sf, const int)\nv2df __builtin_ia32_roundsd (v2df, v2df, const int)\nv4sf __builtin_ia32_roundss (v4sf, v4sf, const int)</pre> <p>The following built-in functions are available when <code>-msse4.1</code> is used. </p>\n<dl> <dt><code>v4sf __builtin_ia32_vec_set_v4sf (v4sf, float, const int)</code></dt>\n<dd>Generates the <code>insertps</code> machine instruction. </dd>\n<dt><code>int __builtin_ia32_vec_ext_v16qi (v16qi, const int)</code></dt>\n<dd>Generates the <code>pextrb</code> machine instruction. </dd>\n<dt><code>v16qi __builtin_ia32_vec_set_v16qi (v16qi, int, const int)</code></dt>\n<dd>Generates the <code>pinsrb</code> machine instruction. </dd>\n<dt><code>v4si __builtin_ia32_vec_set_v4si (v4si, int, const int)</code></dt>\n<dd>Generates the <code>pinsrd</code> machine instruction. </dd>\n<dt><code>v2di __builtin_ia32_vec_set_v2di (v2di, long long, const int)</code></dt>\n<dd>Generates the <code>pinsrq</code> machine instruction in 64bit mode. </dd>\n</dl> <p>The following built-in functions are changed to generate new SSE4.1 instructions when <code>-msse4.1</code> is used. </p>\n<dl> <dt><code>float __builtin_ia32_vec_ext_v4sf (v4sf, const int)</code></dt>\n<dd>Generates the <code>extractps</code> machine instruction. </dd>\n<dt><code>int __builtin_ia32_vec_ext_v4si (v4si, const int)</code></dt>\n<dd>Generates the <code>pextrd</code> machine instruction. </dd>\n<dt><code>long long __builtin_ia32_vec_ext_v2di (v2di, const int)</code></dt>\n<dd>Generates the <code>pextrq</code> machine instruction in 64bit mode. </dd>\n</dl> <p>The following built-in functions are available when <code>-msse4.2</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v16qi __builtin_ia32_pcmpestrm128 (v16qi, int, v16qi, int, const int)\nint __builtin_ia32_pcmpestri128 (v16qi, int, v16qi, int, const int)\nint __builtin_ia32_pcmpestria128 (v16qi, int, v16qi, int, const int)\nint __builtin_ia32_pcmpestric128 (v16qi, int, v16qi, int, const int)\nint __builtin_ia32_pcmpestrio128 (v16qi, int, v16qi, int, const int)\nint __builtin_ia32_pcmpestris128 (v16qi, int, v16qi, int, const int)\nint __builtin_ia32_pcmpestriz128 (v16qi, int, v16qi, int, const int)\nv16qi __builtin_ia32_pcmpistrm128 (v16qi, v16qi, const int)\nint __builtin_ia32_pcmpistri128 (v16qi, v16qi, const int)\nint __builtin_ia32_pcmpistria128 (v16qi, v16qi, const int)\nint __builtin_ia32_pcmpistric128 (v16qi, v16qi, const int)\nint __builtin_ia32_pcmpistrio128 (v16qi, v16qi, const int)\nint __builtin_ia32_pcmpistris128 (v16qi, v16qi, const int)\nint __builtin_ia32_pcmpistriz128 (v16qi, v16qi, const int)\nv2di __builtin_ia32_pcmpgtq (v2di, v2di)</pre> <p>The following built-in functions are available when <code>-msse4.2</code> is used. </p>\n<dl> <dt><code>unsigned int __builtin_ia32_crc32qi (unsigned int, unsigned char)</code></dt>\n<dd>Generates the <code>crc32b</code> machine instruction. </dd>\n<dt><code>unsigned int __builtin_ia32_crc32hi (unsigned int, unsigned short)</code></dt>\n<dd>Generates the <code>crc32w</code> machine instruction. </dd>\n<dt><code>unsigned int __builtin_ia32_crc32si (unsigned int, unsigned int)</code></dt>\n<dd>Generates the <code>crc32l</code> machine instruction. </dd>\n<dt><code>unsigned long long __builtin_ia32_crc32di (unsigned long long, unsigned long long)</code></dt>\n<dd>Generates the <code>crc32q</code> machine instruction. </dd>\n</dl> <p>The following built-in functions are changed to generate new SSE4.2 instructions when <code>-msse4.2</code> is used. </p>\n<dl> <dt><code>int __builtin_popcount (unsigned int)</code></dt>\n<dd>Generates the <code>popcntl</code> machine instruction. </dd>\n<dt><code>int __builtin_popcountl (unsigned long)</code></dt>\n<dd>Generates the <code>popcntl</code> or <code>popcntq</code> machine instruction, depending on the size of <code>unsigned long</code>. </dd>\n<dt><code>int __builtin_popcountll (unsigned long long)</code></dt>\n<dd>Generates the <code>popcntq</code> machine instruction. </dd>\n</dl> <p>The following built-in functions are available when <code>-mavx</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v4df __builtin_ia32_addpd256 (v4df,v4df)\nv8sf __builtin_ia32_addps256 (v8sf,v8sf)\nv4df __builtin_ia32_addsubpd256 (v4df,v4df)\nv8sf __builtin_ia32_addsubps256 (v8sf,v8sf)\nv4df __builtin_ia32_andnpd256 (v4df,v4df)\nv8sf __builtin_ia32_andnps256 (v8sf,v8sf)\nv4df __builtin_ia32_andpd256 (v4df,v4df)\nv8sf __builtin_ia32_andps256 (v8sf,v8sf)\nv4df __builtin_ia32_blendpd256 (v4df,v4df,int)\nv8sf __builtin_ia32_blendps256 (v8sf,v8sf,int)\nv4df __builtin_ia32_blendvpd256 (v4df,v4df,v4df)\nv8sf __builtin_ia32_blendvps256 (v8sf,v8sf,v8sf)\nv2df __builtin_ia32_cmppd (v2df,v2df,int)\nv4df __builtin_ia32_cmppd256 (v4df,v4df,int)\nv4sf __builtin_ia32_cmpps (v4sf,v4sf,int)\nv8sf __builtin_ia32_cmpps256 (v8sf,v8sf,int)\nv2df __builtin_ia32_cmpsd (v2df,v2df,int)\nv4sf __builtin_ia32_cmpss (v4sf,v4sf,int)\nv4df __builtin_ia32_cvtdq2pd256 (v4si)\nv8sf __builtin_ia32_cvtdq2ps256 (v8si)\nv4si __builtin_ia32_cvtpd2dq256 (v4df)\nv4sf __builtin_ia32_cvtpd2ps256 (v4df)\nv8si __builtin_ia32_cvtps2dq256 (v8sf)\nv4df __builtin_ia32_cvtps2pd256 (v4sf)\nv4si __builtin_ia32_cvttpd2dq256 (v4df)\nv8si __builtin_ia32_cvttps2dq256 (v8sf)\nv4df __builtin_ia32_divpd256 (v4df,v4df)\nv8sf __builtin_ia32_divps256 (v8sf,v8sf)\nv8sf __builtin_ia32_dpps256 (v8sf,v8sf,int)\nv4df __builtin_ia32_haddpd256 (v4df,v4df)\nv8sf __builtin_ia32_haddps256 (v8sf,v8sf)\nv4df __builtin_ia32_hsubpd256 (v4df,v4df)\nv8sf __builtin_ia32_hsubps256 (v8sf,v8sf)\nv32qi __builtin_ia32_lddqu256 (pcchar)\nv32qi __builtin_ia32_loaddqu256 (pcchar)\nv4df __builtin_ia32_loadupd256 (pcdouble)\nv8sf __builtin_ia32_loadups256 (pcfloat)\nv2df __builtin_ia32_maskloadpd (pcv2df,v2df)\nv4df __builtin_ia32_maskloadpd256 (pcv4df,v4df)\nv4sf __builtin_ia32_maskloadps (pcv4sf,v4sf)\nv8sf __builtin_ia32_maskloadps256 (pcv8sf,v8sf)\nvoid __builtin_ia32_maskstorepd (pv2df,v2df,v2df)\nvoid __builtin_ia32_maskstorepd256 (pv4df,v4df,v4df)\nvoid __builtin_ia32_maskstoreps (pv4sf,v4sf,v4sf)\nvoid __builtin_ia32_maskstoreps256 (pv8sf,v8sf,v8sf)\nv4df __builtin_ia32_maxpd256 (v4df,v4df)\nv8sf __builtin_ia32_maxps256 (v8sf,v8sf)\nv4df __builtin_ia32_minpd256 (v4df,v4df)\nv8sf __builtin_ia32_minps256 (v8sf,v8sf)\nv4df __builtin_ia32_movddup256 (v4df)\nint __builtin_ia32_movmskpd256 (v4df)\nint __builtin_ia32_movmskps256 (v8sf)\nv8sf __builtin_ia32_movshdup256 (v8sf)\nv8sf __builtin_ia32_movsldup256 (v8sf)\nv4df __builtin_ia32_mulpd256 (v4df,v4df)\nv8sf __builtin_ia32_mulps256 (v8sf,v8sf)\nv4df __builtin_ia32_orpd256 (v4df,v4df)\nv8sf __builtin_ia32_orps256 (v8sf,v8sf)\nv2df __builtin_ia32_pd_pd256 (v4df)\nv4df __builtin_ia32_pd256_pd (v2df)\nv4sf __builtin_ia32_ps_ps256 (v8sf)\nv8sf __builtin_ia32_ps256_ps (v4sf)\nint __builtin_ia32_ptestc256 (v4di,v4di,ptest)\nint __builtin_ia32_ptestnzc256 (v4di,v4di,ptest)\nint __builtin_ia32_ptestz256 (v4di,v4di,ptest)\nv8sf __builtin_ia32_rcpps256 (v8sf)\nv4df __builtin_ia32_roundpd256 (v4df,int)\nv8sf __builtin_ia32_roundps256 (v8sf,int)\nv8sf __builtin_ia32_rsqrtps_nr256 (v8sf)\nv8sf __builtin_ia32_rsqrtps256 (v8sf)\nv4df __builtin_ia32_shufpd256 (v4df,v4df,int)\nv8sf __builtin_ia32_shufps256 (v8sf,v8sf,int)\nv4si __builtin_ia32_si_si256 (v8si)\nv8si __builtin_ia32_si256_si (v4si)\nv4df __builtin_ia32_sqrtpd256 (v4df)\nv8sf __builtin_ia32_sqrtps_nr256 (v8sf)\nv8sf __builtin_ia32_sqrtps256 (v8sf)\nvoid __builtin_ia32_storedqu256 (pchar,v32qi)\nvoid __builtin_ia32_storeupd256 (pdouble,v4df)\nvoid __builtin_ia32_storeups256 (pfloat,v8sf)\nv4df __builtin_ia32_subpd256 (v4df,v4df)\nv8sf __builtin_ia32_subps256 (v8sf,v8sf)\nv4df __builtin_ia32_unpckhpd256 (v4df,v4df)\nv8sf __builtin_ia32_unpckhps256 (v8sf,v8sf)\nv4df __builtin_ia32_unpcklpd256 (v4df,v4df)\nv8sf __builtin_ia32_unpcklps256 (v8sf,v8sf)\nv4df __builtin_ia32_vbroadcastf128_pd256 (pcv2df)\nv8sf __builtin_ia32_vbroadcastf128_ps256 (pcv4sf)\nv4df __builtin_ia32_vbroadcastsd256 (pcdouble)\nv4sf __builtin_ia32_vbroadcastss (pcfloat)\nv8sf __builtin_ia32_vbroadcastss256 (pcfloat)\nv2df __builtin_ia32_vextractf128_pd256 (v4df,int)\nv4sf __builtin_ia32_vextractf128_ps256 (v8sf,int)\nv4si __builtin_ia32_vextractf128_si256 (v8si,int)\nv4df __builtin_ia32_vinsertf128_pd256 (v4df,v2df,int)\nv8sf __builtin_ia32_vinsertf128_ps256 (v8sf,v4sf,int)\nv8si __builtin_ia32_vinsertf128_si256 (v8si,v4si,int)\nv4df __builtin_ia32_vperm2f128_pd256 (v4df,v4df,int)\nv8sf __builtin_ia32_vperm2f128_ps256 (v8sf,v8sf,int)\nv8si __builtin_ia32_vperm2f128_si256 (v8si,v8si,int)\nv2df __builtin_ia32_vpermil2pd (v2df,v2df,v2di,int)\nv4df __builtin_ia32_vpermil2pd256 (v4df,v4df,v4di,int)\nv4sf __builtin_ia32_vpermil2ps (v4sf,v4sf,v4si,int)\nv8sf __builtin_ia32_vpermil2ps256 (v8sf,v8sf,v8si,int)\nv2df __builtin_ia32_vpermilpd (v2df,int)\nv4df __builtin_ia32_vpermilpd256 (v4df,int)\nv4sf __builtin_ia32_vpermilps (v4sf,int)\nv8sf __builtin_ia32_vpermilps256 (v8sf,int)\nv2df __builtin_ia32_vpermilvarpd (v2df,v2di)\nv4df __builtin_ia32_vpermilvarpd256 (v4df,v4di)\nv4sf __builtin_ia32_vpermilvarps (v4sf,v4si)\nv8sf __builtin_ia32_vpermilvarps256 (v8sf,v8si)\nint __builtin_ia32_vtestcpd (v2df,v2df,ptest)\nint __builtin_ia32_vtestcpd256 (v4df,v4df,ptest)\nint __builtin_ia32_vtestcps (v4sf,v4sf,ptest)\nint __builtin_ia32_vtestcps256 (v8sf,v8sf,ptest)\nint __builtin_ia32_vtestnzcpd (v2df,v2df,ptest)\nint __builtin_ia32_vtestnzcpd256 (v4df,v4df,ptest)\nint __builtin_ia32_vtestnzcps (v4sf,v4sf,ptest)\nint __builtin_ia32_vtestnzcps256 (v8sf,v8sf,ptest)\nint __builtin_ia32_vtestzpd (v2df,v2df,ptest)\nint __builtin_ia32_vtestzpd256 (v4df,v4df,ptest)\nint __builtin_ia32_vtestzps (v4sf,v4sf,ptest)\nint __builtin_ia32_vtestzps256 (v8sf,v8sf,ptest)\nvoid __builtin_ia32_vzeroall (void)\nvoid __builtin_ia32_vzeroupper (void)\nv4df __builtin_ia32_xorpd256 (v4df,v4df)\nv8sf __builtin_ia32_xorps256 (v8sf,v8sf)</pre> <p>The following built-in functions are available when <code>-mavx2</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v32qi __builtin_ia32_mpsadbw256 (v32qi,v32qi,int)\nv32qi __builtin_ia32_pabsb256 (v32qi)\nv16hi __builtin_ia32_pabsw256 (v16hi)\nv8si __builtin_ia32_pabsd256 (v8si)\nv16hi __builtin_ia32_packssdw256 (v8si,v8si)\nv32qi __builtin_ia32_packsswb256 (v16hi,v16hi)\nv16hi __builtin_ia32_packusdw256 (v8si,v8si)\nv32qi __builtin_ia32_packuswb256 (v16hi,v16hi)\nv32qi __builtin_ia32_paddb256 (v32qi,v32qi)\nv16hi __builtin_ia32_paddw256 (v16hi,v16hi)\nv8si __builtin_ia32_paddd256 (v8si,v8si)\nv4di __builtin_ia32_paddq256 (v4di,v4di)\nv32qi __builtin_ia32_paddsb256 (v32qi,v32qi)\nv16hi __builtin_ia32_paddsw256 (v16hi,v16hi)\nv32qi __builtin_ia32_paddusb256 (v32qi,v32qi)\nv16hi __builtin_ia32_paddusw256 (v16hi,v16hi)\nv4di __builtin_ia32_palignr256 (v4di,v4di,int)\nv4di __builtin_ia32_andsi256 (v4di,v4di)\nv4di __builtin_ia32_andnotsi256 (v4di,v4di)\nv32qi __builtin_ia32_pavgb256 (v32qi,v32qi)\nv16hi __builtin_ia32_pavgw256 (v16hi,v16hi)\nv32qi __builtin_ia32_pblendvb256 (v32qi,v32qi,v32qi)\nv16hi __builtin_ia32_pblendw256 (v16hi,v16hi,int)\nv32qi __builtin_ia32_pcmpeqb256 (v32qi,v32qi)\nv16hi __builtin_ia32_pcmpeqw256 (v16hi,v16hi)\nv8si __builtin_ia32_pcmpeqd256 (c8si,v8si)\nv4di __builtin_ia32_pcmpeqq256 (v4di,v4di)\nv32qi __builtin_ia32_pcmpgtb256 (v32qi,v32qi)\nv16hi __builtin_ia32_pcmpgtw256 (16hi,v16hi)\nv8si __builtin_ia32_pcmpgtd256 (v8si,v8si)\nv4di __builtin_ia32_pcmpgtq256 (v4di,v4di)\nv16hi __builtin_ia32_phaddw256 (v16hi,v16hi)\nv8si __builtin_ia32_phaddd256 (v8si,v8si)\nv16hi __builtin_ia32_phaddsw256 (v16hi,v16hi)\nv16hi __builtin_ia32_phsubw256 (v16hi,v16hi)\nv8si __builtin_ia32_phsubd256 (v8si,v8si)\nv16hi __builtin_ia32_phsubsw256 (v16hi,v16hi)\nv32qi __builtin_ia32_pmaddubsw256 (v32qi,v32qi)\nv16hi __builtin_ia32_pmaddwd256 (v16hi,v16hi)\nv32qi __builtin_ia32_pmaxsb256 (v32qi,v32qi)\nv16hi __builtin_ia32_pmaxsw256 (v16hi,v16hi)\nv8si __builtin_ia32_pmaxsd256 (v8si,v8si)\nv32qi __builtin_ia32_pmaxub256 (v32qi,v32qi)\nv16hi __builtin_ia32_pmaxuw256 (v16hi,v16hi)\nv8si __builtin_ia32_pmaxud256 (v8si,v8si)\nv32qi __builtin_ia32_pminsb256 (v32qi,v32qi)\nv16hi __builtin_ia32_pminsw256 (v16hi,v16hi)\nv8si __builtin_ia32_pminsd256 (v8si,v8si)\nv32qi __builtin_ia32_pminub256 (v32qi,v32qi)\nv16hi __builtin_ia32_pminuw256 (v16hi,v16hi)\nv8si __builtin_ia32_pminud256 (v8si,v8si)\nint __builtin_ia32_pmovmskb256 (v32qi)\nv16hi __builtin_ia32_pmovsxbw256 (v16qi)\nv8si __builtin_ia32_pmovsxbd256 (v16qi)\nv4di __builtin_ia32_pmovsxbq256 (v16qi)\nv8si __builtin_ia32_pmovsxwd256 (v8hi)\nv4di __builtin_ia32_pmovsxwq256 (v8hi)\nv4di __builtin_ia32_pmovsxdq256 (v4si)\nv16hi __builtin_ia32_pmovzxbw256 (v16qi)\nv8si __builtin_ia32_pmovzxbd256 (v16qi)\nv4di __builtin_ia32_pmovzxbq256 (v16qi)\nv8si __builtin_ia32_pmovzxwd256 (v8hi)\nv4di __builtin_ia32_pmovzxwq256 (v8hi)\nv4di __builtin_ia32_pmovzxdq256 (v4si)\nv4di __builtin_ia32_pmuldq256 (v8si,v8si)\nv16hi __builtin_ia32_pmulhrsw256 (v16hi, v16hi)\nv16hi __builtin_ia32_pmulhuw256 (v16hi,v16hi)\nv16hi __builtin_ia32_pmulhw256 (v16hi,v16hi)\nv16hi __builtin_ia32_pmullw256 (v16hi,v16hi)\nv8si __builtin_ia32_pmulld256 (v8si,v8si)\nv4di __builtin_ia32_pmuludq256 (v8si,v8si)\nv4di __builtin_ia32_por256 (v4di,v4di)\nv16hi __builtin_ia32_psadbw256 (v32qi,v32qi)\nv32qi __builtin_ia32_pshufb256 (v32qi,v32qi)\nv8si __builtin_ia32_pshufd256 (v8si,int)\nv16hi __builtin_ia32_pshufhw256 (v16hi,int)\nv16hi __builtin_ia32_pshuflw256 (v16hi,int)\nv32qi __builtin_ia32_psignb256 (v32qi,v32qi)\nv16hi __builtin_ia32_psignw256 (v16hi,v16hi)\nv8si __builtin_ia32_psignd256 (v8si,v8si)\nv4di __builtin_ia32_pslldqi256 (v4di,int)\nv16hi __builtin_ia32_psllwi256 (16hi,int)\nv16hi __builtin_ia32_psllw256(v16hi,v8hi)\nv8si __builtin_ia32_pslldi256 (v8si,int)\nv8si __builtin_ia32_pslld256(v8si,v4si)\nv4di __builtin_ia32_psllqi256 (v4di,int)\nv4di __builtin_ia32_psllq256(v4di,v2di)\nv16hi __builtin_ia32_psrawi256 (v16hi,int)\nv16hi __builtin_ia32_psraw256 (v16hi,v8hi)\nv8si __builtin_ia32_psradi256 (v8si,int)\nv8si __builtin_ia32_psrad256 (v8si,v4si)\nv4di __builtin_ia32_psrldqi256 (v4di, int)\nv16hi __builtin_ia32_psrlwi256 (v16hi,int)\nv16hi __builtin_ia32_psrlw256 (v16hi,v8hi)\nv8si __builtin_ia32_psrldi256 (v8si,int)\nv8si __builtin_ia32_psrld256 (v8si,v4si)\nv4di __builtin_ia32_psrlqi256 (v4di,int)\nv4di __builtin_ia32_psrlq256(v4di,v2di)\nv32qi __builtin_ia32_psubb256 (v32qi,v32qi)\nv32hi __builtin_ia32_psubw256 (v16hi,v16hi)\nv8si __builtin_ia32_psubd256 (v8si,v8si)\nv4di __builtin_ia32_psubq256 (v4di,v4di)\nv32qi __builtin_ia32_psubsb256 (v32qi,v32qi)\nv16hi __builtin_ia32_psubsw256 (v16hi,v16hi)\nv32qi __builtin_ia32_psubusb256 (v32qi,v32qi)\nv16hi __builtin_ia32_psubusw256 (v16hi,v16hi)\nv32qi __builtin_ia32_punpckhbw256 (v32qi,v32qi)\nv16hi __builtin_ia32_punpckhwd256 (v16hi,v16hi)\nv8si __builtin_ia32_punpckhdq256 (v8si,v8si)\nv4di __builtin_ia32_punpckhqdq256 (v4di,v4di)\nv32qi __builtin_ia32_punpcklbw256 (v32qi,v32qi)\nv16hi __builtin_ia32_punpcklwd256 (v16hi,v16hi)\nv8si __builtin_ia32_punpckldq256 (v8si,v8si)\nv4di __builtin_ia32_punpcklqdq256 (v4di,v4di)\nv4di __builtin_ia32_pxor256 (v4di,v4di)\nv4di __builtin_ia32_movntdqa256 (pv4di)\nv4sf __builtin_ia32_vbroadcastss_ps (v4sf)\nv8sf __builtin_ia32_vbroadcastss_ps256 (v4sf)\nv4df __builtin_ia32_vbroadcastsd_pd256 (v2df)\nv4di __builtin_ia32_vbroadcastsi256 (v2di)\nv4si __builtin_ia32_pblendd128 (v4si,v4si)\nv8si __builtin_ia32_pblendd256 (v8si,v8si)\nv32qi __builtin_ia32_pbroadcastb256 (v16qi)\nv16hi __builtin_ia32_pbroadcastw256 (v8hi)\nv8si __builtin_ia32_pbroadcastd256 (v4si)\nv4di __builtin_ia32_pbroadcastq256 (v2di)\nv16qi __builtin_ia32_pbroadcastb128 (v16qi)\nv8hi __builtin_ia32_pbroadcastw128 (v8hi)\nv4si __builtin_ia32_pbroadcastd128 (v4si)\nv2di __builtin_ia32_pbroadcastq128 (v2di)\nv8si __builtin_ia32_permvarsi256 (v8si,v8si)\nv4df __builtin_ia32_permdf256 (v4df,int)\nv8sf __builtin_ia32_permvarsf256 (v8sf,v8sf)\nv4di __builtin_ia32_permdi256 (v4di,int)\nv4di __builtin_ia32_permti256 (v4di,v4di,int)\nv4di __builtin_ia32_extract128i256 (v4di,int)\nv4di __builtin_ia32_insert128i256 (v4di,v2di,int)\nv8si __builtin_ia32_maskloadd256 (pcv8si,v8si)\nv4di __builtin_ia32_maskloadq256 (pcv4di,v4di)\nv4si __builtin_ia32_maskloadd (pcv4si,v4si)\nv2di __builtin_ia32_maskloadq (pcv2di,v2di)\nvoid __builtin_ia32_maskstored256 (pv8si,v8si,v8si)\nvoid __builtin_ia32_maskstoreq256 (pv4di,v4di,v4di)\nvoid __builtin_ia32_maskstored (pv4si,v4si,v4si)\nvoid __builtin_ia32_maskstoreq (pv2di,v2di,v2di)\nv8si __builtin_ia32_psllv8si (v8si,v8si)\nv4si __builtin_ia32_psllv4si (v4si,v4si)\nv4di __builtin_ia32_psllv4di (v4di,v4di)\nv2di __builtin_ia32_psllv2di (v2di,v2di)\nv8si __builtin_ia32_psrav8si (v8si,v8si)\nv4si __builtin_ia32_psrav4si (v4si,v4si)\nv8si __builtin_ia32_psrlv8si (v8si,v8si)\nv4si __builtin_ia32_psrlv4si (v4si,v4si)\nv4di __builtin_ia32_psrlv4di (v4di,v4di)\nv2di __builtin_ia32_psrlv2di (v2di,v2di)\nv2df __builtin_ia32_gathersiv2df (v2df, pcdouble,v4si,v2df,int)\nv4df __builtin_ia32_gathersiv4df (v4df, pcdouble,v4si,v4df,int)\nv2df __builtin_ia32_gatherdiv2df (v2df, pcdouble,v2di,v2df,int)\nv4df __builtin_ia32_gatherdiv4df (v4df, pcdouble,v4di,v4df,int)\nv4sf __builtin_ia32_gathersiv4sf (v4sf, pcfloat,v4si,v4sf,int)\nv8sf __builtin_ia32_gathersiv8sf (v8sf, pcfloat,v8si,v8sf,int)\nv4sf __builtin_ia32_gatherdiv4sf (v4sf, pcfloat,v2di,v4sf,int)\nv4sf __builtin_ia32_gatherdiv4sf256 (v4sf, pcfloat,v4di,v4sf,int)\nv2di __builtin_ia32_gathersiv2di (v2di, pcint64,v4si,v2di,int)\nv4di __builtin_ia32_gathersiv4di (v4di, pcint64,v4si,v4di,int)\nv2di __builtin_ia32_gatherdiv2di (v2di, pcint64,v2di,v2di,int)\nv4di __builtin_ia32_gatherdiv4di (v4di, pcint64,v4di,v4di,int)\nv4si __builtin_ia32_gathersiv4si (v4si, pcint,v4si,v4si,int)\nv8si __builtin_ia32_gathersiv8si (v8si, pcint,v8si,v8si,int)\nv4si __builtin_ia32_gatherdiv4si (v4si, pcint,v2di,v4si,int)\nv4si __builtin_ia32_gatherdiv4si256 (v4si, pcint,v4di,v4si,int)</pre> <p>The following built-in functions are available when <code>-maes</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v2di __builtin_ia32_aesenc128 (v2di, v2di)\nv2di __builtin_ia32_aesenclast128 (v2di, v2di)\nv2di __builtin_ia32_aesdec128 (v2di, v2di)\nv2di __builtin_ia32_aesdeclast128 (v2di, v2di)\nv2di __builtin_ia32_aeskeygenassist128 (v2di, const int)\nv2di __builtin_ia32_aesimc128 (v2di)</pre> <p>The following built-in function is available when <code>-mpclmul</code> is used. </p>\n<dl> <dt><code>v2di __builtin_ia32_pclmulqdq128 (v2di, v2di, const int)</code></dt>\n<dd>Generates the <code>pclmulqdq</code> machine instruction. </dd>\n</dl> <p>The following built-in function is available when <code>-mfsgsbase</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">unsigned int __builtin_ia32_rdfsbase32 (void)\nunsigned long long __builtin_ia32_rdfsbase64 (void)\nunsigned int __builtin_ia32_rdgsbase32 (void)\nunsigned long long __builtin_ia32_rdgsbase64 (void)\nvoid _writefsbase_u32 (unsigned int)\nvoid _writefsbase_u64 (unsigned long long)\nvoid _writegsbase_u32 (unsigned int)\nvoid _writegsbase_u64 (unsigned long long)</pre> <p>The following built-in function is available when <code>-mrdrnd</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">unsigned int __builtin_ia32_rdrand16_step (unsigned short *)\nunsigned int __builtin_ia32_rdrand32_step (unsigned int *)\nunsigned int __builtin_ia32_rdrand64_step (unsigned long long *)</pre> <p>The following built-in functions are available when <code>-msse4a</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">void __builtin_ia32_movntsd (double *, v2df)\nvoid __builtin_ia32_movntss (float *, v4sf)\nv2di __builtin_ia32_extrq  (v2di, v16qi)\nv2di __builtin_ia32_extrqi (v2di, const unsigned int, const unsigned int)\nv2di __builtin_ia32_insertq (v2di, v2di)\nv2di __builtin_ia32_insertqi (v2di, v2di, const unsigned int, const unsigned int)</pre> <p>The following built-in functions are available when <code>-mxop</code> is used. </p>\n<pre class=\"smallexample\">v2df __builtin_ia32_vfrczpd (v2df)\nv4sf __builtin_ia32_vfrczps (v4sf)\nv2df __builtin_ia32_vfrczsd (v2df)\nv4sf __builtin_ia32_vfrczss (v4sf)\nv4df __builtin_ia32_vfrczpd256 (v4df)\nv8sf __builtin_ia32_vfrczps256 (v8sf)\nv2di __builtin_ia32_vpcmov (v2di, v2di, v2di)\nv2di __builtin_ia32_vpcmov_v2di (v2di, v2di, v2di)\nv4si __builtin_ia32_vpcmov_v4si (v4si, v4si, v4si)\nv8hi __builtin_ia32_vpcmov_v8hi (v8hi, v8hi, v8hi)\nv16qi __builtin_ia32_vpcmov_v16qi (v16qi, v16qi, v16qi)\nv2df __builtin_ia32_vpcmov_v2df (v2df, v2df, v2df)\nv4sf __builtin_ia32_vpcmov_v4sf (v4sf, v4sf, v4sf)\nv4di __builtin_ia32_vpcmov_v4di256 (v4di, v4di, v4di)\nv8si __builtin_ia32_vpcmov_v8si256 (v8si, v8si, v8si)\nv16hi __builtin_ia32_vpcmov_v16hi256 (v16hi, v16hi, v16hi)\nv32qi __builtin_ia32_vpcmov_v32qi256 (v32qi, v32qi, v32qi)\nv4df __builtin_ia32_vpcmov_v4df256 (v4df, v4df, v4df)\nv8sf __builtin_ia32_vpcmov_v8sf256 (v8sf, v8sf, v8sf)\nv16qi __builtin_ia32_vpcomeqb (v16qi, v16qi)\nv8hi __builtin_ia32_vpcomeqw (v8hi, v8hi)\nv4si __builtin_ia32_vpcomeqd (v4si, v4si)\nv2di __builtin_ia32_vpcomeqq (v2di, v2di)\nv16qi __builtin_ia32_vpcomequb (v16qi, v16qi)\nv4si __builtin_ia32_vpcomequd (v4si, v4si)\nv2di __builtin_ia32_vpcomequq (v2di, v2di)\nv8hi __builtin_ia32_vpcomequw (v8hi, v8hi)\nv8hi __builtin_ia32_vpcomeqw (v8hi, v8hi)\nv16qi __builtin_ia32_vpcomfalseb (v16qi, v16qi)\nv4si __builtin_ia32_vpcomfalsed (v4si, v4si)\nv2di __builtin_ia32_vpcomfalseq (v2di, v2di)\nv16qi __builtin_ia32_vpcomfalseub (v16qi, v16qi)\nv4si __builtin_ia32_vpcomfalseud (v4si, v4si)\nv2di __builtin_ia32_vpcomfalseuq (v2di, v2di)\nv8hi __builtin_ia32_vpcomfalseuw (v8hi, v8hi)\nv8hi __builtin_ia32_vpcomfalsew (v8hi, v8hi)\nv16qi __builtin_ia32_vpcomgeb (v16qi, v16qi)\nv4si __builtin_ia32_vpcomged (v4si, v4si)\nv2di __builtin_ia32_vpcomgeq (v2di, v2di)\nv16qi __builtin_ia32_vpcomgeub (v16qi, v16qi)\nv4si __builtin_ia32_vpcomgeud (v4si, v4si)\nv2di __builtin_ia32_vpcomgeuq (v2di, v2di)\nv8hi __builtin_ia32_vpcomgeuw (v8hi, v8hi)\nv8hi __builtin_ia32_vpcomgew (v8hi, v8hi)\nv16qi __builtin_ia32_vpcomgtb (v16qi, v16qi)\nv4si __builtin_ia32_vpcomgtd (v4si, v4si)\nv2di __builtin_ia32_vpcomgtq (v2di, v2di)\nv16qi __builtin_ia32_vpcomgtub (v16qi, v16qi)\nv4si __builtin_ia32_vpcomgtud (v4si, v4si)\nv2di __builtin_ia32_vpcomgtuq (v2di, v2di)\nv8hi __builtin_ia32_vpcomgtuw (v8hi, v8hi)\nv8hi __builtin_ia32_vpcomgtw (v8hi, v8hi)\nv16qi __builtin_ia32_vpcomleb (v16qi, v16qi)\nv4si __builtin_ia32_vpcomled (v4si, v4si)\nv2di __builtin_ia32_vpcomleq (v2di, v2di)\nv16qi __builtin_ia32_vpcomleub (v16qi, v16qi)\nv4si __builtin_ia32_vpcomleud (v4si, v4si)\nv2di __builtin_ia32_vpcomleuq (v2di, v2di)\nv8hi __builtin_ia32_vpcomleuw (v8hi, v8hi)\nv8hi __builtin_ia32_vpcomlew (v8hi, v8hi)\nv16qi __builtin_ia32_vpcomltb (v16qi, v16qi)\nv4si __builtin_ia32_vpcomltd (v4si, v4si)\nv2di __builtin_ia32_vpcomltq (v2di, v2di)\nv16qi __builtin_ia32_vpcomltub (v16qi, v16qi)\nv4si __builtin_ia32_vpcomltud (v4si, v4si)\nv2di __builtin_ia32_vpcomltuq (v2di, v2di)\nv8hi __builtin_ia32_vpcomltuw (v8hi, v8hi)\nv8hi __builtin_ia32_vpcomltw (v8hi, v8hi)\nv16qi __builtin_ia32_vpcomneb (v16qi, v16qi)\nv4si __builtin_ia32_vpcomned (v4si, v4si)\nv2di __builtin_ia32_vpcomneq (v2di, v2di)\nv16qi __builtin_ia32_vpcomneub (v16qi, v16qi)\nv4si __builtin_ia32_vpcomneud (v4si, v4si)\nv2di __builtin_ia32_vpcomneuq (v2di, v2di)\nv8hi __builtin_ia32_vpcomneuw (v8hi, v8hi)\nv8hi __builtin_ia32_vpcomnew (v8hi, v8hi)\nv16qi __builtin_ia32_vpcomtrueb (v16qi, v16qi)\nv4si __builtin_ia32_vpcomtrued (v4si, v4si)\nv2di __builtin_ia32_vpcomtrueq (v2di, v2di)\nv16qi __builtin_ia32_vpcomtrueub (v16qi, v16qi)\nv4si __builtin_ia32_vpcomtrueud (v4si, v4si)\nv2di __builtin_ia32_vpcomtrueuq (v2di, v2di)\nv8hi __builtin_ia32_vpcomtrueuw (v8hi, v8hi)\nv8hi __builtin_ia32_vpcomtruew (v8hi, v8hi)\nv4si __builtin_ia32_vphaddbd (v16qi)\nv2di __builtin_ia32_vphaddbq (v16qi)\nv8hi __builtin_ia32_vphaddbw (v16qi)\nv2di __builtin_ia32_vphadddq (v4si)\nv4si __builtin_ia32_vphaddubd (v16qi)\nv2di __builtin_ia32_vphaddubq (v16qi)\nv8hi __builtin_ia32_vphaddubw (v16qi)\nv2di __builtin_ia32_vphaddudq (v4si)\nv4si __builtin_ia32_vphadduwd (v8hi)\nv2di __builtin_ia32_vphadduwq (v8hi)\nv4si __builtin_ia32_vphaddwd (v8hi)\nv2di __builtin_ia32_vphaddwq (v8hi)\nv8hi __builtin_ia32_vphsubbw (v16qi)\nv2di __builtin_ia32_vphsubdq (v4si)\nv4si __builtin_ia32_vphsubwd (v8hi)\nv4si __builtin_ia32_vpmacsdd (v4si, v4si, v4si)\nv2di __builtin_ia32_vpmacsdqh (v4si, v4si, v2di)\nv2di __builtin_ia32_vpmacsdql (v4si, v4si, v2di)\nv4si __builtin_ia32_vpmacssdd (v4si, v4si, v4si)\nv2di __builtin_ia32_vpmacssdqh (v4si, v4si, v2di)\nv2di __builtin_ia32_vpmacssdql (v4si, v4si, v2di)\nv4si __builtin_ia32_vpmacsswd (v8hi, v8hi, v4si)\nv8hi __builtin_ia32_vpmacssww (v8hi, v8hi, v8hi)\nv4si __builtin_ia32_vpmacswd (v8hi, v8hi, v4si)\nv8hi __builtin_ia32_vpmacsww (v8hi, v8hi, v8hi)\nv4si __builtin_ia32_vpmadcsswd (v8hi, v8hi, v4si)\nv4si __builtin_ia32_vpmadcswd (v8hi, v8hi, v4si)\nv16qi __builtin_ia32_vpperm (v16qi, v16qi, v16qi)\nv16qi __builtin_ia32_vprotb (v16qi, v16qi)\nv4si __builtin_ia32_vprotd (v4si, v4si)\nv2di __builtin_ia32_vprotq (v2di, v2di)\nv8hi __builtin_ia32_vprotw (v8hi, v8hi)\nv16qi __builtin_ia32_vpshab (v16qi, v16qi)\nv4si __builtin_ia32_vpshad (v4si, v4si)\nv2di __builtin_ia32_vpshaq (v2di, v2di)\nv8hi __builtin_ia32_vpshaw (v8hi, v8hi)\nv16qi __builtin_ia32_vpshlb (v16qi, v16qi)\nv4si __builtin_ia32_vpshld (v4si, v4si)\nv2di __builtin_ia32_vpshlq (v2di, v2di)\nv8hi __builtin_ia32_vpshlw (v8hi, v8hi)</pre> <p>The following built-in functions are available when <code>-mfma4</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v2df __builtin_ia32_vfmaddpd (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfmaddps (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfmaddsd (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfmaddss (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfmsubpd (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfmsubps (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfmsubsd (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfmsubss (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfnmaddpd (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfnmaddps (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfnmaddsd (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfnmaddss (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfnmsubpd (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfnmsubps (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfnmsubsd (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfnmsubss (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfmaddsubpd  (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfmaddsubps  (v4sf, v4sf, v4sf)\nv2df __builtin_ia32_vfmsubaddpd  (v2df, v2df, v2df)\nv4sf __builtin_ia32_vfmsubaddps  (v4sf, v4sf, v4sf)\nv4df __builtin_ia32_vfmaddpd256 (v4df, v4df, v4df)\nv8sf __builtin_ia32_vfmaddps256 (v8sf, v8sf, v8sf)\nv4df __builtin_ia32_vfmsubpd256 (v4df, v4df, v4df)\nv8sf __builtin_ia32_vfmsubps256 (v8sf, v8sf, v8sf)\nv4df __builtin_ia32_vfnmaddpd256 (v4df, v4df, v4df)\nv8sf __builtin_ia32_vfnmaddps256 (v8sf, v8sf, v8sf)\nv4df __builtin_ia32_vfnmsubpd256 (v4df, v4df, v4df)\nv8sf __builtin_ia32_vfnmsubps256 (v8sf, v8sf, v8sf)\nv4df __builtin_ia32_vfmaddsubpd256 (v4df, v4df, v4df)\nv8sf __builtin_ia32_vfmaddsubps256 (v8sf, v8sf, v8sf)\nv4df __builtin_ia32_vfmsubaddpd256 (v4df, v4df, v4df)\nv8sf __builtin_ia32_vfmsubaddps256 (v8sf, v8sf, v8sf)</pre> <p>The following built-in functions are available when <code>-mlwp</code> is used. </p>\n<pre class=\"smallexample\">void __builtin_ia32_llwpcb16 (void *);\nvoid __builtin_ia32_llwpcb32 (void *);\nvoid __builtin_ia32_llwpcb64 (void *);\nvoid * __builtin_ia32_llwpcb16 (void);\nvoid * __builtin_ia32_llwpcb32 (void);\nvoid * __builtin_ia32_llwpcb64 (void);\nvoid __builtin_ia32_lwpval16 (unsigned short, unsigned int, unsigned short)\nvoid __builtin_ia32_lwpval32 (unsigned int, unsigned int, unsigned int)\nvoid __builtin_ia32_lwpval64 (unsigned __int64, unsigned int, unsigned int)\nunsigned char __builtin_ia32_lwpins16 (unsigned short, unsigned int, unsigned short)\nunsigned char __builtin_ia32_lwpins32 (unsigned int, unsigned int, unsigned int)\nunsigned char __builtin_ia32_lwpins64 (unsigned __int64, unsigned int, unsigned int)</pre> <p>The following built-in functions are available when <code>-mbmi</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">unsigned int __builtin_ia32_bextr_u32(unsigned int, unsigned int);\nunsigned long long __builtin_ia32_bextr_u64 (unsigned long long, unsigned long long);</pre> <p>The following built-in functions are available when <code>-mbmi2</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">unsigned int _bzhi_u32 (unsigned int, unsigned int)\nunsigned int _pdep_u32 (unsigned int, unsigned int)\nunsigned int _pext_u32 (unsigned int, unsigned int)\nunsigned long long _bzhi_u64 (unsigned long long, unsigned long long)\nunsigned long long _pdep_u64 (unsigned long long, unsigned long long)\nunsigned long long _pext_u64 (unsigned long long, unsigned long long)</pre> <p>The following built-in functions are available when <code>-mlzcnt</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">unsigned short __builtin_ia32_lzcnt_16(unsigned short);\nunsigned int __builtin_ia32_lzcnt_u32(unsigned int);\nunsigned long long __builtin_ia32_lzcnt_u64 (unsigned long long);</pre> <p>The following built-in functions are available when <code>-mfxsr</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">void __builtin_ia32_fxsave (void *)\nvoid __builtin_ia32_fxrstor (void *)\nvoid __builtin_ia32_fxsave64 (void *)\nvoid __builtin_ia32_fxrstor64 (void *)</pre> <p>The following built-in functions are available when <code>-mxsave</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">void __builtin_ia32_xsave (void *, long long)\nvoid __builtin_ia32_xrstor (void *, long long)\nvoid __builtin_ia32_xsave64 (void *, long long)\nvoid __builtin_ia32_xrstor64 (void *, long long)</pre> <p>The following built-in functions are available when <code>-mxsaveopt</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">void __builtin_ia32_xsaveopt (void *, long long)\nvoid __builtin_ia32_xsaveopt64 (void *, long long)</pre> <p>The following built-in functions are available when <code>-mtbm</code> is used. Both of them generate the immediate form of the bextr machine instruction. </p>\n<pre class=\"smallexample\">unsigned int __builtin_ia32_bextri_u32 (unsigned int, const unsigned int);\nunsigned long long __builtin_ia32_bextri_u64 (unsigned long long, const unsigned long long);</pre> <p>The following built-in functions are available when <code>-m3dnow</code> is used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">void __builtin_ia32_femms (void)\nv8qi __builtin_ia32_pavgusb (v8qi, v8qi)\nv2si __builtin_ia32_pf2id (v2sf)\nv2sf __builtin_ia32_pfacc (v2sf, v2sf)\nv2sf __builtin_ia32_pfadd (v2sf, v2sf)\nv2si __builtin_ia32_pfcmpeq (v2sf, v2sf)\nv2si __builtin_ia32_pfcmpge (v2sf, v2sf)\nv2si __builtin_ia32_pfcmpgt (v2sf, v2sf)\nv2sf __builtin_ia32_pfmax (v2sf, v2sf)\nv2sf __builtin_ia32_pfmin (v2sf, v2sf)\nv2sf __builtin_ia32_pfmul (v2sf, v2sf)\nv2sf __builtin_ia32_pfrcp (v2sf)\nv2sf __builtin_ia32_pfrcpit1 (v2sf, v2sf)\nv2sf __builtin_ia32_pfrcpit2 (v2sf, v2sf)\nv2sf __builtin_ia32_pfrsqrt (v2sf)\nv2sf __builtin_ia32_pfsub (v2sf, v2sf)\nv2sf __builtin_ia32_pfsubr (v2sf, v2sf)\nv2sf __builtin_ia32_pi2fd (v2si)\nv4hi __builtin_ia32_pmulhrw (v4hi, v4hi)</pre> <p>The following built-in functions are available when both <code>-m3dnow</code> and <code>-march=athlon</code> are used. All of them generate the machine instruction that is part of the name. </p>\n<pre class=\"smallexample\">v2si __builtin_ia32_pf2iw (v2sf)\nv2sf __builtin_ia32_pfnacc (v2sf, v2sf)\nv2sf __builtin_ia32_pfpnacc (v2sf, v2sf)\nv2sf __builtin_ia32_pi2fw (v2si)\nv2sf __builtin_ia32_pswapdsf (v2sf)\nv2si __builtin_ia32_pswapdsi (v2si)</pre> <p>The following built-in functions are available when <code>-mrtm</code> is used They are used for restricted transactional memory. These are the internal low level functions. Normally the functions in <a href=\"x86-transactional-memory-intrinsics#X86-transactional-memory-intrinsics\">X86 transactional memory intrinsics</a> should be used instead. </p>\n<pre class=\"smallexample\">int __builtin_ia32_xbegin ()\nvoid __builtin_ia32_xend ()\nvoid __builtin_ia32_xabort (status)\nint __builtin_ia32_xtest ()</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/X86-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/X86-Built_002din-Functions.html</a>\n  </p>\n</div>\n","x86-transactional-memory-intrinsics":"<h1 class=\"subsection\" id=\"X86-transactional-memory-intrinsics\">6.57.12 X86 transaction memory intrinsics</h1> <p>Hardware transactional memory intrinsics for i386. These allow to use memory transactions with RTM (Restricted Transactional Memory). For using HLE (Hardware Lock Elision) see <a href=\"x86-specific-memory-model-extensions-for-transactional-memory#x86-specific-memory-model-extensions-for-transactional-memory\">x86 specific memory model extensions for transactional memory</a> instead. This support is enabled with the <code>-mrtm</code> option. </p>\n<p>A memory transaction commits all changes to memory in an atomic way, as visible to other threads. If the transaction fails it is rolled back and all side effects discarded. </p>\n<p>Generally there is no guarantee that a memory transaction ever succeeds and suitable fallback code always needs to be supplied. </p>\n<div class=\"defun\"> — RTM Function: unsigned <b>_xbegin</b> () <blockquote><p>Start a RTM (Restricted Transactional Memory) transaction. Returns _XBEGIN_STARTED when the transaction started successfully (note this is not 0, so the constant has to be explicitely tested). When the transaction aborts all side effects are undone and an abort code is returned. There is no guarantee any transaction ever succeeds, so there always needs to be a valid tested fallback path. </p></blockquote>\n</div> <pre class=\"smallexample\">#include &lt;immintrin.h&gt;\n\nif ((status = _xbegin ()) == _XBEGIN_STARTED) {\n    ... transaction code...\n    _xend ();\n} else {\n    ... non transactional fallback path...\n}</pre> <p>Valid abort status bits (when the value is not <code>_XBEGIN_STARTED</code>) are: </p>\n<dl> <dt><code>_XABORT_EXPLICIT</code></dt>\n<dd>Transaction explicitely aborted with <code>_xabort</code>. The parameter passed to <code>_xabort</code> is available with <code>_XABORT_CODE(status)</code> </dd>\n<dt><code>_XABORT_RETRY</code></dt>\n<dd>Transaction retry is possible. </dd>\n<dt><code>_XABORT_CONFLICT</code></dt>\n<dd>Transaction abort due to a memory conflict with another thread </dd>\n<dt><code>_XABORT_CAPACITY</code></dt>\n<dd>Transaction abort due to the transaction using too much memory </dd>\n<dt><code>_XABORT_DEBUG</code></dt>\n<dd>Transaction abort due to a debug trap </dd>\n<dt><code>_XABORT_NESTED</code></dt>\n<dd>Transaction abort in a inner nested transaction </dd>\n</dl> <div class=\"defun\"> — RTM Function: void <b>_xend</b> () <blockquote><p>Commit the current transaction. When no transaction is active this will fault. All memory side effects of the transactions will become visible to other threads in an atomic matter. </p></blockquote>\n</div> <div class=\"defun\"> — RTM Function: int <b>_xtest</b> () <blockquote><p>Return a value not zero when a transaction is currently active, otherwise 0. </p></blockquote>\n</div> <div class=\"defun\"> — RTM Function: void <b>_xabort</b> (<var>status</var>) <blockquote><p>Abort the current transaction. When no transaction is active this is a no-op. status must be a 8bit constant, that is included in the status code returned by <code>_xbegin</code> </p></blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/X86-transactional-memory-intrinsics.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/X86-transactional-memory-intrinsics.html</a>\n  </p>\n</div>\n","mips-dsp-built_002din-functions":"<h1 class=\"subsection\" id=\"MIPS-DSP-Built_002din-Functions\">6.57.13 MIPS DSP Built-in Functions</h1> <p>The MIPS DSP Application-Specific Extension (ASE) includes new instructions that are designed to improve the performance of DSP and media applications. It provides instructions that operate on packed 8-bit/16-bit integer data, Q7, Q15 and Q31 fractional data. </p>\n<p>GCC supports MIPS DSP operations using both the generic vector extensions (see <a href=\"vector-extensions#Vector-Extensions\">Vector Extensions</a>) and a collection of MIPS-specific built-in functions. Both kinds of support are enabled by the <code>-mdsp</code> command-line option. </p>\n<p>Revision 2 of the ASE was introduced in the second half of 2006. This revision adds extra instructions to the original ASE, but is otherwise backwards-compatible with it. You can select revision 2 using the command-line option <code>-mdspr2</code>; this option implies <code>-mdsp</code>. </p>\n<p>The SCOUNT and POS bits of the DSP control register are global. The WRDSP, EXTPDP, EXTPDPV and MTHLIP instructions modify the SCOUNT and POS bits. During optimization, the compiler does not delete these instructions and it does not delete calls to functions containing these instructions. </p>\n<p>At present, GCC only provides support for operations on 32-bit vectors. The vector type associated with 8-bit integer data is usually called <code>v4i8</code>, the vector type associated with Q7 is usually called <code>v4q7</code>, the vector type associated with 16-bit integer data is usually called <code>v2i16</code>, and the vector type associated with Q15 is usually called <code>v2q15</code>. They can be defined in C as follows: </p>\n<pre class=\"smallexample\">typedef signed char v4i8 __attribute__ ((vector_size(4)));\ntypedef signed char v4q7 __attribute__ ((vector_size(4)));\ntypedef short v2i16 __attribute__ ((vector_size(4)));\ntypedef short v2q15 __attribute__ ((vector_size(4)));</pre> <p><code>v4i8</code>, <code>v4q7</code>, <code>v2i16</code> and <code>v2q15</code> values are initialized in the same way as aggregates. For example: </p>\n<pre class=\"smallexample\">v4i8 a = {1, 2, 3, 4};\nv4i8 b;\nb = (v4i8) {5, 6, 7, 8};\n\nv2q15 c = {0x0fcb, 0x3a75};\nv2q15 d;\nd = (v2q15) {0.1234 * 0x1.0p15, 0.4567 * 0x1.0p15};</pre> <p><em>Note:</em> The CPU's endianness determines the order in which values are packed. On little-endian targets, the first value is the least significant and the last value is the most significant. The opposite order applies to big-endian targets. For example, the code above sets the lowest byte of <code>a</code> to <code>1</code> on little-endian targets and <code>4</code> on big-endian targets. </p>\n<p><em>Note:</em> Q7, Q15 and Q31 values must be initialized with their integer representation. As shown in this example, the integer representation of a Q7 value can be obtained by multiplying the fractional value by <code>0x1.0p7</code>. The equivalent for Q15 values is to multiply by <code>0x1.0p15</code>. The equivalent for Q31 values is to multiply by <code>0x1.0p31</code>. </p>\n<p>The table below lists the <code>v4i8</code> and <code>v2q15</code> operations for which hardware support exists. <code>a</code> and <code>b</code> are <code>v4i8</code> values, and <code>c</code> and <code>d</code> are <code>v2q15</code> values. </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">C code </td>\n<td valign=\"top\" width=\"50%\">MIPS instruction </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>a + b</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>addu.qb</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>c + d</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>addq.ph</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>a - b</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>subu.qb</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>c - d</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>subq.ph</code> </td>\n</tr>\n</table> <p>The table below lists the <code>v2i16</code> operation for which hardware support exists for the DSP ASE REV 2. <code>e</code> and <code>f</code> are <code>v2i16</code> values. </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">C code </td>\n<td valign=\"top\" width=\"50%\">MIPS instruction </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>e * f</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>mul.ph</code> </td>\n</tr>\n</table> <p>It is easier to describe the DSP built-in functions if we first define the following types: </p>\n<pre class=\"smallexample\">typedef int q31;\ntypedef int i32;\ntypedef unsigned int ui32;\ntypedef long long a64;</pre> <p><code>q31</code> and <code>i32</code> are actually the same as <code>int</code>, but we use <code>q31</code> to indicate a Q31 fractional value and <code>i32</code> to indicate a 32-bit integer value. Similarly, <code>a64</code> is the same as <code>long long</code>, but we use <code>a64</code> to indicate values that are placed in one of the four DSP accumulators (<code>$ac0</code>, <code>$ac1</code>, <code>$ac2</code> or <code>$ac3</code>). </p>\n<p>Also, some built-in functions prefer or require immediate numbers as parameters, because the corresponding DSP instructions accept both immediate numbers and register operands, or accept immediate numbers only. The immediate parameters are listed as follows. </p>\n<pre class=\"smallexample\">imm0_3: 0 to 3.\nimm0_7: 0 to 7.\nimm0_15: 0 to 15.\nimm0_31: 0 to 31.\nimm0_63: 0 to 63.\nimm0_255: 0 to 255.\nimm_n32_31: -32 to 31.\nimm_n512_511: -512 to 511.</pre> <p>The following built-in functions map directly to a particular MIPS DSP instruction. Please refer to the architecture specification for details on what each instruction does. </p>\n<pre class=\"smallexample\">v2q15 __builtin_mips_addq_ph (v2q15, v2q15)\nv2q15 __builtin_mips_addq_s_ph (v2q15, v2q15)\nq31 __builtin_mips_addq_s_w (q31, q31)\nv4i8 __builtin_mips_addu_qb (v4i8, v4i8)\nv4i8 __builtin_mips_addu_s_qb (v4i8, v4i8)\nv2q15 __builtin_mips_subq_ph (v2q15, v2q15)\nv2q15 __builtin_mips_subq_s_ph (v2q15, v2q15)\nq31 __builtin_mips_subq_s_w (q31, q31)\nv4i8 __builtin_mips_subu_qb (v4i8, v4i8)\nv4i8 __builtin_mips_subu_s_qb (v4i8, v4i8)\ni32 __builtin_mips_addsc (i32, i32)\ni32 __builtin_mips_addwc (i32, i32)\ni32 __builtin_mips_modsub (i32, i32)\ni32 __builtin_mips_raddu_w_qb (v4i8)\nv2q15 __builtin_mips_absq_s_ph (v2q15)\nq31 __builtin_mips_absq_s_w (q31)\nv4i8 __builtin_mips_precrq_qb_ph (v2q15, v2q15)\nv2q15 __builtin_mips_precrq_ph_w (q31, q31)\nv2q15 __builtin_mips_precrq_rs_ph_w (q31, q31)\nv4i8 __builtin_mips_precrqu_s_qb_ph (v2q15, v2q15)\nq31 __builtin_mips_preceq_w_phl (v2q15)\nq31 __builtin_mips_preceq_w_phr (v2q15)\nv2q15 __builtin_mips_precequ_ph_qbl (v4i8)\nv2q15 __builtin_mips_precequ_ph_qbr (v4i8)\nv2q15 __builtin_mips_precequ_ph_qbla (v4i8)\nv2q15 __builtin_mips_precequ_ph_qbra (v4i8)\nv2q15 __builtin_mips_preceu_ph_qbl (v4i8)\nv2q15 __builtin_mips_preceu_ph_qbr (v4i8)\nv2q15 __builtin_mips_preceu_ph_qbla (v4i8)\nv2q15 __builtin_mips_preceu_ph_qbra (v4i8)\nv4i8 __builtin_mips_shll_qb (v4i8, imm0_7)\nv4i8 __builtin_mips_shll_qb (v4i8, i32)\nv2q15 __builtin_mips_shll_ph (v2q15, imm0_15)\nv2q15 __builtin_mips_shll_ph (v2q15, i32)\nv2q15 __builtin_mips_shll_s_ph (v2q15, imm0_15)\nv2q15 __builtin_mips_shll_s_ph (v2q15, i32)\nq31 __builtin_mips_shll_s_w (q31, imm0_31)\nq31 __builtin_mips_shll_s_w (q31, i32)\nv4i8 __builtin_mips_shrl_qb (v4i8, imm0_7)\nv4i8 __builtin_mips_shrl_qb (v4i8, i32)\nv2q15 __builtin_mips_shra_ph (v2q15, imm0_15)\nv2q15 __builtin_mips_shra_ph (v2q15, i32)\nv2q15 __builtin_mips_shra_r_ph (v2q15, imm0_15)\nv2q15 __builtin_mips_shra_r_ph (v2q15, i32)\nq31 __builtin_mips_shra_r_w (q31, imm0_31)\nq31 __builtin_mips_shra_r_w (q31, i32)\nv2q15 __builtin_mips_muleu_s_ph_qbl (v4i8, v2q15)\nv2q15 __builtin_mips_muleu_s_ph_qbr (v4i8, v2q15)\nv2q15 __builtin_mips_mulq_rs_ph (v2q15, v2q15)\nq31 __builtin_mips_muleq_s_w_phl (v2q15, v2q15)\nq31 __builtin_mips_muleq_s_w_phr (v2q15, v2q15)\na64 __builtin_mips_dpau_h_qbl (a64, v4i8, v4i8)\na64 __builtin_mips_dpau_h_qbr (a64, v4i8, v4i8)\na64 __builtin_mips_dpsu_h_qbl (a64, v4i8, v4i8)\na64 __builtin_mips_dpsu_h_qbr (a64, v4i8, v4i8)\na64 __builtin_mips_dpaq_s_w_ph (a64, v2q15, v2q15)\na64 __builtin_mips_dpaq_sa_l_w (a64, q31, q31)\na64 __builtin_mips_dpsq_s_w_ph (a64, v2q15, v2q15)\na64 __builtin_mips_dpsq_sa_l_w (a64, q31, q31)\na64 __builtin_mips_mulsaq_s_w_ph (a64, v2q15, v2q15)\na64 __builtin_mips_maq_s_w_phl (a64, v2q15, v2q15)\na64 __builtin_mips_maq_s_w_phr (a64, v2q15, v2q15)\na64 __builtin_mips_maq_sa_w_phl (a64, v2q15, v2q15)\na64 __builtin_mips_maq_sa_w_phr (a64, v2q15, v2q15)\ni32 __builtin_mips_bitrev (i32)\ni32 __builtin_mips_insv (i32, i32)\nv4i8 __builtin_mips_repl_qb (imm0_255)\nv4i8 __builtin_mips_repl_qb (i32)\nv2q15 __builtin_mips_repl_ph (imm_n512_511)\nv2q15 __builtin_mips_repl_ph (i32)\nvoid __builtin_mips_cmpu_eq_qb (v4i8, v4i8)\nvoid __builtin_mips_cmpu_lt_qb (v4i8, v4i8)\nvoid __builtin_mips_cmpu_le_qb (v4i8, v4i8)\ni32 __builtin_mips_cmpgu_eq_qb (v4i8, v4i8)\ni32 __builtin_mips_cmpgu_lt_qb (v4i8, v4i8)\ni32 __builtin_mips_cmpgu_le_qb (v4i8, v4i8)\nvoid __builtin_mips_cmp_eq_ph (v2q15, v2q15)\nvoid __builtin_mips_cmp_lt_ph (v2q15, v2q15)\nvoid __builtin_mips_cmp_le_ph (v2q15, v2q15)\nv4i8 __builtin_mips_pick_qb (v4i8, v4i8)\nv2q15 __builtin_mips_pick_ph (v2q15, v2q15)\nv2q15 __builtin_mips_packrl_ph (v2q15, v2q15)\ni32 __builtin_mips_extr_w (a64, imm0_31)\ni32 __builtin_mips_extr_w (a64, i32)\ni32 __builtin_mips_extr_r_w (a64, imm0_31)\ni32 __builtin_mips_extr_s_h (a64, i32)\ni32 __builtin_mips_extr_rs_w (a64, imm0_31)\ni32 __builtin_mips_extr_rs_w (a64, i32)\ni32 __builtin_mips_extr_s_h (a64, imm0_31)\ni32 __builtin_mips_extr_r_w (a64, i32)\ni32 __builtin_mips_extp (a64, imm0_31)\ni32 __builtin_mips_extp (a64, i32)\ni32 __builtin_mips_extpdp (a64, imm0_31)\ni32 __builtin_mips_extpdp (a64, i32)\na64 __builtin_mips_shilo (a64, imm_n32_31)\na64 __builtin_mips_shilo (a64, i32)\na64 __builtin_mips_mthlip (a64, i32)\nvoid __builtin_mips_wrdsp (i32, imm0_63)\ni32 __builtin_mips_rddsp (imm0_63)\ni32 __builtin_mips_lbux (void *, i32)\ni32 __builtin_mips_lhx (void *, i32)\ni32 __builtin_mips_lwx (void *, i32)\na64 __builtin_mips_ldx (void *, i32) [MIPS64 only]\ni32 __builtin_mips_bposge32 (void)\na64 __builtin_mips_madd (a64, i32, i32);\na64 __builtin_mips_maddu (a64, ui32, ui32);\na64 __builtin_mips_msub (a64, i32, i32);\na64 __builtin_mips_msubu (a64, ui32, ui32);\na64 __builtin_mips_mult (i32, i32);\na64 __builtin_mips_multu (ui32, ui32);</pre> <p>The following built-in functions map directly to a particular MIPS DSP REV 2 instruction. Please refer to the architecture specification for details on what each instruction does. </p>\n<pre class=\"smallexample\">v4q7 __builtin_mips_absq_s_qb (v4q7);\nv2i16 __builtin_mips_addu_ph (v2i16, v2i16);\nv2i16 __builtin_mips_addu_s_ph (v2i16, v2i16);\nv4i8 __builtin_mips_adduh_qb (v4i8, v4i8);\nv4i8 __builtin_mips_adduh_r_qb (v4i8, v4i8);\ni32 __builtin_mips_append (i32, i32, imm0_31);\ni32 __builtin_mips_balign (i32, i32, imm0_3);\ni32 __builtin_mips_cmpgdu_eq_qb (v4i8, v4i8);\ni32 __builtin_mips_cmpgdu_lt_qb (v4i8, v4i8);\ni32 __builtin_mips_cmpgdu_le_qb (v4i8, v4i8);\na64 __builtin_mips_dpa_w_ph (a64, v2i16, v2i16);\na64 __builtin_mips_dps_w_ph (a64, v2i16, v2i16);\nv2i16 __builtin_mips_mul_ph (v2i16, v2i16);\nv2i16 __builtin_mips_mul_s_ph (v2i16, v2i16);\nq31 __builtin_mips_mulq_rs_w (q31, q31);\nv2q15 __builtin_mips_mulq_s_ph (v2q15, v2q15);\nq31 __builtin_mips_mulq_s_w (q31, q31);\na64 __builtin_mips_mulsa_w_ph (a64, v2i16, v2i16);\nv4i8 __builtin_mips_precr_qb_ph (v2i16, v2i16);\nv2i16 __builtin_mips_precr_sra_ph_w (i32, i32, imm0_31);\nv2i16 __builtin_mips_precr_sra_r_ph_w (i32, i32, imm0_31);\ni32 __builtin_mips_prepend (i32, i32, imm0_31);\nv4i8 __builtin_mips_shra_qb (v4i8, imm0_7);\nv4i8 __builtin_mips_shra_r_qb (v4i8, imm0_7);\nv4i8 __builtin_mips_shra_qb (v4i8, i32);\nv4i8 __builtin_mips_shra_r_qb (v4i8, i32);\nv2i16 __builtin_mips_shrl_ph (v2i16, imm0_15);\nv2i16 __builtin_mips_shrl_ph (v2i16, i32);\nv2i16 __builtin_mips_subu_ph (v2i16, v2i16);\nv2i16 __builtin_mips_subu_s_ph (v2i16, v2i16);\nv4i8 __builtin_mips_subuh_qb (v4i8, v4i8);\nv4i8 __builtin_mips_subuh_r_qb (v4i8, v4i8);\nv2q15 __builtin_mips_addqh_ph (v2q15, v2q15);\nv2q15 __builtin_mips_addqh_r_ph (v2q15, v2q15);\nq31 __builtin_mips_addqh_w (q31, q31);\nq31 __builtin_mips_addqh_r_w (q31, q31);\nv2q15 __builtin_mips_subqh_ph (v2q15, v2q15);\nv2q15 __builtin_mips_subqh_r_ph (v2q15, v2q15);\nq31 __builtin_mips_subqh_w (q31, q31);\nq31 __builtin_mips_subqh_r_w (q31, q31);\na64 __builtin_mips_dpax_w_ph (a64, v2i16, v2i16);\na64 __builtin_mips_dpsx_w_ph (a64, v2i16, v2i16);\na64 __builtin_mips_dpaqx_s_w_ph (a64, v2q15, v2q15);\na64 __builtin_mips_dpaqx_sa_w_ph (a64, v2q15, v2q15);\na64 __builtin_mips_dpsqx_s_w_ph (a64, v2q15, v2q15);\na64 __builtin_mips_dpsqx_sa_w_ph (a64, v2q15, v2q15);</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS-DSP-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS-DSP-Built_002din-Functions.html</a>\n  </p>\n</div>\n","mips-paired_002dsingle-support":"<h1 class=\"subsection\" id=\"MIPS-Paired_002dSingle-Support\">6.57.14 MIPS Paired-Single Support</h1> <p>The MIPS64 architecture includes a number of instructions that operate on pairs of single-precision floating-point values. Each pair is packed into a 64-bit floating-point register, with one element being designated the “upper half” and the other being designated the “lower half”. </p>\n<p>GCC supports paired-single operations using both the generic vector extensions (see <a href=\"vector-extensions#Vector-Extensions\">Vector Extensions</a>) and a collection of MIPS-specific built-in functions. Both kinds of support are enabled by the <code>-mpaired-single</code> command-line option. </p>\n<p>The vector type associated with paired-single values is usually called <code>v2sf</code>. It can be defined in C as follows: </p>\n<pre class=\"smallexample\">typedef float v2sf __attribute__ ((vector_size (8)));</pre> <p><code>v2sf</code> values are initialized in the same way as aggregates. For example: </p>\n<pre class=\"smallexample\">v2sf a = {1.5, 9.1};\nv2sf b;\nfloat e, f;\nb = (v2sf) {e, f};</pre> <p><em>Note:</em> The CPU's endianness determines which value is stored in the upper half of a register and which value is stored in the lower half. On little-endian targets, the first value is the lower one and the second value is the upper one. The opposite order applies to big-endian targets. For example, the code above sets the lower half of <code>a</code> to <code>1.5</code> on little-endian targets and <code>9.1</code> on big-endian targets. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS-Paired_002dSingle-Support.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS-Paired_002dSingle-Support.html</a>\n  </p>\n</div>\n","mips-loongson-built_002din-functions":"<h1 class=\"subsection\" id=\"MIPS-Loongson-Built_002din-Functions\">6.57.15 MIPS Loongson Built-in Functions</h1> <p>GCC provides intrinsics to access the SIMD instructions provided by the ST Microelectronics Loongson-2E and -2F processors. These intrinsics, available after inclusion of the <code>loongson.h</code> header file, operate on the following 64-bit vector types: </p>\n<ul> <li>\n<code>uint8x8_t</code>, a vector of eight unsigned 8-bit integers; </li>\n<li>\n<code>uint16x4_t</code>, a vector of four unsigned 16-bit integers; </li>\n<li>\n<code>uint32x2_t</code>, a vector of two unsigned 32-bit integers; </li>\n<li>\n<code>int8x8_t</code>, a vector of eight signed 8-bit integers; </li>\n<li>\n<code>int16x4_t</code>, a vector of four signed 16-bit integers; </li>\n<li>\n<code>int32x2_t</code>, a vector of two signed 32-bit integers. </li>\n</ul> <p>The intrinsics provided are listed below; each is named after the machine instruction to which it corresponds, with suffixes added as appropriate to distinguish intrinsics that expand to the same machine instruction yet have different argument types. Refer to the architecture documentation for a description of the functionality of each instruction. </p>\n<pre class=\"smallexample\">int16x4_t packsswh (int32x2_t s, int32x2_t t);\nint8x8_t packsshb (int16x4_t s, int16x4_t t);\nuint8x8_t packushb (uint16x4_t s, uint16x4_t t);\nuint32x2_t paddw_u (uint32x2_t s, uint32x2_t t);\nuint16x4_t paddh_u (uint16x4_t s, uint16x4_t t);\nuint8x8_t paddb_u (uint8x8_t s, uint8x8_t t);\nint32x2_t paddw_s (int32x2_t s, int32x2_t t);\nint16x4_t paddh_s (int16x4_t s, int16x4_t t);\nint8x8_t paddb_s (int8x8_t s, int8x8_t t);\nuint64_t paddd_u (uint64_t s, uint64_t t);\nint64_t paddd_s (int64_t s, int64_t t);\nint16x4_t paddsh (int16x4_t s, int16x4_t t);\nint8x8_t paddsb (int8x8_t s, int8x8_t t);\nuint16x4_t paddush (uint16x4_t s, uint16x4_t t);\nuint8x8_t paddusb (uint8x8_t s, uint8x8_t t);\nuint64_t pandn_ud (uint64_t s, uint64_t t);\nuint32x2_t pandn_uw (uint32x2_t s, uint32x2_t t);\nuint16x4_t pandn_uh (uint16x4_t s, uint16x4_t t);\nuint8x8_t pandn_ub (uint8x8_t s, uint8x8_t t);\nint64_t pandn_sd (int64_t s, int64_t t);\nint32x2_t pandn_sw (int32x2_t s, int32x2_t t);\nint16x4_t pandn_sh (int16x4_t s, int16x4_t t);\nint8x8_t pandn_sb (int8x8_t s, int8x8_t t);\nuint16x4_t pavgh (uint16x4_t s, uint16x4_t t);\nuint8x8_t pavgb (uint8x8_t s, uint8x8_t t);\nuint32x2_t pcmpeqw_u (uint32x2_t s, uint32x2_t t);\nuint16x4_t pcmpeqh_u (uint16x4_t s, uint16x4_t t);\nuint8x8_t pcmpeqb_u (uint8x8_t s, uint8x8_t t);\nint32x2_t pcmpeqw_s (int32x2_t s, int32x2_t t);\nint16x4_t pcmpeqh_s (int16x4_t s, int16x4_t t);\nint8x8_t pcmpeqb_s (int8x8_t s, int8x8_t t);\nuint32x2_t pcmpgtw_u (uint32x2_t s, uint32x2_t t);\nuint16x4_t pcmpgth_u (uint16x4_t s, uint16x4_t t);\nuint8x8_t pcmpgtb_u (uint8x8_t s, uint8x8_t t);\nint32x2_t pcmpgtw_s (int32x2_t s, int32x2_t t);\nint16x4_t pcmpgth_s (int16x4_t s, int16x4_t t);\nint8x8_t pcmpgtb_s (int8x8_t s, int8x8_t t);\nuint16x4_t pextrh_u (uint16x4_t s, int field);\nint16x4_t pextrh_s (int16x4_t s, int field);\nuint16x4_t pinsrh_0_u (uint16x4_t s, uint16x4_t t);\nuint16x4_t pinsrh_1_u (uint16x4_t s, uint16x4_t t);\nuint16x4_t pinsrh_2_u (uint16x4_t s, uint16x4_t t);\nuint16x4_t pinsrh_3_u (uint16x4_t s, uint16x4_t t);\nint16x4_t pinsrh_0_s (int16x4_t s, int16x4_t t);\nint16x4_t pinsrh_1_s (int16x4_t s, int16x4_t t);\nint16x4_t pinsrh_2_s (int16x4_t s, int16x4_t t);\nint16x4_t pinsrh_3_s (int16x4_t s, int16x4_t t);\nint32x2_t pmaddhw (int16x4_t s, int16x4_t t);\nint16x4_t pmaxsh (int16x4_t s, int16x4_t t);\nuint8x8_t pmaxub (uint8x8_t s, uint8x8_t t);\nint16x4_t pminsh (int16x4_t s, int16x4_t t);\nuint8x8_t pminub (uint8x8_t s, uint8x8_t t);\nuint8x8_t pmovmskb_u (uint8x8_t s);\nint8x8_t pmovmskb_s (int8x8_t s);\nuint16x4_t pmulhuh (uint16x4_t s, uint16x4_t t);\nint16x4_t pmulhh (int16x4_t s, int16x4_t t);\nint16x4_t pmullh (int16x4_t s, int16x4_t t);\nint64_t pmuluw (uint32x2_t s, uint32x2_t t);\nuint8x8_t pasubub (uint8x8_t s, uint8x8_t t);\nuint16x4_t biadd (uint8x8_t s);\nuint16x4_t psadbh (uint8x8_t s, uint8x8_t t);\nuint16x4_t pshufh_u (uint16x4_t dest, uint16x4_t s, uint8_t order);\nint16x4_t pshufh_s (int16x4_t dest, int16x4_t s, uint8_t order);\nuint16x4_t psllh_u (uint16x4_t s, uint8_t amount);\nint16x4_t psllh_s (int16x4_t s, uint8_t amount);\nuint32x2_t psllw_u (uint32x2_t s, uint8_t amount);\nint32x2_t psllw_s (int32x2_t s, uint8_t amount);\nuint16x4_t psrlh_u (uint16x4_t s, uint8_t amount);\nint16x4_t psrlh_s (int16x4_t s, uint8_t amount);\nuint32x2_t psrlw_u (uint32x2_t s, uint8_t amount);\nint32x2_t psrlw_s (int32x2_t s, uint8_t amount);\nuint16x4_t psrah_u (uint16x4_t s, uint8_t amount);\nint16x4_t psrah_s (int16x4_t s, uint8_t amount);\nuint32x2_t psraw_u (uint32x2_t s, uint8_t amount);\nint32x2_t psraw_s (int32x2_t s, uint8_t amount);\nuint32x2_t psubw_u (uint32x2_t s, uint32x2_t t);\nuint16x4_t psubh_u (uint16x4_t s, uint16x4_t t);\nuint8x8_t psubb_u (uint8x8_t s, uint8x8_t t);\nint32x2_t psubw_s (int32x2_t s, int32x2_t t);\nint16x4_t psubh_s (int16x4_t s, int16x4_t t);\nint8x8_t psubb_s (int8x8_t s, int8x8_t t);\nuint64_t psubd_u (uint64_t s, uint64_t t);\nint64_t psubd_s (int64_t s, int64_t t);\nint16x4_t psubsh (int16x4_t s, int16x4_t t);\nint8x8_t psubsb (int8x8_t s, int8x8_t t);\nuint16x4_t psubush (uint16x4_t s, uint16x4_t t);\nuint8x8_t psubusb (uint8x8_t s, uint8x8_t t);\nuint32x2_t punpckhwd_u (uint32x2_t s, uint32x2_t t);\nuint16x4_t punpckhhw_u (uint16x4_t s, uint16x4_t t);\nuint8x8_t punpckhbh_u (uint8x8_t s, uint8x8_t t);\nint32x2_t punpckhwd_s (int32x2_t s, int32x2_t t);\nint16x4_t punpckhhw_s (int16x4_t s, int16x4_t t);\nint8x8_t punpckhbh_s (int8x8_t s, int8x8_t t);\nuint32x2_t punpcklwd_u (uint32x2_t s, uint32x2_t t);\nuint16x4_t punpcklhw_u (uint16x4_t s, uint16x4_t t);\nuint8x8_t punpcklbh_u (uint8x8_t s, uint8x8_t t);\nint32x2_t punpcklwd_s (int32x2_t s, int32x2_t t);\nint16x4_t punpcklhw_s (int16x4_t s, int16x4_t t);\nint8x8_t punpcklbh_s (int8x8_t s, int8x8_t t);</pre> <ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"paired_002dsingle-arithmetic#Paired_002dSingle-Arithmetic\">Paired-Single Arithmetic</a> </li>\n<li>\n<a accesskey=\"2\" href=\"paired_002dsingle-built_002din-functions#Paired_002dSingle-Built_002din-Functions\">Paired-Single Built-in Functions</a> </li>\n<li>\n<a accesskey=\"3\" href=\"mips_002d3d-built_002din-functions#MIPS_002d3D-Built_002din-Functions\">MIPS-3D Built-in Functions</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS-Loongson-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS-Loongson-Built_002din-Functions.html</a>\n  </p>\n</div>\n","paired_002dsingle-arithmetic":"<h1 class=\"subsubsection\" id=\"Paired_002dSingle-Arithmetic\">6.57.15.1 Paired-Single Arithmetic</h1> <p>The table below lists the <code>v2sf</code> operations for which hardware support exists. <code>a</code>, <code>b</code> and <code>c</code> are <code>v2sf</code> values and <code>x</code> is an integral value. </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">C code </td>\n<td valign=\"top\" width=\"50%\">MIPS instruction </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>a + b</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>add.ps</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>a - b</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>sub.ps</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>-a</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>neg.ps</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>a * b</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>mul.ps</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>a * b + c</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>madd.ps</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>a * b - c</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>msub.ps</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>-(a * b + c)</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>nmadd.ps</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>-(a * b - c)</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>nmsub.ps</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"50%\">\n<code>x ? a : b</code> </td>\n<td valign=\"top\" width=\"50%\">\n<code>movn.ps</code>/<code>movz.ps</code> </td>\n</tr>\n</table> <p>Note that the multiply-accumulate instructions can be disabled using the command-line option <code>-mno-fused-madd</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Paired_002dSingle-Arithmetic.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Paired_002dSingle-Arithmetic.html</a>\n  </p>\n</div>\n","paired_002dsingle-built_002din-functions":"<h1 class=\"subsubsection\" id=\"Paired_002dSingle-Built_002din-Functions\">6.57.15.2 Paired-Single Built-in Functions</h1> <p>The following paired-single functions map directly to a particular MIPS instruction. Please refer to the architecture specification for details on what each instruction does. </p>\n<dl> <dt><code>v2sf __builtin_mips_pll_ps (v2sf, v2sf)</code></dt>\n<dd>Pair lower lower (<code>pll.ps</code>). </dd>\n<dt><code>v2sf __builtin_mips_pul_ps (v2sf, v2sf)</code></dt>\n<dd>Pair upper lower (<code>pul.ps</code>). </dd>\n<dt><code>v2sf __builtin_mips_plu_ps (v2sf, v2sf)</code></dt>\n<dd>Pair lower upper (<code>plu.ps</code>). </dd>\n<dt><code>v2sf __builtin_mips_puu_ps (v2sf, v2sf)</code></dt>\n<dd>Pair upper upper (<code>puu.ps</code>). </dd>\n<dt><code>v2sf __builtin_mips_cvt_ps_s (float, float)</code></dt>\n<dd>Convert pair to paired single (<code>cvt.ps.s</code>). </dd>\n<dt><code>float __builtin_mips_cvt_s_pl (v2sf)</code></dt>\n<dd>Convert pair lower to single (<code>cvt.s.pl</code>). </dd>\n<dt><code>float __builtin_mips_cvt_s_pu (v2sf)</code></dt>\n<dd>Convert pair upper to single (<code>cvt.s.pu</code>). </dd>\n<dt><code>v2sf __builtin_mips_abs_ps (v2sf)</code></dt>\n<dd>Absolute value (<code>abs.ps</code>). </dd>\n<dt><code>v2sf __builtin_mips_alnv_ps (v2sf, v2sf, int)</code></dt>\n<dd>Align variable (<code>alnv.ps</code>). <p><em>Note:</em> The value of the third parameter must be 0 or 4 modulo 8, otherwise the result is unpredictable. Please read the instruction description for details. </p>\n</dd>\n</dl> <p>The following multi-instruction functions are also available. In each case, <var>cond</var> can be any of the 16 floating-point conditions: <code>f</code>, <code>un</code>, <code>eq</code>, <code>ueq</code>, <code>olt</code>, <code>ult</code>, <code>ole</code>, <code>ule</code>, <code>sf</code>, <code>ngle</code>, <code>seq</code>, <code>ngl</code>, <code>lt</code>, <code>nge</code>, <code>le</code> or <code>ngt</code>. </p>\n<dl> <dt>\n<code>v2sf __builtin_mips_movt_c_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>, v2sf </code><var>c</var><code>, v2sf </code><var>d</var><code>)</code><dt>\n<code>v2sf __builtin_mips_movf_c_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>, v2sf </code><var>c</var><code>, v2sf </code><var>d</var><code>)</code>\n</dt>\n</dt>\n<dd>Conditional move based on floating-point comparison (<code>c.</code><var>cond</var><code>.ps</code>, <code>movt.ps</code>/<code>movf.ps</code>). <p>The <code>movt</code> functions return the value <var>x</var> computed by: </p>\n<pre class=\"smallexample\">c.<var>cond</var>.ps <var>cc</var>,<var>a</var>,<var>b</var>\nmov.ps <var>x</var>,<var>c</var>\nmovt.ps <var>x</var>,<var>d</var>,<var>cc</var></pre> <p>The <code>movf</code> functions are similar but use <code>movf.ps</code> instead of <code>movt.ps</code>. </p>\n</dd>\n<dt>\n<code>int __builtin_mips_upper_c_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>)</code><dt>\n<code>int __builtin_mips_lower_c_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>)</code>\n</dt>\n</dt>\n<dd>Comparison of two paired-single values (<code>c.</code><var>cond</var><code>.ps</code>, <code>bc1t</code>/<code>bc1f</code>). <p>These functions compare <var>a</var> and <var>b</var> using <code>c.</code><var>cond</var><code>.ps</code> and return either the upper or lower half of the result. For example: </p>\n<pre class=\"smallexample\">v2sf a, b;\nif (__builtin_mips_upper_c_eq_ps (a, b))\n  upper_halves_are_equal ();\nelse\n  upper_halves_are_unequal ();\n\nif (__builtin_mips_lower_c_eq_ps (a, b))\n  lower_halves_are_equal ();\nelse\n  lower_halves_are_unequal ();</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Paired_002dSingle-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Paired_002dSingle-Built_002din-Functions.html</a>\n  </p>\n</div>\n","mips_002d3d-built_002din-functions":"<h1 class=\"subsubsection\" id=\"MIPS_002d3D-Built_002din-Functions\">6.57.15.3 MIPS-3D Built-in Functions</h1> <p>The MIPS-3D Application-Specific Extension (ASE) includes additional paired-single instructions that are designed to improve the performance of 3D graphics operations. Support for these instructions is controlled by the <code>-mips3d</code> command-line option. </p>\n<p>The functions listed below map directly to a particular MIPS-3D instruction. Please refer to the architecture specification for more details on what each instruction does. </p>\n<dl> <dt><code>v2sf __builtin_mips_addr_ps (v2sf, v2sf)</code></dt>\n<dd>Reduction add (<code>addr.ps</code>). </dd>\n<dt><code>v2sf __builtin_mips_mulr_ps (v2sf, v2sf)</code></dt>\n<dd>Reduction multiply (<code>mulr.ps</code>). </dd>\n<dt><code>v2sf __builtin_mips_cvt_pw_ps (v2sf)</code></dt>\n<dd>Convert paired single to paired word (<code>cvt.pw.ps</code>). </dd>\n<dt><code>v2sf __builtin_mips_cvt_ps_pw (v2sf)</code></dt>\n<dd>Convert paired word to paired single (<code>cvt.ps.pw</code>). </dd>\n<dt>\n<code>float __builtin_mips_recip1_s (float)</code><dt>\n<code>double __builtin_mips_recip1_d (double)</code><dt><code>v2sf __builtin_mips_recip1_ps (v2sf)</code></dt>\n</dt>\n</dt>\n<dd>Reduced-precision reciprocal (sequence step 1) (<code>recip1.</code><var>fmt</var>). </dd>\n<dt>\n<code>float __builtin_mips_recip2_s (float, float)</code><dt>\n<code>double __builtin_mips_recip2_d (double, double)</code><dt><code>v2sf __builtin_mips_recip2_ps (v2sf, v2sf)</code></dt>\n</dt>\n</dt>\n<dd>Reduced-precision reciprocal (sequence step 2) (<code>recip2.</code><var>fmt</var>). </dd>\n<dt>\n<code>float __builtin_mips_rsqrt1_s (float)</code><dt>\n<code>double __builtin_mips_rsqrt1_d (double)</code><dt><code>v2sf __builtin_mips_rsqrt1_ps (v2sf)</code></dt>\n</dt>\n</dt>\n<dd>Reduced-precision reciprocal square root (sequence step 1) (<code>rsqrt1.</code><var>fmt</var>). </dd>\n<dt>\n<code>float __builtin_mips_rsqrt2_s (float, float)</code><dt>\n<code>double __builtin_mips_rsqrt2_d (double, double)</code><dt><code>v2sf __builtin_mips_rsqrt2_ps (v2sf, v2sf)</code></dt>\n</dt>\n</dt>\n<dd>Reduced-precision reciprocal square root (sequence step 2) (<code>rsqrt2.</code><var>fmt</var>). </dd>\n</dl> <p>The following multi-instruction functions are also available. In each case, <var>cond</var> can be any of the 16 floating-point conditions: <code>f</code>, <code>un</code>, <code>eq</code>, <code>ueq</code>, <code>olt</code>, <code>ult</code>, <code>ole</code>, <code>ule</code>, <code>sf</code>, <code>ngle</code>, <code>seq</code>, <code>ngl</code>, <code>lt</code>, <code>nge</code>, <code>le</code> or <code>ngt</code>. </p>\n<dl> <dt>\n<code>int __builtin_mips_cabs_</code><var>cond</var><code>_s (float </code><var>a</var><code>, float </code><var>b</var><code>)</code><dt>\n<code>int __builtin_mips_cabs_</code><var>cond</var><code>_d (double </code><var>a</var><code>, double </code><var>b</var><code>)</code>\n</dt>\n</dt>\n<dd>Absolute comparison of two scalar values (<code>cabs.</code><var>cond</var><code>.</code><var>fmt</var>, <code>bc1t</code>/<code>bc1f</code>). <p>These functions compare <var>a</var> and <var>b</var> using <code>cabs.</code><var>cond</var><code>.s</code> or <code>cabs.</code><var>cond</var><code>.d</code> and return the result as a boolean value. For example: </p>\n<pre class=\"smallexample\">float a, b;\nif (__builtin_mips_cabs_eq_s (a, b))\n  true ();\nelse\n  false ();</pre> </dd>\n<dt>\n<code>int __builtin_mips_upper_cabs_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>)</code><dt>\n<code>int __builtin_mips_lower_cabs_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>)</code>\n</dt>\n</dt>\n<dd>Absolute comparison of two paired-single values (<code>cabs.</code><var>cond</var><code>.ps</code>, <code>bc1t</code>/<code>bc1f</code>). <p>These functions compare <var>a</var> and <var>b</var> using <code>cabs.</code><var>cond</var><code>.ps</code> and return either the upper or lower half of the result. For example: </p>\n<pre class=\"smallexample\">v2sf a, b;\nif (__builtin_mips_upper_cabs_eq_ps (a, b))\n  upper_halves_are_equal ();\nelse\n  upper_halves_are_unequal ();\n\nif (__builtin_mips_lower_cabs_eq_ps (a, b))\n  lower_halves_are_equal ();\nelse\n  lower_halves_are_unequal ();</pre> </dd>\n<dt>\n<code>v2sf __builtin_mips_movt_cabs_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>, v2sf </code><var>c</var><code>, v2sf </code><var>d</var><code>)</code><dt>\n<code>v2sf __builtin_mips_movf_cabs_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>, v2sf </code><var>c</var><code>, v2sf </code><var>d</var><code>)</code>\n</dt>\n</dt>\n<dd>Conditional move based on absolute comparison (<code>cabs.</code><var>cond</var><code>.ps</code>, <code>movt.ps</code>/<code>movf.ps</code>). <p>The <code>movt</code> functions return the value <var>x</var> computed by: </p>\n<pre class=\"smallexample\">cabs.<var>cond</var>.ps <var>cc</var>,<var>a</var>,<var>b</var>\nmov.ps <var>x</var>,<var>c</var>\nmovt.ps <var>x</var>,<var>d</var>,<var>cc</var></pre> <p>The <code>movf</code> functions are similar but use <code>movf.ps</code> instead of <code>movt.ps</code>. </p>\n</dd>\n<dt>\n<code>int __builtin_mips_any_c_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>)</code><dt>\n<code>int __builtin_mips_all_c_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>)</code><dt>\n<code>int __builtin_mips_any_cabs_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>)</code><dt>\n<code>int __builtin_mips_all_cabs_</code><var>cond</var><code>_ps (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>)</code>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Comparison of two paired-single values (<code>c.</code><var>cond</var><code>.ps</code>/<code>cabs.</code><var>cond</var><code>.ps</code>, <code>bc1any2t</code>/<code>bc1any2f</code>). <p>These functions compare <var>a</var> and <var>b</var> using <code>c.</code><var>cond</var><code>.ps</code> or <code>cabs.</code><var>cond</var><code>.ps</code>. The <code>any</code> forms return true if either result is true and the <code>all</code> forms return true if both results are true. For example: </p>\n<pre class=\"smallexample\">v2sf a, b;\nif (__builtin_mips_any_c_eq_ps (a, b))\n  one_is_true ();\nelse\n  both_are_false ();\n\nif (__builtin_mips_all_c_eq_ps (a, b))\n  both_are_true ();\nelse\n  one_is_false ();</pre> </dd>\n<dt>\n<code>int __builtin_mips_any_c_</code><var>cond</var><code>_4s (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>, v2sf </code><var>c</var><code>, v2sf </code><var>d</var><code>)</code><dt>\n<code>int __builtin_mips_all_c_</code><var>cond</var><code>_4s (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>, v2sf </code><var>c</var><code>, v2sf </code><var>d</var><code>)</code><dt>\n<code>int __builtin_mips_any_cabs_</code><var>cond</var><code>_4s (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>, v2sf </code><var>c</var><code>, v2sf </code><var>d</var><code>)</code><dt>\n<code>int __builtin_mips_all_cabs_</code><var>cond</var><code>_4s (v2sf </code><var>a</var><code>, v2sf </code><var>b</var><code>, v2sf </code><var>c</var><code>, v2sf </code><var>d</var><code>)</code>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Comparison of four paired-single values (<code>c.</code><var>cond</var><code>.ps</code>/<code>cabs.</code><var>cond</var><code>.ps</code>, <code>bc1any4t</code>/<code>bc1any4f</code>). <p>These functions use <code>c.</code><var>cond</var><code>.ps</code> or <code>cabs.</code><var>cond</var><code>.ps</code> to compare <var>a</var> with <var>b</var> and to compare <var>c</var> with <var>d</var>. The <code>any</code> forms return true if any of the four results are true and the <code>all</code> forms return true if all four results are true. For example: </p>\n<pre class=\"smallexample\">v2sf a, b, c, d;\nif (__builtin_mips_any_c_eq_4s (a, b, c, d))\n  some_are_true ();\nelse\n  all_are_false ();\n\nif (__builtin_mips_all_c_eq_4s (a, b, c, d))\n  all_are_true ();\nelse\n  some_are_false ();</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS_002d3D-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MIPS_002d3D-Built_002din-Functions.html</a>\n  </p>\n</div>\n","other-mips-built_002din-functions":"<h1 class=\"subsection\" id=\"Other-MIPS-Built_002din-Functions\">6.57.16 Other MIPS Built-in Functions</h1> <p>GCC provides other MIPS-specific built-in functions: </p>\n<dl> <dt>\n<code>void __builtin_mips_cache (int </code><var>op</var><code>, const volatile void *</code><var>addr</var><code>)</code>\n</dt>\n<dd>Insert a ‘<code>cache</code>’ instruction with operands <var>op</var> and <var>addr</var>. GCC defines the preprocessor macro <code>___GCC_HAVE_BUILTIN_MIPS_CACHE</code> when this function is available. </dd>\n<dt>\n<code>unsigned int __builtin_mips_get_fcsr (void)</code><dt>\n<code>void __builtin_mips_set_fcsr (unsigned int </code><var>value</var><code>)</code>\n</dt>\n</dt>\n<dd>Get and set the contents of the floating-point control and status register (FPU control register 31). These functions are only available in hard-float code but can be called in both MIPS16 and non-MIPS16 contexts. <p><code>__builtin_mips_set_fcsr</code> can be used to change any bit of the register except the condition codes, which GCC assumes are preserved. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Other-MIPS-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Other-MIPS-Built_002din-Functions.html</a>\n  </p>\n</div>\n","msp430-built_002din-functions":"<h1 class=\"subsection\" id=\"MSP430-Built_002din-Functions\">6.57.17 MSP430 Built-in Functions</h1> <p>GCC provides a couple of special builtin functions to aid in the writing of interrupt handlers in C. </p>\n<dl> <dt>\n<code>__bic_SR_register_on_exit (int </code><var>mask</var><code>)</code>\n</dt>\n<dd>This clears the indicated bits in the saved copy of the status register currently residing on the stack. This only works inside interrupt handlers and the changes to the status register will only take affect once the handler returns. </dd>\n<dt>\n<code>__bis_SR_register_on_exit (int </code><var>mask</var><code>)</code>\n</dt>\n<dd>This sets the indicated bits in the saved copy of the status register currently residing on the stack. This only works inside interrupt handlers and the changes to the status register will only take affect once the handler returns. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MSP430-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MSP430-Built_002din-Functions.html</a>\n  </p>\n</div>\n","nds32-built_002din-functions":"<h1 class=\"subsection\" id=\"NDS32-Built_002din-Functions\">6.57.18 NDS32 Built-in Functions</h1> <p>These built-in functions are available for the NDS32 target: </p>\n<div class=\"defun\"> — Built-in Function: void <b>__builtin_nds32_isync</b> (<var>int *addr</var>) <blockquote><p>Insert an ISYNC instruction into the instruction stream where <var>addr</var> is an instruction address for serialization. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_nds32_isb</b> (<var>void</var>) <blockquote><p>Insert an ISB instruction into the instruction stream. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_nds32_mfsr</b> (<var>int sr</var>) <blockquote><p>Return the content of a system register which is mapped by <var>sr</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_nds32_mfusr</b> (<var>int usr</var>) <blockquote><p>Return the content of a user space register which is mapped by <var>usr</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_nds32_mtsr</b> (<var>int value, int sr</var>) <blockquote><p>Move the <var>value</var> to a system register which is mapped by <var>sr</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_nds32_mtusr</b> (<var>int value, int usr</var>) <blockquote><p>Move the <var>value</var> to a user space register which is mapped by <var>usr</var>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_nds32_setgie_en</b> (<var>void</var>) <blockquote><p>Enable global interrupt. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_nds32_setgie_dis</b> (<var>void</var>) <blockquote><p>Disable global interrupt. </p></blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/NDS32-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/NDS32-Built_002din-Functions.html</a>\n  </p>\n</div>\n","picochip-built_002din-functions":"<h1 class=\"subsection\" id=\"picoChip-Built_002din-Functions\">6.57.19 picoChip Built-in Functions</h1> <p>GCC provides an interface to selected machine instructions from the picoChip instruction set. </p>\n<dl> <dt>\n<code>int __builtin_sbc (int </code><var>value</var><code>)</code>\n</dt>\n<dd>Sign bit count. Return the number of consecutive bits in <var>value</var> that have the same value as the sign bit. The result is the number of leading sign bits minus one, giving the number of redundant sign bits in <var>value</var>. </dd>\n<dt>\n<code>int __builtin_byteswap (int </code><var>value</var><code>)</code>\n</dt>\n<dd>Byte swap. Return the result of swapping the upper and lower bytes of <var>value</var>. </dd>\n<dt>\n<code>int __builtin_brev (int </code><var>value</var><code>)</code>\n</dt>\n<dd>Bit reversal. Return the result of reversing the bits in <var>value</var>. Bit 15 is swapped with bit 0, bit 14 is swapped with bit 1, and so on. </dd>\n<dt>\n<code>int __builtin_adds (int </code><var>x</var><code>, int </code><var>y</var><code>)</code>\n</dt>\n<dd>Saturating addition. Return the result of adding <var>x</var> and <var>y</var>, storing the value 32767 if the result overflows. </dd>\n<dt>\n<code>int __builtin_subs (int </code><var>x</var><code>, int </code><var>y</var><code>)</code>\n</dt>\n<dd>Saturating subtraction. Return the result of subtracting <var>y</var> from <var>x</var>, storing the value −32768 if the result overflows. </dd>\n<dt><code>void __builtin_halt (void)</code></dt>\n<dd>Halt. The processor stops execution. This built-in is useful for implementing assertions. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/picoChip-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/picoChip-Built_002din-Functions.html</a>\n  </p>\n</div>\n","powerpc-built_002din-functions":"<h1 class=\"subsection\" id=\"PowerPC-Built_002din-Functions\">6.57.20 PowerPC Built-in Functions</h1> <p>These built-in functions are available for the PowerPC family of processors: </p>\n<pre class=\"smallexample\">float __builtin_recipdivf (float, float);\nfloat __builtin_rsqrtf (float);\ndouble __builtin_recipdiv (double, double);\ndouble __builtin_rsqrt (double);\nuint64_t __builtin_ppc_get_timebase ();\nunsigned long __builtin_ppc_mftb ();\ndouble __builtin_unpack_longdouble (long double, int);\nlong double __builtin_pack_longdouble (double, double);</pre> <p>The <code>vec_rsqrt</code>, <code>__builtin_rsqrt</code>, and <code>__builtin_rsqrtf</code> functions generate multiple instructions to implement the reciprocal sqrt functionality using reciprocal sqrt estimate instructions. </p>\n<p>The <code>__builtin_recipdiv</code>, and <code>__builtin_recipdivf</code> functions generate multiple instructions to implement division using the reciprocal estimate instructions. </p>\n<p>The <code>__builtin_ppc_get_timebase</code> and <code>__builtin_ppc_mftb</code> functions generate instructions to read the Time Base Register. The <code>__builtin_ppc_get_timebase</code> function may generate multiple instructions and always returns the 64 bits of the Time Base Register. The <code>__builtin_ppc_mftb</code> function always generates one instruction and returns the Time Base Register value as an unsigned long, throwing away the most significant word on 32-bit environments. </p>\n<p>The following built-in functions are available for the PowerPC family of processors, starting with ISA 2.06 or later (<code>-mcpu=power7</code> or <code>-mpopcntd</code>): </p>\n<pre class=\"smallexample\">long __builtin_bpermd (long, long);\nint __builtin_divwe (int, int);\nint __builtin_divweo (int, int);\nunsigned int __builtin_divweu (unsigned int, unsigned int);\nunsigned int __builtin_divweuo (unsigned int, unsigned int);\nlong __builtin_divde (long, long);\nlong __builtin_divdeo (long, long);\nunsigned long __builtin_divdeu (unsigned long, unsigned long);\nunsigned long __builtin_divdeuo (unsigned long, unsigned long);\nunsigned int cdtbcd (unsigned int);\nunsigned int cbcdtd (unsigned int);\nunsigned int addg6s (unsigned int, unsigned int);</pre> <p>The <code>__builtin_divde</code>, <code>__builtin_divdeo</code>, <code>__builitin_divdeu</code>, <code>__builtin_divdeou</code> functions require a 64-bit environment support ISA 2.06 or later. </p>\n<p>The following built-in functions are available for the PowerPC family of processors when hardware decimal floating point (<code>-mhard-dfp</code>) is available: </p>\n<pre class=\"smallexample\">_Decimal64 __builtin_dxex (_Decimal64);\n_Decimal128 __builtin_dxexq (_Decimal128);\n_Decimal64 __builtin_ddedpd (int, _Decimal64);\n_Decimal128 __builtin_ddedpdq (int, _Decimal128);\n_Decimal64 __builtin_denbcd (int, _Decimal64);\n_Decimal128 __builtin_denbcdq (int, _Decimal128);\n_Decimal64 __builtin_diex (_Decimal64, _Decimal64);\n_Decimal128 _builtin_diexq (_Decimal128, _Decimal128);\n_Decimal64 __builtin_dscli (_Decimal64, int);\n_Decimal128 __builitn_dscliq (_Decimal128, int);\n_Decimal64 __builtin_dscri (_Decimal64, int);\n_Decimal128 __builitn_dscriq (_Decimal128, int);\nunsigned long long __builtin_unpack_dec128 (_Decimal128, int);\n_Decimal128 __builtin_pack_dec128 (unsigned long long, unsigned long long);</pre> <p>The following built-in functions are available for the PowerPC family of processors when the Vector Scalar (vsx) instruction set is available: </p>\n<pre class=\"smallexample\">unsigned long long __builtin_unpack_vector_int128 (vector __int128_t, int);\nvector __int128_t __builtin_pack_vector_int128 (unsigned long long,\n                                                unsigned long long);</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PowerPC-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PowerPC-Built_002din-Functions.html</a>\n  </p>\n</div>\n","powerpc-altivec_002fvsx-built_002din-functions":"<h1 class=\"subsection\" id=\"PowerPC-AltiVec_002fVSX-Built_002din-Functions\">6.57.21 PowerPC AltiVec Built-in Functions</h1> <p>GCC provides an interface for the PowerPC family of processors to access the AltiVec operations described in Motorola's AltiVec Programming Interface Manual. The interface is made available by including <code>&lt;altivec.h&gt;</code> and using <code>-maltivec</code> and <code>-mabi=altivec</code>. The interface supports the following vector types. </p>\n<pre class=\"smallexample\">vector unsigned char\nvector signed char\nvector bool char\n\nvector unsigned short\nvector signed short\nvector bool short\nvector pixel\n\nvector unsigned int\nvector signed int\nvector bool int\nvector float</pre> <p>If <code>-mvsx</code> is used the following additional vector types are implemented. </p>\n<pre class=\"smallexample\">vector unsigned long\nvector signed long\nvector double</pre> <p>The long types are only implemented for 64-bit code generation, and the long type is only used in the floating point/integer conversion instructions. </p>\n<p>GCC's implementation of the high-level language interface available from C and C++ code differs from Motorola's documentation in several ways. </p>\n<ul> <li>A vector constant is a list of constant expressions within curly braces. </li>\n<li>A vector initializer requires no cast if the vector constant is of the same type as the variable it is initializing. </li>\n<li>If <code>signed</code> or <code>unsigned</code> is omitted, the signedness of the vector type is the default signedness of the base type. The default varies depending on the operating system, so a portable program should always specify the signedness. </li>\n<li>Compiling with <code>-maltivec</code> adds keywords <code>__vector</code>, <code>vector</code>, <code>__pixel</code>, <code>pixel</code>, <code>__bool</code> and <code>bool</code>. When compiling ISO C, the context-sensitive substitution of the keywords <code>vector</code>, <code>pixel</code> and <code>bool</code> is disabled. To use them, you must include <code>&lt;altivec.h&gt;</code> instead. </li>\n<li>GCC allows using a <code>typedef</code> name as the type specifier for a vector type. </li>\n<li>For C, overloaded functions are implemented with macros so the following does not work: <pre class=\"smallexample\">vec_add ((vector signed int){1, 2, 3, 4}, foo);</pre> <p class=\"noindent\">Since <code>vec_add</code> is a macro, the vector constant in the example is treated as four separate arguments. Wrap the entire argument in parentheses for this to work. </p>\n</li>\n</ul> <p><em>Note:</em> Only the <code>&lt;altivec.h&gt;</code> interface is supported. Internally, GCC uses built-in functions to achieve the functionality in the aforementioned header file, but they are not supported and are subject to change without notice. </p>\n<p>The following interfaces are supported for the generic and specific AltiVec operations and the AltiVec predicates. In cases where there is a direct mapping between generic and specific operations, only the generic names are shown here, although the specific operations can also be used. </p>\n<p>Arguments that are documented as <code>const int</code> require literal integral values within the range required for that operation. </p>\n<pre class=\"smallexample\">vector signed char vec_abs (vector signed char);\nvector signed short vec_abs (vector signed short);\nvector signed int vec_abs (vector signed int);\nvector float vec_abs (vector float);\n\nvector signed char vec_abss (vector signed char);\nvector signed short vec_abss (vector signed short);\nvector signed int vec_abss (vector signed int);\n\nvector signed char vec_add (vector bool char, vector signed char);\nvector signed char vec_add (vector signed char, vector bool char);\nvector signed char vec_add (vector signed char, vector signed char);\nvector unsigned char vec_add (vector bool char, vector unsigned char);\nvector unsigned char vec_add (vector unsigned char, vector bool char);\nvector unsigned char vec_add (vector unsigned char,\n                              vector unsigned char);\nvector signed short vec_add (vector bool short, vector signed short);\nvector signed short vec_add (vector signed short, vector bool short);\nvector signed short vec_add (vector signed short, vector signed short);\nvector unsigned short vec_add (vector bool short,\n                               vector unsigned short);\nvector unsigned short vec_add (vector unsigned short,\n                               vector bool short);\nvector unsigned short vec_add (vector unsigned short,\n                               vector unsigned short);\nvector signed int vec_add (vector bool int, vector signed int);\nvector signed int vec_add (vector signed int, vector bool int);\nvector signed int vec_add (vector signed int, vector signed int);\nvector unsigned int vec_add (vector bool int, vector unsigned int);\nvector unsigned int vec_add (vector unsigned int, vector bool int);\nvector unsigned int vec_add (vector unsigned int, vector unsigned int);\nvector float vec_add (vector float, vector float);\n\nvector float vec_vaddfp (vector float, vector float);\n\nvector signed int vec_vadduwm (vector bool int, vector signed int);\nvector signed int vec_vadduwm (vector signed int, vector bool int);\nvector signed int vec_vadduwm (vector signed int, vector signed int);\nvector unsigned int vec_vadduwm (vector bool int, vector unsigned int);\nvector unsigned int vec_vadduwm (vector unsigned int, vector bool int);\nvector unsigned int vec_vadduwm (vector unsigned int,\n                                 vector unsigned int);\n\nvector signed short vec_vadduhm (vector bool short,\n                                 vector signed short);\nvector signed short vec_vadduhm (vector signed short,\n                                 vector bool short);\nvector signed short vec_vadduhm (vector signed short,\n                                 vector signed short);\nvector unsigned short vec_vadduhm (vector bool short,\n                                   vector unsigned short);\nvector unsigned short vec_vadduhm (vector unsigned short,\n                                   vector bool short);\nvector unsigned short vec_vadduhm (vector unsigned short,\n                                   vector unsigned short);\n\nvector signed char vec_vaddubm (vector bool char, vector signed char);\nvector signed char vec_vaddubm (vector signed char, vector bool char);\nvector signed char vec_vaddubm (vector signed char, vector signed char);\nvector unsigned char vec_vaddubm (vector bool char,\n                                  vector unsigned char);\nvector unsigned char vec_vaddubm (vector unsigned char,\n                                  vector bool char);\nvector unsigned char vec_vaddubm (vector unsigned char,\n                                  vector unsigned char);\n\nvector unsigned int vec_addc (vector unsigned int, vector unsigned int);\n\nvector unsigned char vec_adds (vector bool char, vector unsigned char);\nvector unsigned char vec_adds (vector unsigned char, vector bool char);\nvector unsigned char vec_adds (vector unsigned char,\n                               vector unsigned char);\nvector signed char vec_adds (vector bool char, vector signed char);\nvector signed char vec_adds (vector signed char, vector bool char);\nvector signed char vec_adds (vector signed char, vector signed char);\nvector unsigned short vec_adds (vector bool short,\n                                vector unsigned short);\nvector unsigned short vec_adds (vector unsigned short,\n                                vector bool short);\nvector unsigned short vec_adds (vector unsigned short,\n                                vector unsigned short);\nvector signed short vec_adds (vector bool short, vector signed short);\nvector signed short vec_adds (vector signed short, vector bool short);\nvector signed short vec_adds (vector signed short, vector signed short);\nvector unsigned int vec_adds (vector bool int, vector unsigned int);\nvector unsigned int vec_adds (vector unsigned int, vector bool int);\nvector unsigned int vec_adds (vector unsigned int, vector unsigned int);\nvector signed int vec_adds (vector bool int, vector signed int);\nvector signed int vec_adds (vector signed int, vector bool int);\nvector signed int vec_adds (vector signed int, vector signed int);\n\nvector signed int vec_vaddsws (vector bool int, vector signed int);\nvector signed int vec_vaddsws (vector signed int, vector bool int);\nvector signed int vec_vaddsws (vector signed int, vector signed int);\n\nvector unsigned int vec_vadduws (vector bool int, vector unsigned int);\nvector unsigned int vec_vadduws (vector unsigned int, vector bool int);\nvector unsigned int vec_vadduws (vector unsigned int,\n                                 vector unsigned int);\n\nvector signed short vec_vaddshs (vector bool short,\n                                 vector signed short);\nvector signed short vec_vaddshs (vector signed short,\n                                 vector bool short);\nvector signed short vec_vaddshs (vector signed short,\n                                 vector signed short);\n\nvector unsigned short vec_vadduhs (vector bool short,\n                                   vector unsigned short);\nvector unsigned short vec_vadduhs (vector unsigned short,\n                                   vector bool short);\nvector unsigned short vec_vadduhs (vector unsigned short,\n                                   vector unsigned short);\n\nvector signed char vec_vaddsbs (vector bool char, vector signed char);\nvector signed char vec_vaddsbs (vector signed char, vector bool char);\nvector signed char vec_vaddsbs (vector signed char, vector signed char);\n\nvector unsigned char vec_vaddubs (vector bool char,\n                                  vector unsigned char);\nvector unsigned char vec_vaddubs (vector unsigned char,\n                                  vector bool char);\nvector unsigned char vec_vaddubs (vector unsigned char,\n                                  vector unsigned char);\n\nvector float vec_and (vector float, vector float);\nvector float vec_and (vector float, vector bool int);\nvector float vec_and (vector bool int, vector float);\nvector bool int vec_and (vector bool int, vector bool int);\nvector signed int vec_and (vector bool int, vector signed int);\nvector signed int vec_and (vector signed int, vector bool int);\nvector signed int vec_and (vector signed int, vector signed int);\nvector unsigned int vec_and (vector bool int, vector unsigned int);\nvector unsigned int vec_and (vector unsigned int, vector bool int);\nvector unsigned int vec_and (vector unsigned int, vector unsigned int);\nvector bool short vec_and (vector bool short, vector bool short);\nvector signed short vec_and (vector bool short, vector signed short);\nvector signed short vec_and (vector signed short, vector bool short);\nvector signed short vec_and (vector signed short, vector signed short);\nvector unsigned short vec_and (vector bool short,\n                               vector unsigned short);\nvector unsigned short vec_and (vector unsigned short,\n                               vector bool short);\nvector unsigned short vec_and (vector unsigned short,\n                               vector unsigned short);\nvector signed char vec_and (vector bool char, vector signed char);\nvector bool char vec_and (vector bool char, vector bool char);\nvector signed char vec_and (vector signed char, vector bool char);\nvector signed char vec_and (vector signed char, vector signed char);\nvector unsigned char vec_and (vector bool char, vector unsigned char);\nvector unsigned char vec_and (vector unsigned char, vector bool char);\nvector unsigned char vec_and (vector unsigned char,\n                              vector unsigned char);\n\nvector float vec_andc (vector float, vector float);\nvector float vec_andc (vector float, vector bool int);\nvector float vec_andc (vector bool int, vector float);\nvector bool int vec_andc (vector bool int, vector bool int);\nvector signed int vec_andc (vector bool int, vector signed int);\nvector signed int vec_andc (vector signed int, vector bool int);\nvector signed int vec_andc (vector signed int, vector signed int);\nvector unsigned int vec_andc (vector bool int, vector unsigned int);\nvector unsigned int vec_andc (vector unsigned int, vector bool int);\nvector unsigned int vec_andc (vector unsigned int, vector unsigned int);\nvector bool short vec_andc (vector bool short, vector bool short);\nvector signed short vec_andc (vector bool short, vector signed short);\nvector signed short vec_andc (vector signed short, vector bool short);\nvector signed short vec_andc (vector signed short, vector signed short);\nvector unsigned short vec_andc (vector bool short,\n                                vector unsigned short);\nvector unsigned short vec_andc (vector unsigned short,\n                                vector bool short);\nvector unsigned short vec_andc (vector unsigned short,\n                                vector unsigned short);\nvector signed char vec_andc (vector bool char, vector signed char);\nvector bool char vec_andc (vector bool char, vector bool char);\nvector signed char vec_andc (vector signed char, vector bool char);\nvector signed char vec_andc (vector signed char, vector signed char);\nvector unsigned char vec_andc (vector bool char, vector unsigned char);\nvector unsigned char vec_andc (vector unsigned char, vector bool char);\nvector unsigned char vec_andc (vector unsigned char,\n                               vector unsigned char);\n\nvector unsigned char vec_avg (vector unsigned char,\n                              vector unsigned char);\nvector signed char vec_avg (vector signed char, vector signed char);\nvector unsigned short vec_avg (vector unsigned short,\n                               vector unsigned short);\nvector signed short vec_avg (vector signed short, vector signed short);\nvector unsigned int vec_avg (vector unsigned int, vector unsigned int);\nvector signed int vec_avg (vector signed int, vector signed int);\n\nvector signed int vec_vavgsw (vector signed int, vector signed int);\n\nvector unsigned int vec_vavguw (vector unsigned int,\n                                vector unsigned int);\n\nvector signed short vec_vavgsh (vector signed short,\n                                vector signed short);\n\nvector unsigned short vec_vavguh (vector unsigned short,\n                                  vector unsigned short);\n\nvector signed char vec_vavgsb (vector signed char, vector signed char);\n\nvector unsigned char vec_vavgub (vector unsigned char,\n                                 vector unsigned char);\n\nvector float vec_copysign (vector float);\n\nvector float vec_ceil (vector float);\n\nvector signed int vec_cmpb (vector float, vector float);\n\nvector bool char vec_cmpeq (vector signed char, vector signed char);\nvector bool char vec_cmpeq (vector unsigned char, vector unsigned char);\nvector bool short vec_cmpeq (vector signed short, vector signed short);\nvector bool short vec_cmpeq (vector unsigned short,\n                             vector unsigned short);\nvector bool int vec_cmpeq (vector signed int, vector signed int);\nvector bool int vec_cmpeq (vector unsigned int, vector unsigned int);\nvector bool int vec_cmpeq (vector float, vector float);\n\nvector bool int vec_vcmpeqfp (vector float, vector float);\n\nvector bool int vec_vcmpequw (vector signed int, vector signed int);\nvector bool int vec_vcmpequw (vector unsigned int, vector unsigned int);\n\nvector bool short vec_vcmpequh (vector signed short,\n                                vector signed short);\nvector bool short vec_vcmpequh (vector unsigned short,\n                                vector unsigned short);\n\nvector bool char vec_vcmpequb (vector signed char, vector signed char);\nvector bool char vec_vcmpequb (vector unsigned char,\n                               vector unsigned char);\n\nvector bool int vec_cmpge (vector float, vector float);\n\nvector bool char vec_cmpgt (vector unsigned char, vector unsigned char);\nvector bool char vec_cmpgt (vector signed char, vector signed char);\nvector bool short vec_cmpgt (vector unsigned short,\n                             vector unsigned short);\nvector bool short vec_cmpgt (vector signed short, vector signed short);\nvector bool int vec_cmpgt (vector unsigned int, vector unsigned int);\nvector bool int vec_cmpgt (vector signed int, vector signed int);\nvector bool int vec_cmpgt (vector float, vector float);\n\nvector bool int vec_vcmpgtfp (vector float, vector float);\n\nvector bool int vec_vcmpgtsw (vector signed int, vector signed int);\n\nvector bool int vec_vcmpgtuw (vector unsigned int, vector unsigned int);\n\nvector bool short vec_vcmpgtsh (vector signed short,\n                                vector signed short);\n\nvector bool short vec_vcmpgtuh (vector unsigned short,\n                                vector unsigned short);\n\nvector bool char vec_vcmpgtsb (vector signed char, vector signed char);\n\nvector bool char vec_vcmpgtub (vector unsigned char,\n                               vector unsigned char);\n\nvector bool int vec_cmple (vector float, vector float);\n\nvector bool char vec_cmplt (vector unsigned char, vector unsigned char);\nvector bool char vec_cmplt (vector signed char, vector signed char);\nvector bool short vec_cmplt (vector unsigned short,\n                             vector unsigned short);\nvector bool short vec_cmplt (vector signed short, vector signed short);\nvector bool int vec_cmplt (vector unsigned int, vector unsigned int);\nvector bool int vec_cmplt (vector signed int, vector signed int);\nvector bool int vec_cmplt (vector float, vector float);\n\nvector float vec_cpsgn (vector float, vector float);\n\nvector float vec_ctf (vector unsigned int, const int);\nvector float vec_ctf (vector signed int, const int);\nvector double vec_ctf (vector unsigned long, const int);\nvector double vec_ctf (vector signed long, const int);\n\nvector float vec_vcfsx (vector signed int, const int);\n\nvector float vec_vcfux (vector unsigned int, const int);\n\nvector signed int vec_cts (vector float, const int);\nvector signed long vec_cts (vector double, const int);\n\nvector unsigned int vec_ctu (vector float, const int);\nvector unsigned long vec_ctu (vector double, const int);\n\nvoid vec_dss (const int);\n\nvoid vec_dssall (void);\n\nvoid vec_dst (const vector unsigned char *, int, const int);\nvoid vec_dst (const vector signed char *, int, const int);\nvoid vec_dst (const vector bool char *, int, const int);\nvoid vec_dst (const vector unsigned short *, int, const int);\nvoid vec_dst (const vector signed short *, int, const int);\nvoid vec_dst (const vector bool short *, int, const int);\nvoid vec_dst (const vector pixel *, int, const int);\nvoid vec_dst (const vector unsigned int *, int, const int);\nvoid vec_dst (const vector signed int *, int, const int);\nvoid vec_dst (const vector bool int *, int, const int);\nvoid vec_dst (const vector float *, int, const int);\nvoid vec_dst (const unsigned char *, int, const int);\nvoid vec_dst (const signed char *, int, const int);\nvoid vec_dst (const unsigned short *, int, const int);\nvoid vec_dst (const short *, int, const int);\nvoid vec_dst (const unsigned int *, int, const int);\nvoid vec_dst (const int *, int, const int);\nvoid vec_dst (const unsigned long *, int, const int);\nvoid vec_dst (const long *, int, const int);\nvoid vec_dst (const float *, int, const int);\n\nvoid vec_dstst (const vector unsigned char *, int, const int);\nvoid vec_dstst (const vector signed char *, int, const int);\nvoid vec_dstst (const vector bool char *, int, const int);\nvoid vec_dstst (const vector unsigned short *, int, const int);\nvoid vec_dstst (const vector signed short *, int, const int);\nvoid vec_dstst (const vector bool short *, int, const int);\nvoid vec_dstst (const vector pixel *, int, const int);\nvoid vec_dstst (const vector unsigned int *, int, const int);\nvoid vec_dstst (const vector signed int *, int, const int);\nvoid vec_dstst (const vector bool int *, int, const int);\nvoid vec_dstst (const vector float *, int, const int);\nvoid vec_dstst (const unsigned char *, int, const int);\nvoid vec_dstst (const signed char *, int, const int);\nvoid vec_dstst (const unsigned short *, int, const int);\nvoid vec_dstst (const short *, int, const int);\nvoid vec_dstst (const unsigned int *, int, const int);\nvoid vec_dstst (const int *, int, const int);\nvoid vec_dstst (const unsigned long *, int, const int);\nvoid vec_dstst (const long *, int, const int);\nvoid vec_dstst (const float *, int, const int);\n\nvoid vec_dststt (const vector unsigned char *, int, const int);\nvoid vec_dststt (const vector signed char *, int, const int);\nvoid vec_dststt (const vector bool char *, int, const int);\nvoid vec_dststt (const vector unsigned short *, int, const int);\nvoid vec_dststt (const vector signed short *, int, const int);\nvoid vec_dststt (const vector bool short *, int, const int);\nvoid vec_dststt (const vector pixel *, int, const int);\nvoid vec_dststt (const vector unsigned int *, int, const int);\nvoid vec_dststt (const vector signed int *, int, const int);\nvoid vec_dststt (const vector bool int *, int, const int);\nvoid vec_dststt (const vector float *, int, const int);\nvoid vec_dststt (const unsigned char *, int, const int);\nvoid vec_dststt (const signed char *, int, const int);\nvoid vec_dststt (const unsigned short *, int, const int);\nvoid vec_dststt (const short *, int, const int);\nvoid vec_dststt (const unsigned int *, int, const int);\nvoid vec_dststt (const int *, int, const int);\nvoid vec_dststt (const unsigned long *, int, const int);\nvoid vec_dststt (const long *, int, const int);\nvoid vec_dststt (const float *, int, const int);\n\nvoid vec_dstt (const vector unsigned char *, int, const int);\nvoid vec_dstt (const vector signed char *, int, const int);\nvoid vec_dstt (const vector bool char *, int, const int);\nvoid vec_dstt (const vector unsigned short *, int, const int);\nvoid vec_dstt (const vector signed short *, int, const int);\nvoid vec_dstt (const vector bool short *, int, const int);\nvoid vec_dstt (const vector pixel *, int, const int);\nvoid vec_dstt (const vector unsigned int *, int, const int);\nvoid vec_dstt (const vector signed int *, int, const int);\nvoid vec_dstt (const vector bool int *, int, const int);\nvoid vec_dstt (const vector float *, int, const int);\nvoid vec_dstt (const unsigned char *, int, const int);\nvoid vec_dstt (const signed char *, int, const int);\nvoid vec_dstt (const unsigned short *, int, const int);\nvoid vec_dstt (const short *, int, const int);\nvoid vec_dstt (const unsigned int *, int, const int);\nvoid vec_dstt (const int *, int, const int);\nvoid vec_dstt (const unsigned long *, int, const int);\nvoid vec_dstt (const long *, int, const int);\nvoid vec_dstt (const float *, int, const int);\n\nvector float vec_expte (vector float);\n\nvector float vec_floor (vector float);\n\nvector float vec_ld (int, const vector float *);\nvector float vec_ld (int, const float *);\nvector bool int vec_ld (int, const vector bool int *);\nvector signed int vec_ld (int, const vector signed int *);\nvector signed int vec_ld (int, const int *);\nvector signed int vec_ld (int, const long *);\nvector unsigned int vec_ld (int, const vector unsigned int *);\nvector unsigned int vec_ld (int, const unsigned int *);\nvector unsigned int vec_ld (int, const unsigned long *);\nvector bool short vec_ld (int, const vector bool short *);\nvector pixel vec_ld (int, const vector pixel *);\nvector signed short vec_ld (int, const vector signed short *);\nvector signed short vec_ld (int, const short *);\nvector unsigned short vec_ld (int, const vector unsigned short *);\nvector unsigned short vec_ld (int, const unsigned short *);\nvector bool char vec_ld (int, const vector bool char *);\nvector signed char vec_ld (int, const vector signed char *);\nvector signed char vec_ld (int, const signed char *);\nvector unsigned char vec_ld (int, const vector unsigned char *);\nvector unsigned char vec_ld (int, const unsigned char *);\n\nvector signed char vec_lde (int, const signed char *);\nvector unsigned char vec_lde (int, const unsigned char *);\nvector signed short vec_lde (int, const short *);\nvector unsigned short vec_lde (int, const unsigned short *);\nvector float vec_lde (int, const float *);\nvector signed int vec_lde (int, const int *);\nvector unsigned int vec_lde (int, const unsigned int *);\nvector signed int vec_lde (int, const long *);\nvector unsigned int vec_lde (int, const unsigned long *);\n\nvector float vec_lvewx (int, float *);\nvector signed int vec_lvewx (int, int *);\nvector unsigned int vec_lvewx (int, unsigned int *);\nvector signed int vec_lvewx (int, long *);\nvector unsigned int vec_lvewx (int, unsigned long *);\n\nvector signed short vec_lvehx (int, short *);\nvector unsigned short vec_lvehx (int, unsigned short *);\n\nvector signed char vec_lvebx (int, char *);\nvector unsigned char vec_lvebx (int, unsigned char *);\n\nvector float vec_ldl (int, const vector float *);\nvector float vec_ldl (int, const float *);\nvector bool int vec_ldl (int, const vector bool int *);\nvector signed int vec_ldl (int, const vector signed int *);\nvector signed int vec_ldl (int, const int *);\nvector signed int vec_ldl (int, const long *);\nvector unsigned int vec_ldl (int, const vector unsigned int *);\nvector unsigned int vec_ldl (int, const unsigned int *);\nvector unsigned int vec_ldl (int, const unsigned long *);\nvector bool short vec_ldl (int, const vector bool short *);\nvector pixel vec_ldl (int, const vector pixel *);\nvector signed short vec_ldl (int, const vector signed short *);\nvector signed short vec_ldl (int, const short *);\nvector unsigned short vec_ldl (int, const vector unsigned short *);\nvector unsigned short vec_ldl (int, const unsigned short *);\nvector bool char vec_ldl (int, const vector bool char *);\nvector signed char vec_ldl (int, const vector signed char *);\nvector signed char vec_ldl (int, const signed char *);\nvector unsigned char vec_ldl (int, const vector unsigned char *);\nvector unsigned char vec_ldl (int, const unsigned char *);\n\nvector float vec_loge (vector float);\n\nvector unsigned char vec_lvsl (int, const volatile unsigned char *);\nvector unsigned char vec_lvsl (int, const volatile signed char *);\nvector unsigned char vec_lvsl (int, const volatile unsigned short *);\nvector unsigned char vec_lvsl (int, const volatile short *);\nvector unsigned char vec_lvsl (int, const volatile unsigned int *);\nvector unsigned char vec_lvsl (int, const volatile int *);\nvector unsigned char vec_lvsl (int, const volatile unsigned long *);\nvector unsigned char vec_lvsl (int, const volatile long *);\nvector unsigned char vec_lvsl (int, const volatile float *);\n\nvector unsigned char vec_lvsr (int, const volatile unsigned char *);\nvector unsigned char vec_lvsr (int, const volatile signed char *);\nvector unsigned char vec_lvsr (int, const volatile unsigned short *);\nvector unsigned char vec_lvsr (int, const volatile short *);\nvector unsigned char vec_lvsr (int, const volatile unsigned int *);\nvector unsigned char vec_lvsr (int, const volatile int *);\nvector unsigned char vec_lvsr (int, const volatile unsigned long *);\nvector unsigned char vec_lvsr (int, const volatile long *);\nvector unsigned char vec_lvsr (int, const volatile float *);\n\nvector float vec_madd (vector float, vector float, vector float);\n\nvector signed short vec_madds (vector signed short,\n                               vector signed short,\n                               vector signed short);\n\nvector unsigned char vec_max (vector bool char, vector unsigned char);\nvector unsigned char vec_max (vector unsigned char, vector bool char);\nvector unsigned char vec_max (vector unsigned char,\n                              vector unsigned char);\nvector signed char vec_max (vector bool char, vector signed char);\nvector signed char vec_max (vector signed char, vector bool char);\nvector signed char vec_max (vector signed char, vector signed char);\nvector unsigned short vec_max (vector bool short,\n                               vector unsigned short);\nvector unsigned short vec_max (vector unsigned short,\n                               vector bool short);\nvector unsigned short vec_max (vector unsigned short,\n                               vector unsigned short);\nvector signed short vec_max (vector bool short, vector signed short);\nvector signed short vec_max (vector signed short, vector bool short);\nvector signed short vec_max (vector signed short, vector signed short);\nvector unsigned int vec_max (vector bool int, vector unsigned int);\nvector unsigned int vec_max (vector unsigned int, vector bool int);\nvector unsigned int vec_max (vector unsigned int, vector unsigned int);\nvector signed int vec_max (vector bool int, vector signed int);\nvector signed int vec_max (vector signed int, vector bool int);\nvector signed int vec_max (vector signed int, vector signed int);\nvector float vec_max (vector float, vector float);\n\nvector float vec_vmaxfp (vector float, vector float);\n\nvector signed int vec_vmaxsw (vector bool int, vector signed int);\nvector signed int vec_vmaxsw (vector signed int, vector bool int);\nvector signed int vec_vmaxsw (vector signed int, vector signed int);\n\nvector unsigned int vec_vmaxuw (vector bool int, vector unsigned int);\nvector unsigned int vec_vmaxuw (vector unsigned int, vector bool int);\nvector unsigned int vec_vmaxuw (vector unsigned int,\n                                vector unsigned int);\n\nvector signed short vec_vmaxsh (vector bool short, vector signed short);\nvector signed short vec_vmaxsh (vector signed short, vector bool short);\nvector signed short vec_vmaxsh (vector signed short,\n                                vector signed short);\n\nvector unsigned short vec_vmaxuh (vector bool short,\n                                  vector unsigned short);\nvector unsigned short vec_vmaxuh (vector unsigned short,\n                                  vector bool short);\nvector unsigned short vec_vmaxuh (vector unsigned short,\n                                  vector unsigned short);\n\nvector signed char vec_vmaxsb (vector bool char, vector signed char);\nvector signed char vec_vmaxsb (vector signed char, vector bool char);\nvector signed char vec_vmaxsb (vector signed char, vector signed char);\n\nvector unsigned char vec_vmaxub (vector bool char,\n                                 vector unsigned char);\nvector unsigned char vec_vmaxub (vector unsigned char,\n                                 vector bool char);\nvector unsigned char vec_vmaxub (vector unsigned char,\n                                 vector unsigned char);\n\nvector bool char vec_mergeh (vector bool char, vector bool char);\nvector signed char vec_mergeh (vector signed char, vector signed char);\nvector unsigned char vec_mergeh (vector unsigned char,\n                                 vector unsigned char);\nvector bool short vec_mergeh (vector bool short, vector bool short);\nvector pixel vec_mergeh (vector pixel, vector pixel);\nvector signed short vec_mergeh (vector signed short,\n                                vector signed short);\nvector unsigned short vec_mergeh (vector unsigned short,\n                                  vector unsigned short);\nvector float vec_mergeh (vector float, vector float);\nvector bool int vec_mergeh (vector bool int, vector bool int);\nvector signed int vec_mergeh (vector signed int, vector signed int);\nvector unsigned int vec_mergeh (vector unsigned int,\n                                vector unsigned int);\n\nvector float vec_vmrghw (vector float, vector float);\nvector bool int vec_vmrghw (vector bool int, vector bool int);\nvector signed int vec_vmrghw (vector signed int, vector signed int);\nvector unsigned int vec_vmrghw (vector unsigned int,\n                                vector unsigned int);\n\nvector bool short vec_vmrghh (vector bool short, vector bool short);\nvector signed short vec_vmrghh (vector signed short,\n                                vector signed short);\nvector unsigned short vec_vmrghh (vector unsigned short,\n                                  vector unsigned short);\nvector pixel vec_vmrghh (vector pixel, vector pixel);\n\nvector bool char vec_vmrghb (vector bool char, vector bool char);\nvector signed char vec_vmrghb (vector signed char, vector signed char);\nvector unsigned char vec_vmrghb (vector unsigned char,\n                                 vector unsigned char);\n\nvector bool char vec_mergel (vector bool char, vector bool char);\nvector signed char vec_mergel (vector signed char, vector signed char);\nvector unsigned char vec_mergel (vector unsigned char,\n                                 vector unsigned char);\nvector bool short vec_mergel (vector bool short, vector bool short);\nvector pixel vec_mergel (vector pixel, vector pixel);\nvector signed short vec_mergel (vector signed short,\n                                vector signed short);\nvector unsigned short vec_mergel (vector unsigned short,\n                                  vector unsigned short);\nvector float vec_mergel (vector float, vector float);\nvector bool int vec_mergel (vector bool int, vector bool int);\nvector signed int vec_mergel (vector signed int, vector signed int);\nvector unsigned int vec_mergel (vector unsigned int,\n                                vector unsigned int);\n\nvector float vec_vmrglw (vector float, vector float);\nvector signed int vec_vmrglw (vector signed int, vector signed int);\nvector unsigned int vec_vmrglw (vector unsigned int,\n                                vector unsigned int);\nvector bool int vec_vmrglw (vector bool int, vector bool int);\n\nvector bool short vec_vmrglh (vector bool short, vector bool short);\nvector signed short vec_vmrglh (vector signed short,\n                                vector signed short);\nvector unsigned short vec_vmrglh (vector unsigned short,\n                                  vector unsigned short);\nvector pixel vec_vmrglh (vector pixel, vector pixel);\n\nvector bool char vec_vmrglb (vector bool char, vector bool char);\nvector signed char vec_vmrglb (vector signed char, vector signed char);\nvector unsigned char vec_vmrglb (vector unsigned char,\n                                 vector unsigned char);\n\nvector unsigned short vec_mfvscr (void);\n\nvector unsigned char vec_min (vector bool char, vector unsigned char);\nvector unsigned char vec_min (vector unsigned char, vector bool char);\nvector unsigned char vec_min (vector unsigned char,\n                              vector unsigned char);\nvector signed char vec_min (vector bool char, vector signed char);\nvector signed char vec_min (vector signed char, vector bool char);\nvector signed char vec_min (vector signed char, vector signed char);\nvector unsigned short vec_min (vector bool short,\n                               vector unsigned short);\nvector unsigned short vec_min (vector unsigned short,\n                               vector bool short);\nvector unsigned short vec_min (vector unsigned short,\n                               vector unsigned short);\nvector signed short vec_min (vector bool short, vector signed short);\nvector signed short vec_min (vector signed short, vector bool short);\nvector signed short vec_min (vector signed short, vector signed short);\nvector unsigned int vec_min (vector bool int, vector unsigned int);\nvector unsigned int vec_min (vector unsigned int, vector bool int);\nvector unsigned int vec_min (vector unsigned int, vector unsigned int);\nvector signed int vec_min (vector bool int, vector signed int);\nvector signed int vec_min (vector signed int, vector bool int);\nvector signed int vec_min (vector signed int, vector signed int);\nvector float vec_min (vector float, vector float);\n\nvector float vec_vminfp (vector float, vector float);\n\nvector signed int vec_vminsw (vector bool int, vector signed int);\nvector signed int vec_vminsw (vector signed int, vector bool int);\nvector signed int vec_vminsw (vector signed int, vector signed int);\n\nvector unsigned int vec_vminuw (vector bool int, vector unsigned int);\nvector unsigned int vec_vminuw (vector unsigned int, vector bool int);\nvector unsigned int vec_vminuw (vector unsigned int,\n                                vector unsigned int);\n\nvector signed short vec_vminsh (vector bool short, vector signed short);\nvector signed short vec_vminsh (vector signed short, vector bool short);\nvector signed short vec_vminsh (vector signed short,\n                                vector signed short);\n\nvector unsigned short vec_vminuh (vector bool short,\n                                  vector unsigned short);\nvector unsigned short vec_vminuh (vector unsigned short,\n                                  vector bool short);\nvector unsigned short vec_vminuh (vector unsigned short,\n                                  vector unsigned short);\n\nvector signed char vec_vminsb (vector bool char, vector signed char);\nvector signed char vec_vminsb (vector signed char, vector bool char);\nvector signed char vec_vminsb (vector signed char, vector signed char);\n\nvector unsigned char vec_vminub (vector bool char,\n                                 vector unsigned char);\nvector unsigned char vec_vminub (vector unsigned char,\n                                 vector bool char);\nvector unsigned char vec_vminub (vector unsigned char,\n                                 vector unsigned char);\n\nvector signed short vec_mladd (vector signed short,\n                               vector signed short,\n                               vector signed short);\nvector signed short vec_mladd (vector signed short,\n                               vector unsigned short,\n                               vector unsigned short);\nvector signed short vec_mladd (vector unsigned short,\n                               vector signed short,\n                               vector signed short);\nvector unsigned short vec_mladd (vector unsigned short,\n                                 vector unsigned short,\n                                 vector unsigned short);\n\nvector signed short vec_mradds (vector signed short,\n                                vector signed short,\n                                vector signed short);\n\nvector unsigned int vec_msum (vector unsigned char,\n                              vector unsigned char,\n                              vector unsigned int);\nvector signed int vec_msum (vector signed char,\n                            vector unsigned char,\n                            vector signed int);\nvector unsigned int vec_msum (vector unsigned short,\n                              vector unsigned short,\n                              vector unsigned int);\nvector signed int vec_msum (vector signed short,\n                            vector signed short,\n                            vector signed int);\n\nvector signed int vec_vmsumshm (vector signed short,\n                                vector signed short,\n                                vector signed int);\n\nvector unsigned int vec_vmsumuhm (vector unsigned short,\n                                  vector unsigned short,\n                                  vector unsigned int);\n\nvector signed int vec_vmsummbm (vector signed char,\n                                vector unsigned char,\n                                vector signed int);\n\nvector unsigned int vec_vmsumubm (vector unsigned char,\n                                  vector unsigned char,\n                                  vector unsigned int);\n\nvector unsigned int vec_msums (vector unsigned short,\n                               vector unsigned short,\n                               vector unsigned int);\nvector signed int vec_msums (vector signed short,\n                             vector signed short,\n                             vector signed int);\n\nvector signed int vec_vmsumshs (vector signed short,\n                                vector signed short,\n                                vector signed int);\n\nvector unsigned int vec_vmsumuhs (vector unsigned short,\n                                  vector unsigned short,\n                                  vector unsigned int);\n\nvoid vec_mtvscr (vector signed int);\nvoid vec_mtvscr (vector unsigned int);\nvoid vec_mtvscr (vector bool int);\nvoid vec_mtvscr (vector signed short);\nvoid vec_mtvscr (vector unsigned short);\nvoid vec_mtvscr (vector bool short);\nvoid vec_mtvscr (vector pixel);\nvoid vec_mtvscr (vector signed char);\nvoid vec_mtvscr (vector unsigned char);\nvoid vec_mtvscr (vector bool char);\n\nvector unsigned short vec_mule (vector unsigned char,\n                                vector unsigned char);\nvector signed short vec_mule (vector signed char,\n                              vector signed char);\nvector unsigned int vec_mule (vector unsigned short,\n                              vector unsigned short);\nvector signed int vec_mule (vector signed short, vector signed short);\n\nvector signed int vec_vmulesh (vector signed short,\n                               vector signed short);\n\nvector unsigned int vec_vmuleuh (vector unsigned short,\n                                 vector unsigned short);\n\nvector signed short vec_vmulesb (vector signed char,\n                                 vector signed char);\n\nvector unsigned short vec_vmuleub (vector unsigned char,\n                                  vector unsigned char);\n\nvector unsigned short vec_mulo (vector unsigned char,\n                                vector unsigned char);\nvector signed short vec_mulo (vector signed char, vector signed char);\nvector unsigned int vec_mulo (vector unsigned short,\n                              vector unsigned short);\nvector signed int vec_mulo (vector signed short, vector signed short);\n\nvector signed int vec_vmulosh (vector signed short,\n                               vector signed short);\n\nvector unsigned int vec_vmulouh (vector unsigned short,\n                                 vector unsigned short);\n\nvector signed short vec_vmulosb (vector signed char,\n                                 vector signed char);\n\nvector unsigned short vec_vmuloub (vector unsigned char,\n                                   vector unsigned char);\n\nvector float vec_nmsub (vector float, vector float, vector float);\n\nvector float vec_nor (vector float, vector float);\nvector signed int vec_nor (vector signed int, vector signed int);\nvector unsigned int vec_nor (vector unsigned int, vector unsigned int);\nvector bool int vec_nor (vector bool int, vector bool int);\nvector signed short vec_nor (vector signed short, vector signed short);\nvector unsigned short vec_nor (vector unsigned short,\n                               vector unsigned short);\nvector bool short vec_nor (vector bool short, vector bool short);\nvector signed char vec_nor (vector signed char, vector signed char);\nvector unsigned char vec_nor (vector unsigned char,\n                              vector unsigned char);\nvector bool char vec_nor (vector bool char, vector bool char);\n\nvector float vec_or (vector float, vector float);\nvector float vec_or (vector float, vector bool int);\nvector float vec_or (vector bool int, vector float);\nvector bool int vec_or (vector bool int, vector bool int);\nvector signed int vec_or (vector bool int, vector signed int);\nvector signed int vec_or (vector signed int, vector bool int);\nvector signed int vec_or (vector signed int, vector signed int);\nvector unsigned int vec_or (vector bool int, vector unsigned int);\nvector unsigned int vec_or (vector unsigned int, vector bool int);\nvector unsigned int vec_or (vector unsigned int, vector unsigned int);\nvector bool short vec_or (vector bool short, vector bool short);\nvector signed short vec_or (vector bool short, vector signed short);\nvector signed short vec_or (vector signed short, vector bool short);\nvector signed short vec_or (vector signed short, vector signed short);\nvector unsigned short vec_or (vector bool short, vector unsigned short);\nvector unsigned short vec_or (vector unsigned short, vector bool short);\nvector unsigned short vec_or (vector unsigned short,\n                              vector unsigned short);\nvector signed char vec_or (vector bool char, vector signed char);\nvector bool char vec_or (vector bool char, vector bool char);\nvector signed char vec_or (vector signed char, vector bool char);\nvector signed char vec_or (vector signed char, vector signed char);\nvector unsigned char vec_or (vector bool char, vector unsigned char);\nvector unsigned char vec_or (vector unsigned char, vector bool char);\nvector unsigned char vec_or (vector unsigned char,\n                             vector unsigned char);\n\nvector signed char vec_pack (vector signed short, vector signed short);\nvector unsigned char vec_pack (vector unsigned short,\n                               vector unsigned short);\nvector bool char vec_pack (vector bool short, vector bool short);\nvector signed short vec_pack (vector signed int, vector signed int);\nvector unsigned short vec_pack (vector unsigned int,\n                                vector unsigned int);\nvector bool short vec_pack (vector bool int, vector bool int);\n\nvector bool short vec_vpkuwum (vector bool int, vector bool int);\nvector signed short vec_vpkuwum (vector signed int, vector signed int);\nvector unsigned short vec_vpkuwum (vector unsigned int,\n                                   vector unsigned int);\n\nvector bool char vec_vpkuhum (vector bool short, vector bool short);\nvector signed char vec_vpkuhum (vector signed short,\n                                vector signed short);\nvector unsigned char vec_vpkuhum (vector unsigned short,\n                                  vector unsigned short);\n\nvector pixel vec_packpx (vector unsigned int, vector unsigned int);\n\nvector unsigned char vec_packs (vector unsigned short,\n                                vector unsigned short);\nvector signed char vec_packs (vector signed short, vector signed short);\nvector unsigned short vec_packs (vector unsigned int,\n                                 vector unsigned int);\nvector signed short vec_packs (vector signed int, vector signed int);\n\nvector signed short vec_vpkswss (vector signed int, vector signed int);\n\nvector unsigned short vec_vpkuwus (vector unsigned int,\n                                   vector unsigned int);\n\nvector signed char vec_vpkshss (vector signed short,\n                                vector signed short);\n\nvector unsigned char vec_vpkuhus (vector unsigned short,\n                                  vector unsigned short);\n\nvector unsigned char vec_packsu (vector unsigned short,\n                                 vector unsigned short);\nvector unsigned char vec_packsu (vector signed short,\n                                 vector signed short);\nvector unsigned short vec_packsu (vector unsigned int,\n                                  vector unsigned int);\nvector unsigned short vec_packsu (vector signed int, vector signed int);\n\nvector unsigned short vec_vpkswus (vector signed int,\n                                   vector signed int);\n\nvector unsigned char vec_vpkshus (vector signed short,\n                                  vector signed short);\n\nvector float vec_perm (vector float,\n                       vector float,\n                       vector unsigned char);\nvector signed int vec_perm (vector signed int,\n                            vector signed int,\n                            vector unsigned char);\nvector unsigned int vec_perm (vector unsigned int,\n                              vector unsigned int,\n                              vector unsigned char);\nvector bool int vec_perm (vector bool int,\n                          vector bool int,\n                          vector unsigned char);\nvector signed short vec_perm (vector signed short,\n                              vector signed short,\n                              vector unsigned char);\nvector unsigned short vec_perm (vector unsigned short,\n                                vector unsigned short,\n                                vector unsigned char);\nvector bool short vec_perm (vector bool short,\n                            vector bool short,\n                            vector unsigned char);\nvector pixel vec_perm (vector pixel,\n                       vector pixel,\n                       vector unsigned char);\nvector signed char vec_perm (vector signed char,\n                             vector signed char,\n                             vector unsigned char);\nvector unsigned char vec_perm (vector unsigned char,\n                               vector unsigned char,\n                               vector unsigned char);\nvector bool char vec_perm (vector bool char,\n                           vector bool char,\n                           vector unsigned char);\n\nvector float vec_re (vector float);\n\nvector signed char vec_rl (vector signed char,\n                           vector unsigned char);\nvector unsigned char vec_rl (vector unsigned char,\n                             vector unsigned char);\nvector signed short vec_rl (vector signed short, vector unsigned short);\nvector unsigned short vec_rl (vector unsigned short,\n                              vector unsigned short);\nvector signed int vec_rl (vector signed int, vector unsigned int);\nvector unsigned int vec_rl (vector unsigned int, vector unsigned int);\n\nvector signed int vec_vrlw (vector signed int, vector unsigned int);\nvector unsigned int vec_vrlw (vector unsigned int, vector unsigned int);\n\nvector signed short vec_vrlh (vector signed short,\n                              vector unsigned short);\nvector unsigned short vec_vrlh (vector unsigned short,\n                                vector unsigned short);\n\nvector signed char vec_vrlb (vector signed char, vector unsigned char);\nvector unsigned char vec_vrlb (vector unsigned char,\n                               vector unsigned char);\n\nvector float vec_round (vector float);\n\nvector float vec_recip (vector float, vector float);\n\nvector float vec_rsqrt (vector float);\n\nvector float vec_rsqrte (vector float);\n\nvector float vec_sel (vector float, vector float, vector bool int);\nvector float vec_sel (vector float, vector float, vector unsigned int);\nvector signed int vec_sel (vector signed int,\n                           vector signed int,\n                           vector bool int);\nvector signed int vec_sel (vector signed int,\n                           vector signed int,\n                           vector unsigned int);\nvector unsigned int vec_sel (vector unsigned int,\n                             vector unsigned int,\n                             vector bool int);\nvector unsigned int vec_sel (vector unsigned int,\n                             vector unsigned int,\n                             vector unsigned int);\nvector bool int vec_sel (vector bool int,\n                         vector bool int,\n                         vector bool int);\nvector bool int vec_sel (vector bool int,\n                         vector bool int,\n                         vector unsigned int);\nvector signed short vec_sel (vector signed short,\n                             vector signed short,\n                             vector bool short);\nvector signed short vec_sel (vector signed short,\n                             vector signed short,\n                             vector unsigned short);\nvector unsigned short vec_sel (vector unsigned short,\n                               vector unsigned short,\n                               vector bool short);\nvector unsigned short vec_sel (vector unsigned short,\n                               vector unsigned short,\n                               vector unsigned short);\nvector bool short vec_sel (vector bool short,\n                           vector bool short,\n                           vector bool short);\nvector bool short vec_sel (vector bool short,\n                           vector bool short,\n                           vector unsigned short);\nvector signed char vec_sel (vector signed char,\n                            vector signed char,\n                            vector bool char);\nvector signed char vec_sel (vector signed char,\n                            vector signed char,\n                            vector unsigned char);\nvector unsigned char vec_sel (vector unsigned char,\n                              vector unsigned char,\n                              vector bool char);\nvector unsigned char vec_sel (vector unsigned char,\n                              vector unsigned char,\n                              vector unsigned char);\nvector bool char vec_sel (vector bool char,\n                          vector bool char,\n                          vector bool char);\nvector bool char vec_sel (vector bool char,\n                          vector bool char,\n                          vector unsigned char);\n\nvector signed char vec_sl (vector signed char,\n                           vector unsigned char);\nvector unsigned char vec_sl (vector unsigned char,\n                             vector unsigned char);\nvector signed short vec_sl (vector signed short, vector unsigned short);\nvector unsigned short vec_sl (vector unsigned short,\n                              vector unsigned short);\nvector signed int vec_sl (vector signed int, vector unsigned int);\nvector unsigned int vec_sl (vector unsigned int, vector unsigned int);\n\nvector signed int vec_vslw (vector signed int, vector unsigned int);\nvector unsigned int vec_vslw (vector unsigned int, vector unsigned int);\n\nvector signed short vec_vslh (vector signed short,\n                              vector unsigned short);\nvector unsigned short vec_vslh (vector unsigned short,\n                                vector unsigned short);\n\nvector signed char vec_vslb (vector signed char, vector unsigned char);\nvector unsigned char vec_vslb (vector unsigned char,\n                               vector unsigned char);\n\nvector float vec_sld (vector float, vector float, const int);\nvector signed int vec_sld (vector signed int,\n                           vector signed int,\n                           const int);\nvector unsigned int vec_sld (vector unsigned int,\n                             vector unsigned int,\n                             const int);\nvector bool int vec_sld (vector bool int,\n                         vector bool int,\n                         const int);\nvector signed short vec_sld (vector signed short,\n                             vector signed short,\n                             const int);\nvector unsigned short vec_sld (vector unsigned short,\n                               vector unsigned short,\n                               const int);\nvector bool short vec_sld (vector bool short,\n                           vector bool short,\n                           const int);\nvector pixel vec_sld (vector pixel,\n                      vector pixel,\n                      const int);\nvector signed char vec_sld (vector signed char,\n                            vector signed char,\n                            const int);\nvector unsigned char vec_sld (vector unsigned char,\n                              vector unsigned char,\n                              const int);\nvector bool char vec_sld (vector bool char,\n                          vector bool char,\n                          const int);\n\nvector signed int vec_sll (vector signed int,\n                           vector unsigned int);\nvector signed int vec_sll (vector signed int,\n                           vector unsigned short);\nvector signed int vec_sll (vector signed int,\n                           vector unsigned char);\nvector unsigned int vec_sll (vector unsigned int,\n                             vector unsigned int);\nvector unsigned int vec_sll (vector unsigned int,\n                             vector unsigned short);\nvector unsigned int vec_sll (vector unsigned int,\n                             vector unsigned char);\nvector bool int vec_sll (vector bool int,\n                         vector unsigned int);\nvector bool int vec_sll (vector bool int,\n                         vector unsigned short);\nvector bool int vec_sll (vector bool int,\n                         vector unsigned char);\nvector signed short vec_sll (vector signed short,\n                             vector unsigned int);\nvector signed short vec_sll (vector signed short,\n                             vector unsigned short);\nvector signed short vec_sll (vector signed short,\n                             vector unsigned char);\nvector unsigned short vec_sll (vector unsigned short,\n                               vector unsigned int);\nvector unsigned short vec_sll (vector unsigned short,\n                               vector unsigned short);\nvector unsigned short vec_sll (vector unsigned short,\n                               vector unsigned char);\nvector bool short vec_sll (vector bool short, vector unsigned int);\nvector bool short vec_sll (vector bool short, vector unsigned short);\nvector bool short vec_sll (vector bool short, vector unsigned char);\nvector pixel vec_sll (vector pixel, vector unsigned int);\nvector pixel vec_sll (vector pixel, vector unsigned short);\nvector pixel vec_sll (vector pixel, vector unsigned char);\nvector signed char vec_sll (vector signed char, vector unsigned int);\nvector signed char vec_sll (vector signed char, vector unsigned short);\nvector signed char vec_sll (vector signed char, vector unsigned char);\nvector unsigned char vec_sll (vector unsigned char,\n                              vector unsigned int);\nvector unsigned char vec_sll (vector unsigned char,\n                              vector unsigned short);\nvector unsigned char vec_sll (vector unsigned char,\n                              vector unsigned char);\nvector bool char vec_sll (vector bool char, vector unsigned int);\nvector bool char vec_sll (vector bool char, vector unsigned short);\nvector bool char vec_sll (vector bool char, vector unsigned char);\n\nvector float vec_slo (vector float, vector signed char);\nvector float vec_slo (vector float, vector unsigned char);\nvector signed int vec_slo (vector signed int, vector signed char);\nvector signed int vec_slo (vector signed int, vector unsigned char);\nvector unsigned int vec_slo (vector unsigned int, vector signed char);\nvector unsigned int vec_slo (vector unsigned int, vector unsigned char);\nvector signed short vec_slo (vector signed short, vector signed char);\nvector signed short vec_slo (vector signed short, vector unsigned char);\nvector unsigned short vec_slo (vector unsigned short,\n                               vector signed char);\nvector unsigned short vec_slo (vector unsigned short,\n                               vector unsigned char);\nvector pixel vec_slo (vector pixel, vector signed char);\nvector pixel vec_slo (vector pixel, vector unsigned char);\nvector signed char vec_slo (vector signed char, vector signed char);\nvector signed char vec_slo (vector signed char, vector unsigned char);\nvector unsigned char vec_slo (vector unsigned char, vector signed char);\nvector unsigned char vec_slo (vector unsigned char,\n                              vector unsigned char);\n\nvector signed char vec_splat (vector signed char, const int);\nvector unsigned char vec_splat (vector unsigned char, const int);\nvector bool char vec_splat (vector bool char, const int);\nvector signed short vec_splat (vector signed short, const int);\nvector unsigned short vec_splat (vector unsigned short, const int);\nvector bool short vec_splat (vector bool short, const int);\nvector pixel vec_splat (vector pixel, const int);\nvector float vec_splat (vector float, const int);\nvector signed int vec_splat (vector signed int, const int);\nvector unsigned int vec_splat (vector unsigned int, const int);\nvector bool int vec_splat (vector bool int, const int);\nvector signed long vec_splat (vector signed long, const int);\nvector unsigned long vec_splat (vector unsigned long, const int);\n\nvector signed char vec_splats (signed char);\nvector unsigned char vec_splats (unsigned char);\nvector signed short vec_splats (signed short);\nvector unsigned short vec_splats (unsigned short);\nvector signed int vec_splats (signed int);\nvector unsigned int vec_splats (unsigned int);\nvector float vec_splats (float);\n\nvector float vec_vspltw (vector float, const int);\nvector signed int vec_vspltw (vector signed int, const int);\nvector unsigned int vec_vspltw (vector unsigned int, const int);\nvector bool int vec_vspltw (vector bool int, const int);\n\nvector bool short vec_vsplth (vector bool short, const int);\nvector signed short vec_vsplth (vector signed short, const int);\nvector unsigned short vec_vsplth (vector unsigned short, const int);\nvector pixel vec_vsplth (vector pixel, const int);\n\nvector signed char vec_vspltb (vector signed char, const int);\nvector unsigned char vec_vspltb (vector unsigned char, const int);\nvector bool char vec_vspltb (vector bool char, const int);\n\nvector signed char vec_splat_s8 (const int);\n\nvector signed short vec_splat_s16 (const int);\n\nvector signed int vec_splat_s32 (const int);\n\nvector unsigned char vec_splat_u8 (const int);\n\nvector unsigned short vec_splat_u16 (const int);\n\nvector unsigned int vec_splat_u32 (const int);\n\nvector signed char vec_sr (vector signed char, vector unsigned char);\nvector unsigned char vec_sr (vector unsigned char,\n                             vector unsigned char);\nvector signed short vec_sr (vector signed short,\n                            vector unsigned short);\nvector unsigned short vec_sr (vector unsigned short,\n                              vector unsigned short);\nvector signed int vec_sr (vector signed int, vector unsigned int);\nvector unsigned int vec_sr (vector unsigned int, vector unsigned int);\n\nvector signed int vec_vsrw (vector signed int, vector unsigned int);\nvector unsigned int vec_vsrw (vector unsigned int, vector unsigned int);\n\nvector signed short vec_vsrh (vector signed short,\n                              vector unsigned short);\nvector unsigned short vec_vsrh (vector unsigned short,\n                                vector unsigned short);\n\nvector signed char vec_vsrb (vector signed char, vector unsigned char);\nvector unsigned char vec_vsrb (vector unsigned char,\n                               vector unsigned char);\n\nvector signed char vec_sra (vector signed char, vector unsigned char);\nvector unsigned char vec_sra (vector unsigned char,\n                              vector unsigned char);\nvector signed short vec_sra (vector signed short,\n                             vector unsigned short);\nvector unsigned short vec_sra (vector unsigned short,\n                               vector unsigned short);\nvector signed int vec_sra (vector signed int, vector unsigned int);\nvector unsigned int vec_sra (vector unsigned int, vector unsigned int);\n\nvector signed int vec_vsraw (vector signed int, vector unsigned int);\nvector unsigned int vec_vsraw (vector unsigned int,\n                               vector unsigned int);\n\nvector signed short vec_vsrah (vector signed short,\n                               vector unsigned short);\nvector unsigned short vec_vsrah (vector unsigned short,\n                                 vector unsigned short);\n\nvector signed char vec_vsrab (vector signed char, vector unsigned char);\nvector unsigned char vec_vsrab (vector unsigned char,\n                                vector unsigned char);\n\nvector signed int vec_srl (vector signed int, vector unsigned int);\nvector signed int vec_srl (vector signed int, vector unsigned short);\nvector signed int vec_srl (vector signed int, vector unsigned char);\nvector unsigned int vec_srl (vector unsigned int, vector unsigned int);\nvector unsigned int vec_srl (vector unsigned int,\n                             vector unsigned short);\nvector unsigned int vec_srl (vector unsigned int, vector unsigned char);\nvector bool int vec_srl (vector bool int, vector unsigned int);\nvector bool int vec_srl (vector bool int, vector unsigned short);\nvector bool int vec_srl (vector bool int, vector unsigned char);\nvector signed short vec_srl (vector signed short, vector unsigned int);\nvector signed short vec_srl (vector signed short,\n                             vector unsigned short);\nvector signed short vec_srl (vector signed short, vector unsigned char);\nvector unsigned short vec_srl (vector unsigned short,\n                               vector unsigned int);\nvector unsigned short vec_srl (vector unsigned short,\n                               vector unsigned short);\nvector unsigned short vec_srl (vector unsigned short,\n                               vector unsigned char);\nvector bool short vec_srl (vector bool short, vector unsigned int);\nvector bool short vec_srl (vector bool short, vector unsigned short);\nvector bool short vec_srl (vector bool short, vector unsigned char);\nvector pixel vec_srl (vector pixel, vector unsigned int);\nvector pixel vec_srl (vector pixel, vector unsigned short);\nvector pixel vec_srl (vector pixel, vector unsigned char);\nvector signed char vec_srl (vector signed char, vector unsigned int);\nvector signed char vec_srl (vector signed char, vector unsigned short);\nvector signed char vec_srl (vector signed char, vector unsigned char);\nvector unsigned char vec_srl (vector unsigned char,\n                              vector unsigned int);\nvector unsigned char vec_srl (vector unsigned char,\n                              vector unsigned short);\nvector unsigned char vec_srl (vector unsigned char,\n                              vector unsigned char);\nvector bool char vec_srl (vector bool char, vector unsigned int);\nvector bool char vec_srl (vector bool char, vector unsigned short);\nvector bool char vec_srl (vector bool char, vector unsigned char);\n\nvector float vec_sro (vector float, vector signed char);\nvector float vec_sro (vector float, vector unsigned char);\nvector signed int vec_sro (vector signed int, vector signed char);\nvector signed int vec_sro (vector signed int, vector unsigned char);\nvector unsigned int vec_sro (vector unsigned int, vector signed char);\nvector unsigned int vec_sro (vector unsigned int, vector unsigned char);\nvector signed short vec_sro (vector signed short, vector signed char);\nvector signed short vec_sro (vector signed short, vector unsigned char);\nvector unsigned short vec_sro (vector unsigned short,\n                               vector signed char);\nvector unsigned short vec_sro (vector unsigned short,\n                               vector unsigned char);\nvector pixel vec_sro (vector pixel, vector signed char);\nvector pixel vec_sro (vector pixel, vector unsigned char);\nvector signed char vec_sro (vector signed char, vector signed char);\nvector signed char vec_sro (vector signed char, vector unsigned char);\nvector unsigned char vec_sro (vector unsigned char, vector signed char);\nvector unsigned char vec_sro (vector unsigned char,\n                              vector unsigned char);\n\nvoid vec_st (vector float, int, vector float *);\nvoid vec_st (vector float, int, float *);\nvoid vec_st (vector signed int, int, vector signed int *);\nvoid vec_st (vector signed int, int, int *);\nvoid vec_st (vector unsigned int, int, vector unsigned int *);\nvoid vec_st (vector unsigned int, int, unsigned int *);\nvoid vec_st (vector bool int, int, vector bool int *);\nvoid vec_st (vector bool int, int, unsigned int *);\nvoid vec_st (vector bool int, int, int *);\nvoid vec_st (vector signed short, int, vector signed short *);\nvoid vec_st (vector signed short, int, short *);\nvoid vec_st (vector unsigned short, int, vector unsigned short *);\nvoid vec_st (vector unsigned short, int, unsigned short *);\nvoid vec_st (vector bool short, int, vector bool short *);\nvoid vec_st (vector bool short, int, unsigned short *);\nvoid vec_st (vector pixel, int, vector pixel *);\nvoid vec_st (vector pixel, int, unsigned short *);\nvoid vec_st (vector pixel, int, short *);\nvoid vec_st (vector bool short, int, short *);\nvoid vec_st (vector signed char, int, vector signed char *);\nvoid vec_st (vector signed char, int, signed char *);\nvoid vec_st (vector unsigned char, int, vector unsigned char *);\nvoid vec_st (vector unsigned char, int, unsigned char *);\nvoid vec_st (vector bool char, int, vector bool char *);\nvoid vec_st (vector bool char, int, unsigned char *);\nvoid vec_st (vector bool char, int, signed char *);\n\nvoid vec_ste (vector signed char, int, signed char *);\nvoid vec_ste (vector unsigned char, int, unsigned char *);\nvoid vec_ste (vector bool char, int, signed char *);\nvoid vec_ste (vector bool char, int, unsigned char *);\nvoid vec_ste (vector signed short, int, short *);\nvoid vec_ste (vector unsigned short, int, unsigned short *);\nvoid vec_ste (vector bool short, int, short *);\nvoid vec_ste (vector bool short, int, unsigned short *);\nvoid vec_ste (vector pixel, int, short *);\nvoid vec_ste (vector pixel, int, unsigned short *);\nvoid vec_ste (vector float, int, float *);\nvoid vec_ste (vector signed int, int, int *);\nvoid vec_ste (vector unsigned int, int, unsigned int *);\nvoid vec_ste (vector bool int, int, int *);\nvoid vec_ste (vector bool int, int, unsigned int *);\n\nvoid vec_stvewx (vector float, int, float *);\nvoid vec_stvewx (vector signed int, int, int *);\nvoid vec_stvewx (vector unsigned int, int, unsigned int *);\nvoid vec_stvewx (vector bool int, int, int *);\nvoid vec_stvewx (vector bool int, int, unsigned int *);\n\nvoid vec_stvehx (vector signed short, int, short *);\nvoid vec_stvehx (vector unsigned short, int, unsigned short *);\nvoid vec_stvehx (vector bool short, int, short *);\nvoid vec_stvehx (vector bool short, int, unsigned short *);\nvoid vec_stvehx (vector pixel, int, short *);\nvoid vec_stvehx (vector pixel, int, unsigned short *);\n\nvoid vec_stvebx (vector signed char, int, signed char *);\nvoid vec_stvebx (vector unsigned char, int, unsigned char *);\nvoid vec_stvebx (vector bool char, int, signed char *);\nvoid vec_stvebx (vector bool char, int, unsigned char *);\n\nvoid vec_stl (vector float, int, vector float *);\nvoid vec_stl (vector float, int, float *);\nvoid vec_stl (vector signed int, int, vector signed int *);\nvoid vec_stl (vector signed int, int, int *);\nvoid vec_stl (vector unsigned int, int, vector unsigned int *);\nvoid vec_stl (vector unsigned int, int, unsigned int *);\nvoid vec_stl (vector bool int, int, vector bool int *);\nvoid vec_stl (vector bool int, int, unsigned int *);\nvoid vec_stl (vector bool int, int, int *);\nvoid vec_stl (vector signed short, int, vector signed short *);\nvoid vec_stl (vector signed short, int, short *);\nvoid vec_stl (vector unsigned short, int, vector unsigned short *);\nvoid vec_stl (vector unsigned short, int, unsigned short *);\nvoid vec_stl (vector bool short, int, vector bool short *);\nvoid vec_stl (vector bool short, int, unsigned short *);\nvoid vec_stl (vector bool short, int, short *);\nvoid vec_stl (vector pixel, int, vector pixel *);\nvoid vec_stl (vector pixel, int, unsigned short *);\nvoid vec_stl (vector pixel, int, short *);\nvoid vec_stl (vector signed char, int, vector signed char *);\nvoid vec_stl (vector signed char, int, signed char *);\nvoid vec_stl (vector unsigned char, int, vector unsigned char *);\nvoid vec_stl (vector unsigned char, int, unsigned char *);\nvoid vec_stl (vector bool char, int, vector bool char *);\nvoid vec_stl (vector bool char, int, unsigned char *);\nvoid vec_stl (vector bool char, int, signed char *);\n\nvector signed char vec_sub (vector bool char, vector signed char);\nvector signed char vec_sub (vector signed char, vector bool char);\nvector signed char vec_sub (vector signed char, vector signed char);\nvector unsigned char vec_sub (vector bool char, vector unsigned char);\nvector unsigned char vec_sub (vector unsigned char, vector bool char);\nvector unsigned char vec_sub (vector unsigned char,\n                              vector unsigned char);\nvector signed short vec_sub (vector bool short, vector signed short);\nvector signed short vec_sub (vector signed short, vector bool short);\nvector signed short vec_sub (vector signed short, vector signed short);\nvector unsigned short vec_sub (vector bool short,\n                               vector unsigned short);\nvector unsigned short vec_sub (vector unsigned short,\n                               vector bool short);\nvector unsigned short vec_sub (vector unsigned short,\n                               vector unsigned short);\nvector signed int vec_sub (vector bool int, vector signed int);\nvector signed int vec_sub (vector signed int, vector bool int);\nvector signed int vec_sub (vector signed int, vector signed int);\nvector unsigned int vec_sub (vector bool int, vector unsigned int);\nvector unsigned int vec_sub (vector unsigned int, vector bool int);\nvector unsigned int vec_sub (vector unsigned int, vector unsigned int);\nvector float vec_sub (vector float, vector float);\n\nvector float vec_vsubfp (vector float, vector float);\n\nvector signed int vec_vsubuwm (vector bool int, vector signed int);\nvector signed int vec_vsubuwm (vector signed int, vector bool int);\nvector signed int vec_vsubuwm (vector signed int, vector signed int);\nvector unsigned int vec_vsubuwm (vector bool int, vector unsigned int);\nvector unsigned int vec_vsubuwm (vector unsigned int, vector bool int);\nvector unsigned int vec_vsubuwm (vector unsigned int,\n                                 vector unsigned int);\n\nvector signed short vec_vsubuhm (vector bool short,\n                                 vector signed short);\nvector signed short vec_vsubuhm (vector signed short,\n                                 vector bool short);\nvector signed short vec_vsubuhm (vector signed short,\n                                 vector signed short);\nvector unsigned short vec_vsubuhm (vector bool short,\n                                   vector unsigned short);\nvector unsigned short vec_vsubuhm (vector unsigned short,\n                                   vector bool short);\nvector unsigned short vec_vsubuhm (vector unsigned short,\n                                   vector unsigned short);\n\nvector signed char vec_vsububm (vector bool char, vector signed char);\nvector signed char vec_vsububm (vector signed char, vector bool char);\nvector signed char vec_vsububm (vector signed char, vector signed char);\nvector unsigned char vec_vsububm (vector bool char,\n                                  vector unsigned char);\nvector unsigned char vec_vsububm (vector unsigned char,\n                                  vector bool char);\nvector unsigned char vec_vsububm (vector unsigned char,\n                                  vector unsigned char);\n\nvector unsigned int vec_subc (vector unsigned int, vector unsigned int);\n\nvector unsigned char vec_subs (vector bool char, vector unsigned char);\nvector unsigned char vec_subs (vector unsigned char, vector bool char);\nvector unsigned char vec_subs (vector unsigned char,\n                               vector unsigned char);\nvector signed char vec_subs (vector bool char, vector signed char);\nvector signed char vec_subs (vector signed char, vector bool char);\nvector signed char vec_subs (vector signed char, vector signed char);\nvector unsigned short vec_subs (vector bool short,\n                                vector unsigned short);\nvector unsigned short vec_subs (vector unsigned short,\n                                vector bool short);\nvector unsigned short vec_subs (vector unsigned short,\n                                vector unsigned short);\nvector signed short vec_subs (vector bool short, vector signed short);\nvector signed short vec_subs (vector signed short, vector bool short);\nvector signed short vec_subs (vector signed short, vector signed short);\nvector unsigned int vec_subs (vector bool int, vector unsigned int);\nvector unsigned int vec_subs (vector unsigned int, vector bool int);\nvector unsigned int vec_subs (vector unsigned int, vector unsigned int);\nvector signed int vec_subs (vector bool int, vector signed int);\nvector signed int vec_subs (vector signed int, vector bool int);\nvector signed int vec_subs (vector signed int, vector signed int);\n\nvector signed int vec_vsubsws (vector bool int, vector signed int);\nvector signed int vec_vsubsws (vector signed int, vector bool int);\nvector signed int vec_vsubsws (vector signed int, vector signed int);\n\nvector unsigned int vec_vsubuws (vector bool int, vector unsigned int);\nvector unsigned int vec_vsubuws (vector unsigned int, vector bool int);\nvector unsigned int vec_vsubuws (vector unsigned int,\n                                 vector unsigned int);\n\nvector signed short vec_vsubshs (vector bool short,\n                                 vector signed short);\nvector signed short vec_vsubshs (vector signed short,\n                                 vector bool short);\nvector signed short vec_vsubshs (vector signed short,\n                                 vector signed short);\n\nvector unsigned short vec_vsubuhs (vector bool short,\n                                   vector unsigned short);\nvector unsigned short vec_vsubuhs (vector unsigned short,\n                                   vector bool short);\nvector unsigned short vec_vsubuhs (vector unsigned short,\n                                   vector unsigned short);\n\nvector signed char vec_vsubsbs (vector bool char, vector signed char);\nvector signed char vec_vsubsbs (vector signed char, vector bool char);\nvector signed char vec_vsubsbs (vector signed char, vector signed char);\n\nvector unsigned char vec_vsububs (vector bool char,\n                                  vector unsigned char);\nvector unsigned char vec_vsububs (vector unsigned char,\n                                  vector bool char);\nvector unsigned char vec_vsububs (vector unsigned char,\n                                  vector unsigned char);\n\nvector unsigned int vec_sum4s (vector unsigned char,\n                               vector unsigned int);\nvector signed int vec_sum4s (vector signed char, vector signed int);\nvector signed int vec_sum4s (vector signed short, vector signed int);\n\nvector signed int vec_vsum4shs (vector signed short, vector signed int);\n\nvector signed int vec_vsum4sbs (vector signed char, vector signed int);\n\nvector unsigned int vec_vsum4ubs (vector unsigned char,\n                                  vector unsigned int);\n\nvector signed int vec_sum2s (vector signed int, vector signed int);\n\nvector signed int vec_sums (vector signed int, vector signed int);\n\nvector float vec_trunc (vector float);\n\nvector signed short vec_unpackh (vector signed char);\nvector bool short vec_unpackh (vector bool char);\nvector signed int vec_unpackh (vector signed short);\nvector bool int vec_unpackh (vector bool short);\nvector unsigned int vec_unpackh (vector pixel);\n\nvector bool int vec_vupkhsh (vector bool short);\nvector signed int vec_vupkhsh (vector signed short);\n\nvector unsigned int vec_vupkhpx (vector pixel);\n\nvector bool short vec_vupkhsb (vector bool char);\nvector signed short vec_vupkhsb (vector signed char);\n\nvector signed short vec_unpackl (vector signed char);\nvector bool short vec_unpackl (vector bool char);\nvector unsigned int vec_unpackl (vector pixel);\nvector signed int vec_unpackl (vector signed short);\nvector bool int vec_unpackl (vector bool short);\n\nvector unsigned int vec_vupklpx (vector pixel);\n\nvector bool int vec_vupklsh (vector bool short);\nvector signed int vec_vupklsh (vector signed short);\n\nvector bool short vec_vupklsb (vector bool char);\nvector signed short vec_vupklsb (vector signed char);\n\nvector float vec_xor (vector float, vector float);\nvector float vec_xor (vector float, vector bool int);\nvector float vec_xor (vector bool int, vector float);\nvector bool int vec_xor (vector bool int, vector bool int);\nvector signed int vec_xor (vector bool int, vector signed int);\nvector signed int vec_xor (vector signed int, vector bool int);\nvector signed int vec_xor (vector signed int, vector signed int);\nvector unsigned int vec_xor (vector bool int, vector unsigned int);\nvector unsigned int vec_xor (vector unsigned int, vector bool int);\nvector unsigned int vec_xor (vector unsigned int, vector unsigned int);\nvector bool short vec_xor (vector bool short, vector bool short);\nvector signed short vec_xor (vector bool short, vector signed short);\nvector signed short vec_xor (vector signed short, vector bool short);\nvector signed short vec_xor (vector signed short, vector signed short);\nvector unsigned short vec_xor (vector bool short,\n                               vector unsigned short);\nvector unsigned short vec_xor (vector unsigned short,\n                               vector bool short);\nvector unsigned short vec_xor (vector unsigned short,\n                               vector unsigned short);\nvector signed char vec_xor (vector bool char, vector signed char);\nvector bool char vec_xor (vector bool char, vector bool char);\nvector signed char vec_xor (vector signed char, vector bool char);\nvector signed char vec_xor (vector signed char, vector signed char);\nvector unsigned char vec_xor (vector bool char, vector unsigned char);\nvector unsigned char vec_xor (vector unsigned char, vector bool char);\nvector unsigned char vec_xor (vector unsigned char,\n                              vector unsigned char);\n\nint vec_all_eq (vector signed char, vector bool char);\nint vec_all_eq (vector signed char, vector signed char);\nint vec_all_eq (vector unsigned char, vector bool char);\nint vec_all_eq (vector unsigned char, vector unsigned char);\nint vec_all_eq (vector bool char, vector bool char);\nint vec_all_eq (vector bool char, vector unsigned char);\nint vec_all_eq (vector bool char, vector signed char);\nint vec_all_eq (vector signed short, vector bool short);\nint vec_all_eq (vector signed short, vector signed short);\nint vec_all_eq (vector unsigned short, vector bool short);\nint vec_all_eq (vector unsigned short, vector unsigned short);\nint vec_all_eq (vector bool short, vector bool short);\nint vec_all_eq (vector bool short, vector unsigned short);\nint vec_all_eq (vector bool short, vector signed short);\nint vec_all_eq (vector pixel, vector pixel);\nint vec_all_eq (vector signed int, vector bool int);\nint vec_all_eq (vector signed int, vector signed int);\nint vec_all_eq (vector unsigned int, vector bool int);\nint vec_all_eq (vector unsigned int, vector unsigned int);\nint vec_all_eq (vector bool int, vector bool int);\nint vec_all_eq (vector bool int, vector unsigned int);\nint vec_all_eq (vector bool int, vector signed int);\nint vec_all_eq (vector float, vector float);\n\nint vec_all_ge (vector bool char, vector unsigned char);\nint vec_all_ge (vector unsigned char, vector bool char);\nint vec_all_ge (vector unsigned char, vector unsigned char);\nint vec_all_ge (vector bool char, vector signed char);\nint vec_all_ge (vector signed char, vector bool char);\nint vec_all_ge (vector signed char, vector signed char);\nint vec_all_ge (vector bool short, vector unsigned short);\nint vec_all_ge (vector unsigned short, vector bool short);\nint vec_all_ge (vector unsigned short, vector unsigned short);\nint vec_all_ge (vector signed short, vector signed short);\nint vec_all_ge (vector bool short, vector signed short);\nint vec_all_ge (vector signed short, vector bool short);\nint vec_all_ge (vector bool int, vector unsigned int);\nint vec_all_ge (vector unsigned int, vector bool int);\nint vec_all_ge (vector unsigned int, vector unsigned int);\nint vec_all_ge (vector bool int, vector signed int);\nint vec_all_ge (vector signed int, vector bool int);\nint vec_all_ge (vector signed int, vector signed int);\nint vec_all_ge (vector float, vector float);\n\nint vec_all_gt (vector bool char, vector unsigned char);\nint vec_all_gt (vector unsigned char, vector bool char);\nint vec_all_gt (vector unsigned char, vector unsigned char);\nint vec_all_gt (vector bool char, vector signed char);\nint vec_all_gt (vector signed char, vector bool char);\nint vec_all_gt (vector signed char, vector signed char);\nint vec_all_gt (vector bool short, vector unsigned short);\nint vec_all_gt (vector unsigned short, vector bool short);\nint vec_all_gt (vector unsigned short, vector unsigned short);\nint vec_all_gt (vector bool short, vector signed short);\nint vec_all_gt (vector signed short, vector bool short);\nint vec_all_gt (vector signed short, vector signed short);\nint vec_all_gt (vector bool int, vector unsigned int);\nint vec_all_gt (vector unsigned int, vector bool int);\nint vec_all_gt (vector unsigned int, vector unsigned int);\nint vec_all_gt (vector bool int, vector signed int);\nint vec_all_gt (vector signed int, vector bool int);\nint vec_all_gt (vector signed int, vector signed int);\nint vec_all_gt (vector float, vector float);\n\nint vec_all_in (vector float, vector float);\n\nint vec_all_le (vector bool char, vector unsigned char);\nint vec_all_le (vector unsigned char, vector bool char);\nint vec_all_le (vector unsigned char, vector unsigned char);\nint vec_all_le (vector bool char, vector signed char);\nint vec_all_le (vector signed char, vector bool char);\nint vec_all_le (vector signed char, vector signed char);\nint vec_all_le (vector bool short, vector unsigned short);\nint vec_all_le (vector unsigned short, vector bool short);\nint vec_all_le (vector unsigned short, vector unsigned short);\nint vec_all_le (vector bool short, vector signed short);\nint vec_all_le (vector signed short, vector bool short);\nint vec_all_le (vector signed short, vector signed short);\nint vec_all_le (vector bool int, vector unsigned int);\nint vec_all_le (vector unsigned int, vector bool int);\nint vec_all_le (vector unsigned int, vector unsigned int);\nint vec_all_le (vector bool int, vector signed int);\nint vec_all_le (vector signed int, vector bool int);\nint vec_all_le (vector signed int, vector signed int);\nint vec_all_le (vector float, vector float);\n\nint vec_all_lt (vector bool char, vector unsigned char);\nint vec_all_lt (vector unsigned char, vector bool char);\nint vec_all_lt (vector unsigned char, vector unsigned char);\nint vec_all_lt (vector bool char, vector signed char);\nint vec_all_lt (vector signed char, vector bool char);\nint vec_all_lt (vector signed char, vector signed char);\nint vec_all_lt (vector bool short, vector unsigned short);\nint vec_all_lt (vector unsigned short, vector bool short);\nint vec_all_lt (vector unsigned short, vector unsigned short);\nint vec_all_lt (vector bool short, vector signed short);\nint vec_all_lt (vector signed short, vector bool short);\nint vec_all_lt (vector signed short, vector signed short);\nint vec_all_lt (vector bool int, vector unsigned int);\nint vec_all_lt (vector unsigned int, vector bool int);\nint vec_all_lt (vector unsigned int, vector unsigned int);\nint vec_all_lt (vector bool int, vector signed int);\nint vec_all_lt (vector signed int, vector bool int);\nint vec_all_lt (vector signed int, vector signed int);\nint vec_all_lt (vector float, vector float);\n\nint vec_all_nan (vector float);\n\nint vec_all_ne (vector signed char, vector bool char);\nint vec_all_ne (vector signed char, vector signed char);\nint vec_all_ne (vector unsigned char, vector bool char);\nint vec_all_ne (vector unsigned char, vector unsigned char);\nint vec_all_ne (vector bool char, vector bool char);\nint vec_all_ne (vector bool char, vector unsigned char);\nint vec_all_ne (vector bool char, vector signed char);\nint vec_all_ne (vector signed short, vector bool short);\nint vec_all_ne (vector signed short, vector signed short);\nint vec_all_ne (vector unsigned short, vector bool short);\nint vec_all_ne (vector unsigned short, vector unsigned short);\nint vec_all_ne (vector bool short, vector bool short);\nint vec_all_ne (vector bool short, vector unsigned short);\nint vec_all_ne (vector bool short, vector signed short);\nint vec_all_ne (vector pixel, vector pixel);\nint vec_all_ne (vector signed int, vector bool int);\nint vec_all_ne (vector signed int, vector signed int);\nint vec_all_ne (vector unsigned int, vector bool int);\nint vec_all_ne (vector unsigned int, vector unsigned int);\nint vec_all_ne (vector bool int, vector bool int);\nint vec_all_ne (vector bool int, vector unsigned int);\nint vec_all_ne (vector bool int, vector signed int);\nint vec_all_ne (vector float, vector float);\n\nint vec_all_nge (vector float, vector float);\n\nint vec_all_ngt (vector float, vector float);\n\nint vec_all_nle (vector float, vector float);\n\nint vec_all_nlt (vector float, vector float);\n\nint vec_all_numeric (vector float);\n\nint vec_any_eq (vector signed char, vector bool char);\nint vec_any_eq (vector signed char, vector signed char);\nint vec_any_eq (vector unsigned char, vector bool char);\nint vec_any_eq (vector unsigned char, vector unsigned char);\nint vec_any_eq (vector bool char, vector bool char);\nint vec_any_eq (vector bool char, vector unsigned char);\nint vec_any_eq (vector bool char, vector signed char);\nint vec_any_eq (vector signed short, vector bool short);\nint vec_any_eq (vector signed short, vector signed short);\nint vec_any_eq (vector unsigned short, vector bool short);\nint vec_any_eq (vector unsigned short, vector unsigned short);\nint vec_any_eq (vector bool short, vector bool short);\nint vec_any_eq (vector bool short, vector unsigned short);\nint vec_any_eq (vector bool short, vector signed short);\nint vec_any_eq (vector pixel, vector pixel);\nint vec_any_eq (vector signed int, vector bool int);\nint vec_any_eq (vector signed int, vector signed int);\nint vec_any_eq (vector unsigned int, vector bool int);\nint vec_any_eq (vector unsigned int, vector unsigned int);\nint vec_any_eq (vector bool int, vector bool int);\nint vec_any_eq (vector bool int, vector unsigned int);\nint vec_any_eq (vector bool int, vector signed int);\nint vec_any_eq (vector float, vector float);\n\nint vec_any_ge (vector signed char, vector bool char);\nint vec_any_ge (vector unsigned char, vector bool char);\nint vec_any_ge (vector unsigned char, vector unsigned char);\nint vec_any_ge (vector signed char, vector signed char);\nint vec_any_ge (vector bool char, vector unsigned char);\nint vec_any_ge (vector bool char, vector signed char);\nint vec_any_ge (vector unsigned short, vector bool short);\nint vec_any_ge (vector unsigned short, vector unsigned short);\nint vec_any_ge (vector signed short, vector signed short);\nint vec_any_ge (vector signed short, vector bool short);\nint vec_any_ge (vector bool short, vector unsigned short);\nint vec_any_ge (vector bool short, vector signed short);\nint vec_any_ge (vector signed int, vector bool int);\nint vec_any_ge (vector unsigned int, vector bool int);\nint vec_any_ge (vector unsigned int, vector unsigned int);\nint vec_any_ge (vector signed int, vector signed int);\nint vec_any_ge (vector bool int, vector unsigned int);\nint vec_any_ge (vector bool int, vector signed int);\nint vec_any_ge (vector float, vector float);\n\nint vec_any_gt (vector bool char, vector unsigned char);\nint vec_any_gt (vector unsigned char, vector bool char);\nint vec_any_gt (vector unsigned char, vector unsigned char);\nint vec_any_gt (vector bool char, vector signed char);\nint vec_any_gt (vector signed char, vector bool char);\nint vec_any_gt (vector signed char, vector signed char);\nint vec_any_gt (vector bool short, vector unsigned short);\nint vec_any_gt (vector unsigned short, vector bool short);\nint vec_any_gt (vector unsigned short, vector unsigned short);\nint vec_any_gt (vector bool short, vector signed short);\nint vec_any_gt (vector signed short, vector bool short);\nint vec_any_gt (vector signed short, vector signed short);\nint vec_any_gt (vector bool int, vector unsigned int);\nint vec_any_gt (vector unsigned int, vector bool int);\nint vec_any_gt (vector unsigned int, vector unsigned int);\nint vec_any_gt (vector bool int, vector signed int);\nint vec_any_gt (vector signed int, vector bool int);\nint vec_any_gt (vector signed int, vector signed int);\nint vec_any_gt (vector float, vector float);\n\nint vec_any_le (vector bool char, vector unsigned char);\nint vec_any_le (vector unsigned char, vector bool char);\nint vec_any_le (vector unsigned char, vector unsigned char);\nint vec_any_le (vector bool char, vector signed char);\nint vec_any_le (vector signed char, vector bool char);\nint vec_any_le (vector signed char, vector signed char);\nint vec_any_le (vector bool short, vector unsigned short);\nint vec_any_le (vector unsigned short, vector bool short);\nint vec_any_le (vector unsigned short, vector unsigned short);\nint vec_any_le (vector bool short, vector signed short);\nint vec_any_le (vector signed short, vector bool short);\nint vec_any_le (vector signed short, vector signed short);\nint vec_any_le (vector bool int, vector unsigned int);\nint vec_any_le (vector unsigned int, vector bool int);\nint vec_any_le (vector unsigned int, vector unsigned int);\nint vec_any_le (vector bool int, vector signed int);\nint vec_any_le (vector signed int, vector bool int);\nint vec_any_le (vector signed int, vector signed int);\nint vec_any_le (vector float, vector float);\n\nint vec_any_lt (vector bool char, vector unsigned char);\nint vec_any_lt (vector unsigned char, vector bool char);\nint vec_any_lt (vector unsigned char, vector unsigned char);\nint vec_any_lt (vector bool char, vector signed char);\nint vec_any_lt (vector signed char, vector bool char);\nint vec_any_lt (vector signed char, vector signed char);\nint vec_any_lt (vector bool short, vector unsigned short);\nint vec_any_lt (vector unsigned short, vector bool short);\nint vec_any_lt (vector unsigned short, vector unsigned short);\nint vec_any_lt (vector bool short, vector signed short);\nint vec_any_lt (vector signed short, vector bool short);\nint vec_any_lt (vector signed short, vector signed short);\nint vec_any_lt (vector bool int, vector unsigned int);\nint vec_any_lt (vector unsigned int, vector bool int);\nint vec_any_lt (vector unsigned int, vector unsigned int);\nint vec_any_lt (vector bool int, vector signed int);\nint vec_any_lt (vector signed int, vector bool int);\nint vec_any_lt (vector signed int, vector signed int);\nint vec_any_lt (vector float, vector float);\n\nint vec_any_nan (vector float);\n\nint vec_any_ne (vector signed char, vector bool char);\nint vec_any_ne (vector signed char, vector signed char);\nint vec_any_ne (vector unsigned char, vector bool char);\nint vec_any_ne (vector unsigned char, vector unsigned char);\nint vec_any_ne (vector bool char, vector bool char);\nint vec_any_ne (vector bool char, vector unsigned char);\nint vec_any_ne (vector bool char, vector signed char);\nint vec_any_ne (vector signed short, vector bool short);\nint vec_any_ne (vector signed short, vector signed short);\nint vec_any_ne (vector unsigned short, vector bool short);\nint vec_any_ne (vector unsigned short, vector unsigned short);\nint vec_any_ne (vector bool short, vector bool short);\nint vec_any_ne (vector bool short, vector unsigned short);\nint vec_any_ne (vector bool short, vector signed short);\nint vec_any_ne (vector pixel, vector pixel);\nint vec_any_ne (vector signed int, vector bool int);\nint vec_any_ne (vector signed int, vector signed int);\nint vec_any_ne (vector unsigned int, vector bool int);\nint vec_any_ne (vector unsigned int, vector unsigned int);\nint vec_any_ne (vector bool int, vector bool int);\nint vec_any_ne (vector bool int, vector unsigned int);\nint vec_any_ne (vector bool int, vector signed int);\nint vec_any_ne (vector float, vector float);\n\nint vec_any_nge (vector float, vector float);\n\nint vec_any_ngt (vector float, vector float);\n\nint vec_any_nle (vector float, vector float);\n\nint vec_any_nlt (vector float, vector float);\n\nint vec_any_numeric (vector float);\n\nint vec_any_out (vector float, vector float);</pre> <p>If the vector/scalar (VSX) instruction set is available, the following additional functions are available: </p>\n<pre class=\"smallexample\">vector double vec_abs (vector double);\nvector double vec_add (vector double, vector double);\nvector double vec_and (vector double, vector double);\nvector double vec_and (vector double, vector bool long);\nvector double vec_and (vector bool long, vector double);\nvector long vec_and (vector long, vector long);\nvector long vec_and (vector long, vector bool long);\nvector long vec_and (vector bool long, vector long);\nvector unsigned long vec_and (vector unsigned long, vector unsigned long);\nvector unsigned long vec_and (vector unsigned long, vector bool long);\nvector unsigned long vec_and (vector bool long, vector unsigned long);\nvector double vec_andc (vector double, vector double);\nvector double vec_andc (vector double, vector bool long);\nvector double vec_andc (vector bool long, vector double);\nvector long vec_andc (vector long, vector long);\nvector long vec_andc (vector long, vector bool long);\nvector long vec_andc (vector bool long, vector long);\nvector unsigned long vec_andc (vector unsigned long, vector unsigned long);\nvector unsigned long vec_andc (vector unsigned long, vector bool long);\nvector unsigned long vec_andc (vector bool long, vector unsigned long);\nvector double vec_ceil (vector double);\nvector bool long vec_cmpeq (vector double, vector double);\nvector bool long vec_cmpge (vector double, vector double);\nvector bool long vec_cmpgt (vector double, vector double);\nvector bool long vec_cmple (vector double, vector double);\nvector bool long vec_cmplt (vector double, vector double);\nvector double vec_cpsgn (vector double, vector double);\nvector float vec_div (vector float, vector float);\nvector double vec_div (vector double, vector double);\nvector long vec_div (vector long, vector long);\nvector unsigned long vec_div (vector unsigned long, vector unsigned long);\nvector double vec_floor (vector double);\nvector double vec_ld (int, const vector double *);\nvector double vec_ld (int, const double *);\nvector double vec_ldl (int, const vector double *);\nvector double vec_ldl (int, const double *);\nvector unsigned char vec_lvsl (int, const volatile double *);\nvector unsigned char vec_lvsr (int, const volatile double *);\nvector double vec_madd (vector double, vector double, vector double);\nvector double vec_max (vector double, vector double);\nvector signed long vec_mergeh (vector signed long, vector signed long);\nvector signed long vec_mergeh (vector signed long, vector bool long);\nvector signed long vec_mergeh (vector bool long, vector signed long);\nvector unsigned long vec_mergeh (vector unsigned long, vector unsigned long);\nvector unsigned long vec_mergeh (vector unsigned long, vector bool long);\nvector unsigned long vec_mergeh (vector bool long, vector unsigned long);\nvector signed long vec_mergel (vector signed long, vector signed long);\nvector signed long vec_mergel (vector signed long, vector bool long);\nvector signed long vec_mergel (vector bool long, vector signed long);\nvector unsigned long vec_mergel (vector unsigned long, vector unsigned long);\nvector unsigned long vec_mergel (vector unsigned long, vector bool long);\nvector unsigned long vec_mergel (vector bool long, vector unsigned long);\nvector double vec_min (vector double, vector double);\nvector float vec_msub (vector float, vector float, vector float);\nvector double vec_msub (vector double, vector double, vector double);\nvector float vec_mul (vector float, vector float);\nvector double vec_mul (vector double, vector double);\nvector long vec_mul (vector long, vector long);\nvector unsigned long vec_mul (vector unsigned long, vector unsigned long);\nvector float vec_nearbyint (vector float);\nvector double vec_nearbyint (vector double);\nvector float vec_nmadd (vector float, vector float, vector float);\nvector double vec_nmadd (vector double, vector double, vector double);\nvector double vec_nmsub (vector double, vector double, vector double);\nvector double vec_nor (vector double, vector double);\nvector long vec_nor (vector long, vector long);\nvector long vec_nor (vector long, vector bool long);\nvector long vec_nor (vector bool long, vector long);\nvector unsigned long vec_nor (vector unsigned long, vector unsigned long);\nvector unsigned long vec_nor (vector unsigned long, vector bool long);\nvector unsigned long vec_nor (vector bool long, vector unsigned long);\nvector double vec_or (vector double, vector double);\nvector double vec_or (vector double, vector bool long);\nvector double vec_or (vector bool long, vector double);\nvector long vec_or (vector long, vector long);\nvector long vec_or (vector long, vector bool long);\nvector long vec_or (vector bool long, vector long);\nvector unsigned long vec_or (vector unsigned long, vector unsigned long);\nvector unsigned long vec_or (vector unsigned long, vector bool long);\nvector unsigned long vec_or (vector bool long, vector unsigned long);\nvector double vec_perm (vector double, vector double, vector unsigned char);\nvector long vec_perm (vector long, vector long, vector unsigned char);\nvector unsigned long vec_perm (vector unsigned long, vector unsigned long,\n                               vector unsigned char);\nvector double vec_rint (vector double);\nvector double vec_recip (vector double, vector double);\nvector double vec_rsqrt (vector double);\nvector double vec_rsqrte (vector double);\nvector double vec_sel (vector double, vector double, vector bool long);\nvector double vec_sel (vector double, vector double, vector unsigned long);\nvector long vec_sel (vector long, vector long, vector long);\nvector long vec_sel (vector long, vector long, vector unsigned long);\nvector long vec_sel (vector long, vector long, vector bool long);\nvector unsigned long vec_sel (vector unsigned long, vector unsigned long,\n                              vector long);\nvector unsigned long vec_sel (vector unsigned long, vector unsigned long,\n                              vector unsigned long);\nvector unsigned long vec_sel (vector unsigned long, vector unsigned long,\n                              vector bool long);\nvector double vec_splats (double);\nvector signed long vec_splats (signed long);\nvector unsigned long vec_splats (unsigned long);\nvector float vec_sqrt (vector float);\nvector double vec_sqrt (vector double);\nvoid vec_st (vector double, int, vector double *);\nvoid vec_st (vector double, int, double *);\nvector double vec_sub (vector double, vector double);\nvector double vec_trunc (vector double);\nvector double vec_xor (vector double, vector double);\nvector double vec_xor (vector double, vector bool long);\nvector double vec_xor (vector bool long, vector double);\nvector long vec_xor (vector long, vector long);\nvector long vec_xor (vector long, vector bool long);\nvector long vec_xor (vector bool long, vector long);\nvector unsigned long vec_xor (vector unsigned long, vector unsigned long);\nvector unsigned long vec_xor (vector unsigned long, vector bool long);\nvector unsigned long vec_xor (vector bool long, vector unsigned long);\nint vec_all_eq (vector double, vector double);\nint vec_all_ge (vector double, vector double);\nint vec_all_gt (vector double, vector double);\nint vec_all_le (vector double, vector double);\nint vec_all_lt (vector double, vector double);\nint vec_all_nan (vector double);\nint vec_all_ne (vector double, vector double);\nint vec_all_nge (vector double, vector double);\nint vec_all_ngt (vector double, vector double);\nint vec_all_nle (vector double, vector double);\nint vec_all_nlt (vector double, vector double);\nint vec_all_numeric (vector double);\nint vec_any_eq (vector double, vector double);\nint vec_any_ge (vector double, vector double);\nint vec_any_gt (vector double, vector double);\nint vec_any_le (vector double, vector double);\nint vec_any_lt (vector double, vector double);\nint vec_any_nan (vector double);\nint vec_any_ne (vector double, vector double);\nint vec_any_nge (vector double, vector double);\nint vec_any_ngt (vector double, vector double);\nint vec_any_nle (vector double, vector double);\nint vec_any_nlt (vector double, vector double);\nint vec_any_numeric (vector double);\n\nvector double vec_vsx_ld (int, const vector double *);\nvector double vec_vsx_ld (int, const double *);\nvector float vec_vsx_ld (int, const vector float *);\nvector float vec_vsx_ld (int, const float *);\nvector bool int vec_vsx_ld (int, const vector bool int *);\nvector signed int vec_vsx_ld (int, const vector signed int *);\nvector signed int vec_vsx_ld (int, const int *);\nvector signed int vec_vsx_ld (int, const long *);\nvector unsigned int vec_vsx_ld (int, const vector unsigned int *);\nvector unsigned int vec_vsx_ld (int, const unsigned int *);\nvector unsigned int vec_vsx_ld (int, const unsigned long *);\nvector bool short vec_vsx_ld (int, const vector bool short *);\nvector pixel vec_vsx_ld (int, const vector pixel *);\nvector signed short vec_vsx_ld (int, const vector signed short *);\nvector signed short vec_vsx_ld (int, const short *);\nvector unsigned short vec_vsx_ld (int, const vector unsigned short *);\nvector unsigned short vec_vsx_ld (int, const unsigned short *);\nvector bool char vec_vsx_ld (int, const vector bool char *);\nvector signed char vec_vsx_ld (int, const vector signed char *);\nvector signed char vec_vsx_ld (int, const signed char *);\nvector unsigned char vec_vsx_ld (int, const vector unsigned char *);\nvector unsigned char vec_vsx_ld (int, const unsigned char *);\n\nvoid vec_vsx_st (vector double, int, vector double *);\nvoid vec_vsx_st (vector double, int, double *);\nvoid vec_vsx_st (vector float, int, vector float *);\nvoid vec_vsx_st (vector float, int, float *);\nvoid vec_vsx_st (vector signed int, int, vector signed int *);\nvoid vec_vsx_st (vector signed int, int, int *);\nvoid vec_vsx_st (vector unsigned int, int, vector unsigned int *);\nvoid vec_vsx_st (vector unsigned int, int, unsigned int *);\nvoid vec_vsx_st (vector bool int, int, vector bool int *);\nvoid vec_vsx_st (vector bool int, int, unsigned int *);\nvoid vec_vsx_st (vector bool int, int, int *);\nvoid vec_vsx_st (vector signed short, int, vector signed short *);\nvoid vec_vsx_st (vector signed short, int, short *);\nvoid vec_vsx_st (vector unsigned short, int, vector unsigned short *);\nvoid vec_vsx_st (vector unsigned short, int, unsigned short *);\nvoid vec_vsx_st (vector bool short, int, vector bool short *);\nvoid vec_vsx_st (vector bool short, int, unsigned short *);\nvoid vec_vsx_st (vector pixel, int, vector pixel *);\nvoid vec_vsx_st (vector pixel, int, unsigned short *);\nvoid vec_vsx_st (vector pixel, int, short *);\nvoid vec_vsx_st (vector bool short, int, short *);\nvoid vec_vsx_st (vector signed char, int, vector signed char *);\nvoid vec_vsx_st (vector signed char, int, signed char *);\nvoid vec_vsx_st (vector unsigned char, int, vector unsigned char *);\nvoid vec_vsx_st (vector unsigned char, int, unsigned char *);\nvoid vec_vsx_st (vector bool char, int, vector bool char *);\nvoid vec_vsx_st (vector bool char, int, unsigned char *);\nvoid vec_vsx_st (vector bool char, int, signed char *);\n\nvector double vec_xxpermdi (vector double, vector double, int);\nvector float vec_xxpermdi (vector float, vector float, int);\nvector long long vec_xxpermdi (vector long long, vector long long, int);\nvector unsigned long long vec_xxpermdi (vector unsigned long long,\n                                        vector unsigned long long, int);\nvector int vec_xxpermdi (vector int, vector int, int);\nvector unsigned int vec_xxpermdi (vector unsigned int,\n                                  vector unsigned int, int);\nvector short vec_xxpermdi (vector short, vector short, int);\nvector unsigned short vec_xxpermdi (vector unsigned short,\n                                    vector unsigned short, int);\nvector signed char vec_xxpermdi (vector signed char, vector signed char, int);\nvector unsigned char vec_xxpermdi (vector unsigned char,\n                                   vector unsigned char, int);\n\nvector double vec_xxsldi (vector double, vector double, int);\nvector float vec_xxsldi (vector float, vector float, int);\nvector long long vec_xxsldi (vector long long, vector long long, int);\nvector unsigned long long vec_xxsldi (vector unsigned long long,\n                                      vector unsigned long long, int);\nvector int vec_xxsldi (vector int, vector int, int);\nvector unsigned int vec_xxsldi (vector unsigned int, vector unsigned int, int);\nvector short vec_xxsldi (vector short, vector short, int);\nvector unsigned short vec_xxsldi (vector unsigned short,\n                                  vector unsigned short, int);\nvector signed char vec_xxsldi (vector signed char, vector signed char, int);\nvector unsigned char vec_xxsldi (vector unsigned char,\n                                 vector unsigned char, int);</pre> <p>Note that the ‘<code>vec_ld</code>’ and ‘<code>vec_st</code>’ built-in functions always generate the AltiVec ‘<code>LVX</code>’ and ‘<code>STVX</code>’ instructions even if the VSX instruction set is available. The ‘<code>vec_vsx_ld</code>’ and ‘<code>vec_vsx_st</code>’ built-in functions always generate the VSX ‘<code>LXVD2X</code>’, ‘<code>LXVW4X</code>’, ‘<code>STXVD2X</code>’, and ‘<code>STXVW4X</code>’ instructions. </p>\n<p>If the ISA 2.07 additions to the vector/scalar (power8-vector) instruction set is available, the following additional functions are available for both 32-bit and 64-bit targets. For 64-bit targets, you can use <var>vector long</var> instead of <var>vector long long</var>, <var>vector bool long</var> instead of <var>vector bool long long</var>, and <var>vector unsigned long</var> instead of <var>vector unsigned long long</var>. </p>\n<pre class=\"smallexample\">vector long long vec_abs (vector long long);\n\nvector long long vec_add (vector long long, vector long long);\nvector unsigned long long vec_add (vector unsigned long long,\n                                   vector unsigned long long);\n\nint vec_all_eq (vector long long, vector long long);\nint vec_all_eq (vector unsigned long long, vector unsigned long long);\nint vec_all_ge (vector long long, vector long long);\nint vec_all_ge (vector unsigned long long, vector unsigned long long);\nint vec_all_gt (vector long long, vector long long);\nint vec_all_gt (vector unsigned long long, vector unsigned long long);\nint vec_all_le (vector long long, vector long long);\nint vec_all_le (vector unsigned long long, vector unsigned long long);\nint vec_all_lt (vector long long, vector long long);\nint vec_all_lt (vector unsigned long long, vector unsigned long long);\nint vec_all_ne (vector long long, vector long long);\nint vec_all_ne (vector unsigned long long, vector unsigned long long);\n\nint vec_any_eq (vector long long, vector long long);\nint vec_any_eq (vector unsigned long long, vector unsigned long long);\nint vec_any_ge (vector long long, vector long long);\nint vec_any_ge (vector unsigned long long, vector unsigned long long);\nint vec_any_gt (vector long long, vector long long);\nint vec_any_gt (vector unsigned long long, vector unsigned long long);\nint vec_any_le (vector long long, vector long long);\nint vec_any_le (vector unsigned long long, vector unsigned long long);\nint vec_any_lt (vector long long, vector long long);\nint vec_any_lt (vector unsigned long long, vector unsigned long long);\nint vec_any_ne (vector long long, vector long long);\nint vec_any_ne (vector unsigned long long, vector unsigned long long);\n\nvector long long vec_eqv (vector long long, vector long long);\nvector long long vec_eqv (vector bool long long, vector long long);\nvector long long vec_eqv (vector long long, vector bool long long);\nvector unsigned long long vec_eqv (vector unsigned long long,\n                                   vector unsigned long long);\nvector unsigned long long vec_eqv (vector bool long long,\n                                   vector unsigned long long);\nvector unsigned long long vec_eqv (vector unsigned long long,\n                                   vector bool long long);\nvector int vec_eqv (vector int, vector int);\nvector int vec_eqv (vector bool int, vector int);\nvector int vec_eqv (vector int, vector bool int);\nvector unsigned int vec_eqv (vector unsigned int, vector unsigned int);\nvector unsigned int vec_eqv (vector bool unsigned int,\n                             vector unsigned int);\nvector unsigned int vec_eqv (vector unsigned int,\n                             vector bool unsigned int);\nvector short vec_eqv (vector short, vector short);\nvector short vec_eqv (vector bool short, vector short);\nvector short vec_eqv (vector short, vector bool short);\nvector unsigned short vec_eqv (vector unsigned short, vector unsigned short);\nvector unsigned short vec_eqv (vector bool unsigned short,\n                               vector unsigned short);\nvector unsigned short vec_eqv (vector unsigned short,\n                               vector bool unsigned short);\nvector signed char vec_eqv (vector signed char, vector signed char);\nvector signed char vec_eqv (vector bool signed char, vector signed char);\nvector signed char vec_eqv (vector signed char, vector bool signed char);\nvector unsigned char vec_eqv (vector unsigned char, vector unsigned char);\nvector unsigned char vec_eqv (vector bool unsigned char, vector unsigned char);\nvector unsigned char vec_eqv (vector unsigned char, vector bool unsigned char);\n\nvector long long vec_max (vector long long, vector long long);\nvector unsigned long long vec_max (vector unsigned long long,\n                                   vector unsigned long long);\n\nvector signed int vec_mergee (vector signed int, vector signed int);\nvector unsigned int vec_mergee (vector unsigned int, vector unsigned int);\nvector bool int vec_mergee (vector bool int, vector bool int);\n\nvector signed int vec_mergeo (vector signed int, vector signed int);\nvector unsigned int vec_mergeo (vector unsigned int, vector unsigned int);\nvector bool int vec_mergeo (vector bool int, vector bool int);\n\nvector long long vec_min (vector long long, vector long long);\nvector unsigned long long vec_min (vector unsigned long long,\n                                   vector unsigned long long);\n\nvector long long vec_nand (vector long long, vector long long);\nvector long long vec_nand (vector bool long long, vector long long);\nvector long long vec_nand (vector long long, vector bool long long);\nvector unsigned long long vec_nand (vector unsigned long long,\n                                    vector unsigned long long);\nvector unsigned long long vec_nand (vector bool long long,\n                                   vector unsigned long long);\nvector unsigned long long vec_nand (vector unsigned long long,\n                                    vector bool long long);\nvector int vec_nand (vector int, vector int);\nvector int vec_nand (vector bool int, vector int);\nvector int vec_nand (vector int, vector bool int);\nvector unsigned int vec_nand (vector unsigned int, vector unsigned int);\nvector unsigned int vec_nand (vector bool unsigned int,\n                              vector unsigned int);\nvector unsigned int vec_nand (vector unsigned int,\n                              vector bool unsigned int);\nvector short vec_nand (vector short, vector short);\nvector short vec_nand (vector bool short, vector short);\nvector short vec_nand (vector short, vector bool short);\nvector unsigned short vec_nand (vector unsigned short, vector unsigned short);\nvector unsigned short vec_nand (vector bool unsigned short,\n                                vector unsigned short);\nvector unsigned short vec_nand (vector unsigned short,\n                                vector bool unsigned short);\nvector signed char vec_nand (vector signed char, vector signed char);\nvector signed char vec_nand (vector bool signed char, vector signed char);\nvector signed char vec_nand (vector signed char, vector bool signed char);\nvector unsigned char vec_nand (vector unsigned char, vector unsigned char);\nvector unsigned char vec_nand (vector bool unsigned char, vector unsigned char);\nvector unsigned char vec_nand (vector unsigned char, vector bool unsigned char);\n\nvector long long vec_orc (vector long long, vector long long);\nvector long long vec_orc (vector bool long long, vector long long);\nvector long long vec_orc (vector long long, vector bool long long);\nvector unsigned long long vec_orc (vector unsigned long long,\n                                   vector unsigned long long);\nvector unsigned long long vec_orc (vector bool long long,\n                                   vector unsigned long long);\nvector unsigned long long vec_orc (vector unsigned long long,\n                                   vector bool long long);\nvector int vec_orc (vector int, vector int);\nvector int vec_orc (vector bool int, vector int);\nvector int vec_orc (vector int, vector bool int);\nvector unsigned int vec_orc (vector unsigned int, vector unsigned int);\nvector unsigned int vec_orc (vector bool unsigned int,\n                             vector unsigned int);\nvector unsigned int vec_orc (vector unsigned int,\n                             vector bool unsigned int);\nvector short vec_orc (vector short, vector short);\nvector short vec_orc (vector bool short, vector short);\nvector short vec_orc (vector short, vector bool short);\nvector unsigned short vec_orc (vector unsigned short, vector unsigned short);\nvector unsigned short vec_orc (vector bool unsigned short,\n                               vector unsigned short);\nvector unsigned short vec_orc (vector unsigned short,\n                               vector bool unsigned short);\nvector signed char vec_orc (vector signed char, vector signed char);\nvector signed char vec_orc (vector bool signed char, vector signed char);\nvector signed char vec_orc (vector signed char, vector bool signed char);\nvector unsigned char vec_orc (vector unsigned char, vector unsigned char);\nvector unsigned char vec_orc (vector bool unsigned char, vector unsigned char);\nvector unsigned char vec_orc (vector unsigned char, vector bool unsigned char);\n\nvector int vec_pack (vector long long, vector long long);\nvector unsigned int vec_pack (vector unsigned long long,\n                              vector unsigned long long);\nvector bool int vec_pack (vector bool long long, vector bool long long);\n\nvector int vec_packs (vector long long, vector long long);\nvector unsigned int vec_packs (vector unsigned long long,\n                               vector unsigned long long);\n\nvector unsigned int vec_packsu (vector long long, vector long long);\nvector unsigned int vec_packsu (vector unsigned long long,\n                                vector unsigned long long);\n\nvector long long vec_rl (vector long long,\n                         vector unsigned long long);\nvector long long vec_rl (vector unsigned long long,\n                         vector unsigned long long);\n\nvector long long vec_sl (vector long long, vector unsigned long long);\nvector long long vec_sl (vector unsigned long long,\n                         vector unsigned long long);\n\nvector long long vec_sr (vector long long, vector unsigned long long);\nvector unsigned long long char vec_sr (vector unsigned long long,\n                                       vector unsigned long long);\n\nvector long long vec_sra (vector long long, vector unsigned long long);\nvector unsigned long long vec_sra (vector unsigned long long,\n                                   vector unsigned long long);\n\nvector long long vec_sub (vector long long, vector long long);\nvector unsigned long long vec_sub (vector unsigned long long,\n                                   vector unsigned long long);\n\nvector long long vec_unpackh (vector int);\nvector unsigned long long vec_unpackh (vector unsigned int);\n\nvector long long vec_unpackl (vector int);\nvector unsigned long long vec_unpackl (vector unsigned int);\n\nvector long long vec_vaddudm (vector long long, vector long long);\nvector long long vec_vaddudm (vector bool long long, vector long long);\nvector long long vec_vaddudm (vector long long, vector bool long long);\nvector unsigned long long vec_vaddudm (vector unsigned long long,\n                                       vector unsigned long long);\nvector unsigned long long vec_vaddudm (vector bool unsigned long long,\n                                       vector unsigned long long);\nvector unsigned long long vec_vaddudm (vector unsigned long long,\n                                       vector bool unsigned long long);\n\nvector long long vec_vbpermq (vector signed char, vector signed char);\nvector long long vec_vbpermq (vector unsigned char, vector unsigned char);\n\nvector long long vec_cntlz (vector long long);\nvector unsigned long long vec_cntlz (vector unsigned long long);\nvector int vec_cntlz (vector int);\nvector unsigned int vec_cntlz (vector int);\nvector short vec_cntlz (vector short);\nvector unsigned short vec_cntlz (vector unsigned short);\nvector signed char vec_cntlz (vector signed char);\nvector unsigned char vec_cntlz (vector unsigned char);\n\nvector long long vec_vclz (vector long long);\nvector unsigned long long vec_vclz (vector unsigned long long);\nvector int vec_vclz (vector int);\nvector unsigned int vec_vclz (vector int);\nvector short vec_vclz (vector short);\nvector unsigned short vec_vclz (vector unsigned short);\nvector signed char vec_vclz (vector signed char);\nvector unsigned char vec_vclz (vector unsigned char);\n\nvector signed char vec_vclzb (vector signed char);\nvector unsigned char vec_vclzb (vector unsigned char);\n\nvector long long vec_vclzd (vector long long);\nvector unsigned long long vec_vclzd (vector unsigned long long);\n\nvector short vec_vclzh (vector short);\nvector unsigned short vec_vclzh (vector unsigned short);\n\nvector int vec_vclzw (vector int);\nvector unsigned int vec_vclzw (vector int);\n\nvector signed char vec_vgbbd (vector signed char);\nvector unsigned char vec_vgbbd (vector unsigned char);\n\nvector long long vec_vmaxsd (vector long long, vector long long);\n\nvector unsigned long long vec_vmaxud (vector unsigned long long,\n                                      unsigned vector long long);\n\nvector long long vec_vminsd (vector long long, vector long long);\n\nvector unsigned long long vec_vminud (vector long long,\n                                      vector long long);\n\nvector int vec_vpksdss (vector long long, vector long long);\nvector unsigned int vec_vpksdss (vector long long, vector long long);\n\nvector unsigned int vec_vpkudus (vector unsigned long long,\n                                 vector unsigned long long);\n\nvector int vec_vpkudum (vector long long, vector long long);\nvector unsigned int vec_vpkudum (vector unsigned long long,\n                                 vector unsigned long long);\nvector bool int vec_vpkudum (vector bool long long, vector bool long long);\n\nvector long long vec_vpopcnt (vector long long);\nvector unsigned long long vec_vpopcnt (vector unsigned long long);\nvector int vec_vpopcnt (vector int);\nvector unsigned int vec_vpopcnt (vector int);\nvector short vec_vpopcnt (vector short);\nvector unsigned short vec_vpopcnt (vector unsigned short);\nvector signed char vec_vpopcnt (vector signed char);\nvector unsigned char vec_vpopcnt (vector unsigned char);\n\nvector signed char vec_vpopcntb (vector signed char);\nvector unsigned char vec_vpopcntb (vector unsigned char);\n\nvector long long vec_vpopcntd (vector long long);\nvector unsigned long long vec_vpopcntd (vector unsigned long long);\n\nvector short vec_vpopcnth (vector short);\nvector unsigned short vec_vpopcnth (vector unsigned short);\n\nvector int vec_vpopcntw (vector int);\nvector unsigned int vec_vpopcntw (vector int);\n\nvector long long vec_vrld (vector long long, vector unsigned long long);\nvector unsigned long long vec_vrld (vector unsigned long long,\n                                    vector unsigned long long);\n\nvector long long vec_vsld (vector long long, vector unsigned long long);\nvector long long vec_vsld (vector unsigned long long,\n                           vector unsigned long long);\n\nvector long long vec_vsrad (vector long long, vector unsigned long long);\nvector unsigned long long vec_vsrad (vector unsigned long long,\n                                     vector unsigned long long);\n\nvector long long vec_vsrd (vector long long, vector unsigned long long);\nvector unsigned long long char vec_vsrd (vector unsigned long long,\n                                         vector unsigned long long);\n\nvector long long vec_vsubudm (vector long long, vector long long);\nvector long long vec_vsubudm (vector bool long long, vector long long);\nvector long long vec_vsubudm (vector long long, vector bool long long);\nvector unsigned long long vec_vsubudm (vector unsigned long long,\n                                       vector unsigned long long);\nvector unsigned long long vec_vsubudm (vector bool long long,\n                                       vector unsigned long long);\nvector unsigned long long vec_vsubudm (vector unsigned long long,\n                                       vector bool long long);\n\nvector long long vec_vupkhsw (vector int);\nvector unsigned long long vec_vupkhsw (vector unsigned int);\n\nvector long long vec_vupklsw (vector int);\nvector unsigned long long vec_vupklsw (vector int);</pre> <p>If the ISA 2.07 additions to the vector/scalar (power8-vector) instruction set is available, the following additional functions are available for 64-bit targets. New vector types (<var>vector __int128_t</var> and <var>vector __uint128_t</var>) are available to hold the <var>__int128_t</var> and <var>__uint128_t</var> types to use these builtins. </p>\n<p>The normal vector extract, and set operations work on <var>vector __int128_t</var> and <var>vector __uint128_t</var> types, but the index value must be 0. </p>\n<pre class=\"smallexample\">vector __int128_t vec_vaddcuq (vector __int128_t, vector __int128_t);\nvector __uint128_t vec_vaddcuq (vector __uint128_t, vector __uint128_t);\n\nvector __int128_t vec_vadduqm (vector __int128_t, vector __int128_t);\nvector __uint128_t vec_vadduqm (vector __uint128_t, vector __uint128_t);\n\nvector __int128_t vec_vaddecuq (vector __int128_t, vector __int128_t,\n                                vector __int128_t);\nvector __uint128_t vec_vaddecuq (vector __uint128_t, vector __uint128_t,\n                                 vector __uint128_t);\n\nvector __int128_t vec_vaddeuqm (vector __int128_t, vector __int128_t,\n                                vector __int128_t);\nvector __uint128_t vec_vaddeuqm (vector __uint128_t, vector __uint128_t,\n                                 vector __uint128_t);\n\nvector __int128_t vec_vsubecuq (vector __int128_t, vector __int128_t,\n                                vector __int128_t);\nvector __uint128_t vec_vsubecuq (vector __uint128_t, vector __uint128_t,\n                                 vector __uint128_t);\n\nvector __int128_t vec_vsubeuqm (vector __int128_t, vector __int128_t,\n                                vector __int128_t);\nvector __uint128_t vec_vsubeuqm (vector __uint128_t, vector __uint128_t,\n                                 vector __uint128_t);\n\nvector __int128_t vec_vsubcuq (vector __int128_t, vector __int128_t);\nvector __uint128_t vec_vsubcuq (vector __uint128_t, vector __uint128_t);\n\n__int128_t vec_vsubuqm (__int128_t, __int128_t);\n__uint128_t vec_vsubuqm (__uint128_t, __uint128_t);\n\nvector __int128_t __builtin_bcdadd (vector __int128_t, vector__int128_t);\nint __builtin_bcdadd_lt (vector __int128_t, vector__int128_t);\nint __builtin_bcdadd_eq (vector __int128_t, vector__int128_t);\nint __builtin_bcdadd_gt (vector __int128_t, vector__int128_t);\nint __builtin_bcdadd_ov (vector __int128_t, vector__int128_t);\nvector __int128_t bcdsub (vector __int128_t, vector__int128_t);\nint __builtin_bcdsub_lt (vector __int128_t, vector__int128_t);\nint __builtin_bcdsub_eq (vector __int128_t, vector__int128_t);\nint __builtin_bcdsub_gt (vector __int128_t, vector__int128_t);\nint __builtin_bcdsub_ov (vector __int128_t, vector__int128_t);</pre> <p>If the cryptographic instructions are enabled (<code>-mcrypto</code> or <code>-mcpu=power8</code>), the following builtins are enabled. </p>\n<pre class=\"smallexample\">vector unsigned long long __builtin_crypto_vsbox (vector unsigned long long);\n\nvector unsigned long long __builtin_crypto_vcipher (vector unsigned long long,\n                                                    vector unsigned long long);\n\nvector unsigned long long __builtin_crypto_vcipherlast\n                                     (vector unsigned long long,\n                                      vector unsigned long long);\n\nvector unsigned long long __builtin_crypto_vncipher (vector unsigned long long,\n                                                     vector unsigned long long);\n\nvector unsigned long long __builtin_crypto_vncipherlast\n                                     (vector unsigned long long,\n                                      vector unsigned long long);\n\nvector unsigned char __builtin_crypto_vpermxor (vector unsigned char,\n                                                vector unsigned char,\n                                                vector unsigned char);\n\nvector unsigned short __builtin_crypto_vpermxor (vector unsigned short,\n                                                 vector unsigned short,\n                                                 vector unsigned short);\n\nvector unsigned int __builtin_crypto_vpermxor (vector unsigned int,\n                                               vector unsigned int,\n                                               vector unsigned int);\n\nvector unsigned long long __builtin_crypto_vpermxor (vector unsigned long long,\n                                                     vector unsigned long long,\n                                                     vector unsigned long long);\n\nvector unsigned char __builtin_crypto_vpmsumb (vector unsigned char,\n                                               vector unsigned char);\n\nvector unsigned short __builtin_crypto_vpmsumb (vector unsigned short,\n                                                vector unsigned short);\n\nvector unsigned int __builtin_crypto_vpmsumb (vector unsigned int,\n                                              vector unsigned int);\n\nvector unsigned long long __builtin_crypto_vpmsumb (vector unsigned long long,\n                                                    vector unsigned long long);\n\nvector unsigned long long __builtin_crypto_vshasigmad\n                               (vector unsigned long long, int, int);\n\nvector unsigned int __builtin_crypto_vshasigmaw (vector unsigned int,\n                                                 int, int);</pre> <p>The second argument to the <var>__builtin_crypto_vshasigmad</var> and <var>__builtin_crypto_vshasigmaw</var> builtin functions must be a constant integer that is 0 or 1. The third argument to these builtin functions must be a constant integer in the range of 0 to 15. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PowerPC-AltiVec_002fVSX-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PowerPC-AltiVec_002fVSX-Built_002din-Functions.html</a>\n  </p>\n</div>\n","powerpc-hardware-transactional-memory-built_002din-functions":"<h1 class=\"subsection\" id=\"PowerPC-Hardware-Transactional-Memory-Built_002din-Functions\">6.57.22 PowerPC Hardware Transactional Memory Built-in Functions</h1> <p>GCC provides two interfaces for accessing the Hardware Transactional Memory (HTM) instructions available on some of the PowerPC family of prcoessors (eg, POWER8). The two interfaces come in a low level interface, consisting of built-in functions specific to PowerPC and a higher level interface consisting of inline functions that are common between PowerPC and S/390. </p>\n<h2 class=\"subsubsection\">6.57.22.1 PowerPC HTM Low Level Built-in Functions</h2> <p>The following low level built-in functions are available with <code>-mhtm</code> or <code>-mcpu=CPU</code> where CPU is `power8' or later. They all generate the machine instruction that is part of the name. </p>\n<p>The HTM builtins (with the exception of <code>__builtin_tbegin</code>) return the full 4-bit condition register value set by their associated hardware instruction. The header file <code>htmintrin.h</code> defines some macros that can be used to decipher the return value. The <code>__builtin_tbegin</code> builtin returns a simple true or false value depending on whether a transaction was successfully started or not. The arguments of the builtins match exactly the type and order of the associated hardware instruction's operands, except for the <code>__builtin_tcheck</code> builtin, which does not take any input arguments. Refer to the ISA manual for a description of each instruction's operands. </p>\n<pre class=\"smallexample\">unsigned int __builtin_tbegin (unsigned int)\nunsigned int __builtin_tend (unsigned int)\n\nunsigned int __builtin_tabort (unsigned int)\nunsigned int __builtin_tabortdc (unsigned int, unsigned int, unsigned int)\nunsigned int __builtin_tabortdci (unsigned int, unsigned int, int)\nunsigned int __builtin_tabortwc (unsigned int, unsigned int, unsigned int)\nunsigned int __builtin_tabortwci (unsigned int, unsigned int, int)\n\nunsigned int __builtin_tcheck (void)\nunsigned int __builtin_treclaim (unsigned int)\nunsigned int __builtin_trechkpt (void)\nunsigned int __builtin_tsr (unsigned int)</pre> <p>In addition to the above HTM built-ins, we have added built-ins for some common extended mnemonics of the HTM instructions: </p>\n<pre class=\"smallexample\">unsigned int __builtin_tendall (void)\nunsigned int __builtin_tresume (void)\nunsigned int __builtin_tsuspend (void)</pre> <p>The following set of built-in functions are available to gain access to the HTM specific special purpose registers. </p>\n<pre class=\"smallexample\">unsigned long __builtin_get_texasr (void)\nunsigned long __builtin_get_texasru (void)\nunsigned long __builtin_get_tfhar (void)\nunsigned long __builtin_get_tfiar (void)\n\nvoid __builtin_set_texasr (unsigned long);\nvoid __builtin_set_texasru (unsigned long);\nvoid __builtin_set_tfhar (unsigned long);\nvoid __builtin_set_tfiar (unsigned long);</pre> <p>Example usage of these low level built-in functions may look like: </p>\n<pre class=\"smallexample\">#include &lt;htmintrin.h&gt;\n\nint num_retries = 10;\n\nwhile (1)\n  {\n    if (__builtin_tbegin (0))\n      {\n        /* Transaction State Initiated.  */\n        if (is_locked (lock))\n          __builtin_tabort (0);\n        ... transaction code...\n        __builtin_tend (0);\n        break;\n      }\n    else\n      {\n        /* Transaction State Failed.  Use locks if the transaction\n           failure is \"persistent\" or we've tried too many times.  */\n        if (num_retries-- &lt;= 0\n            || _TEXASRU_FAILURE_PERSISTENT (__builtin_get_texasru ()))\n          {\n            acquire_lock (lock);\n            ... non transactional fallback path...\n            release_lock (lock);\n            break;\n          }\n      }\n  }</pre> <p>One final built-in function has been added that returns the value of the 2-bit Transaction State field of the Machine Status Register (MSR) as stored in <code>CR0</code>. </p>\n<pre class=\"smallexample\">unsigned long __builtin_ttest (void)</pre> <p>This built-in can be used to determine the current transaction state using the following code example: </p>\n<pre class=\"smallexample\">#include &lt;htmintrin.h&gt;\n\nunsigned char tx_state = _HTM_STATE (__builtin_ttest ());\n\nif (tx_state == _HTM_TRANSACTIONAL)\n  {\n    /* Code to use in transactional state.  */\n  }\nelse if (tx_state == _HTM_NONTRANSACTIONAL)\n  {\n    /* Code to use in non-transactional state.  */\n  }\nelse if (tx_state == _HTM_SUSPENDED)\n  {\n    /* Code to use in transaction suspended state.  */\n  }</pre> <h2 class=\"subsubsection\">6.57.22.2 PowerPC HTM High Level Inline Functions</h2> <p>The following high level HTM interface is made available by including <code>&lt;htmxlintrin.h&gt;</code> and using <code>-mhtm</code> or <code>-mcpu=CPU</code> where CPU is `power8' or later. This interface is common between PowerPC and S/390, allowing users to write one HTM source implementation that can be compiled and executed on either system. </p>\n<pre class=\"smallexample\">long __TM_simple_begin (void)\nlong __TM_begin (void* const TM_buff)\nlong __TM_end (void)\nvoid __TM_abort (void)\nvoid __TM_named_abort (unsigned char const code)\nvoid __TM_resume (void)\nvoid __TM_suspend (void)\n\nlong __TM_is_user_abort (void* const TM_buff)\nlong __TM_is_named_user_abort (void* const TM_buff, unsigned char *code)\nlong __TM_is_illegal (void* const TM_buff)\nlong __TM_is_footprint_exceeded (void* const TM_buff)\nlong __TM_nesting_depth (void* const TM_buff)\nlong __TM_is_nested_too_deep(void* const TM_buff)\nlong __TM_is_conflict(void* const TM_buff)\nlong __TM_is_failure_persistent(void* const TM_buff)\nlong __TM_failure_address(void* const TM_buff)\nlong long __TM_failure_code(void* const TM_buff)</pre> <p>Using these common set of HTM inline functions, we can create a more portable version of the HTM example in the previous section that will work on either PowerPC or S/390: </p>\n<pre class=\"smallexample\">#include &lt;htmxlintrin.h&gt;\n\nint num_retries = 10;\nTM_buff_type TM_buff;\n\nwhile (1)\n  {\n    if (__TM_begin (TM_buff) == _HTM_TBEGIN_STARTED)\n      {\n        /* Transaction State Initiated.  */\n        if (is_locked (lock))\n          __TM_abort ();\n        ... transaction code...\n        __TM_end ();\n        break;\n      }\n    else\n      {\n        /* Transaction State Failed.  Use locks if the transaction\n           failure is \"persistent\" or we've tried too many times.  */\n        if (num_retries-- &lt;= 0\n            || __TM_is_failure_persistent (TM_buff))\n          {\n            acquire_lock (lock);\n            ... non transactional fallback path...\n            release_lock (lock);\n            break;\n          }\n      }\n  }</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PowerPC-Hardware-Transactional-Memory-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/PowerPC-Hardware-Transactional-Memory-Built_002din-Functions.html</a>\n  </p>\n</div>\n","rx-built_002din-functions":"<h1 class=\"subsection\" id=\"RX-Built_002din-Functions\">6.57.23 RX Built-in Functions</h1> <p>GCC supports some of the RX instructions which cannot be expressed in the C programming language via the use of built-in functions. The following functions are supported: </p>\n<div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_brk</b> (<var>void</var>) <blockquote><p>Generates the <code>brk</code> machine instruction. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_clrpsw</b> (<var>int</var>) <blockquote><p>Generates the <code>clrpsw</code> machine instruction to clear the specified bit in the processor status word. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_int</b> (<var>int</var>) <blockquote><p>Generates the <code>int</code> machine instruction to generate an interrupt with the specified value. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_machi</b> (<var>int, int</var>) <blockquote><p>Generates the <code>machi</code> machine instruction to add the result of multiplying the top 16 bits of the two arguments into the accumulator. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_maclo</b> (<var>int, int</var>) <blockquote><p>Generates the <code>maclo</code> machine instruction to add the result of multiplying the bottom 16 bits of the two arguments into the accumulator. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_mulhi</b> (<var>int, int</var>) <blockquote><p>Generates the <code>mulhi</code> machine instruction to place the result of multiplying the top 16 bits of the two arguments into the accumulator. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_mullo</b> (<var>int, int</var>) <blockquote><p>Generates the <code>mullo</code> machine instruction to place the result of multiplying the bottom 16 bits of the two arguments into the accumulator. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_rx_mvfachi</b> (<var>void</var>) <blockquote><p>Generates the <code>mvfachi</code> machine instruction to read the top 32 bits of the accumulator. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_rx_mvfacmi</b> (<var>void</var>) <blockquote><p>Generates the <code>mvfacmi</code> machine instruction to read the middle 32 bits of the accumulator. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_rx_mvfc</b> (<var>int</var>) <blockquote><p>Generates the <code>mvfc</code> machine instruction which reads the control register specified in its argument and returns its value. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_mvtachi</b> (<var>int</var>) <blockquote><p>Generates the <code>mvtachi</code> machine instruction to set the top 32 bits of the accumulator. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_mvtaclo</b> (<var>int</var>) <blockquote><p>Generates the <code>mvtaclo</code> machine instruction to set the bottom 32 bits of the accumulator. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_mvtc</b> (<var>int reg, int val</var>) <blockquote><p>Generates the <code>mvtc</code> machine instruction which sets control register number <code>reg</code> to <code>val</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_mvtipl</b> (<var>int</var>) <blockquote><p>Generates the <code>mvtipl</code> machine instruction set the interrupt priority level. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_racw</b> (<var>int</var>) <blockquote><p>Generates the <code>racw</code> machine instruction to round the accumulator according to the specified mode. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_rx_revw</b> (<var>int</var>) <blockquote><p>Generates the <code>revw</code> machine instruction which swaps the bytes in the argument so that bits 0–7 now occupy bits 8–15 and vice versa, and also bits 16–23 occupy bits 24–31 and vice versa. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_rmpa</b> (<var>void</var>) <blockquote><p>Generates the <code>rmpa</code> machine instruction which initiates a repeated multiply and accumulate sequence. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_round</b> (<var>float</var>) <blockquote><p>Generates the <code>round</code> machine instruction which returns the floating-point argument rounded according to the current rounding mode set in the floating-point status word register. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_rx_sat</b> (<var>int</var>) <blockquote><p>Generates the <code>sat</code> machine instruction which returns the saturated value of the argument. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_setpsw</b> (<var>int</var>) <blockquote><p>Generates the <code>setpsw</code> machine instruction to set the specified bit in the processor status word. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_rx_wait</b> (<var>void</var>) <blockquote><p>Generates the <code>wait</code> machine instruction. </p></blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RX-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RX-Built_002din-Functions.html</a>\n  </p>\n</div>\n","s_002f390-system-z-built_002din-functions":"<h1 class=\"subsection\" id=\"S_002f390-System-z-Built_002din-Functions\">6.57.24 S/390 System z Built-in Functions</h1> <div class=\"defun\"> — Built-in Function: int <b>__builtin_tbegin</b> (<var>void*</var>) <blockquote><p>Generates the <code>tbegin</code> machine instruction starting a non-constraint hardware transaction. If the parameter is non-NULL the memory area is used to store the transaction diagnostic buffer and will be passed as first operand to <code>tbegin</code>. This buffer can be defined using the <code>struct __htm_tdb</code> C struct defined in <code>htmintrin.h</code> and must reside on a double-word boundary. The second tbegin operand is set to <code>0xff0c</code>. This enables save/restore of all GPRs and disables aborts for FPR and AR manipulations inside the transaction body. The condition code set by the tbegin instruction is returned as integer value. The tbegin instruction by definition overwrites the content of all FPRs. The compiler will generate code which saves and restores the FPRs. For soft-float code it is recommended to used the <code>*_nofloat</code> variant. In order to prevent a TDB from being written it is required to pass an constant zero value as parameter. Passing the zero value through a variable is not sufficient. Although modifications of access registers inside the transaction will not trigger an transaction abort it is not supported to actually modify them. Access registers do not get saved when entering a transaction. They will have undefined state when reaching the abort code. </p></blockquote>\n</div> <p>Macros for the possible return codes of tbegin are defined in the <code>htmintrin.h</code> header file: </p>\n<dl> <dt><code>_HTM_TBEGIN_STARTED</code></dt>\n<dd>\n<code>tbegin</code> has been executed as part of normal processing. The transaction body is supposed to be executed. </dd>\n<dt><code>_HTM_TBEGIN_INDETERMINATE</code></dt>\n<dd>The transaction was aborted due to an indeterminate condition which might be persistent. </dd>\n<dt><code>_HTM_TBEGIN_TRANSIENT</code></dt>\n<dd>The transaction aborted due to a transient failure. The transaction should be re-executed in that case. </dd>\n<dt><code>_HTM_TBEGIN_PERSISTENT</code></dt>\n<dd>The transaction aborted due to a persistent failure. Re-execution under same circumstances will not be productive. </dd>\n</dl> <div class=\"defun\"> — Macro: <b>_HTM_FIRST_USER_ABORT_CODE</b> <blockquote><p>The <code>_HTM_FIRST_USER_ABORT_CODE</code> defined in <code>htmintrin.h</code> specifies the first abort code which can be used for <code>__builtin_tabort</code>. Values below this threshold are reserved for machine use. </p></blockquote>\n</div> <div class=\"defun\"> — Data type: <b>struct __htm_tdb</b> <blockquote><p>The <code>struct __htm_tdb</code> defined in <code>htmintrin.h</code> describes the structure of the transaction diagnostic block as specified in the Principles of Operation manual chapter 5-91. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_tbegin_nofloat</b> (<var>void*</var>) <blockquote><p>Same as <code>__builtin_tbegin</code> but without FPR saves and restores. Using this variant in code making use of FPRs will leave the FPRs in undefined state when entering the transaction abort handler code. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_tbegin_retry</b> (<var>void*, int</var>) <blockquote><p>In addition to <code>__builtin_tbegin</code> a loop for transient failures is generated. If tbegin returns a condition code of 2 the transaction will be retried as often as specified in the second argument. The perform processor assist instruction is used to tell the CPU about the number of fails so far. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_tbegin_retry_nofloat</b> (<var>void*, int</var>) <blockquote><p>Same as <code>__builtin_tbegin_retry</code> but without FPR saves and restores. Using this variant in code making use of FPRs will leave the FPRs in undefined state when entering the transaction abort handler code. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_tbeginc</b> (<var>void</var>) <blockquote><p>Generates the <code>tbeginc</code> machine instruction starting a constraint hardware transaction. The second operand is set to <code>0xff08</code>. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_tend</b> (<var>void</var>) <blockquote><p>Generates the <code>tend</code> machine instruction finishing a transaction and making the changes visible to other threads. The condition code generated by tend is returned as integer value. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_tabort</b> (<var>int</var>) <blockquote><p>Generates the <code>tabort</code> machine instruction with the specified abort code. Abort codes from 0 through 255 are reserved and will result in an error message. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_tx_assist</b> (<var>int</var>) <blockquote><p>Generates the <code>ppa rX,rY,1</code> machine instruction. Where the integer parameter is loaded into rX and a value of zero is loaded into rY. The integer parameter specifies the number of times the transaction repeatedly aborted. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: int <b>__builtin_tx_nesting_depth</b> (<var>void</var>) <blockquote><p>Generates the <code>etnd</code> machine instruction. The current nesting depth is returned as integer value. For a nesting depth of 0 the code is not executed as part of an transaction. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void <b>__builtin_non_tx_store</b> (<var>uint64_t *, uint64_t</var>) <blockquote> <p>Generates the <code>ntstg</code> machine instruction. The second argument is written to the first arguments location. The store operation will not be rolled-back in case of an transaction abort. </p>\n</blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/S_002f390-System-z-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/S_002f390-System-z-Built_002din-Functions.html</a>\n  </p>\n</div>\n","sh-built_002din-functions":"<h1 class=\"subsection\" id=\"SH-Built_002din-Functions\">6.57.25 SH Built-in Functions</h1> <p>The following built-in functions are supported on the SH1, SH2, SH3 and SH4 families of processors: </p>\n<div class=\"defun\"> — Built-in Function: void <b>__builtin_set_thread_pointer</b> (<var>void *ptr</var>) <blockquote><p>Sets the ‘<code>GBR</code>’ register to the specified value <var>ptr</var>. This is usually used by system code that manages threads and execution contexts. The compiler normally does not generate code that modifies the contents of ‘<code>GBR</code>’ and thus the value is preserved across function calls. Changing the ‘<code>GBR</code>’ value in user code must be done with caution, since the compiler might use ‘<code>GBR</code>’ in order to access thread local variables. </p></blockquote>\n</div> <div class=\"defun\"> — Built-in Function: void * <b>__builtin_thread_pointer</b> (<var>void</var>) <blockquote>\n<p>Returns the value that is currently set in the ‘<code>GBR</code>’ register. Memory loads and stores that use the thread pointer as a base address are turned into ‘<code>GBR</code>’ based displacement loads and stores, if possible. For example: </p>\n<pre class=\"smallexample\">struct my_tcb\n{\n   int a, b, c, d, e;\n};\n\nint get_tcb_value (void)\n{\n  // Generate ‘<code>mov.l @(8,gbr),r0</code>’ instruction\n  return ((my_tcb*)__builtin_thread_pointer ())-&gt;c;\n}</pre> </blockquote>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SH-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SH-Built_002din-Functions.html</a>\n  </p>\n</div>\n","sparc-vis-built_002din-functions":"<h1 class=\"subsection\" id=\"SPARC-VIS-Built_002din-Functions\">6.57.26 SPARC VIS Built-in Functions</h1> <p>GCC supports SIMD operations on the SPARC using both the generic vector extensions (see <a href=\"vector-extensions#Vector-Extensions\">Vector Extensions</a>) as well as built-in functions for the SPARC Visual Instruction Set (VIS). When you use the <code>-mvis</code> switch, the VIS extension is exposed as the following built-in functions: </p>\n<pre class=\"smallexample\">typedef int v1si __attribute__ ((vector_size (4)));\ntypedef int v2si __attribute__ ((vector_size (8)));\ntypedef short v4hi __attribute__ ((vector_size (8)));\ntypedef short v2hi __attribute__ ((vector_size (4)));\ntypedef unsigned char v8qi __attribute__ ((vector_size (8)));\ntypedef unsigned char v4qi __attribute__ ((vector_size (4)));\n\nvoid __builtin_vis_write_gsr (int64_t);\nint64_t __builtin_vis_read_gsr (void);\n\nvoid * __builtin_vis_alignaddr (void *, long);\nvoid * __builtin_vis_alignaddrl (void *, long);\nint64_t __builtin_vis_faligndatadi (int64_t, int64_t);\nv2si __builtin_vis_faligndatav2si (v2si, v2si);\nv4hi __builtin_vis_faligndatav4hi (v4si, v4si);\nv8qi __builtin_vis_faligndatav8qi (v8qi, v8qi);\n\nv4hi __builtin_vis_fexpand (v4qi);\n\nv4hi __builtin_vis_fmul8x16 (v4qi, v4hi);\nv4hi __builtin_vis_fmul8x16au (v4qi, v2hi);\nv4hi __builtin_vis_fmul8x16al (v4qi, v2hi);\nv4hi __builtin_vis_fmul8sux16 (v8qi, v4hi);\nv4hi __builtin_vis_fmul8ulx16 (v8qi, v4hi);\nv2si __builtin_vis_fmuld8sux16 (v4qi, v2hi);\nv2si __builtin_vis_fmuld8ulx16 (v4qi, v2hi);\n\nv4qi __builtin_vis_fpack16 (v4hi);\nv8qi __builtin_vis_fpack32 (v2si, v8qi);\nv2hi __builtin_vis_fpackfix (v2si);\nv8qi __builtin_vis_fpmerge (v4qi, v4qi);\n\nint64_t __builtin_vis_pdist (v8qi, v8qi, int64_t);\n\nlong __builtin_vis_edge8 (void *, void *);\nlong __builtin_vis_edge8l (void *, void *);\nlong __builtin_vis_edge16 (void *, void *);\nlong __builtin_vis_edge16l (void *, void *);\nlong __builtin_vis_edge32 (void *, void *);\nlong __builtin_vis_edge32l (void *, void *);\n\nlong __builtin_vis_fcmple16 (v4hi, v4hi);\nlong __builtin_vis_fcmple32 (v2si, v2si);\nlong __builtin_vis_fcmpne16 (v4hi, v4hi);\nlong __builtin_vis_fcmpne32 (v2si, v2si);\nlong __builtin_vis_fcmpgt16 (v4hi, v4hi);\nlong __builtin_vis_fcmpgt32 (v2si, v2si);\nlong __builtin_vis_fcmpeq16 (v4hi, v4hi);\nlong __builtin_vis_fcmpeq32 (v2si, v2si);\n\nv4hi __builtin_vis_fpadd16 (v4hi, v4hi);\nv2hi __builtin_vis_fpadd16s (v2hi, v2hi);\nv2si __builtin_vis_fpadd32 (v2si, v2si);\nv1si __builtin_vis_fpadd32s (v1si, v1si);\nv4hi __builtin_vis_fpsub16 (v4hi, v4hi);\nv2hi __builtin_vis_fpsub16s (v2hi, v2hi);\nv2si __builtin_vis_fpsub32 (v2si, v2si);\nv1si __builtin_vis_fpsub32s (v1si, v1si);\n\nlong __builtin_vis_array8 (long, long);\nlong __builtin_vis_array16 (long, long);\nlong __builtin_vis_array32 (long, long);</pre> <p>When you use the <code>-mvis2</code> switch, the VIS version 2.0 built-in functions also become available: </p>\n<pre class=\"smallexample\">long __builtin_vis_bmask (long, long);\nint64_t __builtin_vis_bshuffledi (int64_t, int64_t);\nv2si __builtin_vis_bshufflev2si (v2si, v2si);\nv4hi __builtin_vis_bshufflev2si (v4hi, v4hi);\nv8qi __builtin_vis_bshufflev2si (v8qi, v8qi);\n\nlong __builtin_vis_edge8n (void *, void *);\nlong __builtin_vis_edge8ln (void *, void *);\nlong __builtin_vis_edge16n (void *, void *);\nlong __builtin_vis_edge16ln (void *, void *);\nlong __builtin_vis_edge32n (void *, void *);\nlong __builtin_vis_edge32ln (void *, void *);</pre> <p>When you use the <code>-mvis3</code> switch, the VIS version 3.0 built-in functions also become available: </p>\n<pre class=\"smallexample\">void __builtin_vis_cmask8 (long);\nvoid __builtin_vis_cmask16 (long);\nvoid __builtin_vis_cmask32 (long);\n\nv4hi __builtin_vis_fchksm16 (v4hi, v4hi);\n\nv4hi __builtin_vis_fsll16 (v4hi, v4hi);\nv4hi __builtin_vis_fslas16 (v4hi, v4hi);\nv4hi __builtin_vis_fsrl16 (v4hi, v4hi);\nv4hi __builtin_vis_fsra16 (v4hi, v4hi);\nv2si __builtin_vis_fsll16 (v2si, v2si);\nv2si __builtin_vis_fslas16 (v2si, v2si);\nv2si __builtin_vis_fsrl16 (v2si, v2si);\nv2si __builtin_vis_fsra16 (v2si, v2si);\n\nlong __builtin_vis_pdistn (v8qi, v8qi);\n\nv4hi __builtin_vis_fmean16 (v4hi, v4hi);\n\nint64_t __builtin_vis_fpadd64 (int64_t, int64_t);\nint64_t __builtin_vis_fpsub64 (int64_t, int64_t);\n\nv4hi __builtin_vis_fpadds16 (v4hi, v4hi);\nv2hi __builtin_vis_fpadds16s (v2hi, v2hi);\nv4hi __builtin_vis_fpsubs16 (v4hi, v4hi);\nv2hi __builtin_vis_fpsubs16s (v2hi, v2hi);\nv2si __builtin_vis_fpadds32 (v2si, v2si);\nv1si __builtin_vis_fpadds32s (v1si, v1si);\nv2si __builtin_vis_fpsubs32 (v2si, v2si);\nv1si __builtin_vis_fpsubs32s (v1si, v1si);\n\nlong __builtin_vis_fucmple8 (v8qi, v8qi);\nlong __builtin_vis_fucmpne8 (v8qi, v8qi);\nlong __builtin_vis_fucmpgt8 (v8qi, v8qi);\nlong __builtin_vis_fucmpeq8 (v8qi, v8qi);\n\nfloat __builtin_vis_fhadds (float, float);\ndouble __builtin_vis_fhaddd (double, double);\nfloat __builtin_vis_fhsubs (float, float);\ndouble __builtin_vis_fhsubd (double, double);\nfloat __builtin_vis_fnhadds (float, float);\ndouble __builtin_vis_fnhaddd (double, double);\n\nint64_t __builtin_vis_umulxhi (int64_t, int64_t);\nint64_t __builtin_vis_xmulx (int64_t, int64_t);\nint64_t __builtin_vis_xmulxhi (int64_t, int64_t);</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SPARC-VIS-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SPARC-VIS-Built_002din-Functions.html</a>\n  </p>\n</div>\n","spu-built_002din-functions":"<h1 class=\"subsection\" id=\"SPU-Built_002din-Functions\">6.57.27 SPU Built-in Functions</h1> <p>GCC provides extensions for the SPU processor as described in the Sony/Toshiba/IBM SPU Language Extensions Specification, which can be found at <a href=\"http://cell.scei.co.jp/\">http://cell.scei.co.jp/</a> or <a href=\"http://www.ibm.com/developerworks/power/cell/\">http://www.ibm.com/developerworks/power/cell/</a>. GCC's implementation differs in several ways. </p>\n<ul> <li>The optional extension of specifying vector constants in parentheses is not supported. </li>\n<li>A vector initializer requires no cast if the vector constant is of the same type as the variable it is initializing. </li>\n<li>If <code>signed</code> or <code>unsigned</code> is omitted, the signedness of the vector type is the default signedness of the base type. The default varies depending on the operating system, so a portable program should always specify the signedness. </li>\n<li>By default, the keyword <code>__vector</code> is added. The macro <code>vector</code> is defined in <code>&lt;spu_intrinsics.h&gt;</code> and can be undefined. </li>\n<li>GCC allows using a <code>typedef</code> name as the type specifier for a vector type. </li>\n<li>For C, overloaded functions are implemented with macros so the following does not work: <pre class=\"smallexample\">spu_add ((vector signed int){1, 2, 3, 4}, foo);</pre> <p class=\"noindent\">Since <code>spu_add</code> is a macro, the vector constant in the example is treated as four separate arguments. Wrap the entire argument in parentheses for this to work. </p>\n</li>\n<li>The extended version of <code>__builtin_expect</code> is not supported. </li>\n</ul> <p><em>Note:</em> Only the interface described in the aforementioned specification is supported. Internally, GCC uses built-in functions to implement the required functionality, but these are not supported and are subject to change without notice. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SPU-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/SPU-Built_002din-Functions.html</a>\n  </p>\n</div>\n","ti-c6x-built_002din-functions":"<h1 class=\"subsection\" id=\"TI-C6X-Built_002din-Functions\">6.57.28 TI C6X Built-in Functions</h1> <p>GCC provides intrinsics to access certain instructions of the TI C6X processors. These intrinsics, listed below, are available after inclusion of the <code>c6x_intrinsics.h</code> header file. They map directly to C6X instructions. </p>\n<pre class=\"smallexample\">int _sadd (int, int)\nint _ssub (int, int)\nint _sadd2 (int, int)\nint _ssub2 (int, int)\nlong long _mpy2 (int, int)\nlong long _smpy2 (int, int)\nint _add4 (int, int)\nint _sub4 (int, int)\nint _saddu4 (int, int)\n\nint _smpy (int, int)\nint _smpyh (int, int)\nint _smpyhl (int, int)\nint _smpylh (int, int)\n\nint _sshl (int, int)\nint _subc (int, int)\n\nint _avg2 (int, int)\nint _avgu4 (int, int)\n\nint _clrr (int, int)\nint _extr (int, int)\nint _extru (int, int)\nint _abs (int)\nint _abs2 (int)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TI-C6X-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TI-C6X-Built_002din-Functions.html</a>\n  </p>\n</div>\n","tile_002dgx-built_002din-functions":"<h1 class=\"subsection\" id=\"TILE_002dGx-Built_002din-Functions\">6.57.29 TILE-Gx Built-in Functions</h1> <p>GCC provides intrinsics to access every instruction of the TILE-Gx processor. The intrinsics are of the form: </p>\n<pre class=\"smallexample\">unsigned long long __insn_<var>op</var> (...)</pre> <p>Where <var>op</var> is the name of the instruction. Refer to the ISA manual for the complete list of instructions. </p>\n<p>GCC also provides intrinsics to directly access the network registers. The intrinsics are: </p>\n<pre class=\"smallexample\">unsigned long long __tile_idn0_receive (void)\nunsigned long long __tile_idn1_receive (void)\nunsigned long long __tile_udn0_receive (void)\nunsigned long long __tile_udn1_receive (void)\nunsigned long long __tile_udn2_receive (void)\nunsigned long long __tile_udn3_receive (void)\nvoid __tile_idn_send (unsigned long long)\nvoid __tile_udn_send (unsigned long long)</pre> <p>The intrinsic <code>void __tile_network_barrier (void)</code> is used to guarantee that no network operations before it are reordered with those after it. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TILE_002dGx-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TILE_002dGx-Built_002din-Functions.html</a>\n  </p>\n</div>\n","tilepro-built_002din-functions":"<h1 class=\"subsection\" id=\"TILEPro-Built_002din-Functions\">6.57.30 TILEPro Built-in Functions</h1> <p>GCC provides intrinsics to access every instruction of the TILEPro processor. The intrinsics are of the form: </p>\n<pre class=\"smallexample\">unsigned __insn_<var>op</var> (...)</pre> <p class=\"noindent\">where <var>op</var> is the name of the instruction. Refer to the ISA manual for the complete list of instructions. </p>\n<p>GCC also provides intrinsics to directly access the network registers. The intrinsics are: </p>\n<pre class=\"smallexample\">unsigned __tile_idn0_receive (void)\nunsigned __tile_idn1_receive (void)\nunsigned __tile_sn_receive (void)\nunsigned __tile_udn0_receive (void)\nunsigned __tile_udn1_receive (void)\nunsigned __tile_udn2_receive (void)\nunsigned __tile_udn3_receive (void)\nvoid __tile_idn_send (unsigned)\nvoid __tile_sn_send (unsigned)\nvoid __tile_udn_send (unsigned)</pre> <p>The intrinsic <code>void __tile_network_barrier (void)</code> is used to guarantee that no network operations before it are reordered with those after it. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TILEPro-Built_002din-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/TILEPro-Built_002din-Functions.html</a>\n  </p>\n</div>\n","target-format-checks":"<h1 class=\"section\" id=\"Target-Format-Checks\">6.58 Format Checks Specific to Particular Target Machines</h1> <p>For some target machines, GCC supports additional options to the format attribute (see <a href=\"function-attributes#Function-Attributes\">Declaring Attributes of Functions</a>). </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"solaris-format-checks#Solaris-Format-Checks\">Solaris Format Checks</a> </li>\n<li>\n<a accesskey=\"2\" href=\"darwin-format-checks#Darwin-Format-Checks\">Darwin Format Checks</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Target-Format-Checks.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Target-Format-Checks.html</a>\n  </p>\n</div>\n","solaris-format-checks":"<h1 class=\"subsection\" id=\"Solaris-Format-Checks\">6.58.1 Solaris Format Checks</h1> <p>Solaris targets support the <code>cmn_err</code> (or <code>__cmn_err__</code>) format check. <code>cmn_err</code> accepts a subset of the standard <code>printf</code> conversions, and the two-argument <code>%b</code> conversion for displaying bit-fields. See the Solaris man page for <code>cmn_err</code> for more information. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Solaris-Format-Checks.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Solaris-Format-Checks.html</a>\n  </p>\n</div>\n","darwin-format-checks":"<h1 class=\"subsection\" id=\"Darwin-Format-Checks\">6.58.2 Darwin Format Checks</h1> <p>Darwin targets support the <code>CFString</code> (or <code>__CFString__</code>) in the format attribute context. Declarations made with such attribution are parsed for correct syntax and format argument types. However, parsing of the format string itself is currently undefined and is not carried out by this version of the compiler. </p>\n<p>Additionally, <code>CFStringRefs</code> (defined by the <code>CoreFoundation</code> headers) may also be used as format arguments. Note that the relevant headers are only likely to be available on Darwin (OSX) installations. On such installations, the XCode and system documentation provide descriptions of <code>CFString</code>, <code>CFStringRefs</code> and associated functions. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Darwin-Format-Checks.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Darwin-Format-Checks.html</a>\n  </p>\n</div>\n","pragmas":"<h1 class=\"section\" id=\"Pragmas\">6.59 Pragmas Accepted by GCC</h1> <p> GCC supports several types of pragmas, primarily in order to compile code originally written for other compilers. Note that in general we do not recommend the use of pragmas; See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, for further explanation. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"arm-pragmas#ARM-Pragmas\">ARM Pragmas</a> </li>\n<li>\n<a accesskey=\"2\" href=\"m32c-pragmas#M32C-Pragmas\">M32C Pragmas</a> </li>\n<li>\n<a accesskey=\"3\" href=\"mep-pragmas#MeP-Pragmas\">MeP Pragmas</a> </li>\n<li>\n<a accesskey=\"4\" href=\"rs_002f6000-and-powerpc-pragmas#RS_002f6000-and-PowerPC-Pragmas\">RS/6000 and PowerPC Pragmas</a> </li>\n<li>\n<a accesskey=\"5\" href=\"darwin-pragmas#Darwin-Pragmas\">Darwin Pragmas</a> </li>\n<li>\n<a accesskey=\"6\" href=\"solaris-pragmas#Solaris-Pragmas\">Solaris Pragmas</a> </li>\n<li>\n<a accesskey=\"7\" href=\"symbol_002drenaming-pragmas#Symbol_002dRenaming-Pragmas\">Symbol-Renaming Pragmas</a> </li>\n<li>\n<a accesskey=\"8\" href=\"structure_002dpacking-pragmas#Structure_002dPacking-Pragmas\">Structure-Packing Pragmas</a> </li>\n<li>\n<a accesskey=\"9\" href=\"weak-pragmas#Weak-Pragmas\">Weak Pragmas</a> </li>\n<li>\n<a href=\"diagnostic-pragmas#Diagnostic-Pragmas\">Diagnostic Pragmas</a> </li>\n<li>\n<a href=\"visibility-pragmas#Visibility-Pragmas\">Visibility Pragmas</a> </li>\n<li>\n<a href=\"push_002fpop-macro-pragmas#Push_002fPop-Macro-Pragmas\">Push/Pop Macro Pragmas</a> </li>\n<li>\n<a href=\"function-specific-option-pragmas#Function-Specific-Option-Pragmas\">Function Specific Option Pragmas</a> </li>\n<li>\n<a href=\"loop_002dspecific-pragmas#Loop_002dSpecific-Pragmas\">Loop-Specific Pragmas</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Pragmas.html</a>\n  </p>\n</div>\n","arm-pragmas":"<h1 class=\"subsection\" id=\"ARM-Pragmas\">6.59.1 ARM Pragmas</h1> <p>The ARM target defines pragmas for controlling the default addition of <code>long_call</code> and <code>short_call</code> attributes to functions. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, for information about the effects of these attributes. </p>\n<dl> <dt><code>long_calls</code></dt>\n<dd>\nSet all subsequent functions to have the <code>long_call</code> attribute. </dd>\n<dt><code>no_long_calls</code></dt>\n<dd>\nSet all subsequent functions to have the <code>short_call</code> attribute. </dd>\n<dt><code>long_calls_off</code></dt>\n<dd>\nDo not affect the <code>long_call</code> or <code>short_call</code> attributes of subsequent functions. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/ARM-Pragmas.html</a>\n  </p>\n</div>\n","m32c-pragmas":"<h1 class=\"subsection\" id=\"M32C-Pragmas\">6.59.2 M32C Pragmas</h1> <dl> <dt>\n<code>GCC memregs </code><var>number</var>\n</dt>\n<dd>\nOverrides the command-line option <code>-memregs=</code> for the current file. Use with care! This pragma must be before any function in the file, and mixing different memregs values in different objects may make them incompatible. This pragma is useful when a performance-critical function uses a memreg for temporary values, as it may allow you to reduce the number of memregs used. </dd>\n<dt>\n<code>ADDRESS </code><var>name</var> <var>address</var>\n</dt>\n<dd>\nFor any declared symbols matching <var>name</var>, this does three things to that symbol: it forces the symbol to be located at the given address (a number), it forces the symbol to be volatile, and it changes the symbol's scope to be static. This pragma exists for compatibility with other compilers, but note that the common <code>1234H</code> numeric syntax is not supported (use <code>0x1234</code> instead). Example: <pre class=\"smallexample\">#pragma ADDRESS port3 0x103\nchar port3;</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/M32C-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/M32C-Pragmas.html</a>\n  </p>\n</div>\n","mep-pragmas":"<h1 class=\"subsection\" id=\"MeP-Pragmas\">6.59.3 MeP Pragmas</h1> <dl> <dt><code>custom io_volatile (on|off)</code></dt>\n<dd>\nOverrides the command-line option <code>-mio-volatile</code> for the current file. Note that for compatibility with future GCC releases, this option should only be used once before any <code>io</code> variables in each file. </dd>\n<dt>\n<code>GCC coprocessor available </code><var>registers</var>\n</dt>\n<dd>\nSpecifies which coprocessor registers are available to the register allocator. <var>registers</var> may be a single register, register range separated by ellipses, or comma-separated list of those. Example: <pre class=\"smallexample\">#pragma GCC coprocessor available $c0...$c10, $c28</pre> </dd>\n<dt>\n<code>GCC coprocessor call_saved </code><var>registers</var>\n</dt>\n<dd>\nSpecifies which coprocessor registers are to be saved and restored by any function using them. <var>registers</var> may be a single register, register range separated by ellipses, or comma-separated list of those. Example: <pre class=\"smallexample\">#pragma GCC coprocessor call_saved $c4...$c6, $c31</pre> </dd>\n<dt>\n<code>GCC coprocessor subclass '(A|B|C|D)' = </code><var>registers</var>\n</dt>\n<dd>\nCreates and defines a register class. These register classes can be used by inline <code>asm</code> constructs. <var>registers</var> may be a single register, register range separated by ellipses, or comma-separated list of those. Example: <pre class=\"smallexample\">#pragma GCC coprocessor subclass 'B' = $c2, $c4, $c6\n\nasm (\"cpfoo %0\" : \"=B\" (x));</pre> </dd>\n<dt>\n<code>GCC disinterrupt </code><var>name</var><code> , </code><var>name</var><code> ...</code>\n</dt>\n<dd>\nFor the named functions, the compiler adds code to disable interrupts for the duration of those functions. If any functions so named are not encountered in the source, a warning is emitted that the pragma is not used. Examples: <pre class=\"smallexample\">#pragma disinterrupt foo\n#pragma disinterrupt bar, grill\nint foo () { ... }</pre> </dd>\n<dt>\n<code>GCC call </code><var>name</var><code> , </code><var>name</var><code> ...</code>\n</dt>\n<dd>\nFor the named functions, the compiler always uses a register-indirect call model when calling the named functions. Examples: <pre class=\"smallexample\">extern int foo ();\n#pragma call foo</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MeP-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/MeP-Pragmas.html</a>\n  </p>\n</div>\n","rs_002f6000-and-powerpc-pragmas":"<h1 class=\"subsection\" id=\"RS_002f6000-and-PowerPC-Pragmas\">6.59.4 RS/6000 and PowerPC Pragmas</h1> <p>The RS/6000 and PowerPC targets define one pragma for controlling whether or not the <code>longcall</code> attribute is added to function declarations by default. This pragma overrides the <code>-mlongcall</code> option, but not the <code>longcall</code> and <code>shortcall</code> attributes. See <a href=\"rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options\">RS/6000 and PowerPC Options</a>, for more information about when long calls are and are not necessary. </p>\n<dl> <dt><code>longcall (1)</code></dt>\n<dd>\nApply the <code>longcall</code> attribute to all subsequent function declarations. </dd>\n<dt><code>longcall (0)</code></dt>\n<dd>Do not apply the <code>longcall</code> attribute to subsequent function declarations. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RS_002f6000-and-PowerPC-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/RS_002f6000-and-PowerPC-Pragmas.html</a>\n  </p>\n</div>\n","darwin-pragmas":"<h1 class=\"subsection\" id=\"Darwin-Pragmas\">6.59.5 Darwin Pragmas</h1> <p>The following pragmas are available for all architectures running the Darwin operating system. These are useful for compatibility with other Mac OS compilers. </p>\n<dl> <dt>\n<code>mark </code><var>tokens</var><code>...</code>\n</dt>\n<dd>\nThis pragma is accepted, but has no effect. </dd>\n<dt>\n<code>options align=</code><var>alignment</var>\n</dt>\n<dd>\nThis pragma sets the alignment of fields in structures. The values of <var>alignment</var> may be <code>mac68k</code>, to emulate m68k alignment, or <code>power</code>, to emulate PowerPC alignment. Uses of this pragma nest properly; to restore the previous setting, use <code>reset</code> for the <var>alignment</var>. </dd>\n<dt>\n<code>segment </code><var>tokens</var><code>...</code>\n</dt>\n<dd>\nThis pragma is accepted, but has no effect. </dd>\n<dt>\n<code>unused (</code><var>var</var><code> [, </code><var>var</var><code>]...)</code>\n</dt>\n<dd>\nThis pragma declares variables to be possibly unused. GCC does not produce warnings for the listed variables. The effect is similar to that of the <code>unused</code> attribute, except that this pragma may appear anywhere within the variables' scopes. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Darwin-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Darwin-Pragmas.html</a>\n  </p>\n</div>\n","solaris-pragmas":"<h1 class=\"subsection\" id=\"Solaris-Pragmas\">6.59.6 Solaris Pragmas</h1> <p>The Solaris target supports <code>#pragma redefine_extname</code> (see <a href=\"symbol_002drenaming-pragmas#Symbol_002dRenaming-Pragmas\">Symbol-Renaming Pragmas</a>). It also supports additional <code>#pragma</code> directives for compatibility with the system compiler. </p>\n<dl> <dt>\n<code>align </code><var>alignment</var><code> (</code><var>variable</var><code> [, </code><var>variable</var><code>]...)</code>\n</dt>\n<dd>\n Increase the minimum alignment of each <var>variable</var> to <var>alignment</var>. This is the same as GCC's <code>aligned</code> attribute see <a href=\"variable-attributes#Variable-Attributes\">Variable Attributes</a>). Macro expansion occurs on the arguments to this pragma when compiling C and Objective-C. It does not currently occur when compiling C++, but this is a bug which may be fixed in a future release. </dd>\n<dt>\n<code>fini (</code><var>function</var><code> [, </code><var>function</var><code>]...)</code>\n</dt>\n<dd>\n This pragma causes each listed <var>function</var> to be called after main, or during shared module unloading, by adding a call to the <code>.fini</code> section. </dd>\n<dt>\n<code>init (</code><var>function</var><code> [, </code><var>function</var><code>]...)</code>\n</dt>\n<dd>\n This pragma causes each listed <var>function</var> to be called during initialization (before <code>main</code>) or during shared module loading, by adding a call to the <code>.init</code> section. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Solaris-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Solaris-Pragmas.html</a>\n  </p>\n</div>\n","symbol_002drenaming-pragmas":"<h1 class=\"subsection\" id=\"Symbol_002dRenaming-Pragmas\">6.59.7 Symbol-Renaming Pragmas</h1> <p>For compatibility with the Solaris system headers, GCC supports two <code>#pragma</code> directives that change the name used in assembly for a given declaration. To get this effect on all platforms supported by GCC, use the asm labels extension (see <a href=\"asm-labels#Asm-Labels\">Asm Labels</a>). </p>\n<dl> <dt>\n<code>redefine_extname </code><var>oldname</var> <var>newname</var>\n</dt>\n<dd>\n This pragma gives the C function <var>oldname</var> the assembly symbol <var>newname</var>. The preprocessor macro <code>__PRAGMA_REDEFINE_EXTNAME</code> is defined if this pragma is available (currently on all platforms). </dd>\n</dl> <p>This pragma and the asm labels extension interact in a complicated manner. Here are some corner cases you may want to be aware of. </p>\n<ol type=\"1\" start=\"1\"> <li>Both pragmas silently apply only to declarations with external linkage. Asm labels do not have this restriction. </li>\n<li>In C++, both pragmas silently apply only to declarations with “C” linkage. Again, asm labels do not have this restriction. </li>\n<li>If any of the three ways of changing the assembly name of a declaration is applied to a declaration whose assembly name has already been determined (either by a previous use of one of these features, or because the compiler needed the assembly name in order to generate code), and the new name is different, a warning issues and the name does not change. </li>\n<li>The <var>oldname</var> used by <code>#pragma redefine_extname</code> is always the C-language name. </li>\n</ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Symbol_002dRenaming-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Symbol_002dRenaming-Pragmas.html</a>\n  </p>\n</div>\n","structure_002dpacking-pragmas":"<h1 class=\"subsection\" id=\"Structure_002dPacking-Pragmas\">6.59.8 Structure-Packing Pragmas</h1> <p>For compatibility with Microsoft Windows compilers, GCC supports a set of <code>#pragma</code> directives that change the maximum alignment of members of structures (other than zero-width bit-fields), unions, and classes subsequently defined. The <var>n</var> value below always is required to be a small power of two and specifies the new alignment in bytes. </p>\n<ol type=\"1\" start=\"1\"> <li>\n<code>#pragma pack(</code><var>n</var><code>)</code> simply sets the new alignment. </li>\n<li>\n<code>#pragma pack()</code> sets the alignment to the one that was in effect when compilation started (see also command-line option <samp><span class=\"option\">-fpack-struct[=</span><var>n</var><span class=\"option\">]</span></samp> see <a href=\"code-gen-options#Code-Gen-Options\">Code Gen Options</a>). </li>\n<li>\n<code>#pragma pack(push[,</code><var>n</var><code>])</code> pushes the current alignment setting on an internal stack and then optionally sets the new alignment. </li>\n<li>\n<code>#pragma pack(pop)</code> restores the alignment setting to the one saved at the top of the internal stack (and removes that stack entry). Note that <code>#pragma pack([</code><var>n</var><code>])</code> does not influence this internal stack; thus it is possible to have <code>#pragma pack(push)</code> followed by multiple <code>#pragma pack(</code><var>n</var><code>)</code> instances and finalized by a single <code>#pragma pack(pop)</code>. </li>\n</ol> <p>Some targets, e.g. i386 and PowerPC, support the <code>ms_struct</code> <code>#pragma</code> which lays out a structure as the documented <code>__attribute__ ((ms_struct))</code>. </p>\n<ol type=\"1\" start=\"1\"> <li>\n<code>#pragma ms_struct on</code> turns on the layout for structures declared. </li>\n<li>\n<code>#pragma ms_struct off</code> turns off the layout for structures declared. </li>\n<li>\n<code>#pragma ms_struct reset</code> goes back to the default layout. </li>\n</ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Structure_002dPacking-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Structure_002dPacking-Pragmas.html</a>\n  </p>\n</div>\n","weak-pragmas":"<h1 class=\"subsection\" id=\"Weak-Pragmas\">6.59.9 Weak Pragmas</h1> <p>For compatibility with SVR4, GCC supports a set of <code>#pragma</code> directives for declaring symbols to be weak, and defining weak aliases. </p>\n<dl> <dt>\n<code>#pragma weak </code><var>symbol</var>\n</dt>\n<dd>\nThis pragma declares <var>symbol</var> to be weak, as if the declaration had the attribute of the same name. The pragma may appear before or after the declaration of <var>symbol</var>. It is not an error for <var>symbol</var> to never be defined at all. </dd>\n<dt>\n<code>#pragma weak </code><var>symbol1</var><code> = </code><var>symbol2</var>\n</dt>\n<dd>This pragma declares <var>symbol1</var> to be a weak alias of <var>symbol2</var>. It is an error if <var>symbol2</var> is not defined in the current translation unit. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Weak-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Weak-Pragmas.html</a>\n  </p>\n</div>\n","diagnostic-pragmas":"<h1 class=\"subsection\" id=\"Diagnostic-Pragmas\">6.59.10 Diagnostic Pragmas</h1> <p>GCC allows the user to selectively enable or disable certain types of diagnostics, and change the kind of the diagnostic. For example, a project's policy might require that all sources compile with <code>-Werror</code> but certain files might have exceptions allowing specific types of warnings. Or, a project might selectively enable diagnostics and treat them as errors depending on which preprocessor macros are defined. </p>\n<dl> <dt>\n<code>#pragma GCC diagnostic </code><var>kind</var> <var>option</var>\n</dt>\n<dd>\n Modifies the disposition of a diagnostic. Note that not all diagnostics are modifiable; at the moment only warnings (normally controlled by ‘<code>-W...</code>’) can be controlled, and not all of them. Use <code>-fdiagnostics-show-option</code> to determine which diagnostics are controllable and which option controls them. <p><var>kind</var> is ‘<code>error</code>’ to treat this diagnostic as an error, ‘<code>warning</code>’ to treat it like a warning (even if <code>-Werror</code> is in effect), or ‘<code>ignored</code>’ if the diagnostic is to be ignored. <var>option</var> is a double quoted string that matches the command-line option. </p>\n<pre class=\"smallexample\">#pragma GCC diagnostic warning \"-Wformat\"\n#pragma GCC diagnostic error \"-Wformat\"\n#pragma GCC diagnostic ignored \"-Wformat\"</pre> <p>Note that these pragmas override any command-line options. GCC keeps track of the location of each pragma, and issues diagnostics according to the state as of that point in the source file. Thus, pragmas occurring after a line do not affect diagnostics caused by that line. </p>\n</dd>\n<dt>\n<code>#pragma GCC diagnostic push</code><dt><code>#pragma GCC diagnostic pop</code></dt>\n</dt>\n<dd> Causes GCC to remember the state of the diagnostics as of each <code>push</code>, and restore to that point at each <code>pop</code>. If a <code>pop</code> has no matching <code>push</code>, the command-line options are restored. <pre class=\"smallexample\">#pragma GCC diagnostic error \"-Wuninitialized\"\n  foo(a);                       /* error is given for this one */\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wuninitialized\"\n  foo(b);                       /* no diagnostic for this one */\n#pragma GCC diagnostic pop\n  foo(c);                       /* error is given for this one */\n#pragma GCC diagnostic pop\n  foo(d);                       /* depends on command-line options */</pre> </dd>\n</dl> <p>GCC also offers a simple mechanism for printing messages during compilation. </p>\n<dl> <dt>\n<code>#pragma message </code><var>string</var>\n</dt>\n<dd>\n Prints <var>string</var> as a compiler message on compilation. The message is informational only, and is neither a compilation warning nor an error. <pre class=\"smallexample\">#pragma message \"Compiling \" __FILE__ \"...\"</pre> <p><var>string</var> may be parenthesized, and is printed with location information. For example, </p>\n<pre class=\"smallexample\">#define DO_PRAGMA(x) _Pragma (#x)\n#define TODO(x) DO_PRAGMA(message (\"TODO - \" #x))\n\nTODO(Remember to fix this)</pre> <p class=\"noindent\">prints ‘<code>/tmp/file.c:4: note: #pragma message: TODO - Remember to fix this</code>’. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Diagnostic-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Diagnostic-Pragmas.html</a>\n  </p>\n</div>\n","visibility-pragmas":"<h1 class=\"subsection\" id=\"Visibility-Pragmas\">6.59.11 Visibility Pragmas</h1> <dl> <dt>\n<code>#pragma GCC visibility push(</code><var>visibility</var><code>)</code><dt><code>#pragma GCC visibility pop</code></dt>\n</dt>\n<dd>\n This pragma allows the user to set the visibility for multiple declarations without having to give each a visibility attribute See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, for more information about visibility and the attribute syntax. <p>In C++, ‘<code>#pragma GCC visibility</code>’ affects only namespace-scope declarations. Class members and template specializations are not affected; if you want to override the visibility for a particular member or instantiation, you must use an attribute. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Visibility-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Visibility-Pragmas.html</a>\n  </p>\n</div>\n","push_002fpop-macro-pragmas":"<h1 class=\"subsection\" id=\"Push_002fPop-Macro-Pragmas\">6.59.12 Push/Pop Macro Pragmas</h1> <p>For compatibility with Microsoft Windows compilers, GCC supports ‘<samp><span class=\"samp\">#pragma push_macro(</span><var>\"macro_name\"</var><span class=\"samp\">)</span></samp>’ and ‘<samp><span class=\"samp\">#pragma pop_macro(</span><var>\"macro_name\"</var><span class=\"samp\">)</span></samp>’. </p>\n<dl> <dt>\n<code>#pragma push_macro(</code><var>\"macro_name\"</var><code>)</code>\n</dt>\n<dd>\nThis pragma saves the value of the macro named as <var>macro_name</var> to the top of the stack for this macro. </dd>\n<dt>\n<code>#pragma pop_macro(</code><var>\"macro_name\"</var><code>)</code>\n</dt>\n<dd>\nThis pragma sets the value of the macro named as <var>macro_name</var> to the value on top of the stack for this macro. If the stack for <var>macro_name</var> is empty, the value of the macro remains unchanged. </dd>\n</dl> <p>For example: </p>\n<pre class=\"smallexample\">#define X  1\n#pragma push_macro(\"X\")\n#undef X\n#define X -1\n#pragma pop_macro(\"X\")\nint x [X];</pre> <p class=\"noindent\">In this example, the definition of X as 1 is saved by <code>#pragma\npush_macro</code> and restored by <code>#pragma pop_macro</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Push_002fPop-Macro-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Push_002fPop-Macro-Pragmas.html</a>\n  </p>\n</div>\n","function-specific-option-pragmas":"<h1 class=\"subsection\" id=\"Function-Specific-Option-Pragmas\">6.59.13 Function Specific Option Pragmas</h1> <dl> <dt>\n<code>#pragma GCC target (</code><var>\"string\"</var><code>...)</code>\n</dt>\n<dd>\n This pragma allows you to set target specific options for functions defined later in the source file. One or more strings can be specified. Each function that is defined after this point is as if <code>attribute((target(\"STRING\")))</code> was specified for that function. The parenthesis around the options is optional. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, for more information about the <code>target</code> attribute and the attribute syntax. <p>The <code>#pragma GCC target</code> pragma is presently implemented for i386/x86_64, PowerPC, and Nios II targets only. </p>\n</dd>\n</dl> <dl> <dt>\n<code>#pragma GCC optimize (</code><var>\"string\"</var><code>...)</code>\n</dt>\n<dd>\n This pragma allows you to set global optimization options for functions defined later in the source file. One or more strings can be specified. Each function that is defined after this point is as if <code>attribute((optimize(\"STRING\")))</code> was specified for that function. The parenthesis around the options is optional. See <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>, for more information about the <code>optimize</code> attribute and the attribute syntax. <p>The ‘<code>#pragma GCC optimize</code>’ pragma is not implemented in GCC versions earlier than 4.4. </p>\n</dd>\n</dl> <dl> <dt>\n<code>#pragma GCC push_options</code><dt><code>#pragma GCC pop_options</code></dt>\n</dt>\n<dd>\n These pragmas maintain a stack of the current target and optimization options. It is intended for include files where you temporarily want to switch to using a different ‘<code>#pragma GCC target</code>’ or ‘<code>#pragma GCC optimize</code>’ and then to pop back to the previous options. <p>The ‘<code>#pragma GCC push_options</code>’ and ‘<code>#pragma GCC pop_options</code>’ pragmas are not implemented in GCC versions earlier than 4.4. </p>\n</dd>\n</dl> <dl> <dt><code>#pragma GCC reset_options</code></dt>\n<dd>\n This pragma clears the current <code>#pragma GCC target</code> and <code>#pragma GCC optimize</code> to use the default switches as specified on the command line. <p>The ‘<code>#pragma GCC reset_options</code>’ pragma is not implemented in GCC versions earlier than 4.4. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Specific-Option-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Specific-Option-Pragmas.html</a>\n  </p>\n</div>\n","loop_002dspecific-pragmas":"<h1 class=\"subsection\" id=\"Loop_002dSpecific-Pragmas\">6.59.14 Loop-Specific Pragmas</h1> <dl> <dt><code>#pragma GCC ivdep</code></dt>\n\n</dl> <p>With this pragma, the programmer asserts that there are no loop-carried dependencies which would prevent that consecutive iterations of the following loop can be executed concurrently with SIMD (single instruction multiple data) instructions. </p>\n<p>For example, the compiler can only unconditionally vectorize the following loop with the pragma: </p>\n<pre class=\"smallexample\">void foo (int n, int *a, int *b, int *c)\n{\n  int i, j;\n#pragma GCC ivdep\n  for (i = 0; i &lt; n; ++i)\n    a[i] = b[i] + c[i];\n}</pre> <p class=\"noindent\">In this example, using the <code>restrict</code> qualifier had the same effect. In the following example, that would not be possible. Assume k &lt; -m or k &gt;= m. Only with the pragma, the compiler knows that it can unconditionally vectorize the following loop: </p>\n<pre class=\"smallexample\">void ignore_vec_dep (int *a, int k, int c, int m)\n{\n#pragma GCC ivdep\n  for (int i = 0; i &lt; m; i++)\n    a[i] = a[i + k] * c;\n}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Loop_002dSpecific-Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Loop_002dSpecific-Pragmas.html</a>\n  </p>\n</div>\n","unnamed-fields":"<h1 class=\"section\" id=\"Unnamed-Fields\">6.60 Unnamed struct/union fields within structs/unions</h1> <p> As permitted by ISO C11 and for compatibility with other compilers, GCC allows you to define a structure or union that contains, as fields, structures and unions without names. For example: </p>\n<pre class=\"smallexample\">struct {\n  int a;\n  union {\n    int b;\n    float c;\n  };\n  int d;\n} foo;</pre> <p class=\"noindent\">In this example, you are able to access members of the unnamed union with code like ‘<code>foo.b</code>’. Note that only unnamed structs and unions are allowed, you may not have, for example, an unnamed <code>int</code>. </p>\n<p>You must never create such structures that cause ambiguous field definitions. For example, in this structure: </p>\n<pre class=\"smallexample\">struct {\n  int a;\n  struct {\n    int a;\n  };\n} foo;</pre> <p class=\"noindent\">it is ambiguous which <code>a</code> is being referred to with ‘<code>foo.a</code>’. The compiler gives errors for such constructs. </p>\n<p>Unless <code>-fms-extensions</code> is used, the unnamed field must be a structure or union definition without a tag (for example, ‘<code>struct { int a; };</code>’). If <code>-fms-extensions</code> is used, the field may also be a definition with a tag such as ‘<code>struct foo { int a; };</code>’, a reference to a previously defined structure or union such as ‘<code>struct foo;</code>’, or a reference to a <code>typedef</code> name for a previously defined structure or union type. </p>\n<p>The option <code>-fplan9-extensions</code> enables <code>-fms-extensions</code> as well as two other extensions. First, a pointer to a structure is automatically converted to a pointer to an anonymous field for assignments and function calls. For example: </p>\n<pre class=\"smallexample\">struct s1 { int a; };\nstruct s2 { struct s1; };\nextern void f1 (struct s1 *);\nvoid f2 (struct s2 *p) { f1 (p); }</pre> <p class=\"noindent\">In the call to <code>f1</code> inside <code>f2</code>, the pointer <code>p</code> is converted into a pointer to the anonymous field. </p>\n<p>Second, when the type of an anonymous field is a <code>typedef</code> for a <code>struct</code> or <code>union</code>, code may refer to the field using the name of the <code>typedef</code>. </p>\n<pre class=\"smallexample\">typedef struct { int a; } s1;\nstruct s2 { s1; };\ns1 f1 (struct s2 *p) { return p-&gt;s1; }</pre> <p>These usages are only permitted when they are not ambiguous. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Unnamed-Fields.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Unnamed-Fields.html</a>\n  </p>\n</div>\n","thread_002dlocal":"<h1 class=\"section\" id=\"Thread_002dLocal\">6.61 Thread-Local Storage</h1> <p> Thread-local storage (TLS) is a mechanism by which variables are allocated such that there is one instance of the variable per extant thread. The runtime model GCC uses to implement this originates in the IA-64 processor-specific ABI, but has since been migrated to other processors as well. It requires significant support from the linker (<code>ld</code>), dynamic linker (<code>ld.so</code>), and system libraries (<code>libc.so</code> and <code>libpthread.so</code>), so it is not available everywhere. </p>\n<p>At the user level, the extension is visible with a new storage class keyword: <code>__thread</code>. For example: </p>\n<pre class=\"smallexample\">__thread int i;\nextern __thread struct state s;\nstatic __thread char *p;</pre> <p>The <code>__thread</code> specifier may be used alone, with the <code>extern</code> or <code>static</code> specifiers, but with no other storage class specifier. When used with <code>extern</code> or <code>static</code>, <code>__thread</code> must appear immediately after the other storage class specifier. </p>\n<p>The <code>__thread</code> specifier may be applied to any global, file-scoped static, function-scoped static, or static data member of a class. It may not be applied to block-scoped automatic or non-static data member. </p>\n<p>When the address-of operator is applied to a thread-local variable, it is evaluated at run time and returns the address of the current thread's instance of that variable. An address so obtained may be used by any thread. When a thread terminates, any pointers to thread-local variables in that thread become invalid. </p>\n<p>No static initialization may refer to the address of a thread-local variable. </p>\n<p>In C++, if an initializer is present for a thread-local variable, it must be a <var>constant-expression</var>, as defined in 5.19.2 of the ANSI/ISO C++ standard. </p>\n<p>See <a href=\"http://www.akkadia.org/drepper/tls.pdf\">ELF Handling For Thread-Local Storage</a> for a detailed explanation of the four thread-local storage addressing models, and how the runtime is expected to function. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"c99-thread_002dlocal-edits#C99-Thread_002dLocal-Edits\">C99 Thread-Local Edits</a> </li>\n<li>\n<a accesskey=\"2\" href=\"c_002b_002b98-thread_002dlocal-edits#C_002b_002b98-Thread_002dLocal-Edits\">C++98 Thread-Local Edits</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Thread_002dLocal.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Thread_002dLocal.html</a>\n  </p>\n</div>\n","c99-thread_002dlocal-edits":"<h1 class=\"subsection\" id=\"C99-Thread_002dLocal-Edits\">6.61.1 ISO/IEC 9899:1999 Edits for Thread-Local Storage</h1> <p>The following are a set of changes to ISO/IEC 9899:1999 (aka C99) that document the exact semantics of the language extension. </p>\n<ul> <li>5.1.2 Execution environments <p>Add new text after paragraph 1 </p>\n<blockquote> Within either execution environment, a thread is a flow of control within a program. It is implementation defined whether or not there may be more than one thread associated with a program. It is implementation defined how threads beyond the first are created, the name and type of the function called at thread startup, and how threads may be terminated. However, objects with thread storage duration shall be initialized before thread startup. </blockquote> </li>\n<li>6.2.4 Storage durations of objects <p>Add new text before paragraph 3 </p>\n<blockquote> An object whose identifier is declared with the storage-class specifier <code>__thread</code> has thread storage duration. Its lifetime is the entire execution of the thread, and its stored value is initialized only once, prior to thread startup. </blockquote> </li>\n<li>6.4.1 Keywords <p>Add <code>__thread</code>. </p>\n</li>\n<li>6.7.1 Storage-class specifiers <p>Add <code>__thread</code> to the list of storage class specifiers in paragraph 1. </p>\n<p>Change paragraph 2 to </p>\n<blockquote> With the exception of <code>__thread</code>, at most one storage-class specifier may be given [<small class=\"dots\">...</small>]. The <code>__thread</code> specifier may be used alone, or immediately following <code>extern</code> or <code>static</code>. </blockquote> <p>Add new text after paragraph 6 </p>\n<blockquote> The declaration of an identifier for a variable that has block scope that specifies <code>__thread</code> shall also specify either <code>extern</code> or <code>static</code>. <p>The <code>__thread</code> specifier shall be used only with variables. </p>\n</blockquote> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C99-Thread_002dLocal-Edits.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C99-Thread_002dLocal-Edits.html</a>\n  </p>\n</div>\n","c_002b_002b98-thread_002dlocal-edits":"<h1 class=\"subsection\" id=\"C_002b_002b98-Thread_002dLocal-Edits\">6.61.2 ISO/IEC 14882:1998 Edits for Thread-Local Storage</h1> <p>The following are a set of changes to ISO/IEC 14882:1998 (aka C++98) that document the exact semantics of the language extension. </p>\n<ul> <li>\n<b>[intro.execution]</b> <p>New text after paragraph 4 </p>\n<blockquote> A thread is a flow of control within the abstract machine. It is implementation defined whether or not there may be more than one thread. </blockquote> <p>New text after paragraph 7 </p>\n<blockquote> It is unspecified whether additional action must be taken to ensure when and whether side effects are visible to other threads. </blockquote> </li>\n<li>\n<b>[lex.key]</b> <p>Add <code>__thread</code>. </p>\n</li>\n<li>\n<b>[basic.start.main]</b> <p>Add after paragraph 5 </p>\n<blockquote> The thread that begins execution at the <code>main</code> function is called the main thread. It is implementation defined how functions beginning threads other than the main thread are designated or typed. A function so designated, as well as the <code>main</code> function, is called a thread startup function. It is implementation defined what happens if a thread startup function returns. It is implementation defined what happens to other threads when any thread calls <code>exit</code>. </blockquote> </li>\n<li>\n<b>[basic.start.init]</b> <p>Add after paragraph 4 </p>\n<blockquote> The storage for an object of thread storage duration shall be statically initialized before the first statement of the thread startup function. An object of thread storage duration shall not require dynamic initialization. </blockquote> </li>\n<li>\n<b>[basic.start.term]</b> <p>Add after paragraph 3 </p>\n<blockquote> The type of an object with thread storage duration shall not have a non-trivial destructor, nor shall it be an array type whose elements (directly or indirectly) have non-trivial destructors. </blockquote> </li>\n<li>\n<b>[basic.stc]</b> <p>Add “thread storage duration” to the list in paragraph 1. </p>\n<p>Change paragraph 2 </p>\n<blockquote> Thread, static, and automatic storage durations are associated with objects introduced by declarations [<small class=\"dots\">...</small>]. </blockquote> <p>Add <code>__thread</code> to the list of specifiers in paragraph 3. </p>\n</li>\n<li>\n<b>[basic.stc.thread]</b> <p>New section before <b>[basic.stc.static]</b> </p>\n<blockquote> The keyword <code>__thread</code> applied to a non-local object gives the object thread storage duration. <p>A local variable or class data member declared both <code>static</code> and <code>__thread</code> gives the variable or member thread storage duration. </p>\n</blockquote> </li>\n<li>\n<b>[basic.stc.static]</b> <p>Change paragraph 1 </p>\n<blockquote> All objects that have neither thread storage duration, dynamic storage duration nor are local [<small class=\"dots\">...</small>]. </blockquote> </li>\n<li>\n<b>[dcl.stc]</b> <p>Add <code>__thread</code> to the list in paragraph 1. </p>\n<p>Change paragraph 1 </p>\n<blockquote> With the exception of <code>__thread</code>, at most one <var>storage-class-specifier</var> shall appear in a given <var>decl-specifier-seq</var>. The <code>__thread</code> specifier may be used alone, or immediately following the <code>extern</code> or <code>static</code> specifiers. [<small class=\"dots\">...</small>] </blockquote> <p>Add after paragraph 5 </p>\n<blockquote> The <code>__thread</code> specifier can be applied only to the names of objects and to anonymous unions. </blockquote> </li>\n<li>\n<b>[class.mem]</b> <p>Add after paragraph 6 </p>\n<blockquote> Non-<code>static</code> members shall not be <code>__thread</code>. </blockquote> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b98-Thread_002dLocal-Edits.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b98-Thread_002dLocal-Edits.html</a>\n  </p>\n</div>\n","binary-constants":"<h1 class=\"section\" id=\"Binary-constants\">6.62 Binary constants using the ‘<code>0b</code>’ prefix</h1> <p> Integer constants can be written as binary constants, consisting of a sequence of ‘<code>0</code>’ and ‘<code>1</code>’ digits, prefixed by ‘<code>0b</code>’ or ‘<code>0B</code>’. This is particularly useful in environments that operate a lot on the bit level (like microcontrollers). </p>\n<p>The following statements are identical: </p>\n<pre class=\"smallexample\">i =       42;\ni =     0x2a;\ni =      052;\ni = 0b101010;</pre> <p>The type of these constants follows the same rules as for octal or hexadecimal integer constants, so suffixes like ‘<code>L</code>’ or ‘<code>UL</code>’ can be applied. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Binary-constants.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Binary-constants.html</a>\n  </p>\n</div>\n","c_002b_002b-extensions":"<h1 class=\"chapter\" id=\"C_002b_002b-Extensions\">7 Extensions to the C++ Language</h1> <p> The GNU compiler provides these extensions to the C++ language (and you can also use most of the C language extensions in your C++ programs). If you want to write code that checks whether these features are available, you can test for the GNU compiler the same way as for C programs: check for a predefined macro <code>__GNUC__</code>. You can also use <code>__GNUG__</code> to test specifically for GNU C++ (see <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Common-Predefined-Macros.html#Common-Predefined-Macros\">Predefined Macros</a>). </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"c_002b_002b-volatiles#C_002b_002b-Volatiles\">C++ Volatiles</a>: What constitutes an access to a volatile object. </li>\n<li>\n<a accesskey=\"2\" href=\"restricted-pointers#Restricted-Pointers\">Restricted Pointers</a>: C99 restricted pointers and references. </li>\n<li>\n<a accesskey=\"3\" href=\"vague-linkage#Vague-Linkage\">Vague Linkage</a>: Where G++ puts inlines, vtables and such. </li>\n<li>\n<a accesskey=\"4\" href=\"c_002b_002b-interface#C_002b_002b-Interface\">C++ Interface</a>: You can use a single C++ header file for both declarations and definitions. </li>\n<li>\n<a accesskey=\"5\" href=\"template-instantiation#Template-Instantiation\">Template Instantiation</a>: Methods for ensuring that exactly one copy of each needed template instantiation is emitted. </li>\n<li>\n<a accesskey=\"6\" href=\"bound-member-functions#Bound-member-functions\">Bound member functions</a>: You can extract a function pointer to the method denoted by a ‘<code>-&gt;*</code>’ or ‘<code>.*</code>’ expression. </li>\n<li>\n<a accesskey=\"7\" href=\"c_002b_002b-attributes#C_002b_002b-Attributes\">C++ Attributes</a>: Variable, function, and type attributes for C++ only. </li>\n<li>\n<a accesskey=\"8\" href=\"function-multiversioning#Function-Multiversioning\">Function Multiversioning</a>: Declaring multiple function versions. </li>\n<li>\n<a accesskey=\"9\" href=\"namespace-association#Namespace-Association\">Namespace Association</a>: Strong using-directives for namespace association. </li>\n<li>\n<a href=\"type-traits#Type-Traits\">Type Traits</a>: Compiler support for type traits </li>\n<li>\n<a href=\"java-exceptions#Java-Exceptions\">Java Exceptions</a>: Tweaking exception handling to work with Java. </li>\n<li>\n<a href=\"deprecated-features#Deprecated-Features\">Deprecated Features</a>: Things will disappear from G++. </li>\n<li>\n<a href=\"backwards-compatibility#Backwards-Compatibility\">Backwards Compatibility</a>: Compatibilities with earlier definitions of C++. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Extensions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Extensions.html</a>\n  </p>\n</div>\n","c_002b_002b-volatiles":"<h1 class=\"section\" id=\"C_002b_002b-Volatiles\">7.1 When is a Volatile C++ Object Accessed?</h1> <p> The C++ standard differs from the C standard in its treatment of volatile objects. It fails to specify what constitutes a volatile access, except to say that C++ should behave in a similar manner to C with respect to volatiles, where possible. However, the different lvalueness of expressions between C and C++ complicate the behavior. G++ behaves the same as GCC for volatile access, See <a href=\"c-extensions#C-Extensions\">Volatiles</a>, for a description of GCC's behavior. </p>\n<p>The C and C++ language specifications differ when an object is accessed in a void context: </p>\n<pre class=\"smallexample\">volatile int *src = <var>somevalue</var>;\n*src;</pre> <p>The C++ standard specifies that such expressions do not undergo lvalue to rvalue conversion, and that the type of the dereferenced object may be incomplete. The C++ standard does not specify explicitly that it is lvalue to rvalue conversion that is responsible for causing an access. There is reason to believe that it is, because otherwise certain simple expressions become undefined. However, because it would surprise most programmers, G++ treats dereferencing a pointer to volatile object of complete type as GCC would do for an equivalent type in C. When the object has incomplete type, G++ issues a warning; if you wish to force an error, you must force a conversion to rvalue with, for instance, a static cast. </p>\n<p>When using a reference to volatile, G++ does not treat equivalent expressions as accesses to volatiles, but instead issues a warning that no volatile is accessed. The rationale for this is that otherwise it becomes difficult to determine where volatile access occur, and not possible to ignore the return value from functions returning volatile references. Again, if you wish to force a read, cast the reference to an rvalue. </p>\n<p>G++ implements the same behavior as GCC does when assigning to a volatile object—there is no reread of the assigned-to object, the assigned rvalue is reused. Note that in C++ assignment expressions are lvalues, and if used as an lvalue, the volatile object is referred to. For instance, <var>vref</var> refers to <var>vobj</var>, as expected, in the following example: </p>\n<pre class=\"smallexample\">volatile int vobj;\nvolatile int &amp;vref = vobj = <var>something</var>;</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Volatiles.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Volatiles.html</a>\n  </p>\n</div>\n","restricted-pointers":"<h1 class=\"section\" id=\"Restricted-Pointers\">7.2 Restricting Pointer Aliasing</h1> <p> As with the C front end, G++ understands the C99 feature of restricted pointers, specified with the <code>__restrict__</code>, or <code>__restrict</code> type qualifier. Because you cannot compile C++ by specifying the <code>-std=c99</code> language flag, <code>restrict</code> is not a keyword in C++. </p>\n<p>In addition to allowing restricted pointers, you can specify restricted references, which indicate that the reference is not aliased in the local context. </p>\n<pre class=\"smallexample\">void fn (int *__restrict__ rptr, int &amp;__restrict__ rref)\n{\n  /* <span class=\"roman\">...</span> */\n}</pre> <p class=\"noindent\">In the body of <code>fn</code>, <var>rptr</var> points to an unaliased integer and <var>rref</var> refers to a (different) unaliased integer. </p>\n<p>You may also specify whether a member function's <var>this</var> pointer is unaliased by using <code>__restrict__</code> as a member function qualifier. </p>\n<pre class=\"smallexample\">void T::fn () __restrict__\n{\n  /* <span class=\"roman\">...</span> */\n}</pre> <p class=\"noindent\">Within the body of <code>T::fn</code>, <var>this</var> has the effective definition <code>T *__restrict__ const this</code>. Notice that the interpretation of a <code>__restrict__</code> member function qualifier is different to that of <code>const</code> or <code>volatile</code> qualifier, in that it is applied to the pointer rather than the object. This is consistent with other compilers that implement restricted pointers. </p>\n<p>As with all outermost parameter qualifiers, <code>__restrict__</code> is ignored in function definition matching. This means you only need to specify <code>__restrict__</code> in a function definition, rather than in a function prototype as well. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Restricted-Pointers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Restricted-Pointers.html</a>\n  </p>\n</div>\n","vague-linkage":"<h1 class=\"section\" id=\"Vague-Linkage\">7.3 Vague Linkage</h1> <p> There are several constructs in C++ that require space in the object file but are not clearly tied to a single translation unit. We say that these constructs have “vague linkage”. Typically such constructs are emitted wherever they are needed, though sometimes we can be more clever. </p>\n<dl> <dt>Inline Functions</dt>\n<dd>Inline functions are typically defined in a header file which can be included in many different compilations. Hopefully they can usually be inlined, but sometimes an out-of-line copy is necessary, if the address of the function is taken or if inlining fails. In general, we emit an out-of-line copy in all translation units where one is needed. As an exception, we only emit inline virtual functions with the vtable, since it always requires a copy. <p>Local static variables and string constants used in an inline function are also considered to have vague linkage, since they must be shared between all inlined and out-of-line instances of the function. </p>\n</dd>\n<dt>VTables</dt>\n<dd>\nC++ virtual functions are implemented in most compilers using a lookup table, known as a vtable. The vtable contains pointers to the virtual functions provided by a class, and each object of the class contains a pointer to its vtable (or vtables, in some multiple-inheritance situations). If the class declares any non-inline, non-pure virtual functions, the first one is chosen as the “key method” for the class, and the vtable is only emitted in the translation unit where the key method is defined. <p><em>Note:</em> If the chosen key method is later defined as inline, the vtable is still emitted in every translation unit that defines it. Make sure that any inline virtuals are declared inline in the class body, even if they are not defined there. </p>\n</dd>\n<dt>\n<code>type_info</code> objects</dt>\n<dd>\nC++ requires information about types to be written out in order to implement ‘<code>dynamic_cast</code>’, ‘<code>typeid</code>’ and exception handling. For polymorphic classes (classes with virtual functions), the ‘<code>type_info</code>’ object is written out along with the vtable so that ‘<code>dynamic_cast</code>’ can determine the dynamic type of a class object at run time. For all other types, we write out the ‘<code>type_info</code>’ object when it is used: when applying ‘<code>typeid</code>’ to an expression, throwing an object, or referring to a type in a catch clause or exception specification. </dd>\n<dt>Template Instantiations</dt>\n<dd>Most everything in this section also applies to template instantiations, but there are other options as well. See <a href=\"template-instantiation#Template-Instantiation\">Where's the Template?</a>. </dd>\n</dl> <p>When used with GNU ld version 2.8 or later on an ELF system such as GNU/Linux or Solaris 2, or on Microsoft Windows, duplicate copies of these constructs will be discarded at link time. This is known as COMDAT support. </p>\n<p>On targets that don't support COMDAT, but do support weak symbols, GCC uses them. This way one copy overrides all the others, but the unused copies still take up space in the executable. </p>\n<p>For targets that do not support either COMDAT or weak symbols, most entities with vague linkage are emitted as local symbols to avoid duplicate definition errors from the linker. This does not happen for local statics in inlines, however, as having multiple copies almost certainly breaks things. </p>\n<p>See <a href=\"c_002b_002b-interface#C_002b_002b-Interface\">Declarations and Definitions in One Header</a>, for another way to control placement of these constructs. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Vague-Linkage.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Vague-Linkage.html</a>\n  </p>\n</div>\n","c_002b_002b-interface":"<h1 class=\"section\" id=\"C_002b_002b-Interface\">7.4 #pragma interface and implementation</h1> <p> <code>#pragma interface</code> and <code>#pragma implementation</code> provide the user with a way of explicitly directing the compiler to emit entities with vague linkage (and debugging information) in a particular translation unit. </p>\n<p><em>Note:</em> As of GCC 2.7.2, these <code>#pragma</code>s are not useful in most cases, because of COMDAT support and the “key method” heuristic mentioned in <a href=\"vague-linkage#Vague-Linkage\">Vague Linkage</a>. Using them can actually cause your program to grow due to unnecessary out-of-line copies of inline functions. Currently (3.4) the only benefit of these <code>#pragma</code>s is reduced duplication of debugging information, and that should be addressed soon on DWARF 2 targets with the use of COMDAT groups. </p>\n<dl> <dt>\n<code>#pragma interface</code><dt>\n<code>#pragma interface \"</code><var>subdir</var><code>/</code><var>objects</var><code>.h\"</code>\n</dt>\n</dt>\n<dd>\nUse this directive in <em>header files</em> that define object classes, to save space in most of the object files that use those classes. Normally, local copies of certain information (backup copies of inline member functions, debugging information, and the internal tables that implement virtual functions) must be kept in each object file that includes class definitions. You can use this pragma to avoid such duplication. When a header file containing ‘<code>#pragma interface</code>’ is included in a compilation, this auxiliary information is not generated (unless the main input source file itself uses ‘<code>#pragma implementation</code>’). Instead, the object files contain references to be resolved at link time. <p>The second form of this directive is useful for the case where you have multiple headers with the same name in different directories. If you use this form, you must specify the same string to ‘<code>#pragma implementation</code>’. </p>\n</dd>\n<dt>\n<code>#pragma implementation</code><dt>\n<code>#pragma implementation \"</code><var>objects</var><code>.h\"</code>\n</dt>\n</dt>\n<dd>\nUse this pragma in a <em>main input file</em>, when you want full output from included header files to be generated (and made globally visible). The included header file, in turn, should use ‘<code>#pragma interface</code>’. Backup copies of inline member functions, debugging information, and the internal tables used to implement virtual functions are all generated in implementation files. <p>If you use ‘<code>#pragma implementation</code>’ with no argument, it applies to an include file with the same basename<a rel=\"footnote\" href=\"#fn-1\" name=\"fnd-1\" id=\"fnd-1\"><sup>1</sup></a> as your source file. For example, in <code>allclass.cc</code>, giving just ‘<code>#pragma implementation</code>’ by itself is equivalent to ‘<code>#pragma implementation \"allclass.h\"</code>’. </p>\n<p>In versions of GNU C++ prior to 2.6.0 <code>allclass.h</code> was treated as an implementation file whenever you would include it from <code>allclass.cc</code> even if you never specified ‘<code>#pragma implementation</code>’. This was deemed to be more trouble than it was worth, however, and disabled. </p>\n<p>Use the string argument if you want a single implementation file to include code from multiple header files. (You must also use ‘<code>#include</code>’ to include the header file; ‘<code>#pragma implementation</code>’ only specifies how to use the file—it doesn't actually include it.) </p>\n<p>There is no way to split up the contents of a single header file into multiple implementation files. </p>\n</dd>\n</dl> <p>‘<code>#pragma implementation</code>’ and ‘<code>#pragma interface</code>’ also have an effect on function inlining. </p>\n<p>If you define a class in a header file marked with ‘<code>#pragma interface</code>’, the effect on an inline function defined in that class is similar to an explicit <code>extern</code> declaration—the compiler emits no code at all to define an independent version of the function. Its definition is used only for inlining with its callers. </p>\n<p>Conversely, when you include the same header file in a main source file that declares it as ‘<code>#pragma implementation</code>’, the compiler emits code for the function itself; this defines a version of the function that can be found via pointers (or by callers compiled without inlining). If all calls to the function can be inlined, you can avoid emitting the function by compiling with <code>-fno-implement-inlines</code>. If any calls are not inlined, you will get linker errors. </p>\n<div class=\"footnote\">  <h2>Footnotes</h2>\n<p class=\"footnote\"><small>[<a name=\"fn-1\" href=\"#fnd-1\" id=\"fn-1\">1</a>]</small> A file's basename is the name stripped of all leading path information and of trailing suffixes, such as ‘<code>.h</code>’ or ‘<code>.C</code>’ or ‘<code>.cc</code>’.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Interface.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Interface.html</a>\n  </p>\n</div>\n","template-instantiation":"<h1 class=\"section\" id=\"Template-Instantiation\">7.5 Where's the Template?</h1> <p> C++ templates are the first language feature to require more intelligence from the environment than one usually finds on a UNIX system. Somehow the compiler and linker have to make sure that each template instance occurs exactly once in the executable if it is needed, and not at all otherwise. There are two basic approaches to this problem, which are referred to as the Borland model and the Cfront model. </p>\n<dl> <dt>Borland model</dt>\n<dd>Borland C++ solved the template instantiation problem by adding the code equivalent of common blocks to their linker; the compiler emits template instances in each translation unit that uses them, and the linker collapses them together. The advantage of this model is that the linker only has to consider the object files themselves; there is no external complexity to worry about. This disadvantage is that compilation time is increased because the template code is being compiled repeatedly. Code written for this model tends to include definitions of all templates in the header file, since they must be seen to be instantiated. </dd>\n<dt>Cfront model</dt>\n<dd>The AT&amp;T C++ translator, Cfront, solved the template instantiation problem by creating the notion of a template repository, an automatically maintained place where template instances are stored. A more modern version of the repository works as follows: As individual object files are built, the compiler places any template definitions and instantiations encountered in the repository. At link time, the link wrapper adds in the objects in the repository and compiles any needed instances that were not previously emitted. The advantages of this model are more optimal compilation speed and the ability to use the system linker; to implement the Borland model a compiler vendor also needs to replace the linker. The disadvantages are vastly increased complexity, and thus potential for error; for some code this can be just as transparent, but in practice it can been very difficult to build multiple programs in one directory and one program in multiple directories. Code written for this model tends to separate definitions of non-inline member templates into a separate file, which should be compiled separately. </dd>\n</dl> <p>When used with GNU ld version 2.8 or later on an ELF system such as GNU/Linux or Solaris 2, or on Microsoft Windows, G++ supports the Borland model. On other systems, G++ implements neither automatic model. </p>\n<p>You have the following options for dealing with template instantiations: </p>\n<ol type=\"1\" start=\"1\"> <li>\nCompile your template-using code with <code>-frepo</code>. The compiler generates files with the extension ‘<code>.rpo</code>’ listing all of the template instantiations used in the corresponding object files that could be instantiated there; the link wrapper, ‘<code>collect2</code>’, then updates the ‘<code>.rpo</code>’ files to tell the compiler where to place those instantiations and rebuild any affected object files. The link-time overhead is negligible after the first pass, as the compiler continues to place the instantiations in the same files. <p>This is your best option for application code written for the Borland model, as it just works. Code written for the Cfront model needs to be modified so that the template definitions are available at one or more points of instantiation; usually this is as simple as adding <code>#include &lt;tmethods.cc&gt;</code> to the end of each template header. </p>\n<p>For library code, if you want the library to provide all of the template instantiations it needs, just try to link all of its object files together; the link will fail, but cause the instantiations to be generated as a side effect. Be warned, however, that this may cause conflicts if multiple libraries try to provide the same instantiations. For greater control, use explicit instantiation as described in the next option. </p>\n</li>\n<li>\nCompile your code with <code>-fno-implicit-templates</code> to disable the implicit generation of template instances, and explicitly instantiate all the ones you use. This approach requires more knowledge of exactly which instances you need than do the others, but it's less mysterious and allows greater control. You can scatter the explicit instantiations throughout your program, perhaps putting them in the translation units where the instances are used or the translation units that define the templates themselves; you can put all of the explicit instantiations you need into one big file; or you can create small files like <pre class=\"smallexample\">#include \"Foo.h\"\n#include \"Foo.cc\"\n\ntemplate class Foo&lt;int&gt;;\ntemplate ostream&amp; operator &lt;&lt;\n                (ostream&amp;, const Foo&lt;int&gt;&amp;);</pre> <p class=\"noindent\">for each of the instances you need, and create a template instantiation library from those. </p>\n<p>If you are using Cfront-model code, you can probably get away with not using <code>-fno-implicit-templates</code> when compiling files that don't ‘<code>#include</code>’ the member template definitions. </p>\n<p>If you use one big file to do the instantiations, you may want to compile it without <code>-fno-implicit-templates</code> so you get all of the instances required by your explicit instantiations (but not by any other files) without having to specify them as well. </p>\n<p>The ISO C++ 2011 standard allows forward declaration of explicit instantiations (with <code>extern</code>). G++ supports explicit instantiation declarations in C++98 mode and has extended the template instantiation syntax to support instantiation of the compiler support data for a template class (i.e. the vtable) without instantiating any of its members (with <code>inline</code>), and instantiation of only the static data members of a template class, without the support data or member functions (with (<code>static</code>): </p>\n<pre class=\"smallexample\">extern template int max (int, int);\ninline template class Foo&lt;int&gt;;\nstatic template class Foo&lt;int&gt;;</pre> </li>\n<li>Do nothing. Pretend G++ does implement automatic instantiation management. Code written for the Borland model works fine, but each translation unit contains instances of each of the templates it uses. In a large program, this can lead to an unacceptable amount of code duplication. </li>\n</ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Template-Instantiation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Template-Instantiation.html</a>\n  </p>\n</div>\n","bound-member-functions":"<h1 class=\"section\" id=\"Bound-member-functions\">7.6 Extracting the function pointer from a bound pointer to member function</h1> <p> In C++, pointer to member functions (PMFs) are implemented using a wide pointer of sorts to handle all the possible call mechanisms; the PMF needs to store information about how to adjust the ‘<code>this</code>’ pointer, and if the function pointed to is virtual, where to find the vtable, and where in the vtable to look for the member function. If you are using PMFs in an inner loop, you should really reconsider that decision. If that is not an option, you can extract the pointer to the function that would be called for a given object/PMF pair and call it directly inside the inner loop, to save a bit of time. </p>\n<p>Note that you still pay the penalty for the call through a function pointer; on most modern architectures, such a call defeats the branch prediction features of the CPU. This is also true of normal virtual function calls. </p>\n<p>The syntax for this extension is </p>\n<pre class=\"smallexample\">extern A a;\nextern int (A::*fp)();\ntypedef int (*fptr)(A *);\n\nfptr p = (fptr)(a.*fp);</pre> <p>For PMF constants (i.e. expressions of the form ‘<code>&amp;Klasse::Member</code>’), no object is needed to obtain the address of the function. They can be converted to function pointers directly: </p>\n<pre class=\"smallexample\">fptr p1 = (fptr)(&amp;A::foo);</pre> <p>You must specify <code>-Wno-pmf-conversions</code> to use this extension. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Bound-member-functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Bound-member-functions.html</a>\n  </p>\n</div>\n","c_002b_002b-attributes":"<h1 class=\"section\" id=\"C_002b_002b-Attributes\">7.7 C++-Specific Variable, Function, and Type Attributes</h1> <p>Some attributes only make sense for C++ programs. </p>\n<dl> <dt>\n<code>abi_tag (\"</code><var>tag</var><code>\", ...)</code>\n</dt>\n<dd>\nThe <code>abi_tag</code> attribute can be applied to a function or class declaration. It modifies the mangled name of the function or class to incorporate the tag name, in order to distinguish the function or class from an earlier version with a different ABI; perhaps the class has changed size, or the function has a different return type that is not encoded in the mangled name. <p>The argument can be a list of strings of arbitrary length. The strings are sorted on output, so the order of the list is unimportant. </p>\n<p>A redeclaration of a function or class must not add new ABI tags, since doing so would change the mangled name. </p>\n<p>The ABI tags apply to a name, so all instantiations and specializations of a template have the same tags. The attribute will be ignored if applied to an explicit specialization or instantiation. </p>\n<p>The <code>-Wabi-tag</code> flag enables a warning about a class which does not have all the ABI tags used by its subobjects and virtual functions; for users with code that needs to coexist with an earlier ABI, using this option can help to find all affected types that need to be tagged. </p>\n</dd>\n<dt>\n<code>init_priority (</code><var>priority</var><code>)</code>\n</dt>\n<dd>\n <p>In Standard C++, objects defined at namespace scope are guaranteed to be initialized in an order in strict accordance with that of their definitions <em>in a given translation unit</em>. No guarantee is made for initializations across translation units. However, GNU C++ allows users to control the order of initialization of objects defined at namespace scope with the <code>init_priority</code> attribute by specifying a relative <var>priority</var>, a constant integral expression currently bounded between 101 and 65535 inclusive. Lower numbers indicate a higher priority. </p>\n<p>In the following example, <code>A</code> would normally be created before <code>B</code>, but the <code>init_priority</code> attribute reverses that order: </p>\n<pre class=\"smallexample\">Some_Class  A  __attribute__ ((init_priority (2000)));\nSome_Class  B  __attribute__ ((init_priority (543)));</pre> <p class=\"noindent\">Note that the particular values of <var>priority</var> do not matter; only their relative ordering. </p>\n</dd>\n<dt><code>java_interface</code></dt>\n<dd>\n This type attribute informs C++ that the class is a Java interface. It may only be applied to classes declared within an <code>extern \"Java\"</code> block. Calls to methods declared in this interface are dispatched using GCJ's interface table mechanism, instead of regular virtual table dispatch. </dd>\n<dt><code>warn_unused</code></dt>\n<dd>\n For C++ types with non-trivial constructors and/or destructors it is impossible for the compiler to determine whether a variable of this type is truly unused if it is not referenced. This type attribute informs the compiler that variables of this type should be warned about if they appear to be unused, just like variables of fundamental types. <p>This attribute is appropriate for types which just represent a value, such as <code>std::string</code>; it is not appropriate for types which control a resource, such as <code>std::mutex</code>. </p>\n<p>This attribute is also accepted in C, but it is unnecessary because C does not have constructors or destructors. </p>\n</dd>\n</dl> <p>See also <a href=\"namespace-association#Namespace-Association\">Namespace Association</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Attributes.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Attributes.html</a>\n  </p>\n</div>\n","function-multiversioning":"<h1 class=\"section\" id=\"Function-Multiversioning\">7.8 Function Multiversioning</h1> <p> With the GNU C++ front end, for target i386, you may specify multiple versions of a function, where each function is specialized for a specific target feature. At runtime, the appropriate version of the function is automatically executed depending on the characteristics of the execution platform. Here is an example. </p>\n<pre class=\"smallexample\">__attribute__ ((target (\"default\")))\nint foo ()\n{\n  // The default version of foo.\n  return 0;\n}\n\n__attribute__ ((target (\"sse4.2\")))\nint foo ()\n{\n  // foo version for SSE4.2\n  return 1;\n}\n\n__attribute__ ((target (\"arch=atom\")))\nint foo ()\n{\n  // foo version for the Intel ATOM processor\n  return 2;\n}\n\n__attribute__ ((target (\"arch=amdfam10\")))\nint foo ()\n{\n  // foo version for the AMD Family 0x10 processors.\n  return 3;\n}\n\nint main ()\n{\n  int (*p)() = &amp;foo;\n  assert ((*p) () == foo ());\n  return 0;\n}</pre> <p>In the above example, four versions of function foo are created. The first version of foo with the target attribute \"default\" is the default version. This version gets executed when no other target specific version qualifies for execution on a particular platform. A new version of foo is created by using the same function signature but with a different target string. Function foo is called or a pointer to it is taken just like a regular function. GCC takes care of doing the dispatching to call the right version at runtime. Refer to the <a href=\"http://gcc.gnu.org/wiki/FunctionMultiVersioning\">GCC wiki on Function Multiversioning</a> for more details. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Multiversioning.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Function-Multiversioning.html</a>\n  </p>\n</div>\n","namespace-association":"<h1 class=\"section\" id=\"Namespace-Association\">7.9 Namespace Association</h1> <p><strong>Caution:</strong> The semantics of this extension are equivalent to C++ 2011 inline namespaces. Users should use inline namespaces instead as this extension will be removed in future versions of G++. </p>\n<p>A using-directive with <code>__attribute ((strong))</code> is stronger than a normal using-directive in two ways: </p>\n<ul> <li>Templates from the used namespace can be specialized and explicitly instantiated as though they were members of the using namespace. </li>\n<li>The using namespace is considered an associated namespace of all templates in the used namespace for purposes of argument-dependent name lookup. </li>\n</ul> <p>The used namespace must be nested within the using namespace so that normal unqualified lookup works properly. </p>\n<p>This is useful for composing a namespace transparently from implementation namespaces. For example: </p>\n<pre class=\"smallexample\">namespace std {\n  namespace debug {\n    template &lt;class T&gt; struct A { };\n  }\n  using namespace debug __attribute ((__strong__));\n  template &lt;&gt; struct A&lt;int&gt; { };   // <span class=\"roman\">OK to specialize</span>\n\n  template &lt;class T&gt; void f (A&lt;T&gt;);\n}\n\nint main()\n{\n  f (std::A&lt;float&gt;());             // <span class=\"roman\">lookup finds</span> std::f\n  f (std::A&lt;int&gt;());\n}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Namespace-Association.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Namespace-Association.html</a>\n  </p>\n</div>\n","type-traits":"<h1 class=\"section\" id=\"Type-Traits\">7.10 Type Traits</h1> <p>The C++ front end implements syntactic extensions that allow compile-time determination of various characteristics of a type (or of a pair of types). </p>\n<dl> <dt><code>__has_nothrow_assign (type)</code></dt>\n<dd>If <code>type</code> is const qualified or is a reference type then the trait is false. Otherwise if <code>__has_trivial_assign (type)</code> is true then the trait is true, else if <code>type</code> is a cv class or union type with copy assignment operators that are known not to throw an exception then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__has_nothrow_copy (type)</code></dt>\n<dd>If <code>__has_trivial_copy (type)</code> is true then the trait is true, else if <code>type</code> is a cv class or union type with copy constructors that are known not to throw an exception then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__has_nothrow_constructor (type)</code></dt>\n<dd>If <code>__has_trivial_constructor (type)</code> is true then the trait is true, else if <code>type</code> is a cv class or union type (or array thereof) with a default constructor that is known not to throw an exception then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__has_trivial_assign (type)</code></dt>\n<dd>If <code>type</code> is const qualified or is a reference type then the trait is false. Otherwise if <code>__is_pod (type)</code> is true then the trait is true, else if <code>type</code> is a cv class or union type with a trivial copy assignment ([class.copy]) then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__has_trivial_copy (type)</code></dt>\n<dd>If <code>__is_pod (type)</code> is true or <code>type</code> is a reference type then the trait is true, else if <code>type</code> is a cv class or union type with a trivial copy constructor ([class.copy]) then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__has_trivial_constructor (type)</code></dt>\n<dd>If <code>__is_pod (type)</code> is true then the trait is true, else if <code>type</code> is a cv class or union type (or array thereof) with a trivial default constructor ([class.ctor]) then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__has_trivial_destructor (type)</code></dt>\n<dd>If <code>__is_pod (type)</code> is true or <code>type</code> is a reference type then the trait is true, else if <code>type</code> is a cv class or union type (or array thereof) with a trivial destructor ([class.dtor]) then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__has_virtual_destructor (type)</code></dt>\n<dd>If <code>type</code> is a class type with a virtual destructor ([class.dtor]) then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__is_abstract (type)</code></dt>\n<dd>If <code>type</code> is an abstract class ([class.abstract]) then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__is_base_of (base_type, derived_type)</code></dt>\n<dd>If <code>base_type</code> is a base class of <code>derived_type</code> ([class.derived]) then the trait is true, otherwise it is false. Top-level cv qualifications of <code>base_type</code> and <code>derived_type</code> are ignored. For the purposes of this trait, a class type is considered is own base. Requires: if <code>__is_class\n(base_type)</code> and <code>__is_class (derived_type)</code> are true and <code>base_type</code> and <code>derived_type</code> are not the same type (disregarding cv-qualifiers), <code>derived_type</code> shall be a complete type. Diagnostic is produced if this requirement is not met. </dd>\n<dt><code>__is_class (type)</code></dt>\n<dd>If <code>type</code> is a cv class type, and not a union type ([basic.compound]) the trait is true, else it is false. </dd>\n<dt><code>__is_empty (type)</code></dt>\n<dd>If <code>__is_class (type)</code> is false then the trait is false. Otherwise <code>type</code> is considered empty if and only if: <code>type</code> has no non-static data members, or all non-static data members, if any, are bit-fields of length 0, and <code>type</code> has no virtual members, and <code>type</code> has no virtual base classes, and <code>type</code> has no base classes <code>base_type</code> for which <code>__is_empty (base_type)</code> is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__is_enum (type)</code></dt>\n<dd>If <code>type</code> is a cv enumeration type ([basic.compound]) the trait is true, else it is false. </dd>\n<dt><code>__is_literal_type (type)</code></dt>\n<dd>If <code>type</code> is a literal type ([basic.types]) the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__is_pod (type)</code></dt>\n<dd>If <code>type</code> is a cv POD type ([basic.types]) then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__is_polymorphic (type)</code></dt>\n<dd>If <code>type</code> is a polymorphic class ([class.virtual]) then the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__is_standard_layout (type)</code></dt>\n<dd>If <code>type</code> is a standard-layout type ([basic.types]) the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__is_trivial (type)</code></dt>\n<dd>If <code>type</code> is a trivial type ([basic.types]) the trait is true, else it is false. Requires: <code>type</code> shall be a complete type, (possibly cv-qualified) <code>void</code>, or an array of unknown bound. </dd>\n<dt><code>__is_union (type)</code></dt>\n<dd>If <code>type</code> is a cv union type ([basic.compound]) the trait is true, else it is false. </dd>\n<dt><code>__underlying_type (type)</code></dt>\n<dd>The underlying type of <code>type</code>. Requires: <code>type</code> shall be an enumeration type ([dcl.enum]). </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Type-Traits.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Type-Traits.html</a>\n  </p>\n</div>\n","java-exceptions":"<h1 class=\"section\" id=\"Java-Exceptions\">7.11 Java Exceptions</h1> <p>The Java language uses a slightly different exception handling model from C++. Normally, GNU C++ automatically detects when you are writing C++ code that uses Java exceptions, and handle them appropriately. However, if C++ code only needs to execute destructors when Java exceptions are thrown through it, GCC guesses incorrectly. Sample problematic code is: </p>\n<pre class=\"smallexample\">struct S { ~S(); };\nextern void bar();    // <span class=\"roman\">is written in Java, and may throw exceptions</span>\nvoid foo()\n{\n  S s;\n  bar();\n}</pre> <p class=\"noindent\">The usual effect of an incorrect guess is a link failure, complaining of a missing routine called ‘<code>__gxx_personality_v0</code>’. </p>\n<p>You can inform the compiler that Java exceptions are to be used in a translation unit, irrespective of what it might think, by writing ‘<code>#pragma GCC java_exceptions</code>’ at the head of the file. This ‘<code>#pragma</code>’ must appear before any functions that throw or catch exceptions, or run destructors when exceptions are thrown through them. </p>\n<p>You cannot mix Java and C++ exceptions in the same translation unit. It is believed to be safe to throw a C++ exception from one file through another file compiled for the Java exception model, or vice versa, but there may be bugs in this area. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Java-Exceptions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Java-Exceptions.html</a>\n  </p>\n</div>\n","deprecated-features":"<h1 class=\"section\" id=\"Deprecated-Features\">7.12 Deprecated Features</h1> <p>In the past, the GNU C++ compiler was extended to experiment with new features, at a time when the C++ language was still evolving. Now that the C++ standard is complete, some of those features are superseded by superior alternatives. Using the old features might cause a warning in some cases that the feature will be dropped in the future. In other cases, the feature might be gone already. </p>\n<p>While the list below is not exhaustive, it documents some of the options that are now deprecated: </p>\n<dl> <dt>\n<code>-fexternal-templates</code><dt><code>-falt-external-templates</code></dt>\n</dt>\n<dd>These are two of the many ways for G++ to implement template instantiation. See <a href=\"template-instantiation#Template-Instantiation\">Template Instantiation</a>. The C++ standard clearly defines how template definitions have to be organized across implementation units. G++ has an implicit instantiation mechanism that should work just fine for standard-conforming code. </dd>\n<dt>\n<code>-fstrict-prototype</code><dt><code>-fno-strict-prototype</code></dt>\n</dt>\n<dd>Previously it was possible to use an empty prototype parameter list to indicate an unspecified number of parameters (like C), rather than no parameters, as C++ demands. This feature has been removed, except where it is required for backwards compatibility. See <a href=\"backwards-compatibility#Backwards-Compatibility\">Backwards Compatibility</a>. </dd>\n</dl> <p>G++ allows a virtual function returning ‘<code>void *</code>’ to be overridden by one returning a different pointer type. This extension to the covariant return type rules is now deprecated and will be removed from a future version. </p>\n<p>The G++ minimum and maximum operators (‘<code>&lt;?</code>’ and ‘<code>&gt;?</code>’) and their compound forms (‘<code>&lt;?=</code>’) and ‘<code>&gt;?=</code>’) have been deprecated and are now removed from G++. Code using these operators should be modified to use <code>std::min</code> and <code>std::max</code> instead. </p>\n<p>The named return value extension has been deprecated, and is now removed from G++. </p>\n<p>The use of initializer lists with new expressions has been deprecated, and is now removed from G++. </p>\n<p>Floating and complex non-type template parameters have been deprecated, and are now removed from G++. </p>\n<p>The implicit typename extension has been deprecated and is now removed from G++. </p>\n<p>The use of default arguments in function pointers, function typedefs and other places where they are not permitted by the standard is deprecated and will be removed from a future version of G++. </p>\n<p>G++ allows floating-point literals to appear in integral constant expressions, e.g. ‘<code> enum E { e = int(2.2 * 3.7) } </code>’ This extension is deprecated and will be removed from a future version. </p>\n<p>G++ allows static data members of const floating-point type to be declared with an initializer in a class definition. The standard only allows initializers for static members of const integral types and const enumeration types so this extension has been deprecated and will be removed from a future version. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Deprecated-Features.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Deprecated-Features.html</a>\n  </p>\n</div>\n","backwards-compatibility":"<h1 class=\"section\" id=\"Backwards-Compatibility\">7.13 Backwards Compatibility</h1> <p> Now that there is a definitive ISO standard C++, G++ has a specification to adhere to. The C++ language evolved over time, and features that used to be acceptable in previous drafts of the standard, such as the ARM [Annotated C++ Reference Manual], are no longer accepted. In order to allow compilation of C++ written to such drafts, G++ contains some backwards compatibilities. <em>All such backwards compatibility features are liable to disappear in future versions of G++.</em> They should be considered deprecated. See <a href=\"deprecated-features#Deprecated-Features\">Deprecated Features</a>. </p>\n<dl> <dt><code>For scope</code></dt>\n<dd>If a variable is declared at for scope, it used to remain in scope until the end of the scope that contained the for statement (rather than just within the for scope). G++ retains this, but issues a warning, if such a variable is accessed outside the for scope. </dd>\n<dt><code>Implicit C language</code></dt>\n<dd>Old C system header files did not contain an <code>extern \"C\" {...}</code> scope to set the language. On such systems, all header files are implicitly scoped inside a C language scope. Also, an empty prototype <code>()</code> is treated as an unspecified number of arguments, rather than no arguments, as C++ demands. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Backwards-Compatibility.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Backwards-Compatibility.html</a>\n  </p>\n</div>\n","objective_002dc":"<h1 class=\"chapter\" id=\"Objective_002dC\">8 GNU Objective-C features</h1> <p>This document is meant to describe some of the GNU Objective-C features. It is not intended to teach you Objective-C. There are several resources on the Internet that present the language. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"gnu-objective_002dc-runtime-api#GNU-Objective_002dC-runtime-API\">GNU Objective-C runtime API</a> </li>\n<li>\n<a accesskey=\"2\" href=\"executing-code-before-main#Executing-code-before-main\">Executing code before main</a> </li>\n<li>\n<a accesskey=\"3\" href=\"type-encoding#Type-encoding\">Type encoding</a> </li>\n<li>\n<a accesskey=\"4\" href=\"garbage-collection#Garbage-Collection\">Garbage Collection</a> </li>\n<li>\n<a accesskey=\"5\" href=\"constant-string-objects#Constant-string-objects\">Constant string objects</a> </li>\n<li>\n<a accesskey=\"6\" href=\"compatibility_005falias#compatibility_005falias\">compatibility_alias</a> </li>\n<li>\n<a accesskey=\"7\" href=\"exceptions#Exceptions\">Exceptions</a> </li>\n<li>\n<a accesskey=\"8\" href=\"synchronization#Synchronization\">Synchronization</a> </li>\n<li>\n<a accesskey=\"9\" href=\"fast-enumeration#Fast-enumeration\">Fast enumeration</a> </li>\n<li>\n<a href=\"messaging-with-the-gnu-objective_002dc-runtime#Messaging-with-the-GNU-Objective_002dC-runtime\">Messaging with the GNU Objective-C runtime</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Objective_002dC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Objective_002dC.html</a>\n  </p>\n</div>\n","gnu-objective_002dc-runtime-api":"<h1 class=\"section\" id=\"GNU-Objective_002dC-runtime-API\">8.1 GNU Objective-C runtime API</h1> <p>This section is specific for the GNU Objective-C runtime. If you are using a different runtime, you can skip it. </p>\n<p>The GNU Objective-C runtime provides an API that allows you to interact with the Objective-C runtime system, querying the live runtime structures and even manipulating them. This allows you for example to inspect and navigate classes, methods and protocols; to define new classes or new methods, and even to modify existing classes or protocols. </p>\n<p>If you are using a “Foundation” library such as GNUstep-Base, this library will provide you with a rich set of functionality to do most of the inspection tasks, and you probably will only need direct access to the GNU Objective-C runtime API to define new classes or methods. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"modern-gnu-objective_002dc-runtime-api#Modern-GNU-Objective_002dC-runtime-API\">Modern GNU Objective-C runtime API</a> </li>\n<li>\n<a accesskey=\"2\" href=\"traditional-gnu-objective_002dc-runtime-api#Traditional-GNU-Objective_002dC-runtime-API\">Traditional GNU Objective-C runtime API</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU-Objective_002dC-runtime-API.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/GNU-Objective_002dC-runtime-API.html</a>\n  </p>\n</div>\n","modern-gnu-objective_002dc-runtime-api":"<h1 class=\"subsection\" id=\"Modern-GNU-Objective_002dC-runtime-API\">8.1.1 Modern GNU Objective-C runtime API</h1> <p>The GNU Objective-C runtime provides an API which is similar to the one provided by the “Objective-C 2.0” Apple/NeXT Objective-C runtime. The API is documented in the public header files of the GNU Objective-C runtime: </p>\n<ul> <li>\n<code>objc/objc.h</code>: this is the basic Objective-C header file, defining the basic Objective-C types such as <code>id</code>, <code>Class</code> and <code>BOOL</code>. You have to include this header to do almost anything with Objective-C. </li>\n<li>\n<code>objc/runtime.h</code>: this header declares most of the public runtime API functions allowing you to inspect and manipulate the Objective-C runtime data structures. These functions are fairly standardized across Objective-C runtimes and are almost identical to the Apple/NeXT Objective-C runtime ones. It does not declare functions in some specialized areas (constructing and forwarding message invocations, threading) which are in the other headers below. You have to include <code>objc/objc.h</code> and <code>objc/runtime.h</code> to use any of the functions, such as <code>class_getName()</code>, declared in <code>objc/runtime.h</code>. </li>\n<li>\n<code>objc/message.h</code>: this header declares public functions used to construct, deconstruct and forward message invocations. Because messaging is done in quite a different way on different runtimes, functions in this header are specific to the GNU Objective-C runtime implementation. </li>\n<li>\n<code>objc/objc-exception.h</code>: this header declares some public functions related to Objective-C exceptions. For example functions in this header allow you to throw an Objective-C exception from plain C/C++ code. </li>\n<li>\n<code>objc/objc-sync.h</code>: this header declares some public functions related to the Objective-C <code>@synchronized()</code> syntax, allowing you to emulate an Objective-C <code>@synchronized()</code> block in plain C/C++ code. </li>\n<li>\n<code>objc/thr.h</code>: this header declares a public runtime API threading layer that is only provided by the GNU Objective-C runtime. It declares functions such as <code>objc_mutex_lock()</code>, which provide a platform-independent set of threading functions. </li>\n</ul> <p>The header files contain detailed documentation for each function in the GNU Objective-C runtime API.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Modern-GNU-Objective_002dC-runtime-API.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Modern-GNU-Objective_002dC-runtime-API.html</a>\n  </p>\n</div>\n","traditional-gnu-objective_002dc-runtime-api":"<h1 class=\"subsection\" id=\"Traditional-GNU-Objective_002dC-runtime-API\">8.1.2 Traditional GNU Objective-C runtime API</h1> <p>The GNU Objective-C runtime used to provide a different API, which we call the “traditional” GNU Objective-C runtime API. Functions belonging to this API are easy to recognize because they use a different naming convention, such as <code>class_get_super_class()</code> (traditional API) instead of <code>class_getSuperclass()</code> (modern API). Software using this API includes the file <code>objc/objc-api.h</code> where it is declared. </p>\n<p>Starting with GCC 4.7.0, the traditional GNU runtime API is no longer available.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Traditional-GNU-Objective_002dC-runtime-API.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Traditional-GNU-Objective_002dC-runtime-API.html</a>\n  </p>\n</div>\n","executing-code-before-main":"<h1 class=\"section\" id=\"Executing-code-before-main\">8.2 <code>+load</code>: Executing code before main</h1> <p>This section is specific for the GNU Objective-C runtime. If you are using a different runtime, you can skip it. </p>\n<p>The GNU Objective-C runtime provides a way that allows you to execute code before the execution of the program enters the <code>main</code> function. The code is executed on a per-class and a per-category basis, through a special class method <code>+load</code>. </p>\n<p>This facility is very useful if you want to initialize global variables which can be accessed by the program directly, without sending a message to the class first. The usual way to initialize global variables, in the <code>+initialize</code> method, might not be useful because <code>+initialize</code> is only called when the first message is sent to a class object, which in some cases could be too late. </p>\n<p>Suppose for example you have a <code>FileStream</code> class that declares <code>Stdin</code>, <code>Stdout</code> and <code>Stderr</code> as global variables, like below: </p>\n<pre class=\"smallexample\">FileStream *Stdin = nil;\nFileStream *Stdout = nil;\nFileStream *Stderr = nil;\n\n@implementation FileStream\n\n+ (void)initialize\n{\n    Stdin = [[FileStream new] initWithFd:0];\n    Stdout = [[FileStream new] initWithFd:1];\n    Stderr = [[FileStream new] initWithFd:2];\n}\n\n/* <span class=\"roman\">Other methods here</span> */\n@end</pre> <p>In this example, the initialization of <code>Stdin</code>, <code>Stdout</code> and <code>Stderr</code> in <code>+initialize</code> occurs too late. The programmer can send a message to one of these objects before the variables are actually initialized, thus sending messages to the <code>nil</code> object. The <code>+initialize</code> method which actually initializes the global variables is not invoked until the first message is sent to the class object. The solution would require these variables to be initialized just before entering <code>main</code>. </p>\n<p>The correct solution of the above problem is to use the <code>+load</code> method instead of <code>+initialize</code>: </p>\n<pre class=\"smallexample\">@implementation FileStream\n\n+ (void)load\n{\n    Stdin = [[FileStream new] initWithFd:0];\n    Stdout = [[FileStream new] initWithFd:1];\n    Stderr = [[FileStream new] initWithFd:2];\n}\n\n/* <span class=\"roman\">Other methods here</span> */\n@end</pre> <p>The <code>+load</code> is a method that is not overridden by categories. If a class and a category of it both implement <code>+load</code>, both methods are invoked. This allows some additional initializations to be performed in a category. </p>\n<p>This mechanism is not intended to be a replacement for <code>+initialize</code>. You should be aware of its limitations when you decide to use it instead of <code>+initialize</code>. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"what-you-can-and-what-you-cannot-do-in-_002bload#What-you-can-and-what-you-cannot-do-in-_002bload\">What you can and what you cannot do in +load</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Executing-code-before-main.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Executing-code-before-main.html</a>\n  </p>\n</div>\n","what-you-can-and-what-you-cannot-do-in-_002bload":"<h1 class=\"subsection\" id=\"What-you-can-and-what-you-cannot-do-in-_002bload\">8.2.1 What you can and what you cannot do in <code>+load</code>\n</h1> <p><code>+load</code> is to be used only as a last resort. Because it is executed very early, most of the Objective-C runtime machinery will not be ready when <code>+load</code> is executed; hence <code>+load</code> works best for executing C code that is independent on the Objective-C runtime. </p>\n<p>The <code>+load</code> implementation in the GNU runtime guarantees you the following things: </p>\n<ul> <li>you can write whatever C code you like; </li>\n<li>you can allocate and send messages to objects whose class is implemented in the same file; </li>\n<li>the <code>+load</code> implementation of all super classes of a class are executed before the <code>+load</code> of that class is executed; </li>\n<li>the <code>+load</code> implementation of a class is executed before the <code>+load</code> implementation of any category. </li>\n</ul> <p>In particular, the following things, even if they can work in a particular case, are not guaranteed: </p>\n<ul> <li>allocation of or sending messages to arbitrary objects; </li>\n<li>allocation of or sending messages to objects whose classes have a category implemented in the same file; </li>\n<li>sending messages to Objective-C constant strings (<code>@\"this is a\nconstant string\"</code>); </li>\n</ul> <p>You should make no assumptions about receiving <code>+load</code> in sibling classes when you write <code>+load</code> of a class. The order in which sibling classes receive <code>+load</code> is not guaranteed. </p>\n<p>The order in which <code>+load</code> and <code>+initialize</code> are called could be problematic if this matters. If you don't allocate objects inside <code>+load</code>, it is guaranteed that <code>+load</code> is called before <code>+initialize</code>. If you create an object inside <code>+load</code> the <code>+initialize</code> method of object's class is invoked even if <code>+load</code> was not invoked. Note if you explicitly call <code>+load</code> on a class, <code>+initialize</code> will be called first. To avoid possible problems try to implement only one of these methods. </p>\n<p>The <code>+load</code> method is also invoked when a bundle is dynamically loaded into your running program. This happens automatically without any intervening operation from you. When you write bundles and you need to write <code>+load</code> you can safely create and send messages to objects whose classes already exist in the running program. The same restrictions as above apply to classes defined in bundle. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/What-you-can-and-what-you-cannot-do-in-_002bload.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/What-you-can-and-what-you-cannot-do-in-_002bload.html</a>\n  </p>\n</div>\n","type-encoding":"<h1 class=\"section\" id=\"Type-encoding\">8.3 Type encoding</h1> <p>This is an advanced section. Type encodings are used extensively by the compiler and by the runtime, but you generally do not need to know about them to use Objective-C. </p>\n<p>The Objective-C compiler generates type encodings for all the types. These type encodings are used at runtime to find out information about selectors and methods and about objects and classes. </p>\n<p>The types are encoded in the following way:  </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>_Bool</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>B</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>char</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>c</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>unsigned char</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>C</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>short</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>s</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>unsigned short</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>S</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>int</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>i</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>unsigned int</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>I</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>long</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>l</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>unsigned long</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>L</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>long long</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>q</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>unsigned long long</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>Q</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>float</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>f</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>double</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>d</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>long double</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>D</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>void</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>v</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>id</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>@</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>Class</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>#</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>SEL</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>:</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>char*</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>*</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>enum</code> </td>\n<td valign=\"top\" width=\"75%\">an <code>enum</code> is encoded exactly as the integer type that the compiler uses for it, which depends on the enumeration values. Often the compiler users <code>unsigned int</code>, which is then encoded as <code>I</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">unknown type </td>\n<td valign=\"top\" width=\"75%\">\n<code>?</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">Complex types </td>\n<td valign=\"top\" width=\"75%\">\n<code>j</code> followed by the inner type. For example <code>_Complex double</code> is encoded as \"jd\". </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">bit-fields </td>\n<td valign=\"top\" width=\"75%\">\n<code>b</code> followed by the starting position of the bit-field, the type of the bit-field and the size of the bit-field (the bit-fields encoding was changed from the NeXT's compiler encoding, see below) </td>\n</tr>\n</table>  <p>The encoding of bit-fields has changed to allow bit-fields to be properly handled by the runtime functions that compute sizes and alignments of types that contain bit-fields. The previous encoding contained only the size of the bit-field. Using only this information it is not possible to reliably compute the size occupied by the bit-field. This is very important in the presence of the Boehm's garbage collector because the objects are allocated using the typed memory facility available in this collector. The typed memory allocation requires information about where the pointers are located inside the object. </p>\n<p>The position in the bit-field is the position, counting in bits, of the bit closest to the beginning of the structure. </p>\n<p>The non-atomic types are encoded as follows:  </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">pointers </td>\n<td valign=\"top\" width=\"80%\">‘<code>^</code>’ followed by the pointed type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">arrays </td>\n<td valign=\"top\" width=\"80%\">‘<code>[</code>’ followed by the number of elements in the array followed by the type of the elements followed by ‘<code>]</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">structures </td>\n<td valign=\"top\" width=\"80%\">‘<code>{</code>’ followed by the name of the structure (or ‘<code>?</code>’ if the structure is unnamed), the ‘<code>=</code>’ sign, the type of the members and by ‘<code>}</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">unions </td>\n<td valign=\"top\" width=\"80%\">‘<code>(</code>’ followed by the name of the structure (or ‘<code>?</code>’ if the union is unnamed), the ‘<code>=</code>’ sign, the type of the members followed by ‘<code>)</code>’ </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">vectors </td>\n<td valign=\"top\" width=\"80%\">‘<code>![</code>’ followed by the vector_size (the number of bytes composing the vector) followed by a comma, followed by the alignment (in bytes) of the vector, followed by the type of the elements followed by ‘<code>]</code>’ </td>\n</tr>\n</table> <p>Here are some types and their encodings, as they are generated by the compiler on an i386 machine: </p>\n \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">Objective-C type </td>\n<td valign=\"top\" width=\"75%\">Compiler encoding </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\"> <pre class=\"smallexample\">int a[10];</pre> \n</td>\n<td valign=\"top\" width=\"75%\">\n<code>[10i]</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\"> <pre class=\"smallexample\">struct {\n  int i;\n  float f[3];\n  int a:3;\n  int b:2;\n  char c;\n}</pre> \n</td>\n<td valign=\"top\" width=\"75%\">\n<code>{?=i[3f]b128i3b131i2c}</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\"> <pre class=\"smallexample\">int a __attribute__ ((vector_size (16)));</pre> \n</td>\n<td valign=\"top\" width=\"75%\">\n<code>![16,16i]</code> (alignment would depend on the machine) </td>\n</tr>\n</table>  In addition to the types the compiler also encodes the type specifiers. The table below describes the encoding of the current Objective-C type specifiers:  \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">Specifier </td>\n<td valign=\"top\" width=\"75%\">Encoding </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>const</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>r</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>in</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>n</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>inout</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>N</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>out</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>o</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>bycopy</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>O</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>byref</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>R</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">\n<code>oneway</code> </td>\n<td valign=\"top\" width=\"75%\">\n<code>V</code> </td>\n</tr>\n</table>  The type specifiers are encoded just before the type. Unlike types however, the type specifiers are only encoded when they appear in method argument types. <p>Note how <code>const</code> interacts with pointers: </p>\n \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\">Objective-C type </td>\n<td valign=\"top\" width=\"75%\">Compiler encoding </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\"> <pre class=\"smallexample\">const int</pre> \n</td>\n<td valign=\"top\" width=\"75%\">\n<code>ri</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\"> <pre class=\"smallexample\">const int*</pre> \n</td>\n<td valign=\"top\" width=\"75%\">\n<code>^ri</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"25%\"> <pre class=\"smallexample\">int *const</pre> \n</td>\n<td valign=\"top\" width=\"75%\">\n<code>r^i</code> </td>\n</tr>\n</table>  <code>const int*</code> is a pointer to a <code>const int</code>, and so is encoded as <code>^ri</code>. <code>int* const</code>, instead, is a <code>const</code> pointer to an <code>int</code>, and so is encoded as <code>r^i</code>. <p>Finally, there is a complication when encoding <code>const char *</code> versus <code>char * const</code>. Because <code>char *</code> is encoded as <code>*</code> and not as <code>^c</code>, there is no way to express the fact that <code>r</code> applies to the pointer or to the pointee. </p>\n<p>Hence, it is assumed as a convention that <code>r*</code> means <code>const\nchar *</code> (since it is what is most often meant), and there is no way to encode <code>char *const</code>. <code>char *const</code> would simply be encoded as <code>*</code>, and the <code>const</code> is lost. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"legacy-type-encoding#Legacy-type-encoding\">Legacy type encoding</a> </li>\n<li>\n<a accesskey=\"2\" href=\"_0040encode#g_t_0040encode\">@encode</a> </li>\n<li>\n<a accesskey=\"3\" href=\"method-signatures#Method-signatures\">Method signatures</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Type-encoding.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Type-encoding.html</a>\n  </p>\n</div>\n","legacy-type-encoding":"<h1 class=\"subsection\" id=\"Legacy-type-encoding\">8.3.1 Legacy type encoding</h1> <p>Unfortunately, historically GCC used to have a number of bugs in its encoding code. The NeXT runtime expects GCC to emit type encodings in this historical format (compatible with GCC-3.3), so when using the NeXT runtime, GCC will introduce on purpose a number of incorrect encodings: </p>\n<ul> <li>the read-only qualifier of the pointee gets emitted before the '^'. The read-only qualifier of the pointer itself gets ignored, unless it is a typedef. Also, the 'r' is only emitted for the outermost type. </li>\n<li>32-bit longs are encoded as 'l' or 'L', but not always. For typedefs, the compiler uses 'i' or 'I' instead if encoding a struct field or a pointer. </li>\n<li>\n<code>enum</code>s are always encoded as 'i' (int) even if they are actually unsigned or long. </li>\n</ul> <p>In addition to that, the NeXT runtime uses a different encoding for bitfields. It encodes them as <code>b</code> followed by the size, without a bit offset or the underlying field type. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Legacy-type-encoding.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Legacy-type-encoding.html</a>\n  </p>\n</div>\n","_0040encode":"<h1 class=\"subsection\" id=\"g_t_0040encode\">8.3.2 @encode</h1> <p>GNU Objective-C supports the <code>@encode</code> syntax that allows you to create a type encoding from a C/Objective-C type. For example, <code>@encode(int)</code> is compiled by the compiler into <code>\"i\"</code>. </p>\n<p><code>@encode</code> does not support type qualifiers other than <code>const</code>. For example, <code>@encode(const char*)</code> is valid and is compiled into <code>\"r*\"</code>, while <code>@encode(bycopy char *)</code> is invalid and will cause a compilation error. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/_0040encode.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/_0040encode.html</a>\n  </p>\n</div>\n","method-signatures":"<h1 class=\"subsection\" id=\"Method-signatures\">8.3.3 Method signatures</h1> <p>This section documents the encoding of method types, which is rarely needed to use Objective-C. You should skip it at a first reading; the runtime provides functions that will work on methods and can walk through the list of parameters and interpret them for you. These functions are part of the public “API” and are the preferred way to interact with method signatures from user code. </p>\n<p>But if you need to debug a problem with method signatures and need to know how they are implemented (i.e., the “ABI”), read on. </p>\n<p>Methods have their “signature” encoded and made available to the runtime. The “signature” encodes all the information required to dynamically build invocations of the method at runtime: return type and arguments. </p>\n<p>The “signature” is a null-terminated string, composed of the following: </p>\n<ul> <li>The return type, including type qualifiers. For example, a method returning <code>int</code> would have <code>i</code> here. </li>\n<li>The total size (in bytes) required to pass all the parameters. This includes the two hidden parameters (the object <code>self</code> and the method selector <code>_cmd</code>). </li>\n<li>Each argument, with the type encoding, followed by the offset (in bytes) of the argument in the list of parameters. </li>\n</ul> <p>For example, a method with no arguments and returning <code>int</code> would have the signature <code>i8@0:4</code> if the size of a pointer is 4. The signature is interpreted as follows: the <code>i</code> is the return type (an <code>int</code>), the <code>8</code> is the total size of the parameters in bytes (two pointers each of size 4), the <code>@0</code> is the first parameter (an object at byte offset <code>0</code>) and <code>:4</code> is the second parameter (a <code>SEL</code> at byte offset <code>4</code>). </p>\n<p>You can easily find more examples by running the “strings” program on an Objective-C object file compiled by GCC. You'll see a lot of strings that look very much like <code>i8@0:4</code>. They are signatures of Objective-C methods. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Method-signatures.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Method-signatures.html</a>\n  </p>\n</div>\n","garbage-collection":"<h1 class=\"section\" id=\"Garbage-Collection\">8.4 Garbage Collection</h1> <p>This section is specific for the GNU Objective-C runtime. If you are using a different runtime, you can skip it. </p>\n<p>Support for garbage collection with the GNU runtime has been added by using a powerful conservative garbage collector, known as the Boehm-Demers-Weiser conservative garbage collector. </p>\n<p>To enable the support for it you have to configure the compiler using an additional argument, <code>--enable-objc-gc</code>. This will build the boehm-gc library, and build an additional runtime library which has several enhancements to support the garbage collector. The new library has a new name, <code>libobjc_gc.a</code> to not conflict with the non-garbage-collected library. </p>\n<p>When the garbage collector is used, the objects are allocated using the so-called typed memory allocation mechanism available in the Boehm-Demers-Weiser collector. This mode requires precise information on where pointers are located inside objects. This information is computed once per class, immediately after the class has been initialized. </p>\n<p>There is a new runtime function <code>class_ivar_set_gcinvisible()</code> which can be used to declare a so-called weak pointer reference. Such a pointer is basically hidden for the garbage collector; this can be useful in certain situations, especially when you want to keep track of the allocated objects, yet allow them to be collected. This kind of pointers can only be members of objects, you cannot declare a global pointer as a weak reference. Every type which is a pointer type can be declared a weak pointer, including <code>id</code>, <code>Class</code> and <code>SEL</code>. </p>\n<p>Here is an example of how to use this feature. Suppose you want to implement a class whose instances hold a weak pointer reference; the following class does this: </p>\n<pre class=\"smallexample\">@interface WeakPointer : Object\n{\n    const void* weakPointer;\n}\n\n- initWithPointer:(const void*)p;\n- (const void*)weakPointer;\n@end\n\n\n@implementation WeakPointer\n\n+ (void)initialize\n{\n  if (self == objc_lookUpClass (\"WeakPointer\"))\n    class_ivar_set_gcinvisible (self, \"weakPointer\", YES);\n}\n\n- initWithPointer:(const void*)p\n{\n  weakPointer = p;\n  return self;\n}\n\n- (const void*)weakPointer\n{\n  return weakPointer;\n}\n\n@end</pre> <p>Weak pointers are supported through a new type character specifier represented by the ‘<code>!</code>’ character. The <code>class_ivar_set_gcinvisible()</code> function adds or removes this specifier to the string type description of the instance variable named as argument.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Garbage-Collection.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Garbage-Collection.html</a>\n  </p>\n</div>\n","constant-string-objects":"<h1 class=\"section\" id=\"Constant-string-objects\">8.5 Constant string objects</h1> <p>GNU Objective-C provides constant string objects that are generated directly by the compiler. You declare a constant string object by prefixing a C constant string with the character ‘<code>@</code>’: </p>\n<pre class=\"smallexample\">id myString = @\"this is a constant string object\";</pre> <p>The constant string objects are by default instances of the <code>NXConstantString</code> class which is provided by the GNU Objective-C runtime. To get the definition of this class you must include the <code>objc/NXConstStr.h</code> header file. </p>\n<p>User defined libraries may want to implement their own constant string class. To be able to support them, the GNU Objective-C compiler provides a new command line options <samp><span class=\"option\">-fconstant-string-class=</span><var>class-name</var></samp>. The provided class should adhere to a strict structure, the same as <code>NXConstantString</code>'s structure: </p>\n<pre class=\"smallexample\">@interface MyConstantStringClass\n{\n  Class isa;\n  char *c_string;\n  unsigned int len;\n}\n@end</pre> <p><code>NXConstantString</code> inherits from <code>Object</code>; user class libraries may choose to inherit the customized constant string class from a different class than <code>Object</code>. There is no requirement in the methods the constant string class has to implement, but the final ivar layout of the class must be the compatible with the given structure. </p>\n<p>When the compiler creates the statically allocated constant string object, the <code>c_string</code> field will be filled by the compiler with the string; the <code>length</code> field will be filled by the compiler with the string length; the <code>isa</code> pointer will be filled with <code>NULL</code> by the compiler, and it will later be fixed up automatically at runtime by the GNU Objective-C runtime library to point to the class which was set by the <code>-fconstant-string-class</code> option when the object file is loaded (if you wonder how it works behind the scenes, the name of the class to use, and the list of static objects to fixup, are stored by the compiler in the object file in a place where the GNU runtime library will find them at runtime). </p>\n<p>As a result, when a file is compiled with the <code>-fconstant-string-class</code> option, all the constant string objects will be instances of the class specified as argument to this option. It is possible to have multiple compilation units referring to different constant string classes, neither the compiler nor the linker impose any restrictions in doing this.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Constant-string-objects.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Constant-string-objects.html</a>\n  </p>\n</div>\n","compatibility_005falias":"<h1 class=\"section\" id=\"compatibility_005falias\">8.6 compatibility_alias</h1> <p>The keyword <code>@compatibility_alias</code> allows you to define a class name as equivalent to another class name. For example: </p>\n<pre class=\"smallexample\">@compatibility_alias WOApplication GSWApplication;</pre> <p>tells the compiler that each time it encounters <code>WOApplication</code> as a class name, it should replace it with <code>GSWApplication</code> (that is, <code>WOApplication</code> is just an alias for <code>GSWApplication</code>). </p>\n<p>There are some constraints on how this can be used— </p>\n<ul> <li>\n<code>WOApplication</code> (the alias) must not be an existing class; </li>\n<li>\n<code>GSWApplication</code> (the real class) must be an existing class. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/compatibility_005falias.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/compatibility_005falias.html</a>\n  </p>\n</div>\n","exceptions":"<h1 class=\"section\" id=\"Exceptions\">8.7 Exceptions</h1> <p>GNU Objective-C provides exception support built into the language, as in the following example: </p>\n<pre class=\"smallexample\">@try {\n  ...\n     @throw expr;\n  ...\n}\n@catch (AnObjCClass *exc) {\n  ...\n    @throw expr;\n  ...\n    @throw;\n  ...\n}\n@catch (AnotherClass *exc) {\n  ...\n}\n@catch (id allOthers) {\n  ...\n}\n@finally {\n  ...\n    @throw expr;\n  ...\n}</pre> <p>The <code>@throw</code> statement may appear anywhere in an Objective-C or Objective-C++ program; when used inside of a <code>@catch</code> block, the <code>@throw</code> may appear without an argument (as shown above), in which case the object caught by the <code>@catch</code> will be rethrown. </p>\n<p>Note that only (pointers to) Objective-C objects may be thrown and caught using this scheme. When an object is thrown, it will be caught by the nearest <code>@catch</code> clause capable of handling objects of that type, analogously to how <code>catch</code> blocks work in C++ and Java. A <code>@catch(id ...)</code> clause (as shown above) may also be provided to catch any and all Objective-C exceptions not caught by previous <code>@catch</code> clauses (if any). </p>\n<p>The <code>@finally</code> clause, if present, will be executed upon exit from the immediately preceding <code>@try ... @catch</code> section. This will happen regardless of whether any exceptions are thrown, caught or rethrown inside the <code>@try ... @catch</code> section, analogously to the behavior of the <code>finally</code> clause in Java. </p>\n<p>There are several caveats to using the new exception mechanism: </p>\n<ul> <li>The <code>-fobjc-exceptions</code> command line option must be used when compiling Objective-C files that use exceptions. </li>\n<li>With the GNU runtime, exceptions are always implemented as “native” exceptions and it is recommended that the <code>-fexceptions</code> and <code>-shared-libgcc</code> options are used when linking. </li>\n<li>With the NeXT runtime, although currently designed to be binary compatible with <code>NS_HANDLER</code>-style idioms provided by the <code>NSException</code> class, the new exceptions can only be used on Mac OS X 10.3 (Panther) and later systems, due to additional functionality needed in the NeXT Objective-C runtime. </li>\n<li>As mentioned above, the new exceptions do not support handling types other than Objective-C objects. Furthermore, when used from Objective-C++, the Objective-C exception model does not interoperate with C++ exceptions at this time. This means you cannot <code>@throw</code> an exception from Objective-C and <code>catch</code> it in C++, or vice versa (i.e., <code>throw ... @catch</code>). </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Exceptions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Exceptions.html</a>\n  </p>\n</div>\n","synchronization":"<h1 class=\"section\" id=\"Synchronization\">8.8 Synchronization</h1> <p>GNU Objective-C provides support for synchronized blocks: </p>\n<pre class=\"smallexample\">@synchronized (ObjCClass *guard) {\n  ...\n}</pre> <p>Upon entering the <code>@synchronized</code> block, a thread of execution shall first check whether a lock has been placed on the corresponding <code>guard</code> object by another thread. If it has, the current thread shall wait until the other thread relinquishes its lock. Once <code>guard</code> becomes available, the current thread will place its own lock on it, execute the code contained in the <code>@synchronized</code> block, and finally relinquish the lock (thereby making <code>guard</code> available to other threads). </p>\n<p>Unlike Java, Objective-C does not allow for entire methods to be marked <code>@synchronized</code>. Note that throwing exceptions out of <code>@synchronized</code> blocks is allowed, and will cause the guarding object to be unlocked properly. </p>\n<p>Because of the interactions between synchronization and exception handling, you can only use <code>@synchronized</code> when compiling with exceptions enabled, that is with the command line option <code>-fobjc-exceptions</code>.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Synchronization.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Synchronization.html</a>\n  </p>\n</div>\n","fast-enumeration":"<h1 class=\"section\" id=\"Fast-enumeration\">8.9 Fast enumeration</h1> <ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"using-fast-enumeration#Using-fast-enumeration\">Using fast enumeration</a> </li>\n<li>\n<a accesskey=\"2\" href=\"c99_002dlike-fast-enumeration-syntax#c99_002dlike-fast-enumeration-syntax\">c99-like fast enumeration syntax</a> </li>\n<li>\n<a accesskey=\"3\" href=\"fast-enumeration-details#Fast-enumeration-details\">Fast enumeration details</a> </li>\n<li>\n<a accesskey=\"4\" href=\"fast-enumeration-protocol#Fast-enumeration-protocol\">Fast enumeration protocol</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fast-enumeration.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fast-enumeration.html</a>\n  </p>\n</div>\n","using-fast-enumeration":"<h1 class=\"subsection\" id=\"Using-fast-enumeration\">8.9.1 Using fast enumeration</h1> <p>GNU Objective-C provides support for the fast enumeration syntax: </p>\n<pre class=\"smallexample\">id array = ...;\nid object;\n     \nfor (object in array)\n{\n  /* Do something with 'object' */\n}</pre> <p><code>array</code> needs to be an Objective-C object (usually a collection object, for example an array, a dictionary or a set) which implements the “Fast Enumeration Protocol” (see below). If you are using a Foundation library such as GNUstep Base or Apple Cocoa Foundation, all collection objects in the library implement this protocol and can be used in this way. </p>\n<p>The code above would iterate over all objects in <code>array</code>. For each of them, it assigns it to <code>object</code>, then executes the <code>Do something with 'object'</code> statements. </p>\n<p>Here is a fully worked-out example using a Foundation library (which provides the implementation of <code>NSArray</code>, <code>NSString</code> and <code>NSLog</code>): </p>\n<pre class=\"smallexample\">NSArray *array = [NSArray arrayWithObjects: @\"1\", @\"2\", @\"3\", nil];\nNSString *object;\n     \nfor (object in array)\n  NSLog (@\"Iterating over %@\", object);</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Using-fast-enumeration.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Using-fast-enumeration.html</a>\n  </p>\n</div>\n","c99_002dlike-fast-enumeration-syntax":"<h1 class=\"subsection\" id=\"c99_002dlike-fast-enumeration-syntax\">8.9.2 c99-like fast enumeration syntax</h1> <p>A c99-like declaration syntax is also allowed: </p>\n<pre class=\"smallexample\">id array = ...;\n     \nfor (id object in array)\n{\n  /* Do something with 'object'  */\n}</pre> <p>this is completely equivalent to: </p>\n<pre class=\"smallexample\">id array = ...;\n     \n{\n  id object;\n  for (object in array)\n  {\n    /* Do something with 'object'  */\n  }\n}</pre> <p>but can save some typing. </p>\n<p>Note that the option <code>-std=c99</code> is not required to allow this syntax in Objective-C.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/c99_002dlike-fast-enumeration-syntax.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/c99_002dlike-fast-enumeration-syntax.html</a>\n  </p>\n</div>\n","fast-enumeration-details":"<h1 class=\"subsection\" id=\"Fast-enumeration-details\">8.9.3 Fast enumeration details</h1> <p>Here is a more technical description with the gory details. Consider the code </p>\n<pre class=\"smallexample\">for (<var>object expression</var> in <var>collection expression</var>)\n{\n  <var>statements</var>\n}</pre> <p>here is what happens when you run it: </p>\n<ul> <li>\n<var>collection expression</var> is evaluated exactly once and the result is used as the collection object to iterate over. This means it is safe to write code such as <code>for (object in [NSDictionary\nkeyEnumerator]) ...</code>. </li>\n<li>the iteration is implemented by the compiler by repeatedly getting batches of objects from the collection object using the fast enumeration protocol (see below), then iterating over all objects in the batch. This is faster than a normal enumeration where objects are retrieved one by one (hence the name “fast enumeration”). </li>\n<li>if there are no objects in the collection, then <var>object expression</var> is set to <code>nil</code> and the loop immediately terminates. </li>\n<li>if there are objects in the collection, then for each object in the collection (in the order they are returned) <var>object expression</var> is set to the object, then <var>statements</var> are executed. </li>\n<li>\n<var>statements</var> can contain <code>break</code> and <code>continue</code> commands, which will abort the iteration or skip to the next loop iteration as expected. </li>\n<li>when the iteration ends because there are no more objects to iterate over, <var>object expression</var> is set to <code>nil</code>. This allows you to determine whether the iteration finished because a <code>break</code> command was used (in which case <var>object expression</var> will remain set to the last object that was iterated over) or because it iterated over all the objects (in which case <var>object expression</var> will be set to <code>nil</code>). </li>\n<li>\n<var>statements</var> must not make any changes to the collection object; if they do, it is a hard error and the fast enumeration terminates by invoking <code>objc_enumerationMutation</code>, a runtime function that normally aborts the program but which can be customized by Foundation libraries via <code>objc_set_mutation_handler</code> to do something different, such as raising an exception. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fast-enumeration-details.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fast-enumeration-details.html</a>\n  </p>\n</div>\n","fast-enumeration-protocol":"<h1 class=\"subsection\" id=\"Fast-enumeration-protocol\">8.9.4 Fast enumeration protocol</h1> <p>If you want your own collection object to be usable with fast enumeration, you need to have it implement the method </p>\n<pre class=\"smallexample\">- (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state\n                                      objects: (id *)objects\n                                        count: (unsigned long)len;</pre> <p>where <code>NSFastEnumerationState</code> must be defined in your code as follows: </p>\n<pre class=\"smallexample\">typedef struct\n{\n  unsigned long state;\n  id            *itemsPtr;\n  unsigned long *mutationsPtr;\n  unsigned long extra[5];\n} NSFastEnumerationState;</pre> <p>If no <code>NSFastEnumerationState</code> is defined in your code, the compiler will automatically replace <code>NSFastEnumerationState *</code> with <code>struct __objcFastEnumerationState *</code>, where that type is silently defined by the compiler in an identical way. This can be confusing and we recommend that you define <code>NSFastEnumerationState</code> (as shown above) instead. </p>\n<p>The method is called repeatedly during a fast enumeration to retrieve batches of objects. Each invocation of the method should retrieve the next batch of objects. </p>\n<p>The return value of the method is the number of objects in the current batch; this should not exceed <code>len</code>, which is the maximum size of a batch as requested by the caller. The batch itself is returned in the <code>itemsPtr</code> field of the <code>NSFastEnumerationState</code> struct. </p>\n<p>To help with returning the objects, the <code>objects</code> array is a C array preallocated by the caller (on the stack) of size <code>len</code>. In many cases you can put the objects you want to return in that <code>objects</code> array, then do <code>itemsPtr = objects</code>. But you don't have to; if your collection already has the objects to return in some form of C array, it could return them from there instead. </p>\n<p>The <code>state</code> and <code>extra</code> fields of the <code>NSFastEnumerationState</code> structure allows your collection object to keep track of the state of the enumeration. In a simple array implementation, <code>state</code> may keep track of the index of the last object that was returned, and <code>extra</code> may be unused. </p>\n<p>The <code>mutationsPtr</code> field of the <code>NSFastEnumerationState</code> is used to keep track of mutations. It should point to a number; before working on each object, the fast enumeration loop will check that this number has not changed. If it has, a mutation has happened and the fast enumeration will abort. So, <code>mutationsPtr</code> could be set to point to some sort of version number of your collection, which is increased by one every time there is a change (for example when an object is added or removed). Or, if you are content with less strict mutation checks, it could point to the number of objects in your collection or some other value that can be checked to perform an approximate check that the collection has not been mutated. </p>\n<p>Finally, note how we declared the <code>len</code> argument and the return value to be of type <code>unsigned long</code>. They could also be declared to be of type <code>unsigned int</code> and everything would still work.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fast-enumeration-protocol.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fast-enumeration-protocol.html</a>\n  </p>\n</div>\n","messaging-with-the-gnu-objective_002dc-runtime":"<h1 class=\"section\" id=\"Messaging-with-the-GNU-Objective_002dC-runtime\">8.10 Messaging with the GNU Objective-C runtime</h1> <p>This section is specific for the GNU Objective-C runtime. If you are using a different runtime, you can skip it. </p>\n<p>The implementation of messaging in the GNU Objective-C runtime is designed to be portable, and so is based on standard C. </p>\n<p>Sending a message in the GNU Objective-C runtime is composed of two separate steps. First, there is a call to the lookup function, <code>objc_msg_lookup ()</code> (or, in the case of messages to super, <code>objc_msg_lookup_super ()</code>). This runtime function takes as argument the receiver and the selector of the method to be called; it returns the <code>IMP</code>, that is a pointer to the function implementing the method. The second step of method invocation consists of casting this pointer function to the appropriate function pointer type, and calling the function pointed to it with the right arguments. </p>\n<p>For example, when the compiler encounters a method invocation such as <code>[object init]</code>, it compiles it into a call to <code>objc_msg_lookup (object, @selector(init))</code> followed by a cast of the returned value to the appropriate function pointer type, and then it calls it. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"dynamically-registering-methods#Dynamically-registering-methods\">Dynamically registering methods</a> </li>\n<li>\n<a accesskey=\"2\" href=\"forwarding-hook#Forwarding-hook\">Forwarding hook</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Messaging-with-the-GNU-Objective_002dC-runtime.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Messaging-with-the-GNU-Objective_002dC-runtime.html</a>\n  </p>\n</div>\n","dynamically-registering-methods":"<h1 class=\"subsection\" id=\"Dynamically-registering-methods\">8.10.1 Dynamically registering methods</h1> <p>If <code>objc_msg_lookup()</code> does not find a suitable method implementation, because the receiver does not implement the required method, it tries to see if the class can dynamically register the method. </p>\n<p>To do so, the runtime checks if the class of the receiver implements the method </p>\n<pre class=\"smallexample\">+ (BOOL) resolveInstanceMethod: (SEL)selector;</pre> <p>in the case of an instance method, or </p>\n<pre class=\"smallexample\">+ (BOOL) resolveClassMethod: (SEL)selector;</pre> <p>in the case of a class method. If the class implements it, the runtime invokes it, passing as argument the selector of the original method, and if it returns <code>YES</code>, the runtime tries the lookup again, which could now succeed if a matching method was added dynamically by <code>+resolveInstanceMethod:</code> or <code>+resolveClassMethod:</code>. </p>\n<p>This allows classes to dynamically register methods (by adding them to the class using <code>class_addMethod</code>) when they are first called. To do so, a class should implement <code>+resolveInstanceMethod:</code> (or, depending on the case, <code>+resolveClassMethod:</code>) and have it recognize the selectors of methods that can be registered dynamically at runtime, register them, and return <code>YES</code>. It should return <code>NO</code> for methods that it does not dynamically registered at runtime. </p>\n<p>If <code>+resolveInstanceMethod:</code> (or <code>+resolveClassMethod:</code>) is not implemented or returns <code>NO</code>, the runtime then tries the forwarding hook. </p>\n<p>Support for <code>+resolveInstanceMethod:</code> and <code>resolveClassMethod:</code> was added to the GNU Objective-C runtime in GCC version 4.6.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Dynamically-registering-methods.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Dynamically-registering-methods.html</a>\n  </p>\n</div>\n","forwarding-hook":"<h1 class=\"subsection\" id=\"Forwarding-hook\">8.10.2 Forwarding hook</h1> <p>The GNU Objective-C runtime provides a hook, called <code>__objc_msg_forward2</code>, which is called by <code>objc_msg_lookup()</code> when it can't find a method implementation in the runtime tables and after calling <code>+resolveInstanceMethod:</code> and <code>+resolveClassMethod:</code> has been attempted and did not succeed in dynamically registering the method. </p>\n<p>To configure the hook, you set the global variable <code>__objc_msg_forward2</code> to a function with the same argument and return types of <code>objc_msg_lookup()</code>. When <code>objc_msg_lookup()</code> can not find a method implementation, it invokes the hook function you provided to get a method implementation to return. So, in practice <code>__objc_msg_forward2</code> allows you to extend <code>objc_msg_lookup()</code> by adding some custom code that is called to do a further lookup when no standard method implementation can be found using the normal lookup. </p>\n<p>This hook is generally reserved for “Foundation” libraries such as GNUstep Base, which use it to implement their high-level method forwarding API, typically based around the <code>forwardInvocation:</code> method. So, unless you are implementing your own “Foundation” library, you should not set this hook. </p>\n<p>In a typical forwarding implementation, the <code>__objc_msg_forward2</code> hook function determines the argument and return type of the method that is being looked up, and then creates a function that takes these arguments and has that return type, and returns it to the caller. Creating this function is non-trivial and is typically performed using a dedicated library such as <code>libffi</code>. </p>\n<p>The forwarding method implementation thus created is returned by <code>objc_msg_lookup()</code> and is executed as if it was a normal method implementation. When the forwarding method implementation is called, it is usually expected to pack all arguments into some sort of object (typically, an <code>NSInvocation</code> in a “Foundation” library), and hand it over to the programmer (<code>forwardInvocation:</code>) who is then allowed to manipulate the method invocation using a high-level API provided by the “Foundation” library. For example, the programmer may want to examine the method invocation arguments and name and potentially change them before forwarding the method invocation to one or more local objects (<code>performInvocation:</code>) or even to remote objects (by using Distributed Objects or some other mechanism). When all this completes, the return value is passed back and must be returned correctly to the original caller. </p>\n<p>Note that the GNU Objective-C runtime currently provides no support for method forwarding or method invocations other than the <code>__objc_msg_forward2</code> hook. </p>\n<p>If the forwarding hook does not exist or returns <code>NULL</code>, the runtime currently attempts forwarding using an older, deprecated API, and if that fails, it aborts the program. In future versions of the GNU Objective-C runtime, the runtime will immediately abort.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Forwarding-hook.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Forwarding-hook.html</a>\n  </p>\n</div>\n","compatibility":"<h1 class=\"chapter\" id=\"Compatibility\">9 Binary Compatibility</h1> <p> Binary compatibility encompasses several related concepts: </p>\n<dl> <dt>application binary interface (ABI)</dt>\n<dd>The set of runtime conventions followed by all of the tools that deal with binary representations of a program, including compilers, assemblers, linkers, and language runtime support. Some ABIs are formal with a written specification, possibly designed by multiple interested parties. Others are simply the way things are actually done by a particular set of tools. </dd>\n<dt>ABI conformance</dt>\n<dd>A compiler conforms to an ABI if it generates code that follows all of the specifications enumerated by that ABI. A library conforms to an ABI if it is implemented according to that ABI. An application conforms to an ABI if it is built using tools that conform to that ABI and does not contain source code that specifically changes behavior specified by the ABI. </dd>\n<dt>calling conventions</dt>\n<dd>Calling conventions are a subset of an ABI that specify of how arguments are passed and function results are returned. </dd>\n<dt>interoperability</dt>\n<dd>Different sets of tools are interoperable if they generate files that can be used in the same program. The set of tools includes compilers, assemblers, linkers, libraries, header files, startup files, and debuggers. Binaries produced by different sets of tools are not interoperable unless they implement the same ABI. This applies to different versions of the same tools as well as tools from different vendors. </dd>\n<dt>intercallability</dt>\n<dd>Whether a function in a binary built by one set of tools can call a function in a binary built by a different set of tools is a subset of interoperability. </dd>\n<dt>implementation-defined features</dt>\n<dd>Language standards include lists of implementation-defined features whose behavior can vary from one implementation to another. Some of these features are normally covered by a platform's ABI and others are not. The features that are not covered by an ABI generally affect how a program behaves, but not intercallability. </dd>\n<dt>compatibility</dt>\n<dd>Conformance to the same ABI and the same behavior of implementation-defined features are both relevant for compatibility. </dd>\n</dl> <p>The application binary interface implemented by a C or C++ compiler affects code generation and runtime support for: </p>\n<ul> <li>size and alignment of data types </li>\n<li>layout of structured types </li>\n<li>calling conventions </li>\n<li>register usage conventions </li>\n<li>interfaces for runtime arithmetic support </li>\n<li>object file formats </li>\n</ul> <p>In addition, the application binary interface implemented by a C++ compiler affects code generation and runtime support for: </p>\n<ul> <li>name mangling </li>\n<li>exception handling </li>\n<li>invoking constructors and destructors </li>\n<li>layout, alignment, and padding of classes </li>\n<li>layout and alignment of virtual tables </li>\n</ul> <p>Some GCC compilation options cause the compiler to generate code that does not conform to the platform's default ABI. Other options cause different program behavior for implementation-defined features that are not covered by an ABI. These options are provided for consistency with other compilers that do not follow the platform's default ABI or the usual behavior of implementation-defined features for the platform. Be very careful about using such options. </p>\n<p>Most platforms have a well-defined ABI that covers C code, but ABIs that cover C++ functionality are not yet common. </p>\n<p>Starting with GCC 3.2, GCC binary conventions for C++ are based on a written, vendor-neutral C++ ABI that was designed to be specific to 64-bit Itanium but also includes generic specifications that apply to any platform. This C++ ABI is also implemented by other compiler vendors on some platforms, notably GNU/Linux and BSD systems. We have tried hard to provide a stable ABI that will be compatible with future GCC releases, but it is possible that we will encounter problems that make this difficult. Such problems could include different interpretations of the C++ ABI by different vendors, bugs in the ABI, or bugs in the implementation of the ABI in different compilers. GCC's <code>-Wabi</code> switch warns when G++ generates code that is probably not compatible with the C++ ABI. </p>\n<p>The C++ library used with a C++ compiler includes the Standard C++ Library, with functionality defined in the C++ Standard, plus language runtime support. The runtime support is included in a C++ ABI, but there is no formal ABI for the Standard C++ Library. Two implementations of that library are interoperable if one follows the de-facto ABI of the other and if they are both built with the same compiler, or with compilers that conform to the same ABI for C++ compiler and runtime support. </p>\n<p>When G++ and another C++ compiler conform to the same C++ ABI, but the implementations of the Standard C++ Library that they normally use do not follow the same ABI for the Standard C++ Library, object files built with those compilers can be used in the same program only if they use the same C++ library. This requires specifying the location of the C++ library header files when invoking the compiler whose usual library is not being used. The location of GCC's C++ header files depends on how the GCC build was configured, but can be seen by using the G++ <code>-v</code> option. With default configuration options for G++ 3.3 the compile line for a different C++ compiler needs to include </p>\n<pre class=\"smallexample\">-I<var>gcc_install_directory</var>/include/c++/3.3</pre> <p>Similarly, compiling code with G++ that must use a C++ library other than the GNU C++ library requires specifying the location of the header files for that other library. </p>\n<p>The most straightforward way to link a program to use a particular C++ library is to use a C++ driver that specifies that C++ library by default. The <code>g++</code> driver, for example, tells the linker where to find GCC's C++ library (<code>libstdc++</code>) plus the other libraries and startup files it needs, in the proper order. </p>\n<p>If a program must use a different C++ library and it's not possible to do the final link using a C++ driver that uses that library by default, it is necessary to tell <code>g++</code> the location and name of that library. It might also be necessary to specify different startup files and other runtime support libraries, and to suppress the use of GCC's support libraries with one or more of the options <code>-nostdlib</code>, <code>-nostartfiles</code>, and <code>-nodefaultlibs</code>.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Compatibility.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Compatibility.html</a>\n  </p>\n</div>\n","gcov":"<h1 class=\"chapter\" id=\"Gcov\">10 <code>gcov</code>—a Test Coverage Program</h1> <p><code>gcov</code> is a tool you can use in conjunction with GCC to test code coverage in your programs. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"gcov-intro#Gcov-Intro\">Gcov Intro</a>: Introduction to gcov. </li>\n<li>\n<a accesskey=\"2\" href=\"invoking-gcov#Invoking-Gcov\">Invoking Gcov</a>: How to use gcov. </li>\n<li>\n<a accesskey=\"3\" href=\"gcov-and-optimization#Gcov-and-Optimization\">Gcov and Optimization</a>: Using gcov with GCC optimization. </li>\n<li>\n<a accesskey=\"4\" href=\"gcov-data-files#Gcov-Data-Files\">Gcov Data Files</a>: The files used by gcov. </li>\n<li>\n<a accesskey=\"5\" href=\"cross_002dprofiling#Cross_002dprofiling\">Cross-profiling</a>: Data file relocation. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Gcov.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Gcov.html</a>\n  </p>\n</div>\n","gcov-intro":"<h1 class=\"section\" id=\"Gcov-Intro\">10.1 Introduction to <code>gcov</code>\n</h1>  <p><code>gcov</code> is a test coverage program. Use it in concert with GCC to analyze your programs to help create more efficient, faster running code and to discover untested parts of your program. You can use <code>gcov</code> as a profiling tool to help discover where your optimization efforts will best affect your code. You can also use <code>gcov</code> along with the other profiling tool, <code>gprof</code>, to assess which parts of your code use the greatest amount of computing time. </p>\n<p>Profiling tools help you analyze your code's performance. Using a profiler such as <code>gcov</code> or <code>gprof</code>, you can find out some basic performance statistics, such as: </p>\n<ul> <li>how often each line of code executes </li>\n<li>what lines of code are actually executed </li>\n<li>how much computing time each section of code uses </li>\n</ul> <p>Once you know these things about how your code works when compiled, you can look at each module to see which modules should be optimized. <code>gcov</code> helps you determine where to work on optimization. </p>\n<p>Software developers also use coverage testing in concert with testsuites, to make sure software is actually good enough for a release. Testsuites can verify that a program works as expected; a coverage program tests to see how much of the program is exercised by the testsuite. Developers can then determine what kinds of test cases need to be added to the testsuites to create both better testing and a better final product. </p>\n<p>You should compile your code without optimization if you plan to use <code>gcov</code> because the optimization, by combining some lines of code into one function, may not give you as much information as you need to look for `hot spots' where the code is using a great deal of computer time. Likewise, because <code>gcov</code> accumulates statistics by line (at the lowest resolution), it works best with a programming style that places only one statement on each line. If you use complicated macros that expand to loops or to other control structures, the statistics are less helpful—they only report on the line where the macro call appears. If your complex macros behave like functions, you can replace them with inline functions to solve this problem. </p>\n<p><code>gcov</code> creates a logfile called <samp><var>sourcefile</var><span class=\"file\">.gcov</span></samp> which indicates how many times each line of a source file <samp><var>sourcefile</var><span class=\"file\">.c</span></samp> has executed. You can use these logfiles along with <code>gprof</code> to aid in fine-tuning the performance of your programs. <code>gprof</code> gives timing information you can use along with the information you get from <code>gcov</code>. </p>\n<p><code>gcov</code> works only on code compiled with GCC. It is not compatible with any other profiling or test coverage mechanism.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Gcov-Intro.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Gcov-Intro.html</a>\n  </p>\n</div>\n","invoking-gcov":"<h1 class=\"section\" id=\"Invoking-Gcov\">10.2 Invoking <code>gcov</code>\n</h1> <pre class=\"smallexample\">gcov <span class=\"roman\">[</span><var>options</var><span class=\"roman\">]</span> <var>files</var></pre> <p><code>gcov</code> accepts the following options:  </p>\n<dl> <dt>\n<code>-h</code><dt><code>--help</code></dt>\n</dt>\n<dd>Display help about using <code>gcov</code> (on the standard output), and exit without doing any further processing. </dd>\n<dt>\n<code>-v</code><dt><code>--version</code></dt>\n</dt>\n<dd>Display the <code>gcov</code> version number (on the standard output), and exit without doing any further processing. </dd>\n<dt>\n<code>-a</code><dt><code>--all-blocks</code></dt>\n</dt>\n<dd>Write individual execution counts for every basic block. Normally gcov outputs execution counts only for the main blocks of a line. With this option you can determine if blocks within a single line are not being executed. </dd>\n<dt>\n<code>-b</code><dt><code>--branch-probabilities</code></dt>\n</dt>\n<dd>Write branch frequencies to the output file, and write branch summary info to the standard output. This option allows you to see how often each branch in your program was taken. Unconditional branches will not be shown, unless the <code>-u</code> option is given. </dd>\n<dt>\n<code>-c</code><dt><code>--branch-counts</code></dt>\n</dt>\n<dd>Write branch frequencies as the number of branches taken, rather than the percentage of branches taken. </dd>\n<dt>\n<code>-n</code><dt><code>--no-output</code></dt>\n</dt>\n<dd>Do not create the <code>gcov</code> output file. </dd>\n<dt>\n<code>-l</code><dt><code>--long-file-names</code></dt>\n</dt>\n<dd>Create long file names for included source files. For example, if the header file <code>x.h</code> contains code, and was included in the file <code>a.c</code>, then running <code>gcov</code> on the file <code>a.c</code> will produce an output file called <code>a.c##x.h.gcov</code> instead of <code>x.h.gcov</code>. This can be useful if <code>x.h</code> is included in multiple source files and you want to see the individual contributions. If you use the ‘<code>-p</code>’ option, both the including and included file names will be complete path names. </dd>\n<dt>\n<code>-p</code><dt><code>--preserve-paths</code></dt>\n</dt>\n<dd>Preserve complete path information in the names of generated <code>.gcov</code> files. Without this option, just the filename component is used. With this option, all directories are used, with ‘<code>/</code>’ characters translated to ‘<code>#</code>’ characters, <code>.</code> directory components removed and unremoveable <code>..</code> components renamed to ‘<code>^</code>’. This is useful if sourcefiles are in several different directories. </dd>\n<dt>\n<code>-r</code><dt><code>--relative-only</code></dt>\n</dt>\n<dd>Only output information about source files with a relative pathname (after source prefix elision). Absolute paths are usually system header files and coverage of any inline functions therein is normally uninteresting. </dd>\n<dt>\n<code>-f</code><dt><code>--function-summaries</code></dt>\n</dt>\n<dd>Output summaries for each function in addition to the file level summary. </dd>\n<dt>\n<code>-o </code><var>directory|file</var><dt>\n<code>--object-directory </code><var>directory</var><dt>\n<code>--object-file </code><var>file</var>\n</dt>\n</dt>\n</dt>\n<dd>Specify either the directory containing the gcov data files, or the object path name. The <code>.gcno</code>, and <code>.gcda</code> data files are searched for using this option. If a directory is specified, the data files are in that directory and named after the input file name, without its extension. If a file is specified here, the data files are named after that file, without its extension. </dd>\n<dt>\n<code>-s </code><var>directory</var><dt>\n<code>--source-prefix </code><var>directory</var>\n</dt>\n</dt>\n<dd>A prefix for source file names to remove when generating the output coverage files. This option is useful when building in a separate directory, and the pathname to the source directory is not wanted when determining the output file names. Note that this prefix detection is applied before determining whether the source file is absolute. </dd>\n<dt>\n<code>-u</code><dt><code>--unconditional-branches</code></dt>\n</dt>\n<dd>When branch probabilities are given, include those of unconditional branches. Unconditional branches are normally not interesting. </dd>\n<dt>\n<code>-d</code><dt><code>--display-progress</code></dt>\n</dt>\n<dd>Display the progress on the standard output. </dd>\n<dt>\n<code>-i</code><dt><code>--intermediate-format</code></dt>\n</dt>\n<dd>Output gcov file in an easy-to-parse intermediate text format that can be used by <code>lcov</code> or other tools. The output is a single <code>.gcov</code> file per <code>.gcda</code> file. No source code is required. <p>The format of the intermediate <code>.gcov</code> file is plain text with one entry per line </p>\n<pre class=\"smallexample\">file:<var>source_file_name</var>\nfunction:<var>line_number</var>,<var>execution_count</var>,<var>function_name</var>\nlcount:<var>line number</var>,<var>execution_count</var>\nbranch:<var>line_number</var>,<var>branch_coverage_type</var>\n\nWhere the <var>branch_coverage_type</var> is\n   notexec (Branch not executed)\n   taken (Branch executed and taken)\n   nottaken (Branch executed, but not taken)\n\nThere can be multiple <var>file</var> entries in an intermediate gcov\nfile. All entries following a <var>file</var> pertain to that source file\nuntil the next <var>file</var> entry.</pre> <p>Here is a sample when <code>-i</code> is used in conjunction with <code>-b</code> option: </p>\n<pre class=\"smallexample\">file:array.cc\nfunction:11,1,_Z3sumRKSt6vectorIPiSaIS0_EE\nfunction:22,1,main\nlcount:11,1\nlcount:12,1\nlcount:14,1\nbranch:14,taken\nlcount:26,1\nbranch:28,nottaken</pre> </dd>\n<dt>\n<code>-m</code><dt><code>--demangled-names</code></dt>\n</dt>\n<dd>Display demangled function names in output. The default is to show mangled function names. </dd>\n</dl> <p><code>gcov</code> should be run with the current directory the same as that when you invoked the compiler. Otherwise it will not be able to locate the source files. <code>gcov</code> produces files called <samp><var>mangledname</var><span class=\"file\">.gcov</span></samp> in the current directory. These contain the coverage information of the source file they correspond to. One <code>.gcov</code> file is produced for each source (or header) file containing code, which was compiled to produce the data files. The <var>mangledname</var> part of the output file name is usually simply the source file name, but can be something more complicated if the ‘<code>-l</code>’ or ‘<code>-p</code>’ options are given. Refer to those options for details. </p>\n<p>If you invoke <code>gcov</code> with multiple input files, the contributions from each input file are summed. Typically you would invoke it with the same list of files as the final link of your executable. </p>\n<p>The <code>.gcov</code> files contain the ‘<code>:</code>’ separated fields along with program source code. The format is </p>\n<pre class=\"smallexample\"><var>execution_count</var>:<var>line_number</var>:<var>source line text</var></pre> <p>Additional block information may succeed each line, when requested by command line option. The <var>execution_count</var> is ‘<code>-</code>’ for lines containing no code. Unexecuted lines are marked ‘<code>#####</code>’ or ‘<code>====</code>’, depending on whether they are reachable by non-exceptional paths or only exceptional paths such as C++ exception handlers, respectively. </p>\n<p>Some lines of information at the start have <var>line_number</var> of zero. These preamble lines are of the form </p>\n<pre class=\"smallexample\">-:0:<var>tag</var>:<var>value</var></pre> <p>The ordering and number of these preamble lines will be augmented as <code>gcov</code> development progresses — do not rely on them remaining unchanged. Use <var>tag</var> to locate a particular preamble line. </p>\n<p>The additional block information is of the form </p>\n<pre class=\"smallexample\"><var>tag</var> <var>information</var></pre> <p>The <var>information</var> is human readable, but designed to be simple enough for machine parsing too. </p>\n<p>When printing percentages, 0% and 100% are only printed when the values are <em>exactly</em> 0% and 100% respectively. Other values which would conventionally be rounded to 0% or 100% are instead printed as the nearest non-boundary value. </p>\n<p>When using <code>gcov</code>, you must first compile your program with two special GCC options: ‘<code>-fprofile-arcs -ftest-coverage</code>’. This tells the compiler to generate additional information needed by gcov (basically a flow graph of the program) and also includes additional code in the object files for generating the extra profiling information needed by gcov. These additional files are placed in the directory where the object file is located. </p>\n<p>Running the program will cause profile output to be generated. For each source file compiled with <code>-fprofile-arcs</code>, an accompanying <code>.gcda</code> file will be placed in the object file directory. </p>\n<p>Running <code>gcov</code> with your program's source file names as arguments will now produce a listing of the code along with frequency of execution for each line. For example, if your program is called <code>tmp.c</code>, this is what you see when you use the basic <code>gcov</code> facility: </p>\n<pre class=\"smallexample\">$ gcc -fprofile-arcs -ftest-coverage tmp.c\n$ a.out\n$ gcov tmp.c\n90.00% of 10 source lines executed in file tmp.c\nCreating tmp.c.gcov.</pre> <p>The file <code>tmp.c.gcov</code> contains output from <code>gcov</code>. Here is a sample: </p>\n<pre class=\"smallexample\">-:    0:Source:tmp.c\n    -:    0:Graph:tmp.gcno\n    -:    0:Data:tmp.gcda\n    -:    0:Runs:1\n    -:    0:Programs:1\n    -:    1:#include &lt;stdio.h&gt;\n    -:    2:\n    -:    3:int main (void)\n    1:    4:{\n    1:    5:  int i, total;\n    -:    6:\n    1:    7:  total = 0;\n    -:    8:\n   11:    9:  for (i = 0; i &lt; 10; i++)\n   10:   10:    total += i;\n    -:   11:\n    1:   12:  if (total != 45)\n#####:   13:    printf (\"Failure\\n\");\n    -:   14:  else\n    1:   15:    printf (\"Success\\n\");\n    1:   16:  return 0;\n    -:   17:}</pre> <p>When you use the <code>-a</code> option, you will get individual block counts, and the output looks like this: </p>\n<pre class=\"smallexample\">-:    0:Source:tmp.c\n    -:    0:Graph:tmp.gcno\n    -:    0:Data:tmp.gcda\n    -:    0:Runs:1\n    -:    0:Programs:1\n    -:    1:#include &lt;stdio.h&gt;\n    -:    2:\n    -:    3:int main (void)\n    1:    4:{\n    1:    4-block  0\n    1:    5:  int i, total;\n    -:    6:\n    1:    7:  total = 0;\n    -:    8:\n   11:    9:  for (i = 0; i &lt; 10; i++)\n   11:    9-block  0\n   10:   10:    total += i;\n   10:   10-block  0\n    -:   11:\n    1:   12:  if (total != 45)\n    1:   12-block  0\n#####:   13:    printf (\"Failure\\n\");\n$$$$$:   13-block  0\n    -:   14:  else\n    1:   15:    printf (\"Success\\n\");\n    1:   15-block  0\n    1:   16:  return 0;\n    1:   16-block  0\n    -:   17:}</pre> <p>In this mode, each basic block is only shown on one line – the last line of the block. A multi-line block will only contribute to the execution count of that last line, and other lines will not be shown to contain code, unless previous blocks end on those lines. The total execution count of a line is shown and subsequent lines show the execution counts for individual blocks that end on that line. After each block, the branch and call counts of the block will be shown, if the <code>-b</code> option is given. </p>\n<p>Because of the way GCC instruments calls, a call count can be shown after a line with no individual blocks. As you can see, line 13 contains a basic block that was not executed. </p>\n<p>When you use the <code>-b</code> option, your output looks like this: </p>\n<pre class=\"smallexample\">$ gcov -b tmp.c\n90.00% of 10 source lines executed in file tmp.c\n80.00% of 5 branches executed in file tmp.c\n80.00% of 5 branches taken at least once in file tmp.c\n50.00% of 2 calls executed in file tmp.c\nCreating tmp.c.gcov.</pre> <p>Here is a sample of a resulting <code>tmp.c.gcov</code> file: </p>\n<pre class=\"smallexample\">-:    0:Source:tmp.c\n        -:    0:Graph:tmp.gcno\n        -:    0:Data:tmp.gcda\n        -:    0:Runs:1\n        -:    0:Programs:1\n        -:    1:#include &lt;stdio.h&gt;\n        -:    2:\n        -:    3:int main (void)\nfunction main called 1 returned 1 blocks executed 75%\n        1:    4:{\n        1:    5:  int i, total;\n        -:    6:\n        1:    7:  total = 0;\n        -:    8:\n       11:    9:  for (i = 0; i &lt; 10; i++)\nbranch  0 taken 91% (fallthrough)\nbranch  1 taken 9%\n       10:   10:    total += i;\n        -:   11:\n        1:   12:  if (total != 45)\nbranch  0 taken 0% (fallthrough)\nbranch  1 taken 100%\n    #####:   13:    printf (\"Failure\\n\");\ncall    0 never executed\n        -:   14:  else\n        1:   15:    printf (\"Success\\n\");\ncall    0 called 1 returned 100%\n        1:   16:  return 0;\n        -:   17:}</pre> <p>For each function, a line is printed showing how many times the function is called, how many times it returns and what percentage of the function's blocks were executed. </p>\n<p>For each basic block, a line is printed after the last line of the basic block describing the branch or call that ends the basic block. There can be multiple branches and calls listed for a single source line if there are multiple basic blocks that end on that line. In this case, the branches and calls are each given a number. There is no simple way to map these branches and calls back to source constructs. In general, though, the lowest numbered branch or call will correspond to the leftmost construct on the source line. </p>\n<p>For a branch, if it was executed at least once, then a percentage indicating the number of times the branch was taken divided by the number of times the branch was executed will be printed. Otherwise, the message “never executed” is printed. </p>\n<p>For a call, if it was executed at least once, then a percentage indicating the number of times the call returned divided by the number of times the call was executed will be printed. This will usually be 100%, but may be less for functions that call <code>exit</code> or <code>longjmp</code>, and thus may not return every time they are called. </p>\n<p>The execution counts are cumulative. If the example program were executed again without removing the <code>.gcda</code> file, the count for the number of times each line in the source was executed would be added to the results of the previous run(s). This is potentially useful in several ways. For example, it could be used to accumulate data over a number of program runs as part of a test verification suite, or to provide more accurate long-term information over a large number of program runs. </p>\n<p>The data in the <code>.gcda</code> files is saved immediately before the program exits. For each source file compiled with <code>-fprofile-arcs</code>, the profiling code first attempts to read in an existing <code>.gcda</code> file; if the file doesn't match the executable (differing number of basic block counts) it will ignore the contents of the file. It then adds in the new execution counts and finally writes the data to the file. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Invoking-Gcov.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Invoking-Gcov.html</a>\n  </p>\n</div>\n","gcov-and-optimization":"<h1 class=\"section\" id=\"Gcov-and-Optimization\">10.3 Using <code>gcov</code> with GCC Optimization</h1> <p>If you plan to use <code>gcov</code> to help optimize your code, you must first compile your program with two special GCC options: ‘<code>-fprofile-arcs -ftest-coverage</code>’. Aside from that, you can use any other GCC options; but if you want to prove that every single line in your program was executed, you should not compile with optimization at the same time. On some machines the optimizer can eliminate some simple code lines by combining them with other lines. For example, code like this: </p>\n<pre class=\"smallexample\">if (a != b)\n  c = 1;\nelse\n  c = 0;</pre> <p class=\"noindent\">can be compiled into one instruction on some machines. In this case, there is no way for <code>gcov</code> to calculate separate execution counts for each line because there isn't separate code for each line. Hence the <code>gcov</code> output looks like this if you compiled the program with optimization: </p>\n<pre class=\"smallexample\">100:   12:if (a != b)\n100:   13:  c = 1;\n100:   14:else\n100:   15:  c = 0;</pre> <p>The output shows that this block of code, combined by optimization, executed 100 times. In one sense this result is correct, because there was only one instruction representing all four of these lines. However, the output does not indicate how many times the result was 0 and how many times the result was 1. </p>\n<p>Inlineable functions can create unexpected line counts. Line counts are shown for the source code of the inlineable function, but what is shown depends on where the function is inlined, or if it is not inlined at all. </p>\n<p>If the function is not inlined, the compiler must emit an out of line copy of the function, in any object file that needs it. If <code>fileA.o</code> and <code>fileB.o</code> both contain out of line bodies of a particular inlineable function, they will also both contain coverage counts for that function. When <code>fileA.o</code> and <code>fileB.o</code> are linked together, the linker will, on many systems, select one of those out of line bodies for all calls to that function, and remove or ignore the other. Unfortunately, it will not remove the coverage counters for the unused function body. Hence when instrumented, all but one use of that function will show zero counts. </p>\n<p>If the function is inlined in several places, the block structure in each location might not be the same. For instance, a condition might now be calculable at compile time in some instances. Because the coverage of all the uses of the inline function will be shown for the same source lines, the line counts themselves might seem inconsistent. </p>\n<p>Long-running applications can use the <code>_gcov_reset</code> and <code>_gcov_dump</code> facilities to restrict profile collection to the program region of interest. Calling <code>_gcov_reset(void)</code> will clear all profile counters to zero, and calling <code>_gcov_dump(void)</code> will cause the profile information collected at that point to be dumped to <code>.gcda</code> output files.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Gcov-and-Optimization.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Gcov-and-Optimization.html</a>\n  </p>\n</div>\n","gcov-data-files":"<h1 class=\"section\" id=\"Gcov-Data-Files\">10.4 Brief description of <code>gcov</code> data files</h1> <p><code>gcov</code> uses two files for profiling. The names of these files are derived from the original <em>object</em> file by substituting the file suffix with either <code>.gcno</code>, or <code>.gcda</code>. The files contain coverage and profile data stored in a platform-independent format. The <code>.gcno</code> files are placed in the same directory as the object file. By default, the <code>.gcda</code> files are also stored in the same directory as the object file, but the GCC <code>-fprofile-dir</code> option may be used to store the <code>.gcda</code> files in a separate directory. </p>\n<p>The <code>.gcno</code> notes file is generated when the source file is compiled with the GCC <code>-ftest-coverage</code> option. It contains information to reconstruct the basic block graphs and assign source line numbers to blocks. </p>\n<p>The <code>.gcda</code> count data file is generated when a program containing object files built with the GCC <code>-fprofile-arcs</code> option is executed. A separate <code>.gcda</code> file is created for each object file compiled with this option. It contains arc transition counts, value profile counts, and some summary information. </p>\n<p>The full details of the file format is specified in <code>gcov-io.h</code>, and functions provided in that header file should be used to access the coverage files. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Gcov-Data-Files.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Gcov-Data-Files.html</a>\n  </p>\n</div>\n","cross_002dprofiling":"<h1 class=\"section\" id=\"Cross_002dprofiling\">10.5 Data file relocation to support cross-profiling</h1> <p>Running the program will cause profile output to be generated. For each source file compiled with <code>-fprofile-arcs</code>, an accompanying <code>.gcda</code> file will be placed in the object file directory. That implicitly requires running the program on the same system as it was built or having the same absolute directory structure on the target system. The program will try to create the needed directory structure, if it is not already present. </p>\n<p>To support cross-profiling, a program compiled with <code>-fprofile-arcs</code> can relocate the data files based on two environment variables: </p>\n<ul> <li>GCOV_PREFIX contains the prefix to add to the absolute paths in the object file. Prefix can be absolute, or relative. The default is no prefix. </li>\n<li>GCOV_PREFIX_STRIP indicates the how many initial directory names to strip off the hardwired absolute paths. Default value is 0. <p><em>Note:</em> If GCOV_PREFIX_STRIP is set without GCOV_PREFIX is undefined, then a relative path is made out of the hardwired absolute paths. </p>\n</li>\n</ul> <p>For example, if the object file <code>/user/build/foo.o</code> was built with <code>-fprofile-arcs</code>, the final executable will try to create the data file <code>/user/build/foo.gcda</code> when running on the target system. This will fail if the corresponding directory does not exist and it is unable to create it. This can be overcome by, for example, setting the environment as ‘<code>GCOV_PREFIX=/target/run</code>’ and ‘<code>GCOV_PREFIX_STRIP=1</code>’. Such a setting will name the data file <code>/target/run/build/foo.gcda</code>. </p>\n<p>You must move the data files to the expected directory tree in order to use them for profile directed optimizations (<code>--use-profile</code>), or to use the <code>gcov</code> tool.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Cross_002dprofiling.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Cross_002dprofiling.html</a>\n  </p>\n</div>\n","trouble":"<h1 class=\"chapter\" id=\"Trouble\">11 Known Causes of Trouble with GCC</h1> <p> This section describes known problems that affect users of GCC. Most of these are not GCC bugs per se—if they were, we would fix them. But the result for a user may be like the result of a bug. </p>\n<p>Some of these problems are due to bugs in other software, some are missing features that are too much work to add, and some are places where people's opinions differ as to what is best. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"actual-bugs#Actual-Bugs\">Actual Bugs</a>: Bugs we will fix later. </li>\n<li>\n<a accesskey=\"2\" href=\"interoperation#Interoperation\">Interoperation</a>: Problems using GCC with other compilers, and with certain linkers, assemblers and debuggers. </li>\n<li>\n<a accesskey=\"3\" href=\"incompatibilities#Incompatibilities\">Incompatibilities</a>: GCC is incompatible with traditional C. </li>\n<li>\n<a accesskey=\"4\" href=\"fixed-headers#Fixed-Headers\">Fixed Headers</a>: GCC uses corrected versions of system header files. This is necessary, but doesn't always work smoothly. </li>\n<li>\n<a accesskey=\"5\" href=\"standard-libraries#Standard-Libraries\">Standard Libraries</a>: GCC uses the system C library, which might not be compliant with the ISO C standard. </li>\n<li>\n<a accesskey=\"6\" href=\"disappointments#Disappointments\">Disappointments</a>: Regrettable things we can't change, but not quite bugs. </li>\n<li>\n<a accesskey=\"7\" href=\"c_002b_002b-misunderstandings#C_002b_002b-Misunderstandings\">C++ Misunderstandings</a>: Common misunderstandings with GNU C++. </li>\n<li>\n<a accesskey=\"8\" href=\"non_002dbugs#Non_002dbugs\">Non-bugs</a>: Things we think are right, but some others disagree. </li>\n<li>\n<a accesskey=\"9\" href=\"warnings-and-errors#Warnings-and-Errors\">Warnings and Errors</a>: Which problems in your code get warnings, and which get errors. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Trouble.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Trouble.html</a>\n  </p>\n</div>\n","actual-bugs":"<h1 class=\"section\" id=\"Actual-Bugs\">11.1 Actual Bugs We Haven't Fixed Yet</h1> <ul> <li>The <code>fixincludes</code> script interacts badly with automounters; if the directory of system header files is automounted, it tends to be unmounted while <code>fixincludes</code> is running. This would seem to be a bug in the automounter. We don't know any good way to work around it. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Actual-Bugs.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Actual-Bugs.html</a>\n  </p>\n</div>\n","interoperation":"<h1 class=\"section\" id=\"Interoperation\">11.2 Interoperation</h1> <p>This section lists various difficulties encountered in using GCC together with other compilers or with the assemblers, linkers, libraries and debuggers on certain systems. </p>\n<ul> <li>On many platforms, GCC supports a different ABI for C++ than do other compilers, so the object files compiled by GCC cannot be used with object files generated by another C++ compiler. <p>An area where the difference is most apparent is name mangling. The use of different name mangling is intentional, to protect you from more subtle problems. Compilers differ as to many internal details of C++ implementation, including: how class instances are laid out, how multiple inheritance is implemented, and how virtual function calls are handled. If the name encoding were made the same, your programs would link against libraries provided from other compilers—but the programs would then crash when run. Incompatible libraries are then detected at link time, rather than at run time. </p>\n</li>\n<li>On some BSD systems, including some versions of Ultrix, use of profiling causes static variable destructors (currently used only in C++) not to be run. </li>\n<li>On a SPARC, GCC aligns all values of type <code>double</code> on an 8-byte boundary, and it expects every <code>double</code> to be so aligned. The Sun compiler usually gives <code>double</code> values 8-byte alignment, with one exception: function arguments of type <code>double</code> may not be aligned. <p>As a result, if a function compiled with Sun CC takes the address of an argument of type <code>double</code> and passes this pointer of type <code>double *</code> to a function compiled with GCC, dereferencing the pointer may cause a fatal signal. </p>\n<p>One way to solve this problem is to compile your entire program with GCC. Another solution is to modify the function that is compiled with Sun CC to copy the argument into a local variable; local variables are always properly aligned. A third solution is to modify the function that uses the pointer to dereference it via the following function <code>access_double</code> instead of directly with ‘<code>*</code>’: </p>\n<pre class=\"smallexample\">inline double\naccess_double (double *unaligned_ptr)\n{\n  union d2i { double d; int i[2]; };\n\n  union d2i *p = (union d2i *) unaligned_ptr;\n  union d2i u;\n\n  u.i[0] = p-&gt;i[0];\n  u.i[1] = p-&gt;i[1];\n\n  return u.d;\n}</pre> <p class=\"noindent\">Storing into the pointer can be done likewise with the same union. </p>\n</li>\n<li>On Solaris, the <code>malloc</code> function in the <code>libmalloc.a</code> library may allocate memory that is only 4 byte aligned. Since GCC on the SPARC assumes that doubles are 8 byte aligned, this may result in a fatal signal if doubles are stored in memory allocated by the <code>libmalloc.a</code> library. <p>The solution is to not use the <code>libmalloc.a</code> library. Use instead <code>malloc</code> and related functions from <code>libc.a</code>; they do not have this problem. </p>\n</li>\n<li>On the HP PA machine, ADB sometimes fails to work on functions compiled with GCC. Specifically, it fails to work on functions that use <code>alloca</code> or variable-size arrays. This is because GCC doesn't generate HP-UX unwind descriptors for such functions. It may even be impossible to generate them. </li>\n<li>Debugging (<code>-g</code>) is not supported on the HP PA machine, unless you use the preliminary GNU tools. </li>\n<li>Taking the address of a label may generate errors from the HP-UX PA assembler. GAS for the PA does not have this problem. </li>\n<li>Using floating point parameters for indirect calls to static functions will not work when using the HP assembler. There simply is no way for GCC to specify what registers hold arguments for static functions when using the HP assembler. GAS for the PA does not have this problem. </li>\n<li>In extremely rare cases involving some very large functions you may receive errors from the HP linker complaining about an out of bounds unconditional branch offset. This used to occur more often in previous versions of GCC, but is now exceptionally rare. If you should run into it, you can work around by making your function smaller. </li>\n<li>GCC compiled code sometimes emits warnings from the HP-UX assembler of the form: <pre class=\"smallexample\">(warning) Use of GR3 when\n  frame &gt;= 8192 may cause conflict.</pre> <p>These warnings are harmless and can be safely ignored. </p>\n</li>\n<li>In extremely rare cases involving some very large functions you may receive errors from the AIX Assembler complaining about a displacement that is too large. If you should run into it, you can work around by making your function smaller. </li>\n<li>The <code>libstdc++.a</code> library in GCC relies on the SVR4 dynamic linker semantics which merges global symbols between libraries and applications, especially necessary for C++ streams functionality. This is not the default behavior of AIX shared libraries and dynamic linking. <code>libstdc++.a</code> is built on AIX with “runtime-linking” enabled so that symbol merging can occur. To utilize this feature, the application linked with <code>libstdc++.a</code> must include the <code>-Wl,-brtl</code> flag on the link line. G++ cannot impose this because this option may interfere with the semantics of the user program and users may not always use ‘<code>g++</code>’ to link his or her application. Applications are not required to use the <code>-Wl,-brtl</code> flag on the link line—the rest of the <code>libstdc++.a</code> library which is not dependent on the symbol merging semantics will continue to function correctly. </li>\n<li>An application can interpose its own definition of functions for functions invoked by <code>libstdc++.a</code> with “runtime-linking” enabled on AIX. To accomplish this the application must be linked with “runtime-linking” option and the functions explicitly must be exported by the application (<code>-Wl,-brtl,-bE:exportfile</code>). </li>\n<li>AIX on the RS/6000 provides support (NLS) for environments outside of the United States. Compilers and assemblers use NLS to support locale-specific representations of various objects including floating-point numbers (‘<code>.</code>’ vs ‘<code>,</code>’ for separating decimal fractions). There have been problems reported where the library linked with GCC does not produce the same floating-point formats that the assembler accepts. If you have this problem, set the <code>LANG</code> environment variable to ‘<code>C</code>’ or ‘<code>En_US</code>’. </li>\n<li>\nEven if you specify <code>-fdollars-in-identifiers</code>, you cannot successfully use ‘<code>$</code>’ in identifiers on the RS/6000 due to a restriction in the IBM assembler. GAS supports these identifiers. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Interoperation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Interoperation.html</a>\n  </p>\n</div>\n","incompatibilities":"<h1 class=\"section\" id=\"Incompatibilities\">11.3 Incompatibilities of GCC</h1> <p> There are several noteworthy incompatibilities between GNU C and K&amp;R (non-ISO) versions of C.    </p>\n<ul>\n<li>GCC normally makes string constants read-only. If several identical-looking string constants are used, GCC stores only one copy of the string. <p>One consequence is that you cannot call <code>mktemp</code> with a string constant argument. The function <code>mktemp</code> always alters the string its argument points to. </p>\n<p>Another consequence is that <code>sscanf</code> does not work on some very old systems when passed a string constant as its format control string or input. This is because <code>sscanf</code> incorrectly tries to write into the string constant. Likewise <code>fscanf</code> and <code>scanf</code>. </p>\n<p>The solution to these problems is to change the program to use <code>char</code>-array variables with initialization strings for these purposes instead of string constants. </p>\n</li>\n<li>\n<code>-2147483648</code> is positive. <p>This is because 2147483648 cannot fit in the type <code>int</code>, so (following the ISO C rules) its data type is <code>unsigned long int</code>. Negating this value yields 2147483648 again. </p>\n</li>\n<li>GCC does not substitute macro arguments when they appear inside of string constants. For example, the following macro in GCC <pre class=\"smallexample\">#define foo(a) \"a\"</pre> <p class=\"noindent\">will produce output <code>\"a\"</code> regardless of what the argument <var>a</var> is. </p>\n\n</li>\n<li>When you use <code>setjmp</code> and <code>longjmp</code>, the only automatic variables guaranteed to remain valid are those declared <code>volatile</code>. This is a consequence of automatic register allocation. Consider this function: <pre class=\"smallexample\">jmp_buf j;\n\nfoo ()\n{\n  int a, b;\n\n  a = fun1 ();\n  if (setjmp (j))\n    return a;\n\n  a = fun2 ();\n  /* <code>longjmp (j)</code><span class=\"roman\"> may occur in </span><code>fun3</code><span class=\"roman\">.</span> */\n  return a + fun3 ();\n}</pre> <p>Here <code>a</code> may or may not be restored to its first value when the <code>longjmp</code> occurs. If <code>a</code> is allocated in a register, then its first value is restored; otherwise, it keeps the last value stored in it. </p>\n<p>If you use the <code>-W</code> option with the <code>-O</code> option, you will get a warning when GCC thinks such a problem might be possible. </p>\n</li>\n<li>Programs that use preprocessing directives in the middle of macro arguments do not work with GCC. For example, a program like this will not work: <pre class=\"smallexample\">foobar (\n#define luser\n        hack)</pre> <p>ISO C does not permit such a construct. </p>\n</li>\n<li>K&amp;R compilers allow comments to cross over an inclusion boundary (i.e. started in an include file and ended in the including file). \n</li>\n<li>Declarations of external variables and functions within a block apply only to the block containing the declaration. In other words, they have the same scope as any other declaration in the same place. <p>In some other C compilers, an <code>extern</code> declaration affects all the rest of the file even if it happens within a block. </p>\n</li>\n<li>In traditional C, you can combine <code>long</code>, etc., with a typedef name, as shown here: <pre class=\"smallexample\">typedef int foo;\ntypedef long foo bar;</pre> <p>In ISO C, this is not allowed: <code>long</code> and other type modifiers require an explicit <code>int</code>. </p>\n\n</li>\n<li>PCC allows typedef names to be used as function parameters. </li>\n<li>Traditional C allows the following erroneous pair of declarations to appear together in a given scope: <pre class=\"smallexample\">typedef int foo;\ntypedef foo foo;</pre> </li>\n<li>GCC treats all characters of identifiers as significant. According to K&amp;R-1 (2.2), “No more than the first eight characters are significant, although more may be used.”. Also according to K&amp;R-1 (2.2), “An identifier is a sequence of letters and digits; the first character must be a letter. The underscore _ counts as a letter.”, but GCC also allows dollar signs in identifiers. \n</li>\n<li>PCC allows whitespace in the middle of compound assignment operators such as ‘<code>+=</code>’. GCC, following the ISO standard, does not allow this. \n</li>\n<li>GCC complains about unterminated character constants inside of preprocessing conditionals that fail. Some programs have English comments enclosed in conditionals that are guaranteed to fail; if these comments contain apostrophes, GCC will probably report an error. For example, this code would produce an error: <pre class=\"smallexample\">#if 0\nYou can't expect this to work.\n#endif</pre> <p>The best solution to such a problem is to put the text into an actual C comment delimited by ‘<code>/*...*/</code>’. </p>\n</li>\n<li>Many user programs contain the declaration ‘<code>long time ();</code>’. In the past, the system header files on many systems did not actually declare <code>time</code>, so it did not matter what type your program declared it to return. But in systems with ISO C headers, <code>time</code> is declared to return <code>time_t</code>, and if that is not the same as <code>long</code>, then ‘<code>long time ();</code>’ is erroneous. <p>The solution is to change your program to use appropriate system headers (<code>&lt;time.h&gt;</code> on systems with ISO C headers) and not to declare <code>time</code> if the system header files declare it, or failing that to use <code>time_t</code> as the return type of <code>time</code>. </p>\n\n</li>\n<li>When compiling functions that return <code>float</code>, PCC converts it to a double. GCC actually returns a <code>float</code>. If you are concerned with PCC compatibility, you should declare your functions to return <code>double</code>; you might as well say what you mean. \n</li>\n<li>When compiling functions that return structures or unions, GCC output code normally uses a method different from that used on most versions of Unix. As a result, code compiled with GCC cannot call a structure-returning function compiled with PCC, and vice versa. <p>The method used by GCC is as follows: a structure or union which is 1, 2, 4 or 8 bytes long is returned like a scalar. A structure or union with any other size is stored into an address supplied by the caller (usually in a special, fixed register, but on some machines it is passed on the stack). The target hook <code>TARGET_STRUCT_VALUE_RTX</code> tells GCC where to pass this address. </p>\n<p>By contrast, PCC on most target machines returns structures and unions of any size by copying the data into an area of static storage, and then returning the address of that storage as if it were a pointer value. The caller must copy the data from that memory area to the place where the value is wanted. GCC does not use this method because it is slower and nonreentrant. </p>\n<p>On some newer machines, PCC uses a reentrant convention for all structure and union returning. GCC on most of these machines uses a compatible convention when returning structures and unions in memory, but still returns small structures and unions in registers. </p>\n<p>You can tell GCC to use a compatible convention for all structure and union returning with the option <code>-fpcc-struct-return</code>. </p>\n\n</li>\n<li>GCC complains about program fragments such as ‘<code>0x74ae-0x4000</code>’ which appear to be two hexadecimal constants separated by the minus operator. Actually, this string is a single preprocessing token. Each such token must correspond to one token in C. Since this does not, GCC prints an error message. Although it may appear obvious that what is meant is an operator and two values, the ISO C standard specifically requires that this be treated as erroneous. <p>A preprocessing token is a preprocessing number if it begins with a digit and is followed by letters, underscores, digits, periods and ‘<code>e+</code>’, ‘<code>e-</code>’, ‘<code>E+</code>’, ‘<code>E-</code>’, ‘<code>p+</code>’, ‘<code>p-</code>’, ‘<code>P+</code>’, or ‘<code>P-</code>’ character sequences. (In strict C90 mode, the sequences ‘<code>p+</code>’, ‘<code>p-</code>’, ‘<code>P+</code>’ and ‘<code>P-</code>’ cannot appear in preprocessing numbers.) </p>\n<p>To make the above program fragment valid, place whitespace in front of the minus sign. This whitespace will end the preprocessing number. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Incompatibilities.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Incompatibilities.html</a>\n  </p>\n</div>\n","fixed-headers":"<h1 class=\"section\" id=\"Fixed-Headers\">11.4 Fixed Header Files</h1> <p>GCC needs to install corrected versions of some system header files. This is because most target systems have some header files that won't work with GCC unless they are changed. Some have bugs, some are incompatible with ISO C, and some depend on special features of other compilers. </p>\n<p>Installing GCC automatically creates and installs the fixed header files, by running a program called <code>fixincludes</code>. Normally, you don't need to pay attention to this. But there are cases where it doesn't do the right thing automatically. </p>\n<ul> <li>If you update the system's header files, such as by installing a new system version, the fixed header files of GCC are not automatically updated. They can be updated using the <code>mkheaders</code> script installed in <samp><var>libexecdir</var><span class=\"file\">/gcc/</span><var>target</var><span class=\"file\">/</span><var>version</var><span class=\"file\">/install-tools/</span></samp>. </li>\n<li>On some systems, header file directories contain machine-specific symbolic links in certain places. This makes it possible to share most of the header files among hosts running the same version of the system on different machine models. <p>The programs that fix the header files do not understand this special way of using symbolic links; therefore, the directory of fixed header files is good only for the machine model used to build it. </p>\n<p>It is possible to make separate sets of fixed header files for the different machine models, and arrange a structure of symbolic links so as to use the proper set, but you'll have to do this by hand. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fixed-Headers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Fixed-Headers.html</a>\n  </p>\n</div>\n","standard-libraries":"<h1 class=\"section\" id=\"Standard-Libraries\">11.5 Standard Libraries</h1> <p>GCC by itself attempts to be a conforming freestanding implementation. See <a href=\"standards#Standards\">Language Standards Supported by GCC</a>, for details of what this means. Beyond the library facilities required of such an implementation, the rest of the C library is supplied by the vendor of the operating system. If that C library doesn't conform to the C standards, then your programs might get warnings (especially when using <code>-Wall</code>) that you don't expect. </p>\n<p>For example, the <code>sprintf</code> function on SunOS 4.1.3 returns <code>char *</code> while the C standard says that <code>sprintf</code> returns an <code>int</code>. The <code>fixincludes</code> program could make the prototype for this function match the Standard, but that would be wrong, since the function will still return <code>char *</code>. </p>\n<p>If you need a Standard compliant library, then you need to find one, as GCC does not provide one. The GNU C library (called <code>glibc</code>) provides ISO C, POSIX, BSD, SystemV and X/Open compatibility for GNU/Linux and HURD-based GNU systems; no recent version of it supports other systems, though some very old versions did. Version 2.2 of the GNU C library includes nearly complete C99 support. You could also ask your operating system vendor if newer libraries are available. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Standard-Libraries.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Standard-Libraries.html</a>\n  </p>\n</div>\n","disappointments":"<h1 class=\"section\" id=\"Disappointments\">11.6 Disappointments and Misunderstandings</h1> <p>These problems are perhaps regrettable, but we don't know any practical way around them. </p>\n<ul> <li>Certain local variables aren't recognized by debuggers when you compile with optimization. <p>This occurs because sometimes GCC optimizes the variable out of existence. There is no way to tell the debugger how to compute the value such a variable “would have had”, and it is not clear that would be desirable anyway. So GCC simply does not mention the eliminated variable when it writes debugging information. </p>\n<p>You have to expect a certain amount of disagreement between the executable and your source code, when you use optimization. </p>\n\n</li>\n<li>Users often think it is a bug when GCC reports an error for code like this: <pre class=\"smallexample\">int foo (struct mumble *);\n\nstruct mumble { ... };\n\nint foo (struct mumble *x)\n{ ... }</pre> <p>This code really is erroneous, because the scope of <code>struct\nmumble</code> in the prototype is limited to the argument list containing it. It does not refer to the <code>struct mumble</code> defined with file scope immediately below—they are two unrelated types with similar names in different scopes. </p>\n<p>But in the definition of <code>foo</code>, the file-scope type is used because that is available to be inherited. Thus, the definition and the prototype do not match, and you get an error. </p>\n<p>This behavior may seem silly, but it's what the ISO standard specifies. It is easy enough for you to make your code work by moving the definition of <code>struct mumble</code> above the prototype. It's not worth being incompatible with ISO C just to avoid an error for the example shown above. </p>\n</li>\n<li>Accesses to bit-fields even in volatile objects works by accessing larger objects, such as a byte or a word. You cannot rely on what size of object is accessed in order to read or write the bit-field; it may even vary for a given bit-field according to the precise usage. <p>If you care about controlling the amount of memory that is accessed, use volatile but do not use bit-fields. </p>\n</li>\n<li>GCC comes with shell scripts to fix certain known problems in system header files. They install corrected copies of various header files in a special directory where only GCC will normally look for them. The scripts adapt to various systems by searching all the system header files for the problem cases that we know about. <p>If new system header files are installed, nothing automatically arranges to update the corrected header files. They can be updated using the <code>mkheaders</code> script installed in <samp><var>libexecdir</var><span class=\"file\">/gcc/</span><var>target</var><span class=\"file\">/</span><var>version</var><span class=\"file\">/install-tools/</span></samp>. </p>\n</li>\n<li>\nOn 68000 and x86 systems, for instance, you can get paradoxical results if you test the precise values of floating point numbers. For example, you can find that a floating point value which is not a NaN is not equal to itself. This results from the fact that the floating point registers hold a few more bits of precision than fit in a <code>double</code> in memory. Compiled code moves values between memory and floating point registers at its convenience, and moving them into memory truncates them. <p>You can partially avoid this problem by using the <code>-ffloat-store</code> option (see <a href=\"optimize-options#Optimize-Options\">Optimize Options</a>). </p>\n</li>\n<li>On AIX and other platforms without weak symbol support, templates need to be instantiated explicitly and symbols for static members of templates will not be generated. </li>\n<li>On AIX, GCC scans object files and library archives for static constructors and destructors when linking an application before the linker prunes unreferenced symbols. This is necessary to prevent the AIX linker from mistakenly assuming that static constructor or destructor are unused and removing them before the scanning can occur. All static constructors and destructors found will be referenced even though the modules in which they occur may not be used by the program. This may lead to both increased executable size and unexpected symbol references. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Disappointments.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Disappointments.html</a>\n  </p>\n</div>\n","c_002b_002b-misunderstandings":"<h1 class=\"section\" id=\"C_002b_002b-Misunderstandings\">11.7 Common Misunderstandings with GNU C++</h1> <p>C++ is a complex language and an evolving one, and its standard definition (the ISO C++ standard) was only recently completed. As a result, your C++ compiler may occasionally surprise you, even when its behavior is correct. This section discusses some areas that frequently give rise to questions of this sort. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"static-definitions#Static-Definitions\">Static Definitions</a>: Static member declarations are not definitions </li>\n<li>\n<a accesskey=\"2\" href=\"name-lookup#Name-lookup\">Name lookup</a>: Name lookup, templates, and accessing members of base classes </li>\n<li>\n<a accesskey=\"3\" href=\"temporaries#Temporaries\">Temporaries</a>: Temporaries may vanish before you expect </li>\n<li>\n<a accesskey=\"4\" href=\"copy-assignment#Copy-Assignment\">Copy Assignment</a>: Copy Assignment operators copy virtual bases twice </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Misunderstandings.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/C_002b_002b-Misunderstandings.html</a>\n  </p>\n</div>\n","static-definitions":"<h1 class=\"subsection\" id=\"Static-Definitions\">11.7.1 Declare <em>and</em> Define Static Members</h1> <p>When a class has static data members, it is not enough to <em>declare</em> the static member; you must also <em>define</em> it. For example: </p>\n<pre class=\"smallexample\">class Foo\n{\n  ...\n  void method();\n  static int bar;\n};</pre> <p>This declaration only establishes that the class <code>Foo</code> has an <code>int</code> named <code>Foo::bar</code>, and a member function named <code>Foo::method</code>. But you still need to define <em>both</em> <code>method</code> and <code>bar</code> elsewhere. According to the ISO standard, you must supply an initializer in one (and only one) source file, such as: </p>\n<pre class=\"smallexample\">int Foo::bar = 0;</pre> <p>Other C++ compilers may not correctly implement the standard behavior. As a result, when you switch to <code>g++</code> from one of these compilers, you may discover that a program that appeared to work correctly in fact does not conform to the standard: <code>g++</code> reports as undefined symbols any static data members that lack definitions. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Static-Definitions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Static-Definitions.html</a>\n  </p>\n</div>\n","name-lookup":"<h1 class=\"subsection\" id=\"Name-lookup\">11.7.2 Name lookup, templates, and accessing members of base classes</h1> <p> The C++ standard prescribes that all names that are not dependent on template parameters are bound to their present definitions when parsing a template function or class.<a rel=\"footnote\" href=\"#fn-1\" name=\"fnd-1\" id=\"fnd-1\"><sup>1</sup></a> Only names that are dependent are looked up at the point of instantiation. For example, consider </p>\n<pre class=\"smallexample\">void foo(double);\n     \nstruct A {\n  template &lt;typename T&gt;\n  void f () {\n    foo (1);        // <span class=\"roman\">1</span>\n    int i = N;      // <span class=\"roman\">2</span>\n    T t;\n    t.bar();        // <span class=\"roman\">3</span>\n    foo (t);        // <span class=\"roman\">4</span>\n  }\n     \n  static const int N;\n};</pre> <p>Here, the names <code>foo</code> and <code>N</code> appear in a context that does not depend on the type of <code>T</code>. The compiler will thus require that they are defined in the context of use in the template, not only before the point of instantiation, and will here use <code>::foo(double)</code> and <code>A::N</code>, respectively. In particular, it will convert the integer value to a <code>double</code> when passing it to <code>::foo(double)</code>. </p>\n<p>Conversely, <code>bar</code> and the call to <code>foo</code> in the fourth marked line are used in contexts that do depend on the type of <code>T</code>, so they are only looked up at the point of instantiation, and you can provide declarations for them after declaring the template, but before instantiating it. In particular, if you instantiate <code>A::f&lt;int&gt;</code>, the last line will call an overloaded <code>::foo(int)</code> if one was provided, even if after the declaration of <code>struct A</code>. </p>\n<p>This distinction between lookup of dependent and non-dependent names is called two-stage (or dependent) name lookup. G++ implements it since version 3.4. </p>\n<p>Two-stage name lookup sometimes leads to situations with behavior different from non-template codes. The most common is probably this: </p>\n<pre class=\"smallexample\">template &lt;typename T&gt; struct Base {\n  int i;\n};\n     \ntemplate &lt;typename T&gt; struct Derived : public Base&lt;T&gt; {\n  int get_i() { return i; }\n};</pre> <p>In <code>get_i()</code>, <code>i</code> is not used in a dependent context, so the compiler will look for a name declared at the enclosing namespace scope (which is the global scope here). It will not look into the base class, since that is dependent and you may declare specializations of <code>Base</code> even after declaring <code>Derived</code>, so the compiler can't really know what <code>i</code> would refer to. If there is no global variable <code>i</code>, then you will get an error message. </p>\n<p>In order to make it clear that you want the member of the base class, you need to defer lookup until instantiation time, at which the base class is known. For this, you need to access <code>i</code> in a dependent context, by either using <code>this-&gt;i</code> (remember that <code>this</code> is of type <code>Derived&lt;T&gt;*</code>, so is obviously dependent), or using <code>Base&lt;T&gt;::i</code>. Alternatively, <code>Base&lt;T&gt;::i</code> might be brought into scope by a <code>using</code>-declaration. </p>\n<p>Another, similar example involves calling member functions of a base class: </p>\n<pre class=\"smallexample\">template &lt;typename T&gt; struct Base {\n    int f();\n};\n     \ntemplate &lt;typename T&gt; struct Derived : Base&lt;T&gt; {\n    int g() { return f(); };\n};</pre> <p>Again, the call to <code>f()</code> is not dependent on template arguments (there are no arguments that depend on the type <code>T</code>, and it is also not otherwise specified that the call should be in a dependent context). Thus a global declaration of such a function must be available, since the one in the base class is not visible until instantiation time. The compiler will consequently produce the following error message: </p>\n<pre class=\"smallexample\">x.cc: In member function `int Derived&lt;T&gt;::g()':\nx.cc:6: error: there are no arguments to `f' that depend on a template\n   parameter, so a declaration of `f' must be available\nx.cc:6: error: (if you use `-fpermissive', G++ will accept your code, but\n   allowing the use of an undeclared name is deprecated)</pre> <p>To make the code valid either use <code>this-&gt;f()</code>, or <code>Base&lt;T&gt;::f()</code>. Using the <code>-fpermissive</code> flag will also let the compiler accept the code, by marking all function calls for which no declaration is visible at the time of definition of the template for later lookup at instantiation time, as if it were a dependent call. We do not recommend using <code>-fpermissive</code> to work around invalid code, and it will also only catch cases where functions in base classes are called, not where variables in base classes are used (as in the example above). </p>\n<p>Note that some compilers (including G++ versions prior to 3.4) get these examples wrong and accept above code without an error. Those compilers do not implement two-stage name lookup correctly. </p>\n<div class=\"footnote\">  <h1>Footnotes</h1>\n<p class=\"footnote\"><small>[<a name=\"fn-1\" href=\"#fnd-1\" id=\"fn-1\">1</a>]</small> The C++ standard just uses the term “dependent” for names that depend on the type or value of template parameters. This shorter term will also be used in the rest of this section.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Name-lookup.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Name-lookup.html</a>\n  </p>\n</div>\n","temporaries":"<h1 class=\"subsection\" id=\"Temporaries\">11.7.3 Temporaries May Vanish Before You Expect</h1> <p>It is dangerous to use pointers or references to <em>portions</em> of a temporary object. The compiler may very well delete the object before you expect it to, leaving a pointer to garbage. The most common place where this problem crops up is in classes like string classes, especially ones that define a conversion function to type <code>char *</code> or <code>const char *</code>—which is one reason why the standard <code>string</code> class requires you to call the <code>c_str</code> member function. However, any class that returns a pointer to some internal structure is potentially subject to this problem. </p>\n<p>For example, a program may use a function <code>strfunc</code> that returns <code>string</code> objects, and another function <code>charfunc</code> that operates on pointers to <code>char</code>: </p>\n<pre class=\"smallexample\">string strfunc ();\nvoid charfunc (const char *);\n\nvoid\nf ()\n{\n  const char *p = strfunc().c_str();\n  ...\n  charfunc (p);\n  ...\n  charfunc (p);\n}</pre> <p class=\"noindent\">In this situation, it may seem reasonable to save a pointer to the C string returned by the <code>c_str</code> member function and use that rather than call <code>c_str</code> repeatedly. However, the temporary string created by the call to <code>strfunc</code> is destroyed after <code>p</code> is initialized, at which point <code>p</code> is left pointing to freed memory. </p>\n<p>Code like this may run successfully under some other compilers, particularly obsolete cfront-based compilers that delete temporaries along with normal local variables. However, the GNU C++ behavior is standard-conforming, so if your program depends on late destruction of temporaries it is not portable. </p>\n<p>The safe way to write such code is to give the temporary a name, which forces it to remain until the end of the scope of the name. For example: </p>\n<pre class=\"smallexample\">const string&amp; tmp = strfunc ();\ncharfunc (tmp.c_str ());</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Temporaries.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Temporaries.html</a>\n  </p>\n</div>\n","copy-assignment":"<h1 class=\"subsection\" id=\"Copy-Assignment\">11.7.4 Implicit Copy-Assignment for Virtual Bases</h1> <p>When a base class is virtual, only one subobject of the base class belongs to each full object. Also, the constructors and destructors are invoked only once, and called from the most-derived class. However, such objects behave unspecified when being assigned. For example: </p>\n<pre class=\"smallexample\">struct Base{\n  char *name;\n  Base(char *n) : name(strdup(n)){}\n  Base&amp; operator= (const Base&amp; other){\n   free (name);\n   name = strdup (other.name);\n  }\n};\n\nstruct A:virtual Base{\n  int val;\n  A():Base(\"A\"){}\n};\n\nstruct B:virtual Base{\n  int bval;\n  B():Base(\"B\"){}\n};\n\nstruct Derived:public A, public B{\n  Derived():Base(\"Derived\"){}\n};\n\nvoid func(Derived &amp;d1, Derived &amp;d2)\n{\n  d1 = d2;\n}</pre> <p>The C++ standard specifies that ‘<code>Base::Base</code>’ is only called once when constructing or copy-constructing a Derived object. It is unspecified whether ‘<code>Base::operator=</code>’ is called more than once when the implicit copy-assignment for Derived objects is invoked (as it is inside ‘<code>func</code>’ in the example). </p>\n<p>G++ implements the “intuitive” algorithm for copy-assignment: assign all direct bases, then assign all members. In that algorithm, the virtual base subobject can be encountered more than once. In the example, copying proceeds in the following order: ‘<code>val</code>’, ‘<code>name</code>’ (via <code>strdup</code>), ‘<code>bval</code>’, and ‘<code>name</code>’ again. </p>\n<p>If application code relies on copy-assignment, a user-defined copy-assignment operator removes any uncertainties. With such an operator, the application can define whether and how the virtual base subobject is assigned. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Copy-Assignment.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Copy-Assignment.html</a>\n  </p>\n</div>\n","non_002dbugs":"<h1 class=\"section\" id=\"Non_002dbugs\">11.8 Certain Changes We Don't Want to Make</h1> <p>This section lists changes that people frequently request, but which we do not make because we think GCC is better without them. </p>\n<ul> <li>Checking the number and type of arguments to a function which has an old-fashioned definition and no prototype. <p>Such a feature would work only occasionally—only for calls that appear in the same file as the called function, following the definition. The only way to check all calls reliably is to add a prototype for the function. But adding a prototype eliminates the motivation for this feature. So the feature is not worthwhile. </p>\n</li>\n<li>Warning about using an expression whose type is signed as a shift count. <p>Shift count operands are probably signed more often than unsigned. Warning about this would cause far more annoyance than good. </p>\n</li>\n<li>Warning about assigning a signed value to an unsigned variable. <p>Such assignments must be very common; warning about them would cause more annoyance than good. </p>\n</li>\n<li>Warning when a non-void function value is ignored. <p>C contains many standard functions that return a value that most programs choose to ignore. One obvious example is <code>printf</code>. Warning about this practice only leads the defensive programmer to clutter programs with dozens of casts to <code>void</code>. Such casts are required so frequently that they become visual noise. Writing those casts becomes so automatic that they no longer convey useful information about the intentions of the programmer. For functions where the return value should never be ignored, use the <code>warn_unused_result</code> function attribute (see <a href=\"function-attributes#Function-Attributes\">Function Attributes</a>). </p>\n</li>\n<li>\nMaking <code>-fshort-enums</code> the default. <p>This would cause storage layout to be incompatible with most other C compilers. And it doesn't seem very important, given that you can get the same result in other ways. The case where it matters most is when the enumeration-valued object is inside a structure, and in that case you can specify a field width explicitly. </p>\n</li>\n<li>Making bit-fields unsigned by default on particular machines where “the ABI standard” says to do so. <p>The ISO C standard leaves it up to the implementation whether a bit-field declared plain <code>int</code> is signed or not. This in effect creates two alternative dialects of C. </p>\n<p>The GNU C compiler supports both dialects; you can specify the signed dialect with <code>-fsigned-bitfields</code> and the unsigned dialect with <code>-funsigned-bitfields</code>. However, this leaves open the question of which dialect to use by default. </p>\n<p>Currently, the preferred dialect makes plain bit-fields signed, because this is simplest. Since <code>int</code> is the same as <code>signed int</code> in every other context, it is cleanest for them to be the same in bit-fields as well. </p>\n<p>Some computer manufacturers have published Application Binary Interface standards which specify that plain bit-fields should be unsigned. It is a mistake, however, to say anything about this issue in an ABI. This is because the handling of plain bit-fields distinguishes two dialects of C. Both dialects are meaningful on every type of machine. Whether a particular object file was compiled using signed bit-fields or unsigned is of no concern to other object files, even if they access the same bit-fields in the same data structures. </p>\n<p>A given program is written in one or the other of these two dialects. The program stands a chance to work on most any machine if it is compiled with the proper dialect. It is unlikely to work at all if compiled with the wrong dialect. </p>\n<p>Many users appreciate the GNU C compiler because it provides an environment that is uniform across machines. These users would be inconvenienced if the compiler treated plain bit-fields differently on certain machines. </p>\n<p>Occasionally users write programs intended only for a particular machine type. On these occasions, the users would benefit if the GNU C compiler were to support by default the same dialect as the other compilers on that machine. But such applications are rare. And users writing a program to run on more than one type of machine cannot possibly benefit from this kind of compatibility. </p>\n<p>This is why GCC does and will treat plain bit-fields in the same fashion on all types of machines (by default). </p>\n<p>There are some arguments for making bit-fields unsigned by default on all machines. If, for example, this becomes a universal de facto standard, it would make sense for GCC to go along with it. This is something to be considered in the future. </p>\n<p>(Of course, users strongly concerned about portability should indicate explicitly in each bit-field whether it is signed or not. In this way, they write programs which have the same meaning in both C dialects.) </p>\n</li>\n<li>\nUndefining <code>__STDC__</code> when <code>-ansi</code> is not used. <p>Currently, GCC defines <code>__STDC__</code> unconditionally. This provides good results in practice. </p>\n<p>Programmers normally use conditionals on <code>__STDC__</code> to ask whether it is safe to use certain features of ISO C, such as function prototypes or ISO token concatenation. Since plain <code>gcc</code> supports all the features of ISO C, the correct answer to these questions is “yes”. </p>\n<p>Some users try to use <code>__STDC__</code> to check for the availability of certain library facilities. This is actually incorrect usage in an ISO C program, because the ISO C standard says that a conforming freestanding implementation should define <code>__STDC__</code> even though it does not have the library facilities. ‘<code>gcc -ansi -pedantic</code>’ is a conforming freestanding implementation, and it is therefore required to define <code>__STDC__</code>, even though it does not come with an ISO C library. </p>\n<p>Sometimes people say that defining <code>__STDC__</code> in a compiler that does not completely conform to the ISO C standard somehow violates the standard. This is illogical. The standard is a standard for compilers that claim to support ISO C, such as ‘<code>gcc -ansi</code>’—not for other compilers such as plain <code>gcc</code>. Whatever the ISO C standard says is relevant to the design of plain <code>gcc</code> without <code>-ansi</code> only for pragmatic reasons, not as a requirement. </p>\n<p>GCC normally defines <code>__STDC__</code> to be 1, and in addition defines <code>__STRICT_ANSI__</code> if you specify the <code>-ansi</code> option, or a <code>-std</code> option for strict conformance to some version of ISO C. On some hosts, system include files use a different convention, where <code>__STDC__</code> is normally 0, but is 1 if the user specifies strict conformance to the C Standard. GCC follows the host convention when processing system include files, but when processing user files it follows the usual GNU C convention. </p>\n</li>\n<li>Undefining <code>__STDC__</code> in C++. <p>Programs written to compile with C++-to-C translators get the value of <code>__STDC__</code> that goes with the C compiler that is subsequently used. These programs must test <code>__STDC__</code> to determine what kind of C preprocessor that compiler uses: whether they should concatenate tokens in the ISO C fashion or in the traditional fashion. </p>\n<p>These programs work properly with GNU C++ if <code>__STDC__</code> is defined. They would not work otherwise. </p>\n<p>In addition, many header files are written to provide prototypes in ISO C but not in traditional C. Many of these header files can work without change in C++ provided <code>__STDC__</code> is defined. If <code>__STDC__</code> is not defined, they will all fail, and will all need to be changed to test explicitly for C++ as well. </p>\n</li>\n<li>Deleting “empty” loops. <p>Historically, GCC has not deleted “empty” loops under the assumption that the most likely reason you would put one in a program is to have a delay, so deleting them will not make real programs run any faster. </p>\n<p>However, the rationale here is that optimization of a nonempty loop cannot produce an empty one. This held for carefully written C compiled with less powerful optimizers but is not always the case for carefully written C++ or with more powerful optimizers. Thus GCC will remove operations from loops whenever it can determine those operations are not externally visible (apart from the time taken to execute them, of course). In case the loop can be proved to be finite, GCC will also remove the loop itself. </p>\n<p>Be aware of this when performing timing tests, for instance the following loop can be completely removed, provided <code>some_expression</code> can provably not change any global state. </p>\n<pre class=\"smallexample\">{\n   int sum = 0;\n   int ix;\n\n   for (ix = 0; ix != 10000; ix++)\n      sum += some_expression;\n}</pre> <p>Even though <code>sum</code> is accumulated in the loop, no use is made of that summation, so the accumulation can be removed. </p>\n</li>\n<li>Making side effects happen in the same order as in some other compiler. <p>It is never safe to depend on the order of evaluation of side effects. For example, a function call like this may very well behave differently from one compiler to another: </p>\n<pre class=\"smallexample\">void func (int, int);\n\nint i = 2;\nfunc (i++, i++);</pre> <p>There is no guarantee (in either the C or the C++ standard language definitions) that the increments will be evaluated in any particular order. Either increment might happen first. <code>func</code> might get the arguments ‘<code>2, 3</code>’, or it might get ‘<code>3, 2</code>’, or even ‘<code>2, 2</code>’. </p>\n</li>\n<li>Making certain warnings into errors by default. <p>Some ISO C testsuites report failure when the compiler does not produce an error message for a certain program. </p>\n<p>ISO C requires a “diagnostic” message for certain kinds of invalid programs, but a warning is defined by GCC to count as a diagnostic. If GCC produces a warning but not an error, that is correct ISO C support. If testsuites call this “failure”, they should be run with the GCC option <code>-pedantic-errors</code>, which will turn these warnings into errors. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Non_002dbugs.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Non_002dbugs.html</a>\n  </p>\n</div>\n","warnings-and-errors":"<h1 class=\"section\" id=\"Warnings-and-Errors\">11.9 Warning Messages and Error Messages</h1> <p>The GNU compiler can produce two kinds of diagnostics: errors and warnings. Each kind has a different purpose: </p>\n<ul> <li>Errors report problems that make it impossible to compile your program. GCC reports errors with the source file name and line number where the problem is apparent. </li>\n<li>Warnings report other unusual conditions in your code that <em>may</em> indicate a problem, although compilation can (and does) proceed. Warning messages also report the source file name and line number, but include the text ‘<code>warning:</code>’ to distinguish them from error messages. </li>\n</ul> <p>Warnings may indicate danger points where you should check to make sure that your program really does what you intend; or the use of obsolete features; or the use of nonstandard features of GNU C or C++. Many warnings are issued only if you ask for them, with one of the <code>-W</code> options (for instance, <code>-Wall</code> requests a variety of useful warnings). </p>\n<p>GCC always tries to compile your program if possible; it never gratuitously rejects a program whose meaning is clear merely because (for instance) it fails to conform to a standard. In some cases, however, the C and C++ standards specify that certain extensions are forbidden, and a diagnostic <em>must</em> be issued by a conforming compiler. The <code>-pedantic</code> option tells GCC to issue warnings in such cases; <code>-pedantic-errors</code> says to make them errors instead. This does not mean that <em>all</em> non-ISO constructs get warnings or errors. </p>\n<p>See <a href=\"warning-options#Warning-Options\">Options to Request or Suppress Warnings</a>, for more detail on these and related command-line options.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Warnings-and-Errors.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Warnings-and-Errors.html</a>\n  </p>\n</div>\n"}