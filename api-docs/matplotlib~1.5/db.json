{"index":"<h1 id=\"api-index\">The Matplotlib API</h1> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\" id=\"the-matplotlib-api\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Release:</th>\n<td class=\"field-body\">1.5.1</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Date:</th>\n<td class=\"field-body\">June 18, 2016</td> </tr> </tbody> </table>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pyplot_summary\">Plotting commands summary</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/api/api_changes.html\">API Changes</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"matplotlib_configuration_api\">The top level <code>matplotlib</code> module</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"afm_api\">afm (Adobe Font Metrics interface)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"animation_api\">animation</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"artist_api\">artists</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"axes_api\">axes</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"axis_api\">axis</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"index_backend_api\">backends</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"cbook_api\">cbook</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"cm_api\">cm (colormap)</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"collections_api\">collections</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"colorbar_api\">colorbar</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"colors_api\">colors</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"dates_api\">dates</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"dviread\">dviread</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"figure_api\">figure</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"finance_api\">finance</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"font_manager_api\">font_manager</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"gridspec_api\">gridspec</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"image_api\">image</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"legend_api\">Legend</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"lines_api\">lines</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"markers_api\">Markers</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"mathtext_api\">mathtext</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"mlab_api\">mlab</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"offsetbox_api\">offsetbox</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"patches_api\">patches</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"path_api\">path</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"patheffects_api\">patheffects</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"pyplot_api\">pyplot</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"sankey_api\">sankey</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"spines_api\">spines</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"style_api\">style</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"text_api\">text</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"ticker_api\">ticker</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tight_layout_api\">tight_layout</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"tri_api\">triangular grids</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"type1font\">type1font</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"units_api\">units</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"widgets_api\">widgets</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/index.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/index.html</a>\n  </p>\n</div>\n","index_backend_api":"<h1 id=\"backends\">backends</h1>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"backend_bases_api\"><code>matplotlib.backend_bases</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"backend_managers_api\"><code>matplotlib.backend_managers</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"backend_tools_api\"><code>matplotlib.backend_tools</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"backend_gtkagg_api\"><code>matplotlib.backends.backend_gtkagg</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"backend_qt4agg_api\"><code>matplotlib.backends.backend_qt4agg</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"backend_wxagg_api\"><code>matplotlib.backends.backend_wxagg</code></a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"backend_pdf_api\"><code>matplotlib.backends.backend_pdf</code></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/index_backend_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/index_backend_api.html</a>\n  </p>\n</div>\n","colorbar_api":"<h1 id=\"colorbar\">colorbar</h1>  <h2 id=\"matplotlib-colorbar\">matplotlib.colorbar</h2> <p id=\"module-matplotlib.colorbar\">Colorbar toolkit with two classes and a function:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.colorbar.ColorbarBase\" title=\"matplotlib.colorbar.ColorbarBase\"><code>ColorbarBase</code></a></dt> <dd>the base class with full colorbar drawing functionality. It can be used as-is to make a colorbar for a given colormap; a mappable object (e.g., image) is not needed.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.colorbar.Colorbar\" title=\"matplotlib.colorbar.Colorbar\"><code>Colorbar</code></a></dt> <dd>the derived class for use with images or contour plots.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.colorbar.make_axes\" title=\"matplotlib.colorbar.make_axes\"><code>make_axes()</code></a></dt> <dd>a function for resizing an axes and adding a second axes suitable for a colorbar</dd> </dl> </div>\n</blockquote> <p>The <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a> method uses <a class=\"reference internal\" href=\"#matplotlib.colorbar.make_axes\" title=\"matplotlib.colorbar.make_axes\"><code>make_axes()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.colorbar.Colorbar\" title=\"matplotlib.colorbar.Colorbar\"><code>Colorbar</code></a>; the <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colorbar\" title=\"matplotlib.pyplot.colorbar\"><code>colorbar()</code></a> function is a thin wrapper over <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a>.</p> <dl class=\"class\"> <dt id=\"matplotlib.colorbar.Colorbar\"><code>class matplotlib.colorbar.Colorbar(ax, mappable, **kw)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colorbar.ColorbarBase\" title=\"matplotlib.colorbar.ColorbarBase\"><code>matplotlib.colorbar.ColorbarBase</code></a></p> <p>This class connects a <a class=\"reference internal\" href=\"#matplotlib.colorbar.ColorbarBase\" title=\"matplotlib.colorbar.ColorbarBase\"><code>ColorbarBase</code></a> to a <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> such as a <a class=\"reference internal\" href=\"image_api#matplotlib.image.AxesImage\" title=\"matplotlib.image.AxesImage\"><code>AxesImage</code></a> generated via <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.imshow\" title=\"matplotlib.axes.Axes.imshow\"><code>imshow()</code></a>.</p> <p>It is not intended to be instantiated directly; instead, use <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a> or <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colorbar\" title=\"matplotlib.pyplot.colorbar\"><code>colorbar()</code></a> to make your colorbar.</p> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.Colorbar.add_lines\"><code>add_lines(CS, erase=True)</code></dt> <dd>\n<p>Add the lines from a non-filled <code>ContourSet</code> to the colorbar.</p> <p>Set <em>erase</em> to False if these lines should be added to any pre-existing lines.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.Colorbar.on_mappable_changed\"><code>on_mappable_changed(mappable)</code></dt> <dd>\n<p>Updates this colorbar to match the mappable’s properties.</p> <p>Typically this is automatically registered as an event handler by <a class=\"reference internal\" href=\"#matplotlib.colorbar.colorbar_factory\" title=\"matplotlib.colorbar.colorbar_factory\"><code>colorbar_factory()</code></a> and should not be called manually.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.Colorbar.remove\"><code>remove()</code></dt> <dd>\n<p>Remove this colorbar from the figure. If the colorbar was created with <code>use_gridspec=True</code> then restore the gridspec to its previous value.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.Colorbar.update_bruteforce\"><code>update_bruteforce(mappable)</code></dt> <dd>\n<p>Destroy and rebuild the colorbar. This is intended to become obsolete, and will probably be deprecated and then removed. It is not called when the pyplot.colorbar function or the Figure.colorbar method are used to create the colorbar.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.Colorbar.update_normal\"><code>update_normal(mappable)</code></dt> <dd>\n<p>update solid, lines, etc. Unlike update_bruteforce, it does not clear the axes. This is meant to be called when the image or contour plot to which this colorbar belongs is changed.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colorbar.ColorbarBase\"><code>class matplotlib.colorbar.ColorbarBase(ax, cmap=None, norm=None, alpha=None, values=None, boundaries=None, orientation='vertical', ticklocation='auto', extend='neither', spacing='uniform', ticks=None, format=None, drawedges=False, filled=True, extendfrac=None, extendrect=False, label='')</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a></p> <p>Draw a colorbar in an existing axes.</p> <p>This is a base class for the <a class=\"reference internal\" href=\"#matplotlib.colorbar.Colorbar\" title=\"matplotlib.colorbar.Colorbar\"><code>Colorbar</code></a> class, which is the basis for the <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colorbar\" title=\"matplotlib.pyplot.colorbar\"><code>colorbar()</code></a> function and the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a> method, which are the usual ways of creating a colorbar.</p> <p>It is also useful by itself for showing a colormap. If the <em>cmap</em> kwarg is given but <em>boundaries</em> and <em>values</em> are left as None, then the colormap will be displayed on a 0-1 scale. To show the under- and over-value colors, specify the <em>norm</em> as:</p> <pre data-language=\"python\">colors.Normalize(clip=False)\n</pre> <p>To show the colors versus index instead of on the 0-1 scale, use:</p> <pre data-language=\"python\">norm=colors.NoNorm.\n</pre> <p>Useful attributes:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.colorbar.ColorbarBase.ax\" title=\"matplotlib.colorbar.ColorbarBase.ax\"><code>ax</code></a></dt> <dd>the Axes instance in which the colorbar is drawn</dd> <dt><code>lines</code></dt> <dd>a list of LineCollection if lines were drawn, otherwise an empty list</dd> <dt><code>dividers</code></dt> <dd>a LineCollection if <em>drawedges</em> is True, otherwise None</dd> </dl> </div>\n</blockquote> <p>Useful public methods are <a class=\"reference internal\" href=\"#matplotlib.colorbar.ColorbarBase.set_label\" title=\"matplotlib.colorbar.ColorbarBase.set_label\"><code>set_label()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.colorbar.ColorbarBase.add_lines\" title=\"matplotlib.colorbar.ColorbarBase.add_lines\"><code>add_lines()</code></a>.</p> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.add_lines\"><code>add_lines(levels, colors, linewidths, erase=True)</code></dt> <dd>\n<p>Draw lines on the colorbar.</p> <p><em>colors</em> and <em>linewidths</em> must be scalars or sequences the same length as <em>levels</em>.</p> <p>Set <em>erase</em> to False to add lines without first removing any previously added lines.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.colorbar.ColorbarBase.ax\"><code>ax = None</code></dt> <dd>\n<p>The axes that this colorbar lives in.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.config_axis\"><code>config_axis()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.draw_all\"><code>draw_all()</code></dt> <dd>\n<p>Calculate any free parameters based on the current cmap and norm, and do all the drawing.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.colorbar.ColorbarBase.n_rasterize\"><code>n_rasterize = 50</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.remove\"><code>remove()</code></dt> <dd>\n<p>Remove this colorbar from the figure</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.set_alpha\"><code>set_alpha(alpha)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.set_label\"><code>set_label(label, **kw)</code></dt> <dd>\n<p>Label the long axis of the colorbar</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.set_ticklabels\"><code>set_ticklabels(ticklabels, update_ticks=True)</code></dt> <dd>\n<p>set tick labels. Tick labels are updated immediately unless update_ticks is <em>False</em>. To manually update the ticks, call <em>update_ticks</em> method explicitly.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.set_ticks\"><code>set_ticks(ticks, update_ticks=True)</code></dt> <dd>\n<p>set tick locations. Tick locations are updated immediately unless update_ticks is <em>False</em>. To manually update the ticks, call <em>update_ticks</em> method explicitly.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colorbar.ColorbarBase.update_ticks\"><code>update_ticks()</code></dt> <dd>\n<p>Force the update of the ticks and ticklabels. This must be called whenever the tick locator and/or tick formatter changes.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colorbar.ColorbarPatch\"><code>class matplotlib.colorbar.ColorbarPatch(ax, mappable, **kw)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colorbar.Colorbar\" title=\"matplotlib.colorbar.Colorbar\"><code>matplotlib.colorbar.Colorbar</code></a></p> <p>A Colorbar which is created using <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> rather than the default <code>pcolor()</code>.</p> <p>It uses a list of Patch instances instead of a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PatchCollection\" title=\"matplotlib.collections.PatchCollection\"><code>PatchCollection</code></a> because the latter does not allow the hatch pattern to vary among the members of the collection.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colorbar.colorbar_factory\"><code>matplotlib.colorbar.colorbar_factory(cax, mappable, **kwargs)</code></dt> <dd>\n<p>Creates a colorbar on the given axes for the given mappable.</p> <p>Typically, for automatic colorbar placement given only a mappable use <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colorbar.make_axes\"><code>matplotlib.colorbar.make_axes(parents, location=None, orientation=None, fraction=0.15, shrink=1.0, aspect=20, **kw)</code></dt> <dd>\n<p>Resize and reposition parent axes, and return a child axes suitable for a colorbar:</p> <pre data-language=\"python\">cax, kw = make_axes(parent, **kw)\n</pre> <p>Keyword arguments may include the following (with defaults):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>location <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[None|’left’|’right’|’top’|’bottom’]</span>\n</dt> <dd>The position, relative to <strong>parents</strong>, where the colorbar axes should be created. If None, the value will either come from the given <code>orientation</code>, else it will default to ‘right’.</dd> <dt>orientation <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[None|’vertical’|’horizontal’]</span>\n</dt> <dd>The orientation of the colorbar. Typically, this keyword shouldn’t be used, as it can be derived from the <code>location</code> keyword.</dd> </dl> </div>\n</blockquote> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>orientation</em></td> <td>vertical or horizontal</td> </tr> <tr class=\"row-odd\">\n<td><em>fraction</em></td> <td>0.15; fraction of original axes to use for colorbar</td> </tr> <tr class=\"row-even\">\n<td><em>pad</em></td> <td>0.05 if vertical, 0.15 if horizontal; fraction of original axes between colorbar and new image axes</td> </tr> <tr class=\"row-odd\">\n<td><em>shrink</em></td> <td>1.0; fraction by which to shrink the colorbar</td> </tr> <tr class=\"row-even\">\n<td><em>aspect</em></td> <td>20; ratio of long to short dimensions</td> </tr> <tr class=\"row-odd\">\n<td><em>anchor</em></td> <td>(0.0, 0.5) if vertical; (0.5, 1.0) if horizontal; the anchor point of the colorbar axes</td> </tr> <tr class=\"row-even\">\n<td><em>panchor</em></td> <td>(1.0, 0.5) if vertical; (0.5, 0.0) if horizontal; the anchor point of the colorbar parent axes. If False, the parent axes’ anchor will be unchanged</td> </tr> </tbody> </table> <p>Returns (cax, kw), the child axes and the reduced kw dictionary to be passed when creating the colorbar instance.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colorbar.make_axes_gridspec\"><code>matplotlib.colorbar.make_axes_gridspec(parent, **kw)</code></dt> <dd>\n<p>Resize and reposition a parent axes, and return a child axes suitable for a colorbar. This function is similar to make_axes. Prmary differences are</p> <blockquote> <div>\n<ul> <li>\n<em>make_axes_gridspec</em> only handles the <em>orientation</em> keyword and cannot handle the “location” keyword. </li> <li>\n<em>make_axes_gridspec</em> should only be used with a subplot parent. </li> <li>\n<dl class=\"first docutils\"> <dt>\n<em>make_axes</em> creates an instance of Axes. <em>make_axes_gridspec</em>\n</dt> <dd>\n<p class=\"first last\">creates an instance of Subplot.</p> </dd> </dl> </li> <li>\n<dl class=\"first docutils\"> <dt>\n<em>make_axes</em> updates the position of the</dt> <dd>\n<p class=\"first last\">parent. <em>make_axes_gridspec</em> replaces the grid_spec attribute of the parent with a new one.</p> </dd> </dl> </li> </ul> </div>\n</blockquote> <p>While this function is meant to be compatible with <em>make_axes</em>, there could be some minor differences.:</p> <pre data-language=\"python\">cax, kw = make_axes_gridspec(parent, **kw)\n</pre> <p>Keyword arguments may include the following (with defaults):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>orientation</em></dt> <dd>‘vertical’ or ‘horizontal’</dd> </dl> </div>\n</blockquote> <table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>orientation</em></td> <td>vertical or horizontal</td> </tr> <tr class=\"row-odd\">\n<td><em>fraction</em></td> <td>0.15; fraction of original axes to use for colorbar</td> </tr> <tr class=\"row-even\">\n<td><em>pad</em></td> <td>0.05 if vertical, 0.15 if horizontal; fraction of original axes between colorbar and new image axes</td> </tr> <tr class=\"row-odd\">\n<td><em>shrink</em></td> <td>1.0; fraction by which to shrink the colorbar</td> </tr> <tr class=\"row-even\">\n<td><em>aspect</em></td> <td>20; ratio of long to short dimensions</td> </tr> <tr class=\"row-odd\">\n<td><em>anchor</em></td> <td>(0.0, 0.5) if vertical; (0.5, 1.0) if horizontal; the anchor point of the colorbar axes</td> </tr> <tr class=\"row-even\">\n<td><em>panchor</em></td> <td>(1.0, 0.5) if vertical; (0.5, 0.0) if horizontal; the anchor point of the colorbar parent axes. If False, the parent axes’ anchor will be unchanged</td> </tr> </tbody> </table> <p>All but the first of these are stripped from the input kw set.</p> <p>Returns (cax, kw), the child axes and the reduced kw dictionary to be passed when creating the colorbar instance.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/colorbar_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/colorbar_api.html</a>\n  </p>\n</div>\n","pyplot_summary":"<h1 id=\"plotting-commands-summary\">Plotting commands summary</h1> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.plotting\"><code>matplotlib.pyplot.plotting()</code></dt> <dd>\n<table class=\"docutils\"> <colgroup> <col width=\"18%\"> <col width=\"82%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Function</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.acorr\" title=\"matplotlib.pyplot.acorr\"><code>acorr</code></a></td> <td>Plot the autocorrelation of <code>x</code>.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.angle_spectrum\" title=\"matplotlib.pyplot.angle_spectrum\"><code>angle_spectrum</code></a></td> <td>Plot the angle spectrum.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.annotate\" title=\"matplotlib.pyplot.annotate\"><code>annotate</code></a></td> <td>Create an annotation: a piece of text referring to a data point.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.arrow\" title=\"matplotlib.pyplot.arrow\"><code>arrow</code></a></td> <td>Add an arrow to the axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.autoscale\" title=\"matplotlib.pyplot.autoscale\"><code>autoscale</code></a></td> <td>Autoscale the axis view to the data (toggle).</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.axes\" title=\"matplotlib.pyplot.axes\"><code>axes</code></a></td> <td>Add an axes to the figure.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.axhline\" title=\"matplotlib.pyplot.axhline\"><code>axhline</code></a></td> <td>Add a horizontal line across the axis.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.axhspan\" title=\"matplotlib.pyplot.axhspan\"><code>axhspan</code></a></td> <td>Add a horizontal span (rectangle) across the axis.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.axis\" title=\"matplotlib.pyplot.axis\"><code>axis</code></a></td> <td>Convenience method to get or set axis properties.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.axvline\" title=\"matplotlib.pyplot.axvline\"><code>axvline</code></a></td> <td>Add a vertical line across the axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.axvspan\" title=\"matplotlib.pyplot.axvspan\"><code>axvspan</code></a></td> <td>Add a vertical span (rectangle) across the axes.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.bar\" title=\"matplotlib.pyplot.bar\"><code>bar</code></a></td> <td>Make a bar plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.barbs\" title=\"matplotlib.pyplot.barbs\"><code>barbs</code></a></td> <td>Plot a 2-D field of barbs.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.barh\" title=\"matplotlib.pyplot.barh\"><code>barh</code></a></td> <td>Make a horizontal bar plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.box\" title=\"matplotlib.pyplot.box\"><code>box</code></a></td> <td>Turn the axes box on or off.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.boxplot\" title=\"matplotlib.pyplot.boxplot\"><code>boxplot</code></a></td> <td>Make a box and whisker plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.broken_barh\" title=\"matplotlib.pyplot.broken_barh\"><code>broken_barh</code></a></td> <td>Plot horizontal bars.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.cla\" title=\"matplotlib.pyplot.cla\"><code>cla</code></a></td> <td>Clear the current axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.clabel\" title=\"matplotlib.pyplot.clabel\"><code>clabel</code></a></td> <td>Label a contour plot.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.clf\" title=\"matplotlib.pyplot.clf\"><code>clf</code></a></td> <td>Clear the current figure.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.clim\" title=\"matplotlib.pyplot.clim\"><code>clim</code></a></td> <td>Set the color limits of the current image.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.close\" title=\"matplotlib.pyplot.close\"><code>close</code></a></td> <td>Close a figure window.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.cohere\" title=\"matplotlib.pyplot.cohere\"><code>cohere</code></a></td> <td>Plot the coherence between <em>x</em> and <em>y</em>.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colorbar\" title=\"matplotlib.pyplot.colorbar\"><code>colorbar</code></a></td> <td>Add a colorbar to a plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour</code></a></td> <td>Plot contours.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf</code></a></td> <td>Plot contours.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.csd\" title=\"matplotlib.pyplot.csd\"><code>csd</code></a></td> <td>Plot the cross-spectral density.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.delaxes\" title=\"matplotlib.pyplot.delaxes\"><code>delaxes</code></a></td> <td>Remove an axes from the current figure.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.draw\" title=\"matplotlib.pyplot.draw\"><code>draw</code></a></td> <td>Redraw the current figure.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.errorbar\" title=\"matplotlib.pyplot.errorbar\"><code>errorbar</code></a></td> <td>Plot an errorbar graph.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.eventplot\" title=\"matplotlib.pyplot.eventplot\"><code>eventplot</code></a></td> <td>Plot identical parallel lines at specific positions.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.figimage\" title=\"matplotlib.pyplot.figimage\"><code>figimage</code></a></td> <td>Adds a non-resampled image to the figure.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.figlegend\" title=\"matplotlib.pyplot.figlegend\"><code>figlegend</code></a></td> <td>Place a legend in the figure.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.fignum_exists\" title=\"matplotlib.pyplot.fignum_exists\"><code>fignum_exists</code></a></td> <td> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.figtext\" title=\"matplotlib.pyplot.figtext\"><code>figtext</code></a></td> <td>Add text to figure.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.figure\" title=\"matplotlib.pyplot.figure\"><code>figure</code></a></td> <td>Creates a new figure.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.fill\" title=\"matplotlib.pyplot.fill\"><code>fill</code></a></td> <td>Plot filled polygons.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.fill_between\" title=\"matplotlib.pyplot.fill_between\"><code>fill_between</code></a></td> <td>Make filled polygons between two curves.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.fill_betweenx\" title=\"matplotlib.pyplot.fill_betweenx\"><code>fill_betweenx</code></a></td> <td>Make filled polygons between two horizontal curves.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.findobj\" title=\"matplotlib.pyplot.findobj\"><code>findobj</code></a></td> <td>Find artist objects.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.gca\" title=\"matplotlib.pyplot.gca\"><code>gca</code></a></td> <td>Get the current <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance on the current figure matching the given keyword args, or create one.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.gcf\" title=\"matplotlib.pyplot.gcf\"><code>gcf</code></a></td> <td>Get a reference to the current figure.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.gci\" title=\"matplotlib.pyplot.gci\"><code>gci</code></a></td> <td>Get the current colorable artist.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.get_figlabels\" title=\"matplotlib.pyplot.get_figlabels\"><code>get_figlabels</code></a></td> <td>Return a list of existing figure labels.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.get_fignums\" title=\"matplotlib.pyplot.get_fignums\"><code>get_fignums</code></a></td> <td>Return a list of existing figure numbers.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.grid\" title=\"matplotlib.pyplot.grid\"><code>grid</code></a></td> <td>Turn the axes grids on or off.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.hexbin\" title=\"matplotlib.pyplot.hexbin\"><code>hexbin</code></a></td> <td>Make a hexagonal binning plot.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.hist\" title=\"matplotlib.pyplot.hist\"><code>hist</code></a></td> <td>Plot a histogram.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.hist2d\" title=\"matplotlib.pyplot.hist2d\"><code>hist2d</code></a></td> <td>Make a 2D histogram plot.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.hlines\" title=\"matplotlib.pyplot.hlines\"><code>hlines</code></a></td> <td>Plot horizontal lines at each <code>y</code> from <code>xmin</code> to <code>xmax</code>.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.hold\" title=\"matplotlib.pyplot.hold\"><code>hold</code></a></td> <td>Set the hold state.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.imread\" title=\"matplotlib.pyplot.imread\"><code>imread</code></a></td> <td>Read an image from a file into an array.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.imsave\" title=\"matplotlib.pyplot.imsave\"><code>imsave</code></a></td> <td>Save an array as in image file.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>imshow</code></a></td> <td>Display an image on the axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.install_repl_displayhook\" title=\"matplotlib.pyplot.install_repl_displayhook\"><code>install_repl_displayhook</code></a></td> <td>Install a repl display hook so that any stale figure are automatically redrawn when control is returned to the repl.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.ioff\" title=\"matplotlib.pyplot.ioff\"><code>ioff</code></a></td> <td>Turn interactive mode off.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.ion\" title=\"matplotlib.pyplot.ion\"><code>ion</code></a></td> <td>Turn interactive mode on.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.ishold\" title=\"matplotlib.pyplot.ishold\"><code>ishold</code></a></td> <td>Return the hold status of the current axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.isinteractive\" title=\"matplotlib.pyplot.isinteractive\"><code>isinteractive</code></a></td> <td>Return status of interactive mode.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.legend\" title=\"matplotlib.pyplot.legend\"><code>legend</code></a></td> <td>Places a legend on the axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.locator_params\" title=\"matplotlib.pyplot.locator_params\"><code>locator_params</code></a></td> <td>Control behavior of tick locators.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.loglog\" title=\"matplotlib.pyplot.loglog\"><code>loglog</code></a></td> <td>Make a plot with log scaling on both the <em>x</em> and <em>y</em> axis.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.magnitude_spectrum\" title=\"matplotlib.pyplot.magnitude_spectrum\"><code>magnitude_spectrum</code></a></td> <td>Plot the magnitude spectrum.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.margins\" title=\"matplotlib.pyplot.margins\"><code>margins</code></a></td> <td>Set or retrieve autoscaling margins.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.matshow\" title=\"matplotlib.pyplot.matshow\"><code>matshow</code></a></td> <td>Display an array as a matrix in a new figure window.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.minorticks_off\" title=\"matplotlib.pyplot.minorticks_off\"><code>minorticks_off</code></a></td> <td>Remove minor ticks from the current plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.minorticks_on\" title=\"matplotlib.pyplot.minorticks_on\"><code>minorticks_on</code></a></td> <td>Display minor ticks on the current plot.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.over\" title=\"matplotlib.pyplot.over\"><code>over</code></a></td> <td>Call a function with hold(True).</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pause\" title=\"matplotlib.pyplot.pause\"><code>pause</code></a></td> <td>Pause for <em>interval</em> seconds.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor</code></a></td> <td>Create a pseudocolor plot of a 2-D array.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pcolormesh\" title=\"matplotlib.pyplot.pcolormesh\"><code>pcolormesh</code></a></td> <td>Plot a quadrilateral mesh.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.phase_spectrum\" title=\"matplotlib.pyplot.phase_spectrum\"><code>phase_spectrum</code></a></td> <td>Plot the phase spectrum.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pie\" title=\"matplotlib.pyplot.pie\"><code>pie</code></a></td> <td>Plot a pie chart.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot</code></a></td> <td>Plot lines and/or markers to the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a>.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot_date\" title=\"matplotlib.pyplot.plot_date\"><code>plot_date</code></a></td> <td>Plot with data with dates.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plotfile\" title=\"matplotlib.pyplot.plotfile\"><code>plotfile</code></a></td> <td>Plot the data in in a file.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.polar\" title=\"matplotlib.pyplot.polar\"><code>polar</code></a></td> <td>Make a polar plot.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.psd\" title=\"matplotlib.pyplot.psd\"><code>psd</code></a></td> <td>Plot the power spectral density.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.quiver\" title=\"matplotlib.pyplot.quiver\"><code>quiver</code></a></td> <td>Plot a 2-D field of arrows.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.quiverkey\" title=\"matplotlib.pyplot.quiverkey\"><code>quiverkey</code></a></td> <td>Add a key to a quiver plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.rc\" title=\"matplotlib.pyplot.rc\"><code>rc</code></a></td> <td>Set the current rc params.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.rc_context\" title=\"matplotlib.pyplot.rc_context\"><code>rc_context</code></a></td> <td>Return a context manager for managing rc settings.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.rcdefaults\" title=\"matplotlib.pyplot.rcdefaults\"><code>rcdefaults</code></a></td> <td>Restore the default rc params.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.rgrids\" title=\"matplotlib.pyplot.rgrids\"><code>rgrids</code></a></td> <td>Get or set the radial gridlines on a polar plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.savefig\" title=\"matplotlib.pyplot.savefig\"><code>savefig</code></a></td> <td>Save the current figure.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.sca\" title=\"matplotlib.pyplot.sca\"><code>sca</code></a></td> <td>Set the current Axes instance to <em>ax</em>.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.scatter\" title=\"matplotlib.pyplot.scatter\"><code>scatter</code></a></td> <td>Make a scatter plot of x vs y, where x and y are sequence like objects of the same lengths.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.sci\" title=\"matplotlib.pyplot.sci\"><code>sci</code></a></td> <td>Set the current image.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.semilogx\" title=\"matplotlib.pyplot.semilogx\"><code>semilogx</code></a></td> <td>Make a plot with log scaling on the <em>x</em> axis.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.semilogy\" title=\"matplotlib.pyplot.semilogy\"><code>semilogy</code></a></td> <td>Make a plot with log scaling on the <em>y</em> axis.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.set_cmap\" title=\"matplotlib.pyplot.set_cmap\"><code>set_cmap</code></a></td> <td>Set the default colormap.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.setp\" title=\"matplotlib.pyplot.setp\"><code>setp</code></a></td> <td>Set a property on an artist object.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.show\" title=\"matplotlib.pyplot.show\"><code>show</code></a></td> <td>Display a figure.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram</code></a></td> <td>Plot a spectrogram.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.spy\" title=\"matplotlib.pyplot.spy\"><code>spy</code></a></td> <td>Plot the sparsity pattern on a 2-D array.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.stackplot\" title=\"matplotlib.pyplot.stackplot\"><code>stackplot</code></a></td> <td>Draws a stacked area plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.stem\" title=\"matplotlib.pyplot.stem\"><code>stem</code></a></td> <td>Create a stem plot.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.step\" title=\"matplotlib.pyplot.step\"><code>step</code></a></td> <td>Make a step plot.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.streamplot\" title=\"matplotlib.pyplot.streamplot\"><code>streamplot</code></a></td> <td>Draws streamlines of a vector flow.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.subplot\" title=\"matplotlib.pyplot.subplot\"><code>subplot</code></a></td> <td>Return a subplot axes positioned by the given grid definition.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.subplot2grid\" title=\"matplotlib.pyplot.subplot2grid\"><code>subplot2grid</code></a></td> <td>Create a subplot in a grid.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.subplot_tool\" title=\"matplotlib.pyplot.subplot_tool\"><code>subplot_tool</code></a></td> <td>Launch a subplot tool window for a figure.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.subplots\" title=\"matplotlib.pyplot.subplots\"><code>subplots</code></a></td> <td>Create a figure with a set of subplots already made.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.subplots_adjust\" title=\"matplotlib.pyplot.subplots_adjust\"><code>subplots_adjust</code></a></td> <td>Tune the subplot layout.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.suptitle\" title=\"matplotlib.pyplot.suptitle\"><code>suptitle</code></a></td> <td>Add a centered title to the figure.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.switch_backend\" title=\"matplotlib.pyplot.switch_backend\"><code>switch_backend</code></a></td> <td>Switch the default backend.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.table\" title=\"matplotlib.pyplot.table\"><code>table</code></a></td> <td>Add a table to the current axes.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.text\" title=\"matplotlib.pyplot.text\"><code>text</code></a></td> <td>Add text to the axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.thetagrids\" title=\"matplotlib.pyplot.thetagrids\"><code>thetagrids</code></a></td> <td>Get or set the theta locations of the gridlines in a polar plot.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tick_params\" title=\"matplotlib.pyplot.tick_params\"><code>tick_params</code></a></td> <td>Change the appearance of ticks and tick labels.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.ticklabel_format\" title=\"matplotlib.pyplot.ticklabel_format\"><code>ticklabel_format</code></a></td> <td>Change the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.ScalarFormatter\" title=\"matplotlib.ticker.ScalarFormatter\"><code>ScalarFormatter</code></a> used by default for linear axes.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tight_layout\" title=\"matplotlib.pyplot.tight_layout\"><code>tight_layout</code></a></td> <td>Automatically adjust subplot parameters to give specified padding.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.title\" title=\"matplotlib.pyplot.title\"><code>title</code></a></td> <td>Set a title of the current axes.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tricontour\" title=\"matplotlib.pyplot.tricontour\"><code>tricontour</code></a></td> <td>Draw contours on an unstructured triangular grid.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tricontourf\" title=\"matplotlib.pyplot.tricontourf\"><code>tricontourf</code></a></td> <td>Draw contours on an unstructured triangular grid.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tripcolor\" title=\"matplotlib.pyplot.tripcolor\"><code>tripcolor</code></a></td> <td>Create a pseudocolor plot of an unstructured triangular grid.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.triplot\" title=\"matplotlib.pyplot.triplot\"><code>triplot</code></a></td> <td>Draw a unstructured triangular grid as lines and/or markers.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.twinx\" title=\"matplotlib.pyplot.twinx\"><code>twinx</code></a></td> <td>Make a second axes that shares the <em>x</em>-axis.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.twiny\" title=\"matplotlib.pyplot.twiny\"><code>twiny</code></a></td> <td>Make a second axes that shares the <em>y</em>-axis.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.uninstall_repl_displayhook\" title=\"matplotlib.pyplot.uninstall_repl_displayhook\"><code>uninstall_repl_displayhook</code></a></td> <td>Uninstalls the matplotlib display hook.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.violinplot\" title=\"matplotlib.pyplot.violinplot\"><code>violinplot</code></a></td> <td>Make a violin plot.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.vlines\" title=\"matplotlib.pyplot.vlines\"><code>vlines</code></a></td> <td>Plot vertical lines.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.xcorr\" title=\"matplotlib.pyplot.xcorr\"><code>xcorr</code></a></td> <td>Plot the cross correlation between <em>x</em> and <em>y</em>.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.xkcd\" title=\"matplotlib.pyplot.xkcd\"><code>xkcd</code></a></td> <td>Turns on <a class=\"reference external\" href=\"http://xkcd.com/\">xkcd</a> sketch-style drawing mode.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.xlabel\" title=\"matplotlib.pyplot.xlabel\"><code>xlabel</code></a></td> <td>Set the <em>x</em> axis label of the current axis.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.xlim\" title=\"matplotlib.pyplot.xlim\"><code>xlim</code></a></td> <td>Get or set the <em>x</em> limits of the current axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.xscale\" title=\"matplotlib.pyplot.xscale\"><code>xscale</code></a></td> <td>Set the scaling of the <em>x</em>-axis.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.xticks\" title=\"matplotlib.pyplot.xticks\"><code>xticks</code></a></td> <td>Get or set the <em>x</em>-limits of the current tick locations and labels.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.ylabel\" title=\"matplotlib.pyplot.ylabel\"><code>ylabel</code></a></td> <td>Set the <em>y</em> axis label of the current axis.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.ylim\" title=\"matplotlib.pyplot.ylim\"><code>ylim</code></a></td> <td>Get or set the <em>y</em>-limits of the current axes.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.yscale\" title=\"matplotlib.pyplot.yscale\"><code>yscale</code></a></td> <td>Set the scaling of the <em>y</em>-axis.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.yticks\" title=\"matplotlib.pyplot.yticks\"><code>yticks</code></a></td> <td>Get or set the <em>y</em>-limits of the current tick locations and labels.</td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.colormaps\"><code>matplotlib.pyplot.colormaps()</code></dt> <dd>\n<p>Matplotlib provides a number of colormaps, and others can be added using <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.register_cmap\" title=\"matplotlib.cm.register_cmap\"><code>register_cmap()</code></a>. This function documents the built-in colormaps, and will also return a list of all registered colormaps if called.</p> <p>You can set the colormap for an image, pcolor, scatter, etc, using a keyword argument:</p> <pre data-language=\"python\">imshow(X, cmap=cm.hot)\n</pre> <p>or using the <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.set_cmap\" title=\"matplotlib.pyplot.set_cmap\"><code>set_cmap()</code></a> function:</p> <pre data-language=\"python\">imshow(X)\npyplot.set_cmap('hot')\npyplot.set_cmap('jet')\n</pre> <p>In interactive mode, <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.set_cmap\" title=\"matplotlib.pyplot.set_cmap\"><code>set_cmap()</code></a> will update the colormap post-hoc, allowing you to see which one works best for your data.</p> <p>All built-in colormaps can be reversed by appending <code>_r</code>: For instance, <code>gray_r</code> is the reverse of <code>gray</code>.</p> <p>There are several common color schemes used in visualization:</p> <dl class=\"docutils\"> <dt>Sequential schemes</dt> <dd>for unipolar data that progresses from low to high</dd> <dt>Diverging schemes</dt> <dd>for bipolar data that emphasizes positive or negative deviations from a central value</dd> <dt>Cyclic schemes</dt> <dd>meant for plotting values that wrap around at the endpoints, such as phase angle, wind direction, or time of day</dd> <dt>Qualitative schemes</dt> <dd>for nominal data that has no inherent ordering, where color is used only to distinguish categories</dd> </dl> <p>The base colormaps are derived from those of the same name provided with Matlab:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"87%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Colormap</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>autumn</td> <td>sequential linearly-increasing shades of red-orange-yellow</td> </tr> <tr class=\"row-odd\">\n<td>bone</td> <td>sequential increasing black-white color map with a tinge of blue, to emulate X-ray film</td> </tr> <tr class=\"row-even\">\n<td>cool</td> <td>linearly-decreasing shades of cyan-magenta</td> </tr> <tr class=\"row-odd\">\n<td>copper</td> <td>sequential increasing shades of black-copper</td> </tr> <tr class=\"row-even\">\n<td>flag</td> <td>repetitive red-white-blue-black pattern (not cyclic at endpoints)</td> </tr> <tr class=\"row-odd\">\n<td>gray</td> <td>sequential linearly-increasing black-to-white grayscale</td> </tr> <tr class=\"row-even\">\n<td>hot</td> <td>sequential black-red-yellow-white, to emulate blackbody radiation from an object at increasing temperatures</td> </tr> <tr class=\"row-odd\">\n<td>hsv</td> <td>cyclic red-yellow-green-cyan-blue-magenta-red, formed by changing the hue component in the HSV color space</td> </tr> <tr class=\"row-even\">\n<td>inferno</td> <td>perceptually uniform shades of black-red-yellow</td> </tr> <tr class=\"row-odd\">\n<td>jet</td> <td>a spectral map with dark endpoints, blue-cyan-yellow-red; based on a fluid-jet simulation by NCSA <a class=\"footnote-reference\" href=\"#id6\" id=\"id1\">[1]</a>\n</td> </tr> <tr class=\"row-even\">\n<td>magma</td> <td>perceptually uniform shades of black-red-white</td> </tr> <tr class=\"row-odd\">\n<td>pink</td> <td>sequential increasing pastel black-pink-white, meant for sepia tone colorization of photographs</td> </tr> <tr class=\"row-even\">\n<td>plasma</td> <td>perceptually uniform shades of blue-red-yellow</td> </tr> <tr class=\"row-odd\">\n<td>prism</td> <td>repetitive red-yellow-green-blue-purple-...-green pattern (not cyclic at endpoints)</td> </tr> <tr class=\"row-even\">\n<td>spring</td> <td>linearly-increasing shades of magenta-yellow</td> </tr> <tr class=\"row-odd\">\n<td>summer</td> <td>sequential linearly-increasing shades of green-yellow</td> </tr> <tr class=\"row-even\">\n<td>viridis</td> <td>perceptually uniform shades of blue-green-yellow</td> </tr> <tr class=\"row-odd\">\n<td>winter</td> <td>linearly-increasing shades of blue-green</td> </tr> </tbody> </table> </div>\n</blockquote> <p>For the above list only, you can also set the colormap using the corresponding pylab shortcut interface function, similar to Matlab:</p> <pre data-language=\"python\">imshow(X)\nhot()\njet()\n</pre> <p>The next set of palettes are from the <a class=\"reference external\" href=\"http://dhmunro.github.io/yorick-doc/\">Yorick scientific visualisation package</a>, an evolution of the GIST package, both by David H. Munro:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"18%\"> <col width=\"82%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Colormap</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>gist_earth</td> <td>mapmaker’s colors from dark blue deep ocean to green lowlands to brown highlands to white mountains</td> </tr> <tr class=\"row-odd\">\n<td>gist_heat</td> <td>sequential increasing black-red-orange-white, to emulate blackbody radiation from an iron bar as it grows hotter</td> </tr> <tr class=\"row-even\">\n<td>gist_ncar</td> <td>pseudo-spectral black-blue-green-yellow-red-purple-white colormap from National Center for Atmospheric Research <a class=\"footnote-reference\" href=\"#id7\" id=\"id2\">[2]</a>\n</td> </tr> <tr class=\"row-odd\">\n<td>gist_rainbow</td> <td>runs through the colors in spectral order from red to violet at full saturation (like <em>hsv</em> but not cyclic)</td> </tr> <tr class=\"row-even\">\n<td>gist_stern</td> <td>“Stern special” color table from Interactive Data Language software</td> </tr> </tbody> </table> </div>\n</blockquote> <p>The following colormaps are based on the <a class=\"reference external\" href=\"http://colorbrewer.org\">ColorBrewer</a> color specifications and designs developed by Cynthia Brewer:</p> <p>ColorBrewer Diverging (luminance is highest at the midpoint, and decreases towards differently-colored endpoints):</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Colormap</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>BrBG</td> <td>brown, white, blue-green</td> </tr> <tr class=\"row-odd\">\n<td>PiYG</td> <td>pink, white, yellow-green</td> </tr> <tr class=\"row-even\">\n<td>PRGn</td> <td>purple, white, green</td> </tr> <tr class=\"row-odd\">\n<td>PuOr</td> <td>orange, white, purple</td> </tr> <tr class=\"row-even\">\n<td>RdBu</td> <td>red, white, blue</td> </tr> <tr class=\"row-odd\">\n<td>RdGy</td> <td>red, white, gray</td> </tr> <tr class=\"row-even\">\n<td>RdYlBu</td> <td>red, yellow, blue</td> </tr> <tr class=\"row-odd\">\n<td>RdYlGn</td> <td>red, yellow, green</td> </tr> <tr class=\"row-even\">\n<td>Spectral</td> <td>red, orange, yellow, green, blue</td> </tr> </tbody> </table> </div>\n</blockquote> <p>ColorBrewer Sequential (luminance decreases monotonically):</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"18%\"> <col width=\"82%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Colormap</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Blues</td> <td>white to dark blue</td> </tr> <tr class=\"row-odd\">\n<td>BuGn</td> <td>white, light blue, dark green</td> </tr> <tr class=\"row-even\">\n<td>BuPu</td> <td>white, light blue, dark purple</td> </tr> <tr class=\"row-odd\">\n<td>GnBu</td> <td>white, light green, dark blue</td> </tr> <tr class=\"row-even\">\n<td>Greens</td> <td>white to dark green</td> </tr> <tr class=\"row-odd\">\n<td>Greys</td> <td>white to black (not linear)</td> </tr> <tr class=\"row-even\">\n<td>Oranges</td> <td>white, orange, dark brown</td> </tr> <tr class=\"row-odd\">\n<td>OrRd</td> <td>white, orange, dark red</td> </tr> <tr class=\"row-even\">\n<td>PuBu</td> <td>white, light purple, dark blue</td> </tr> <tr class=\"row-odd\">\n<td>PuBuGn</td> <td>white, light purple, dark green</td> </tr> <tr class=\"row-even\">\n<td>PuRd</td> <td>white, light purple, dark red</td> </tr> <tr class=\"row-odd\">\n<td>Purples</td> <td>white to dark purple</td> </tr> <tr class=\"row-even\">\n<td>RdPu</td> <td>white, pink, dark purple</td> </tr> <tr class=\"row-odd\">\n<td>Reds</td> <td>white to dark red</td> </tr> <tr class=\"row-even\">\n<td>YlGn</td> <td>light yellow, dark green</td> </tr> <tr class=\"row-odd\">\n<td>YlGnBu</td> <td>light yellow, light green, dark blue</td> </tr> <tr class=\"row-even\">\n<td>YlOrBr</td> <td>light yellow, orange, dark brown</td> </tr> <tr class=\"row-odd\">\n<td>YlOrRd</td> <td>light yellow, orange, dark red</td> </tr> </tbody> </table> </div>\n</blockquote> <p>ColorBrewer Qualitative:</p> <p>(For plotting nominal data, <code>ListedColormap</code> should be used, not <code>LinearSegmentedColormap</code>. Different sets of colors are recommended for different numbers of categories. These continuous versions of the qualitative schemes may be removed or converted in the future.)</p> <ul class=\"simple\"> <li>Accent</li> <li>Dark2</li> <li>Paired</li> <li>Pastel1</li> <li>Pastel2</li> <li>Set1</li> <li>Set2</li> <li>Set3</li> </ul> <p>Other miscellaneous schemes:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Colormap</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>afmhot</td> <td>sequential black-orange-yellow-white blackbody spectrum, commonly used in atomic force microscopy</td> </tr> <tr class=\"row-odd\">\n<td>brg</td> <td>blue-red-green</td> </tr> <tr class=\"row-even\">\n<td>bwr</td> <td>diverging blue-white-red</td> </tr> <tr class=\"row-odd\">\n<td>coolwarm</td> <td>diverging blue-gray-red, meant to avoid issues with 3D shading, color blindness, and ordering of colors <a class=\"footnote-reference\" href=\"#id8\" id=\"id3\">[3]</a>\n</td> </tr> <tr class=\"row-even\">\n<td>CMRmap</td> <td>“Default colormaps on color images often reproduce to confusing grayscale images. The proposed colormap maintains an aesthetically pleasing color image that automatically reproduces to a monotonic grayscale with discrete, quantifiable saturation levels.” <a class=\"footnote-reference\" href=\"#id9\" id=\"id4\">[4]</a>\n</td> </tr> <tr class=\"row-odd\">\n<td>cubehelix</td> <td>Unlike most other color schemes cubehelix was designed by D.A. Green to be monotonically increasing in terms of perceived brightness. Also, when printed on a black and white postscript printer, the scheme results in a greyscale with monotonically increasing brightness. This color scheme is named cubehelix because the r,g,b values produced can be visualised as a squashed helix around the diagonal in the r,g,b color cube.</td> </tr> <tr class=\"row-even\">\n<td>gnuplot</td> <td>gnuplot’s traditional pm3d scheme (black-blue-red-yellow)</td> </tr> <tr class=\"row-odd\">\n<td>gnuplot2</td> <td>sequential color printable as gray (black-blue-violet-yellow-white)</td> </tr> <tr class=\"row-even\">\n<td>ocean</td> <td>green-blue-white</td> </tr> <tr class=\"row-odd\">\n<td>rainbow</td> <td>spectral purple-blue-green-yellow-orange-red colormap with diverging luminance</td> </tr> <tr class=\"row-even\">\n<td>seismic</td> <td>diverging blue-white-red</td> </tr> <tr class=\"row-odd\">\n<td>nipy_spectral</td> <td>black-purple-blue-green-yellow-red-white spectrum, originally from the Neuroimaging in Python project</td> </tr> <tr class=\"row-even\">\n<td>terrain</td> <td>mapmaker’s colors, blue-green-yellow-brown-white, originally from IGOR Pro</td> </tr> </tbody> </table> </div>\n</blockquote> <p>The following colormaps are redundant and may be removed in future versions. It’s recommended to use the names in the descriptions instead, which produce identical output:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"86%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Colormap</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>gist_gray</td> <td>identical to <em>gray</em>\n</td> </tr> <tr class=\"row-odd\">\n<td>gist_yarg</td> <td>identical to <em>gray_r</em>\n</td> </tr> <tr class=\"row-even\">\n<td>binary</td> <td>identical to <em>gray_r</em>\n</td> </tr> <tr class=\"row-odd\">\n<td>spectral</td> <td>identical to <em>nipy_spectral</em> <a class=\"footnote-reference\" href=\"#id10\" id=\"id5\">[5]</a>\n</td> </tr> </tbody> </table> </div>\n</blockquote> <h4 class=\"rubric\">Footnotes</h4> <table class=\"docutils footnote\" frame=\"void\" id=\"id6\" rules=\"none\"> <colgroup>\n<col class=\"label\">\n<col>\n</colgroup> <tbody valign=\"top\"> <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td>\n<td>Rainbow colormaps, <code>jet</code> in particular, are considered a poor choice for scientific visualization by many researchers: <a class=\"reference external\" href=\"http://www.jwave.vt.edu/%7Erkriz/Projects/create_color_table/color_07.pdf\">Rainbow Color Map (Still) Considered Harmful</a>\n</td>\n</tr> </tbody> </table> <table class=\"docutils footnote\" frame=\"void\" id=\"id7\" rules=\"none\"> <colgroup>\n<col class=\"label\">\n<col>\n</colgroup> <tbody valign=\"top\"> <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[2]</a></td>\n<td>Resembles “BkBlAqGrYeOrReViWh200” from NCAR Command Language. See <a class=\"reference external\" href=\"http://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml\">Color Table Gallery</a>\n</td>\n</tr> </tbody> </table> <table class=\"docutils footnote\" frame=\"void\" id=\"id8\" rules=\"none\"> <colgroup>\n<col class=\"label\">\n<col>\n</colgroup> <tbody valign=\"top\"> <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id3\">[3]</a></td>\n<td>See <a class=\"reference external\" href=\"http://www.cs.unm.edu/~kmorel/documents/ColorMaps/\">Diverging Color Maps for Scientific Visualization</a> by Kenneth Moreland.</td>\n</tr> </tbody> </table> <table class=\"docutils footnote\" frame=\"void\" id=\"id9\" rules=\"none\"> <colgroup>\n<col class=\"label\">\n<col>\n</colgroup> <tbody valign=\"top\"> <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id4\">[4]</a></td>\n<td>See <a class=\"reference external\" href=\"http://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m\">A Color Map for Effective Black-and-White Rendering of Color-Scale Images</a> by Carey Rappaport</td>\n</tr> </tbody> </table> <table class=\"docutils footnote\" frame=\"void\" id=\"id10\" rules=\"none\"> <colgroup>\n<col class=\"label\">\n<col>\n</colgroup> <tbody valign=\"top\"> <tr>\n<td class=\"label\"><a class=\"fn-backref\" href=\"#id5\">[5]</a></td>\n<td>Changed to distinguish from ColorBrewer’s <em>Spectral</em> map. <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.spectral\" title=\"matplotlib.pyplot.spectral\"><code>spectral()</code></a> still works, but <code>set_cmap('nipy_spectral')</code> is recommended for clarity.</td>\n</tr> </tbody> </table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/pyplot_summary.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/pyplot_summary.html</a>\n  </p>\n</div>\n","matplotlib_configuration_api":"<h1 id=\"the-top-level-matplotlib-module\">The top level matplotlib module</h1> <dl class=\"function\"> <dt id=\"matplotlib.use\"><code>matplotlib.use(arg, warn=True, force=False)</code></dt> <dd>\n<p>Set the matplotlib backend to one of the known backends.</p> <p>The argument is case-insensitive. <em>warn</em> specifies whether a warning should be issued if a backend has already been set up. <em>force</em> is an <strong>experimental</strong> flag that tells matplotlib to attempt to initialize a new backend by reloading the backend module.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function must be called <em>before</em> importing pyplot for the first time; or, if you are not using pyplot, it must be called before importing matplotlib.backends. If warn is True, a warning is issued if you try and call this after pylab or pyplot have been loaded. In certain black magic use cases, e.g. <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.switch_backend\" title=\"matplotlib.pyplot.switch_backend\"><code>pyplot.switch_backend()</code></a>, we are doing the reloading necessary to make the backend switch work (in some cases, e.g., pure image backends) so one can set warn=False to suppress the warnings.</p> </div> <p>To find out which backend is currently set, see <a class=\"reference internal\" href=\"#matplotlib.get_backend\" title=\"matplotlib.get_backend\"><code>matplotlib.get_backend()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.get_backend\"><code>matplotlib.get_backend()</code></dt> <dd>\n<p>Return the name of the current backend.</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></dt> <dd>\n<p>An instance of <a class=\"reference internal\" href=\"#matplotlib.RcParams\" title=\"matplotlib.RcParams\"><code>RcParams</code></a> for handling default matplotlib values.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.rc\"><code>matplotlib.rc(group, **kwargs)</code></dt> <dd>\n<p>Set the current rc params. Group is the grouping for the rc, e.g., for <code>lines.linewidth</code> the group is <code>lines</code>, for <code>axes.facecolor</code>, the group is <code>axes</code>, and so on. Group may also be a list or tuple of group names, e.g., (<em>xtick</em>, <em>ytick</em>). <em>kwargs</em> is a dictionary attribute name/value pairs, e.g.,:</p> <pre data-language=\"python\">rc('lines', linewidth=2, color='r')\n</pre> <p>sets the current rc params and is equivalent to:</p> <pre data-language=\"python\">rcParams['lines.linewidth'] = 2\nrcParams['lines.color'] = 'r'\n</pre> <p>The following aliases are available to save typing for interactive users:</p> <table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Alias</th> <th class=\"head\">Property</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘lw’</td> <td>‘linewidth’</td> </tr> <tr class=\"row-odd\">\n<td>‘ls’</td> <td>‘linestyle’</td> </tr> <tr class=\"row-even\">\n<td>‘c’</td> <td>‘color’</td> </tr> <tr class=\"row-odd\">\n<td>‘fc’</td> <td>‘facecolor’</td> </tr> <tr class=\"row-even\">\n<td>‘ec’</td> <td>‘edgecolor’</td> </tr> <tr class=\"row-odd\">\n<td>‘mew’</td> <td>‘markeredgewidth’</td> </tr> <tr class=\"row-even\">\n<td>‘aa’</td> <td>‘antialiased’</td> </tr> </tbody> </table> <p>Thus you could abbreviate the above rc command as:</p> <pre data-language=\"python\">rc('lines', lw=2, c='r')\n</pre> <p>Note you can use python’s kwargs dictionary facility to store dictionaries of default parameters. e.g., you can customize the font rc as follows:</p> <pre data-language=\"python\">font = {'family' : 'monospace',\n        'weight' : 'bold',\n        'size'   : 'larger'}\n\nrc('font', **font)  # pass in the font dict as kwargs\n</pre> <p>This enables you to easily switch between several configurations. Use <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.rcdefaults\" title=\"matplotlib.pyplot.rcdefaults\"><code>rcdefaults()</code></a> to restore the default rc params after changes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.matplotlib_fname\"><code>matplotlib.matplotlib_fname()</code></dt> <dd>\n<p>Get the location of the config file.</p> <p>The file location is determined in the following order</p> <ul> <li>\n<code>$PWD/matplotlibrc</code> </li> <li>\n<code>$MATPLOTLIBRC/matplotlibrc</code> </li> <li>\n<code>$MPLCONFIGDIR/matplotlibrc</code> </li> <li>\n<p class=\"first\">On Linux,</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>$HOME/.matplotlib/matplotlibrc</code>, if it exists</li> <li>or <code>$XDG_CONFIG_HOME/matplotlib/matplotlibrc</code> (if $XDG_CONFIG_HOME is defined)</li> <li>or <code>$HOME/.config/matplotlib/matplotlibrc</code> (if $XDG_CONFIG_HOME is not defined)</li> </ul> </div>\n</blockquote> </li> <li>\n<p class=\"first\">On other platforms,</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>$HOME/.matplotlib/matplotlibrc</code> if <code>$HOME</code> is defined.</li> </ul> </div>\n</blockquote> </li> <li>Lastly, it looks in <code>$MATPLOTLIBDATA/matplotlibrc</code> for a system-defined copy. </li> </ul> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.RcParams\"><code>class matplotlib.RcParams(*args, **kwargs)</code></dt> <dd>\n<p>A dictionary object including validation</p> <p>validating functions are defined and associated with rc parameters in <code>matplotlib.rcsetup</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.rc_params\"><code>matplotlib.rc_params(fail_on_error=False)</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#matplotlib.RcParams\" title=\"matplotlib.RcParams\"><code>matplotlib.RcParams</code></a> instance from the default matplotlib rc file.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.rc_params_from_file\"><code>matplotlib.rc_params_from_file(fname, fail_on_error=False, use_default_template=True)</code></dt> <dd>\n<p>Return <a class=\"reference internal\" href=\"#matplotlib.RcParams\" title=\"matplotlib.RcParams\"><code>matplotlib.RcParams</code></a> from the contents of the given file.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>fname</strong> : str</p> <blockquote> <div>\n<p>Name of file parsed for matplotlib settings.</p> </div>\n</blockquote> <p><strong>fail_on_error</strong> : bool</p> <blockquote> <div>\n<p>If True, raise an error when the parser fails to convert a parameter.</p> </div>\n</blockquote> <p><strong>use_default_template</strong> : bool</p> <blockquote class=\"last\"> <div>\n<p>If True, initialize with default parameters before updating with those in the given file. If False, the configuration class only contains the parameters specified in the file. (Useful for updating dicts.)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.rc_context\"><code>class matplotlib.rc_context(rc=None, fname=None)</code></dt> <dd>\n<p>Return a context manager for managing rc settings.</p> <p>This allows one to do:</p> <pre data-language=\"python\">with mpl.rc_context(fname='screen.rc'):\n    plt.plot(x, a)\n    with mpl.rc_context(fname='print.rc'):\n        plt.plot(x, b)\n    plt.plot(x, c)\n</pre> <p>The ‘a’ vs ‘x’ and ‘c’ vs ‘x’ plots would have settings from ‘screen.rc’, while the ‘b’ vs ‘x’ plot would have settings from ‘print.rc’.</p> <p>A dictionary can also be passed to the context manager:</p> <pre data-language=\"python\">with mpl.rc_context(rc={'text.usetex': True}, fname='screen.rc'):\n    plt.plot(x, a)\n</pre> <p>The ‘rc’ dictionary takes precedence over the settings loaded from ‘fname’. Passing a dictionary only is also valid.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/matplotlib_configuration_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/matplotlib_configuration_api.html</a>\n  </p>\n</div>\n","afm_api":"<h1 id=\"afm-adobe-font-metrics-interface\">afm (Adobe Font Metrics interface)</h1>  <h2 id=\"matplotlib-afm\">matplotlib.afm</h2> <p id=\"module-matplotlib.afm\">This is a python interface to Adobe Font Metrics Files. Although a number of other python implementations exist, and may be more complete than this, it was decided not to go with them because they were either:</p> <blockquote> <div>\n<ol class=\"arabic simple\"> <li>copyrighted or used a non-BSD compatible license</li> <li>had too many dependencies and a free standing lib was needed</li> <li>Did more than needed and it was easier to write afresh rather than figure out how to get just what was needed.</li> </ol> </div>\n</blockquote> <p>It is pretty easy to use, and requires only built-in python libs:</p> <pre data-language=\"python\">&gt;&gt;&gt; from matplotlib import rcParams\n&gt;&gt;&gt; import os.path\n&gt;&gt;&gt; afm_fname = os.path.join(rcParams['datapath'],\n...                         'fonts', 'afm', 'ptmr8a.afm')\n&gt;&gt;&gt;\n&gt;&gt;&gt; from matplotlib.afm import AFM\n&gt;&gt;&gt; afm = AFM(open(afm_fname))\n&gt;&gt;&gt; afm.string_width_height('What the heck?')\n(6220.0, 694)\n&gt;&gt;&gt; afm.get_fontname()\n'Times-Roman'\n&gt;&gt;&gt; afm.get_kern_dist('A', 'f')\n0\n&gt;&gt;&gt; afm.get_kern_dist('A', 'y')\n-92.0\n&gt;&gt;&gt; afm.get_bbox_char('!')\n[130, -9, 238, 676]\n</pre> <dl class=\"class\"> <dt id=\"matplotlib.afm.AFM\"><code>class matplotlib.afm.AFM(fh)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Parse the AFM file in file object <em>fh</em></p> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_angle\"><code>get_angle()</code></dt> <dd>\n<p>Return the fontangle as float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_bbox_char\"><code>get_bbox_char(c, isord=False)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_capheight\"><code>get_capheight()</code></dt> <dd>\n<p>Return the cap height as float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_familyname\"><code>get_familyname()</code></dt> <dd>\n<p>Return the font family name, e.g., ‘Times’</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_fontname\"><code>get_fontname()</code></dt> <dd>\n<p>Return the font name, e.g., ‘Times-Roman’</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_fullname\"><code>get_fullname()</code></dt> <dd>\n<p>Return the font full name, e.g., ‘Times-Roman’</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_height_char\"><code>get_height_char(c, isord=False)</code></dt> <dd>\n<p>Get the height of character <em>c</em> from the bounding box. This is the ink height (space is 0)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_horizontal_stem_width\"><code>get_horizontal_stem_width()</code></dt> <dd>\n<p>Return the standard horizontal stem width as float, or <em>None</em> if not specified in AFM file.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_kern_dist\"><code>get_kern_dist(c1, c2)</code></dt> <dd>\n<p>Return the kerning pair distance (possibly 0) for chars <em>c1</em> and <em>c2</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_kern_dist_from_name\"><code>get_kern_dist_from_name(name1, name2)</code></dt> <dd>\n<p>Return the kerning pair distance (possibly 0) for chars <em>name1</em> and <em>name2</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_name_char\"><code>get_name_char(c, isord=False)</code></dt> <dd>\n<p>Get the name of the character, i.e., ‘;’ is ‘semicolon’</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_str_bbox\"><code>get_str_bbox(s)</code></dt> <dd>\n<p>Return the string bounding box</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_str_bbox_and_descent\"><code>get_str_bbox_and_descent(s)</code></dt> <dd>\n<p>Return the string bounding box</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_underline_thickness\"><code>get_underline_thickness()</code></dt> <dd>\n<p>Return the underline thickness as float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_vertical_stem_width\"><code>get_vertical_stem_width()</code></dt> <dd>\n<p>Return the standard vertical stem width as float, or <em>None</em> if not specified in AFM file.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_weight\"><code>get_weight()</code></dt> <dd>\n<p>Return the font weight, e.g., ‘Bold’ or ‘Roman’</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_width_char\"><code>get_width_char(c, isord=False)</code></dt> <dd>\n<p>Get the width of the character from the character metric WX field</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_width_from_char_name\"><code>get_width_from_char_name(name)</code></dt> <dd>\n<p>Get the width of the character from a type1 character name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.get_xheight\"><code>get_xheight()</code></dt> <dd>\n<p>Return the xheight as float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.afm.AFM.string_width_height\"><code>string_width_height(s)</code></dt> <dd>\n<p>Return the string width (including kerning) and string height as a (<em>w</em>, <em>h</em>) tuple.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.afm.parse_afm\"><code>matplotlib.afm.parse_afm(fh)</code></dt> <dd>\n<p>Parse the Adobe Font Metics file in file handle <em>fh</em>. Return value is a (<em>dhead</em>, <em>dcmetrics</em>, <em>dkernpairs</em>, <em>dcomposite</em>) tuple where <em>dhead</em> is a <code>_parse_header()</code> dict, <em>dcmetrics</em> is a <code>_parse_composites()</code> dict, <em>dkernpairs</em> is a <code>_parse_kern_pairs()</code> dict (possibly {}), and <em>dcomposite</em> is a <code>_parse_composites()</code> dict (possibly {})</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/afm_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/afm_api.html</a>\n  </p>\n</div>\n","animation_api":"<h1 id=\"animation\">animation</h1>  <h2 id=\"matplotlib-animation\">matplotlib.animation</h2> <dl class=\"class\" id=\"module-matplotlib.animation\"> <dt id=\"matplotlib.animation.AVConvBase\"><code>class matplotlib.animation.AVConvBase</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.FFMpegBase\" title=\"matplotlib.animation.FFMpegBase\"><code>matplotlib.animation.FFMpegBase</code></a></p> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.AVConvBase.args_key\"><code>args_key = 'animation.avconv_args'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.AVConvBase.exec_key\"><code>exec_key = 'animation.avconv_path'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.AVConvFileWriter\"><code>class matplotlib.animation.AVConvFileWriter(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.AVConvBase\" title=\"matplotlib.animation.AVConvBase\"><code>matplotlib.animation.AVConvBase</code></a>, <a class=\"reference internal\" href=\"#matplotlib.animation.FFMpegFileWriter\" title=\"matplotlib.animation.FFMpegFileWriter\"><code>matplotlib.animation.FFMpegFileWriter</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.AVConvWriter\"><code>class matplotlib.animation.AVConvWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.AVConvBase\" title=\"matplotlib.animation.AVConvBase\"><code>matplotlib.animation.AVConvBase</code></a>, <a class=\"reference internal\" href=\"#matplotlib.animation.FFMpegWriter\" title=\"matplotlib.animation.FFMpegWriter\"><code>matplotlib.animation.FFMpegWriter</code></a></p> <p>Construct a new MovieWriter object.</p> <dl class=\"docutils\"> <dt>fps: int</dt> <dd>Framerate for movie.</dd> <dt>codec: string or None, optional</dt> <dd>The codec to use. If None (the default) the setting in the rcParam <code>animation.codec</code> is used.</dd> <dt>bitrate: int or None, optional</dt> <dd>The bitrate for the saved movie file, which is one way to control the output file size and quality. The default value is None, which uses the value stored in the rcParam <code>animation.bitrate</code>. A value of -1 implies that the bitrate should be determined automatically by the underlying utility.</dd> <dt>extra_args: list of strings or None</dt> <dd>A list of extra string arguments to be passed to the underlying movie utiltiy. The default is None, which passes the additional argurments in the ‘animation.extra_args’ rcParam.</dd> <dt>metadata: dict of string:string or None</dt> <dd>A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.Animation\"><code>class matplotlib.animation.Animation(fig, event_source=None, blit=False)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>This class wraps the creation of an animation using matplotlib. It is only a base class which should be subclassed to provide needed behavior.</p> <p><em>fig</em> is the figure object that is used to get draw, resize, and any other needed events.</p> <p><em>event_source</em> is a class that can run a callback when desired events are generated, as well as be stopped and started. Examples include timers (see <a class=\"reference internal\" href=\"#matplotlib.animation.TimedAnimation\" title=\"matplotlib.animation.TimedAnimation\"><code>TimedAnimation</code></a>) and file system notifications.</p> <p><em>blit</em> is a boolean that controls whether blitting is used to optimize drawing.</p> <dl class=\"method\"> <dt id=\"matplotlib.animation.Animation.new_frame_seq\"><code>new_frame_seq()</code></dt> <dd>\n<p>Creates a new sequence of frame information.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.Animation.new_saved_frame_seq\"><code>new_saved_frame_seq()</code></dt> <dd>\n<p>Creates a new sequence of saved/cached frame information.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.Animation.save\"><code>save(filename, writer=None, fps=None, dpi=None, codec=None, bitrate=None, extra_args=None, metadata=None, extra_anim=None, savefig_kwargs=None)</code></dt> <dd>\n<p>Saves a movie file by drawing every frame.</p> <p><em>filename</em> is the output filename, e.g., <code>mymovie.mp4</code></p> <p><em>writer</em> is either an instance of <a class=\"reference internal\" href=\"#matplotlib.animation.MovieWriter\" title=\"matplotlib.animation.MovieWriter\"><code>MovieWriter</code></a> or a string key that identifies a class to use, such as ‘ffmpeg’ or ‘mencoder’. If nothing is passed, the value of the rcparam <code>animation.writer</code> is used.</p> <p><em>fps</em> is the frames per second in the movie. Defaults to None, which will use the animation’s specified interval to set the frames per second.</p> <p><em>dpi</em> controls the dots per inch for the movie frames. This combined with the figure’s size in inches controls the size of the movie.</p> <p><em>codec</em> is the video codec to be used. Not all codecs are supported by a given <a class=\"reference internal\" href=\"#matplotlib.animation.MovieWriter\" title=\"matplotlib.animation.MovieWriter\"><code>MovieWriter</code></a>. If none is given, this defaults to the value specified by the rcparam <code>animation.codec</code>.</p> <p><em>bitrate</em> specifies the amount of bits used per second in the compressed movie, in kilobits per second. A higher number means a higher quality movie, but at the cost of increased file size. If no value is given, this defaults to the value given by the rcparam <code>animation.bitrate</code>.</p> <p><em>extra_args</em> is a list of extra string arguments to be passed to the underlying movie utiltiy. The default is None, which passes the additional argurments in the ‘animation.extra_args’ rcParam.</p> <p><em>metadata</em> is a dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.</p> <p><em>extra_anim</em> is a list of additional <a class=\"reference internal\" href=\"#matplotlib.animation.Animation\" title=\"matplotlib.animation.Animation\"><code>Animation</code></a> objects that should be included in the saved movie file. These need to be from the same <code>matplotlib.Figure</code> instance. Also, animation frames will just be simply combined, so there should be a 1:1 correspondence between the frames from the different animations.</p> <p><em>savefig_kwargs</em> is a dictionary containing keyword arguments to be passed on to the ‘savefig’ command which is called repeatedly to save the individual frames. This can be used to set tight bounding boxes, for example.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.Animation.to_html5_video\"><code>to_html5_video()</code></dt> <dd>\n<p>Returns animation as an HTML5 video tag.</p> <p>This saves the animation as an h264 video, encoded in base64 directly into the HTML5 video tag. This respects the rc parameters for the writer as well as the bitrate. This also makes use of the <code>interval</code> to control the speed, and uses the <code>repeat</code> paramter to decide whether to loop.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.ArtistAnimation\"><code>class matplotlib.animation.ArtistAnimation(fig, artists, *args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.TimedAnimation\" title=\"matplotlib.animation.TimedAnimation\"><code>matplotlib.animation.TimedAnimation</code></a></p> <p>Before calling this function, all plotting should have taken place and the relevant artists saved.</p> <p>frame_info is a list, with each list entry a collection of artists that represent what needs to be enabled on each frame. These will be disabled for other frames.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.FFMpegBase\"><code>class matplotlib.animation.FFMpegBase</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.FFMpegBase.args_key\"><code>args_key = 'animation.ffmpeg_args'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.FFMpegBase.exec_key\"><code>exec_key = 'animation.ffmpeg_path'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.FFMpegBase.output_args\"><code>output_args</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.FFMpegFileWriter\"><code>class matplotlib.animation.FFMpegFileWriter(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.FileMovieWriter\" title=\"matplotlib.animation.FileMovieWriter\"><code>matplotlib.animation.FileMovieWriter</code></a>, <a class=\"reference internal\" href=\"#matplotlib.animation.FFMpegBase\" title=\"matplotlib.animation.FFMpegBase\"><code>matplotlib.animation.FFMpegBase</code></a></p> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.FFMpegFileWriter.supported_formats\"><code>supported_formats = ['png', 'jpeg', 'ppm', 'tiff', 'sgi', 'bmp', 'pbm', 'raw', 'rgba']</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.FFMpegWriter\"><code>class matplotlib.animation.FFMpegWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.MovieWriter\" title=\"matplotlib.animation.MovieWriter\"><code>matplotlib.animation.MovieWriter</code></a>, <a class=\"reference internal\" href=\"#matplotlib.animation.FFMpegBase\" title=\"matplotlib.animation.FFMpegBase\"><code>matplotlib.animation.FFMpegBase</code></a></p> <p>Construct a new MovieWriter object.</p> <dl class=\"docutils\"> <dt>fps: int</dt> <dd>Framerate for movie.</dd> <dt>codec: string or None, optional</dt> <dd>The codec to use. If None (the default) the setting in the rcParam <code>animation.codec</code> is used.</dd> <dt>bitrate: int or None, optional</dt> <dd>The bitrate for the saved movie file, which is one way to control the output file size and quality. The default value is None, which uses the value stored in the rcParam <code>animation.bitrate</code>. A value of -1 implies that the bitrate should be determined automatically by the underlying utility.</dd> <dt>extra_args: list of strings or None</dt> <dd>A list of extra string arguments to be passed to the underlying movie utiltiy. The default is None, which passes the additional argurments in the ‘animation.extra_args’ rcParam.</dd> <dt>metadata: dict of string:string or None</dt> <dd>A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.FileMovieWriter\"><code>class matplotlib.animation.FileMovieWriter(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.MovieWriter\" title=\"matplotlib.animation.MovieWriter\"><code>matplotlib.animation.MovieWriter</code></a></p> <p><a class=\"reference internal\" href=\"#matplotlib.animation.MovieWriter\" title=\"matplotlib.animation.MovieWriter\"><code>MovieWriter</code></a> subclass that handles writing to a file.</p> <dl class=\"method\"> <dt id=\"matplotlib.animation.FileMovieWriter.cleanup\"><code>cleanup()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.FileMovieWriter.finish\"><code>finish()</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.FileMovieWriter.frame_format\"><code>frame_format</code></dt> <dd>\n<p>Format (png, jpeg, etc.) to use for saving the frames, which can be decided by the individual subclasses.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.FileMovieWriter.grab_frame\"><code>grab_frame(**savefig_kwargs)</code></dt> <dd>\n<p>Grab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the ‘savefig’ command that saves the figure.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.FileMovieWriter.setup\"><code>setup(fig, outfile, dpi, frame_prefix='_tmp', clear_temp=True)</code></dt> <dd>\n<p>Perform setup for writing the movie file.</p> <dl class=\"docutils\"> <dt>fig: <code>matplotlib.Figure</code> instance</dt> <dd>The figure object that contains the information for frames</dd> <dt>outfile: string</dt> <dd>The filename of the resulting movie file</dd> <dt>dpi: int</dt> <dd>The DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file.</dd> <dt>frame_prefix: string, optional</dt> <dd>The filename prefix to use for the temporary files. Defaults to ‘_tmp’</dd> <dt>clear_temp: bool</dt> <dd>Specifies whether the temporary files should be deleted after the movie is written. (Useful for debugging.) Defaults to True.</dd> </dl> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.FuncAnimation\"><code>class matplotlib.animation.FuncAnimation(fig, func, frames=None, init_func=None, fargs=None, save_count=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.TimedAnimation\" title=\"matplotlib.animation.TimedAnimation\"><code>matplotlib.animation.TimedAnimation</code></a></p> <p>Makes an animation by repeatedly calling a function <em>func</em>, passing in (optional) arguments in <em>fargs</em>.</p> <p><em>frames</em> can be a generator, an iterable, or a number of frames.</p> <p><em>init_func</em> is a function used to draw a clear frame. If not given, the results of drawing from the first item in the frames sequence will be used. This function will be called once before the first frame.</p> <p>If blit=True, <em>func</em> and <em>init_func</em> should return an iterable of drawables to clear.</p> <p><em>kwargs</em> include <em>repeat</em>, <em>repeat_delay</em>, and <em>interval</em>: <em>interval</em> draws a new frame every <em>interval</em> milliseconds. <em>repeat</em> controls whether the animation should repeat when the sequence of frames is completed. <em>repeat_delay</em> optionally adds a delay in milliseconds before repeating the animation.</p> <dl class=\"method\"> <dt id=\"matplotlib.animation.FuncAnimation.new_frame_seq\"><code>new_frame_seq()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.FuncAnimation.new_saved_frame_seq\"><code>new_saved_frame_seq()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.ImageMagickBase\"><code>class matplotlib.animation.ImageMagickBase</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.ImageMagickBase.args_key\"><code>args_key = 'animation.convert_args'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.ImageMagickBase.delay\"><code>delay</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.ImageMagickBase.exec_key\"><code>exec_key = 'animation.convert_path'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.ImageMagickBase.output_args\"><code>output_args</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.ImageMagickFileWriter\"><code>class matplotlib.animation.ImageMagickFileWriter(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.FileMovieWriter\" title=\"matplotlib.animation.FileMovieWriter\"><code>matplotlib.animation.FileMovieWriter</code></a>, <a class=\"reference internal\" href=\"#matplotlib.animation.ImageMagickBase\" title=\"matplotlib.animation.ImageMagickBase\"><code>matplotlib.animation.ImageMagickBase</code></a></p> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.ImageMagickFileWriter.supported_formats\"><code>supported_formats = ['png', 'jpeg', 'ppm', 'tiff', 'sgi', 'bmp', 'pbm', 'raw', 'rgba']</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.ImageMagickWriter\"><code>class matplotlib.animation.ImageMagickWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.MovieWriter\" title=\"matplotlib.animation.MovieWriter\"><code>matplotlib.animation.MovieWriter</code></a>, <a class=\"reference internal\" href=\"#matplotlib.animation.ImageMagickBase\" title=\"matplotlib.animation.ImageMagickBase\"><code>matplotlib.animation.ImageMagickBase</code></a></p> <p>Construct a new MovieWriter object.</p> <dl class=\"docutils\"> <dt>fps: int</dt> <dd>Framerate for movie.</dd> <dt>codec: string or None, optional</dt> <dd>The codec to use. If None (the default) the setting in the rcParam <code>animation.codec</code> is used.</dd> <dt>bitrate: int or None, optional</dt> <dd>The bitrate for the saved movie file, which is one way to control the output file size and quality. The default value is None, which uses the value stored in the rcParam <code>animation.bitrate</code>. A value of -1 implies that the bitrate should be determined automatically by the underlying utility.</dd> <dt>extra_args: list of strings or None</dt> <dd>A list of extra string arguments to be passed to the underlying movie utiltiy. The default is None, which passes the additional argurments in the ‘animation.extra_args’ rcParam.</dd> <dt>metadata: dict of string:string or None</dt> <dd>A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.MencoderBase\"><code>class matplotlib.animation.MencoderBase</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.MencoderBase.allowed_metadata\"><code>allowed_metadata = ['name', 'artist', 'genre', 'subject', 'copyright', 'srcform', 'comment']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.MencoderBase.args_key\"><code>args_key = 'animation.mencoder_args'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.MencoderBase.exec_key\"><code>exec_key = 'animation.mencoder_path'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.MencoderBase.output_args\"><code>output_args</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.MencoderFileWriter\"><code>class matplotlib.animation.MencoderFileWriter(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.FileMovieWriter\" title=\"matplotlib.animation.FileMovieWriter\"><code>matplotlib.animation.FileMovieWriter</code></a>, <a class=\"reference internal\" href=\"#matplotlib.animation.MencoderBase\" title=\"matplotlib.animation.MencoderBase\"><code>matplotlib.animation.MencoderBase</code></a></p> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.MencoderFileWriter.supported_formats\"><code>supported_formats = ['png', 'jpeg', 'tga', 'sgi']</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.MencoderWriter\"><code>class matplotlib.animation.MencoderWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.MovieWriter\" title=\"matplotlib.animation.MovieWriter\"><code>matplotlib.animation.MovieWriter</code></a>, <a class=\"reference internal\" href=\"#matplotlib.animation.MencoderBase\" title=\"matplotlib.animation.MencoderBase\"><code>matplotlib.animation.MencoderBase</code></a></p> <p>Construct a new MovieWriter object.</p> <dl class=\"docutils\"> <dt>fps: int</dt> <dd>Framerate for movie.</dd> <dt>codec: string or None, optional</dt> <dd>The codec to use. If None (the default) the setting in the rcParam <code>animation.codec</code> is used.</dd> <dt>bitrate: int or None, optional</dt> <dd>The bitrate for the saved movie file, which is one way to control the output file size and quality. The default value is None, which uses the value stored in the rcParam <code>animation.bitrate</code>. A value of -1 implies that the bitrate should be determined automatically by the underlying utility.</dd> <dt>extra_args: list of strings or None</dt> <dd>A list of extra string arguments to be passed to the underlying movie utiltiy. The default is None, which passes the additional argurments in the ‘animation.extra_args’ rcParam.</dd> <dt>metadata: dict of string:string or None</dt> <dd>A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.MovieWriter\"><code>class matplotlib.animation.MovieWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Base class for writing movies. Fundamentally, what a MovieWriter does is provide is a way to grab frames by calling grab_frame(). setup() is called to start the process and finish() is called afterwards. This class is set up to provide for writing movie frame data to a pipe. saving() is provided as a context manager to facilitate this process as:</p> <pre data-language=\"python\">with moviewriter.saving('myfile.mp4'):\n    # Iterate over frames\n    moviewriter.grab_frame()\n</pre> <p>The use of the context manager ensures that setup and cleanup are performed as necessary.</p> <dl class=\"docutils\"> <dt>frame_format: string</dt> <dd>The format used in writing frame data, defaults to ‘rgba’</dd> </dl> <p>Construct a new MovieWriter object.</p> <dl class=\"docutils\"> <dt>fps: int</dt> <dd>Framerate for movie.</dd> <dt>codec: string or None, optional</dt> <dd>The codec to use. If None (the default) the setting in the rcParam <code>animation.codec</code> is used.</dd> <dt>bitrate: int or None, optional</dt> <dd>The bitrate for the saved movie file, which is one way to control the output file size and quality. The default value is None, which uses the value stored in the rcParam <code>animation.bitrate</code>. A value of -1 implies that the bitrate should be determined automatically by the underlying utility.</dd> <dt>extra_args: list of strings or None</dt> <dd>A list of extra string arguments to be passed to the underlying movie utiltiy. The default is None, which passes the additional argurments in the ‘animation.extra_args’ rcParam.</dd> <dt>metadata: dict of string:string or None</dt> <dd>A dictionary of keys and values for metadata to include in the output file. Some keys that may be of use include: title, artist, genre, subject, copyright, srcform, comment.</dd> </dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.animation.MovieWriter.bin_path\"><code>classmethod bin_path()</code></dt> <dd>\n<p>Returns the binary path to the commandline tool used by a specific subclass. This is a class method so that the tool can be looked for before making a particular MovieWriter subclass available.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.MovieWriter.cleanup\"><code>cleanup()</code></dt> <dd>\n<p>Clean-up and collect the process used to write the movie file.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.MovieWriter.finish\"><code>finish()</code></dt> <dd>\n<p>Finish any processing for writing the movie.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.animation.MovieWriter.frame_size\"><code>frame_size</code></dt> <dd>\n<p>A tuple (width,height) in pixels of a movie frame.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.MovieWriter.grab_frame\"><code>grab_frame(**savefig_kwargs)</code></dt> <dd>\n<p>Grab the image information from the figure and save as a movie frame. All keyword arguments in savefig_kwargs are passed on to the ‘savefig’ command that saves the figure.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.animation.MovieWriter.isAvailable\"><code>classmethod isAvailable()</code></dt> <dd>\n<p>Check to see if a MovieWriter subclass is actually available by running the commandline tool.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.MovieWriter.saving\"><code>saving(*args)</code></dt> <dd>\n<p>Context manager to facilitate writing the movie file.</p> <p><code>*args</code> are any parameters that should be passed to <a class=\"reference internal\" href=\"#matplotlib.animation.MovieWriter.setup\" title=\"matplotlib.animation.MovieWriter.setup\"><code>setup</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.MovieWriter.setup\"><code>setup(fig, outfile, dpi, *args)</code></dt> <dd>\n<p>Perform setup for writing the movie file.</p> <dl class=\"docutils\"> <dt>fig: <code>matplotlib.Figure</code> instance</dt> <dd>The figure object that contains the information for frames</dd> <dt>outfile: string</dt> <dd>The filename of the resulting movie file</dd> <dt>dpi: int</dt> <dd>The DPI (or resolution) for the file. This controls the size in pixels of the resulting movie file.</dd> </dl> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.MovieWriterRegistry\"><code>class matplotlib.animation.MovieWriterRegistry</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"method\"> <dt id=\"matplotlib.animation.MovieWriterRegistry.is_available\"><code>is_available(name)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.MovieWriterRegistry.list\"><code>list()</code></dt> <dd>\n<p>Get a list of available MovieWriters.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.animation.MovieWriterRegistry.register\"><code>register(name)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.animation.TimedAnimation\"><code>class matplotlib.animation.TimedAnimation(fig, interval=200, repeat_delay=None, repeat=True, event_source=None, *args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.animation.Animation\" title=\"matplotlib.animation.Animation\"><code>matplotlib.animation.Animation</code></a></p> <p><a class=\"reference internal\" href=\"#matplotlib.animation.Animation\" title=\"matplotlib.animation.Animation\"><code>Animation</code></a> subclass that supports time-based animation, drawing a new frame every <em>interval</em> milliseconds.</p> <p><em>repeat</em> controls whether the animation should repeat when the sequence of frames is completed.</p> <p><em>repeat_delay</em> optionally adds a delay in milliseconds before repeating the animation.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/animation_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/animation_api.html</a>\n  </p>\n</div>\n","cm_api":"<h1 id=\"cm-colormap\">cm (colormap)</h1>  <h2 id=\"matplotlib-cm\">matplotlib.cm</h2> <p id=\"module-matplotlib.cm\">This module provides a large set of colormaps, functions for registering new colormaps and for getting a colormap by name, and a mixin class for adding color mapping functionality.</p> <dl class=\"class\"> <dt id=\"matplotlib.cm.ScalarMappable\"><code>class matplotlib.cm.ScalarMappable(norm=None, cmap=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>This is a mixin class to support scalar data to RGBA mapping. The ScalarMappable makes use of data normalization before returning RGBA colors from the given colormap.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>norm</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance</p> <blockquote> <div>\n<p>The normalizing object which scales data, typically into the interval <code>[0, 1]</code>. If <em>None</em>, <em>norm</em> defaults to a <em>colors.Normalize</em> object which initializes its scaling based on the first data processed.</p> </div>\n</blockquote> <p><strong>cmap</strong> : str or <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance</p> <blockquote class=\"last\"> <div>\n<p>The colormap used to map normalized data values to RGBA colors.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.cm.ScalarMappable.cmap\"><code>cmap = None</code></dt> <dd>\n<p>The Colormap instance of this ScalarMappable.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.cm.ScalarMappable.colorbar\"><code>colorbar = None</code></dt> <dd>\n<p>The last colorbar associated with this ScalarMappable. May be None.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.cm.ScalarMappable.norm\"><code>norm = None</code></dt> <dd>\n<p>The Normalization instance of this ScalarMappable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cm.ScalarMappable.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cm.get_cmap\"><code>matplotlib.cm.get_cmap(name=None, lut=None)</code></dt> <dd>\n<p>Get a colormap instance, defaulting to rc values if <em>name</em> is None.</p> <p>Colormaps added with <a class=\"reference internal\" href=\"#matplotlib.cm.register_cmap\" title=\"matplotlib.cm.register_cmap\"><code>register_cmap()</code></a> take precedence over built-in colormaps.</p> <p>If <em>name</em> is a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance, it will be returned.</p> <p>If <em>lut</em> is not None it must be an integer giving the number of entries desired in the lookup table, and <em>name</em> must be a standard mpl colormap name.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cm.register_cmap\"><code>matplotlib.cm.register_cmap(name=None, cmap=None, data=None, lut=None)</code></dt> <dd>\n<p>Add a colormap to the set recognized by <a class=\"reference internal\" href=\"#matplotlib.cm.get_cmap\" title=\"matplotlib.cm.get_cmap\"><code>get_cmap()</code></a>.</p> <p>It can be used in two ways:</p> <pre data-language=\"python\">register_cmap(name='swirly', cmap=swirly_cmap)\n\nregister_cmap(name='choppy', data=choppydata, lut=128)\n</pre> <p>In the first case, <em>cmap</em> must be a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance. The <em>name</em> is optional; if absent, the name will be the <code>name</code> attribute of the <em>cmap</em>.</p> <p>In the second case, the three arguments are passed to the <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.LinearSegmentedColormap\" title=\"matplotlib.colors.LinearSegmentedColormap\"><code>LinearSegmentedColormap</code></a> initializer, and the resulting colormap is registered.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cm.revcmap\"><code>matplotlib.cm.revcmap(data)</code></dt> <dd>\n<p>Can only handle specification <em>data</em> in dictionary format.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/cm_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/cm_api.html</a>\n  </p>\n</div>\n","dviread":"<h1 id=\"dviread\">dviread</h1>  <h2 id=\"matplotlib-dviread\">matplotlib.dviread</h2> <p id=\"module-matplotlib.dviread\">An experimental module for reading dvi files output by TeX. Several limitations make this not (currently) useful as a general-purpose dvi preprocessor, but it is currently used by the pdf backend for processing usetex text.</p> <p>Interface:</p> <pre data-language=\"python\">dvi = Dvi(filename, 72)\n# iterate over pages (but only one page is supported for now):\nfor page in dvi:\n    w, h, d = page.width, page.height, page.descent\n    for x,y,font,glyph,width in page.text:\n        fontname = font.texname\n        pointsize = font.size\n        ...\n    for x,y,height,width in page.boxes:\n        ...\n</pre> <dl class=\"class\"> <dt id=\"matplotlib.dviread.Dvi\"><code>class matplotlib.dviread.Dvi(filename, dpi)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A dvi (“device-independent”) file, as produced by TeX. The current implementation only reads the first page and does not even attempt to verify the postamble.</p> <p>Initialize the object. This takes the filename as input and opens the file; actually reading the file happens when iterating through the pages of the file.</p> <dl class=\"method\"> <dt id=\"matplotlib.dviread.Dvi.close\"><code>close()</code></dt> <dd>\n<p>Close the underlying file if it is open.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dviread.DviFont\"><code>class matplotlib.dviread.DviFont(scale, tfm, texname, vf)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Object that holds a font’s texname and size, supports comparison, and knows the widths of glyphs in the same units as the AFM file. There are also internal attributes (for use by dviread.py) that are <em>not</em> used for comparison.</p> <p>The size is in Adobe points (converted from TeX points).</p> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.DviFont.texname\"><code>texname</code></dt> <dd>\n<p>Name of the font as used internally by TeX and friends. This is usually very different from any external font names, and <code>dviread.PsfontsMap</code> can be used to find the external name of the font.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.DviFont.size\"><code>size</code></dt> <dd>\n<p>Size of the font in Adobe points, converted from the slightly smaller TeX points.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.DviFont.widths\"><code>widths</code></dt> <dd>\n<p>Widths of glyphs in glyph-space units, typically 1/1000ths of the point size.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt> <code>size</code>\n</dt> \n</dl> <dl class=\"attribute\"> <dt> <code>texname</code>\n</dt> \n</dl> <dl class=\"attribute\"> <dt> <code>widths</code>\n</dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dviread.Encoding\"><code>class matplotlib.dviread.Encoding(filename)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Parses a *.enc file referenced from a psfonts.map style file. The format this class understands is a very limited subset of PostScript.</p> <p>Usage (subject to change):</p> <pre data-language=\"python\">for name in Encoding(filename):\n    whatever(name)\n</pre> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.Encoding.encoding\"><code>encoding</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dviread.PsfontsMap\"><code>class matplotlib.dviread.PsfontsMap(filename)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A psfonts.map formatted file, mapping TeX fonts to PS fonts. Usage:</p> <pre data-language=\"python\">&gt;&gt;&gt; map = PsfontsMap(find_tex_file('pdftex.map'))\n&gt;&gt;&gt; entry = map['ptmbo8r']\n&gt;&gt;&gt; entry.texname\n'ptmbo8r'\n&gt;&gt;&gt; entry.psname\n'Times-Bold'\n&gt;&gt;&gt; entry.encoding\n'/usr/local/texlive/2008/texmf-dist/fonts/enc/dvips/base/8r.enc'\n&gt;&gt;&gt; entry.effects\n{'slant': 0.16700000000000001}\n&gt;&gt;&gt; entry.filename\n</pre> <p>For historical reasons, TeX knows many Type-1 fonts by different names than the outside world. (For one thing, the names have to fit in eight characters.) Also, TeX’s native fonts are not Type-1 but Metafont, which is nontrivial to convert to PostScript except as a bitmap. While high-quality conversions to Type-1 format exist and are shipped with modern TeX distributions, we need to know which Type-1 fonts are the counterparts of which native fonts. For these reasons a mapping is needed from internal font names to font file names.</p> <p>A texmf tree typically includes mapping files called e.g. psfonts.map, pdftex.map, dvipdfm.map. psfonts.map is used by dvips, pdftex.map by pdfTeX, and dvipdfm.map by dvipdfm. psfonts.map might avoid embedding the 35 PostScript fonts (i.e., have no filename for them, as in the Times-Bold example above), while the pdf-related files perhaps only avoid the “Base 14” pdf fonts. But the user may have configured these files differently.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dviread.Tfm\"><code>class matplotlib.dviread.Tfm(filename)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A TeX Font Metric file. This implementation covers only the bare minimum needed by the Dvi class.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.Tfm.checksum\"><code>checksum</code></dt> <dd>\n<p>Used for verifying against the dvi file.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.Tfm.design_size\"><code>design_size</code></dt> <dd>\n<p>Design size of the font (in what units?)</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.Tfm.width\"><code>width</code></dt> <dd>\n<p>Width of each character, needs to be scaled by the factor specified in the dvi file. This is a dict because indexing may not start from 0.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.Tfm.height\"><code>height</code></dt> <dd>\n<p>Height of each character.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.dviread.Tfm.depth\"><code>depth</code></dt> <dd>\n<p>Depth of each character.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt> <code>checksum</code>\n</dt> \n</dl> <dl class=\"attribute\"> <dt> <code>depth</code>\n</dt> \n</dl> <dl class=\"attribute\"> <dt> <code>design_size</code>\n</dt> \n</dl> <dl class=\"attribute\"> <dt> <code>height</code>\n</dt> \n</dl> <dl class=\"attribute\"> <dt> <code>width</code>\n</dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dviread.Vf\"><code>class matplotlib.dviread.Vf(filename)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dviread.Dvi\" title=\"matplotlib.dviread.Dvi\"><code>matplotlib.dviread.Dvi</code></a></p> <p>A virtual font (*.vf file) containing subroutines for dvi files.</p> <p>Usage:</p> <pre data-language=\"python\">vf = Vf(filename)\nglyph = vf[code]\nglyph.text, glyph.boxes, glyph.width\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dviread.find_tex_file\"><code>matplotlib.dviread.find_tex_file(filename, format=None)</code></dt> <dd>\n<p>Call <strong class=\"program\">kpsewhich</strong> to find a file in the texmf tree. If <em>format</em> is not None, it is used as the value for the <code>--format</code> option.</p> <p>Apparently most existing TeX distributions on Unix-like systems use kpathsea. I hear MikTeX (a popular distribution on Windows) doesn’t use kpathsea, so what do we do? (TODO)</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference external\" href=\"http://www.tug.org/kpathsea/\">Kpathsea documentation</a></dt> <dd>The library that <strong class=\"program\">kpsewhich</strong> is part of.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dviread.ord\"><code>matplotlib.dviread.ord(x)</code></dt> \n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/dviread.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/dviread.html</a>\n  </p>\n</div>\n","font_manager_api":"<h1 id=\"font-manager\">font_manager</h1>  <h2 id=\"matplotlib-font-manager\">matplotlib.font_manager</h2> <p id=\"module-matplotlib.font_manager\">A module for finding, managing, and using fonts across platforms.</p> <p>This module provides a single <a class=\"reference internal\" href=\"#matplotlib.font_manager.FontManager\" title=\"matplotlib.font_manager.FontManager\"><code>FontManager</code></a> instance that can be shared across backends and platforms. The <a class=\"reference internal\" href=\"#matplotlib.font_manager.findfont\" title=\"matplotlib.font_manager.findfont\"><code>findfont()</code></a> function returns the best TrueType (TTF) font file in the local or system font path that matches the specified <a class=\"reference internal\" href=\"#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>FontProperties</code></a> instance. The <a class=\"reference internal\" href=\"#matplotlib.font_manager.FontManager\" title=\"matplotlib.font_manager.FontManager\"><code>FontManager</code></a> also handles Adobe Font Metrics (AFM) font files for use by the PostScript backend.</p> <p>The design is based on the <a class=\"reference external\" href=\"http://www.w3.org/TR/1998/REC-CSS2-19980512/\">W3C Cascading Style Sheet, Level 1 (CSS1) font specification</a>. Future versions may implement the Level 2 or 2.1 specifications.</p> <p>Experimental support is included for using <code>fontconfig</code> on Unix variant platforms (Linux, OS X, Solaris). To enable it, set the constant <code>USE_FONTCONFIG</code> in this file to <code>True</code>. Fontconfig has the advantage that it is the standard way to look up fonts on X11 platforms, so if a font is installed, it is much more likely to be found.</p> <dl class=\"class\"> <dt id=\"matplotlib.font_manager.FontEntry\"><code>class matplotlib.font_manager.FontEntry(fname='', name='', style='normal', variant='normal', weight='normal', stretch='normal', size='medium')</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A class for storing Font properties. It is used when populating the font lookup dictionary.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.font_manager.FontManager\"><code>class matplotlib.font_manager.FontManager(size=None, weight='normal')</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>On import, the <a class=\"reference internal\" href=\"#matplotlib.font_manager.FontManager\" title=\"matplotlib.font_manager.FontManager\"><code>FontManager</code></a> singleton instance creates a list of TrueType fonts based on the font properties: name, style, variant, weight, stretch, and size. The <a class=\"reference internal\" href=\"#matplotlib.font_manager.findfont\" title=\"matplotlib.font_manager.findfont\"><code>findfont()</code></a> method does a nearest neighbor search to find the font that most closely matches the specification. If no good enough match is found, a default font is returned.</p> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.findfont\"><code>findfont(prop, fontext='ttf', directory=None, fallback_to_default=True, rebuild_if_missing=True)</code></dt> <dd>\n<p>Search the font list for the font that most closely matches the <a class=\"reference internal\" href=\"#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>FontProperties</code></a> <em>prop</em>.</p> <p><a class=\"reference internal\" href=\"#matplotlib.font_manager.findfont\" title=\"matplotlib.font_manager.findfont\"><code>findfont()</code></a> performs a nearest neighbor search. Each font is given a similarity score to the target font properties. The first font with the highest score is returned. If no matches below a certain threshold are found, the default font (usually Vera Sans) is returned.</p> <p><code>directory</code>, is specified, will only return fonts from the given directory (or subdirectory of that directory).</p> <p>The result is cached, so subsequent lookups don’t have to perform the O(n) nearest neighbor search.</p> <p>If <code>fallback_to_default</code> is True, will fallback to the default font family (usually “Bitstream Vera Sans” or “Helvetica”) if the first lookup hard-fails.</p> <p>See the <a class=\"reference external\" href=\"http://www.w3.org/TR/1998/REC-CSS2-19980512/\">W3C Cascading Style Sheet, Level 1</a> documentation for a description of the font finding algorithm.</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.font_manager.FontManager.get_default_size\"><code>static get_default_size()</code></dt> <dd>\n<p>Return the default font size.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.get_default_weight\"><code>get_default_weight()</code></dt> <dd>\n<p>Return the default font weight.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.score_family\"><code>score_family(families, family2)</code></dt> <dd>\n<p>Returns a match score between the list of font families in <em>families</em> and the font family name <em>family2</em>.</p> <p>An exact match at the head of the list returns 0.0.</p> <p>A match further down the list will return between 0 and 1.</p> <p>No match will return 1.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.score_size\"><code>score_size(size1, size2)</code></dt> <dd>\n<p>Returns a match score between <em>size1</em> and <em>size2</em>.</p> <p>If <em>size2</em> (the size specified in the font file) is ‘scalable’, this function always returns 0.0, since any font size can be generated.</p> <p>Otherwise, the result is the absolute distance between <em>size1</em> and <em>size2</em>, normalized so that the usual range of font sizes (6pt - 72pt) will lie between 0.0 and 1.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.score_stretch\"><code>score_stretch(stretch1, stretch2)</code></dt> <dd>\n<p>Returns a match score between <em>stretch1</em> and <em>stretch2</em>.</p> <p>The result is the absolute value of the difference between the CSS numeric values of <em>stretch1</em> and <em>stretch2</em>, normalized between 0.0 and 1.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.score_style\"><code>score_style(style1, style2)</code></dt> <dd>\n<p>Returns a match score between <em>style1</em> and <em>style2</em>.</p> <p>An exact match returns 0.0.</p> <p>A match between ‘italic’ and ‘oblique’ returns 0.1.</p> <p>No match returns 1.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.score_variant\"><code>score_variant(variant1, variant2)</code></dt> <dd>\n<p>Returns a match score between <em>variant1</em> and <em>variant2</em>.</p> <p>An exact match returns 0.0, otherwise 1.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.score_weight\"><code>score_weight(weight1, weight2)</code></dt> <dd>\n<p>Returns a match score between <em>weight1</em> and <em>weight2</em>.</p> <p>The result is the absolute value of the difference between the CSS numeric values of <em>weight1</em> and <em>weight2</em>, normalized between 0.0 and 1.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.set_default_weight\"><code>set_default_weight(weight)</code></dt> <dd>\n<p>Set the default font weight. The initial value is ‘normal’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontManager.update_fonts\"><code>update_fonts(filenames)</code></dt> <dd>\n<p>Update the font dictionary with new font files. Currently not implemented.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.font_manager.FontProperties\"><code>class matplotlib.font_manager.FontProperties(family=None, style=None, variant=None, weight=None, stretch=None, size=None, fname=None, _init=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A class for storing and manipulating font properties.</p> <p>The font properties are those described in the <a class=\"reference external\" href=\"http://www.w3.org/TR/1998/REC-CSS2-19980512/\">W3C Cascading Style Sheet, Level 1</a> font specification. The six properties are:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>family: A list of font names in decreasing order of priority. The items may include a generic font family name, either ‘serif’, ‘sans-serif’, ‘cursive’, ‘fantasy’, or ‘monospace’. In that case, the actual font to be used will be looked up from the associated rcParam in <code>matplotlibrc</code>.</li> <li>style: Either ‘normal’, ‘italic’ or ‘oblique’.</li> <li>variant: Either ‘normal’ or ‘small-caps’.</li> <li>stretch: A numeric value in the range 0-1000 or one of ‘ultra-condensed’, ‘extra-condensed’, ‘condensed’, ‘semi-condensed’, ‘normal’, ‘semi-expanded’, ‘expanded’, ‘extra-expanded’ or ‘ultra-expanded’</li> <li>weight: A numeric value in the range 0-1000 or one of ‘ultralight’, ‘light’, ‘normal’, ‘regular’, ‘book’, ‘medium’, ‘roman’, ‘semibold’, ‘demibold’, ‘demi’, ‘bold’, ‘heavy’, ‘extra bold’, ‘black’</li> <li>size: Either an relative value of ‘xx-small’, ‘x-small’, ‘small’, ‘medium’, ‘large’, ‘x-large’, ‘xx-large’ or an absolute font size, e.g., 12</li> </ul> </div>\n</blockquote> <p>The default font property for TrueType fonts (as specified in the default <code>matplotlibrc</code> file) is:</p> <pre data-language=\"python\">sans-serif, normal, normal, normal, normal, scalable.\n</pre> <p>Alternatively, a font may be specified using an absolute path to a .ttf file, by using the <em>fname</em> kwarg.</p> <p>The preferred usage of font sizes is to use the relative values, e.g., ‘large’, instead of absolute font sizes, e.g., 12. This approach allows all text sizes to be made larger or smaller based on the font manager’s default font size.</p> <p>This class will also accept a <a class=\"reference external\" href=\"http://www.fontconfig.org/\">fontconfig</a> pattern, if it is the only argument provided. See the documentation on <a class=\"reference external\" href=\"http://www.fontconfig.org/fontconfig-user.html\">fontconfig patterns</a>. This support does not require fontconfig to be installed. We are merely borrowing its pattern syntax for use here.</p> <p>Note that matplotlib’s internal font manager and fontconfig use a different algorithm to lookup fonts, so the results of the same pattern may be different in matplotlib than in other applications that use fontconfig.</p> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.copy\"><code>copy()</code></dt> <dd>\n<p>Return a deep copy of self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_family\"><code>get_family()</code></dt> <dd>\n<p>Return a list of font names that comprise the font family.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_file\"><code>get_file()</code></dt> <dd>\n<p>Return the filename of the associated font.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_fontconfig_pattern\"><code>get_fontconfig_pattern()</code></dt> <dd>\n<p>Get a fontconfig pattern suitable for looking up the font as specified with fontconfig’s <code>fc-match</code> utility.</p> <p>See the documentation on <a class=\"reference external\" href=\"http://www.fontconfig.org/fontconfig-user.html\">fontconfig patterns</a>.</p> <p>This support does not require fontconfig to be installed or support for it to be enabled. We are merely borrowing its pattern syntax for use here.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_name\"><code>get_name()</code></dt> <dd>\n<p>Return the name of the font that best matches the font properties.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_size\"><code>get_size()</code></dt> <dd>\n<p>Return the font size.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_size_in_points\"><code>get_size_in_points()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_slant\"><code>get_slant()</code></dt> <dd>\n<p>Return the font style. Values are: ‘normal’, ‘italic’ or ‘oblique’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_stretch\"><code>get_stretch()</code></dt> <dd>\n<p>Return the font stretch or width. Options are: ‘ultra-condensed’, ‘extra-condensed’, ‘condensed’, ‘semi-condensed’, ‘normal’, ‘semi-expanded’, ‘expanded’, ‘extra-expanded’, ‘ultra-expanded’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_style\"><code>get_style()</code></dt> <dd>\n<p>Return the font style. Values are: ‘normal’, ‘italic’ or ‘oblique’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_variant\"><code>get_variant()</code></dt> <dd>\n<p>Return the font variant. Values are: ‘normal’ or ‘small-caps’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.get_weight\"><code>get_weight()</code></dt> <dd>\n<p>Set the font weight. Options are: A numeric value in the range 0-1000 or one of ‘light’, ‘normal’, ‘regular’, ‘book’, ‘medium’, ‘roman’, ‘semibold’, ‘demibold’, ‘demi’, ‘bold’, ‘heavy’, ‘extra bold’, ‘black’</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_family\"><code>set_family(family)</code></dt> <dd>\n<p>Change the font family. May be either an alias (generic name is CSS parlance), such as: ‘serif’, ‘sans-serif’, ‘cursive’, ‘fantasy’, or ‘monospace’, a real font name or a list of real font names. Real font names are not supported when <code>text.usetex</code> is <code>True</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_file\"><code>set_file(file)</code></dt> <dd>\n<p>Set the filename of the fontfile to use. In this case, all other properties will be ignored.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_fontconfig_pattern\"><code>set_fontconfig_pattern(pattern)</code></dt> <dd>\n<p>Set the properties by parsing a fontconfig <em>pattern</em>.</p> <p>See the documentation on <a class=\"reference external\" href=\"http://www.fontconfig.org/fontconfig-user.html\">fontconfig patterns</a>.</p> <p>This support does not require fontconfig to be installed or support for it to be enabled. We are merely borrowing its pattern syntax for use here.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_name\"><code>set_name(family)</code></dt> <dd>\n<p>Change the font family. May be either an alias (generic name is CSS parlance), such as: ‘serif’, ‘sans-serif’, ‘cursive’, ‘fantasy’, or ‘monospace’, a real font name or a list of real font names. Real font names are not supported when <code>text.usetex</code> is <code>True</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_size\"><code>set_size(size)</code></dt> <dd>\n<p>Set the font size. Either an relative value of ‘xx-small’, ‘x-small’, ‘small’, ‘medium’, ‘large’, ‘x-large’, ‘xx-large’ or an absolute font size, e.g., 12.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_slant\"><code>set_slant(style)</code></dt> <dd>\n<p>Set the font style. Values are: ‘normal’, ‘italic’ or ‘oblique’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_stretch\"><code>set_stretch(stretch)</code></dt> <dd>\n<p>Set the font stretch or width. Options are: ‘ultra-condensed’, ‘extra-condensed’, ‘condensed’, ‘semi-condensed’, ‘normal’, ‘semi-expanded’, ‘expanded’, ‘extra-expanded’ or ‘ultra-expanded’, or a numeric value in the range 0-1000.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_style\"><code>set_style(style)</code></dt> <dd>\n<p>Set the font style. Values are: ‘normal’, ‘italic’ or ‘oblique’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_variant\"><code>set_variant(variant)</code></dt> <dd>\n<p>Set the font variant. Values are: ‘normal’ or ‘small-caps’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.FontProperties.set_weight\"><code>set_weight(weight)</code></dt> <dd>\n<p>Set the font weight. May be either a numeric value in the range 0-1000 or one of ‘ultralight’, ‘light’, ‘normal’, ‘regular’, ‘book’, ‘medium’, ‘roman’, ‘semibold’, ‘demibold’, ‘demi’, ‘bold’, ‘heavy’, ‘extra bold’, ‘black’</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.OSXInstalledFonts\"><code>matplotlib.font_manager.OSXInstalledFonts(directories=None, fontext='ttf')</code></dt> <dd>\n<p>Get list of font files on OS X - ignores font suffix by default.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.font_manager.TempCache\"><code>class matplotlib.font_manager.TempCache</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A class to store temporary caches that are (a) not saved to disk and (b) invalidated whenever certain font-related rcParams—namely the family lookup lists—are changed or the font cache is reloaded. This avoids the expensive linear search through all fonts every time a font is looked up.</p> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.TempCache.get\"><code>get(prop)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.font_manager.TempCache.invalidating_rcparams\"><code>invalidating_rcparams = ('font.serif', 'font.sans-serif', 'font.cursive', 'font.fantasy', 'font.monospace')</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.TempCache.make_rcparams_key\"><code>make_rcparams_key()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.font_manager.TempCache.set\"><code>set(prop, value)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.afmFontProperty\"><code>matplotlib.font_manager.afmFontProperty(fontpath, font)</code></dt> <dd>\n<p>A function for populating a <code>FontKey</code> instance by extracting information from the AFM font file.</p> <p><em>font</em> is a class:<code>AFM</code> instance.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.createFontList\"><code>matplotlib.font_manager.createFontList(fontfiles, fontext='ttf')</code></dt> <dd>\n<p>A function to create a font lookup list. The default is to create a list of TrueType fonts. An AFM font list can optionally be created.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.findSystemFonts\"><code>matplotlib.font_manager.findSystemFonts(fontpaths=None, fontext='ttf')</code></dt> <dd>\n<p>Search for fonts in the specified font paths. If no paths are given, will use a standard set of system paths, as well as the list of fonts tracked by fontconfig if fontconfig is installed and available. A list of TrueType fonts are returned by default with AFM fonts as an option.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.findfont\"><code>matplotlib.font_manager.findfont(prop, **kw)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.get_fontconfig_fonts\"><code>matplotlib.font_manager.get_fontconfig_fonts(fontext='ttf')</code></dt> <dd>\n<p>Grab a list of all the fonts that are being tracked by fontconfig by making a system call to <code>fc-list</code>. This is an easy way to grab all of the fonts the user wants to be made available to applications, without needing knowing where all of them reside.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.get_fontext_synonyms\"><code>matplotlib.font_manager.get_fontext_synonyms(fontext)</code></dt> <dd>\n<p>Return a list of file extensions extensions that are synonyms for the given file extension <em>fileext</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.is_opentype_cff_font\"><code>matplotlib.font_manager.is_opentype_cff_font(filename)</code></dt> <dd>\n<p>Returns True if the given font is a Postscript Compact Font Format Font embedded in an OpenType wrapper. Used by the PostScript and PDF backends that can not subset these fonts.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.list_fonts\"><code>matplotlib.font_manager.list_fonts(directory, extensions)</code></dt> <dd>\n<p>Return a list of all fonts matching any of the extensions, possibly upper-cased, found recursively under the directory.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.pickle_dump\"><code>matplotlib.font_manager.pickle_dump(data, filename)</code></dt> <dd>\n<p>Equivalent to pickle.dump(data, open(filename, ‘w’)) but closes the file to prevent filehandle leakage.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.pickle_load\"><code>matplotlib.font_manager.pickle_load(filename)</code></dt> <dd>\n<p>Equivalent to pickle.load(open(filename, ‘r’)) but closes the file to prevent filehandle leakage.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.ttfFontProperty\"><code>matplotlib.font_manager.ttfFontProperty(font)</code></dt> <dd>\n<p>A function for populating the <code>FontKey</code> by extracting information from the TrueType font file.</p> <p><em>font</em> is a <code>FT2Font</code> instance.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.ttfdict_to_fnames\"><code>matplotlib.font_manager.ttfdict_to_fnames(d)</code></dt> <dd>\n<p>flatten a ttfdict to all the filenames it contains</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.weight_as_number\"><code>matplotlib.font_manager.weight_as_number(weight)</code></dt> <dd>\n<p>Return the weight property as a numeric value. String values are converted to their corresponding numeric value.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.win32FontDirectory\"><code>matplotlib.font_manager.win32FontDirectory()</code></dt> <dd>\n<p>Return the user-specified font directory for Win32. This is looked up from the registry key:</p> <pre data-language=\"python\">\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Fonts\n</pre> <p>If the key is not found, $WINDIR/Fonts will be returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.font_manager.win32InstalledFonts\"><code>matplotlib.font_manager.win32InstalledFonts(directory=None, fontext='ttf')</code></dt> <dd>\n<p>Search for fonts in the specified font directory, or use the system directories if none given. A list of TrueType font filenames are returned by default, or AFM fonts if <em>fontext</em> == ‘afm’.</p> </dd>\n</dl>   <h2 id=\"matplotlib-fontconfig-pattern\">matplotlib.fontconfig_pattern</h2> <p id=\"module-matplotlib.fontconfig_pattern\">A module for parsing and generating fontconfig patterns.</p> <p>See the <a class=\"reference external\" href=\"http://www.fontconfig.org/fontconfig-user.html\">fontconfig pattern specification</a> for more information.</p> <dl class=\"class\"> <dt id=\"matplotlib.fontconfig_pattern.FontconfigPatternParser\"><code>class matplotlib.fontconfig_pattern.FontconfigPatternParser</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A simple pyparsing-based parser for fontconfig-style patterns.</p> <p>See the <a class=\"reference external\" href=\"http://www.fontconfig.org/fontconfig-user.html\">fontconfig pattern specification</a> for more information.</p> <dl class=\"method\"> <dt id=\"matplotlib.fontconfig_pattern.FontconfigPatternParser.parse\"><code>parse(pattern)</code></dt> <dd>\n<p>Parse the given fontconfig <em>pattern</em> and return a dictionary of key/value pairs useful for initializing a <code>font_manager.FontProperties</code> object.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.fontconfig_pattern.family_escape\"><code>matplotlib.fontconfig_pattern.family_escape()</code></dt> <dd>\n<p>Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.fontconfig_pattern.family_unescape\"><code>matplotlib.fontconfig_pattern.family_unescape()</code></dt> <dd>\n<p>Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.fontconfig_pattern.generate_fontconfig_pattern\"><code>matplotlib.fontconfig_pattern.generate_fontconfig_pattern(d)</code></dt> <dd>\n<p>Given a dictionary of key/value pairs, generates a fontconfig pattern string.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.fontconfig_pattern.value_escape\"><code>matplotlib.fontconfig_pattern.value_escape()</code></dt> <dd>\n<p>Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.fontconfig_pattern.value_unescape\"><code>matplotlib.fontconfig_pattern.value_unescape()</code></dt> <dd>\n<p>Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/font_manager_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/font_manager_api.html</a>\n  </p>\n</div>\n","gridspec_api":"<h1 id=\"gridspec\">gridspec</h1>  <h2 id=\"matplotlib-gridspec\">matplotlib.gridspec</h2> <p id=\"module-matplotlib.gridspec\"><a class=\"reference internal\" href=\"#module-matplotlib.gridspec\" title=\"matplotlib.gridspec\"><code>gridspec</code></a> is a module which specifies the location of the subplot in the figure.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><code>GridSpec</code></dt> <dd>specifies the geometry of the grid that a subplot will be placed. The number of rows and number of columns of the grid need to be set. Optionally, the subplot layout parameters (e.g., left, right, etc.) can be tuned.</dd> <dt><code>SubplotSpec</code></dt> <dd>specifies the location of the subplot in the given <em>GridSpec</em>.</dd> </dl> </div>\n</blockquote> <dl class=\"class\"> <dt id=\"matplotlib.gridspec.GridSpec\"><code>class matplotlib.gridspec.GridSpec(nrows, ncols, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None, width_ratios=None, height_ratios=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.gridspec.GridSpecBase\" title=\"matplotlib.gridspec.GridSpecBase\"><code>matplotlib.gridspec.GridSpecBase</code></a></p> <p>A class that specifies the geometry of the grid that a subplot will be placed. The location of grid is determined by similar way as the SubplotParams.</p> <p>The number of rows and number of columns of the grid need to be set. Optionally, the subplot layout parameters (e.g., left, right, etc.) can be tuned.</p> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpec.get_subplot_params\"><code>get_subplot_params(fig=None)</code></dt> <dd>\n<p>return a dictionary of subplot layout parameters. The default parameters are from rcParams unless a figure attribute is set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpec.locally_modified_subplot_params\"><code>locally_modified_subplot_params()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpec.tight_layout\"><code>tight_layout(fig, renderer=None, pad=1.08, h_pad=None, w_pad=None, rect=None)</code></dt> <dd>\n<p>Adjust subplot parameters to give specified padding.</p> <p>Parameters:</p> <dl class=\"docutils\"> <dt>pad <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding between the figure edge and the edges of subplots, as a fraction of the font-size.</dd> <dt>h_pad, w_pad <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding (height/width) between edges of adjacent subplots. Defaults to <code>pad_inches</code>.</dd> <dt>rect <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">if rect is given, it is interpreted as a rectangle</span>\n</dt> <dd>(left, bottom, right, top) in the normalized figure coordinate that the whole subplots area (including labels) will fit into. Default is (0, 0, 1, 1).</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpec.update\"><code>update(**kwargs)</code></dt> <dd>\n<p>Update the current values. If any kwarg is None, default to the current value, if set, otherwise to rc.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.gridspec.GridSpecBase\"><code>class matplotlib.gridspec.GridSpecBase(nrows, ncols, height_ratios=None, width_ratios=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A base class of GridSpec that specifies the geometry of the grid that a subplot will be placed.</p> <p>The number of rows and number of columns of the grid need to be set. Optionally, the ratio of heights and widths of rows and columns can be specified.</p> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecBase.get_geometry\"><code>get_geometry()</code></dt> <dd>\n<p>get the geometry of the grid, e.g., 2,3</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecBase.get_grid_positions\"><code>get_grid_positions(fig)</code></dt> <dd>\n<p>return lists of bottom and top position of rows, left and right positions of columns.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecBase.get_height_ratios\"><code>get_height_ratios()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecBase.get_subplot_params\"><code>get_subplot_params(fig=None)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecBase.get_width_ratios\"><code>get_width_ratios()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecBase.new_subplotspec\"><code>new_subplotspec(loc, rowspan=1, colspan=1)</code></dt> <dd>\n<p>create and return a SuplotSpec instance.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecBase.set_height_ratios\"><code>set_height_ratios(height_ratios)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecBase.set_width_ratios\"><code>set_width_ratios(width_ratios)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.gridspec.GridSpecFromSubplotSpec\"><code>class matplotlib.gridspec.GridSpecFromSubplotSpec(nrows, ncols, subplot_spec, wspace=None, hspace=None, height_ratios=None, width_ratios=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.gridspec.GridSpecBase\" title=\"matplotlib.gridspec.GridSpecBase\"><code>matplotlib.gridspec.GridSpecBase</code></a></p> <p>GridSpec whose subplot layout parameters are inherited from the location specified by a given SubplotSpec.</p> <p>The number of rows and number of columns of the grid need to be set. An instance of SubplotSpec is also needed to be set from which the layout parameters will be inherited. The wspace and hspace of the layout can be optionally specified or the default values (from the figure or rcParams) will be used.</p> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecFromSubplotSpec.get_subplot_params\"><code>get_subplot_params(fig=None)</code></dt> <dd>\n<p>return a dictionary of subplot layout parameters.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.GridSpecFromSubplotSpec.get_topmost_subplotspec\"><code>get_topmost_subplotspec()</code></dt> <dd>\n<p>get the topmost SubplotSpec instance associated with the subplot</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.gridspec.SubplotSpec\"><code>class matplotlib.gridspec.SubplotSpec(gridspec, num1, num2=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>specifies the location of the subplot in the given <em>GridSpec</em>.</p> <p>The subplot will occupy the num1-th cell of the given gridspec. If num2 is provided, the subplot will span between num1-th cell and num2-th cell.</p> <p>The index stars from 0.</p> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.SubplotSpec.get_geometry\"><code>get_geometry()</code></dt> <dd>\n<p>get the subplot geometry, e.g., 2,2,3. Unlike SuplorParams, index is 0-based</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.SubplotSpec.get_gridspec\"><code>get_gridspec()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.SubplotSpec.get_position\"><code>get_position(fig, return_all=False)</code></dt> <dd>\n<p>update the subplot position from fig.subplotpars</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.gridspec.SubplotSpec.get_topmost_subplotspec\"><code>get_topmost_subplotspec()</code></dt> <dd>\n<p>get the topmost SubplotSpec instance associated with the subplot</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/gridspec_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/gridspec_api.html</a>\n  </p>\n</div>\n","axis_api":"<h1 id=\"axis\">axis</h1>  <h2 id=\"matplotlib-axis\">matplotlib.axis</h2> <p id=\"module-matplotlib.axis\">Classes for the ticks and x and y axis</p> <dl class=\"class\"> <dt id=\"matplotlib.axis.Axis\"><code>class matplotlib.axis.Axis(axes, pickradius=15)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a></p> <p>Public attributes</p> <ul class=\"simple\"> <li>\n<code>axes.transData</code> - transform data coords to display coords</li> <li>\n<code>axes.transAxes</code> - transform axis coords to display coords</li> <li>\n<code>labelpad</code> - number of points between the axis and its label</li> </ul> <p>Init the axis with the parent Axes instance</p> <dl class=\"attribute\"> <dt id=\"matplotlib.axis.Axis.OFFSETTEXTPAD\"><code>OFFSETTEXTPAD = 3</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.axis_date\"><code>axis_date(tz=None)</code></dt> <dd>\n<p>Sets up x-axis ticks and labels that treat the x data as dates. <em>tz</em> is a <code>tzinfo</code> instance or a timezone string. This timezone is used to create date labels.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.cla\"><code>cla()</code></dt> <dd>\n<p>clear the current axis</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.convert_units\"><code>convert_units(x)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>Draw the axis lines, grid lines, tick lines and labels</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_children\"><code>get_children()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_data_interval\"><code>get_data_interval()</code></dt> <dd>\n<p>return the Interval instance for this axis data limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_gridlines\"><code>get_gridlines()</code></dt> <dd>\n<p>Return the grid lines as a list of Line2D instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_label\"><code>get_label()</code></dt> <dd>\n<p>Return the axis label as a Text instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_label_text\"><code>get_label_text()</code></dt> <dd>\n<p>Get the text of the label</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_major_formatter\"><code>get_major_formatter()</code></dt> <dd>\n<p>Get the formatter of the major ticker</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_major_locator\"><code>get_major_locator()</code></dt> <dd>\n<p>Get the locator of the major ticker</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_major_ticks\"><code>get_major_ticks(numticks=None)</code></dt> <dd>\n<p>get the tick instances; grow as necessary</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_majorticklabels\"><code>get_majorticklabels()</code></dt> <dd>\n<p>Return a list of Text instances for the major ticklabels</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_majorticklines\"><code>get_majorticklines()</code></dt> <dd>\n<p>Return the major tick lines as a list of Line2D instances</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_majorticklocs\"><code>get_majorticklocs()</code></dt> <dd>\n<p>Get the major tick locations in data coordinates as a numpy array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_minor_formatter\"><code>get_minor_formatter()</code></dt> <dd>\n<p>Get the formatter of the minor ticker</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_minor_locator\"><code>get_minor_locator()</code></dt> <dd>\n<p>Get the locator of the minor ticker</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_minor_ticks\"><code>get_minor_ticks(numticks=None)</code></dt> <dd>\n<p>get the minor tick instances; grow as necessary</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_minorticklabels\"><code>get_minorticklabels()</code></dt> <dd>\n<p>Return a list of Text instances for the minor ticklabels</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_minorticklines\"><code>get_minorticklines()</code></dt> <dd>\n<p>Return the minor tick lines as a list of Line2D instances</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_minorticklocs\"><code>get_minorticklocs()</code></dt> <dd>\n<p>Get the minor tick locations in data coordinates as a numpy array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_offset_text\"><code>get_offset_text()</code></dt> <dd>\n<p>Return the axis offsetText as a Text instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_pickradius\"><code>get_pickradius()</code></dt> <dd>\n<p>Return the depth of the axis used by the picker</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_scale\"><code>get_scale()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_smart_bounds\"><code>get_smart_bounds()</code></dt> <dd>\n<p>get whether the axis has smart bounds</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_ticklabel_extents\"><code>get_ticklabel_extents(renderer)</code></dt> <dd>\n<p>Get the extents of the tick labels on either side of the axes.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_ticklabels\"><code>get_ticklabels(minor=False, which=None)</code></dt> <dd>\n<p>Get the x tick labels as a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>minor</strong> : bool</p> <blockquote> <div>\n<p>If True return the minor ticklabels, else return the major ticklabels</p> </div>\n</blockquote> <p><strong>which</strong> : None, (‘minor’, ‘major’, ‘both’)</p> <blockquote> <div>\n<p>Overrides <code>minor</code>.</p> <p>Selects which ticklabels to return</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : list</p> <blockquote class=\"last\"> <div>\n<p>List of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_ticklines\"><code>get_ticklines(minor=False)</code></dt> <dd>\n<p>Return the tick lines as a list of Line2D instances</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_ticklocs\"><code>get_ticklocs(minor=False)</code></dt> <dd>\n<p>Get the tick locations in data coordinates as a numpy array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_tightbbox\"><code>get_tightbbox(renderer)</code></dt> <dd>\n<p>Return a bounding box that encloses the axis. It only accounts tick labels, axis label, and offsetText.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_transform\"><code>get_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_units\"><code>get_units()</code></dt> <dd>\n<p>return the units for axis</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.get_view_interval\"><code>get_view_interval()</code></dt> <dd>\n<p>return the Interval instance for this axis view limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.grid\"><code>grid(b=None, which='major', **kwargs)</code></dt> <dd>\n<p>Set the axis grid on or off; b is a boolean. Use <em>which</em> = ‘major’ | ‘minor’ | ‘both’ to set the grid for major or minor ticks.</p> <p>If <em>b</em> is <em>None</em> and len(kwargs)==0, toggle the grid state. If <em>kwargs</em> are supplied, it is assumed you want the grid on and <em>b</em> will be set to True.</p> <p><em>kwargs</em> are used to set the line properties of the grids, e.g.,</p> <blockquote> <div>xax.grid(color=’r’, linestyle=’-‘, linewidth=2)</div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.have_units\"><code>have_units()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.iter_ticks\"><code>iter_ticks()</code></dt> <dd>\n<p>Iterate through all of the major and minor ticks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.limit_range_for_scale\"><code>limit_range_for_scale(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.pan\"><code>pan(numsteps)</code></dt> <dd>\n<p>Pan <em>numsteps</em> (can be positive or negative)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.reset_ticks\"><code>reset_ticks()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_clip_path\"><code>set_clip_path(clippath, transform=None)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_data_interval\"><code>set_data_interval()</code></dt> <dd>\n<p>set the axis data limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_default_intervals\"><code>set_default_intervals()</code></dt> <dd>\n<p>set the default limits for the axis data and view interval if they are not mutated</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_label_coords\"><code>set_label_coords(x, y, transform=None)</code></dt> <dd>\n<p>Set the coordinates of the label. By default, the x coordinate of the y label is determined by the tick label bounding boxes, but this can lead to poor alignment of multiple ylabels if there are multiple axes. Ditto for the y coodinate of the x label.</p> <p>You can also specify the coordinate system of the label with the transform. If None, the default coordinate system will be the axes coordinate system (0,0) is (left,bottom), (0.5, 0.5) is middle, etc</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_label_text\"><code>set_label_text(label, fontdict=None, **kwargs)</code></dt> <dd>\n<p>Sets the text value of the axis label</p> <p>ACCEPTS: A string value for the label</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_major_formatter\"><code>set_major_formatter(formatter)</code></dt> <dd>\n<p>Set the formatter of the major ticker</p> <p>ACCEPTS: A <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>Formatter</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_major_locator\"><code>set_major_locator(locator)</code></dt> <dd>\n<p>Set the locator of the major ticker</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>Locator</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_minor_formatter\"><code>set_minor_formatter(formatter)</code></dt> <dd>\n<p>Set the formatter of the minor ticker</p> <p>ACCEPTS: A <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>Formatter</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_minor_locator\"><code>set_minor_locator(locator)</code></dt> <dd>\n<p>Set the locator of the minor ticker</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>Locator</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_pickradius\"><code>set_pickradius(pickradius)</code></dt> <dd>\n<p>Set the depth of the axis used by the picker</p> <p>ACCEPTS: a distance in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_smart_bounds\"><code>set_smart_bounds(value)</code></dt> <dd>\n<p>set the axis to have smart bounds</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_tick_params\"><code>set_tick_params(which='major', reset=False, **kw)</code></dt> <dd>\n<p>Set appearance parameters for ticks and ticklabels.</p> <p>For documentation of keyword arguments, see <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.tick_params\" title=\"matplotlib.axes.Axes.tick_params\"><code>matplotlib.axes.Axes.tick_params()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_ticklabels\"><code>set_ticklabels(ticklabels, *args, **kwargs)</code></dt> <dd>\n<p>Set the text values of the tick labels. Return a list of Text instances. Use <em>kwarg</em> <em>minor=True</em> to select minor ticks. All other kwargs are used to update the text object properties. As for get_ticklabels, label1 (left or bottom) is affected for a given tick only if its label1On attribute is True, and similarly for label2. The list of returned label text objects consists of all such label1 objects followed by all such label2 objects.</p> <p>The input <em>ticklabels</em> is assumed to match the set of tick locations, regardless of the state of label1On and label2On.</p> <p>ACCEPTS: sequence of strings or Text objects</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_ticks\"><code>set_ticks(ticks, minor=False)</code></dt> <dd>\n<p>Set the locations of the tick marks from sequence ticks</p> <p>ACCEPTS: sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_units\"><code>set_units(u)</code></dt> <dd>\n<p>set the units for axis</p> <p>ACCEPTS: a units tag</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.set_view_interval\"><code>set_view_interval(vmin, vmax, ignore=False)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.update_units\"><code>update_units(data)</code></dt> <dd>\n<p>introspect <em>data</em> for units converter and update the axis.converter instance if necessary. Return <em>True</em> if <em>data</em> is registered for unit conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Axis.zoom\"><code>zoom(direction)</code></dt> <dd>\n<p>Zoom in/out on axis; if <em>direction</em> is &gt;0 zoom in, else zoom out</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.axis.Tick\"><code>class matplotlib.axis.Tick(axes, loc, label, size=None, width=None, color=None, tickdir=None, pad=None, labelsize=None, labelcolor=None, zorder=None, gridOn=None, tick1On=True, tick2On=True, label1On=True, label2On=False, major=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a></p> <p>Abstract base class for the axis ticks, grid lines and labels</p> <p>1 refers to the bottom of the plot for xticks and the left for yticks 2 refers to the top of the plot for xticks and the right for yticks</p> <p>Publicly accessible attributes:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><code>tick1line</code></dt> <dd>a Line2D instance</dd> <dt><code>tick2line</code></dt> <dd>a Line2D instance</dd> <dt><code>gridline</code></dt> <dd>a Line2D instance</dd> <dt><code>label1</code></dt> <dd>a Text instance</dd> <dt><code>label2</code></dt> <dd>a Text instance</dd> <dt><code>gridOn</code></dt> <dd>a boolean which determines whether to draw the tickline</dd> <dt><code>tick1On</code></dt> <dd>a boolean which determines whether to draw the 1st tickline</dd> <dt><code>tick2On</code></dt> <dd>a boolean which determines whether to draw the 2nd tickline</dd> <dt><code>label1On</code></dt> <dd>a boolean which determines whether to draw tick label</dd> <dt><code>label2On</code></dt> <dd>a boolean which determines whether to draw tick label</dd> </dl> </div>\n</blockquote> <p>bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points</p> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.apply_tickdir\"><code>apply_tickdir(tickdir)</code></dt> <dd>\n<p>Calculate self._pad and self._tickmarkers</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the Tick marks.</p> <p>This function always returns false. It is more useful to test if the axis as a whole contains the mouse rather than the set of tick marks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.get_children\"><code>get_children()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.get_loc\"><code>get_loc()</code></dt> <dd>\n<p>Return the tick location (data coords) as a scalar</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.get_pad\"><code>get_pad()</code></dt> <dd>\n<p>Get the value of the tick label pad in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.get_pad_pixels\"><code>get_pad_pixels()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.get_view_interval\"><code>get_view_interval()</code></dt> <dd>\n<p>return the view Interval instance for the axis this tick is ticking</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.set_clip_path\"><code>set_clip_path(clippath, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the text of ticklabel</p> <p>ACCEPTS: str</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.set_label1\"><code>set_label1(s)</code></dt> <dd>\n<p>Set the text of ticklabel</p> <p>ACCEPTS: str</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.set_label2\"><code>set_label2(s)</code></dt> <dd>\n<p>Set the text of ticklabel2</p> <p>ACCEPTS: str</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.Tick.set_pad\"><code>set_pad(val)</code></dt> <dd>\n<p>Set the tick label pad in points</p> <p>ACCEPTS: float</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.axis.Ticker\"><code>class matplotlib.axis.Ticker</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"attribute\"> <dt id=\"matplotlib.axis.Ticker.formatter\"><code>formatter = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.axis.Ticker.locator\"><code>locator = None</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.axis.XAxis\"><code>class matplotlib.axis.XAxis(axes, pickradius=15)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>matplotlib.axis.Axis</code></a></p> <p>Init the axis with the parent Axes instance</p> <dl class=\"attribute\"> <dt id=\"matplotlib.axis.XAxis.axis_name\"><code>axis_name = 'x'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occured in the x axis.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.get_data_interval\"><code>get_data_interval()</code></dt> <dd>\n<p>return the Interval instance for this axis data limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.get_label_position\"><code>get_label_position()</code></dt> <dd>\n<p>Return the label position (top or bottom)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.get_minpos\"><code>get_minpos()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.get_text_heights\"><code>get_text_heights(renderer)</code></dt> <dd>\n<p>Returns the amount of space one should reserve for text above and below the axes. Returns a tuple (above, below)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.get_ticks_position\"><code>get_ticks_position()</code></dt> <dd>\n<p>Return the ticks position (top, bottom, default or unknown)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.get_view_interval\"><code>get_view_interval()</code></dt> <dd>\n<p>return the Interval instance for this axis view limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.set_data_interval\"><code>set_data_interval(vmin, vmax, ignore=False)</code></dt> <dd>\n<p>set the axis data limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.set_default_intervals\"><code>set_default_intervals()</code></dt> <dd>\n<p>set the default limits for the axis interval if they are not mutated</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.set_label_position\"><code>set_label_position(position)</code></dt> <dd>\n<p>Set the label position (top or bottom)</p> <p>ACCEPTS: [ ‘top’ | ‘bottom’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.set_ticks_position\"><code>set_ticks_position(position)</code></dt> <dd>\n<p>Set the ticks position (top, bottom, both, default or none) both sets the ticks to appear on both positions, but does not change the tick labels. ‘default’ resets the tick positions to the default: ticks on both positions, labels at bottom. ‘none’ can be used if you don’t want any ticks. ‘none’ and ‘both’ affect only the ticks, not the labels.</p> <p>ACCEPTS: [ ‘top’ | ‘bottom’ | ‘both’ | ‘default’ | ‘none’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.set_view_interval\"><code>set_view_interval(vmin, vmax, ignore=False)</code></dt> <dd>\n<p>If <em>ignore</em> is <em>False</em>, the order of vmin, vmax does not matter; the original axis orientation will be preserved. In addition, the view limits can be expanded, but will not be reduced. This method is for mpl internal use; for normal use, see <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_xlim\" title=\"matplotlib.axes.Axes.set_xlim\"><code>set_xlim()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.tick_bottom\"><code>tick_bottom()</code></dt> <dd>\n<p>use ticks only on bottom</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XAxis.tick_top\"><code>tick_top()</code></dt> <dd>\n<p>use ticks only on top</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.axis.XTick\"><code>class matplotlib.axis.XTick(axes, loc, label, size=None, width=None, color=None, tickdir=None, pad=None, labelsize=None, labelcolor=None, zorder=None, gridOn=None, tick1On=True, tick2On=True, label1On=True, label2On=False, major=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.axis.Tick\" title=\"matplotlib.axis.Tick\"><code>matplotlib.axis.Tick</code></a></p> <p>Contains all the Artists needed to make an x tick - the tick line, the label text and the grid line</p> <p>bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points</p> <dl class=\"method\"> <dt id=\"matplotlib.axis.XTick.apply_tickdir\"><code>apply_tickdir(tickdir)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XTick.get_view_interval\"><code>get_view_interval()</code></dt> <dd>\n<p>return the Interval instance for this axis view limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.XTick.update_position\"><code>update_position(loc)</code></dt> <dd>\n<p>Set the location of tick in data coords with scalar <em>loc</em></p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.axis.YAxis\"><code>class matplotlib.axis.YAxis(axes, pickradius=15)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>matplotlib.axis.Axis</code></a></p> <p>Init the axis with the parent Axes instance</p> <dl class=\"attribute\"> <dt id=\"matplotlib.axis.YAxis.axis_name\"><code>axis_name = 'y'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the y axis.</p> <p>Returns <em>True</em> | <em>False</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.get_data_interval\"><code>get_data_interval()</code></dt> <dd>\n<p>return the Interval instance for this axis data limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.get_label_position\"><code>get_label_position()</code></dt> <dd>\n<p>Return the label position (left or right)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.get_minpos\"><code>get_minpos()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.get_text_widths\"><code>get_text_widths(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.get_ticks_position\"><code>get_ticks_position()</code></dt> <dd>\n<p>Return the ticks position (left, right, both or unknown)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.get_view_interval\"><code>get_view_interval()</code></dt> <dd>\n<p>return the Interval instance for this axis view limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.set_data_interval\"><code>set_data_interval(vmin, vmax, ignore=False)</code></dt> <dd>\n<p>set the axis data limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.set_default_intervals\"><code>set_default_intervals()</code></dt> <dd>\n<p>set the default limits for the axis interval if they are not mutated</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.set_label_position\"><code>set_label_position(position)</code></dt> <dd>\n<p>Set the label position (left or right)</p> <p>ACCEPTS: [ ‘left’ | ‘right’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.set_offset_position\"><code>set_offset_position(position)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.set_ticks_position\"><code>set_ticks_position(position)</code></dt> <dd>\n<p>Set the ticks position (left, right, both, default or none) ‘both’ sets the ticks to appear on both positions, but does not change the tick labels. ‘default’ resets the tick positions to the default: ticks on both positions, labels at left. ‘none’ can be used if you don’t want any ticks. ‘none’ and ‘both’ affect only the ticks, not the labels.</p> <p>ACCEPTS: [ ‘left’ | ‘right’ | ‘both’ | ‘default’ | ‘none’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.set_view_interval\"><code>set_view_interval(vmin, vmax, ignore=False)</code></dt> <dd>\n<p>If <em>ignore</em> is <em>False</em>, the order of vmin, vmax does not matter; the original axis orientation will be preserved. In addition, the view limits can be expanded, but will not be reduced. This method is for mpl internal use; for normal use, see <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_ylim\" title=\"matplotlib.axes.Axes.set_ylim\"><code>set_ylim()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.tick_left\"><code>tick_left()</code></dt> <dd>\n<p>use ticks only on left</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YAxis.tick_right\"><code>tick_right()</code></dt> <dd>\n<p>use ticks only on right</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.axis.YTick\"><code>class matplotlib.axis.YTick(axes, loc, label, size=None, width=None, color=None, tickdir=None, pad=None, labelsize=None, labelcolor=None, zorder=None, gridOn=None, tick1On=True, tick2On=True, label1On=True, label2On=False, major=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.axis.Tick\" title=\"matplotlib.axis.Tick\"><code>matplotlib.axis.Tick</code></a></p> <p>Contains all the Artists needed to make a Y tick - the tick line, the label text and the grid line</p> <p>bbox is the Bound2D bounding box in display coords of the Axes loc is the tick location in data coords size is the tick size in points</p> <dl class=\"method\"> <dt id=\"matplotlib.axis.YTick.apply_tickdir\"><code>apply_tickdir(tickdir)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YTick.get_view_interval\"><code>get_view_interval()</code></dt> <dd>\n<p>return the Interval instance for this axis view limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axis.YTick.update_position\"><code>update_position(loc)</code></dt> <dd>\n<p>Set the location of tick in data coords with scalar loc</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/axis_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/axis_api.html</a>\n  </p>\n</div>\n","image_api":"<h1 id=\"image\">image</h1>  <h2 id=\"matplotlib-image\">matplotlib.image</h2> <p id=\"module-matplotlib.image\">The image module supports basic image loading, rescaling and display operations.</p> <dl class=\"class\"> <dt id=\"matplotlib.image.AxesImage\"><code>class matplotlib.image.AxesImage(ax, cmap=None, norm=None, interpolation=None, origin=None, extent=None, filternorm=1, filterrad=4.0, resample=False, **kwargs)</code></dt> <dd>\n<p>Bases: <code>matplotlib.image._AxesImageBase</code></p> <p>interpolation and cmap default to their rc settings</p> <p>cmap is a colors.Colormap instance norm is a colors.Normalize instance to map luminance to 0-1</p> <p>extent is data axes (left, right, bottom, top) for making image plots registered with data plots. Default is to label the pixel centers with the zero-based row and column indices.</p> <p>Additional kwargs are matplotlib.artist properties</p> <dl class=\"method\"> <dt id=\"matplotlib.image.AxesImage.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.AxesImage.get_extent\"><code>get_extent()</code></dt> <dd>\n<p>Get the image extent: left, right, bottom, top</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.AxesImage.get_window_extent\"><code>get_window_extent(renderer=None)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.AxesImage.make_image\"><code>make_image(magnification=1.0)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.AxesImage.set_extent\"><code>set_extent(extent)</code></dt> <dd>\n<p>extent is data axes (left, right, bottom, top) for making image plots</p> <p>This updates ax.dataLim, and, if autoscaling, sets viewLim to tightly fit the image, regardless of dataLim. Autoscaling state is not changed, so following this with ax.autoscale_view will redo the autoscaling in accord with dataLim.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.image.BboxImage\"><code>class matplotlib.image.BboxImage(bbox, cmap=None, norm=None, interpolation=None, origin=None, filternorm=1, filterrad=4.0, resample=False, interp_at_native=True, **kwargs)</code></dt> <dd>\n<p>Bases: <code>matplotlib.image._AxesImageBase</code></p> <p>The Image class whose size is determined by the given bbox.</p> <p>cmap is a colors.Colormap instance norm is a colors.Normalize instance to map luminance to 0-1</p> <p>interp_at_native is a flag that determines whether or not interpolation should still be applied when the image is displayed at its native resolution. A common use case for this is when displaying an image for annotational purposes; it is treated similarly to Photoshop (interpolation is only used when displaying the image at non-native resolutions).</p> <p>kwargs are an optional list of Artist keyword args</p> <dl class=\"method\"> <dt id=\"matplotlib.image.BboxImage.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occured within the image.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.BboxImage.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.BboxImage.get_size\"><code>get_size()</code></dt> <dd>\n<p>Get the numrows, numcols of the input image</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.BboxImage.get_window_extent\"><code>get_window_extent(renderer=None)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.BboxImage.make_image\"><code>make_image(renderer, magnification=1.0)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.image.FigureImage\"><code>class matplotlib.image.FigureImage(fig, cmap=None, norm=None, offsetx=0, offsety=0, origin=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a>, <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a></p> <p>cmap is a colors.Colormap instance norm is a colors.Normalize instance to map luminance to 0-1</p> <p>kwargs are an optional list of Artist keyword args</p> <dl class=\"method\"> <dt id=\"matplotlib.image.FigureImage.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occured within the image.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.FigureImage.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.FigureImage.get_extent\"><code>get_extent()</code></dt> <dd>\n<p>Get the image extent: left, right, bottom, top</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.FigureImage.get_size\"><code>get_size()</code></dt> <dd>\n<p>Get the numrows, numcols of the input image</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.FigureImage.make_image\"><code>make_image(magnification=1.0)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.FigureImage.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Deprecated; use set_data for consistency with other image types.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.FigureImage.set_data\"><code>set_data(A)</code></dt> <dd>\n<p>Set the image array.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.FigureImage.write_png\"><code>write_png(fname)</code></dt> <dd>\n<p>Write the image to png file with fname</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.image.FigureImage.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.image.NonUniformImage\"><code>class matplotlib.image.NonUniformImage(ax, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.image.AxesImage\" title=\"matplotlib.image.AxesImage\"><code>matplotlib.image.AxesImage</code></a></p> <p>kwargs are identical to those for AxesImage, except that ‘interpolation’ defaults to ‘nearest’, and ‘bilinear’ is the only alternative.</p> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.get_extent\"><code>get_extent()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.make_image\"><code>make_image(magnification=1.0)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.set_array\"><code>set_array(*args)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.set_cmap\"><code>set_cmap(cmap)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.set_data\"><code>set_data(x, y, A)</code></dt> <dd>\n<p>Set the grid for the pixel centers, and the pixel values.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em> and <em>y</em> are 1-D ndarrays of lengths N and M, respectively,</dt> <dd>specifying pixel centers</dd> <dt>\n<em>A</em> is an (M,N) ndarray or masked array of values to be</dt> <dd>colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA array.</dd> </dl> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.set_filternorm\"><code>set_filternorm(s)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.set_filterrad\"><code>set_filterrad(s)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.set_interpolation\"><code>set_interpolation(s)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.NonUniformImage.set_norm\"><code>set_norm(norm)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.image.PcolorImage\"><code>class matplotlib.image.PcolorImage(ax, x=None, y=None, A=None, cmap=None, norm=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a>, <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a></p> <p>Make a pcolor-style plot with an irregular rectangular grid.</p> <p>This uses a variation of the original irregular image code, and it is used by pcolorfast for the corresponding grid type.</p> <p>cmap defaults to its rc setting</p> <p>cmap is a colors.Colormap instance norm is a colors.Normalize instance to map luminance to 0-1</p> <p>Additional kwargs are matplotlib.artist properties</p> <dl class=\"method\"> <dt id=\"matplotlib.image.PcolorImage.changed\"><code>changed()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.PcolorImage.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.PcolorImage.make_image\"><code>make_image(magnification=1.0)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.PcolorImage.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha value used for blending - not supported on all backends</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.PcolorImage.set_array\"><code>set_array(*args)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.image.PcolorImage.set_data\"><code>set_data(x, y, A)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.image.imread\"><code>matplotlib.image.imread(fname, format=None)</code></dt> <dd>\n<p>Read an image from a file into an array.</p> <p><em>fname</em> may be a string path, a valid URL, or a Python file-like object. If using a file object, it must be opened in binary mode.</p> <p>If <em>format</em> is provided, will try to read file of that type, otherwise the format is deduced from the filename. If nothing can be deduced, PNG is tried.</p> <p>Return value is a <code>numpy.array</code>. For grayscale images, the return array is MxN. For RGB images, the return value is MxNx3. For RGBA images the return value is MxNx4.</p> <p>matplotlib can only read PNGs natively, but if <a class=\"reference external\" href=\"http://www.pythonware.com/products/pil/\">PIL</a> is installed, it will use it to load the image and return an array (if possible) which can be used with <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>imshow()</code></a>. Note, URL strings may not be compatible with PIL. Check the PIL documentation for more information.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.image.imsave\"><code>matplotlib.image.imsave(fname, arr, vmin=None, vmax=None, cmap=None, format=None, origin=None, dpi=100)</code></dt> <dd>\n<p>Save an array as in image file.</p> <p>The output formats available depend on the backend being used.</p> <dl class=\"docutils\"> <dt>Arguments:</dt> <dd>\n<dl class=\"first last docutils\"> <dt>\n<em>fname</em>:</dt> <dd>A string containing a path to a filename, or a Python file-like object. If <em>format</em> is <em>None</em> and <em>fname</em> is a string, the output format is deduced from the extension of the filename.</dd> <dt>\n<em>arr</em>:</dt> <dd>An MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA) array.</dd> </dl> </dd> <dt>Keyword arguments:</dt> <dd>\n<dl class=\"first last docutils\"> <dt>\n<em>vmin</em>/<em>vmax</em>: [ None | scalar ]</dt> <dd>\n<em>vmin</em> and <em>vmax</em> set the color scaling for the image by fixing the values that map to the colormap color limits. If either <em>vmin</em> or <em>vmax</em> is None, that limit is determined from the <em>arr</em> min/max value.</dd> <dt>\n<em>cmap</em>:</dt> <dd>cmap is a colors.Colormap instance, e.g., cm.jet. If None, default to the rc image.cmap value.</dd> <dt>\n<em>format</em>:</dt> <dd>One of the file extensions supported by the active backend. Most backends support png, pdf, ps, eps and svg.</dd> <dt><em>origin</em></dt> <dd>[ ‘upper’ | ‘lower’ ] Indicates where the [0,0] index of the array is in the upper left or lower left corner of the axes. Defaults to the rc image.origin value.</dd> <dt><em>dpi</em></dt> <dd>The DPI to store in the metadata of the file. This does not affect the resolution of the output image.</dd> </dl> </dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.image.pil_to_array\"><code>matplotlib.image.pil_to_array(pilImage)</code></dt> <dd>\n<p>Load a PIL image and return it as a numpy array. For grayscale images, the return array is MxN. For RGB images, the return value is MxNx3. For RGBA images the return value is MxNx4</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.image.thumbnail\"><code>matplotlib.image.thumbnail(infile, thumbfile, scale=0.1, interpolation='bilinear', preview=False)</code></dt> <dd>\n<p>make a thumbnail of image in <em>infile</em> with output filename <em>thumbfile</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>infile</em> the image file – must be PNG or Pillow-readable if you</dt> <dd>have <a class=\"reference external\" href=\"http://python-pillow.github.io/\">Pillow</a> installed</dd> <dt><em>thumbfile</em></dt> <dd>the thumbnail filename</dd> <dt><em>scale</em></dt> <dd>the scale factor for the thumbnail</dd> <dt><em>interpolation</em></dt> <dd>the interpolation scheme used in the resampling</dd> <dt><em>preview</em></dt> <dd>if True, the default backend (presumably a user interface backend) will be used which will cause a figure to be raised if <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.show\" title=\"matplotlib.pyplot.show\"><code>show()</code></a> is called. If it is False, a pure image backend will be used depending on the extension, ‘png’-&gt;FigureCanvasAgg, ‘pdf’-&gt;FigureCanvasPdf, ‘svg’-&gt;FigureCanvasSVG</dd> </dl> </div>\n</blockquote> <p>See examples/misc/image_thumbnail.py.</p> <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/examples/misc/image_thumbnail.html#misc-image-thumbnail\"><span>misc example code: image_thumbnail.py</span></a><p>Return value is the figure instance containing the thumbnail</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/image_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/image_api.html</a>\n  </p>\n</div>\n","artist_api":"<h1 id=\"artist-api\">artists</h1> <p class=\"graphviz\" id=\"artists\"> <img src=\"http://matplotlib.org/1.5.1/_images/inheritance-2e3328e9686ca7e7aea82ffb83b4a4420a167e4a.png\" alt=\"Inheritance diagram of matplotlib.patches, matplotlib.lines, matplotlib.text, matplotlib.offsetbox, matplotlib.image\" usemap=\"#inheritance78d69db02b\" class=\"inheritance\"> <map id=\"inheritance78d69db02b\" name=\"inheritance78d69db02b\"> <area shape=\"rect\" id=\"node1\" href=\"#matplotlib.artist.Artist\" target=\"_top\" title=\"Abstract base class for someone who renders into a\" alt=\"\" coords=\"40,474,116,494\"> <area shape=\"rect\" id=\"node6\" href=\"image_api.html#matplotlib.image.FigureImage\" target=\"_top\" title=\"image.FigureImage\" alt=\"\" coords=\"222,284,339,304\"> <area shape=\"rect\" id=\"node8\" href=\"image_api.html#matplotlib.image.PcolorImage\" target=\"_top\" title=\"Make a pcolor-style plot with an irregular rectangular grid.\" alt=\"\" coords=\"222,204,339,224\"> <area shape=\"rect\" id=\"node9\" href=\"lines_api.html#matplotlib.lines.Line2D\" target=\"_top\" title=\"A line - the line can have both a solid linestyle connecting all\" alt=\"\" coords=\"241,723,320,743\"> <area shape=\"rect\" id=\"node12\" href=\"offsetbox_api.html#matplotlib.offsetbox.OffsetBox\" target=\"_top\" title=\"The OffsetBox is a simple container artist. The child artist are meant\" alt=\"\" coords=\"221,324,340,344\"> <area shape=\"rect\" id=\"node14\" href=\"offsetbox_api.html#matplotlib.offsetbox.AnnotationBbox\" target=\"_top\" title=\"Annotation-like class, but with offsetbox instead of Text.\" alt=\"\" coords=\"205,803,356,823\"> <area shape=\"rect\" id=\"node30\" href=\"patches_api.html#matplotlib.patches.Patch\" target=\"_top\" title=\"A patch is a 2D artist with a face color and an edge color.\" alt=\"\" coords=\"235,623,326,644\"> <area shape=\"rect\" id=\"node49\" href=\"text_api.html#matplotlib.text.Text\" target=\"_top\" title=\"Handle storing and drawing of text in window or data coordinates.\" alt=\"\" coords=\"250,683,311,703\"> <area shape=\"rect\" id=\"node2\" href=\"cm_api.html#matplotlib.cm.ScalarMappable\" target=\"_top\" title=\"This is a mixin class to support scalar data to RGBA mapping.\" alt=\"\" coords=\"18,244,138,264\"> <area shape=\"rect\" id=\"node3\" href=\"image_api.html#matplotlib.image.AxesImage\" target=\"_top\" title=\"image.AxesImage\" alt=\"\" coords=\"437,84,548,105\"> <area shape=\"rect\" id=\"node7\" href=\"image_api.html#matplotlib.image.NonUniformImage\" target=\"_top\" title=\"image.NonUniformImage\" alt=\"\" coords=\"615,84,763,105\"> <area shape=\"rect\" id=\"node5\" href=\"image_api.html#matplotlib.image.BboxImage\" target=\"_top\" title=\"The Image class whose size is determined by the given bbox.\" alt=\"\" coords=\"436,124,548,145\"> <area shape=\"rect\" id=\"node10\" href=\"lines_api.html#matplotlib.lines.VertexSelector\" target=\"_top\" title=\"Manage the callbacks to maintain a list of selected vertices for\" alt=\"\" coords=\"18,204,139,224\"> <area shape=\"rect\" id=\"node11\" href=\"offsetbox_api.html#matplotlib.offsetbox.AnchoredOffsetbox\" target=\"_top\" title=\"An offset box placed according to the legend location\" alt=\"\" coords=\"409,324,576,344\"> <area shape=\"rect\" id=\"node13\" href=\"offsetbox_api.html#matplotlib.offsetbox.AnchoredText\" target=\"_top\" title=\"AnchoredOffsetbox with Text.\" alt=\"\" coords=\"620,324,758,344\"> <area shape=\"rect\" id=\"node16\" href=\"offsetbox_api.html#matplotlib.offsetbox.AuxTransformBox\" target=\"_top\" title=\"Offset Box with the aux_transform . Its children will be\" alt=\"\" coords=\"413,364,572,384\"> <area shape=\"rect\" id=\"node20\" href=\"offsetbox_api.html#matplotlib.offsetbox.DrawingArea\" target=\"_top\" title=\"The DrawingArea can contain any Artist as a child. The DrawingArea\" alt=\"\" coords=\"425,403,560,424\"> <area shape=\"rect\" id=\"node22\" href=\"offsetbox_api.html#matplotlib.offsetbox.PackerBase\" target=\"_top\" title=\"offsetbox.PackerBase\" alt=\"\" coords=\"428,164,557,184\"> <area shape=\"rect\" id=\"node23\" href=\"offsetbox_api.html#matplotlib.offsetbox.OffsetImage\" target=\"_top\" title=\"offsetbox.OffsetImage\" alt=\"\" coords=\"427,204,558,224\"> <area shape=\"rect\" id=\"node24\" href=\"offsetbox_api.html#matplotlib.offsetbox.PaddedBox\" target=\"_top\" title=\"offsetbox.PaddedBox\" alt=\"\" coords=\"429,244,556,264\"> <area shape=\"rect\" id=\"node25\" href=\"offsetbox_api.html#matplotlib.offsetbox.TextArea\" target=\"_top\" title=\"The TextArea is contains a single Text instance. The text is\" alt=\"\" coords=\"436,284,549,304\"> <area shape=\"rect\" id=\"node48\" href=\"text_api.html#matplotlib.text.Annotation\" target=\"_top\" title=\"A :class:`~matplotlib.text.Text` class to make annotating things\" alt=\"\" coords=\"443,922,541,943\"> <area shape=\"rect\" id=\"node17\" href=\"offsetbox_api.html#matplotlib.offsetbox.DraggableAnnotation\" target=\"_top\" title=\"offsetbox.DraggableAnnotation\" alt=\"\" coords=\"191,124,370,145\"> <area shape=\"rect\" id=\"node18\" href=\"offsetbox_api.html#matplotlib.offsetbox.DraggableBase\" target=\"_top\" title=\"helper code for a draggable artist (legend, offsetbox)\" alt=\"\" coords=\"4,145,152,165\"> <area shape=\"rect\" id=\"node19\" href=\"offsetbox_api.html#matplotlib.offsetbox.DraggableOffsetBox\" target=\"_top\" title=\"offsetbox.DraggableOffsetBox\" alt=\"\" coords=\"194,164,367,184\"> <area shape=\"rect\" id=\"node21\" href=\"offsetbox_api.html#matplotlib.offsetbox.HPacker\" target=\"_top\" title=\"The HPacker has its children packed horizontally. It automatically\" alt=\"\" coords=\"634,184,745,205\"> <area shape=\"rect\" id=\"node26\" href=\"offsetbox_api.html#matplotlib.offsetbox.VPacker\" target=\"_top\" title=\"The VPacker has its children packed vertically. It automatically\" alt=\"\" coords=\"634,145,744,165\"> <area shape=\"rect\" id=\"node27\" href=\"patches_api.html#matplotlib.patches.Arc\" target=\"_top\" title=\"An elliptical arc.  Because it performs various optimizations, it\" alt=\"\" coords=\"649,584,729,604\"> <area shape=\"rect\" id=\"node28\" href=\"patches_api.html#matplotlib.patches.Ellipse\" target=\"_top\" title=\"A scale-free ellipse.\" alt=\"\" coords=\"445,563,540,584\"> <area shape=\"rect\" id=\"node34\" href=\"patches_api.html#matplotlib.patches.Circle\" target=\"_top\" title=\"A circle patch.\" alt=\"\" coords=\"644,544,735,564\"> <area shape=\"rect\" id=\"node29\" href=\"patches_api.html#matplotlib.patches.Arrow\" target=\"_top\" title=\"An arrow patch.\" alt=\"\" coords=\"447,603,538,623\"> <area shape=\"rect\" id=\"node36\" href=\"patches_api.html#matplotlib.patches.RegularPolygon\" target=\"_top\" title=\"A regular polygon patch.\" alt=\"\" coords=\"422,643,563,663\"> <area shape=\"rect\" id=\"node38\" href=\"patches_api.html#matplotlib.patches.FancyArrowPatch\" target=\"_top\" title=\"A fancy arrow patch. It draws an arrow using the :class:ArrowStyle.\" alt=\"\" coords=\"418,683,567,703\"> <area shape=\"rect\" id=\"node41\" href=\"patches_api.html#matplotlib.patches.Polygon\" target=\"_top\" title=\"A general polygon patch.\" alt=\"\" coords=\"441,723,544,743\"> <area shape=\"rect\" id=\"node42\" href=\"patches_api.html#matplotlib.patches.FancyBboxPatch\" target=\"_top\" title=\"Draw a fancy box around a rectangle with lower left at *xy*=(*x*,\" alt=\"\" coords=\"420,763,565,783\"> <area shape=\"rect\" id=\"node43\" href=\"patches_api.html#matplotlib.patches.PathPatch\" target=\"_top\" title=\"A general polycurve path patch.\" alt=\"\" coords=\"436,803,549,823\"> <area shape=\"rect\" id=\"node44\" href=\"patches_api.html#matplotlib.patches.Rectangle\" target=\"_top\" title=\"Draw a rectangle with lower left at *xy* = (*x*, *y*) with\" alt=\"\" coords=\"436,842,548,863\"> <area shape=\"rect\" id=\"node45\" href=\"patches_api.html#matplotlib.patches.Shadow\" target=\"_top\" title=\"patches.Shadow\" alt=\"\" coords=\"441,443,544,464\"> <area shape=\"rect\" id=\"node46\" href=\"patches_api.html#matplotlib.patches.Wedge\" target=\"_top\" title=\"Wedge shaped patch.\" alt=\"\" coords=\"444,483,540,504\"> <area shape=\"rect\" id=\"node47\" href=\"patches_api.html#matplotlib.patches.YAArrow\" target=\"_top\" title=\"Yet another arrow class.\" alt=\"\" coords=\"441,523,544,544\"> <area shape=\"rect\" id=\"node31\" href=\"patches_api.html#matplotlib.patches.ArrowStyle\" target=\"_top\" title=\":class:`ArrowStyle` is a container class which defines several\" alt=\"\" coords=\"222,4,339,25\"> <area shape=\"rect\" id=\"node32\" title=\"A base class for the Styles. It is meant to be a container class,\" alt=\"\" coords=\"31,44,125,65\"> <area shape=\"rect\" id=\"node33\" href=\"patches_api.html#matplotlib.patches.BoxStyle\" target=\"_top\" title=\":class:`BoxStyle` is a container class which defines several\" alt=\"\" coords=\"227,44,334,65\"> <area shape=\"rect\" id=\"node39\" href=\"patches_api.html#matplotlib.patches.ConnectionStyle\" target=\"_top\" title=\":class:`ConnectionStyle` is a container class which defines\" alt=\"\" coords=\"207,84,354,105\"> <area shape=\"rect\" id=\"node35\" href=\"patches_api.html#matplotlib.patches.CirclePolygon\" target=\"_top\" title=\"A polygon-approximation of a circle patch.\" alt=\"\" coords=\"623,643,755,663\"> <area shape=\"rect\" id=\"node37\" href=\"patches_api.html#matplotlib.patches.ConnectionPatch\" target=\"_top\" title=\"A :class:`~matplotlib.patches.ConnectionPatch` class is to make\" alt=\"\" coords=\"615,683,764,703\"> <area shape=\"rect\" id=\"node40\" href=\"patches_api.html#matplotlib.patches.FancyArrow\" target=\"_top\" title=\"Like Arrow, but lets you set head width and head height independently.\" alt=\"\" coords=\"629,723,750,743\"> <area shape=\"rect\" id=\"node51\" href=\"text_api.html#matplotlib.text.TextWithDash\" target=\"_top\" title=\"This is basically a :class:`~matplotlib.text.Text` with a dash\" alt=\"\" coords=\"437,882,547,903\"> <area shape=\"rect\" id=\"node50\" href=\"text_api.html#matplotlib.text.OffsetFrom\" target=\"_top\" title=\"text.OffsetFrom\" alt=\"\" coords=\"29,4,127,25\"> </map> </p>  <h2 id=\"matplotlib-artist\">matplotlib.artist</h2> <dl class=\"class\" id=\"module-matplotlib.artist\"> <dt id=\"matplotlib.artist.Artist\"><code>class matplotlib.artist.Artist</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Abstract base class for someone who renders into a <code>FigureCanvas</code>.</p> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.artist.Artist.remove_callback\" title=\"matplotlib.artist.Artist.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.artist.Artist.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.artist.Artist.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the artist contains the mouse event.</p> <p>Returns the truth value and a dictionary of artist specific details of selection, such as which points are contained in the pick radius. See individual artists for details.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.draw\"><code>draw(renderer, *args, **kwargs)</code></dt> <dd>\n<p>Derived classes drawing method</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_window_extent\"><code>get_window_extent(renderer)</code></dt> <dd>\n<p>Get the axes bounding box in display space. Subclasses should override for inclusion in the bounding box “tight” calculation. Default is to return an empty bounding box at 0, 0.</p> <p>Be careful when using this function, the results will not update if the artist window extent of the artist changes. The extent can change due to any changes in the transform stack, such as changing the axes limits, the figure size, or the canvas used (as is done when saving a figure). This can lead to unexpected behavior where interactive figures will look fine on the screen, but will save incorrectly.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.artist.Artist.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.artist.Artist.add_callback\" title=\"matplotlib.artist.Artist.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha value used for blending - not supported on all backends.</p> <p>ACCEPTS: float (0.0 transparent through 1.0 opaque)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.artist.Artist.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.Artist.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>Copy properties from <em>other</em> to <em>self</em>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.artist.Artist.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.artist.ArtistInspector\"><code>class matplotlib.artist.ArtistInspector(o)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A helper class to inspect an <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> and return information about it’s settable properties and their current values.</p> <p>Initialize the artist inspector with an <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> or sequence of <code>Artists</code>. If a sequence is used, we assume it is a homogeneous sequence (all <code>Artists</code> are of the same type) and it is your responsibility to make sure this is so.</p> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.aliased_name\"><code>aliased_name(s)</code></dt> <dd>\n<p>return ‘PROPNAME or alias’ if <em>s</em> has an alias, else return PROPNAME.</p> <p>e.g., for the line markerfacecolor property, which has an alias, return ‘markerfacecolor or mfc’ and for the transform property, which does not, return ‘transform’</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.aliased_name_rest\"><code>aliased_name_rest(s, target)</code></dt> <dd>\n<p>return ‘PROPNAME or alias’ if <em>s</em> has an alias, else return PROPNAME formatted for ReST</p> <p>e.g., for the line markerfacecolor property, which has an alias, return ‘markerfacecolor or mfc’ and for the transform property, which does not, return ‘transform’</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.findobj\"><code>findobj(match=None)</code></dt> <dd>\n<p>Recursively find all <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a> instances contained in <em>self</em>.</p> <p>If <em>match</em> is not None, it can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>function with signature <code>boolean = match(artist)</code>\n</li> <li>class instance: e.g., <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a>\n</li> </ul> </div>\n</blockquote> <p>used to filter matches.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.get_aliases\"><code>get_aliases()</code></dt> <dd>\n<p>Get a dict mapping <em>fullname</em> -&gt; <em>alias</em> for each <em>alias</em> in the <a class=\"reference internal\" href=\"#matplotlib.artist.ArtistInspector\" title=\"matplotlib.artist.ArtistInspector\"><code>ArtistInspector</code></a>.</p> <p>e.g., for lines:</p> <pre data-language=\"python\">{'markerfacecolor': 'mfc',\n 'linewidth'      : 'lw',\n}\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.get_setters\"><code>get_setters()</code></dt> <dd>\n<p>Get the attribute strings with setters for object. e.g., for a line, return <code>['markerfacecolor', 'linewidth', ....]</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.get_valid_values\"><code>get_valid_values(attr)</code></dt> <dd>\n<p>Get the legal arguments for the setter associated with <em>attr</em>.</p> <p>This is done by querying the docstring of the function <em>set_attr</em> for a line that begins with ACCEPTS:</p> <p>e.g., for a line linestyle, return “[ <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'steps'</code> | <code>'None'</code> ]”</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.is_alias\"><code>is_alias(o)</code></dt> <dd>\n<p>Return <em>True</em> if method object <em>o</em> is an alias for another function.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.pprint_getters\"><code>pprint_getters()</code></dt> <dd>\n<p>Return the getters and actual values as list of strings.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.pprint_setters\"><code>pprint_setters(prop=None, leadingspace=2)</code></dt> <dd>\n<p>If <em>prop</em> is <em>None</em>, return a list of strings of all settable properies and their valid values.</p> <p>If <em>prop</em> is not <em>None</em>, it is a valid property name and that property will be returned as a string of property : valid values.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.pprint_setters_rest\"><code>pprint_setters_rest(prop=None, leadingspace=2)</code></dt> <dd>\n<p>If <em>prop</em> is <em>None</em>, return a list of strings of all settable properies and their valid values. Format the output for ReST</p> <p>If <em>prop</em> is not <em>None</em>, it is a valid property name and that property will be returned as a string of property : valid values.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.artist.ArtistInspector.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.artist.allow_rasterization\"><code>matplotlib.artist.allow_rasterization(draw)</code></dt> <dd>\n<p>Decorator for Artist.draw method. Provides routines that run before and after the draw call. The before and after functions are useful for changing artist-dependant renderer attributes or making other setup function calls, such as starting and flushing a mixed-mode renderer.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.artist.get\"><code>matplotlib.artist.get(obj, property=None)</code></dt> <dd>\n<p>Return the value of object’s property. <em>property</em> is an optional string for the property you want to return</p> <p>Example usage:</p> <pre data-language=\"python\">getp(obj)  # get all the object properties\ngetp(obj, 'linestyle')  # get the linestyle property\n</pre> <p><em>obj</em> is a <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instance, e.g., <code>Line2D</code> or an instance of a <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> or <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a>. If the <em>property</em> is ‘somename’, this function returns</p> <blockquote> <div>obj.get_somename()</div>\n</blockquote> <p><a class=\"reference internal\" href=\"#matplotlib.artist.getp\" title=\"matplotlib.artist.getp\"><code>getp()</code></a> can be used to query all the gettable properties with <code>getp(obj)</code>. Many properties have aliases for shorter typing, e.g. ‘lw’ is an alias for ‘linewidth’. In the output, aliases and full property names will be listed as:</p> <blockquote> <div>property or alias = value</div>\n</blockquote> <p>e.g.:</p> <blockquote> <div>linewidth or lw = 2</div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.artist.getp\"><code>matplotlib.artist.getp(obj, property=None)</code></dt> <dd>\n<p>Return the value of object’s property. <em>property</em> is an optional string for the property you want to return</p> <p>Example usage:</p> <pre data-language=\"python\">getp(obj)  # get all the object properties\ngetp(obj, 'linestyle')  # get the linestyle property\n</pre> <p><em>obj</em> is a <a class=\"reference internal\" href=\"#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instance, e.g., <code>Line2D</code> or an instance of a <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> or <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a>. If the <em>property</em> is ‘somename’, this function returns</p> <blockquote> <div>obj.get_somename()</div>\n</blockquote> <p><a class=\"reference internal\" href=\"#matplotlib.artist.getp\" title=\"matplotlib.artist.getp\"><code>getp()</code></a> can be used to query all the gettable properties with <code>getp(obj)</code>. Many properties have aliases for shorter typing, e.g. ‘lw’ is an alias for ‘linewidth’. In the output, aliases and full property names will be listed as:</p> <blockquote> <div>property or alias = value</div>\n</blockquote> <p>e.g.:</p> <blockquote> <div>linewidth or lw = 2</div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.artist.kwdoc\"><code>matplotlib.artist.kwdoc(a)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.artist.setp\"><code>matplotlib.artist.setp(obj, *args, **kwargs)</code></dt> <dd>\n<p>Set a property on an artist object.</p> <p>matplotlib supports the use of <a class=\"reference internal\" href=\"#matplotlib.artist.setp\" title=\"matplotlib.artist.setp\"><code>setp()</code></a> (“set property”) and <a class=\"reference internal\" href=\"#matplotlib.artist.getp\" title=\"matplotlib.artist.getp\"><code>getp()</code></a> to set and get object properties, as well as to do introspection on the object. For example, to set the linestyle of a line to be dashed, you can do:</p> <pre data-language=\"python\">&gt;&gt;&gt; line, = plot([1,2,3])\n&gt;&gt;&gt; setp(line, linestyle='--')\n</pre> <p>If you want to know the valid types of arguments, you can provide the name of the property you want to set without a value:</p> <pre data-language=\"python\">&gt;&gt;&gt; setp(line, 'linestyle')\n    linestyle: [ '-' | '--' | '-.' | ':' | 'steps' | 'None' ]\n</pre> <p>If you want to see all the properties that can be set, and their possible values, you can do:</p> <pre data-language=\"python\">&gt;&gt;&gt; setp(line)\n    ... long output listing omitted\n</pre> <p><a class=\"reference internal\" href=\"#matplotlib.artist.setp\" title=\"matplotlib.artist.setp\"><code>setp()</code></a> operates on a single instance or a list of instances. If you are in query mode introspecting the possible values, only the first instance in the sequence is used. When actually setting values, all the instances will be set. e.g., suppose you have a list of two lines, the following will make both lines thicker and red:</p> <pre data-language=\"python\">&gt;&gt;&gt; x = arange(0,1.0,0.01)\n&gt;&gt;&gt; y1 = sin(2*pi*x)\n&gt;&gt;&gt; y2 = sin(4*pi*x)\n&gt;&gt;&gt; lines = plot(x, y1, x, y2)\n&gt;&gt;&gt; setp(lines, linewidth=2, color='r')\n</pre> <p><a class=\"reference internal\" href=\"#matplotlib.artist.setp\" title=\"matplotlib.artist.setp\"><code>setp()</code></a> works with the MATLAB style string/value pairs or with python kwargs. For example, the following are equivalent:</p> <pre data-language=\"python\">&gt;&gt;&gt; setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style\n&gt;&gt;&gt; setp(lines, linewidth=2, color='r')        # python style\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/artist_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/artist_api.html</a>\n  </p>\n</div>\n","colors_api":"<h1 id=\"colors\">colors</h1> <p>For a visual representation of the matplotlib colormaps, see the “Color” section in the gallery.</p>  <h2 id=\"matplotlib-colors\">matplotlib.colors</h2> <p id=\"module-matplotlib.colors\">A module for converting numbers or color arguments to <em>RGB</em> or <em>RGBA</em></p> <p><em>RGB</em> and <em>RGBA</em> are sequences of, respectively, 3 or 4 floats in the range 0-1.</p> <p>This module includes functions and classes for color specification conversions, and for mapping numbers to colors in a 1-D array of colors called a colormap. Colormapping typically involves two steps: a data array is first mapped onto the range 0-1 using an instance of <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a> or of a subclass; then this number in the 0-1 range is mapped to a color using an instance of a subclass of <a class=\"reference internal\" href=\"#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a>. Two are provided here: <a class=\"reference internal\" href=\"#matplotlib.colors.LinearSegmentedColormap\" title=\"matplotlib.colors.LinearSegmentedColormap\"><code>LinearSegmentedColormap</code></a>, which is used to generate all the built-in colormap instances, but is also useful for making custom colormaps, and <a class=\"reference internal\" href=\"#matplotlib.colors.ListedColormap\" title=\"matplotlib.colors.ListedColormap\"><code>ListedColormap</code></a>, which is used for generating a custom colormap from a list of color specifications.</p> <p>The module also provides a single instance, <em>colorConverter</em>, of the <a class=\"reference internal\" href=\"#matplotlib.colors.ColorConverter\" title=\"matplotlib.colors.ColorConverter\"><code>ColorConverter</code></a> class providing methods for converting single color specifications or sequences of them to <em>RGB</em> or <em>RGBA</em>.</p> <p>Commands which take color arguments can use several formats to specify the colors. For the basic built-in colors, you can use a single letter</p> <blockquote> <div>\n<ul class=\"simple\"> <li>b: blue</li> <li>g: green</li> <li>r: red</li> <li>c: cyan</li> <li>m: magenta</li> <li>y: yellow</li> <li>k: black</li> <li>w: white</li> </ul> </div>\n</blockquote> <p>Gray shades can be given as a string encoding a float in the 0-1 range, e.g.:</p> <pre data-language=\"python\">color = '0.75'\n</pre> <p>For a greater range of colors, you have two options. You can specify the color using an html hex string, as in:</p> <pre data-language=\"python\">color = '#eeefff'\n</pre> <p>or you can pass an <em>R</em> , <em>G</em> , <em>B</em> tuple, where each of <em>R</em> , <em>G</em> , <em>B</em> are in the range [0,1].</p> <p>Finally, legal html names for colors, like ‘red’, ‘burlywood’ and ‘chartreuse’ are supported.</p> <dl class=\"class\"> <dt id=\"matplotlib.colors.BoundaryNorm\"><code>class matplotlib.colors.BoundaryNorm(boundaries, ncolors, clip=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a></p> <p>Generate a colormap index based on discrete intervals.</p> <p>Unlike <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a> or <a class=\"reference internal\" href=\"#matplotlib.colors.LogNorm\" title=\"matplotlib.colors.LogNorm\"><code>LogNorm</code></a>, <a class=\"reference internal\" href=\"#matplotlib.colors.BoundaryNorm\" title=\"matplotlib.colors.BoundaryNorm\"><code>BoundaryNorm</code></a> maps values to integers instead of to the interval 0-1.</p> <p>Mapping to the 0-1 interval could have been done via piece-wise linear interpolation, but using integers seems simpler, and reduces the number of conversions back and forth between integer and floating point.</p> <dl class=\"docutils\"> <dt><em>boundaries</em></dt> <dd>a monotonically increasing sequence</dd> <dt><em>ncolors</em></dt> <dd>number of colors in the colormap to be used</dd> </dl> <p>If:</p> <pre data-language=\"python\">b[i] &lt;= v &lt; b[i+1]\n</pre> <p>then v is mapped to color j; as i varies from 0 to len(boundaries)-2, j goes from 0 to ncolors-1.</p> <p>Out-of-range values are mapped to -1 if low and ncolors if high; these are converted to valid indices by <code>Colormap.__call__()</code> . If clip == True, out-of-range values are mapped to 0 if low and ncolors-1 if high.</p> <dl class=\"method\"> <dt id=\"matplotlib.colors.BoundaryNorm.inverse\"><code>inverse(value)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.ColorConverter\"><code>class matplotlib.colors.ColorConverter</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Provides methods for converting color specifications to <em>RGB</em> or <em>RGBA</em></p> <p>Caching is used for more efficient conversion upon repeated calls with the same argument.</p> <p>Ordinarily only the single instance instantiated in this module, <em>colorConverter</em>, is needed.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.colors.ColorConverter.cache\"><code>cache = {'#fdb462': (0.9921568627450981, 0.7058823529411765, 0.3843137254901961), '#CC79A7': (0.8, 0.4745098039215686, 0.6549019607843137), '#8C0900': (0.5490196078431373, 0.03529411764705882, 0.0), '#E5E5E5': (0.8980392156862745, 0.8980392156862745, 0.8980392156862745), 'green': (0.0, 0.5019607843137255, 0.0), '.15': (0.15, 0.15, 0.15), '#777777': (0.4666666666666667, 0.4666666666666667, 0.4666666666666667), 'c': (0.0, 0.75, 0.75), '#00D7FF': (0.0, 0.8431372549019608, 1.0), '0.8': (0.8, 0.8, 0.8), '#8b8b8b': (0.5450980392156862, 0.5450980392156862, 0.5450980392156862), '#03ED3A': (0.011764705882352941, 0.9294117647058824, 0.22745098039215686), '#fc4f30': (0.9882352941176471, 0.30980392156862746, 0.18823529411764706), '0.75': (0.75, 0.75, 0.75), '#FFB5B8': (1.0, 0.7098039215686275, 0.7215686274509804), 'blue': (0.0, 0.0, 1.0), '#FFFEA3': (1.0, 0.996078431372549, 0.6392156862745098), '#97F0AA': (0.592156862745098, 0.9411764705882353, 0.6666666666666666), '#eeeeee': (0.9333333333333333, 0.9333333333333333, 0.9333333333333333), '#feffb3': (0.996078431372549, 1.0, 0.7019607843137254), '#bcbcbc': (0.7372549019607844, 0.7372549019607844, 0.7372549019607844), '#ffed6f': (1.0, 0.9294117647058824, 0.43529411764705883), '#64B5CD': (0.39215686274509803, 0.7098039215686275, 0.803921568627451), 'magenta': (1.0, 0.0, 1.0), '#F0E442': (0.9411764705882353, 0.8941176470588236, 0.25882352941176473), '#0072B2': (0.0, 0.4470588235294118, 0.6980392156862745), '#D0BBFF': (0.8156862745098039, 0.7333333333333333, 1.0), '#bfbbd9': (0.7490196078431373, 0.7333333333333333, 0.8509803921568627), '#FBC15E': (0.984313725490196, 0.7568627450980392, 0.3686274509803922), '#B0E0E6': (0.6901960784313725, 0.8784313725490196, 0.9019607843137255), '#cbcbcb': (0.796078431372549, 0.796078431372549, 0.796078431372549), '#77BEDB': (0.4666666666666667, 0.7450980392156863, 0.8588235294117647), 'w': (1.0, 1.0, 1.0), '#7A68A6': (0.47843137254901963, 0.40784313725490196, 0.6509803921568628), '#6d904f': (0.42745098039215684, 0.5647058823529412, 0.30980392156862746), 'y': (0.75, 0.75, 0), 'r': (1.0, 0.0, 0.0), '#E8000B': (0.9098039215686274, 0.0, 0.043137254901960784), '#b3de69': (0.7019607843137254, 0.8705882352941177, 0.4117647058823529), '#8EBA42': (0.5568627450980392, 0.7294117647058823, 0.25882352941176473), '#92C6FF': (0.5725490196078431, 0.7764705882352941, 1.0), '#30a2da': (0.18823529411764706, 0.6352941176470588, 0.8549019607843137), '#C4AD66': (0.7686274509803922, 0.6784313725490196, 0.4), '0.40': (0.4, 0.4, 0.4), '#8dd3c7': (0.5529411764705883, 0.8274509803921568, 0.7803921568627451), '#afeeee': (0.6862745098039216, 0.9333333333333333, 0.9333333333333333), '#017517': (0.00392156862745098, 0.4588235294117647, 0.09019607843137255), 'darkgoldenrod': (0.7215686274509804, 0.5254901960784314, 0.043137254901960784), '#f0f0f0': (0.9411764705882353, 0.9411764705882353, 0.9411764705882353), '#bc82bd': (0.7372549019607844, 0.5098039215686274, 0.7411764705882353), '#8A2BE2': (0.5411764705882353, 0.16862745098039217, 0.8862745098039215), '#D55E00': (0.8352941176470589, 0.3686274509803922, 0.0), '#001C7F': (0.0, 0.10980392156862745, 0.4980392156862745), '#EEEEEE': (0.9333333333333333, 0.9333333333333333, 0.9333333333333333), '#ccebc4': (0.8, 0.9215686274509803, 0.7686274509803922), 'purple': (0.5019607843137255, 0.0, 0.5019607843137255), 'cyan': (0.0, 1.0, 1.0), '#6ACC65': (0.41568627450980394, 0.8, 0.396078431372549), '0.50': (0.5, 0.5, 0.5), '#fa8174': (0.9803921568627451, 0.5058823529411764, 0.4549019607843137), '#56B4E9': (0.33725490196078434, 0.7058823529411765, 0.9137254901960784), '#E24A33': (0.8862745098039215, 0.2901960784313726, 0.2), '#348ABD': (0.20392156862745098, 0.5411764705882353, 0.7411764705882353), 'gray': (0.5019607843137255, 0.5019607843137255, 0.5019607843137255), 'red': (1.0, 0.0, 0.0), '#FFC400': (1.0, 0.7686274509803922, 0.0), '#e5ae38': (0.8980392156862745, 0.6823529411764706, 0.2196078431372549), '#4878CF': (0.2823529411764706, 0.47058823529411764, 0.8117647058823529), '#009E73': (0.0, 0.6196078431372549, 0.45098039215686275), '#55A868': (0.3333333333333333, 0.6588235294117647, 0.40784313725490196), '#00FFCC': (0.0, 1.0, 0.8), '#006374': (0.0, 0.38823529411764707, 0.4549019607843137), 'b': (0.0, 0.0, 1.0), 'firebrick': (0.6980392156862745, 0.13333333333333333, 0.13333333333333333), '#467821': (0.27450980392156865, 0.47058823529411764, 0.12941176470588237), '0.00': (0.0, 0.0, 0.0), '#4C72B0': (0.2980392156862745, 0.4470588235294118, 0.6901960784313725), 'black': (0.0, 0.0, 0.0), 'k': (0.0, 0.0, 0.0), '#A60628': (0.6509803921568628, 0.023529411764705882, 0.1568627450980392), '#C44E52': (0.7686274509803922, 0.3058823529411765, 0.3215686274509804), '#8172B2': (0.5058823529411764, 0.4470588235294118, 0.6980392156862745), '#D65F5F': (0.8392156862745098, 0.37254901960784315, 0.37254901960784315), '0.70': (0.7, 0.7, 0.7), '.8': (0.8, 0.8, 0.8), 'g': (0.0, 0.5, 0.0), 'm': (0.75, 0, 0.75), '#FF9F9A': (1.0, 0.6235294117647059, 0.6039215686274509), '#EAEAF2': (0.9176470588235294, 0.9176470588235294, 0.9490196078431372), '#B47CC7': (0.7058823529411765, 0.48627450980392156, 0.7803921568627451), '#988ED5': (0.596078431372549, 0.5568627450980392, 0.8352941176470589), '#003FFF': (0.0, 0.24705882352941178, 1.0), 'white': (1.0, 1.0, 1.0), '#555555': (0.3333333333333333, 0.3333333333333333, 0.3333333333333333), '0.5': (0.5, 0.5, 0.5), '#CCB974': (0.8, 0.7254901960784313, 0.4549019607843137), '#7600A1': (0.4627450980392157, 0.0, 0.6313725490196078), '0.6': (0.6, 0.6, 0.6), '#B8860B': (0.7215686274509804, 0.5254901960784314, 0.043137254901960784), '0.60': (0.6, 0.6, 0.6), '#81b1d2': (0.5058823529411764, 0.6941176470588235, 0.8235294117647058), 'yellow': (1.0, 1.0, 0.0)}</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.colors.ColorConverter.colors\"><code>colors = {'m': (0.75, 0, 0.75), 'w': (1.0, 1.0, 1.0), 'b': (0.0, 0.0, 1.0), 'y': (0.75, 0.75, 0), 'k': (0.0, 0.0, 0.0), 'r': (1.0, 0.0, 0.0), 'c': (0.0, 0.75, 0.75), 'g': (0.0, 0.5, 0.0)}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.ColorConverter.to_rgb\"><code>to_rgb(arg)</code></dt> <dd>\n<p>Returns an <em>RGB</em> tuple of three floats from 0-1.</p> <p><em>arg</em> can be an <em>RGB</em> or <em>RGBA</em> sequence or a string in any of several forms:</p> <blockquote> <div>\n<ol class=\"arabic simple\"> <li>a letter from the set ‘rgbcmykw’</li> <li>a hex color string, like ‘#00FFFF’</li> <li>a standard name, like ‘aqua’</li> <li>a string representation of a float, like ‘0.4’, indicating gray on a 0-1 scale</li> </ol> </div>\n</blockquote> <p>if <em>arg</em> is <em>RGBA</em>, the <em>A</em> will simply be discarded.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.ColorConverter.to_rgba\"><code>to_rgba(arg, alpha=None)</code></dt> <dd>\n<p>Returns an <em>RGBA</em> tuple of four floats from 0-1.</p> <p>For acceptable values of <em>arg</em>, see <a class=\"reference internal\" href=\"#matplotlib.colors.ColorConverter.to_rgb\" title=\"matplotlib.colors.ColorConverter.to_rgb\"><code>to_rgb()</code></a>. In addition, if <em>arg</em> is “none” (case-insensitive), then (0,0,0,0) will be returned. If <em>arg</em> is an <em>RGBA</em> sequence and <em>alpha</em> is not <em>None</em>, <em>alpha</em> will replace the original <em>A</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.ColorConverter.to_rgba_array\"><code>to_rgba_array(c, alpha=None)</code></dt> <dd>\n<p>Returns a numpy array of <em>RGBA</em> tuples.</p> <p>Accepts a single mpl color spec or a sequence of specs.</p> <p>Special case to handle “no color”: if <em>c</em> is “none” (case-insensitive), then an empty array will be returned. Same for an empty list.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.Colormap\"><code>class matplotlib.colors.Colormap(name, N=256)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Baseclass for all scalar to RGBA mappings.</p> <p>Typically Colormap instances are used to convert data values (floats) from the interval <code>[0, 1]</code> to the RGBA color that the respective Colormap represents. For scaling of data into the <code>[0, 1]</code> interval see <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a>. It is worth noting that <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a> subclasses make heavy use of this <code>data-&gt;normalize-&gt;map-to-color</code> processing chain.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : str</p> <blockquote> <div>\n<p>The name of the colormap.</p> </div>\n</blockquote> <p><strong>N</strong> : int</p> <blockquote class=\"last\"> <div>\n<p>The number of rgb quantization levels.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"attribute\"> <dt id=\"matplotlib.colors.Colormap.colorbar_extend\"><code>colorbar_extend = None</code></dt> <dd>\n<p>When this colormap exists on a scalar mappable and colorbar_extend is not False, colorbar creation will pick up <code>colorbar_extend</code> as the default value for the <code>extend</code> keyword in the <a class=\"reference internal\" href=\"colorbar_api#matplotlib.colorbar.Colorbar\" title=\"matplotlib.colorbar.Colorbar\"><code>matplotlib.colorbar.Colorbar</code></a> constructor.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.Colormap.is_gray\"><code>is_gray()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.Colormap.set_bad\"><code>set_bad(color='k', alpha=None)</code></dt> <dd>\n<p>Set color to be used for masked values.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.Colormap.set_over\"><code>set_over(color='k', alpha=None)</code></dt> <dd>\n<p>Set color to be used for high out-of-range values. Requires norm.clip = False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.Colormap.set_under\"><code>set_under(color='k', alpha=None)</code></dt> <dd>\n<p>Set color to be used for low out-of-range values. Requires norm.clip = False</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.LightSource\"><code>class matplotlib.colors.LightSource(azdeg=315, altdeg=45, hsv_min_val=0, hsv_max_val=1, hsv_min_sat=1, hsv_max_sat=0)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Create a light source coming from the specified azimuth and elevation. Angles are in degrees, with the azimuth measured clockwise from north and elevation up from the zero plane of the surface.</p> <p>The <a class=\"reference internal\" href=\"#matplotlib.colors.LightSource.shade\" title=\"matplotlib.colors.LightSource.shade\"><code>shade()</code></a> is used to produce “shaded” rgb values for a data array. <a class=\"reference internal\" href=\"#matplotlib.colors.LightSource.shade_rgb\" title=\"matplotlib.colors.LightSource.shade_rgb\"><code>shade_rgb()</code></a> can be used to combine an rgb image with The <a class=\"reference internal\" href=\"#matplotlib.colors.LightSource.shade_rgb\" title=\"matplotlib.colors.LightSource.shade_rgb\"><code>shade_rgb()</code></a> The <a class=\"reference internal\" href=\"#matplotlib.colors.LightSource.hillshade\" title=\"matplotlib.colors.LightSource.hillshade\"><code>hillshade()</code></a> produces an illumination map of a surface.</p> <p>Specify the azimuth (measured clockwise from south) and altitude (measured up from the plane of the surface) of the light source in degrees.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>azdeg</strong> : number, optional</p> <blockquote> <div>\n<p>The azimuth (0-360, degrees clockwise from North) of the light source. Defaults to 315 degrees (from the northwest).</p> </div>\n</blockquote> <p><strong>altdeg</strong> : number, optional</p> <blockquote class=\"last\"> <div>\n<p>The altitude (0-90, degrees up from horizontal) of the light source. Defaults to 45 degrees from horizontal.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>For backwards compatibility, the parameters <em>hsv_min_val</em>, <em>hsv_max_val</em>, <em>hsv_min_sat</em>, and <em>hsv_max_sat</em> may be supplied at initialization as well. However, these parameters will only be used if “blend_mode=’hsv’” is passed into <a class=\"reference internal\" href=\"#matplotlib.colors.LightSource.shade\" title=\"matplotlib.colors.LightSource.shade\"><code>shade()</code></a> or <a class=\"reference internal\" href=\"#matplotlib.colors.LightSource.shade_rgb\" title=\"matplotlib.colors.LightSource.shade_rgb\"><code>shade_rgb()</code></a>. See the documentation for <a class=\"reference internal\" href=\"#matplotlib.colors.LightSource.blend_hsv\" title=\"matplotlib.colors.LightSource.blend_hsv\"><code>blend_hsv()</code></a> for more details.</p> <dl class=\"method\"> <dt id=\"matplotlib.colors.LightSource.blend_hsv\"><code>blend_hsv(rgb, intensity, hsv_max_sat=None, hsv_max_val=None, hsv_min_val=None, hsv_min_sat=None)</code></dt> <dd>\n<p>Take the input data array, convert to HSV values in the given colormap, then adjust those color values to give the impression of a shaded relief map with a specified light source. RGBA values are returned, which can then be used to plot the shaded image with imshow.</p> <p>The color of the resulting image will be darkened by moving the (s,v) values (in hsv colorspace) toward (hsv_min_sat, hsv_min_val) in the shaded regions, or lightened by sliding (s,v) toward (hsv_max_sat hsv_max_val) in regions that are illuminated. The default extremes are chose so that completely shaded points are nearly black (s = 1, v = 0) and completely illuminated points are nearly white (s = 0, v = 1).</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgb</strong> : ndarray</p> <blockquote> <div>\n<p>An MxNx3 RGB array of floats ranging from 0 to 1 (color image).</p> </div>\n</blockquote> <p><strong>intensity</strong> : ndarray</p> <blockquote> <div>\n<p>An MxNx1 array of floats ranging from 0 to 1 (grayscale image).</p> </div>\n</blockquote> <p><strong>hsv_max_sat</strong> : number, optional</p> <blockquote> <div>\n<p>The maximum saturation value that the <em>intensity</em> map can shift the output image to. Defaults to 1.</p> </div>\n</blockquote> <p><strong>hsv_min_sat</strong> : number, optional</p> <blockquote> <div>\n<p>The minimum saturation value that the <em>intensity</em> map can shift the output image to. Defaults to 0.</p> </div>\n</blockquote> <p><strong>hsv_max_val</strong> : number, optional</p> <blockquote> <div>\n<p>The maximum value (“v” in “hsv”) that the <em>intensity</em> map can shift the output image to. Defaults to 1.</p> </div>\n</blockquote> <p><strong>hsv_min_val: number, optional</strong></p> <blockquote> <div>\n<p>The minimum value (“v” in “hsv”) that the <em>intensity</em> map can shift the output image to. Defaults to 0.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgb</strong> : ndarray</p> <blockquote class=\"last\"> <div>\n<p>An MxNx3 RGB array representing the combined images.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.LightSource.blend_overlay\"><code>blend_overlay(rgb, intensity)</code></dt> <dd>\n<p>Combines an rgb image with an intensity map using “overlay” blending.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgb</strong> : ndarray</p> <blockquote> <div>\n<p>An MxNx3 RGB array of floats ranging from 0 to 1 (color image).</p> </div>\n</blockquote> <p><strong>intensity</strong> : ndarray</p> <blockquote> <div>\n<p>An MxNx1 array of floats ranging from 0 to 1 (grayscale image).</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgb</strong> : ndarray</p> <blockquote class=\"last\"> <div>\n<p>An MxNx3 RGB array representing the combined images.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.LightSource.blend_soft_light\"><code>blend_soft_light(rgb, intensity)</code></dt> <dd>\n<p>Combines an rgb image with an intensity map using “soft light” blending. Uses the “pegtop” formula.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgb</strong> : ndarray</p> <blockquote> <div>\n<p>An MxNx3 RGB array of floats ranging from 0 to 1 (color image).</p> </div>\n</blockquote> <p><strong>intensity</strong> : ndarray</p> <blockquote> <div>\n<p>An MxNx1 array of floats ranging from 0 to 1 (grayscale image).</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgb</strong> : ndarray</p> <blockquote class=\"last\"> <div>\n<p>An MxNx3 RGB array representing the combined images.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.LightSource.hillshade\"><code>hillshade(elevation, vert_exag=1, dx=1, dy=1, fraction=1.0)</code></dt> <dd>\n<p>Calculates the illumination intensity for a surface using the defined azimuth and elevation for the light source.</p> <p>Imagine an artificial sun placed at infinity in some azimuth and elevation position illuminating our surface. The parts of the surface that slope toward the sun should brighten while those sides facing away should become darker.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>elevation</strong> : array-like</p> <blockquote> <div>\n<p>A 2d array (or equivalent) of the height values used to generate an illumination map</p> </div>\n</blockquote> <p><strong>vert_exag</strong> : number, optional</p> <blockquote> <div>\n<p>The amount to exaggerate the elevation values by when calculating illumination. This can be used either to correct for differences in units between the x-y coordinate system and the elevation coordinate system (e.g. decimal degrees vs meters) or to exaggerate or de-emphasize topographic effects.</p> </div>\n</blockquote> <p><strong>dx</strong> : number, optional</p> <blockquote> <div>\n<p>The x-spacing (columns) of the input <em>elevation</em> grid.</p> </div>\n</blockquote> <p><strong>dy</strong> : number, optional</p> <blockquote> <div>\n<p>The y-spacing (rows) of the input <em>elevation</em> grid.</p> </div>\n</blockquote> <p><strong>fraction</strong> : number, optional</p> <blockquote> <div>\n<p>Increases or decreases the contrast of the hillshade. Values greater than one will cause intermediate values to move closer to full illumination or shadow (and clipping any values that move beyond 0 or 1). Note that this is not visually or mathematically the same as vertical exaggeration.</p> </div>\n</blockquote> <p><strong>Returns</strong></p> <p><strong>——-</strong></p> <p><strong>intensity</strong> : ndarray</p> <blockquote class=\"last\"> <div>\n<p>A 2d array of illumination values between 0-1, where 0 is completely in shadow and 1 is completely illuminated.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.LightSource.shade\"><code>shade(data, cmap, norm=None, blend_mode='hsv', vmin=None, vmax=None, vert_exag=1, dx=1, dy=1, fraction=1, **kwargs)</code></dt> <dd>\n<p>Combine colormapped data values with an illumination intensity map (a.k.a. “hillshade”) of the values.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>data</strong> : array-like</p> <blockquote> <div>\n<p>A 2d array (or equivalent) of the height values used to generate a shaded map.</p> </div>\n</blockquote> <p><strong>cmap</strong> : <a class=\"reference internal\" href=\"#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance</p> <blockquote> <div>\n<p>The colormap used to color the <em>data</em> array. Note that this must be a <a class=\"reference internal\" href=\"#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance. For example, rather than passing in <code>cmap='gist_earth'</code>, use <code>cmap=plt.get_cmap('gist_earth')</code> instead.</p> </div>\n</blockquote> <p><strong>norm</strong> : <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a> instance, optional</p> <blockquote> <div>\n<p>The normalization used to scale values before colormapping. If None, the input will be linearly scaled between its min and max.</p> </div>\n</blockquote> <p><strong>blend_mode</strong> : {‘hsv’, ‘overlay’, ‘soft’} or callable, optional</p> <blockquote> <div>\n<p>The type of blending used to combine the colormapped data values with the illumination intensity. For backwards compatibility, this defaults to “hsv”. Note that for most topographic surfaces, “overlay” or “soft” appear more visually realistic. If a user-defined function is supplied, it is expected to combine an MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade array (also 0 to 1). (Call signature <code>func(rgb, illum, **kwargs)</code>) Additional kwargs supplied to this function will be passed on to the <em>blend_mode</em> function.</p> </div>\n</blockquote> <p><strong>vmin</strong> : scalar or None, optional</p> <blockquote> <div>\n<p>The minimum value used in colormapping <em>data</em>. If <em>None</em> the minimum value in <em>data</em> is used. If <em>norm</em> is specified, then this argument will be ignored.</p> </div>\n</blockquote> <p><strong>vmax</strong> : scalar or None, optional</p> <blockquote> <div>\n<p>The maximum value used in colormapping <em>data</em>. If <em>None</em> the maximum value in <em>data</em> is used. If <em>norm</em> is specified, then this argument will be ignored.</p> </div>\n</blockquote> <p><strong>vert_exag</strong> : number, optional</p> <blockquote> <div>\n<p>The amount to exaggerate the elevation values by when calculating illumination. This can be used either to correct for differences in units between the x-y coordinate system and the elevation coordinate system (e.g. decimal degrees vs meters) or to exaggerate or de-emphasize topography.</p> </div>\n</blockquote> <p><strong>dx</strong> : number, optional</p> <blockquote> <div>\n<p>The x-spacing (columns) of the input <em>elevation</em> grid.</p> </div>\n</blockquote> <p><strong>dy</strong> : number, optional</p> <blockquote> <div>\n<p>The y-spacing (rows) of the input <em>elevation</em> grid.</p> </div>\n</blockquote> <p><strong>fraction</strong> : number, optional</p> <blockquote> <div>\n<p>Increases or decreases the contrast of the hillshade. Values greater than one will cause intermediate values to move closer to full illumination or shadow (and clipping any values that move beyond 0 or 1). Note that this is not visually or mathematically the same as vertical exaggeration.</p> </div>\n</blockquote> <p><strong>Additional kwargs are passed on to the *blend_mode* function.</strong></p> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgba</strong> : ndarray</p> <blockquote class=\"last\"> <div>\n<p>An MxNx4 array of floats ranging between 0-1.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.LightSource.shade_rgb\"><code>shade_rgb(rgb, elevation, fraction=1.0, blend_mode='hsv', vert_exag=1, dx=1, dy=1, **kwargs)</code></dt> <dd>\n<p>Take the input RGB array (ny*nx*3) adjust their color values to given the impression of a shaded relief map with a specified light source using the elevation (ny*nx). A new RGB array ((ny*nx*3)) is returned.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgb</strong> : array-like</p> <blockquote> <div>\n<p>An MxNx3 RGB array, assumed to be in the range of 0 to 1.</p> </div>\n</blockquote> <p><strong>elevation</strong> : array-like</p> <blockquote> <div>\n<p>A 2d array (or equivalent) of the height values used to generate a shaded map.</p> </div>\n</blockquote> <p><strong>fraction</strong> : number</p> <blockquote> <div>\n<p>Increases or decreases the contrast of the hillshade. Values greater than one will cause intermediate values to move closer to full illumination or shadow (and clipping any values that move beyond 0 or 1). Note that this is not visually or mathematically the same as vertical exaggeration.</p> </div>\n</blockquote> <p><strong>blend_mode</strong> : {‘hsv’, ‘overlay’, ‘soft’} or callable, optional</p> <blockquote> <div>\n<p>The type of blending used to combine the colormapped data values with the illumination intensity. For backwards compatibility, this defaults to “hsv”. Note that for most topographic surfaces, “overlay” or “soft” appear more visually realistic. If a user-defined function is supplied, it is expected to combine an MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade array (also 0 to 1). (Call signature <code>func(rgb, illum, **kwargs)</code>) Additional kwargs supplied to this function will be passed on to the <em>blend_mode</em> function.</p> </div>\n</blockquote> <p><strong>vert_exag</strong> : number, optional</p> <blockquote> <div>\n<p>The amount to exaggerate the elevation values by when calculating illumination. This can be used either to correct for differences in units between the x-y coordinate system and the elevation coordinate system (e.g. decimal degrees vs meters) or to exaggerate or de-emphasize topography.</p> </div>\n</blockquote> <p><strong>dx</strong> : number, optional</p> <blockquote> <div>\n<p>The x-spacing (columns) of the input <em>elevation</em> grid.</p> </div>\n</blockquote> <p><strong>dy</strong> : number, optional</p> <blockquote> <div>\n<p>The y-spacing (rows) of the input <em>elevation</em> grid.</p> </div>\n</blockquote> <p><strong>Additional kwargs are passed on to the *blend_mode* function.</strong></p> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>shaded_rgb</strong> : ndarray</p> <blockquote class=\"last\"> <div>\n<p>An MxNx3 array of floats ranging between 0-1.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.LinearSegmentedColormap\"><code>class matplotlib.colors.LinearSegmentedColormap(name, segmentdata, N=256, gamma=1.0)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a></p> <p>Colormap objects based on lookup tables using linear segments.</p> <p>The lookup table is generated using linear interpolation for each primary color, with the 0-1 domain divided into any number of segments.</p> <p>Create color map from linear mapping segments</p> <p>segmentdata argument is a dictionary with a red, green and blue entries. Each entry should be a list of <em>x</em>, <em>y0</em>, <em>y1</em> tuples, forming rows in a table. Entries for alpha are optional.</p> <p>Example: suppose you want red to increase from 0 to 1 over the bottom half, green to do the same over the middle half, and blue over the top half. Then you would use:</p> <pre data-language=\"python\">cdict = {'red':   [(0.0,  0.0, 0.0),\n                   (0.5,  1.0, 1.0),\n                   (1.0,  1.0, 1.0)],\n\n         'green': [(0.0,  0.0, 0.0),\n                   (0.25, 0.0, 0.0),\n                   (0.75, 1.0, 1.0),\n                   (1.0,  1.0, 1.0)],\n\n         'blue':  [(0.0,  0.0, 0.0),\n                   (0.5,  0.0, 0.0),\n                   (1.0,  1.0, 1.0)]}\n</pre> <p>Each row in the table for a given color is a sequence of <em>x</em>, <em>y0</em>, <em>y1</em> tuples. In each sequence, <em>x</em> must increase monotonically from 0 to 1. For any input value <em>z</em> falling between <em>x[i]</em> and <em>x[i+1]</em>, the output value of a given color will be linearly interpolated between <em>y1[i]</em> and <em>y0[i+1]</em>:</p> <pre data-language=\"python\">row i:   x  y0  y1\n               /\n              /\nrow i+1: x  y0  y1\n</pre> <p>Hence y0 in the first row and y1 in the last row are never used.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p><a class=\"reference internal\" href=\"#matplotlib.colors.LinearSegmentedColormap.from_list\" title=\"matplotlib.colors.LinearSegmentedColormap.from_list\"><code>LinearSegmentedColormap.from_list()</code></a> Static method; factory function for generating a smoothly-varying LinearSegmentedColormap.</p> <p class=\"last\"><a class=\"reference internal\" href=\"#matplotlib.colors.makeMappingArray\" title=\"matplotlib.colors.makeMappingArray\"><code>makeMappingArray()</code></a> For information about making a mapping array.</p> </div> <dl class=\"staticmethod\"> <dt id=\"matplotlib.colors.LinearSegmentedColormap.from_list\"><code>static from_list(name, colors, N=256, gamma=1.0)</code></dt> <dd>\n<p>Make a linear segmented colormap with <em>name</em> from a sequence of <em>colors</em> which evenly transitions from colors[0] at val=0 to colors[-1] at val=1. <em>N</em> is the number of rgb quantization levels. Alternatively, a list of (value, color) tuples can be given to divide the range unevenly.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.LinearSegmentedColormap.set_gamma\"><code>set_gamma(gamma)</code></dt> <dd>\n<p>Set a new gamma value and regenerate color map.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.ListedColormap\"><code>class matplotlib.colors.ListedColormap(colors, name='from_list', N=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a></p> <p>Colormap object generated from a list of colors.</p> <p>This may be most useful when indexing directly into a colormap, but it can also be used to generate special colormaps for ordinary mapping.</p> <p>Make a colormap from a list of colors.</p> <dl class=\"docutils\"> <dt><em>colors</em></dt> <dd>a list of matplotlib color specifications, or an equivalent Nx3 or Nx4 floating point array (<em>N</em> rgb or rgba values)</dd> <dt><em>name</em></dt> <dd>a string to identify the colormap</dd> <dt><em>N</em></dt> <dd>\n<p class=\"first\">the number of entries in the map. The default is <em>None</em>, in which case there is one colormap entry for each element in the list of colors. If:</p> <pre data-language=\"python\">N &lt; len(colors)\n</pre> <p>the list will be truncated at <em>N</em>. If:</p> <pre data-language=\"python\">N &gt; len(colors)\n</pre> <p class=\"last\">the list will be extended by repetition.</p> </dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.LogNorm\"><code>class matplotlib.colors.LogNorm(vmin=None, vmax=None, clip=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a></p> <p>Normalize a given value to the 0-1 range on a log scale</p> <p>If <em>vmin</em> or <em>vmax</em> is not given, they are initialized from the minimum and maximum value respectively of the first input processed. That is, <em>__call__(A)</em> calls <em>autoscale_None(A)</em>. If <em>clip</em> is <em>True</em> and the given value falls outside the range, the returned value will be 0 or 1, whichever is closer. Returns 0 if:</p> <pre data-language=\"python\">vmin==vmax\n</pre> <p>Works with scalars or arrays, including masked arrays. If <em>clip</em> is <em>True</em>, masked values are set to 1; otherwise they remain masked. Clipping silently defeats the purpose of setting the over, under, and masked colors in the colormap, so it is likely to lead to surprises; therefore the default is <em>clip</em> = <em>False</em>.</p> <dl class=\"method\"> <dt id=\"matplotlib.colors.LogNorm.autoscale\"><code>autoscale(A)</code></dt> <dd>\n<p>Set <em>vmin</em>, <em>vmax</em> to min, max of <em>A</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.LogNorm.autoscale_None\"><code>autoscale_None(A)</code></dt> <dd>\n<p>autoscale only None-valued vmin or vmax</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.LogNorm.inverse\"><code>inverse(value)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.NoNorm\"><code>class matplotlib.colors.NoNorm(vmin=None, vmax=None, clip=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a></p> <p>Dummy replacement for Normalize, for the case where we want to use indices directly in a <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> .</p> <p>If <em>vmin</em> or <em>vmax</em> is not given, they are initialized from the minimum and maximum value respectively of the first input processed. That is, <em>__call__(A)</em> calls <em>autoscale_None(A)</em>. If <em>clip</em> is <em>True</em> and the given value falls outside the range, the returned value will be 0 or 1, whichever is closer. Returns 0 if:</p> <pre data-language=\"python\">vmin==vmax\n</pre> <p>Works with scalars or arrays, including masked arrays. If <em>clip</em> is <em>True</em>, masked values are set to 1; otherwise they remain masked. Clipping silently defeats the purpose of setting the over, under, and masked colors in the colormap, so it is likely to lead to surprises; therefore the default is <em>clip</em> = <em>False</em>.</p> <dl class=\"method\"> <dt id=\"matplotlib.colors.NoNorm.inverse\"><code>inverse(value)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.Normalize\"><code>class matplotlib.colors.Normalize(vmin=None, vmax=None, clip=False)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A class which, when called, can normalize data into the <code>[0.0, 1.0]</code> interval.</p> <p>If <em>vmin</em> or <em>vmax</em> is not given, they are initialized from the minimum and maximum value respectively of the first input processed. That is, <em>__call__(A)</em> calls <em>autoscale_None(A)</em>. If <em>clip</em> is <em>True</em> and the given value falls outside the range, the returned value will be 0 or 1, whichever is closer. Returns 0 if:</p> <pre data-language=\"python\">vmin==vmax\n</pre> <p>Works with scalars or arrays, including masked arrays. If <em>clip</em> is <em>True</em>, masked values are set to 1; otherwise they remain masked. Clipping silently defeats the purpose of setting the over, under, and masked colors in the colormap, so it is likely to lead to surprises; therefore the default is <em>clip</em> = <em>False</em>.</p> <dl class=\"method\"> <dt id=\"matplotlib.colors.Normalize.autoscale\"><code>autoscale(A)</code></dt> <dd>\n<p>Set <em>vmin</em>, <em>vmax</em> to min, max of <em>A</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.Normalize.autoscale_None\"><code>autoscale_None(A)</code></dt> <dd>\n<p>autoscale only None-valued vmin or vmax</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.Normalize.inverse\"><code>inverse(value)</code></dt> \n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.colors.Normalize.process_value\"><code>static process_value(value)</code></dt> <dd>\n<p>Homogenize the input <em>value</em> for easy and efficient normalization.</p> <p><em>value</em> can be a scalar or sequence.</p> <p>Returns <em>result</em>, <em>is_scalar</em>, where <em>result</em> is a masked array matching <em>value</em>. Float dtypes are preserved; integer types with two bytes or smaller are converted to np.float32, and larger types are converted to np.float. Preserving float32 when possible, and using in-place operations, can greatly improve speed for large arrays.</p> <p>Experimental; we may want to add an option to force the use of float32.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.Normalize.scaled\"><code>scaled()</code></dt> <dd>\n<p>return true if vmin and vmax set</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.PowerNorm\"><code>class matplotlib.colors.PowerNorm(gamma, vmin=None, vmax=None, clip=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a></p> <p>Normalize a given value to the <code>[0, 1]</code> interval with a power-law scaling. This will clip any negative data points to 0.</p> <dl class=\"method\"> <dt id=\"matplotlib.colors.PowerNorm.autoscale\"><code>autoscale(A)</code></dt> <dd>\n<p>Set <em>vmin</em>, <em>vmax</em> to min, max of <em>A</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.PowerNorm.autoscale_None\"><code>autoscale_None(A)</code></dt> <dd>\n<p>autoscale only None-valued vmin or vmax</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.PowerNorm.inverse\"><code>inverse(value)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.colors.SymLogNorm\"><code>class matplotlib.colors.SymLogNorm(linthresh, linscale=1.0, vmin=None, vmax=None, clip=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a></p> <p>The symmetrical logarithmic scale is logarithmic in both the positive and negative directions from the origin.</p> <p>Since the values close to zero tend toward infinity, there is a need to have a range around zero that is linear. The parameter <em>linthresh</em> allows the user to specify the size of this range (-<em>linthresh</em>, <em>linthresh</em>).</p> <p><em>linthresh</em>: The range within which the plot is linear (to avoid having the plot go to infinity around zero).</p> <p><em>linscale</em>: This allows the linear range (-<em>linthresh</em> to <em>linthresh</em>) to be stretched relative to the logarithmic range. Its value is the number of decades to use for each half of the linear range. For example, when <em>linscale</em> == 1.0 (the default), the space used for the positive and negative halves of the linear range will be equal to one decade in the logarithmic range. Defaults to 1.</p> <dl class=\"method\"> <dt id=\"matplotlib.colors.SymLogNorm.autoscale\"><code>autoscale(A)</code></dt> <dd>\n<p>Set <em>vmin</em>, <em>vmax</em> to min, max of <em>A</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.SymLogNorm.autoscale_None\"><code>autoscale_None(A)</code></dt> <dd>\n<p>autoscale only None-valued vmin or vmax</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.colors.SymLogNorm.inverse\"><code>inverse(value)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colors.from_levels_and_colors\"><code>matplotlib.colors.from_levels_and_colors(levels, colors, extend='neither')</code></dt> <dd>\n<p>A helper routine to generate a cmap and a norm instance which behave similar to contourf’s levels and colors arguments.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>levels</strong> : sequence of numbers</p> <blockquote> <div>\n<p>The quantization levels used to construct the <a class=\"reference internal\" href=\"#matplotlib.colors.BoundaryNorm\" title=\"matplotlib.colors.BoundaryNorm\"><code>BoundaryNorm</code></a>. Values <code>v</code> are quantizized to level <code>i</code> if <code>lev[i] &lt;= v &lt; lev[i+1]</code>.</p> </div>\n</blockquote> <p><strong>colors</strong> : sequence of colors</p> <blockquote> <div>\n<p>The fill color to use for each level. If <code>extend</code> is “neither” there must be <code>n_level - 1</code> colors. For an <code>extend</code> of “min” or “max” add one extra color, and for an <code>extend</code> of “both” add two colors.</p> </div>\n</blockquote> <p><strong>extend</strong> : {‘neither’, ‘min’, ‘max’, ‘both’}, optional</p> <blockquote> <div>\n<p>The behaviour when a value falls out of range of the given levels. See <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> for details.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>(cmap, norm)</strong> : tuple containing a <a class=\"reference internal\" href=\"#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> and a <a class=\"reference internal\" href=\"#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a> instance</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colors.hex2color\"><code>matplotlib.colors.hex2color(s)</code></dt> <dd>\n<p>Take a hex string <em>s</em> and return the corresponding rgb 3-tuple Example: #efefef -&gt; (0.93725, 0.93725, 0.93725)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colors.hsv_to_rgb\"><code>matplotlib.colors.hsv_to_rgb(hsv)</code></dt> <dd>\n<p>convert hsv values in a numpy array to rgb values all values assumed to be in range [0, 1]</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>hsv</strong> : (..., 3) array-like</p> <blockquote> <div>\n<p>All values assumed to be in range [0, 1]</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rgb</strong> : (..., 3) ndarray</p> <blockquote class=\"last\"> <div>\n<p>Colors converted to RGB values in range [0, 1]</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colors.is_color_like\"><code>matplotlib.colors.is_color_like(c)</code></dt> <dd>\n<p>Return <em>True</em> if <em>c</em> can be converted to <em>RGB</em></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colors.makeMappingArray\"><code>matplotlib.colors.makeMappingArray(N, data, gamma=1.0)</code></dt> <dd>\n<p>Create an <em>N</em> -element 1-d lookup table</p> <p><em>data</em> represented by a list of x,y0,y1 mapping correspondences. Each element in this list represents how a value between 0 and 1 (inclusive) represented by x is mapped to a corresponding value between 0 and 1 (inclusive). The two values of y are to allow for discontinuous mapping functions (say as might be found in a sawtooth) where y0 represents the value of y for values of x &lt;= to that given, and y1 is the value to be used for x &gt; than that given). The list must start with x=0, end with x=1, and all values of x must be in increasing order. Values between the given mapping points are determined by simple linear interpolation.</p> <p>Alternatively, data can be a function mapping values between 0 - 1 to 0 - 1.</p> <p>The function returns an array “result” where <code>result[x*(N-1)]</code> gives the closest value for values of x between 0 and 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colors.rgb2hex\"><code>matplotlib.colors.rgb2hex(rgb)</code></dt> <dd>\n<p>Given an rgb or rgba sequence of 0-1 floats, return the hex string</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.colors.rgb_to_hsv\"><code>matplotlib.colors.rgb_to_hsv(arr)</code></dt> <dd>\n<p>convert float rgb values (in the range [0, 1]), in a numpy array to hsv values.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>arr</strong> : (..., 3) array-like</p> <blockquote> <div>\n<p>All values must be in the range [0, 1]</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>hsv</strong> : (..., 3) ndarray</p> <blockquote class=\"last\"> <div>\n<p>Colors converted to hsv values in range [0, 1]</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/colors_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/colors_api.html</a>\n  </p>\n</div>\n","finance_api":"<h1 id=\"finance\">finance</h1>  <h2 id=\"matplotlib-finance\">matplotlib.finance</h2> <p id=\"module-matplotlib.finance\">A collection of functions for collecting, analyzing and plotting financial data. User contributions welcome!</p> <p>This module is deprecated in 1.4 and will be moved to <code>mpl_toolkits</code> or it’s own project in the future.</p> <dl class=\"function\"> <dt id=\"matplotlib.finance.candlestick2_ochl\"><code>matplotlib.finance.candlestick2_ochl(ax, opens, closes, highs, lows, width=4, colorup='k', colordown='r', alpha=0.75)</code></dt> <dd>\n<p>Represent the open, close as a bar line and high low range as a vertical line.</p> <p>Preserves the original argument order.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>opens</strong> : sequence</p> <blockquote> <div>\n<p>sequence of opening values</p> </div>\n</blockquote> <p><strong>closes</strong> : sequence</p> <blockquote> <div>\n<p>sequence of closing values</p> </div>\n</blockquote> <p><strong>highs</strong> : sequence</p> <blockquote> <div>\n<p>sequence of high values</p> </div>\n</blockquote> <p><strong>lows</strong> : sequence</p> <blockquote> <div>\n<p>sequence of low values</p> </div>\n</blockquote> <p><strong>ticksize</strong> : int</p> <blockquote> <div>\n<p>size of open and close ticks in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &lt; open</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>bar transparency</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : tuple</p> <blockquote class=\"last\"> <div>\n<p>(lineCollection, barCollection)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.candlestick2_ohlc\"><code>matplotlib.finance.candlestick2_ohlc(ax, opens, highs, lows, closes, width=4, colorup='k', colordown='r', alpha=0.75)</code></dt> <dd>\n<p>Represent the open, close as a bar line and high low range as a vertical line.</p> <p>NOTE: this code assumes if any value open, low, high, close is missing they all are missing</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>opens</strong> : sequence</p> <blockquote> <div>\n<p>sequence of opening values</p> </div>\n</blockquote> <p><strong>highs</strong> : sequence</p> <blockquote> <div>\n<p>sequence of high values</p> </div>\n</blockquote> <p><strong>lows</strong> : sequence</p> <blockquote> <div>\n<p>sequence of low values</p> </div>\n</blockquote> <p><strong>closes</strong> : sequence</p> <blockquote> <div>\n<p>sequence of closing values</p> </div>\n</blockquote> <p><strong>ticksize</strong> : int</p> <blockquote> <div>\n<p>size of open and close ticks in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &lt; open</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>bar transparency</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : tuple</p> <blockquote class=\"last\"> <div>\n<p>(lineCollection, barCollection)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.candlestick_ochl\"><code>matplotlib.finance.candlestick_ochl(ax, quotes, width=0.2, colorup='k', colordown='r', alpha=1.0)</code></dt> <dd>\n<p>Plot the time, open, close, high, low as a vertical line ranging from low to high. Use a rectangular bar to represent the open-close span. If close &gt;= open, use colorup to color the bar, otherwise use colordown</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>quotes</strong> : sequence of (time, open, close, high, low, ...) sequences</p> <blockquote> <div>\n<p>As long as the first 5 elements are these values, the record can be as long as you want (e.g., it may store volume).</p> <p>time must be in float days format - see date2num</p> </div>\n</blockquote> <p><strong>width</strong> : float</p> <blockquote> <div>\n<p>fraction of a day for the rectangle width</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the rectangle where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the rectangle where close &lt; open</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>the rectangle alpha level</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : tuple</p> <blockquote class=\"last\"> <div>\n<p>returns (lines, patches) where lines is a list of lines added and patches is a list of the rectangle patches added</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.candlestick_ohlc\"><code>matplotlib.finance.candlestick_ohlc(ax, quotes, width=0.2, colorup='k', colordown='r', alpha=1.0)</code></dt> <dd>\n<p>Plot the time, open, high, low, close as a vertical line ranging from low to high. Use a rectangular bar to represent the open-close span. If close &gt;= open, use colorup to color the bar, otherwise use colordown</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>quotes</strong> : sequence of (time, open, high, low, close, ...) sequences</p> <blockquote> <div>\n<p>As long as the first 5 elements are these values, the record can be as long as you want (e.g., it may store volume).</p> <p>time must be in float days format - see date2num</p> </div>\n</blockquote> <p><strong>width</strong> : float</p> <blockquote> <div>\n<p>fraction of a day for the rectangle width</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the rectangle where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the rectangle where close &lt; open</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>the rectangle alpha level</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : tuple</p> <blockquote class=\"last\"> <div>\n<p>returns (lines, patches) where lines is a list of lines added and patches is a list of the rectangle patches added</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.fetch_historical_yahoo\"><code>matplotlib.finance.fetch_historical_yahoo(ticker, date1, date2, cachename=None, dividends=False)</code></dt> <dd>\n<p>Fetch historical data for ticker between date1 and date2. date1 and date2 are date or datetime instances, or (year, month, day) sequences.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ticker</strong> : str</p> <blockquote> <div>\n<p>ticker</p> </div>\n</blockquote> <p><strong>date1</strong> : sequence of form (year, month, day), <code>datetime</code>, or <code>date</code></p> <blockquote> <div>\n<p>start date</p> </div>\n</blockquote> <p><strong>date2</strong> : sequence of form (year, month, day), <code>datetime</code>, or <code>date</code></p> <blockquote> <div>\n<p>end date</p> </div>\n</blockquote> <p><strong>cachename</strong> : str</p> <blockquote> <div>\n<p>cachename is the name of the local file cache. If None, will default to the md5 hash or the url (which incorporates the ticker and date range)</p> </div>\n</blockquote> <p><strong>dividends</strong> : bool</p> <blockquote> <div>\n<p>set dividends=True to return dividends instead of price data. With this option set, parse functions will not work</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>file_handle</strong> : file handle</p> <blockquote class=\"last\"> <div>\n<p>a file handle is returned</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <pre data-language=\"python\">&gt;&gt;&gt; fh = fetch_historical_yahoo('^GSPC', (2000, 1, 1), (2001, 12, 31))\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.index_bar\"><code>matplotlib.finance.index_bar(ax, vals, facecolor='b', edgecolor='l', width=4, alpha=1.0)</code></dt> <dd>\n<p>Add a bar collection graph with height vals (-1 is missing).</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>vals</strong> : sequence</p> <blockquote> <div>\n<p>a sequence of values</p> </div>\n</blockquote> <p><strong>facecolor</strong> : color</p> <blockquote> <div>\n<p>the color of the bar face</p> </div>\n</blockquote> <p><strong>edgecolor</strong> : color</p> <blockquote> <div>\n<p>the color of the bar edges</p> </div>\n</blockquote> <p><strong>width</strong> : int</p> <blockquote> <div>\n<p>the bar width in points</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>bar transparency</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : <code>barCollection</code></p> <blockquote class=\"last\"> <div>\n<p>The <code>barrCollection</code> added to the axes</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.md5\"><code>matplotlib.finance.md5(x)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.parse_yahoo_historical_ochl\"><code>matplotlib.finance.parse_yahoo_historical_ochl(fh, adjusted=True, asobject=False)</code></dt> <dd>\n<p>Parse the historical data in file handle fh from yahoo finance.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>adjusted</strong> : bool</p> <blockquote> <div>\n<p>If True (default) replace open, close, high, low prices with their adjusted values. The adjustment is by a scale factor, S = adjusted_close/close. Adjusted prices are actual prices multiplied by S.</p> <p>Volume is not adjusted as it is already backward split adjusted by Yahoo. If you want to compute dollars traded, multiply volume by the adjusted close, regardless of whether you choose adjusted = True|False.</p> </div>\n</blockquote> <p><strong>asobject</strong> : bool or None</p> <blockquote class=\"last\"> <div>\n<p>If False (default for compatibility with earlier versions) return a list of tuples containing</p> <blockquote> <div>\n<p>d, open, close, high, low, volume</p> </div>\n</blockquote> <p>If None (preferred alternative to False), return a 2-D ndarray corresponding to the list of tuples.</p> <p>Otherwise return a numpy recarray with</p> <blockquote> <div>\n<p>date, year, month, day, d, open, close, high, low, volume, adjusted_close</p> </div>\n</blockquote> <p>where d is a floating poing representation of date, as returned by date2num, and date is a python standard library datetime.date instance.</p> <p>The name of this kwarg is a historical artifact. Formerly, True returned a cbook Bunch holding 1-D ndarrays. The behavior of a numpy recarray is very similar to the Bunch.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.parse_yahoo_historical_ohlc\"><code>matplotlib.finance.parse_yahoo_historical_ohlc(fh, adjusted=True, asobject=False)</code></dt> <dd>\n<p>Parse the historical data in file handle fh from yahoo finance.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>adjusted</strong> : bool</p> <blockquote> <div>\n<p>If True (default) replace open, high, low, close prices with their adjusted values. The adjustment is by a scale factor, S = adjusted_close/close. Adjusted prices are actual prices multiplied by S.</p> <p>Volume is not adjusted as it is already backward split adjusted by Yahoo. If you want to compute dollars traded, multiply volume by the adjusted close, regardless of whether you choose adjusted = True|False.</p> </div>\n</blockquote> <p><strong>asobject</strong> : bool or None</p> <blockquote class=\"last\"> <div>\n<p>If False (default for compatibility with earlier versions) return a list of tuples containing</p> <blockquote> <div>\n<p>d, open, high, low, close, volume</p> </div>\n</blockquote> <p>If None (preferred alternative to False), return a 2-D ndarray corresponding to the list of tuples.</p> <p>Otherwise return a numpy recarray with</p> <blockquote> <div>\n<p>date, year, month, day, d, open, high, low, close, volume, adjusted_close</p> </div>\n</blockquote> <p>where d is a floating poing representation of date, as returned by date2num, and date is a python standard library datetime.date instance.</p> <p>The name of this kwarg is a historical artifact. Formerly, True returned a cbook Bunch holding 1-D ndarrays. The behavior of a numpy recarray is very similar to the Bunch.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.plot_day_summary2_ochl\"><code>matplotlib.finance.plot_day_summary2_ochl(ax, opens, closes, highs, lows, ticksize=4, colorup='k', colordown='r')</code></dt> <dd>\n<p>Represent the time, open, close, high, low, as a vertical line ranging from low to high. The left tick is the open and the right tick is the close.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>opens</strong> : sequence</p> <blockquote> <div>\n<p>sequence of opening values</p> </div>\n</blockquote> <p><strong>closes</strong> : sequence</p> <blockquote> <div>\n<p>sequence of closing values</p> </div>\n</blockquote> <p><strong>highs</strong> : sequence</p> <blockquote> <div>\n<p>sequence of high values</p> </div>\n</blockquote> <p><strong>lows</strong> : sequence</p> <blockquote> <div>\n<p>sequence of low values</p> </div>\n</blockquote> <p><strong>ticksize</strong> : int</p> <blockquote> <div>\n<p>size of open and close ticks in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &lt; open</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : list</p> <blockquote class=\"last\"> <div>\n<p>a list of lines added to the axes</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.plot_day_summary2_ohlc\"><code>matplotlib.finance.plot_day_summary2_ohlc(ax, opens, highs, lows, closes, ticksize=4, colorup='k', colordown='r')</code></dt> <dd>\n<p>Represent the time, open, high, low, close as a vertical line ranging from low to high. The left tick is the open and the right tick is the close. <em>opens</em>, <em>highs</em>, <em>lows</em> and <em>closes</em> must have the same length. NOTE: this code assumes if any value open, high, low, close is missing (<em>-1</em>) they all are missing</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>opens</strong> : sequence</p> <blockquote> <div>\n<p>sequence of opening values</p> </div>\n</blockquote> <p><strong>highs</strong> : sequence</p> <blockquote> <div>\n<p>sequence of high values</p> </div>\n</blockquote> <p><strong>lows</strong> : sequence</p> <blockquote> <div>\n<p>sequence of low values</p> </div>\n</blockquote> <p><strong>closes</strong> : sequence</p> <blockquote> <div>\n<p>sequence of closing values</p> </div>\n</blockquote> <p><strong>ticksize</strong> : int</p> <blockquote> <div>\n<p>size of open and close ticks in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &lt; open</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : list</p> <blockquote class=\"last\"> <div>\n<p>a list of lines added to the axes</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.plot_day_summary_oclh\"><code>matplotlib.finance.plot_day_summary_oclh(ax, quotes, ticksize=3, colorup='k', colordown='r')</code></dt> <dd>\n<p>Plots day summary</p> <blockquote> <div>Represent the time, open, close, high, low as a vertical line ranging from low to high. The left tick is the open and the right tick is the close.</div>\n</blockquote> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an <code>Axes</code> instance to plot to</p> </div>\n</blockquote> <p><strong>quotes</strong> : sequence of (time, open, close, high, low, ...) sequences</p> <blockquote> <div>\n<p>data to plot. time must be in float date format - see date2num</p> </div>\n</blockquote> <p><strong>ticksize</strong> : int</p> <blockquote> <div>\n<p>open/close tick marker in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &lt; open</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>lines</strong> : list</p> <blockquote class=\"last\"> <div>\n<p>list of tuples of the lines added (one tuple per quote)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.plot_day_summary_ohlc\"><code>matplotlib.finance.plot_day_summary_ohlc(ax, quotes, ticksize=3, colorup='k', colordown='r')</code></dt> <dd>\n<p>Plots day summary</p> <blockquote> <div>Represent the time, open, high, low, close as a vertical line ranging from low to high. The left tick is the open and the right tick is the close.</div>\n</blockquote> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an <code>Axes</code> instance to plot to</p> </div>\n</blockquote> <p><strong>quotes</strong> : sequence of (time, open, high, low, close, ...) sequences</p> <blockquote> <div>\n<p>data to plot. time must be in float date format - see date2num</p> </div>\n</blockquote> <p><strong>ticksize</strong> : int</p> <blockquote> <div>\n<p>open/close tick marker in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &lt; open</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>lines</strong> : list</p> <blockquote class=\"last\"> <div>\n<p>list of tuples of the lines added (one tuple per quote)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.quotes_historical_yahoo_ochl\"><code>matplotlib.finance.quotes_historical_yahoo_ochl(ticker, date1, date2, asobject=False, adjusted=True, cachename=None)</code></dt> <dd>\n<p>Get historical data for ticker between date1 and date2.</p> <p>See <code>parse_yahoo_historical()</code> for explanation of output formats and the <em>asobject</em> and <em>adjusted</em> kwargs.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ticker</strong> : str</p> <blockquote> <div>\n<p>stock ticker</p> </div>\n</blockquote> <p><strong>date1</strong> : sequence of form (year, month, day), <code>datetime</code>, or <code>date</code></p> <blockquote> <div>\n<p>start date</p> </div>\n</blockquote> <p><strong>date2</strong> : sequence of form (year, month, day), <code>datetime</code>, or <code>date</code></p> <blockquote> <div>\n<p>end date</p> </div>\n</blockquote> <p><strong>cachename</strong> : str or <code>None</code></p> <blockquote class=\"last\"> <div>\n<p>is the name of the local file cache. If None, will default to the md5 hash or the url (which incorporates the ticker and date range)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <pre data-language=\"python\">&gt;&gt;&gt; sp = f.quotes_historical_yahoo_ochl('^GSPC', d1, d2,\n                         asobject=True, adjusted=True)\n&gt;&gt;&gt; returns = (sp.open[1:] - sp.open[:-1])/sp.open[1:]\n&gt;&gt;&gt; [n,bins,patches] = hist(returns, 100)\n&gt;&gt;&gt; mu = mean(returns)\n&gt;&gt;&gt; sigma = std(returns)\n&gt;&gt;&gt; x = normpdf(bins, mu, sigma)\n&gt;&gt;&gt; plot(bins, x, color='red', lw=2)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.quotes_historical_yahoo_ohlc\"><code>matplotlib.finance.quotes_historical_yahoo_ohlc(ticker, date1, date2, asobject=False, adjusted=True, cachename=None)</code></dt> <dd>\n<p>Get historical data for ticker between date1 and date2.</p> <p>See <code>parse_yahoo_historical()</code> for explanation of output formats and the <em>asobject</em> and <em>adjusted</em> kwargs.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ticker</strong> : str</p> <blockquote> <div>\n<p>stock ticker</p> </div>\n</blockquote> <p><strong>date1</strong> : sequence of form (year, month, day), <code>datetime</code>, or <code>date</code></p> <blockquote> <div>\n<p>start date</p> </div>\n</blockquote> <p><strong>date2</strong> : sequence of form (year, month, day), <code>datetime</code>, or <code>date</code></p> <blockquote> <div>\n<p>end date</p> </div>\n</blockquote> <p><strong>cachename</strong> : str or <code>None</code></p> <blockquote class=\"last\"> <div>\n<p>is the name of the local file cache. If None, will default to the md5 hash or the url (which incorporates the ticker and date range)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <pre data-language=\"python\">&gt;&gt;&gt; sp = f.quotes_historical_yahoo_ohlc('^GSPC', d1, d2,\n                         asobject=True, adjusted=True)\n&gt;&gt;&gt; returns = (sp.open[1:] - sp.open[:-1])/sp.open[1:]\n&gt;&gt;&gt; [n,bins,patches] = hist(returns, 100)\n&gt;&gt;&gt; mu = mean(returns)\n&gt;&gt;&gt; sigma = std(returns)\n&gt;&gt;&gt; x = normpdf(bins, mu, sigma)\n&gt;&gt;&gt; plot(bins, x, color='red', lw=2)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.volume_overlay\"><code>matplotlib.finance.volume_overlay(ax, opens, closes, volumes, colorup='k', colordown='r', width=4, alpha=1.0)</code></dt> <dd>\n<p>Add a volume overlay to the current axes. The opens and closes are used to determine the color of the bar. -1 is missing. If a value is missing on one it must be missing on all</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>opens</strong> : sequence</p> <blockquote> <div>\n<p>a sequence of opens</p> </div>\n</blockquote> <p><strong>closes</strong> : sequence</p> <blockquote> <div>\n<p>a sequence of closes</p> </div>\n</blockquote> <p><strong>volumes</strong> : sequence</p> <blockquote> <div>\n<p>a sequence of volumes</p> </div>\n</blockquote> <p><strong>width</strong> : int</p> <blockquote> <div>\n<p>the bar width in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &lt; open</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>bar transparency</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : <code>barCollection</code></p> <blockquote class=\"last\"> <div>\n<p>The <code>barrCollection</code> added to the axes</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.volume_overlay2\"><code>matplotlib.finance.volume_overlay2(ax, closes, volumes, colorup='k', colordown='r', width=4, alpha=1.0)</code></dt> <dd>\n<p>Add a volume overlay to the current axes. The closes are used to determine the color of the bar. -1 is missing. If a value is missing on one it must be missing on all</p> <p>nb: first point is not displayed - it is used only for choosing the right color</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>closes</strong> : sequence</p> <blockquote> <div>\n<p>a sequence of closes</p> </div>\n</blockquote> <p><strong>volumes</strong> : sequence</p> <blockquote> <div>\n<p>a sequence of volumes</p> </div>\n</blockquote> <p><strong>width</strong> : int</p> <blockquote> <div>\n<p>the bar width in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &gt;= open</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close &lt; open</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>bar transparency</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : <code>barCollection</code></p> <blockquote class=\"last\"> <div>\n<p>The <code>barrCollection</code> added to the axes</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.finance.volume_overlay3\"><code>matplotlib.finance.volume_overlay3(ax, quotes, colorup='k', colordown='r', width=4, alpha=1.0)</code></dt> <dd>\n<p>Add a volume overlay to the current axes. quotes is a list of (d, open, high, low, close, volume) and close-open is used to determine the color of the bar</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <code>Axes</code></p> <blockquote> <div>\n<p>an Axes instance to plot to</p> </div>\n</blockquote> <p><strong>quotes</strong> : sequence of (time, open, high, low, close, ...) sequences</p> <blockquote> <div>\n<p>data to plot. time must be in float date format - see date2num</p> </div>\n</blockquote> <p><strong>width</strong> : int</p> <blockquote> <div>\n<p>the bar width in points</p> </div>\n</blockquote> <p><strong>colorup</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close1 &gt;= close0</p> </div>\n</blockquote> <p><strong>colordown</strong> : color</p> <blockquote> <div>\n<p>the color of the lines where close1 &lt; close0</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>bar transparency</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : <code>barCollection</code></p> <blockquote class=\"last\"> <div>\n<p>The <code>barrCollection</code> added to the axes</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/finance_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/finance_api.html</a>\n  </p>\n</div>\n","cbook_api":"<h1 id=\"cbook\">cbook</h1>  <h2 id=\"matplotlib-cbook\">matplotlib.cbook</h2> <p id=\"module-matplotlib.cbook\">A collection of utility functions and classes. Originally, many (but not all) were from the Python Cookbook – hence the name cbook.</p> <p>This module is safe to import from anywhere within matplotlib; it imports matplotlib only at runtime.</p> <dl class=\"class\"> <dt id=\"matplotlib.cbook.Bunch\"><code>class matplotlib.cbook.Bunch(**kwds)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Often we want to just collect a bunch of stuff together, naming each item of the bunch; a dictionary’s OK for that, but a small do- nothing class is even handier, and prettier to use. Whenever you want to group a few variables:</p> <pre data-language=\"python\">&gt;&gt;&gt; point = Bunch(datum=2, squared=4, coord=12)\n&gt;&gt;&gt; point.datum\n\nBy: Alex Martelli\nFrom: http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52308\n</pre> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.CallbackRegistry\"><code>class matplotlib.cbook.CallbackRegistry</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Handle registering and disconnecting for a set of signals and callbacks:</p> <pre data-language=\"python\">&gt;&gt;&gt; def oneat(x):\n...    print('eat', x)\n&gt;&gt;&gt; def ondrink(x):\n...    print('drink', x)\n</pre> <pre data-language=\"python\">&gt;&gt;&gt; from matplotlib.cbook import CallbackRegistry\n&gt;&gt;&gt; callbacks = CallbackRegistry()\n</pre> <pre data-language=\"python\">&gt;&gt;&gt; id_eat = callbacks.connect('eat', oneat)\n&gt;&gt;&gt; id_drink = callbacks.connect('drink', ondrink)\n</pre> <pre data-language=\"python\">&gt;&gt;&gt; callbacks.process('drink', 123)\ndrink 123\n&gt;&gt;&gt; callbacks.process('eat', 456)\neat 456\n&gt;&gt;&gt; callbacks.process('be merry', 456) # nothing will be called\n&gt;&gt;&gt; callbacks.disconnect(id_eat)\n&gt;&gt;&gt; callbacks.process('eat', 456)      # nothing will be called\n</pre> <p>In practice, one should always disconnect all callbacks when they are no longer needed to avoid dangling references (and thus memory leaks). However, real code in matplotlib rarely does so, and due to its design, it is rather difficult to place this kind of code. To get around this, and prevent this class of memory leaks, we instead store weak references to bound methods only, so when the destination object needs to die, the CallbackRegistry won’t keep it alive. The Python stdlib weakref module can not create weak references to bound methods directly, so we need to create a proxy object to handle weak references to bound methods (or regular free functions). This technique was shared by Peter Parente on his <a class=\"reference external\" href=\"http://mindtrove.info/articles/python-weak-references/\">“Mindtrove” blog</a>.</p> <dl class=\"method\"> <dt id=\"matplotlib.cbook.CallbackRegistry.connect\"><code>connect(s, func)</code></dt> <dd>\n<p>register <em>func</em> to be called when a signal <em>s</em> is generated func will be called</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.CallbackRegistry.disconnect\"><code>disconnect(cid)</code></dt> <dd>\n<p>disconnect the callback registered with callback id <em>cid</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.CallbackRegistry.process\"><code>process(s, *args, **kwargs)</code></dt> <dd>\n<p>process signal <em>s</em>. All of the functions registered to receive callbacks on <em>s</em> will be called with <em>*args</em> and <em>**kwargs</em></p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.GetRealpathAndStat\"><code>class matplotlib.cbook.GetRealpathAndStat</code></dt> <dd>\n<p>Bases: <code>object</code></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.Grouper\"><code>class matplotlib.cbook.Grouper(init=())</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>This class provides a lightweight way to group arbitrary objects together into disjoint sets when a full-blown graph data structure would be overkill.</p> <p>Objects can be joined using <a class=\"reference internal\" href=\"#matplotlib.cbook.Grouper.join\" title=\"matplotlib.cbook.Grouper.join\"><code>join()</code></a>, tested for connectedness using <a class=\"reference internal\" href=\"#matplotlib.cbook.Grouper.joined\" title=\"matplotlib.cbook.Grouper.joined\"><code>joined()</code></a>, and all disjoint sets can be retreived by using the object as an iterator.</p> <p>The objects being joined must be hashable and weak-referenceable.</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; from matplotlib.cbook import Grouper\n&gt;&gt;&gt; class Foo(object):\n...     def __init__(self, s):\n...         self.s = s\n...     def __repr__(self):\n...         return self.s\n...\n&gt;&gt;&gt; a, b, c, d, e, f = [Foo(x) for x in 'abcdef']\n&gt;&gt;&gt; grp = Grouper()\n&gt;&gt;&gt; grp.join(a, b)\n&gt;&gt;&gt; grp.join(b, c)\n&gt;&gt;&gt; grp.join(d, e)\n&gt;&gt;&gt; sorted(map(tuple, grp))\n[(a, b, c), (d, e)]\n&gt;&gt;&gt; grp.joined(a, b)\nTrue\n&gt;&gt;&gt; grp.joined(a, c)\nTrue\n&gt;&gt;&gt; grp.joined(a, d)\nFalse\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Grouper.clean\"><code>clean()</code></dt> <dd>\n<p>Clean dead weak references from the dictionary</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Grouper.get_siblings\"><code>get_siblings(a)</code></dt> <dd>\n<p>Returns all of the items joined with <em>a</em>, including itself.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Grouper.join\"><code>join(a, *args)</code></dt> <dd>\n<p>Join given arguments into the same set. Accepts one or more arguments.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Grouper.joined\"><code>joined(a, b)</code></dt> <dd>\n<p>Returns True if <em>a</em> and <em>b</em> are members of the same set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Grouper.remove\"><code>remove(a)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"matplotlib.cbook.IgnoredKeywordWarning\"><code>exception matplotlib.cbook.IgnoredKeywordWarning</code></dt> <dd>\n<p>Bases: <code>UserWarning</code></p> <p>A class for issuing warnings about keyword arguments that will be ignored by matplotlib</p> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"matplotlib.cbook.MatplotlibDeprecationWarning\"><code>exception matplotlib.cbook.MatplotlibDeprecationWarning</code></dt> <dd>\n<p>Bases: <code>UserWarning</code></p> <p>A class for issuing deprecation warnings for Matplotlib users.</p> <p>In light of the fact that Python builtin DeprecationWarnings are ignored by default as of Python 2.7 (see link below), this class was put in to allow for the signaling of deprecation, but via UserWarnings which are not ignored by default.</p> <p><a class=\"reference external\" href=\"http://docs.python.org/dev/whatsnew/2.7.html#the-future-for-python-2-x\">http://docs.python.org/dev/whatsnew/2.7.html#the-future-for-python-2-x</a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.MemoryMonitor\"><code>class matplotlib.cbook.MemoryMonitor(nmax=20000)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"method\"> <dt id=\"matplotlib.cbook.MemoryMonitor.clear\"><code>clear()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.MemoryMonitor.plot\"><code>plot(i0=0, isub=1, fig=None)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.MemoryMonitor.report\"><code>report(segments=4)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.MemoryMonitor.xy\"><code>xy(i0=0, isub=1)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.Null\"><code>class matplotlib.cbook.Null(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Null objects always and reliably “do nothing.”</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.RingBuffer\"><code>class matplotlib.cbook.RingBuffer(size_max)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>class that implements a not-yet-full buffer</p> <dl class=\"method\"> <dt id=\"matplotlib.cbook.RingBuffer.append\"><code>append(x)</code></dt> <dd>\n<p>append an element at the end of the buffer</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.RingBuffer.get\"><code>get()</code></dt> <dd>\n<p>Return a list of elements from the oldest to the newest.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.Sorter\"><code>class matplotlib.cbook.Sorter</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Sort by attribute or item</p> <p>Example usage:</p> <pre data-language=\"python\">sort = Sorter()\n\nlist = [(1, 2), (4, 8), (0, 3)]\ndict = [{'a': 3, 'b': 4}, {'a': 5, 'b': 2}, {'a': 0, 'b': 0},\n        {'a': 9, 'b': 9}]\n\nsort(list)       # default sort\nsort(list, 1)    # sort by index 1\nsort(dict, 'a')  # sort a list of dicts by key 'a'\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Sorter.byAttribute\"><code>byAttribute(data, attributename, inplace=1)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Sorter.byItem\"><code>byItem(data, itemindex=None, inplace=1)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Sorter.sort\"><code>sort(data, itemindex=None, inplace=1)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.Stack\"><code>class matplotlib.cbook.Stack(default=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Implement a stack where elements can be pushed on and you can move back and forth. But no pop. Should mimic home / back / forward in a browser</p> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Stack.back\"><code>back()</code></dt> <dd>\n<p>move the position back and return the current element</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Stack.bubble\"><code>bubble(o)</code></dt> <dd>\n<p>raise <em>o</em> to the top of the stack and return <em>o</em>. <em>o</em> must be in the stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Stack.clear\"><code>clear()</code></dt> <dd>\n<p>empty the stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Stack.empty\"><code>empty()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Stack.forward\"><code>forward()</code></dt> <dd>\n<p>move the position forward and return the current element</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Stack.home\"><code>home()</code></dt> <dd>\n<p>push the first element onto the top of the stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Stack.push\"><code>push(o)</code></dt> <dd>\n<p>push object onto stack at current position - all elements occurring later than the current position are discarded</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Stack.remove\"><code>remove(o)</code></dt> <dd>\n<p>remove element <em>o</em> from the stack</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.Xlator\"><code>class matplotlib.cbook.Xlator</code></dt> <dd>\n<p>Bases: <code>dict</code></p> <p>All-in-one multiple-string-substitution class</p> <p>Example usage:</p> <pre data-language=\"python\">text = \"Larry Wall is the creator of Perl\"\nadict = {\n\"Larry Wall\" : \"Guido van Rossum\",\n\"creator\" : \"Benevolent Dictator for Life\",\n\"Perl\" : \"Python\",\n}\n\nprint multiple_replace(adict, text)\n\nxlat = Xlator(adict)\nprint xlat.xlat(text)\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.cbook.Xlator.xlat\"><code>xlat(text)</code></dt> <dd>\n<p>Translate <em>text</em>, returns the modified text.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.align_iterators\"><code>matplotlib.cbook.align_iterators(func, *iterables)</code></dt> <dd>\n<p>This generator takes a bunch of iterables that are ordered by func It sends out ordered tuples:</p> <pre data-language=\"python\">(func(row), [rows from all iterators matching func(row)])\n</pre> <p>It is used by <a class=\"reference internal\" href=\"mlab_api#matplotlib.mlab.recs_join\" title=\"matplotlib.mlab.recs_join\"><code>matplotlib.mlab.recs_join()</code></a> to join record arrays</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.allequal\"><code>matplotlib.cbook.allequal(seq)</code></dt> <dd>\n<p>Return <em>True</em> if all elements of <em>seq</em> compare equal. If <em>seq</em> is 0 or 1 length, return <em>True</em></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.allpairs\"><code>matplotlib.cbook.allpairs(x)</code></dt> <dd>\n<p>return all possible pairs in sequence <em>x</em></p> <p>Condensed by Alex Martelli from this <a class=\"reference external\" href=\"http://groups.google.com/groups?q=all+pairs+group:*python*&amp;hl=en&amp;lr=&amp;ie=UTF-8&amp;selm=mailman.4028.1096403649.5135.python-list%40python.org&amp;rnum=1\">thread</a> on c.l.python</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.alltrue\"><code>matplotlib.cbook.alltrue(seq)</code></dt> <dd>\n<p>Return <em>True</em> if all elements of <em>seq</em> evaluate to <em>True</em>. If <em>seq</em> is empty, return <em>False</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.boxplot_stats\"><code>matplotlib.cbook.boxplot_stats(X, whis=1.5, bootstrap=None, labels=None)</code></dt> <dd>\n<p>Returns list of dictionaries of staticists to be use to draw a series of box and whisker plots. See the <code>Returns</code> section below to the required keys of the dictionary. Users can skip this function and pass a user- defined set of dictionaries to the new <code>axes.bxp</code> method instead of relying on MPL to do the calcs.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>X</strong> : array-like</p> <blockquote> <div>\n<p>Data that will be represented in the boxplots. Should have 2 or fewer dimensions.</p> </div>\n</blockquote> <p><strong>whis</strong> : float, string, or sequence (default = 1.5)</p> <blockquote> <div>\n<p>As a float, determines the reach of the whiskers past the first and third quartiles (e.g., Q3 + whis*IQR, QR = interquartile range, Q3-Q1). Beyond the whiskers, data are considered outliers and are plotted as individual points. Set this to an unreasonably high value to force the whiskers to show the min and max data. Alternatively, set this to an ascending sequence of percentile (e.g., [5, 95]) to set the whiskers at specific percentiles of the data. Finally, can <code>whis</code> be the string ‘range’ to force the whiskers to the min and max of the data. In the edge case that the 25th and 75th percentiles are equivalent, <code>whis</code> will be automatically set to ‘range’</p> </div>\n</blockquote> <p><strong>bootstrap</strong> : int or None (default)</p> <blockquote> <div>\n<p>Number of times the confidence intervals around the median should be bootstrapped (percentile method).</p> </div>\n</blockquote> <p><strong>labels</strong> : sequence</p> <blockquote> <div>\n<p>Labels for each dataset. Length must be compatible with dimensions of <code>X</code></p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>bxpstats</strong> : list of dict</p> <blockquote class=\"last\"> <div>\n<p>A list of dictionaries containing the results for each column of data. Keys of each dictionary are the following:</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Value Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>label</td> <td>tick label for the boxplot</td> </tr> <tr class=\"row-odd\">\n<td>mean</td> <td>arithemetic mean value</td> </tr> <tr class=\"row-even\">\n<td>med</td> <td>50th percentile</td> </tr> <tr class=\"row-odd\">\n<td>q1</td> <td>first quartile (25th percentile)</td> </tr> <tr class=\"row-even\">\n<td>q3</td> <td>third quartile (75th percentile)</td> </tr> <tr class=\"row-odd\">\n<td>cilo</td> <td>lower notch around the median</td> </tr> <tr class=\"row-even\">\n<td>cihi</td> <td>upper notch around the median</td> </tr> <tr class=\"row-odd\">\n<td>whislo</td> <td>end of the lower whisker</td> </tr> <tr class=\"row-even\">\n<td>whishi</td> <td>end of the upper whisker</td> </tr> <tr class=\"row-odd\">\n<td>fliers</td> <td>outliers</td> </tr> </tbody> </table> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>Non-bootstrapping approach to confidence interval uses Gaussian-based asymptotic approximation:</p> <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-1742f7b9ed.png\" class=\"center\"><p>General approach from: McGill, R., Tukey, J.W., and Larsen, W.A. (1978) “Variations of Boxplots”, The American Statistician, 32:12-16.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.converter\"><code>class matplotlib.cbook.converter(missing='Null', missingval=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Base class for handling string -&gt; python type with support for missing values</p> <dl class=\"method\"> <dt id=\"matplotlib.cbook.converter.is_missing\"><code>is_missing(s)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.dedent\"><code>matplotlib.cbook.dedent(s)</code></dt> <dd>\n<p>Remove excess indentation from docstring <em>s</em>.</p> <p>Discards any leading blank lines, then removes up to n whitespace characters from each line, where n is the number of leading whitespace characters in the first line. It differs from textwrap.dedent in its deletion of leading blank lines and its use of the first non-blank line to determine the indentation.</p> <p>It is also faster in most cases.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.delete_masked_points\"><code>matplotlib.cbook.delete_masked_points(*args)</code></dt> <dd>\n<p>Find all masked and/or non-finite points in a set of arguments, and return the arguments with only the unmasked points remaining.</p> <p>Arguments can be in any of 5 categories:</p> <ol class=\"arabic simple\"> <li>1-D masked arrays</li> <li>1-D ndarrays</li> <li>ndarrays with more than one dimension</li> <li>other non-string iterables</li> <li>anything else</li> </ol> <p>The first argument must be in one of the first four categories; any argument with a length differing from that of the first argument (and hence anything in category 5) then will be passed through unchanged.</p> <p>Masks are obtained from all arguments of the correct length in categories 1, 2, and 4; a point is bad if masked in a masked array or if it is a nan or inf. No attempt is made to extract a mask from categories 2, 3, and 4 if <code>np.isfinite()</code> does not yield a Boolean array.</p> <p>All input arguments that are not passed unchanged are returned as ndarrays after removing the points or rows corresponding to masks in any of the arguments.</p> <p>A vastly simpler version of this function was originally written as a helper for Axes.scatter().</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.deprecated\"><code>matplotlib.cbook.deprecated(since, message='', name='', alternative='', pending=False, obj_type='function')</code></dt> <dd>\n<p>Decorator to mark a function as deprecated.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>since</strong> : str</p> <blockquote> <div>\n<p>The release at which this API became deprecated. This is required.</p> </div>\n</blockquote> <p><strong>message</strong> : str, optional</p> <blockquote> <div>\n<p>Override the default deprecation message. The format specifier <code>%(func)s</code> may be used for the name of the function, and <code>%(alternative)s</code> may be used in the deprecation message to insert the name of an alternative to the deprecated function. <code>%(obj_type)</code> may be used to insert a friendly name for the type of object being deprecated.</p> </div>\n</blockquote> <p><strong>name</strong> : str, optional</p> <blockquote> <div>\n<p>The name of the deprecated function; if not provided the name is automatically determined from the passed in function, though this is useful in the case of renamed functions, where the new function is just assigned to the name of the deprecated function. For example:</p> <pre data-language=\"python\">def new_function():\n    ...\noldFunction = new_function\n</pre> </div>\n</blockquote> <p><strong>alternative</strong> : str, optional</p> <blockquote> <div>\n<p>An alternative function that the user may use in place of the deprecated function. The deprecation warning will tell the user about this alternative if provided.</p> </div>\n</blockquote> <p><strong>pending</strong> : bool, optional</p> <blockquote class=\"last\"> <div>\n<p>If True, uses a PendingDeprecationWarning instead of a DeprecationWarning.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>Basic example:</p> <pre data-language=\"python\">@deprecated('1.4.0')\ndef the_function_to_deprecate():\n    pass\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.dict_delall\"><code>matplotlib.cbook.dict_delall(d, keys)</code></dt> <dd>\n<p>delete all of the <em>keys</em> from the <code>dict</code> <em>d</em></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.exception_to_str\"><code>matplotlib.cbook.exception_to_str(s=None)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.file_requires_unicode\"><code>matplotlib.cbook.file_requires_unicode(x)</code></dt> <dd>\n<p>Returns <code>True</code> if the given writable file-like object requires Unicode to be written to it.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.finddir\"><code>matplotlib.cbook.finddir(o, match, case=False)</code></dt> <dd>\n<p>return all attributes of <em>o</em> which match string in match. if case is True require an exact case match.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.flatten\"><code>matplotlib.cbook.flatten(seq, scalarp=<function is_scalar_or_string>)</function></code></dt> <dd>\n<p>Returns a generator of flattened nested containers</p> <p>For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; from matplotlib.cbook import flatten\n&gt;&gt;&gt; l = (('John', ['Hunter']), (1, 23), [[([42, (5, 23)], )]])\n&gt;&gt;&gt; print(list(flatten(l)))\n['John', 'Hunter', 1, 23, 42, 5, 23]\n</pre> <p>By: Composite of Holger Krekel and Luther Blissett From: <a class=\"reference external\" href=\"http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/121294\">http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/121294</a> and Recipe 1.12 in cookbook</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.get_label\"><code>matplotlib.cbook.get_label(y, default_name)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.get_recursive_filelist\"><code>matplotlib.cbook.get_recursive_filelist(args)</code></dt> <dd>\n<p>Recurse all the files and dirs in <em>args</em> ignoring symbolic links and return the files as a list of strings</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.get_sample_data\"><code>matplotlib.cbook.get_sample_data(fname, asfileobj=True)</code></dt> <dd>\n<p>Return a sample data file. <em>fname</em> is a path relative to the <code>mpl-data/sample_data</code> directory. If <em>asfileobj</em> is <code>True</code> return a file object, otherwise just a file path.</p> <p>Set the rc parameter examples.directory to the directory where we should look, if sample_data files are stored in a location different than default (which is ‘mpl-data/sample_data` at the same level of ‘matplotlib` Python module files).</p> <p>If the filename ends in .gz, the file is implicitly ungzipped.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.get_split_ind\"><code>matplotlib.cbook.get_split_ind(seq, N)</code></dt> <dd>\n<p><em>seq</em> is a list of words. Return the index into seq such that:</p> <pre data-language=\"python\">len(' '.join(seq[:ind])&lt;=N\n</pre> <p>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.index_of\"><code>matplotlib.cbook.index_of(y)</code></dt> <dd>\n<p>A helper function to get the index of an input to plot against if x values are not explicitly given.</p> <p>Tries to get <code>y.index</code> (works if this is a pd.Series), if that fails, return np.arange(y.shape[0]).</p> <p>This will be extended in the future to deal with more types of labeled data.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>y</strong> : scalar or array-like</p> <blockquote> <div>\n<p>The proposed y-value</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : ndarray</p> <blockquote class=\"last\"> <div>\n<p>The x and y values to plot.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.is_math_text\"><code>matplotlib.cbook.is_math_text(s)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.is_numlike\"><code>matplotlib.cbook.is_numlike(obj)</code></dt> <dd>\n<p>return true if <em>obj</em> looks like a number</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.is_scalar\"><code>matplotlib.cbook.is_scalar(obj)</code></dt> <dd>\n<p>return true if <em>obj</em> is not string like and is not iterable</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.is_scalar_or_string\"><code>matplotlib.cbook.is_scalar_or_string(val)</code></dt> <dd>\n<p>Return whether the given object is a scalar or string like.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.is_sequence_of_strings\"><code>matplotlib.cbook.is_sequence_of_strings(obj)</code></dt> <dd>\n<p>Returns true if <em>obj</em> is iterable and contains strings</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.is_string_like\"><code>matplotlib.cbook.is_string_like(obj)</code></dt> <dd>\n<p>Return True if <em>obj</em> looks like a string</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.is_writable_file_like\"><code>matplotlib.cbook.is_writable_file_like(obj)</code></dt> <dd>\n<p>return true if <em>obj</em> looks like a file object with a <em>write</em> method</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.issubclass_safe\"><code>matplotlib.cbook.issubclass_safe(x, klass)</code></dt> <dd>\n<p>return issubclass(x, klass) and return False on a TypeError</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.iterable\"><code>matplotlib.cbook.iterable(obj)</code></dt> <dd>\n<p>return true if <em>obj</em> is iterable</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.listFiles\"><code>matplotlib.cbook.listFiles(root, patterns='*', recurse=1, return_folders=0)</code></dt> <dd>\n<p>Recursively list files</p> <p>from Parmar and Martelli in the Python Cookbook</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.local_over_kwdict\"><code>matplotlib.cbook.local_over_kwdict(local_var, kwargs, *keys)</code></dt> <dd>\n<p>Enforces the priority of a local variable over potentially conflicting argument(s) from a kwargs dict. The following possible output values are considered in order of priority:</p> <blockquote> <div>local_var &gt; kwargs[keys[0]] &gt; ... &gt; kwargs[keys[-1]]</div>\n</blockquote> <p>The first of these whose value is not None will be returned. If all are None then None will be returned. Each key in keys will be removed from the kwargs dict in place.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>local_var: any object</strong></p> <blockquote> <div>\n<blockquote> <div>\n<p>The local variable (highest priority)</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>kwargs: dict</dt> <dd>\n<p class=\"first last\">Dictionary of keyword arguments; modified in place</p> </dd> <dt>keys: str(s)</dt> <dd>\n<p class=\"first last\">Name(s) of keyword arguments to process, in descending order of priority</p> </dd> </dl> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">out: any object</p> <blockquote> <div>\n<p>Either local_var or one of kwargs[key] for key in keys</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Raises:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>IgnoredKeywordWarning</strong></p> <blockquote class=\"last\"> <div>\n<p>For each key in keys that is removed from kwargs but not used as the output value</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.maxdict\"><code>class matplotlib.cbook.maxdict(maxsize)</code></dt> <dd>\n<p>Bases: <code>dict</code></p> <p>A dictionary with a maximum size; this doesn’t override all the relevant methods to contrain size, just setitem, so use with caution</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.mkdirs\"><code>matplotlib.cbook.mkdirs(newdir, mode=511)</code></dt> <dd>\n<p>make directory <em>newdir</em> recursively, and set <em>mode</em>. Equivalent to</p> <pre data-language=\"python\">&gt; mkdir -p NEWDIR\n&gt; chmod MODE NEWDIR\n</pre> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.cbook.mplDeprecation\"><code>matplotlib.cbook.mplDeprecation</code></dt> <dd>\n<p>alias of <a class=\"reference internal\" href=\"#matplotlib.cbook.MatplotlibDeprecationWarning\" title=\"matplotlib.cbook.MatplotlibDeprecationWarning\"><code>MatplotlibDeprecationWarning</code></a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.onetrue\"><code>matplotlib.cbook.onetrue(seq)</code></dt> <dd>\n<p>Return <em>True</em> if one element of <em>seq</em> is <em>True</em>. It <em>seq</em> is empty, return <em>False</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.pieces\"><code>matplotlib.cbook.pieces(seq, num=2)</code></dt> <dd>\n<p>Break up the <em>seq</em> into <em>num</em> tuples</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.popall\"><code>matplotlib.cbook.popall(seq)</code></dt> <dd>\n<p>empty a list</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.print_cycles\"><code>matplotlib.cbook.print_cycles(objects, outstream=<_io.textiowrapper name=\"&lt;stdout&gt;\" mode=\"w\" encoding=\"UTF-8\">, show_progress=False)</_io.textiowrapper></code></dt> <dd>\n<dl class=\"docutils\"> <dt><em>objects</em></dt> <dd>A list of objects to find cycles in. It is often useful to pass in gc.garbage to find the cycles that are preventing some objects from being garbage collected.</dd> <dt><em>outstream</em></dt> <dd>The stream for output.</dd> <dt><em>show_progress</em></dt> <dd>If True, print the number of objects reached as they are found.</dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.pts_to_midstep\"><code>matplotlib.cbook.pts_to_midstep(x, *args)</code></dt> <dd>\n<p>Covert continuous line to pre-steps</p> <p>Given a set of N points convert to 2 N -1 points which when connected linearly give a step function which changes values at the begining the intervals.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : array</p> <blockquote> <div>\n<p>The x location of the steps</p> </div>\n</blockquote> <p><strong>y1, y2, ...</strong> : array</p> <blockquote> <div>\n<p>Any number of y arrays to be turned into steps. All must be the same length as <code>x</code></p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y1, y2, ..</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The x and y values converted to steps in the same order as the input. If the input is length <code>N</code>, each of these arrays will be length <code>2N + 1</code></p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>&gt;&gt; x_s, y1_s, y2_s = pts_to_prestep(x, y1, y2)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.pts_to_poststep\"><code>matplotlib.cbook.pts_to_poststep(x, *args)</code></dt> <dd>\n<p>Covert continuous line to pre-steps</p> <p>Given a set of N points convert to 2 N -1 points which when connected linearly give a step function which changes values at the begining the intervals.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : array</p> <blockquote> <div>\n<p>The x location of the steps</p> </div>\n</blockquote> <p><strong>y1, y2, ...</strong> : array</p> <blockquote> <div>\n<p>Any number of y arrays to be turned into steps. All must be the same length as <code>x</code></p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y1, y2, ..</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The x and y values converted to steps in the same order as the input. If the input is length <code>N</code>, each of these arrays will be length <code>2N + 1</code></p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>&gt;&gt; x_s, y1_s, y2_s = pts_to_prestep(x, y1, y2)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.pts_to_prestep\"><code>matplotlib.cbook.pts_to_prestep(x, *args)</code></dt> <dd>\n<p>Covert continuous line to pre-steps</p> <p>Given a set of N points convert to 2 N -1 points which when connected linearly give a step function which changes values at the begining the intervals.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : array</p> <blockquote> <div>\n<p>The x location of the steps</p> </div>\n</blockquote> <p><strong>y1, y2, ...</strong> : array</p> <blockquote> <div>\n<p>Any number of y arrays to be turned into steps. All must be the same length as <code>x</code></p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y1, y2, ..</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The x and y values converted to steps in the same order as the input. If the input is length <code>N</code>, each of these arrays will be length <code>2N + 1</code></p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>&gt;&gt; x_s, y1_s, y2_s = pts_to_prestep(x, y1, y2)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.recursive_remove\"><code>matplotlib.cbook.recursive_remove(path)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.report_memory\"><code>matplotlib.cbook.report_memory(i=0)</code></dt> <dd>\n<p>return the memory consumed by process</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.restrict_dict\"><code>matplotlib.cbook.restrict_dict(d, keys)</code></dt> <dd>\n<p>Return a dictionary that contains those keys that appear in both d and keys, with values from d.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.reverse_dict\"><code>matplotlib.cbook.reverse_dict(d)</code></dt> <dd>\n<p>reverse the dictionary – may lose data if values are not unique!</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.safe_first_element\"><code>matplotlib.cbook.safe_first_element(obj)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.safe_masked_invalid\"><code>matplotlib.cbook.safe_masked_invalid(x)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.safezip\"><code>matplotlib.cbook.safezip(*args)</code></dt> <dd>\n<p>make sure <em>args</em> are equal len before zipping</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.silent_list\"><code>class matplotlib.cbook.silent_list(type, seq=None)</code></dt> <dd>\n<p>Bases: <code>list</code></p> <p>override repr when returning a list of matplotlib artists to prevent long, meaningless output. This is meant to be used for a homogeneous list of a given type</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.simple_linear_interpolation\"><code>matplotlib.cbook.simple_linear_interpolation(a, steps)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.soundex\"><code>matplotlib.cbook.soundex(name, len=4)</code></dt> <dd>\n<p>soundex module conforming to Odell-Russell algorithm</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.strip_math\"><code>matplotlib.cbook.strip_math(s)</code></dt> <dd>\n<p>remove latex formatting from mathtext</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.to_filehandle\"><code>matplotlib.cbook.to_filehandle(fname, flag='rU', return_opened=False)</code></dt> <dd>\n<p><em>fname</em> can be a filename or a file handle. Support for gzipped files is automatic, if the filename ends in .gz. <em>flag</em> is a read/write flag for <code>file()</code></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.todate\"><code>class matplotlib.cbook.todate(fmt='%Y-%m-%d', missing='Null', missingval=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.cbook.converter\" title=\"matplotlib.cbook.converter\"><code>matplotlib.cbook.converter</code></a></p> <p>convert to a date or None</p> <p>use a <code>time.strptime()</code> format string for conversion</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.todatetime\"><code>class matplotlib.cbook.todatetime(fmt='%Y-%m-%d', missing='Null', missingval=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.cbook.converter\" title=\"matplotlib.cbook.converter\"><code>matplotlib.cbook.converter</code></a></p> <p>convert to a datetime or None</p> <p>use a <code>time.strptime()</code> format string for conversion</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.tofloat\"><code>class matplotlib.cbook.tofloat(missing='Null', missingval=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.cbook.converter\" title=\"matplotlib.cbook.converter\"><code>matplotlib.cbook.converter</code></a></p> <p>convert to a float or None</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.toint\"><code>class matplotlib.cbook.toint(missing='Null', missingval=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.cbook.converter\" title=\"matplotlib.cbook.converter\"><code>matplotlib.cbook.converter</code></a></p> <p>convert to an int or None</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.cbook.tostr\"><code>class matplotlib.cbook.tostr(missing='Null', missingval='')</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.cbook.converter\" title=\"matplotlib.cbook.converter\"><code>matplotlib.cbook.converter</code></a></p> <p>convert to string or None</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.unicode_safe\"><code>matplotlib.cbook.unicode_safe(s)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.unique\"><code>matplotlib.cbook.unique(x)</code></dt> <dd>\n<p>Return a list of unique elements of <em>x</em></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.unmasked_index_ranges\"><code>matplotlib.cbook.unmasked_index_ranges(mask, compressed=True)</code></dt> <dd>\n<p>Find index ranges where <em>mask</em> is <em>False</em>.</p> <p><em>mask</em> will be flattened if it is not already 1-D.</p> <p>Returns Nx2 <code>numpy.ndarray</code> with each row the start and stop indices for slices of the compressed <code>numpy.ndarray</code> corresponding to each of <em>N</em> uninterrupted runs of unmasked values. If optional argument <em>compressed</em> is <em>False</em>, it returns the start and stop indices into the original <code>numpy.ndarray</code>, not the compressed <code>numpy.ndarray</code>. Returns <em>None</em> if there are no unmasked values.</p> <p>Example:</p> <pre data-language=\"python\">y = ma.array(np.arange(5), mask = [0,0,1,0,0])\nii = unmasked_index_ranges(ma.getmaskarray(y))\n# returns array [[0,2,] [2,4,]]\n\ny.compressed()[ii[1,0]:ii[1,1]]\n# returns array [3,4,]\n\nii = unmasked_index_ranges(ma.getmaskarray(y), compressed=False)\n# returns array [[0, 2], [3, 5]]\n\ny.filled()[ii[1,0]:ii[1,1]]\n# returns array [3,4,]\n</pre> <p>Prior to the transforms refactoring, this was used to support masked arrays in Line2D.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.violin_stats\"><code>matplotlib.cbook.violin_stats(X, method, points=100)</code></dt> <dd>\n<p>Returns a list of dictionaries of data which can be used to draw a series of violin plots. See the <code>Returns</code> section below to view the required keys of the dictionary. Users can skip this function and pass a user-defined set of dictionaries to the <code>axes.vplot</code> method instead of using MPL to do the calculations.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>X</strong> : array-like</p> <blockquote> <div>\n<p>Sample data that will be used to produce the gaussian kernel density estimates. Must have 2 or fewer dimensions.</p> </div>\n</blockquote> <p><strong>method</strong> : callable</p> <blockquote> <div>\n<p>The method used to calculate the kernel density estimate for each column of data. When called via <code>method(v, coords)</code>, it should return a vector of the values of the KDE evaluated at the values specified in coords.</p> </div>\n</blockquote> <p><strong>points</strong> : scalar, default = 100</p> <blockquote> <div>\n<p>Defines the number of points to evaluate each of the gaussian kernel density estimates at.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A list of dictionaries containing the results for each column of data.</p> <p>The dictionaries contain at least the following:</p> <blockquote class=\"last\"> <div>\n<ul class=\"simple\"> <li>coords: A list of scalars containing the coordinates this particular kernel density estimate was evaluated at.</li> <li>vals: A list of scalars containing the values of the kernel density estimate at each of the coordinates given in <code>coords</code>.</li> <li>mean: The mean value for this column of data.</li> <li>median: The median value for this column of data.</li> <li>min: The minimum value for this column of data.</li> <li>max: The maximum value for this column of data.</li> </ul> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.warn_deprecated\"><code>matplotlib.cbook.warn_deprecated(since, message='', name='', alternative='', pending=False, obj_type='attribute')</code></dt> <dd>\n<p>Used to display deprecation warning in a standard way.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>since</strong> : str</p> <blockquote> <div>\n<p>The release at which this API became deprecated.</p> </div>\n</blockquote> <p><strong>message</strong> : str, optional</p> <blockquote> <div>\n<p>Override the default deprecation message. The format specifier <code>%(func)s</code> may be used for the name of the function, and <code>%(alternative)s</code> may be used in the deprecation message to insert the name of an alternative to the deprecated function. <code>%(obj_type)</code> may be used to insert a friendly name for the type of object being deprecated.</p> </div>\n</blockquote> <p><strong>name</strong> : str, optional</p> <blockquote> <div>\n<p>The name of the deprecated function; if not provided the name is automatically determined from the passed in function, though this is useful in the case of renamed functions, where the new function is just assigned to the name of the deprecated function. For example:</p> <pre data-language=\"python\">def new_function():\n    ...\noldFunction = new_function\n</pre> </div>\n</blockquote> <p><strong>alternative</strong> : str, optional</p> <blockquote> <div>\n<p>An alternative function that the user may use in place of the deprecated function. The deprecation warning will tell the user about this alternative if provided.</p> </div>\n</blockquote> <p><strong>pending</strong> : bool, optional</p> <blockquote> <div>\n<p>If True, uses a PendingDeprecationWarning instead of a DeprecationWarning.</p> </div>\n</blockquote> <p><strong>obj_type</strong> : str, optional</p> <blockquote class=\"last\"> <div>\n<p>The object type being deprecated.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>Basic example:</p> <pre data-language=\"python\"># To warn of the deprecation of \"matplotlib.name_of_module\"\nwarn_deprecated('1.4.0', name='matplotlib.name_of_module',\n                obj_type='module')\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.cbook.wrap\"><code>matplotlib.cbook.wrap(prefix, text, cols)</code></dt> <dd>\n<p>wrap <em>text</em> with <em>prefix</em> at length <em>cols</em></p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/cbook_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/cbook_api.html</a>\n  </p>\n</div>\n","legend_api":"<h1 id=\"legend\">Legend</h1>  <h2 id=\"matplotlib-legend\">matplotlib.legend</h2> <p id=\"module-matplotlib.legend\">The legend module defines the Legend class, which is responsible for drawing legends associated with axes and/or figures.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">It is unlikely that you would ever create a Legend instance manually. Most users would normally create a legend via the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.legend\" title=\"matplotlib.axes.Axes.legend\"><code>legend()</code></a> function. For more details on legends there is also a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/legend_guide.html#plotting-guide-legend\"><span>legend guide</span></a>.</p> </div> <p>The Legend class can be considered as a container of legend handles and legend texts. Creation of corresponding legend handles from the plot elements in the axes or figures (e.g., lines, patches, etc.) are specified by the handler map, which defines the mapping between the plot elements and the legend handlers to be used (the default legend handlers are defined in the <a class=\"reference internal\" href=\"#module-matplotlib.legend_handler\" title=\"matplotlib.legend_handler\"><code>legend_handler</code></a> module). Note that not all kinds of artist are supported by the legend yet by default but it is possible to extend the legend handler’s capabilities to support arbitrary objects. See the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/legend_guide.html#plotting-guide-legend\"><span>legend guide</span></a> for more information.</p> <dl class=\"class\"> <dt id=\"matplotlib.legend.DraggableLegend\"><code>class matplotlib.legend.DraggableLegend(legend, use_blit=False, update='loc')</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"offsetbox_api#matplotlib.offsetbox.DraggableOffsetBox\" title=\"matplotlib.offsetbox.DraggableOffsetBox\"><code>matplotlib.offsetbox.DraggableOffsetBox</code></a></p> <dl class=\"docutils\"> <dt>update <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">If “loc”, update <em>loc</em> parameter of</span>\n</dt> <dd>legend upon finalizing. If “bbox”, update <em>bbox_to_anchor</em> parameter.</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.DraggableLegend.artist_picker\"><code>artist_picker(legend, evt)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.DraggableLegend.finalize_offset\"><code>finalize_offset()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend.Legend\"><code>class matplotlib.legend.Legend(parent, handles, labels, loc=None, numpoints=None, markerscale=None, markerfirst=True, scatterpoints=None, scatteryoffsets=None, prop=None, fontsize=None, borderpad=None, labelspacing=None, handlelength=None, handleheight=None, handletextpad=None, borderaxespad=None, columnspacing=None, ncol=1, mode=None, fancybox=None, shadow=None, title=None, framealpha=None, bbox_to_anchor=None, bbox_transform=None, frameon=None, handler_map=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a></p> <p>Place a legend on the axes at location loc. Labels are a sequence of strings and loc can be a string or an integer specifying the legend location</p> <p>The location codes are:</p> <pre data-language=\"python\">'best'         : 0, (only implemented for axes legends)\n'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4,\n'right'        : 5,\n'center left'  : 6,\n'center right' : 7,\n'lower center' : 8,\n'upper center' : 9,\n'center'       : 10,\n</pre> <p>loc can be a tuple of the normalized coordinate values with respect its parent.</p> <ul> <li>\n<em>parent</em>: the artist that contains the legend </li> <li>\n<dl class=\"first docutils\"> <dt>\n<em>handles</em>: a list of artists (lines, patches) to be added to the</dt> <dd>\n<p class=\"first last\">legend</p> </dd> </dl> </li> <li>\n<em>labels</em>: a list of strings to label the legend </li> </ul> <p>Optional keyword arguments:</p> <table class=\"docutils\"> <colgroup> <col width=\"24%\"> <col width=\"76%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Keyword</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>loc</td> <td>a location code</td> </tr> <tr class=\"row-odd\">\n<td>prop</td> <td>the font property</td> </tr> <tr class=\"row-even\">\n<td>fontsize</td> <td>the font size (used only if prop is not specified)</td> </tr> <tr class=\"row-odd\">\n<td>markerscale</td> <td>the relative size of legend markers vs. original</td> </tr> <tr class=\"row-even\">\n<td>markerfirst</td> <td>If true, place legend marker to left of label If false, place legend marker to right of label</td> </tr> <tr class=\"row-odd\">\n<td>numpoints</td> <td>the number of points in the legend for line</td> </tr> <tr class=\"row-even\">\n<td>scatterpoints</td> <td>the number of points in the legend for scatter plot</td> </tr> <tr class=\"row-odd\">\n<td>scatteryoffsets</td> <td>a list of yoffsets for scatter symbols in legend</td> </tr> <tr class=\"row-even\">\n<td>frameon</td> <td>if True, draw a frame around the legend. If None, use rc</td> </tr> <tr class=\"row-odd\">\n<td>fancybox</td> <td>if True, draw a frame with a round fancybox. If None, use rc</td> </tr> <tr class=\"row-even\">\n<td>shadow</td> <td>if True, draw a shadow behind legend</td> </tr> <tr class=\"row-odd\">\n<td>framealpha</td> <td>If not None, alpha channel for the frame.</td> </tr> <tr class=\"row-even\">\n<td>ncol</td> <td>number of columns</td> </tr> <tr class=\"row-odd\">\n<td>borderpad</td> <td>the fractional whitespace inside the legend border</td> </tr> <tr class=\"row-even\">\n<td>labelspacing</td> <td>the vertical space between the legend entries</td> </tr> <tr class=\"row-odd\">\n<td>handlelength</td> <td>the length of the legend handles</td> </tr> <tr class=\"row-even\">\n<td>handleheight</td> <td>the height of the legend handles</td> </tr> <tr class=\"row-odd\">\n<td>handletextpad</td> <td>the pad between the legend handle and text</td> </tr> <tr class=\"row-even\">\n<td>borderaxespad</td> <td>the pad between the axes and legend border</td> </tr> <tr class=\"row-odd\">\n<td>columnspacing</td> <td>the spacing between columns</td> </tr> <tr class=\"row-even\">\n<td>title</td> <td>the legend title</td> </tr> <tr class=\"row-odd\">\n<td>bbox_to_anchor</td> <td>the bbox that the legend will be anchored.</td> </tr> <tr class=\"row-even\">\n<td>bbox_transform</td> <td>the transform for the bbox. transAxes if None.</td> </tr> </tbody> </table> <p>The pad and spacing parameters are measured in font-size units. e.g., a fontsize of 10 points and a handlelength=5 implies a handlelength of 50 points. Values from rcParams will be used if None.</p> <p>Users can specify any arbitrary location for the legend using the <em>bbox_to_anchor</em> keyword argument. bbox_to_anchor can be an instance of BboxBase(or its derivatives) or a tuple of 2 or 4 floats. See <a class=\"reference internal\" href=\"#matplotlib.legend.Legend.set_bbox_to_anchor\" title=\"matplotlib.legend.Legend.set_bbox_to_anchor\"><code>set_bbox_to_anchor()</code></a> for more detail.</p> <p>The legend location can be specified by setting <em>loc</em> with a tuple of 2 floats, which is interpreted as the lower-left corner of the legend in the normalized axes coordinate.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.legend.Legend.codes\"><code>codes = {'upper right': 1, 'lower right': 4, 'right': 5, 'center left': 6, 'upper left': 2, 'best': 0, 'center': 10, 'upper center': 9, 'lower left': 3, 'lower center': 8, 'center right': 7}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.contains\"><code>contains(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.draggable\"><code>draggable(state=None, use_blit=False, update='loc')</code></dt> <dd>\n<p>Set the draggable state – if state is</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None : toggle the current state</li> <li>True : turn draggable on</li> <li>False : turn draggable off</li> </ul> </div>\n</blockquote> <p>If draggable is on, you can drag the legend on the canvas with the mouse. The DraggableLegend helper instance is returned if draggable is on.</p> <p>The update parameter control which parameter of the legend changes when dragged. If update is “loc”, the <em>loc</em> paramter of the legend is changed. If “bbox”, the <em>bbox_to_anchor</em> parameter is changed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>Draw everything that belongs to the legend</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.draw_frame\"><code>draw_frame(b)</code></dt> <dd>\n<p>b is a boolean. Set draw frame to b</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_bbox_to_anchor\"><code>get_bbox_to_anchor()</code></dt> <dd>\n<p>return the bbox that the legend will be anchored</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_children\"><code>get_children()</code></dt> <dd>\n<p>return a list of child artists</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.legend.Legend.get_default_handler_map\"><code>classmethod get_default_handler_map()</code></dt> <dd>\n<p>A class method that returns the default handler map.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_frame\"><code>get_frame()</code></dt> <dd>\n<p>return the Rectangle instance used to frame the legend</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_frame_on\"><code>get_frame_on()</code></dt> <dd>\n<p>Get whether the legend box patch is drawn</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.legend.Legend.get_legend_handler\"><code>static get_legend_handler(legend_handler_map, orig_handle)</code></dt> <dd>\n<p>return a legend handler from <em>legend_handler_map</em> that corresponds to <em>orig_handler</em>.</p> <p><em>legend_handler_map</em> should be a dictionary object (that is returned by the get_legend_handler_map method).</p> <p>It first checks if the <em>orig_handle</em> itself is a key in the <em>legend_hanler_map</em> and return the associated value. Otherwise, it checks for each of the classes in its method-resolution-order. If no matching key is found, it returns None.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_legend_handler_map\"><code>get_legend_handler_map()</code></dt> <dd>\n<p>return the handler map.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_lines\"><code>get_lines()</code></dt> <dd>\n<p>return a list of lines.Line2D instances in the legend</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_patches\"><code>get_patches()</code></dt> <dd>\n<p>return a list of patch instances in the legend</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_texts\"><code>get_texts()</code></dt> <dd>\n<p>return a list of text.Text instance in the legend</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_title\"><code>get_title()</code></dt> <dd>\n<p>return Text instance for the legend title</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.get_window_extent\"><code>get_window_extent(*args, **kwargs)</code></dt> <dd>\n<p>return a extent of the legend</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.set_bbox_to_anchor\"><code>set_bbox_to_anchor(bbox, transform=None)</code></dt> <dd>\n<p>set the bbox that the legend will be anchored.</p> <p><em>bbox</em> can be a BboxBase instance, a tuple of [left, bottom, width, height] in the given transform (normalized axes coordinate if None), or a tuple of [left, bottom] where the width and height will be assumed to be zero.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.legend.Legend.set_default_handler_map\"><code>classmethod set_default_handler_map(handler_map)</code></dt> <dd>\n<p>A class method to set the default handler map.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.set_frame_on\"><code>set_frame_on(b)</code></dt> <dd>\n<p>Set whether the legend box patch is drawn</p> <p>ACCEPTS: [ <em>True</em> | <em>False</em> ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend.Legend.set_title\"><code>set_title(title, prop=None)</code></dt> <dd>\n<p>set the legend title. Fontproperties can be optionally set with <em>prop</em> parameter.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.legend.Legend.update_default_handler_map\"><code>classmethod update_default_handler_map(handler_map)</code></dt> <dd>\n<p>A class method to update the default handler map.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.legend.Legend.zorder\"><code>zorder = 5</code></dt> \n</dl> </dd>\n</dl>   <h2 id=\"matplotlib-legend-handler\">matplotlib.legend_handler</h2> <p id=\"module-matplotlib.legend_handler\">This module defines default legend handlers.</p> <p>It is strongly encouraged to have read the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/legend_guide.html#plotting-guide-legend\"><span>legend guide</span></a> before this documentation.</p> <p>Legend handlers are expected to be a callable object with a following signature.</p> <pre data-language=\"python\">legend_handler(legend, orig_handle, fontsize, handlebox)\n</pre> <p>Where <em>legend</em> is the legend itself, <em>orig_handle</em> is the original plot, <em>fontsize</em> is the fontsize in pixles, and <em>handlebox</em> is a OffsetBox instance. Within the call, you should create relevant artists (using relevant properties from the <em>legend</em> and/or <em>orig_handle</em>) and add them into the handlebox. The artists needs to be scaled according to the fontsize (note that the size is in pixel, i.e., this is dpi-scaled value).</p> <p>This module includes definition of several legend handler classes derived from the base class (HandlerBase) with the following method.</p> <blockquote> <div>def legend_artist(self, legend, orig_handle, fontsize, handlebox):</div>\n</blockquote> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerBase\"><code>class matplotlib.legend_handler.HandlerBase(xpad=0.0, ypad=0.0, update_func=None)</code></dt> <dd>\n<p>A Base class for default legend handlers.</p> <p>The derived classes are meant to override <em>create_artists</em> method, which has a following signature.:</p> <pre data-language=\"python\">def create_artists(self, legend, orig_handle,\n                   xdescent, ydescent, width, height, fontsize,\n                   trans):\n</pre> <p>The overridden method needs to create artists of the given transform that fits in the given dimension (xdescent, ydescent, width, height) that are scaled by fontsize if necessary.</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerBase.adjust_drawing_area\"><code>adjust_drawing_area(legend, orig_handle, xdescent, ydescent, width, height, fontsize)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerBase.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerBase.legend_artist\"><code>legend_artist(legend, orig_handle, fontsize, handlebox)</code></dt> <dd>\n<p>Return the artist that this HandlerBase generates for the given original artist/handle.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>legend</strong> : <a class=\"reference internal\" href=\"#matplotlib.legend.Legend\" title=\"matplotlib.legend.Legend\"><code>matplotlib.legend.Legend</code></a> instance</p> <blockquote> <div>\n<p>The legend for which these legend artists are being created.</p> </div>\n</blockquote> <p><strong>orig_handle</strong> : <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a> or similar</p> <blockquote> <div>\n<p>The object for which these legend artists are being created.</p> </div>\n</blockquote> <p><strong>fontsize</strong> : float or int</p> <blockquote> <div>\n<p>The fontsize in pixels. The artists being created should be scaled according to the given fontsize.</p> </div>\n</blockquote> <p><strong>handlebox</strong> : <a class=\"reference internal\" href=\"offsetbox_api#matplotlib.offsetbox.OffsetBox\" title=\"matplotlib.offsetbox.OffsetBox\"><code>matplotlib.offsetbox.OffsetBox</code></a> instance</p> <blockquote class=\"last\"> <div>\n<p>The box which has been created to hold this legend entry’s artists. Artists created in the <a class=\"reference internal\" href=\"#matplotlib.legend_handler.HandlerBase.legend_artist\" title=\"matplotlib.legend_handler.HandlerBase.legend_artist\"><code>legend_artist</code></a> method must be added to this handlebox inside this method.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerBase.update_prop\"><code>update_prop(legend_handle, orig_handle, legend)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerCircleCollection\"><code>class matplotlib.legend_handler.HandlerCircleCollection(yoffsets=None, sizes=None, **kw)</code></dt> <dd>\n<p>Handler for CircleCollections</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerCircleCollection.create_collection\"><code>create_collection(orig_handle, sizes, offsets, transOffset)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerErrorbar\"><code>class matplotlib.legend_handler.HandlerErrorbar(xerr_size=0.5, yerr_size=None, marker_pad=0.3, numpoints=None, **kw)</code></dt> <dd>\n<p>Handler for Errorbars</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerErrorbar.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerErrorbar.get_err_size\"><code>get_err_size(legend, xdescent, ydescent, width, height, fontsize)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerLine2D\"><code>class matplotlib.legend_handler.HandlerLine2D(marker_pad=0.3, numpoints=None, **kw)</code></dt> <dd>\n<p>Handler for Line2D instances.</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerLine2D.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerLineCollection\"><code>class matplotlib.legend_handler.HandlerLineCollection(marker_pad=0.3, numpoints=None, **kw)</code></dt> <dd>\n<p>Handler for LineCollection instances.</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerLineCollection.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerLineCollection.get_numpoints\"><code>get_numpoints(legend)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerNpoints\"><code>class matplotlib.legend_handler.HandlerNpoints(marker_pad=0.3, numpoints=None, **kw)</code></dt> <dd>\n<dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerNpoints.get_numpoints\"><code>get_numpoints(legend)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerNpoints.get_xdata\"><code>get_xdata(legend, xdescent, ydescent, width, height, fontsize)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerNpointsYoffsets\"><code>class matplotlib.legend_handler.HandlerNpointsYoffsets(numpoints=None, yoffsets=None, **kw)</code></dt> <dd>\n<dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerNpointsYoffsets.get_ydata\"><code>get_ydata(legend, xdescent, ydescent, width, height, fontsize)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerPatch\"><code>class matplotlib.legend_handler.HandlerPatch(patch_func=None, **kw)</code></dt> <dd>\n<p>Handler for Patch instances.</p> <p>The HandlerPatch class optionally takes a function <code>patch_func</code> who’s responsibility is to create the legend key artist. The <code>patch_func</code> should have the signature:</p> <pre data-language=\"python\">def patch_func(legend=legend, orig_handle=orig_handle,\n               xdescent=xdescent, ydescent=ydescent,\n               width=width, height=height, fontsize=fontsize)\n</pre> <p>Subsequently the created artist will have its <code>update_prop</code> method called and the appropriate transform will be applied.</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerPatch.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerPathCollection\"><code>class matplotlib.legend_handler.HandlerPathCollection(yoffsets=None, sizes=None, **kw)</code></dt> <dd>\n<p>Handler for PathCollections, which are used by scatter</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerPathCollection.create_collection\"><code>create_collection(orig_handle, sizes, offsets, transOffset)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerPolyCollection\"><code>class matplotlib.legend_handler.HandlerPolyCollection(xpad=0.0, ypad=0.0, update_func=None)</code></dt> <dd>\n<p>Handler for PolyCollection used in fill_between and stackplot.</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerPolyCollection.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerRegularPolyCollection\"><code>class matplotlib.legend_handler.HandlerRegularPolyCollection(yoffsets=None, sizes=None, **kw)</code></dt> <dd>\n<p>Handler for RegularPolyCollections.</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerRegularPolyCollection.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerRegularPolyCollection.create_collection\"><code>create_collection(orig_handle, sizes, offsets, transOffset)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerRegularPolyCollection.get_numpoints\"><code>get_numpoints(legend)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerRegularPolyCollection.get_sizes\"><code>get_sizes(legend, orig_handle, xdescent, ydescent, width, height, fontsize)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerRegularPolyCollection.update_prop\"><code>update_prop(legend_handle, orig_handle, legend)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerStem\"><code>class matplotlib.legend_handler.HandlerStem(marker_pad=0.3, numpoints=None, bottom=None, yoffsets=None, **kw)</code></dt> <dd>\n<p>Handler for Errorbars</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerStem.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerStem.get_ydata\"><code>get_ydata(legend, xdescent, ydescent, width, height, fontsize)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.legend_handler.HandlerTuple\"><code>class matplotlib.legend_handler.HandlerTuple(**kwargs)</code></dt> <dd>\n<p>Handler for Tuple</p> <dl class=\"method\"> <dt id=\"matplotlib.legend_handler.HandlerTuple.create_artists\"><code>create_artists(legend, orig_handle, xdescent, ydescent, width, height, fontsize, trans)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.legend_handler.update_from_first_child\"><code>matplotlib.legend_handler.update_from_first_child(tgt, src)</code></dt> \n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/legend_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/legend_api.html</a>\n  </p>\n</div>\n","markers_api":"<h1 id=\"markers\">Markers</h1>  <h2 id=\"matplotlib-markers\">matplotlib.markers</h2> <p id=\"module-matplotlib.markers\">This module contains functions to handle markers. Used by both the marker functionality of <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.plot\" title=\"matplotlib.axes.Axes.plot\"><code>plot</code></a> and <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.scatter\" title=\"matplotlib.axes.Axes.scatter\"><code>scatter</code></a>.</p> <p>All possible markers are defined here:</p> <table class=\"docutils\"> <colgroup> <col width=\"38%\"> <col width=\"62%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">marker</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>”.”</td> <td>point</td> </tr> <tr class=\"row-odd\">\n<td>”,”</td> <td>pixel</td> </tr> <tr class=\"row-even\">\n<td>“o”</td> <td>circle</td> </tr> <tr class=\"row-odd\">\n<td>“v”</td> <td>triangle_down</td> </tr> <tr class=\"row-even\">\n<td>“^”</td> <td>triangle_up</td> </tr> <tr class=\"row-odd\">\n<td>“&lt;”</td> <td>triangle_left</td> </tr> <tr class=\"row-even\">\n<td>“&gt;”</td> <td>triangle_right</td> </tr> <tr class=\"row-odd\">\n<td>“1”</td> <td>tri_down</td> </tr> <tr class=\"row-even\">\n<td>“2”</td> <td>tri_up</td> </tr> <tr class=\"row-odd\">\n<td>“3”</td> <td>tri_left</td> </tr> <tr class=\"row-even\">\n<td>“4”</td> <td>tri_right</td> </tr> <tr class=\"row-odd\">\n<td>“8”</td> <td>octagon</td> </tr> <tr class=\"row-even\">\n<td>“s”</td> <td>square</td> </tr> <tr class=\"row-odd\">\n<td>“p”</td> <td>pentagon</td> </tr> <tr class=\"row-even\">\n<td>“*”</td> <td>star</td> </tr> <tr class=\"row-odd\">\n<td>“h”</td> <td>hexagon1</td> </tr> <tr class=\"row-even\">\n<td>“H”</td> <td>hexagon2</td> </tr> <tr class=\"row-odd\">\n<td>“+”</td> <td>plus</td> </tr> <tr class=\"row-even\">\n<td>“x”</td> <td>x</td> </tr> <tr class=\"row-odd\">\n<td>“D”</td> <td>diamond</td> </tr> <tr class=\"row-even\">\n<td>“d”</td> <td>thin_diamond</td> </tr> <tr class=\"row-odd\">\n<td>“|”</td> <td>vline</td> </tr> <tr class=\"row-even\">\n<td>“_”</td> <td>hline</td> </tr> <tr class=\"row-odd\">\n<td>TICKLEFT</td> <td>tickleft</td> </tr> <tr class=\"row-even\">\n<td>TICKRIGHT</td> <td>tickright</td> </tr> <tr class=\"row-odd\">\n<td>TICKUP</td> <td>tickup</td> </tr> <tr class=\"row-even\">\n<td>TICKDOWN</td> <td>tickdown</td> </tr> <tr class=\"row-odd\">\n<td>CARETLEFT</td> <td>caretleft</td> </tr> <tr class=\"row-even\">\n<td>CARETRIGHT</td> <td>caretright</td> </tr> <tr class=\"row-odd\">\n<td>CARETUP</td> <td>caretup</td> </tr> <tr class=\"row-even\">\n<td>CARETDOWN</td> <td>caretdown</td> </tr> <tr class=\"row-odd\">\n<td>“None”</td> <td>nothing</td> </tr> <tr class=\"row-even\">\n<td>None</td> <td>nothing</td> </tr> <tr class=\"row-odd\">\n<td>” “</td> <td>nothing</td> </tr> <tr class=\"row-even\">\n<td>“”</td> <td>nothing</td> </tr> <tr class=\"row-odd\">\n<td><code>'$...$'</code></td> <td>render the string using mathtext.</td> </tr> <tr class=\"row-even\">\n<td><code>verts</code></td> <td>a list of (x, y) pairs used for Path vertices. The center of the marker is located at (0,0) and the size is normalized.</td> </tr> <tr class=\"row-odd\">\n<td>path</td> <td>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance.</td> </tr> <tr class=\"row-even\">\n<td>(<code>numsides</code>, <code>style</code>, <code>angle</code>)</td> <td>see below</td> </tr> </tbody> </table> <p>The marker can also be a tuple (<code>numsides</code>, <code>style</code>, <code>angle</code>), which will create a custom, regular symbol.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<code>numsides</code>:</dt> <dd>the number of sides</dd> <dt>\n<code>style</code>:</dt> <dd>\n<p class=\"first\">the style of the regular symbol:</p> <table class=\"last docutils\"> <colgroup> <col width=\"10%\"> <col width=\"90%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Value</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>0</td> <td>a regular polygon</td> </tr> <tr class=\"row-odd\">\n<td>1</td> <td>a star-like symbol</td> </tr> <tr class=\"row-even\">\n<td>2</td> <td>an asterisk</td> </tr> <tr class=\"row-odd\">\n<td>3</td> <td>a circle (<code>numsides</code> and <code>angle</code> is ignored)</td> </tr> </tbody> </table> </dd> <dt>\n<code>angle</code>:</dt> <dd>the angle of rotation of the symbol, in degrees</dd> </dl> </div>\n</blockquote> <p>For backward compatibility, the form (<code>verts</code>, 0) is also accepted, but it is equivalent to just <code>verts</code> for giving a raw set of vertices that define the shape.</p> <dl class=\"class\"> <dt id=\"matplotlib.markers.MarkerStyle\"><code>class matplotlib.markers.MarkerStyle(marker=None, fillstyle=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>marker</strong> : string or array_like, optional, default: None</p> <blockquote> <div>\n<p>See the descriptions of possible markers in the module docstring.</p> </div>\n</blockquote> <p><strong>fillstyle</strong> : string, optional, default: ‘full’</p> <blockquote class=\"last\"> <div>\n<p>‘full’, ‘left”, ‘right’, ‘bottom’, ‘top’, ‘none’</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Attributes</h4> <table class=\"docutils\"> <colgroup> <col width=\"31%\"> <col width=\"69%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>markers</td> <td>(list of known markes)</td> </tr> <tr class=\"row-even\">\n<td>fillstyles</td> <td>(list of known fillstyles)</td> </tr> <tr class=\"row-odd\">\n<td>filled_markers</td> <td>(list of known filled markers.)</td> </tr> </tbody> </table> <dl class=\"attribute\"> <dt id=\"matplotlib.markers.MarkerStyle.filled_markers\"><code>filled_markers = ('o', 'v', '^', '', '8', 's', 'p', '*', 'h', 'H', 'D', 'd')</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.markers.MarkerStyle.fillstyles\"><code>fillstyles = ('full', 'left', 'right', 'bottom', 'top', 'none')</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_alt_path\"><code>get_alt_path()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_alt_transform\"><code>get_alt_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_capstyle\"><code>get_capstyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_fillstyle\"><code>get_fillstyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_joinstyle\"><code>get_joinstyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_marker\"><code>get_marker()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_path\"><code>get_path()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_snap_threshold\"><code>get_snap_threshold()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.get_transform\"><code>get_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.is_filled\"><code>is_filled()</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.markers.MarkerStyle.markers\"><code>markers = {'+': 'plus', 0: 'tickleft', '4': 'tri_right', 3: 'tickdown', 4: 'caretleft', 'H': 'hexagon2', 'v': 'triangle_down', '3': 'tri_left', 'p': 'pentagon', 'h': 'hexagon1', '*': 'star', 'None': 'nothing', 'x': 'x', 'o': 'circle', 7: 'caretdown', '': 'nothing', '.': 'point', 5: 'caretright', ',': 'pixel', '2': 'tri_up', 1: 'tickright', 6: 'caretup', 's': 'square', '^': 'triangle_up', 'd': 'thin_diamond', '': 'triangle_right', None: 'nothing', 2: 'tickup', '8': 'octagon', ' ': 'nothing', 'D': 'diamond'}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.set_fillstyle\"><code>set_fillstyle(fillstyle)</code></dt> <dd>\n<p>Sets fillstyle</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<strong>fillstyle</strong> : string amongst known fillstyles</td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.markers.MarkerStyle.set_marker\"><code>set_marker(marker)</code></dt> \n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/markers_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/markers_api.html</a>\n  </p>\n</div>\n","dates_api":"<h1 id=\"dates\">dates</h1> <p class=\"graphviz\"> <img src=\"http://matplotlib.org/1.5.1/_images/inheritance-b06134c55e7c91f679e3d2a7d221bcbb4cbffc86.png\" alt=\"Inheritance diagram of matplotlib.dates\" usemap=\"#inheritance1bda3e63b5\" class=\"inheritance\"> <map id=\"inheritance1bda3e63b5\" name=\"inheritance1bda3e63b5\"> <area shape=\"rect\" id=\"node1\" href=\"#matplotlib.dates.AutoDateFormatter\" target=\"_top\" title=\"This class attempts to figure out the best format to use.  This is\" alt=\"\" coords=\"323,66,447,88\"> <area shape=\"rect\" id=\"node2\" href=\"ticker_api.html#matplotlib.ticker.Formatter\" target=\"_top\" title=\"Convert the tick location to a string\" alt=\"\" coords=\"189,129,263,151\"> <area shape=\"rect\" id=\"node7\" href=\"#matplotlib.dates.DateFormatter\" target=\"_top\" title=\"Tick location is seconds since the epoch.  Use a :func:`strftime`\" alt=\"\" coords=\"336,108,435,129\"> <area shape=\"rect\" id=\"node13\" href=\"#matplotlib.dates.IndexDateFormatter\" target=\"_top\" title=\"Use with :class:`~matplotlib.ticker.IndexLocator` to cycle format\" alt=\"\" coords=\"322,150,449,171\"> <area shape=\"rect\" id=\"node3\" href=\"#matplotlib.dates.AutoDateLocator\" target=\"_top\" title=\"On autoscale, this class picks the best\" alt=\"\" coords=\"498,128,608,150\"> <area shape=\"rect\" id=\"node4\" href=\"#matplotlib.dates.DateLocator\" target=\"_top\" title=\"Determines the tick locations when plotting dates.\" alt=\"\" coords=\"342,191,428,213\"> <area shape=\"rect\" id=\"node10\" href=\"#matplotlib.dates.RRuleLocator\" target=\"_top\" title=\"RRuleLocator\" alt=\"\" coords=\"509,170,597,191\"> <area shape=\"rect\" id=\"node14\" href=\"#matplotlib.dates.MicrosecondLocator\" target=\"_top\" title=\"Make ticks on occurances of each microsecond.\" alt=\"\" coords=\"489,211,616,233\"> <area shape=\"rect\" id=\"node19\" href=\"#matplotlib.dates.YearLocator\" target=\"_top\" title=\"Make ticks on a given day of each year that is a multiple of base.\" alt=\"\" coords=\"512,253,593,274\"> <area shape=\"rect\" id=\"node5\" href=\"units_api.html#matplotlib.units.ConversionInterface\" target=\"_top\" title=\"The minimal interface for a converter to take custom instances (or\" alt=\"\" coords=\"4,88,130,109\"> <area shape=\"rect\" id=\"node6\" title=\"Converter for datetime.date and datetime.datetime data,\" alt=\"\" coords=\"177,88,275,109\"> <area shape=\"rect\" id=\"node8\" href=\"ticker_api.html#matplotlib.ticker.Locator\" target=\"_top\" title=\"Determine the tick locations;\" alt=\"\" coords=\"196,171,256,192\"> <area shape=\"rect\" id=\"node9\" href=\"#matplotlib.dates.DayLocator\" target=\"_top\" title=\"Make ticks on occurances of each day of the month.  For example,\" alt=\"\" coords=\"670,65,750,87\"> <area shape=\"rect\" id=\"node12\" href=\"#matplotlib.dates.HourLocator\" target=\"_top\" title=\"Make ticks on occurances of each hour.\" alt=\"\" coords=\"667,107,753,128\"> <area shape=\"rect\" id=\"node15\" href=\"#matplotlib.dates.MinuteLocator\" target=\"_top\" title=\"Make ticks on occurances of each minute.\" alt=\"\" coords=\"662,148,758,170\"> <area shape=\"rect\" id=\"node16\" href=\"#matplotlib.dates.MonthLocator\" target=\"_top\" title=\"Make ticks on occurances of each month month, e.g., 1, 3, 12.\" alt=\"\" coords=\"663,190,757,211\"> <area shape=\"rect\" id=\"node17\" href=\"#matplotlib.dates.SecondLocator\" target=\"_top\" title=\"Make ticks on occurances of each second.\" alt=\"\" coords=\"660,232,760,253\"> <area shape=\"rect\" id=\"node18\" href=\"#matplotlib.dates.WeekdayLocator\" target=\"_top\" title=\"Make ticks on occurances of each weekday.\" alt=\"\" coords=\"657,273,764,295\"> <area shape=\"rect\" id=\"node11\" href=\"ticker_api.html#matplotlib.ticker.TickHelper\" target=\"_top\" title=\"TickHelper\" alt=\"\" coords=\"30,151,105,172\"> <area shape=\"rect\" id=\"node20\" title=\"Use this class to parse date strings to matplotlib datenums when\" alt=\"\" coords=\"171,46,281,67\"> <area shape=\"rect\" id=\"node21\" title=\"Use this class to parse date strings to matplotlib datenums when\" alt=\"\" coords=\"20,46,115,67\"> </map> </p>  <h2 id=\"matplotlib-dates\">matplotlib.dates</h2> <p id=\"module-matplotlib.dates\">Matplotlib provides sophisticated date plotting capabilities, standing on the shoulders of python <code>datetime</code>, the add-on modules <code>pytz</code> and <code>dateutil</code>. <code>datetime</code> objects are converted to floating point numbers which represent time in days since 0001-01-01 UTC, plus 1. For example, 0001-01-01, 06:00 is 1.25, not 0.25. The helper functions <a class=\"reference internal\" href=\"#matplotlib.dates.date2num\" title=\"matplotlib.dates.date2num\"><code>date2num()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.dates.num2date\" title=\"matplotlib.dates.num2date\"><code>num2date()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.dates.drange\" title=\"matplotlib.dates.drange\"><code>drange()</code></a> are used to facilitate easy conversion to and from <code>datetime</code> and numeric ranges.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>Like Python’s datetime, mpl uses the Gregorian calendar for all conversions between dates and floating point numbers. This practice is not universal, and calendar differences can cause confusing differences between what Python and mpl give as the number of days since 0001-01-01 and what other software and databases yield. For example, the US Naval Observatory uses a calendar that switches from Julian to Gregorian in October, 1582. Hence, using their calculator, the number of days between 0001-01-01 and 2006-04-01 is 732403, whereas using the Gregorian calendar via the datetime module we find:</p> <pre data-language=\"python\">In [31]:date(2006,4,1).toordinal() - date(1,1,1).toordinal()\nOut[31]:732401\n</pre> </div> <p>A wide range of specific and general purpose date tick locators and formatters are provided in this module. See <a class=\"reference internal\" href=\"ticker_api#module-matplotlib.ticker\" title=\"matplotlib.ticker\"><code>matplotlib.ticker</code></a> for general information on tick locators and formatters. These are described below.</p> <p>All the matplotlib date converters, tickers and formatters are timezone aware, and the default timezone is given by the timezone parameter in your <code>matplotlibrc</code> file. If you leave out a <code>tz</code> timezone instance, the default from your rc file will be assumed. If you want to use a custom time zone, pass a <code>pytz.timezone</code> instance with the tz keyword argument to <a class=\"reference internal\" href=\"#matplotlib.dates.num2date\" title=\"matplotlib.dates.num2date\"><code>num2date()</code></a>, <code>plot_date()</code>, and any custom date tickers or locators you create. See <a class=\"reference external\" href=\"http://pythonhosted.org/pytz/\">pytz</a> for information on <code>pytz</code> and timezone handling.</p> <p>The <a class=\"reference external\" href=\"https://dateutil.readthedocs.org\">dateutil module</a> provides additional code to handle date ticking, making it easy to place ticks on any kinds of dates. See examples below.</p>  <h3 id=\"date-tickers\">Date tickers</h3> <p>Most of the date tickers can locate single or multiple values. For example:</p> <pre data-language=\"python\"># import constants for the days of the week\nfrom matplotlib.dates import MO, TU, WE, TH, FR, SA, SU\n\n# tick on mondays every week\nloc = WeekdayLocator(byweekday=MO, tz=tz)\n\n# tick on mondays and saturdays\nloc = WeekdayLocator(byweekday=(MO, SA))\n</pre> <p>In addition, most of the constructors take an interval argument:</p> <pre data-language=\"python\"># tick on mondays every second week\nloc = WeekdayLocator(byweekday=MO, interval=2)\n</pre> <p>The rrule locator allows completely general date ticking:</p> <pre data-language=\"python\"># tick every 5th easter\nrule = rrulewrapper(YEARLY, byeaster=1, interval=5)\nloc = RRuleLocator(rule)\n</pre> <p>Here are all the date tickers:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.MinuteLocator\" title=\"matplotlib.dates.MinuteLocator\"><code>MinuteLocator</code></a>: locate minutes</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.HourLocator\" title=\"matplotlib.dates.HourLocator\"><code>HourLocator</code></a>: locate hours</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.DayLocator\" title=\"matplotlib.dates.DayLocator\"><code>DayLocator</code></a>: locate specifed days of the month</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.WeekdayLocator\" title=\"matplotlib.dates.WeekdayLocator\"><code>WeekdayLocator</code></a>: Locate days of the week, e.g., MO, TU</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.MonthLocator\" title=\"matplotlib.dates.MonthLocator\"><code>MonthLocator</code></a>: locate months, e.g., 7 for july</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.YearLocator\" title=\"matplotlib.dates.YearLocator\"><code>YearLocator</code></a>: locate years that are multiples of base</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.RRuleLocator\" title=\"matplotlib.dates.RRuleLocator\"><code>RRuleLocator</code></a>: locate using a <code>matplotlib.dates.rrulewrapper</code>. The <code>rrulewrapper</code> is a simple wrapper around a <code>dateutil.rrule</code> (<a class=\"reference external\" href=\"https://dateutil.readthedocs.org\">dateutil</a>) which allow almost arbitrary date tick specifications. See <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/examples/pylab_examples/date_demo_rrule.html\">rrule example</a>.</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.AutoDateLocator\" title=\"matplotlib.dates.AutoDateLocator\"><code>AutoDateLocator</code></a>: On autoscale, this class picks the best <code>MultipleDateLocator</code> to set the view limits and the tick locations.</li> </ul> </div>\n</blockquote>   <h3 id=\"date-formatters\">Date formatters</h3> <p>Here all all the date formatters:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.AutoDateFormatter\" title=\"matplotlib.dates.AutoDateFormatter\"><code>AutoDateFormatter</code></a>: attempts to figure out the best format to use. This is most useful when used with the <a class=\"reference internal\" href=\"#matplotlib.dates.AutoDateLocator\" title=\"matplotlib.dates.AutoDateLocator\"><code>AutoDateLocator</code></a>.</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.DateFormatter\" title=\"matplotlib.dates.DateFormatter\"><code>DateFormatter</code></a>: use <code>strftime()</code> format strings</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.dates.IndexDateFormatter\" title=\"matplotlib.dates.IndexDateFormatter\"><code>IndexDateFormatter</code></a>: date plots with implicit <em>x</em> indexing.</li> </ul> </div>\n</blockquote> <dl class=\"function\"> <dt id=\"matplotlib.dates.date2num\"><code>matplotlib.dates.date2num(d)</code></dt> <dd>\n<p><em>d</em> is either a <code>datetime</code> instance or a sequence of datetimes.</p> <p>Return value is a floating point number (or sequence of floats) which gives the number of days (fraction part represents hours, minutes, seconds) since 0001-01-01 00:00:00 UTC, <em>plus</em> <em>one</em>. The addition of one here is a historical artifact. Also, note that the Gregorian calendar is assumed; this is not universal practice. For details, see the module docstring.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.num2date\"><code>matplotlib.dates.num2date(x, tz=None)</code></dt> <dd>\n<p><em>x</em> is a float value which gives the number of days (fraction part represents hours, minutes, seconds) since 0001-01-01 00:00:00 UTC <em>plus</em> <em>one</em>. The addition of one here is a historical artifact. Also, note that the Gregorian calendar is assumed; this is not universal practice. For details, see the module docstring.</p> <p>Return value is a <code>datetime</code> instance in timezone <em>tz</em> (default to rcparams TZ value).</p> <p>If <em>x</em> is a sequence, a sequence of <code>datetime</code> objects will be returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.drange\"><code>matplotlib.dates.drange(dstart, dend, delta)</code></dt> <dd>\n<p>Return a date range as float Gregorian ordinals. <em>dstart</em> and <em>dend</em> are <code>datetime</code> instances. <em>delta</em> is a <code>datetime.timedelta</code> instance.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.epoch2num\"><code>matplotlib.dates.epoch2num(e)</code></dt> <dd>\n<p>Convert an epoch or sequence of epochs to the new date format, that is days since 0001.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.num2epoch\"><code>matplotlib.dates.num2epoch(d)</code></dt> <dd>\n<p>Convert days since 0001 to epoch. <em>d</em> can be a number or sequence.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.mx2num\"><code>matplotlib.dates.mx2num(mxdates)</code></dt> <dd>\n<p>Convert mx <code>datetime</code> instance (or sequence of mx instances) to the new date format.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.DateFormatter\"><code>class matplotlib.dates.DateFormatter(fmt, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>Tick location is seconds since the epoch. Use a <a class=\"reference internal\" href=\"#matplotlib.dates.DateFormatter.strftime\" title=\"matplotlib.dates.DateFormatter.strftime\"><code>strftime()</code></a> format string.</p> <p>Python only supports <code>datetime</code> <a class=\"reference internal\" href=\"#matplotlib.dates.DateFormatter.strftime\" title=\"matplotlib.dates.DateFormatter.strftime\"><code>strftime()</code></a> formatting for years greater than 1900. Thanks to Andrew Dalke, Dalke Scientific Software who contributed the <a class=\"reference internal\" href=\"#matplotlib.dates.DateFormatter.strftime\" title=\"matplotlib.dates.DateFormatter.strftime\"><code>strftime()</code></a> code below to include dates earlier than this year.</p> <dl class=\"docutils\"> <dt>\n<em>fmt</em> is a <a class=\"reference internal\" href=\"#matplotlib.dates.DateFormatter.strftime\" title=\"matplotlib.dates.DateFormatter.strftime\"><code>strftime()</code></a> format string; <em>tz</em> is the</dt> <dd>\n<code>tzinfo</code> instance.</dd> </dl> <dl class=\"attribute\"> <dt id=\"matplotlib.dates.DateFormatter.illegal_s\"><code>illegal_s = re.compile('((^|[^%])(%%)*%s)')</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.DateFormatter.set_tzinfo\"><code>set_tzinfo(tz)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.DateFormatter.strftime\"><code>strftime(dt, fmt=None)</code></dt> <dd>\n<p>Refer to documentation for datetime.strftime.</p> <p><em>fmt</em> is a <a class=\"reference internal\" href=\"#matplotlib.dates.DateFormatter.strftime\" title=\"matplotlib.dates.DateFormatter.strftime\"><code>strftime()</code></a> format string.</p> <p>Warning: For years before 1900, depending upon the current locale it is possible that the year displayed with %x might be incorrect. For years before 100, %y and %Y will yield zero-padded strings.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.DateFormatter.strftime_pre_1900\"><code>strftime_pre_1900(dt, fmt=None)</code></dt> <dd>\n<p>Call time.strftime for years before 1900 by rolling forward a multiple of 28 years.</p> <p><em>fmt</em> is a <a class=\"reference internal\" href=\"#matplotlib.dates.DateFormatter.strftime\" title=\"matplotlib.dates.DateFormatter.strftime\"><code>strftime()</code></a> format string.</p> <p>Dalke: I hope I did this math right. Every 28 years the calendar repeats, except through century leap years excepting the 400 year leap years. But only if you’re using the Gregorian calendar.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.IndexDateFormatter\"><code>class matplotlib.dates.IndexDateFormatter(t, fmt, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>Use with <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.IndexLocator\" title=\"matplotlib.ticker.IndexLocator\"><code>IndexLocator</code></a> to cycle format strings by index.</p> <p><em>t</em> is a sequence of dates (floating point days). <em>fmt</em> is a <code>strftime()</code> format string.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.AutoDateFormatter\"><code>class matplotlib.dates.AutoDateFormatter(locator, tz=None, defaultfmt='%Y-%m-%d')</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>This class attempts to figure out the best format to use. This is most useful when used with the <a class=\"reference internal\" href=\"#matplotlib.dates.AutoDateLocator\" title=\"matplotlib.dates.AutoDateLocator\"><code>AutoDateLocator</code></a>.</p> <p>The AutoDateFormatter has a scale dictionary that maps the scale of the tick (the distance in days between one major tick) and a format string. The default looks like this:</p> <pre data-language=\"python\">self.scaled = {\n   365.0  : '%Y',\n   30.    : '%b %Y',\n   1.0    : '%b %d %Y',\n   1./24. : '%H:%M:%S',\n   1. / (24. * 60.): '%H:%M:%S.%f',\n   }\n</pre> <p>The algorithm picks the key in the dictionary that is &gt;= the current scale and uses that format string. You can customize this dictionary by doing:</p> <pre data-language=\"python\">&gt;&gt;&gt; formatter = AutoDateFormatter()\n&gt;&gt;&gt; formatter.scaled[1/(24.*60.)] = '%M:%S' # only show min and sec\n</pre> <p>A custom <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.FuncFormatter\" title=\"matplotlib.ticker.FuncFormatter\"><code>FuncFormatter</code></a> can also be used. The following example shows how to use a custom format function to strip trailing zeros from decimal seconds and adds the date to the first ticklabel:</p> <pre data-language=\"python\">&gt;&gt;&gt; def my_format_function(x, pos=None):\n...     x = matplotlib.dates.num2date(x)\n...     if pos == 0:\n...         fmt = '%D %H:%M:%S.%f'\n...     else:\n...         fmt = '%H:%M:%S.%f'\n...     label = x.strftime(fmt)\n...     label = label.rstrip(\"0\")\n...     label = label.rstrip(\".\")\n...     return label\n&gt;&gt;&gt; from matplotlib.ticker import FuncFormatter\n&gt;&gt;&gt; formatter.scaled[1/(24.*60.)] = FuncFormatter(my_format_function)\n</pre> <p>Autoformat the date labels. The default format is the one to use if none of the values in <code>self.scaled</code> are greater than the unit returned by <code>locator._get_unit()</code>.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.DateLocator\"><code>class matplotlib.dates.DateLocator(tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Determines the tick locations when plotting dates.</p> <p><em>tz</em> is a <code>tzinfo</code> instance.</p> <dl class=\"method\"> <dt id=\"matplotlib.dates.DateLocator.datalim_to_dt\"><code>datalim_to_dt()</code></dt> <dd>\n<p>Convert axis data interval to datetime objects.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.dates.DateLocator.hms0d\"><code>hms0d = {'bysecond': 0, 'byhour': 0, 'byminute': 0}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.DateLocator.nonsingular\"><code>nonsingular(vmin, vmax)</code></dt> <dd>\n<p>Given the proposed upper and lower extent, adjust the range if it is too close to being singular (i.e. a range of ~0).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.DateLocator.set_tzinfo\"><code>set_tzinfo(tz)</code></dt> <dd>\n<p>Set time zone info.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.DateLocator.viewlim_to_dt\"><code>viewlim_to_dt()</code></dt> <dd>\n<p>Converts the view interval to datetime objects.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.RRuleLocator\"><code>class matplotlib.dates.RRuleLocator(o, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.DateLocator\" title=\"matplotlib.dates.DateLocator\"><code>matplotlib.dates.DateLocator</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.dates.RRuleLocator.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Set the view limits to include the data range.</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.dates.RRuleLocator.get_unit_generic\"><code>static get_unit_generic(freq)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.RRuleLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.AutoDateLocator\"><code>class matplotlib.dates.AutoDateLocator(tz=None, minticks=5, maxticks=None, interval_multiples=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.DateLocator\" title=\"matplotlib.dates.DateLocator\"><code>matplotlib.dates.DateLocator</code></a></p> <p>On autoscale, this class picks the best <a class=\"reference internal\" href=\"#matplotlib.dates.DateLocator\" title=\"matplotlib.dates.DateLocator\"><code>DateLocator</code></a> to set the view limits and the tick locations.</p> <p><em>minticks</em> is the minimum number of ticks desired, which is used to select the type of ticking (yearly, monthly, etc.).</p> <p><em>maxticks</em> is the maximum number of ticks desired, which controls any interval between ticks (ticking every other, every 3, etc.). For really fine-grained control, this can be a dictionary mapping individual rrule frequency constants (YEARLY, MONTHLY, etc.) to their own maximum number of ticks. This can be used to keep the number of ticks appropriate to the format chosen in <a class=\"reference internal\" href=\"#matplotlib.dates.AutoDateFormatter\" title=\"matplotlib.dates.AutoDateFormatter\"><code>AutoDateFormatter</code></a>. Any frequency not specified in this dictionary is given a default value.</p> <p><em>tz</em> is a <code>tzinfo</code> instance.</p> <p><em>interval_multiples</em> is a boolean that indicates whether ticks should be chosen to be multiple of the interval. This will lock ticks to ‘nicer’ locations. For example, this will force the ticks to be at hours 0,6,12,18 when hourly ticking is done at 6 hour intervals.</p> <p>The AutoDateLocator has an interval dictionary that maps the frequency of the tick (a constant from dateutil.rrule) and a multiple allowed for that ticking. The default looks like this:</p> <pre data-language=\"python\">self.intervald = {\n  YEARLY  : [1, 2, 4, 5, 10, 20, 40, 50, 100, 200, 400, 500,\n            1000, 2000, 4000, 5000, 10000],\n  MONTHLY : [1, 2, 3, 4, 6],\n  DAILY   : [1, 2, 3, 7, 14],\n  HOURLY  : [1, 2, 3, 4, 6, 12],\n  MINUTELY: [1, 5, 10, 15, 30],\n  SECONDLY: [1, 5, 10, 15, 30],\n  MICROSECONDLY: [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000,\n                 5000, 10000, 20000, 50000, 100000, 200000, 500000,\n                 1000000],\n  }\n</pre> <p>The interval is used to specify multiples that are appropriate for the frequency of ticking. For instance, every 7 days is sensible for daily ticks, but for minutes/seconds, 15 or 30 make sense. You can customize this dictionary by doing:</p> <pre data-language=\"python\">locator = AutoDateLocator()\nlocator.intervald[HOURLY] = [3] # only show every 3 hours\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.dates.AutoDateLocator.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Try to choose the view limits intelligently.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.AutoDateLocator.get_locator\"><code>get_locator(dmin, dmax)</code></dt> <dd>\n<p>Pick the best locator based on a distance.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.AutoDateLocator.nonsingular\"><code>nonsingular(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.AutoDateLocator.refresh\"><code>refresh()</code></dt> <dd>\n<p>Refresh internal information based on current limits.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.AutoDateLocator.set_axis\"><code>set_axis(axis)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.AutoDateLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.YearLocator\"><code>class matplotlib.dates.YearLocator(base=1, month=1, day=1, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.DateLocator\" title=\"matplotlib.dates.DateLocator\"><code>matplotlib.dates.DateLocator</code></a></p> <p>Make ticks on a given day of each year that is a multiple of base.</p> <p>Examples:</p> <pre data-language=\"python\"># Tick every year on Jan 1st\nlocator = YearLocator()\n\n# Tick every 5 years on July 4th\nlocator = YearLocator(5, month=7, day=4)\n</pre> <p>Mark years that are multiple of base on a given month and day (default jan 1).</p> <dl class=\"method\"> <dt id=\"matplotlib.dates.YearLocator.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Set the view limits to include the data range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.YearLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.MonthLocator\"><code>class matplotlib.dates.MonthLocator(bymonth=None, bymonthday=1, interval=1, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.RRuleLocator\" title=\"matplotlib.dates.RRuleLocator\"><code>matplotlib.dates.RRuleLocator</code></a></p> <p>Make ticks on occurances of each month month, e.g., 1, 3, 12.</p> <p>Mark every month in <em>bymonth</em>; <em>bymonth</em> can be an int or sequence. Default is <code>range(1,13)</code>, i.e. every month.</p> <p><em>interval</em> is the interval between each iteration. For example, if <code>interval=2</code>, mark every second occurance.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.WeekdayLocator\"><code>class matplotlib.dates.WeekdayLocator(byweekday=1, interval=1, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.RRuleLocator\" title=\"matplotlib.dates.RRuleLocator\"><code>matplotlib.dates.RRuleLocator</code></a></p> <p>Make ticks on occurances of each weekday.</p> <p>Mark every weekday in <em>byweekday</em>; <em>byweekday</em> can be a number or sequence.</p> <p>Elements of <em>byweekday</em> must be one of MO, TU, WE, TH, FR, SA, SU, the constants from <code>dateutil.rrule</code>, which have been imported into the <a class=\"reference internal\" href=\"#module-matplotlib.dates\" title=\"matplotlib.dates\"><code>matplotlib.dates</code></a> namespace.</p> <p><em>interval</em> specifies the number of weeks to skip. For example, <code>interval=2</code> plots every second week.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.DayLocator\"><code>class matplotlib.dates.DayLocator(bymonthday=None, interval=1, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.RRuleLocator\" title=\"matplotlib.dates.RRuleLocator\"><code>matplotlib.dates.RRuleLocator</code></a></p> <p>Make ticks on occurances of each day of the month. For example, 1, 15, 30.</p> <p>Mark every day in <em>bymonthday</em>; <em>bymonthday</em> can be an int or sequence.</p> <p>Default is to tick every day of the month: <code>bymonthday=range(1,32)</code></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.HourLocator\"><code>class matplotlib.dates.HourLocator(byhour=None, interval=1, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.RRuleLocator\" title=\"matplotlib.dates.RRuleLocator\"><code>matplotlib.dates.RRuleLocator</code></a></p> <p>Make ticks on occurances of each hour.</p> <p>Mark every hour in <em>byhour</em>; <em>byhour</em> can be an int or sequence. Default is to tick every hour: <code>byhour=range(24)</code></p> <p><em>interval</em> is the interval between each iteration. For example, if <code>interval=2</code>, mark every second occurrence.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.MinuteLocator\"><code>class matplotlib.dates.MinuteLocator(byminute=None, interval=1, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.RRuleLocator\" title=\"matplotlib.dates.RRuleLocator\"><code>matplotlib.dates.RRuleLocator</code></a></p> <p>Make ticks on occurances of each minute.</p> <p>Mark every minute in <em>byminute</em>; <em>byminute</em> can be an int or sequence. Default is to tick every minute: <code>byminute=range(60)</code></p> <p><em>interval</em> is the interval between each iteration. For example, if <code>interval=2</code>, mark every second occurrence.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.SecondLocator\"><code>class matplotlib.dates.SecondLocator(bysecond=None, interval=1, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.RRuleLocator\" title=\"matplotlib.dates.RRuleLocator\"><code>matplotlib.dates.RRuleLocator</code></a></p> <p>Make ticks on occurances of each second.</p> <p>Mark every second in <em>bysecond</em>; <em>bysecond</em> can be an int or sequence. Default is to tick every second: <code>bysecond = range(60)</code></p> <p><em>interval</em> is the interval between each iteration. For example, if <code>interval=2</code>, mark every second occurrence.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.MicrosecondLocator\"><code>class matplotlib.dates.MicrosecondLocator(interval=1, tz=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.dates.DateLocator\" title=\"matplotlib.dates.DateLocator\"><code>matplotlib.dates.DateLocator</code></a></p> <p>Make ticks on occurances of each microsecond.</p> <p><em>interval</em> is the interval between each iteration. For example, if <code>interval=2</code>, mark every second microsecond.</p> <dl class=\"method\"> <dt id=\"matplotlib.dates.MicrosecondLocator.set_axis\"><code>set_axis(axis)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.MicrosecondLocator.set_data_interval\"><code>set_data_interval(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.MicrosecondLocator.set_view_interval\"><code>set_view_interval(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.dates.MicrosecondLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.rrule\"><code>class matplotlib.dates.rrule(freq, dtstart=None, interval=1, wkst=None, count=None, until=None, bysetpos=None, bymonth=None, bymonthday=None, byyearday=None, byeaster=None, byweekno=None, byweekday=None, byhour=None, byminute=None, bysecond=None, cache=False)</code></dt> <dd>\n<p>Bases: <code>dateutil.rrule.rrulebase</code></p> <p>That’s the base of the rrule operation. It accepts all the keywords defined in the RFC as its constructor parameters (except byday, which was renamed to byweekday) and more. The constructor prototype is:</p> <pre data-language=\"python\">rrule(freq)\n</pre> <p>Where freq must be one of YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, or SECONDLY.</p> <p>Additionally, it supports the following keyword arguments:</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first last simple\"> <li>\n<strong>cache</strong> – If given, it must be a boolean value specifying to enable or disable caching of results. If you will use the same rrule instance multiple times, enabling caching will improve the performance considerably.</li> <li>\n<strong>dtstart</strong> – The recurrence start. Besides being the base for the recurrence, missing parameters in the final recurrence instances will also be extracted from this date. If not given, datetime.now() will be used instead.</li> <li>\n<strong>interval</strong> – The interval between each freq iteration. For example, when using YEARLY, an interval of 2 means once every two years, but with HOURLY, it means once every two hours. The default interval is 1.</li> <li>\n<strong>wkst</strong> – The week start day. Must be one of the MO, TU, WE constants, or an integer, specifying the first day of the week. This will affect recurrences based on weekly periods. The default week start is got from calendar.firstweekday(), and may be modified by calendar.setfirstweekday().</li> <li>\n<strong>count</strong> – How many occurrences will be generated.</li> <li>\n<strong>until</strong> – If given, this must be a datetime instance, that will specify the limit of the recurrence. If a recurrence instance happens to be the same as the datetime instance given in the until keyword, this will be the last occurrence.</li> <li>\n<strong>bysetpos</strong> – If given, it must be either an integer, or a sequence of integers, positive or negative. Each given integer will specify an occurrence number, corresponding to the nth occurrence of the rule inside the frequency period. For example, a bysetpos of -1 if combined with a MONTHLY frequency, and a byweekday of (MO, TU, WE, TH, FR), will result in the last work day of every month.</li> <li>\n<strong>bymonth</strong> – If given, it must be either an integer, or a sequence of integers, meaning the months to apply the recurrence to.</li> <li>\n<strong>bymonthday</strong> – If given, it must be either an integer, or a sequence of integers, meaning the month days to apply the recurrence to.</li> <li>\n<strong>byyearday</strong> – If given, it must be either an integer, or a sequence of integers, meaning the year days to apply the recurrence to.</li> <li>\n<strong>byweekno</strong> – If given, it must be either an integer, or a sequence of integers, meaning the week numbers to apply the recurrence to. Week numbers have the meaning described in ISO8601, that is, the first week of the year is that containing at least four days of the new year.</li> <li>\n<strong>byweekday</strong> – If given, it must be either an integer (0 == MO), a sequence of integers, one of the weekday constants (MO, TU, etc), or a sequence of these constants. When given, these variables will define the weekdays where the recurrence will be applied. It’s also possible to use an argument n for the weekday instances, which will mean the nth occurrence of this weekday in the period. For example, with MONTHLY, or with YEARLY and BYMONTH, using FR(+1) in byweekday will specify the first friday of the month where the recurrence happens. Notice that in the RFC documentation, this is specified as BYDAY, but was renamed to avoid the ambiguity of that keyword.</li> <li>\n<strong>byhour</strong> – If given, it must be either an integer, or a sequence of integers, meaning the hours to apply the recurrence to.</li> <li>\n<strong>byminute</strong> – If given, it must be either an integer, or a sequence of integers, meaning the minutes to apply the recurrence to.</li> <li>\n<strong>bysecond</strong> – If given, it must be either an integer, or a sequence of integers, meaning the seconds to apply the recurrence to.</li> <li>\n<strong>byeaster</strong> – If given, it must be either an integer, or a sequence of integers, positive or negative. Each integer will define an offset from the Easter Sunday. Passing the offset 0 to byeaster will yield the Easter Sunday itself. This is an extension to the RFC specification.</li> </ul> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.dates.relativedelta\"><code>class matplotlib.dates.relativedelta(dt1=None, dt2=None, years=0, months=0, days=0, leapdays=0, weeks=0, hours=0, minutes=0, seconds=0, microseconds=0, year=None, month=None, day=None, weekday=None, yearday=None, nlyearday=None, hour=None, minute=None, second=None, microsecond=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>The relativedelta type is based on the specification of the excellent work done by M.-A. Lemburg in his <a class=\"reference external\" href=\"http://www.egenix.com/files/python/mxDateTime.html\">mx.DateTime</a> extension. However, notice that this type does <em>NOT</em> implement the same algorithm as his work. Do <em>NOT</em> expect it to behave like mx.DateTime’s counterpart.</p> <p>There are two different ways to build a relativedelta instance. The first one is passing it two date/datetime classes:</p> <pre data-language=\"python\">relativedelta(datetime1, datetime2)\n</pre> <p>The second one is passing it any number of the following keyword arguments:</p> <pre data-language=\"python\">relativedelta(arg1=x,arg2=y,arg3=z...)\n\nyear, month, day, hour, minute, second, microsecond:\n    Absolute information (argument is singular); adding or subtracting a\n    relativedelta with absolute information does not perform an aritmetic\n    operation, but rather REPLACES the corresponding value in the\n    original datetime with the value(s) in relativedelta.\n\nyears, months, weeks, days, hours, minutes, seconds, microseconds:\n    Relative information, may be negative (argument is plural); adding\n    or subtracting a relativedelta with relative information performs\n    the corresponding aritmetic operation on the original datetime value\n    with the information in the relativedelta.  \n\nweekday:\n    One of the weekday instances (MO, TU, etc). These instances may\n    receive a parameter N, specifying the Nth weekday, which could\n    be positive or negative (like MO(+1) or MO(-2). Not specifying\n    it is the same as specifying +1. You can also use an integer,\n    where 0=MO.\n\nleapdays:\n    Will add given days to the date found, if year is a leap\n    year, and the date found is post 28 of february.\n\nyearday, nlyearday:\n    Set the yearday or the non-leap year day (jump leap days).\n    These are converted to day/month/leapdays information.\n</pre> <p>Here is the behavior of operations with relativedelta:</p> <ol class=\"arabic simple\"> <li>Calculate the absolute year, using the ‘year’ argument, or the original datetime year, if the argument is not present.</li> <li>Add the relative ‘years’ argument to the absolute year.</li> <li>Do steps 1 and 2 for month/months.</li> <li>Calculate the absolute day, using the ‘day’ argument, or the original datetime day, if the argument is not present. Then, subtract from the day until it fits in the year and month found after their operations.</li> <li>Add the relative ‘days’ argument to the absolute day. Notice that the ‘weeks’ argument is multiplied by 7 and added to ‘days’.</li> <li>Do steps 1 and 2 for hour/hours, minute/minutes, second/seconds, microsecond/microseconds.</li> <li>If the ‘weekday’ argument is present, calculate the weekday, with the given (wday, nth) tuple. wday is the index of the weekday (0-6, 0=Mon), and nth is the number of weeks to add forward or backward, depending on its signal. Notice that if the calculated date is already Monday, for example, using (0, 1) or (0, -1) won’t change the day.</li> </ol> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.seconds\"><code>matplotlib.dates.seconds(s)</code></dt> <dd>\n<p>Return seconds as days.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.minutes\"><code>matplotlib.dates.minutes(m)</code></dt> <dd>\n<p>Return minutes as days.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.hours\"><code>matplotlib.dates.hours(h)</code></dt> <dd>\n<p>Return hours as days.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.dates.weeks\"><code>matplotlib.dates.weeks(w)</code></dt> <dd>\n<p>Return weeks as days.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/dates_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/dates_api.html</a>\n  </p>\n</div>\n","patheffects_api":"<h1 id=\"patheffects\">patheffects</h1>  <h2 id=\"matplotlib-patheffects\">matplotlib.patheffects</h2> <p id=\"module-matplotlib.patheffects\">Defines classes for path effects. The path effects are supported in <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a>, <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> and <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>.</p> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.AbstractPathEffect\"><code>class matplotlib.patheffects.AbstractPathEffect(offset=(0.0, 0.0))</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A base class for path effects.</p> <p>Subclasses should override the <code>draw_path</code> method to add effect functionality.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>offset</strong> : pair of floats</p> <blockquote class=\"last\"> <div>\n<p>The offset to apply to the path, measured in points.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.AbstractPathEffect.draw_path\"><code>draw_path(renderer, gc, tpath, affine, rgbFace=None)</code></dt> <dd>\n<p>Derived should override this method. The arguments are the same as <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.RendererBase.draw_path\" title=\"matplotlib.backend_bases.RendererBase.draw_path\"><code>matplotlib.backend_bases.RendererBase.draw_path()</code></a> except the first argument is a renderer.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.Normal\"><code>class matplotlib.patheffects.Normal(offset=(0.0, 0.0))</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patheffects.AbstractPathEffect\" title=\"matplotlib.patheffects.AbstractPathEffect\"><code>matplotlib.patheffects.AbstractPathEffect</code></a></p> <p>The “identity” PathEffect.</p> <p>The Normal PathEffect’s sole purpose is to draw the original artist with no special path effect.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>offset</strong> : pair of floats</p> <blockquote class=\"last\"> <div>\n<p>The offset to apply to the path, measured in points.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.PathEffectRenderer\"><code>class matplotlib.patheffects.PathEffectRenderer(path_effects, renderer)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.RendererBase\" title=\"matplotlib.backend_bases.RendererBase\"><code>matplotlib.backend_bases.RendererBase</code></a></p> <p>Implements a Renderer which contains another renderer.</p> <p>This proxy then intercepts draw calls, calling the appropriate <a class=\"reference internal\" href=\"#matplotlib.patheffects.AbstractPathEffect\" title=\"matplotlib.patheffects.AbstractPathEffect\"><code>AbstractPathEffect</code></a> draw method.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all methods have been overridden on this RendererBase subclass. It may be necessary to add further methods to extend the PathEffects capabilities further.</p> </div> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>path_effects</strong> : iterable of <a class=\"reference internal\" href=\"#matplotlib.patheffects.AbstractPathEffect\" title=\"matplotlib.patheffects.AbstractPathEffect\"><code>AbstractPathEffect</code></a></p> <blockquote> <div>\n<p>The path effects which this renderer represents.</p> </div>\n</blockquote> <p class=\"last\"><strong>renderer</strong> : <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.RendererBase\" title=\"matplotlib.backend_bases.RendererBase\"><code>matplotlib.backend_bases.RendererBase</code></a> instance</p> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.PathEffectRenderer.copy_with_path_effect\"><code>copy_with_path_effect(path_effects)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.PathEffectRenderer.draw_markers\"><code>draw_markers(gc, marker_path, marker_trans, path, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.PathEffectRenderer.draw_path\"><code>draw_path(gc, tpath, affine, rgbFace=None)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.PathEffectRenderer.draw_path_collection\"><code>draw_path_collection(gc, master_transform, paths, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.PathEffectRenderer.new_gc\"><code>new_gc()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.PathEffectRenderer.points_to_pixels\"><code>points_to_pixels(points)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.PathPatchEffect\"><code>class matplotlib.patheffects.PathPatchEffect(offset=(0, 0), **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patheffects.AbstractPathEffect\" title=\"matplotlib.patheffects.AbstractPathEffect\"><code>matplotlib.patheffects.AbstractPathEffect</code></a></p> <p>Draws a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.PathPatch\" title=\"matplotlib.patches.PathPatch\"><code>PathPatch</code></a> instance whose Path comes from the original PathEffect artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>offset</strong> : pair of floats</p> <blockquote> <div>\n<p>The offset to apply to the path, in points.</p> </div>\n</blockquote> <p><strong>**kwargs :</strong></p> <blockquote class=\"last\"> <div>\n<p>All keyword arguments are passed through to the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.PathPatch\" title=\"matplotlib.patches.PathPatch\"><code>PathPatch</code></a> constructor. The properties which cannot be overridden are “path”, “clip_box” “transform” and “clip_path”.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.PathPatchEffect.draw_path\"><code>draw_path(renderer, gc, tpath, affine, rgbFace)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.SimpleLineShadow\"><code>class matplotlib.patheffects.SimpleLineShadow(offset=(2, -2), shadow_color='k', alpha=0.3, rho=0.3, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patheffects.AbstractPathEffect\" title=\"matplotlib.patheffects.AbstractPathEffect\"><code>matplotlib.patheffects.AbstractPathEffect</code></a></p> <p>A simple shadow via a line.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>offset</strong> : pair of floats</p> <blockquote> <div>\n<p>The offset to apply to the path, in points.</p> </div>\n</blockquote> <p><strong>shadow_color</strong> : color</p> <blockquote> <div>\n<p>The shadow color. Default is black. A value of <code>None</code> takes the original artist’s color with a scale factor of <code>rho</code>.</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>The alpha transparency of the created shadow patch. Default is 0.3.</p> </div>\n</blockquote> <p><strong>rho</strong> : float</p> <blockquote> <div>\n<p>A scale factor to apply to the rgbFace color if <code>shadow_rgbFace</code> is <code>None</code>. Default is 0.3.</p> </div>\n</blockquote> <p><strong>**kwargs</strong></p> <blockquote class=\"last\"> <div>\n<p>Extra keywords are stored and passed through to <code>AbstractPathEffect._update_gc()</code>.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.SimpleLineShadow.draw_path\"><code>draw_path(renderer, gc, tpath, affine, rgbFace)</code></dt> <dd>\n<p>Overrides the standard draw_path to add the shadow offset and necessary color changes for the shadow.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.SimplePatchShadow\"><code>class matplotlib.patheffects.SimplePatchShadow(offset=(2, -2), shadow_rgbFace=None, alpha=None, rho=0.3, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patheffects.AbstractPathEffect\" title=\"matplotlib.patheffects.AbstractPathEffect\"><code>matplotlib.patheffects.AbstractPathEffect</code></a></p> <p>A simple shadow via a filled patch.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>offset</strong> : pair of floats</p> <blockquote> <div>\n<p>The offset of the shadow in points.</p> </div>\n</blockquote> <p><strong>shadow_rgbFace</strong> : color</p> <blockquote> <div>\n<p>The shadow color.</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>The alpha transparency of the created shadow patch. Default is 0.3. <a class=\"reference external\" href=\"http://matplotlib.1069221.n5.nabble.com/path-effects-question-td27630.html\">http://matplotlib.1069221.n5.nabble.com/path-effects-question-td27630.html</a></p> </div>\n</blockquote> <p><strong>rho</strong> : float</p> <blockquote> <div>\n<p>A scale factor to apply to the rgbFace color if <code>shadow_rgbFace</code> is not specified. Default is 0.3.</p> </div>\n</blockquote> <p><strong>**kwargs</strong></p> <blockquote class=\"last\"> <div>\n<p>Extra keywords are stored and passed through to <code>AbstractPathEffect._update_gc()</code>.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.SimplePatchShadow.draw_path\"><code>draw_path(renderer, gc, tpath, affine, rgbFace)</code></dt> <dd>\n<p>Overrides the standard draw_path to add the shadow offset and necessary color changes for the shadow.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.Stroke\"><code>class matplotlib.patheffects.Stroke(offset=(0, 0), **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patheffects.AbstractPathEffect\" title=\"matplotlib.patheffects.AbstractPathEffect\"><code>matplotlib.patheffects.AbstractPathEffect</code></a></p> <p>A line based PathEffect which re-draws a stroke.</p> <p>The path will be stroked with its gc updated with the given keyword arguments, i.e., the keyword arguments should be valid gc parameter values.</p> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.Stroke.draw_path\"><code>draw_path(renderer, gc, tpath, affine, rgbFace)</code></dt> <dd>\n<p>draw the path with updated gc.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.withSimplePatchShadow\"><code>class matplotlib.patheffects.withSimplePatchShadow(offset=(2, -2), shadow_rgbFace=None, alpha=None, rho=0.3, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patheffects.SimplePatchShadow\" title=\"matplotlib.patheffects.SimplePatchShadow\"><code>matplotlib.patheffects.SimplePatchShadow</code></a></p> <p>Adds a simple <a class=\"reference internal\" href=\"#matplotlib.patheffects.SimplePatchShadow\" title=\"matplotlib.patheffects.SimplePatchShadow\"><code>SimplePatchShadow</code></a> and then draws the original Artist to avoid needing to call <a class=\"reference internal\" href=\"#matplotlib.patheffects.Normal\" title=\"matplotlib.patheffects.Normal\"><code>Normal</code></a>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>offset</strong> : pair of floats</p> <blockquote> <div>\n<p>The offset of the shadow in points.</p> </div>\n</blockquote> <p><strong>shadow_rgbFace</strong> : color</p> <blockquote> <div>\n<p>The shadow color.</p> </div>\n</blockquote> <p><strong>alpha</strong> : float</p> <blockquote> <div>\n<p>The alpha transparency of the created shadow patch. Default is 0.3. <a class=\"reference external\" href=\"http://matplotlib.1069221.n5.nabble.com/path-effects-question-td27630.html\">http://matplotlib.1069221.n5.nabble.com/path-effects-question-td27630.html</a></p> </div>\n</blockquote> <p><strong>rho</strong> : float</p> <blockquote> <div>\n<p>A scale factor to apply to the rgbFace color if <code>shadow_rgbFace</code> is not specified. Default is 0.3.</p> </div>\n</blockquote> <p><strong>**kwargs</strong></p> <blockquote class=\"last\"> <div>\n<p>Extra keywords are stored and passed through to <code>AbstractPathEffect._update_gc()</code>.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.withSimplePatchShadow.draw_path\"><code>draw_path(renderer, gc, tpath, affine, rgbFace)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patheffects.withStroke\"><code>class matplotlib.patheffects.withStroke(offset=(0, 0), **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patheffects.Stroke\" title=\"matplotlib.patheffects.Stroke\"><code>matplotlib.patheffects.Stroke</code></a></p> <p>Adds a simple <a class=\"reference internal\" href=\"#matplotlib.patheffects.Stroke\" title=\"matplotlib.patheffects.Stroke\"><code>Stroke</code></a> and then draws the original Artist to avoid needing to call <a class=\"reference internal\" href=\"#matplotlib.patheffects.Normal\" title=\"matplotlib.patheffects.Normal\"><code>Normal</code></a>.</p> <p>The path will be stroked with its gc updated with the given keyword arguments, i.e., the keyword arguments should be valid gc parameter values.</p> <dl class=\"method\"> <dt id=\"matplotlib.patheffects.withStroke.draw_path\"><code>draw_path(renderer, gc, tpath, affine, rgbFace)</code></dt> \n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/patheffects_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/patheffects_api.html</a>\n  </p>\n</div>\n","lines_api":"<h1 id=\"lines\">lines</h1>  <h2 id=\"matplotlib-lines\">matplotlib.lines</h2> <p id=\"module-matplotlib.lines\">This module contains all the 2D line class which can draw with a variety of line styles, markers and colors.</p> <dl class=\"class\"> <dt id=\"matplotlib.lines.Line2D\"><code>class matplotlib.lines.Line2D(xdata, ydata, linewidth=None, linestyle=None, color=None, marker=None, markersize=None, markeredgewidth=None, markeredgecolor=None, markerfacecolor=None, markerfacecoloralt='none', fillstyle=None, antialiased=None, dash_capstyle=None, solid_capstyle=None, dash_joinstyle=None, solid_joinstyle=None, pickradius=5, drawstyle=None, markevery=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a></p> <p>A line - the line can have both a solid linestyle connecting all the vertices, and a marker at each vertex. Additionally, the drawing of the solid line is influenced by the drawstyle, e.g., one can create “stepped” lines in various styles.</p> <p>Create a <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance with <em>x</em> and <em>y</em> data in sequences <em>xdata</em>, <em>ydata</em>.</p> <p>The kwargs are <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>See <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>set_linestyle()</code></a> for a decription of the line styles, <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>set_marker()</code></a> for a description of the markers, and <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>set_drawstyle()</code></a> for a description of the draw styles.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred on the line. The pick radius determines the precision of the location test (usually within five points of the value). Use <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.get_pickradius\" title=\"matplotlib.lines.Line2D.get_pickradius\"><code>get_pickradius()</code></a> or <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>set_pickradius()</code></a> to view or modify it.</p> <p>Returns <em>True</em> if any values are within the radius along with <code>{'ind': pointlist}</code>, where <em>pointlist</em> is the set of points within the radius.</p> <p>TODO: sort returned indices by distance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>draw the Line with <code>renderer</code> unless visibility is False</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.drawStyleKeys\"><code>drawStyleKeys = ['default', 'steps-pre', 'steps-mid', 'steps-post', 'steps']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.drawStyles\"><code>drawStyles = {'default': '_draw_lines', 'steps-pre': '_draw_steps_pre', 'steps-mid': '_draw_steps_mid', 'steps-post': '_draw_steps_post', 'steps': '_draw_steps_pre'}</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.fillStyles\"><code>fillStyles = ('full', 'left', 'right', 'bottom', 'top', 'none')</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.filled_markers\"><code>filled_markers = ('o', 'v', '^', '', '8', 's', 'p', '*', 'h', 'H', 'D', 'd')</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_aa\"><code>get_aa()</code></dt> <dd>\n<p>alias for get_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_antialiased\"><code>get_antialiased()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_c\"><code>get_c()</code></dt> <dd>\n<p>alias for get_color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_color\"><code>get_color()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_dash_capstyle\"><code>get_dash_capstyle()</code></dt> <dd>\n<p>Get the cap style for dashed linestyles</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_dash_joinstyle\"><code>get_dash_joinstyle()</code></dt> <dd>\n<p>Get the join style for dashed linestyles</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_data\"><code>get_data(orig=True)</code></dt> <dd>\n<p>Return the xdata, ydata.</p> <p>If <em>orig</em> is <em>True</em>, return the original data.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_drawstyle\"><code>get_drawstyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_fillstyle\"><code>get_fillstyle()</code></dt> <dd>\n<p>return the marker fillstyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_ls\"><code>get_ls()</code></dt> <dd>\n<p>alias for get_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_lw\"><code>get_lw()</code></dt> <dd>\n<p>alias for get_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_marker\"><code>get_marker()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_markeredgecolor\"><code>get_markeredgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_markeredgewidth\"><code>get_markeredgewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_markerfacecolor\"><code>get_markerfacecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_markerfacecoloralt\"><code>get_markerfacecoloralt()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_markersize\"><code>get_markersize()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_markevery\"><code>get_markevery()</code></dt> <dd>\n<p>return the markevery setting</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_mec\"><code>get_mec()</code></dt> <dd>\n<p>alias for get_markeredgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_mew\"><code>get_mew()</code></dt> <dd>\n<p>alias for get_markeredgewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_mfc\"><code>get_mfc()</code></dt> <dd>\n<p>alias for get_markerfacecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_mfcalt\"><code>get_mfcalt(alt=False)</code></dt> <dd>\n<p>alias for get_markerfacecoloralt</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_ms\"><code>get_ms()</code></dt> <dd>\n<p>alias for get_markersize</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_path\"><code>get_path()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> object associated with this line.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_pickradius\"><code>get_pickradius()</code></dt> <dd>\n<p>return the pick radius used for containment tests</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_solid_capstyle\"><code>get_solid_capstyle()</code></dt> <dd>\n<p>Get the cap style for solid linestyles</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_solid_joinstyle\"><code>get_solid_joinstyle()</code></dt> <dd>\n<p>Get the join style for solid linestyles</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_xdata\"><code>get_xdata(orig=True)</code></dt> <dd>\n<p>Return the xdata.</p> <p>If <em>orig</em> is <em>True</em>, return the original data, else the processed data.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_xydata\"><code>get_xydata()</code></dt> <dd>\n<p>Return the <em>xy</em> data as a Nx2 numpy array.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.get_ydata\"><code>get_ydata(orig=True)</code></dt> <dd>\n<p>Return the ydata.</p> <p>If <em>orig</em> is <em>True</em>, return the original data, else the processed data.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.is_dashed\"><code>is_dashed()</code></dt> <dd>\n<p>return True if line is dashstyle</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.lineStyles\"><code>lineStyles = {'': '_draw_nothing', 'None': '_draw_nothing', ':': '_draw_dotted', '-': '_draw_solid', '-.': '_draw_dash_dot', '--': '_draw_dashed', ' ': '_draw_nothing'}</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.markers\"><code>markers = {'+': 'plus', 0: 'tickleft', '4': 'tri_right', 3: 'tickdown', 4: 'caretleft', 'H': 'hexagon2', 'v': 'triangle_down', '3': 'tri_left', 'p': 'pentagon', 'h': 'hexagon1', '*': 'star', 'None': 'nothing', 'x': 'x', 'o': 'circle', 7: 'caretdown', '': 'nothing', '.': 'point', 5: 'caretright', ',': 'pixel', '2': 'tri_up', 1: 'tickright', 6: 'caretup', 's': 'square', '^': 'triangle_up', 'd': 'thin_diamond', '': 'triangle_right', None: 'nothing', 2: 'tickup', '8': 'octagon', ' ': 'nothing', 'D': 'diamond'}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.recache\"><code>recache(always=False)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.recache_always\"><code>recache_always()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_aa\"><code>set_aa(val)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_antialiased\"><code>set_antialiased(b)</code></dt> <dd>\n<p>True if line should be drawin with antialiased rendering</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_c\"><code>set_c(val)</code></dt> <dd>\n<p>alias for set_color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_color\"><code>set_color(color)</code></dt> <dd>\n<p>Set the color of the line</p> <p>ACCEPTS: any matplotlib color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>set_dash_capstyle(s)</code></dt> <dd>\n<p>Set the cap style for dashed linestyles</p> <p>ACCEPTS: [‘butt’ | ‘round’ | ‘projecting’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>set_dash_joinstyle(s)</code></dt> <dd>\n<p>Set the join style for dashed linestyles ACCEPTS: [‘miter’ | ‘round’ | ‘bevel’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_dashes\"><code>set_dashes(seq)</code></dt> <dd>\n<p>Set the dash sequence, sequence of dashes with on off ink in points. If seq is empty or if seq = (None, None), the linestyle will be set to solid.</p> <p>ACCEPTS: sequence of on/off ink in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_data\"><code>set_data(*args)</code></dt> <dd>\n<p>Set the x and y data</p> <p>ACCEPTS: 2D array (rows are x, y) or two 1D arrays</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_drawstyle\"><code>set_drawstyle(drawstyle)</code></dt> <dd>\n<p>Set the drawstyle of the plot</p> <p>‘default’ connects the points with lines. The steps variants produce step-plots. ‘steps’ is equivalent to ‘steps-pre’ and is maintained for backward-compatibility.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ |</dt> <dd>‘steps-post’]</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_fillstyle\"><code>set_fillstyle(fs)</code></dt> <dd>\n<p>Set the marker fill style; ‘full’ means fill the whole marker. ‘none’ means no filling; other options are for half-filled markers.</p> <p>ACCEPTS: [‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle of the line (also accepts drawstyles, e.g., <code>'steps--'</code>)</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> <tr class=\"row-even\">\n<td><code>'None'</code></td> <td>draw nothing</td> </tr> <tr class=\"row-odd\">\n<td><code>' '</code></td> <td>draw nothing</td> </tr> <tr class=\"row-even\">\n<td><code>''</code></td> <td>draw nothing</td> </tr> </tbody> </table> <p>‘steps’ is equivalent to ‘steps-pre’ and is maintained for backward-compatibility.</p> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>set_drawstyle()</code></a></dt> <dd>To set the drawing style (stepping) of the plot.</dd> </dl> </div> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_linewidth\"><code>set_linewidth(w)</code></dt> <dd>\n<p>Set the line width in points</p> <p>ACCEPTS: float value in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_ls\"><code>set_ls(val)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_lw\"><code>set_lw(val)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_marker\"><code>set_marker(marker)</code></dt> <dd>\n<p>Set the line marker</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>marker: marker style</strong></p> <blockquote class=\"last\"> <div>\n<p>See <a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>markers</code></a> for full description of possible argument</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>set_markeredgecolor(ec)</code></dt> <dd>\n<p>Set the marker edge color</p> <p>ACCEPTS: any matplotlib color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>set_markeredgewidth(ew)</code></dt> <dd>\n<p>Set the marker edge width in points</p> <p>ACCEPTS: float value in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>set_markerfacecolor(fc)</code></dt> <dd>\n<p>Set the marker face color.</p> <p>ACCEPTS: any matplotlib color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>set_markerfacecoloralt(fc)</code></dt> <dd>\n<p>Set the alternate marker face color.</p> <p>ACCEPTS: any matplotlib color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_markersize\"><code>set_markersize(sz)</code></dt> <dd>\n<p>Set the marker size in points</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_markevery\"><code>set_markevery(every)</code></dt> <dd>\n<p>Set the markevery property to subsample the plot when using markers.</p> <p>e.g., if <code>every=5</code>, every 5-th marker will be plotted.</p> <p>ACCEPTS: [None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>every: None | int | length-2 tuple of int | slice | list/array of int |</strong></p> <p><strong>float | length-2 tuple of float</strong></p> <blockquote class=\"last\"> <div>\n<p>Which markers to plot.</p> <ul class=\"simple\"> <li>every=None, every point will be plotted.</li> <li>every=N, every N-th marker will be plotted starting with marker 0.</li> <li>every=(start, N), every N-th marker, starting at point start, will be plotted.</li> <li>every=slice(start, end, N), every N-th marker, starting at point start, upto but not including point end, will be plotted.</li> <li>every=[i, j, m, n], only markers at points i, j, m, and n will be plotted.</li> <li>every=0.1, (i.e. a float) then markers will be spaced at approximately equal distances along the line; the distance along the line between markers is determined by multiplying the display-coordinate distance of the axes bounding-box diagonal by the value of every.</li> <li>every=(0.5, 0.1) (i.e. a length-2 tuple of float), the same functionality as every=0.1 is exhibited but the first marker will be 0.5 multiplied by the display-cordinate-diagonal-distance along the line.</li> </ul> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>Setting the markevery property will only show markers at actual data points. When using float arguments to set the markevery property on irregularly spaced data, the markers will likely not appear evenly spaced because the actual data points do not coincide with the theoretical spacing between markers.</p> <p>When using a start offset to specify the first marker, the offset will be from the first data point which may be different from the first the visible data point if the plot is zoomed in.</p> <p>If zooming in on a plot when using float arguments then the actual data points that have markers will change because the distance between markers is always determined from the display-coordinates axes-bounding-box-diagonal regardless of the actual axes data limits.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_mec\"><code>set_mec(val)</code></dt> <dd>\n<p>alias for set_markeredgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_mew\"><code>set_mew(val)</code></dt> <dd>\n<p>alias for set_markeredgewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_mfc\"><code>set_mfc(val)</code></dt> <dd>\n<p>alias for set_markerfacecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_mfcalt\"><code>set_mfcalt(val)</code></dt> <dd>\n<p>alias for set_markerfacecoloralt</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_ms\"><code>set_ms(val)</code></dt> <dd>\n<p>alias for set_markersize</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_picker\"><code>set_picker(p)</code></dt> <dd>\n<p>Sets the event picker details for the line.</p> <p>ACCEPTS: float distance in points or callable pick function <code>fn(artist, event)</code></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_pickradius\"><code>set_pickradius(d)</code></dt> <dd>\n<p>Sets the pick radius used for containment tests</p> <p>ACCEPTS: float distance in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>set_solid_capstyle(s)</code></dt> <dd>\n<p>Set the cap style for solid linestyles</p> <p>ACCEPTS: [‘butt’ | ‘round’ | ‘projecting’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>set_solid_joinstyle(s)</code></dt> <dd>\n<p>Set the join style for solid linestyles ACCEPTS: [‘miter’ | ‘round’ | ‘bevel’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>set the Transformation instance used by this artist</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_xdata\"><code>set_xdata(x)</code></dt> <dd>\n<p>Set the data np.array for x</p> <p>ACCEPTS: 1D array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.set_ydata\"><code>set_ydata(y)</code></dt> <dd>\n<p>Set the data np.array for y</p> <p>ACCEPTS: 1D array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.Line2D.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.validCap\"><code>validCap = ('butt', 'round', 'projecting')</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.validJoin\"><code>validJoin = ('miter', 'round', 'bevel')</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.lines.Line2D.zorder\"><code>zorder = 2</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.lines.VertexSelector\"><code>class matplotlib.lines.VertexSelector(line)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Manage the callbacks to maintain a list of selected vertices for <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a>. Derived classes should override <a class=\"reference internal\" href=\"#matplotlib.lines.VertexSelector.process_selected\" title=\"matplotlib.lines.VertexSelector.process_selected\"><code>process_selected()</code></a> to do something with the picks.</p> <p>Here is an example which highlights the selected verts with red circles:</p> <pre data-language=\"python\">import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as lines\n\nclass HighlightSelected(lines.VertexSelector):\n    def __init__(self, line, fmt='ro', **kwargs):\n        lines.VertexSelector.__init__(self, line)\n        self.markers, = self.axes.plot([], [], fmt, **kwargs)\n\n    def process_selected(self, ind, xs, ys):\n        self.markers.set_data(xs, ys)\n        self.canvas.draw()\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nx, y = np.random.rand(2, 30)\nline, = ax.plot(x, y, 'bs-', picker=5)\n\nselector = HighlightSelected(line)\nplt.show()\n</pre> <p>Initialize the class with a <a class=\"reference internal\" href=\"#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a> instance. The line should already be added to some <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> instance and should have the picker property set.</p> <dl class=\"method\"> <dt id=\"matplotlib.lines.VertexSelector.onpick\"><code>onpick(event)</code></dt> <dd>\n<p>When the line is picked, update the set of selected indicies.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.lines.VertexSelector.process_selected\"><code>process_selected(ind, xs, ys)</code></dt> <dd>\n<p>Default “do nothing” implementation of the <a class=\"reference internal\" href=\"#matplotlib.lines.VertexSelector.process_selected\" title=\"matplotlib.lines.VertexSelector.process_selected\"><code>process_selected()</code></a> method.</p> <p><em>ind</em> are the indices of the selected vertices. <em>xs</em> and <em>ys</em> are the coordinates of the selected vertices.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.lines.segment_hits\"><code>matplotlib.lines.segment_hits(cx, cy, x, y, radius)</code></dt> <dd>\n<p>Determine if any line segments are within radius of a point. Returns the list of line segments that are within that radius.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/lines_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/lines_api.html</a>\n  </p>\n</div>\n","path_api":"<h1 id=\"path\">path</h1>  <h2 id=\"matplotlib-path\">matplotlib.path</h2> <p id=\"module-matplotlib.path\">A module for dealing with the polylines used throughout matplotlib.</p> <p>The primary class for polyline handling in matplotlib is <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>. Almost all vector drawing makes use of Paths somewhere in the drawing pipeline.</p> <p>Whilst a <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance itself cannot be drawn, there exists <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> subclasses which can be used for convenient Path visualisation - the two most frequently used of these are <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.PathPatch\" title=\"matplotlib.patches.PathPatch\"><code>PathPatch</code></a> and <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PathCollection\" title=\"matplotlib.collections.PathCollection\"><code>PathCollection</code></a>.</p> <dl class=\"class\"> <dt id=\"matplotlib.path.Path\"><code>class matplotlib.path.Path(vertices, codes=None, _interpolation_steps=1, closed=False, readonly=False)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p><a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> represents a series of possibly disconnected, possibly closed, line and curve segments.</p> <dl class=\"docutils\"> <dt>The underlying storage is made up of two parallel numpy arrays:</dt> <dd>\n<ul class=\"first last simple\"> <li>\n<em>vertices</em>: an Nx2 float array of vertices</li> <li>\n<em>codes</em>: an N-length uint8 array of vertex types</li> </ul> </dd> </dl> <p>These two arrays always have the same length in the first dimension. For example, to represent a cubic curve, you must provide three vertices as well as three codes <code>CURVE3</code>.</p> <p>The code types are:</p> <blockquote> <div>\n<ul> <li>\n<dl class=\"first docutils\"> <dt>\n<code>STOP</code> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1 vertex (ignored)</span>\n</dt> <dd>\n<p class=\"first last\">A marker for the end of the entire path (currently not required and ignored)</p> </dd> </dl> </li> <li>\n<dl class=\"first docutils\"> <dt>\n<code>MOVETO</code> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1 vertex</span>\n</dt> <dd>\n<p class=\"first last\">Pick up the pen and move to the given vertex.</p> </dd> </dl> </li> <li>\n<dl class=\"first docutils\"> <dt>\n<code>LINETO</code> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1 vertex</span>\n</dt> <dd>\n<p class=\"first last\">Draw a line from the current position to the given vertex.</p> </dd> </dl> </li> <li>\n<dl class=\"first docutils\"> <dt>\n<code>CURVE3</code> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1 control point, 1 endpoint</span>\n</dt> <dd>\n<p class=\"first last\">Draw a quadratic Bezier curve from the current position, with the given control point, to the given end point.</p> </dd> </dl> </li> <li>\n<dl class=\"first docutils\"> <dt>\n<code>CURVE4</code> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2 control points, 1 endpoint</span>\n</dt> <dd>\n<p class=\"first last\">Draw a cubic Bezier curve from the current position, with the given control points, to the given end point.</p> </dd> </dl> </li> <li>\n<dl class=\"first docutils\"> <dt>\n<code>CLOSEPOLY</code> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1 vertex (ignored)</span>\n</dt> <dd>\n<p class=\"first last\">Draw a line segment to the start point of the current polyline.</p> </dd> </dl> </li> </ul> </div>\n</blockquote> <p>Users of Path objects should not access the vertices and codes arrays directly. Instead, they should use <a class=\"reference internal\" href=\"#matplotlib.path.Path.iter_segments\" title=\"matplotlib.path.Path.iter_segments\"><code>iter_segments()</code></a> or <a class=\"reference internal\" href=\"#matplotlib.path.Path.cleaned\" title=\"matplotlib.path.Path.cleaned\"><code>cleaned()</code></a> to get the vertex/code pairs. This is important, since many <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> objects, as an optimization, do not store a <em>codes</em> at all, but have a default one provided for them by <a class=\"reference internal\" href=\"#matplotlib.path.Path.iter_segments\" title=\"matplotlib.path.Path.iter_segments\"><code>iter_segments()</code></a>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The vertices and codes arrays should be treated as immutable – there are a number of optimizations and assumptions made up front in the constructor that will not change when the data changes.</p> </div> <p>Create a new path with the given vertices and codes.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>vertices</strong> : array_like</p> <blockquote> <div>\n<p>The <code>(n, 2)</code> float array, masked array or sequence of pairs representing the vertices of the path.</p> <p>If <em>vertices</em> contains masked values, they will be converted to NaNs which are then handled correctly by the Agg PathIterator and other consumers of path data, such as <a class=\"reference internal\" href=\"#matplotlib.path.Path.iter_segments\" title=\"matplotlib.path.Path.iter_segments\"><code>iter_segments()</code></a>.</p> </div>\n</blockquote> <p><strong>codes</strong> : {None, array_like}, optional</p> <blockquote> <div>\n<p>n-length array integers representing the codes of the path. If not None, codes must be the same length as vertices. If None, <em>vertices</em> will be treated as a series of line segments.</p> </div>\n</blockquote> <p><strong>_interpolation_steps</strong> : int, optional</p> <blockquote> <div>\n<p>Used as a hint to certain projections, such as Polar, that this path should be linearly interpolated immediately before drawing. This attribute is primarily an implementation detail and is not intended for public use.</p> </div>\n</blockquote> <p><strong>closed</strong> : bool, optional</p> <blockquote> <div>\n<p>If <em>codes</em> is None and closed is True, vertices will be treated as line segments of a closed polygon.</p> </div>\n</blockquote> <p><strong>readonly</strong> : bool, optional</p> <blockquote class=\"last\"> <div>\n<p>Makes the path behave in an immutable way and sets the vertices and codes as read-only arrays.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.CLOSEPOLY\"><code>CLOSEPOLY = 79</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.CURVE3\"><code>CURVE3 = 3</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.CURVE4\"><code>CURVE4 = 4</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.LINETO\"><code>LINETO = 2</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.MOVETO\"><code>MOVETO = 1</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.NUM_VERTICES_FOR_CODE\"><code>NUM_VERTICES_FOR_CODE = {0: 1, 1: 1, 2: 1, 3: 2, 4: 3, 79: 1}</code></dt> <dd>\n<p>A dictionary mapping Path codes to the number of vertices that the code expects.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.STOP\"><code>STOP = 0</code></dt> \n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.arc\"><code>classmethod arc(theta1, theta2, n=None, is_wedge=False)</code></dt> <dd>\n<p>Return an arc on the unit circle from angle <em>theta1</em> to angle <em>theta2</em> (in degrees).</p> <p>If <em>n</em> is provided, it is the number of spline segments to make. If <em>n</em> is not provided, the number of spline segments is determined based on the delta between <em>theta1</em> and <em>theta2</em>.</p> <blockquote> <div>Masionobe, L. 2003. <a class=\"reference external\" href=\"http://www.spaceroots.org/documents/ellipse/index.html\">Drawing an elliptical arc using polylines, quadratic or cubic Bezier curves</a>.</div>\n</blockquote> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.circle\"><code>classmethod circle(center=(0.0, 0.0), radius=1.0, readonly=False)</code></dt> <dd>\n<p>Return a Path representing a circle of a given radius and center.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>center</strong> : pair of floats</p> <blockquote> <div>\n<p>The center of the circle. Default <code>(0, 0)</code>.</p> </div>\n</blockquote> <p><strong>radius</strong> : float</p> <blockquote> <div>\n<p>The radius of the circle. Default is 1.</p> </div>\n</blockquote> <p><strong>readonly</strong> : bool</p> <blockquote class=\"last\"> <div>\n<p>Whether the created path should have the “readonly” argument set when creating the Path instance.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>The circle is approximated using cubic Bezier curves. This uses 8 splines around the circle using the approach presented here:</p> <blockquote> <div>Lancaster, Don. <a class=\"reference external\" href=\"http://www.tinaja.com/glib/ellipse4.pdf\">Approximating a Circle or an Ellipse Using Four Bezier Cubic Splines</a>.</div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.cleaned\"><code>cleaned(transform=None, remove_nans=False, clip=None, quantize=False, simplify=False, curves=False, stroke_width=1.0, snap=False, sketch=None)</code></dt> <dd>\n<p>Cleans up the path according to the parameters returning a new Path instance.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\">See <a class=\"reference internal\" href=\"#matplotlib.path.Path.iter_segments\" title=\"matplotlib.path.Path.iter_segments\"><code>iter_segments()</code></a> for details of the keyword arguments.</p> </div> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Path instance with cleaned up vertices and codes.</td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.clip_to_bbox\"><code>clip_to_bbox(bbox, inside=True)</code></dt> <dd>\n<p>Clip the path to the given bounding box.</p> <p>The path must be made up of one or more closed polygons. This algorithm will not behave correctly for unclosed paths.</p> <p>If <em>inside</em> is <code>True</code>, clip to the inside of the box, otherwise to the outside of the box.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.code_type\"><code>code_type</code></dt> <dd>\n<p>alias of <code>uint8</code></p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.codes\"><code>codes</code></dt> <dd>\n<p>The list of codes in the <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> as a 1-D numpy array. Each code is one of <a class=\"reference internal\" href=\"#matplotlib.path.Path.STOP\" title=\"matplotlib.path.Path.STOP\"><code>STOP</code></a>, <a class=\"reference internal\" href=\"#matplotlib.path.Path.MOVETO\" title=\"matplotlib.path.Path.MOVETO\"><code>MOVETO</code></a>, <a class=\"reference internal\" href=\"#matplotlib.path.Path.LINETO\" title=\"matplotlib.path.Path.LINETO\"><code>LINETO</code></a>, <a class=\"reference internal\" href=\"#matplotlib.path.Path.CURVE3\" title=\"matplotlib.path.Path.CURVE3\"><code>CURVE3</code></a>, <a class=\"reference internal\" href=\"#matplotlib.path.Path.CURVE4\" title=\"matplotlib.path.Path.CURVE4\"><code>CURVE4</code></a> or <a class=\"reference internal\" href=\"#matplotlib.path.Path.CLOSEPOLY\" title=\"matplotlib.path.Path.CLOSEPOLY\"><code>CLOSEPOLY</code></a>. For codes that correspond to more than one vertex (<a class=\"reference internal\" href=\"#matplotlib.path.Path.CURVE3\" title=\"matplotlib.path.Path.CURVE3\"><code>CURVE3</code></a> and <a class=\"reference internal\" href=\"#matplotlib.path.Path.CURVE4\" title=\"matplotlib.path.Path.CURVE4\"><code>CURVE4</code></a>), that code will be repeated so that the length of <code>self.vertices</code> and <code>self.codes</code> is always the same.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.contains_path\"><code>contains_path(path, transform=None)</code></dt> <dd>\n<p>Returns <em>True</em> if this path completely contains the given path.</p> <p>If <em>transform</em> is not <em>None</em>, the path will be transformed before performing the test.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.contains_point\"><code>contains_point(point, transform=None, radius=0.0)</code></dt> <dd>\n<p>Returns <em>True</em> if the path contains the given point.</p> <p>If <em>transform</em> is not <em>None</em>, the path will be transformed before performing the test.</p> <p><em>radius</em> allows the path to be made slightly larger or smaller.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.contains_points\"><code>contains_points(points, transform=None, radius=0.0)</code></dt> <dd>\n<p>Returns a bool array which is <em>True</em> if the path contains the corresponding point.</p> <p>If <em>transform</em> is not <em>None</em>, the path will be transformed before performing the test.</p> <p><em>radius</em> allows the path to be made slightly larger or smaller.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.copy\"><code>copy()</code></dt> <dd>\n<p>Returns a shallow copy of the <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, which will share the vertices and codes with the source <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.deepcopy\"><code>deepcopy()</code></dt> <dd>\n<p>Returns a deepcopy of the <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>. The <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> will not be readonly, even if the source <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> is.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.get_extents\"><code>get_extents(transform=None)</code></dt> <dd>\n<p>Returns the extents (<em>xmin</em>, <em>ymin</em>, <em>xmax</em>, <em>ymax</em>) of the path.</p> <p>Unlike computing the extents on the <em>vertices</em> alone, this algorithm will take into account the curves and deal with control points appropriately.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.has_nonfinite\"><code>has_nonfinite</code></dt> <dd>\n<p><code>True</code> if the vertices array has nonfinite values.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.hatch\"><code>classmethod hatch(hatchpattern, density=6)</code></dt> <dd>\n<p>Given a hatch specifier, <em>hatchpattern</em>, generates a Path that can be used in a repeated hatching pattern. <em>density</em> is the number of lines per unit square.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.interpolated\"><code>interpolated(steps)</code></dt> <dd>\n<p>Returns a new path resampled to length N x steps. Does not currently handle interpolating curves.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.intersects_bbox\"><code>intersects_bbox(bbox, filled=True)</code></dt> <dd>\n<p>Returns <em>True</em> if this path intersects a given <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p><em>filled</em>, when True, treats the path as if it was filled. That is, if one path completely encloses the other, <a class=\"reference internal\" href=\"#matplotlib.path.Path.intersects_path\" title=\"matplotlib.path.Path.intersects_path\"><code>intersects_path()</code></a> will return True.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.intersects_path\"><code>intersects_path(other, filled=True)</code></dt> <dd>\n<p>Returns <em>True</em> if this path intersects another given path.</p> <p><em>filled</em>, when True, treats the paths as if they were filled. That is, if one path completely encloses the other, <a class=\"reference internal\" href=\"#matplotlib.path.Path.intersects_path\" title=\"matplotlib.path.Path.intersects_path\"><code>intersects_path()</code></a> will return True.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.iter_segments\"><code>iter_segments(transform=None, remove_nans=True, clip=None, snap=False, stroke_width=1.0, simplify=None, curves=True, sketch=None)</code></dt> <dd>\n<p>Iterates over all of the curve segments in the path. Each iteration returns a 2-tuple (<em>vertices</em>, <em>code</em>), where <em>vertices</em> is a sequence of 1 - 3 coordinate pairs, and <em>code</em> is one of the <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> codes.</p> <p>Additionally, this method can provide a number of standard cleanups and conversions to the path.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>transform</strong> : None or <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> <blockquote> <div>\n<p>If not None, the given affine transformation will be applied to the path.</p> </div>\n</blockquote> <p><strong>remove_nans</strong> : {False, True}, optional</p> <blockquote> <div>\n<p>If True, will remove all NaNs from the path and insert MOVETO commands to skip over them.</p> </div>\n</blockquote> <p><strong>clip</strong> : None or sequence, optional</p> <blockquote> <div>\n<p>If not None, must be a four-tuple (x1, y1, x2, y2) defining a rectangle in which to clip the path.</p> </div>\n</blockquote> <p><strong>snap</strong> : None or bool, optional</p> <blockquote> <div>\n<p>If None, auto-snap to pixels, to reduce fuzziness of rectilinear lines. If True, force snapping, and if False, don’t snap.</p> </div>\n</blockquote> <p><strong>stroke_width</strong> : float, optional</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>The width of the stroke being drawn. Needed</dt> <dd>\n<p class=\"first last\">as a hint for the snapping algorithm.</p> </dd> </dl> </div>\n</blockquote> <p><strong>simplify</strong> : None or bool, optional</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>If True, perform simplification, to remove</dt> <dd>\n<p class=\"first last\">vertices that do not affect the appearance of the path. If False, perform no simplification. If None, use the should_simplify member variable.</p> </dd> </dl> </div>\n</blockquote> <p><strong>curves</strong> : {True, False}, optional</p> <blockquote> <div>\n<p>If True, curve segments will be returned as curve segments. If False, all curves will be converted to line segments.</p> </div>\n</blockquote> <p><strong>sketch</strong> : None or sequence, optional</p> <blockquote class=\"last\"> <div>\n<p>If not None, must be a 3-tuple of the form (scale, length, randomness), representing the sketch parameters.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.make_compound_path\"><code>classmethod make_compound_path(*args)</code></dt> <dd>\n<p>Make a compound path from a list of Path objects.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.make_compound_path_from_polys\"><code>classmethod make_compound_path_from_polys(XY)</code></dt> <dd>\n<p>Make a compound path object to draw a number of polygons with equal numbers of sides XY is a (numpolys x numsides x 2) numpy array of vertices. Return object is a <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/histogram_path_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/histogram_path_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/histogram_path_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/histogram_path_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/histogram_path_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/histogram_path_demo.png\"> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.readonly\"><code>readonly</code></dt> <dd>\n<p><code>True</code> if the <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> is read-only.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.should_simplify\"><code>should_simplify</code></dt> <dd>\n<p><code>True</code> if the vertices array should be simplified.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.simplify_threshold\"><code>simplify_threshold</code></dt> <dd>\n<p>The fraction of a pixel difference below which vertices will be simplified out.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.to_polygons\"><code>to_polygons(transform=None, width=0, height=0)</code></dt> <dd>\n<p>Convert this path to a list of polygons. Each polygon is an Nx2 array of vertices. In other words, each polygon has no <code>MOVETO</code> instructions or curves. This is useful for displaying in backends that do not support compound paths or Bezier curves, such as GDK.</p> <p>If <em>width</em> and <em>height</em> are both non-zero then the lines will be simplified so that vertices outside of (0, 0), (width, height) will be clipped.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.path.Path.transformed\"><code>transformed(transform)</code></dt> <dd>\n<p>Return a transformed copy of the path.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.TransformedPath\" title=\"matplotlib.transforms.TransformedPath\"><code>matplotlib.transforms.TransformedPath</code></a></dt> <dd>A specialized path class that will cache the transformed result and automatically update when the transform changes.</dd> </dl> </div> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.unit_circle\"><code>classmethod unit_circle()</code></dt> <dd>\n<p>Return the readonly <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> of the unit circle.</p> <p>For most cases, <a class=\"reference internal\" href=\"#matplotlib.path.Path.circle\" title=\"matplotlib.path.Path.circle\"><code>Path.circle()</code></a> will be what you want.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.unit_circle_righthalf\"><code>classmethod unit_circle_righthalf()</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> of the right half of a unit circle. The circle is approximated using cubic Bezier curves. This uses 4 splines around the circle using the approach presented here:</p> <blockquote> <div>Lancaster, Don. <a class=\"reference external\" href=\"http://www.tinaja.com/glib/ellipse4.pdf\">Approximating a Circle or an Ellipse Using Four Bezier Cubic Splines</a>.</div>\n</blockquote> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.unit_rectangle\"><code>classmethod unit_rectangle()</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance of the unit rectangle from (0, 0) to (1, 1).</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.unit_regular_asterisk\"><code>classmethod unit_regular_asterisk(numVertices)</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> for a unit regular asterisk with the given numVertices and radius of 1.0, centered at (0, 0).</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.unit_regular_polygon\"><code>classmethod unit_regular_polygon(numVertices)</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance for a unit regular polygon with the given <em>numVertices</em> and radius of 1.0, centered at (0, 0).</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.unit_regular_star\"><code>classmethod unit_regular_star(numVertices, innerCircle=0.5)</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> for a unit regular star with the given numVertices and radius of 1.0, centered at (0, 0).</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.path.Path.vertices\"><code>vertices</code></dt> <dd>\n<p>The list of vertices in the <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> as an Nx2 numpy array.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.path.Path.wedge\"><code>classmethod wedge(theta1, theta2, n=None)</code></dt> <dd>\n<p>Return a wedge of the unit circle from angle <em>theta1</em> to angle <em>theta2</em> (in degrees).</p> <p>If <em>n</em> is provided, it is the number of spline segments to make. If <em>n</em> is not provided, the number of spline segments is determined based on the delta between <em>theta1</em> and <em>theta2</em>.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.path.get_path_collection_extents\"><code>matplotlib.path.get_path_collection_extents(master_transform, paths, transforms, offsets, offset_transform)</code></dt> <dd>\n<p>Given a sequence of <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> objects, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> objects and offsets, as found in a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PathCollection\" title=\"matplotlib.collections.PathCollection\"><code>PathCollection</code></a>, returns the bounding box that encapsulates all of them.</p> <p><em>master_transform</em> is a global transformation to apply to all paths</p> <p><em>paths</em> is a sequence of <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instances.</p> <p><em>transforms</em> is a sequence of <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Affine2D\" title=\"matplotlib.transforms.Affine2D\"><code>Affine2D</code></a> instances.</p> <p><em>offsets</em> is a sequence of (x, y) offsets (or an Nx2 array)</p> <p><em>offset_transform</em> is a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Affine2D\" title=\"matplotlib.transforms.Affine2D\"><code>Affine2D</code></a> to apply to the offsets before applying the offset to the path.</p> <p>The way that <em>paths</em>, <em>transforms</em> and <em>offsets</em> are combined follows the same method as for collections. Each is iterated over independently, so if you have 3 paths, 2 transforms and 1 offset, their combinations are as follows:</p> <blockquote> <div>(A, A, A), (B, B, A), (C, A, A)</div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.path.get_paths_extents\"><code>matplotlib.path.get_paths_extents(paths, transforms=[])</code></dt> <dd>\n<p>Given a sequence of <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> objects and optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> objects, returns the bounding box that encapsulates all of them.</p> <p><em>paths</em> is a sequence of <a class=\"reference internal\" href=\"#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instances.</p> <p><em>transforms</em> is an optional sequence of <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Affine2D\" title=\"matplotlib.transforms.Affine2D\"><code>Affine2D</code></a> instances to apply to each path.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/path_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/path_api.html</a>\n  </p>\n</div>\n","sankey_api":"<h1 id=\"sankey\">sankey</h1>  <h2 id=\"matplotlib-sankey\">matplotlib.sankey</h2> <p id=\"module-matplotlib.sankey\">Module for creating Sankey diagrams using matplotlib</p> <dl class=\"class\"> <dt id=\"matplotlib.sankey.Sankey\"><code>class matplotlib.sankey.Sankey(ax=None, scale=1.0, unit='', format='%G', gap=0.25, radius=0.1, shoulder=0.03, offset=0.15, head_angle=100, margin=0.4, tolerance=1e-06, **kwargs)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Sankey diagram in matplotlib</p> <blockquote> <div>Sankey diagrams are a specific type of flow diagram, in which the width of the arrows is shown proportionally to the flow quantity. They are typically used to visualize energy or material or cost transfers between processes. <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Sankey_diagram\">Wikipedia (6/1/2011)</a>\n</div>\n</blockquote> <p>Create a new Sankey instance.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Field</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>ax</em></td> <td>axes onto which the data should be plotted If <em>ax</em> isn’t provided, new axes will be created.</td> </tr> <tr class=\"row-odd\">\n<td><em>scale</em></td> <td>scaling factor for the flows <em>scale</em> sizes the width of the paths in order to maintain proper layout. The same scale is applied to all subdiagrams. The value should be chosen such that the product of the scale and the sum of the inputs is approximately 1.0 (and the product of the scale and the sum of the outputs is approximately -1.0).</td> </tr> <tr class=\"row-even\">\n<td><em>unit</em></td> <td>string representing the physical unit associated with the flow quantities If <em>unit</em> is None, then none of the quantities are labeled.</td> </tr> <tr class=\"row-odd\">\n<td><em>format</em></td> <td>a Python number formatting string to be used in labeling the flow as a quantity (i.e., a number times a unit, where the unit is given)</td> </tr> <tr class=\"row-even\">\n<td><em>gap</em></td> <td>space between paths that break in/break away to/from the top or bottom</td> </tr> <tr class=\"row-odd\">\n<td><em>radius</em></td> <td>inner radius of the vertical paths</td> </tr> <tr class=\"row-even\">\n<td><em>shoulder</em></td> <td>size of the shoulders of output arrowS</td> </tr> <tr class=\"row-odd\">\n<td><em>offset</em></td> <td>text offset (from the dip or tip of the arrow)</td> </tr> <tr class=\"row-even\">\n<td><em>head_angle</em></td> <td>angle of the arrow heads (and negative of the angle of the tails) [deg]</td> </tr> <tr class=\"row-odd\">\n<td><em>margin</em></td> <td>minimum space between Sankey outlines and the edge of the plot area</td> </tr> <tr class=\"row-even\">\n<td><em>tolerance</em></td> <td>acceptable maximum of the magnitude of the sum of flows The magnitude of the sum of connected flows cannot be greater than <em>tolerance</em>.</td> </tr> </tbody> </table> </div>\n</blockquote> <p>The optional arguments listed above are applied to all subdiagrams so that there is consistent alignment and formatting.</p> <p>If <a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey\" title=\"matplotlib.sankey.Sankey\"><code>Sankey</code></a> is instantiated with any keyword arguments other than those explicitly listed above (<code>**kwargs</code>), they will be passed to <a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey.add\" title=\"matplotlib.sankey.Sankey.add\"><code>add()</code></a>, which will create the first subdiagram.</p> <p>In order to draw a complex Sankey diagram, create an instance of <a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey\" title=\"matplotlib.sankey.Sankey\"><code>Sankey</code></a> by calling it without any kwargs:</p> <pre data-language=\"python\">sankey = Sankey()\n</pre> <p>Then add simple Sankey sub-diagrams:</p> <pre data-language=\"python\">sankey.add() # 1\nsankey.add() # 2\n#...\nsankey.add() # n\n</pre> <p>Finally, create the full diagram:</p> <pre data-language=\"python\">sankey.finish()\n</pre> <p>Or, instead, simply daisy-chain those calls:</p> <pre data-language=\"python\">Sankey().add().add...  .add().finish()\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey.add\" title=\"matplotlib.sankey.Sankey.add\"><code>add()</code></a> <a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey.finish\" title=\"matplotlib.sankey.Sankey.finish\"><code>finish()</code></a></p> </div> <p><strong>Examples:</strong></p> <blockquote> <div>\n<p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics.py\">Source code</a>)</p> <div class=\"figure\" id=\"id1\"> <img alt=\"../_images/sankey_demo_basics_00.png\" src=\"http://matplotlib.org/1.5.1/_images/sankey_demo_basics_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id2\"> <img alt=\"../_images/sankey_demo_basics_01.png\" src=\"http://matplotlib.org/1.5.1/_images/sankey_demo_basics_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id3\"> <img alt=\"../_images/sankey_demo_basics_02.png\" src=\"http://matplotlib.org/1.5.1/_images/sankey_demo_basics_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/sankey_demo_basics_02.pdf\">pdf</a>)</span></p> </div> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.sankey.Sankey.add\"><code>add(patchlabel='', flows=None, orientations=None, labels='', trunklength=1.0, pathlengths=0.25, prior=None, connect=(0, 0), rotation=0, **kwargs)</code></dt> <dd>\n<p>Add a simple Sankey diagram with flows at the same hierarchical level.</p> <p>Return value is the instance of <a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey\" title=\"matplotlib.sankey.Sankey\"><code>Sankey</code></a>.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Keyword</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>patchlabel</em></td> <td>label to be placed at the center of the diagram Note: <em>label</em> (not <em>patchlabel</em>) will be passed to the patch through <code>**kwargs</code> and can be used to create an entry in the legend.</td> </tr> <tr class=\"row-odd\">\n<td><em>flows</em></td> <td>array of flow values By convention, inputs are positive and outputs are negative.</td> </tr> <tr class=\"row-even\">\n<td><em>orientations</em></td> <td>list of orientations of the paths Valid values are 1 (from/to the top), 0 (from/to the left or right), or -1 (from/to the bottom). If <em>orientations</em> == 0, inputs will break in from the left and outputs will break away to the right.</td> </tr> <tr class=\"row-odd\">\n<td><em>labels</em></td> <td>list of specifications of the labels for the flows Each value may be <em>None</em> (no labels), ‘’ (just label the quantities), or a labeling string. If a single value is provided, it will be applied to all flows. If an entry is a non-empty string, then the quantity for the corresponding flow will be shown below the string. However, if the <em>unit</em> of the main diagram is None, then quantities are never shown, regardless of the value of this argument.</td> </tr> <tr class=\"row-even\">\n<td><em>trunklength</em></td> <td>length between the bases of the input and output groups</td> </tr> <tr class=\"row-odd\">\n<td><em>pathlengths</em></td> <td>list of lengths of the arrows before break-in or after break-away If a single value is given, then it will be applied to the first (inside) paths on the top and bottom, and the length of all other arrows will be justified accordingly. The <em>pathlengths</em> are not applied to the horizontal inputs and outputs.</td> </tr> <tr class=\"row-even\">\n<td><em>prior</em></td> <td>index of the prior diagram to which this diagram should be connected</td> </tr> <tr class=\"row-odd\">\n<td><em>connect</em></td> <td>a (prior, this) tuple indexing the flow of the prior diagram and the flow of this diagram which should be connected If this is the first diagram or <em>prior</em> is <em>None</em>, <em>connect</em> will be ignored.</td> </tr> <tr class=\"row-even\">\n<td><em>rotation</em></td> <td>angle of rotation of the diagram [deg] <em>rotation</em> is ignored if this diagram is connected to an existing one (using <em>prior</em> and <em>connect</em>). The interpretation of the <em>orientations</em> argument will be rotated accordingly (e.g., if <em>rotation</em> == 90, an <em>orientations</em> entry of 1 means to/from the left).</td> </tr> </tbody> </table> </div>\n</blockquote> <p>Valid kwargs are <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.PathPatch\" title=\"matplotlib.patches.PathPatch\"><code>matplotlib.patches.PathPatch()</code></a> arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>As examples, <code>fill=False</code> and <code>label='A legend entry'</code>. By default, <code>facecolor='#bfd1d4'</code> (light blue) and <code>linewidth=0.5</code>.</p> <p>The indexing parameters (<em>prior</em> and <em>connect</em>) are zero-based.</p> <p>The flows are placed along the top of the diagram from the inside out in order of their index within the <em>flows</em> list or array. They are placed along the sides of the diagram from the top down and along the bottom from the outside in.</p> <p>If the sum of the inputs and outputs is nonzero, the discrepancy will appear as a cubic Bezier curve along the top and bottom edges of the trunk.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey.finish\" title=\"matplotlib.sankey.Sankey.finish\"><code>finish()</code></a></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.sankey.Sankey.finish\"><code>finish()</code></dt> <dd>\n<p>Adjust the axes and return a list of information about the Sankey subdiagram(s).</p> <p>Return value is a list of subdiagrams represented with the following fields:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Field</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>patch</em></td> <td>Sankey outline (an instance of <code>PathPatch</code>)</td> </tr> <tr class=\"row-odd\">\n<td><em>flows</em></td> <td>values of the flows (positive for input, negative for output)</td> </tr> <tr class=\"row-even\">\n<td><em>angles</em></td> <td>list of angles of the arrows [deg/90] For example, if the diagram has not been rotated, an input to the top side will have an angle of 3 (DOWN), and an output from the top side will have an angle of 1 (UP). If a flow has been skipped (because its magnitude is less than <em>tolerance</em>), then its angle will be <em>None</em>.</td> </tr> <tr class=\"row-odd\">\n<td><em>tips</em></td> <td>array in which each row is an [x, y] pair indicating the positions of the tips (or “dips”) of the flow paths If the magnitude of a flow is less the <em>tolerance</em> for the instance of <a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey\" title=\"matplotlib.sankey.Sankey\"><code>Sankey</code></a>, the flow is skipped and its tip will be at the center of the diagram.</td> </tr> <tr class=\"row-even\">\n<td><em>text</em></td> <td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instance for the label of the diagram</td> </tr> <tr class=\"row-odd\">\n<td><em>texts</em></td> <td>list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances for the labels of flows</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"#matplotlib.sankey.Sankey.add\" title=\"matplotlib.sankey.Sankey.add\"><code>add()</code></a></p> </div> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/sankey_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/sankey_api.html</a>\n  </p>\n</div>\n","spines_api":"<h1 id=\"spines\">spines</h1>  <h2 id=\"matplotlib-spines\">matplotlib.spines</h2> <dl class=\"class\" id=\"module-matplotlib.spines\"> <dt id=\"matplotlib.spines.Spine\"><code>class matplotlib.spines.Spine(axes, spine_type, path, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>an axis spine – the line noting the data area boundaries</p> <p>Spines are the lines connecting the axis tick marks and noting the boundaries of the data area. They can be placed at arbitrary positions. See function:<a class=\"reference internal\" href=\"#matplotlib.spines.Spine.set_position\" title=\"matplotlib.spines.Spine.set_position\"><code>set_position</code></a> for more information.</p> <p>The default position is <code>('outward',0)</code>.</p> <p>Spines are subclasses of class:<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>, and inherit much of their behavior.</p> <p>Spines draw a line or a circle, depending if function:<a class=\"reference internal\" href=\"#matplotlib.spines.Spine.set_patch_line\" title=\"matplotlib.spines.Spine.set_patch_line\"><code>set_patch_line</code></a> or function:<a class=\"reference internal\" href=\"#matplotlib.spines.Spine.set_patch_circle\" title=\"matplotlib.spines.Spine.set_patch_circle\"><code>set_patch_circle</code></a> has been called. Line-like is the default.</p> <ul class=\"simple\"> <li>\n<em>axes</em> : the Axes instance containing the spine</li> <li>\n<em>spine_type</em> : a string specifying the spine type</li> <li>\n<em>path</em> : the path instance used to draw the spine</li> </ul> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"classmethod\"> <dt id=\"matplotlib.spines.Spine.circular_spine\"><code>classmethod circular_spine(axes, center, radius, **kwargs)</code></dt> <dd>\n<p>(staticmethod) Returns a circular <a class=\"reference internal\" href=\"#matplotlib.spines.Spine\" title=\"matplotlib.spines.Spine\"><code>Spine</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.cla\"><code>cla()</code></dt> <dd>\n<p>Clear the current spine</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.get_bounds\"><code>get_bounds()</code></dt> <dd>\n<p>Get the bounds of the spine.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.get_patch_transform\"><code>get_patch_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.get_path\"><code>get_path()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.get_position\"><code>get_position()</code></dt> <dd>\n<p>get the spine position</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.get_smart_bounds\"><code>get_smart_bounds()</code></dt> <dd>\n<p>get whether the spine has smart bounds</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.get_spine_transform\"><code>get_spine_transform()</code></dt> <dd>\n<p>get the spine transform</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.is_frame_like\"><code>is_frame_like()</code></dt> <dd>\n<p>return True if directly on axes frame</p> <p>This is useful for determining if a spine is the edge of an old style MPL plot. If so, this function will return True.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.spines.Spine.linear_spine\"><code>classmethod linear_spine(axes, spine_type, **kwargs)</code></dt> <dd>\n<p>(staticmethod) Returns a linear <a class=\"reference internal\" href=\"#matplotlib.spines.Spine\" title=\"matplotlib.spines.Spine\"><code>Spine</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.register_axis\"><code>register_axis(axis)</code></dt> <dd>\n<p>register an axis</p> <p>An axis should be registered with its corresponding spine from the Axes instance. This allows the spine to clear any axis properties when needed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.set_bounds\"><code>set_bounds(low, high)</code></dt> <dd>\n<p>Set the bounds of the spine.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set the edgecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<code>set_facecolor()</code>, <code>set_edgecolor()</code>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.set_patch_circle\"><code>set_patch_circle(center, radius)</code></dt> <dd>\n<p>set the spine to be circular</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.set_patch_line\"><code>set_patch_line()</code></dt> <dd>\n<p>set the spine to be linear</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.set_position\"><code>set_position(position)</code></dt> <dd>\n<p>set the position of the spine</p> <p>Spine position is specified by a 2 tuple of (position type, amount). The position types are:</p> <ul class=\"simple\"> <li>‘outward’ : place the spine out from the data area by the specified number of points. (Negative values specify placing the spine inward.)</li> <li>‘axes’ : place the spine at the specified Axes coordinate (from 0.0-1.0).</li> <li>‘data’ : place the spine at the specified data coordinate.</li> </ul> <p>Additionally, shorthand notations define a special positions:</p> <ul class=\"simple\"> <li>‘center’ -&gt; (‘axes’,0.5)</li> <li>‘zero’ -&gt; (‘data’, 0.0)</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.spines.Spine.set_smart_bounds\"><code>set_smart_bounds(value)</code></dt> <dd>\n<p>set the spine and associated axis to have smart bounds</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/spines_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/spines_api.html</a>\n  </p>\n</div>\n","style_api":"<h1 id=\"style\">style</h1>  <h2 id=\"matplotlib-style\">matplotlib.style</h2> <dl class=\"function\" id=\"module-matplotlib.style\"> <dt id=\"matplotlib.style.context\"><code>matplotlib.style.context(style, after_reset=False)</code></dt> <dd>\n<p>Context manager for using style settings temporarily.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>style</strong> : str, dict, or list</p> <blockquote> <div>\n<p>A style specification. Valid options are:</p> <table class=\"docutils\"> <colgroup> <col width=\"9%\"> <col width=\"91%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>str</td> <td>The name of a style or a path/URL to a style file. For a list of available style names, see <code>style.available</code>.</td> </tr> <tr class=\"row-even\">\n<td>dict</td> <td>Dictionary with valid key/value pairs for <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a>.</td> </tr> <tr class=\"row-odd\">\n<td>list</td> <td>A list of style specifiers (str or dict) applied from first to last in the list.</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>after_reset</strong> : bool</p> <blockquote class=\"last\"> <div>\n<p>If True, apply style after resetting settings to their defaults; otherwise, apply style on top of the current settings.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.style.reload_library\"><code>matplotlib.style.reload_library()</code></dt> <dd>\n<p>Reload style library.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.style.use\"><code>matplotlib.style.use(style)</code></dt> <dd>\n<p>Use matplotlib style settings from a style specification.</p> <p>The style name of ‘default’ is reserved for reverting back to the default style settings.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>style</strong> : str, dict, or list</p> <blockquote class=\"last\"> <div>\n<p>A style specification. Valid options are:</p> <table class=\"docutils\"> <colgroup> <col width=\"9%\"> <col width=\"91%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>str</td> <td>The name of a style or a path/URL to a style file. For a list of available style names, see <code>style.available</code>.</td> </tr> <tr class=\"row-even\">\n<td>dict</td> <td>Dictionary with valid key/value pairs for <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a>.</td> </tr> <tr class=\"row-odd\">\n<td>list</td> <td>A list of style specifiers (str or dict) applied from first to last in the list.</td> </tr> </tbody> </table> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"data\"> <dt id=\"matplotlib.style.matplotlib.style.library\"><code>matplotlib.style.library</code></dt> <dd>\n<p>Dictionary of available styles</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"matplotlib.style.matplotlib.style.available\"><code>matplotlib.style.available</code></dt> <dd>\n<p>List of available styles</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/style_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/style_api.html</a>\n  </p>\n</div>\n","offsetbox_api":"<h1 id=\"offsetbox\">offsetbox</h1>  <h2 id=\"matplotlib-offsetbox\">matplotlib.offsetbox</h2> <p id=\"module-matplotlib.offsetbox\">The OffsetBox is a simple container artist. The child artist are meant to be drawn at a relative position to its parent. The [VH]Packer, DrawingArea and TextArea are derived from the OffsetBox.</p> <p>The [VH]Packer automatically adjust the relative postisions of their children, which should be instances of the OffsetBox. This is used to align similar artists together, e.g., in legend.</p> <p>The DrawingArea can contain any Artist as a child. The DrawingArea has a fixed width and height. The position of children relative to the parent is fixed. The TextArea is contains a single Text instance. The width and height of the TextArea instance is the width and height of the its child text.</p> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox\"><code>class matplotlib.offsetbox.AnchoredOffsetbox(loc, pad=0.4, borderpad=0.5, child=None, prop=None, frameon=True, bbox_to_anchor=None, bbox_transform=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.OffsetBox\" title=\"matplotlib.offsetbox.OffsetBox\"><code>matplotlib.offsetbox.OffsetBox</code></a></p> <p>An offset box placed according to the legend location loc. AnchoredOffsetbox has a single child. When multiple children is needed, use other OffsetBox class to enclose them. By default, the offset box is anchored against its parent axes. You may explicitly specify the bbox_to_anchor.</p> <p>loc is a string or an integer specifying the legend location. The valid location codes are:</p> <pre data-language=\"python\">'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4,\n'right'        : 5,\n'center left'  : 6,\n'center right' : 7,\n'lower center' : 8,\n'upper center' : 9,\n'center'       : 10,\n</pre> <dl class=\"docutils\"> <dt>pad <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">pad around the child for drawing a frame. given in</span>\n</dt> <dd>fraction of fontsize.</dd> </dl> <p>borderpad : pad between offsetbox frame and the bbox_to_anchor,</p> <p>child : OffsetBox instance that will be anchored.</p> <p>prop : font property. This is only used as a reference for paddings.</p> <p>frameon : draw a frame box if True.</p> <p>bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.</p> <p>bbox_transform : with which the bbox_to_anchor will be transformed.</p> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>draw the artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.get_bbox_to_anchor\"><code>get_bbox_to_anchor()</code></dt> <dd>\n<p>return the bbox that the legend will be anchored</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.get_child\"><code>get_child()</code></dt> <dd>\n<p>return the child</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.get_children\"><code>get_children()</code></dt> <dd>\n<p>return the list of children</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.get_extent\"><code>get_extent(renderer)</code></dt> <dd>\n<p>return the extent of the artist. The extent of the child added with the pad is returned</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.get_window_extent\"><code>get_window_extent(renderer)</code></dt> <dd>\n<p>get the bounding box in display space.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.set_bbox_to_anchor\"><code>set_bbox_to_anchor(bbox, transform=None)</code></dt> <dd>\n<p>set the bbox that the child will be anchored.</p> <p><em>bbox</em> can be a Bbox instance, a list of [left, bottom, width, height], or a list of [left, bottom] where the width and height will be assumed to be zero. The bbox will be transformed to display coordinate by the given transform.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.set_child\"><code>set_child(child)</code></dt> <dd>\n<p>set the child to be anchored</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.update_frame\"><code>update_frame(bbox, fontsize=None)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.offsetbox.AnchoredOffsetbox.zorder\"><code>zorder = 5</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.AnchoredText\"><code>class matplotlib.offsetbox.AnchoredText(s, loc, pad=0.4, borderpad=0.5, prop=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.AnchoredOffsetbox\" title=\"matplotlib.offsetbox.AnchoredOffsetbox\"><code>matplotlib.offsetbox.AnchoredOffsetbox</code></a></p> <p>AnchoredOffsetbox with Text.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>s</strong> : string</p> <blockquote> <div>\n<p>Text.</p> </div>\n</blockquote> <p><strong>loc</strong> : str</p> <blockquote> <div>\n<p>Location code.</p> </div>\n</blockquote> <p><strong>pad</strong> : float, optional</p> <blockquote> <div>\n<p>Pad between the text and the frame as fraction of the font size.</p> </div>\n</blockquote> <p><strong>borderpad</strong> : float, optional</p> <blockquote> <div>\n<p>Pad between the frame and the axes (or <em>bbox_to_anchor</em>).</p> </div>\n</blockquote> <p><strong>prop</strong> : <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a></p> <blockquote class=\"last\"> <div>\n<p>Font properties.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>Other keyword parameters of <a class=\"reference internal\" href=\"#matplotlib.offsetbox.AnchoredOffsetbox\" title=\"matplotlib.offsetbox.AnchoredOffsetbox\"><code>AnchoredOffsetbox</code></a> are also allowed.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox\"><code>class matplotlib.offsetbox.AnnotationBbox(offsetbox, xy, xybox=None, xycoords='data', boxcoords=None, frameon=True, pad=0.4, annotation_clip=None, box_alignment=(0.5, 0.5), bboxprops=None, arrowprops=None, fontsize=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a>, <code>matplotlib.text._AnnotationBase</code></p> <p>Annotation-like class, but with offsetbox instead of Text.</p> <p><em>offsetbox</em> : OffsetBox instance</p> <dl class=\"docutils\"> <dt>\n<em>xycoords</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">same as Annotation but can be a tuple of two</span>\n</dt> <dd>strings which are interpreted as x and y coordinates.</dd> <dt>\n<em>boxcoords</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">similar to textcoords as Annotation but can be a</span>\n</dt> <dd>tuple of two strings which are interpreted as x and y coordinates.</dd> <dt>\n<em>box_alignment</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a tuple of two floats for a vertical and</span>\n</dt> <dd>horizontal alignment of the offset box w.r.t. the <em>boxcoords</em>. The lower-left corner is (0.0) and upper-right corner is (1.1).</dd> </dl> <p>other parameters are identical to that of Annotation.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.anncoords\"><code>anncoords</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.contains\"><code>contains(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Draw the <code>Annotation</code> object to the given <em>renderer</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.get_children\"><code>get_children()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.get_fontsize\"><code>get_fontsize(s=None)</code></dt> <dd>\n<p>return fontsize in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.set_figure\"><code>set_figure(fig)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.set_fontsize\"><code>set_fontsize(s=None)</code></dt> <dd>\n<p>set fontsize in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.update_positions\"><code>update_positions(renderer)</code></dt> <dd>\n<p>Update the pixel positions of the annotated point and the text.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.xyann\"><code>xyann</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.offsetbox.AnnotationBbox.zorder\"><code>zorder = 3</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox\"><code>class matplotlib.offsetbox.AuxTransformBox(aux_transform)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.OffsetBox\" title=\"matplotlib.offsetbox.OffsetBox\"><code>matplotlib.offsetbox.OffsetBox</code></a></p> <p>Offset Box with the aux_transform . Its children will be transformed with the aux_transform first then will be offseted. The absolute coordinate of the aux_transform is meaning as it will be automatically adjust so that the left-lower corner of the bounding box of children will be set to (0,0) before the offset transform.</p> <p>It is similar to drawing area, except that the extent of the box is not predetermined but calculated from the window extent of its children. Furthermore, the extent of the children will be calculated in the transformed coordinate.</p> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox.add_artist\"><code>add_artist(a)</code></dt> <dd>\n<p>Add any <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> to the container box</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Draw the children</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox.get_extent\"><code>get_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox.get_offset\"><code>get_offset()</code></dt> <dd>\n<p>return offset of the container.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> applied to the children</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox.get_window_extent\"><code>get_window_extent(renderer)</code></dt> <dd>\n<p>get the bounding box in display space.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox.set_offset\"><code>set_offset(xy)</code></dt> <dd>\n<p>set offset of the container.</p> <p>Accept : tuple of x,y coordinate in disokay units.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.AuxTransformBox.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>set_transform is ignored.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.DraggableAnnotation\"><code>class matplotlib.offsetbox.DraggableAnnotation(annotation, use_blit=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.DraggableBase\" title=\"matplotlib.offsetbox.DraggableBase\"><code>matplotlib.offsetbox.DraggableBase</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableAnnotation.finalize_offset\"><code>finalize_offset()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableAnnotation.save_offset\"><code>save_offset()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableAnnotation.update_offset\"><code>update_offset(dx, dy)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.DraggableBase\"><code>class matplotlib.offsetbox.DraggableBase(ref_artist, use_blit=False)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>helper code for a draggable artist (legend, offsetbox) The derived class must override following two method.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>def saveoffset(self):</dt> <dd>pass</dd> <dt>def update_offset(self, dx, dy):</dt> <dd>pass</dd> </dl> </div>\n</blockquote> <p><em>saveoffset</em> is called when the object is picked for dragging and it is meant to save reference position of the artist.</p> <dl class=\"docutils\"> <dt>\n<em>update_offset</em> is called during the dragging. dx and dy is the pixel</dt> <dd>offset from the point where the mouse drag started.</dd> </dl> <p>Optionally you may override following two methods.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>def artist_picker(self, artist, evt):</dt> <dd>return self.ref_artist.contains(evt)</dd> <dt>def finalize_offset(self):</dt> <dd>pass</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>artist_picker</em> is a picker method that will be</dt> <dd>used. <em>finalize_offset</em> is called when the mouse is released. In current implementaion of DraggableLegend and DraggableAnnotation, <em>update_offset</em> places the artists simply in display coordinates. And <em>finalize_offset</em> recalculate their position in the normalized axes coordinate and set a relavant attribute.</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.artist_picker\"><code>artist_picker(artist, evt)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.disconnect\"><code>disconnect()</code></dt> <dd>\n<p>disconnect the callbacks</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.finalize_offset\"><code>finalize_offset()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.on_motion\"><code>on_motion(evt)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.on_motion_blit\"><code>on_motion_blit(evt)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.on_pick\"><code>on_pick(evt)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.on_release\"><code>on_release(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.save_offset\"><code>save_offset()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableBase.update_offset\"><code>update_offset(dx, dy)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.DraggableOffsetBox\"><code>class matplotlib.offsetbox.DraggableOffsetBox(ref_artist, offsetbox, use_blit=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.DraggableBase\" title=\"matplotlib.offsetbox.DraggableBase\"><code>matplotlib.offsetbox.DraggableBase</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableOffsetBox.get_loc_in_canvas\"><code>get_loc_in_canvas()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableOffsetBox.save_offset\"><code>save_offset()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DraggableOffsetBox.update_offset\"><code>update_offset(dx, dy)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.DrawingArea\"><code>class matplotlib.offsetbox.DrawingArea(width, height, xdescent=0.0, ydescent=0.0, clip=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.OffsetBox\" title=\"matplotlib.offsetbox.OffsetBox\"><code>matplotlib.offsetbox.OffsetBox</code></a></p> <p>The DrawingArea can contain any Artist as a child. The DrawingArea has a fixed width and height. The position of children relative to the parent is fixed. The children can be clipped at the boundaries of the parent.</p> <p><em>width</em>, <em>height</em> : width and height of the container box. <em>xdescent</em>, <em>ydescent</em> : descent of the box in x- and y-direction. <em>clip</em> : Whether to clip the children</p> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DrawingArea.add_artist\"><code>add_artist(a)</code></dt> <dd>\n<p>Add any <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> to the container box</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.offsetbox.DrawingArea.clip_children\"><code>clip_children</code></dt> <dd>\n<p>If the children of this DrawingArea should be clipped by DrawingArea bounding box.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DrawingArea.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Draw the children</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DrawingArea.get_extent\"><code>get_extent(renderer)</code></dt> <dd>\n<p>Return with, height, xdescent, ydescent of box</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DrawingArea.get_offset\"><code>get_offset()</code></dt> <dd>\n<p>return offset of the container.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DrawingArea.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> applied to the children</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DrawingArea.get_window_extent\"><code>get_window_extent(renderer)</code></dt> <dd>\n<p>get the bounding box in display space.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DrawingArea.set_offset\"><code>set_offset(xy)</code></dt> <dd>\n<p>set offset of the container.</p> <p>Accept : tuple of x,y cooridnate in disokay units.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.DrawingArea.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>set_transform is ignored.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.HPacker\"><code>class matplotlib.offsetbox.HPacker(pad=None, sep=None, width=None, height=None, align='baseline', mode='fixed', children=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.PackerBase\" title=\"matplotlib.offsetbox.PackerBase\"><code>matplotlib.offsetbox.PackerBase</code></a></p> <p>The HPacker has its children packed horizontally. It automatically adjusts the relative positions of children at draw time.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>pad</strong> : float, optional</p> <blockquote> <div>\n<p>Boundary pad.</p> </div>\n</blockquote> <p><strong>sep</strong> : float, optional</p> <blockquote> <div>\n<p>Spacing between items.</p> </div>\n</blockquote> <p><strong>width</strong> : float, optional</p> <p><strong>height</strong> : float, optional</p> <blockquote> <div>\n<p>Width and height of the container box, calculated if <code>None</code>.</p> </div>\n</blockquote> <p><strong>align</strong> : str</p> <blockquote> <div>\n<p>Alignment of boxes.</p> </div>\n</blockquote> <p><strong>mode</strong> : str</p> <blockquote class=\"last\"> <div>\n<p>Packing mode.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p><em>pad</em> and <em>sep</em> need to given in points and will be scale with the renderer dpi, while <em>width</em> and <em>height</em> need to be in pixels.</p> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.HPacker.get_extent_offsets\"><code>get_extent_offsets(renderer)</code></dt> <dd>\n<p>update offset of children and return the extents of the box</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.OffsetBox\"><code>class matplotlib.offsetbox.OffsetBox(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a></p> <p>The OffsetBox is a simple container artist. The child artist are meant to be drawn at a relative position to its parent.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.offsetbox.OffsetBox.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.contains\"><code>contains(mouseevent)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Update the location of children if necessary and draw them to the given <em>renderer</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of artists it contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.get_extent\"><code>get_extent(renderer)</code></dt> <dd>\n<p>Return with, height, xdescent, ydescent of box</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.get_extent_offsets\"><code>get_extent_offsets(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.get_offset\"><code>get_offset(width, height, xdescent, ydescent, renderer)</code></dt> <dd>\n<p>Get the offset</p> <p>accepts extent of the box</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.get_visible_children\"><code>get_visible_children()</code></dt> <dd>\n<p>Return a list of visible artists it contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.get_window_extent\"><code>get_window_extent(renderer)</code></dt> <dd>\n<p>get the bounding box in display space.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the figure</p> <p>accepts a class:<a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.set_height\"><code>set_height(height)</code></dt> <dd>\n<p>Set the height</p> <p>accepts float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.set_offset\"><code>set_offset(xy)</code></dt> <dd>\n<p>Set the offset</p> <p>accepts x, y, tuple, or a callable object.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetBox.set_width\"><code>set_width(width)</code></dt> <dd>\n<p>Set the width</p> <p>accepts float</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.OffsetImage\"><code>class matplotlib.offsetbox.OffsetImage(arr, zoom=1, cmap=None, norm=None, interpolation=None, origin=None, filternorm=1, filterrad=4.0, resample=False, dpi_cor=True, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.OffsetBox\" title=\"matplotlib.offsetbox.OffsetBox\"><code>matplotlib.offsetbox.OffsetBox</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Draw the children</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.get_children\"><code>get_children()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.get_data\"><code>get_data()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.get_extent\"><code>get_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.get_offset\"><code>get_offset()</code></dt> <dd>\n<p>return offset of the container.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.get_window_extent\"><code>get_window_extent(renderer)</code></dt> <dd>\n<p>get the bounding box in display space.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.get_zoom\"><code>get_zoom()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.set_data\"><code>set_data(arr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.OffsetImage.set_zoom\"><code>set_zoom(zoom)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.PackerBase\"><code>class matplotlib.offsetbox.PackerBase(pad=None, sep=None, width=None, height=None, align=None, mode=None, children=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.OffsetBox\" title=\"matplotlib.offsetbox.OffsetBox\"><code>matplotlib.offsetbox.OffsetBox</code></a></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>pad</strong> : float, optional</p> <blockquote> <div>\n<p>Boundary pad.</p> </div>\n</blockquote> <p><strong>sep</strong> : float, optional</p> <blockquote> <div>\n<p>Spacing between items.</p> </div>\n</blockquote> <p><strong>width</strong> : float, optional</p> <p><strong>height</strong> : float, optional</p> <blockquote> <div>\n<p>Width and height of the container box, calculated if <code>None</code>.</p> </div>\n</blockquote> <p><strong>align</strong> : str, optional</p> <blockquote> <div>\n<p>Alignment of boxes. Can be one of <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, <code>center</code> and <code>baseline</code></p> </div>\n</blockquote> <p><strong>mode</strong> : str, optional</p> <blockquote class=\"last\"> <div>\n<p>Packing mode.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p><em>pad</em> and <em>sep</em> need to given in points and will be scale with the renderer dpi, while <em>width</em> and <em>height</em> need to be in pixels.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.PaddedBox\"><code>class matplotlib.offsetbox.PaddedBox(child, pad=None, draw_frame=False, patch_attrs=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.OffsetBox\" title=\"matplotlib.offsetbox.OffsetBox\"><code>matplotlib.offsetbox.OffsetBox</code></a></p> <p><em>pad</em> : boundary pad</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><em>pad</em> need to given in points and will be scale with the renderer dpi, while <em>width</em> and <em>height</em> need to be in pixels.</p> </div> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.PaddedBox.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Update the location of children if necessary and draw them to the given <em>renderer</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.PaddedBox.draw_frame\"><code>draw_frame(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.PaddedBox.get_extent_offsets\"><code>get_extent_offsets(renderer)</code></dt> <dd>\n<p>update offset of childrens and return the extents of the box</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.PaddedBox.update_frame\"><code>update_frame(bbox, fontsize=None)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.TextArea\"><code>class matplotlib.offsetbox.TextArea(s, textprops=None, multilinebaseline=None, minimumdescent=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.OffsetBox\" title=\"matplotlib.offsetbox.OffsetBox\"><code>matplotlib.offsetbox.OffsetBox</code></a></p> <p>The TextArea is contains a single Text instance. The text is placed at (0,0) with baseline+left alignment. The width and height of the TextArea instance is the width and height of the its child text.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>s</strong> : str</p> <blockquote> <div>\n<p>a string to be displayed.</p> </div>\n</blockquote> <p><strong>textprops</strong> : <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>FontProperties</code></a>, optional</p> <p><strong>multilinebaseline</strong> : bool, optional</p> <blockquote> <div>\n<p>If <code>True</code>, baseline for multiline text is adjusted so that it is (approximatedly) center-aligned with singleline text.</p> </div>\n</blockquote> <p><strong>minimumdescent</strong> : bool, optional</p> <blockquote class=\"last\"> <div>\n<p>If <code>True</code>, the box has a minimum descent of “p”.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Draw the children</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.get_extent\"><code>get_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.get_minimumdescent\"><code>get_minimumdescent()</code></dt> <dd>\n<p>get minimumdescent.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.get_multilinebaseline\"><code>get_multilinebaseline()</code></dt> <dd>\n<p>get multilinebaseline .</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.get_offset\"><code>get_offset()</code></dt> <dd>\n<p>return offset of the container.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.get_text\"><code>get_text()</code></dt> <dd>\n<p>get text</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.get_window_extent\"><code>get_window_extent(renderer)</code></dt> <dd>\n<p>get the bounding box in display space.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.set_minimumdescent\"><code>set_minimumdescent(t)</code></dt> <dd>\n<p>Set minimumdescent .</p> <p>If True, extent of the single line text is adjusted so that it has minimum descent of “p”</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.set_multilinebaseline\"><code>set_multilinebaseline(t)</code></dt> <dd>\n<p>Set multilinebaseline .</p> <p>If True, baseline for multiline text is adjusted so that it is (approximatedly) center-aligned with singleline text.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.set_offset\"><code>set_offset(xy)</code></dt> <dd>\n<p>set offset of the container.</p> <p>Accept : tuple of x,y coordinates in display units.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.set_text\"><code>set_text(s)</code></dt> <dd>\n<p>set text</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.TextArea.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>set_transform is ignored.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.offsetbox.VPacker\"><code>class matplotlib.offsetbox.VPacker(pad=None, sep=None, width=None, height=None, align='baseline', mode='fixed', children=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.offsetbox.PackerBase\" title=\"matplotlib.offsetbox.PackerBase\"><code>matplotlib.offsetbox.PackerBase</code></a></p> <p>The VPacker has its children packed vertically. It automatically adjust the relative positions of children in the drawing time.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>pad</strong> : float, optional</p> <blockquote> <div>\n<p>Boundary pad.</p> </div>\n</blockquote> <p><strong>sep</strong> : float, optional</p> <blockquote> <div>\n<p>Spacing between items.</p> </div>\n</blockquote> <p><strong>width</strong> : float, optional</p> <p><strong>height</strong> : float, optional</p> <blockquote> <div>\n<p>width and height of the container box, calculated if <code>None</code>.</p> </div>\n</blockquote> <p><strong>align</strong> : str, optional</p> <blockquote> <div>\n<p>Alignment of boxes.</p> </div>\n</blockquote> <p><strong>mode</strong> : str, optional</p> <blockquote class=\"last\"> <div>\n<p>Packing mode.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p><em>pad</em> and <em>sep</em> need to given in points and will be scale with the renderer dpi, while <em>width</em> and <em>height</em> need to be in pixels.</p> <dl class=\"method\"> <dt id=\"matplotlib.offsetbox.VPacker.get_extent_offsets\"><code>get_extent_offsets(renderer)</code></dt> <dd>\n<p>update offset of childrens and return the extents of the box</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.offsetbox.bbox_artist\"><code>matplotlib.offsetbox.bbox_artist(*args, **kwargs)</code></dt> \n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/offsetbox_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/offsetbox_api.html</a>\n  </p>\n</div>\n","tight_layout_api":"<h1 id=\"tight-layout\">tight_layout</h1>  <h2 id=\"matplotlib-tight-layout\">matplotlib.tight_layout</h2> <p id=\"module-matplotlib.tight_layout\">This module provides routines to adjust subplot params so that subplots are nicely fit in the figure. In doing so, only axis labels, tick labels, axes titles and offsetboxes that are anchored to axes are currently considered.</p> <p>Internally, it assumes that the margins (left_margin, etc.) which are differences between ax.get_tightbbox and ax.bbox are independent of axes position. This may fail if Axes.adjustable is datalim. Also, This will fail for some cases (for example, left or right margin is affected by xlabel).</p> <dl class=\"function\"> <dt id=\"matplotlib.tight_layout.auto_adjust_subplotpars\"><code>matplotlib.tight_layout.auto_adjust_subplotpars(fig, renderer, nrows_ncols, num1num2_list, subplot_list, ax_bbox_list=None, pad=1.08, h_pad=None, w_pad=None, rect=None)</code></dt> <dd>\n<p>Return a dictionary of subplot parameters so that spacing between subplots are adjusted. Note that this function ignore geometry information of subplot itself, but uses what is given by <em>nrows_ncols</em> and <em>num1num2_list</em> parameteres. Also, the results could be incorrect if some subplots have <code>adjustable=datalim</code>.</p> <p>Parameters:</p> <dl class=\"docutils\"> <dt>nrows_ncols</dt> <dd>number of rows and number of columns of the grid.</dd> <dt>num1num2_list</dt> <dd>list of numbers specifying the area occupied by the subplot</dd> <dt>subplot_list</dt> <dd>list of subplots that will be used to calcuate optimal subplot_params.</dd> <dt>pad <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding between the figure edge and the edges of subplots, as a fraction of the font-size.</dd> <dt>h_pad, w_pad <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>\n<dl class=\"first last docutils\"> <dt>padding (height/width) between edges of adjacent subplots.</dt> <dd>Defaults to <code>pad_inches</code>.</dd> </dl> </dd> <dt>rect</dt> <dd>[left, bottom, right, top] in normalized (0, 1) figure coordinates.</dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.tight_layout.get_renderer\"><code>matplotlib.tight_layout.get_renderer(fig)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.tight_layout.get_subplotspec_list\"><code>matplotlib.tight_layout.get_subplotspec_list(axes_list, grid_spec=None)</code></dt> <dd>\n<p>Return a list of subplotspec from the given list of axes. For an instance of axes that does not support subplotspec, None is inserted in the list.</p> <p>If grid_spec is given, None is inserted for those not from the given grid_spec.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.tight_layout.get_tight_layout_figure\"><code>matplotlib.tight_layout.get_tight_layout_figure(fig, axes_list, subplotspec_list, renderer, pad=1.08, h_pad=None, w_pad=None, rect=None)</code></dt> <dd>\n<p>Return subplot parameters for tight-layouted-figure with specified padding.</p> <p>Parameters:</p> <blockquote> <div>\n<p><em>fig</em> : figure instance</p> <p><em>axes_list</em> : a list of axes</p> <dl class=\"docutils\"> <dt>\n<em>subplotspec_list</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a list of subplotspec associated with each</span>\n</dt> <dd>axes in axes_list</dd> </dl> <p><em>renderer</em> : renderer instance</p> <dl class=\"docutils\"> <dt>\n<em>pad</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding between the figure edge and the edges of subplots, as a fraction of the font-size.</dd> <dt>\n<em>h_pad</em>, <em>w_pad</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding (height/width) between edges of adjacent subplots. Defaults to <code>pad_inches</code>.</dd> <dt>\n<em>rect</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">if rect is given, it is interpreted as a rectangle</span>\n</dt> <dd>(left, bottom, right, top) in the normalized figure coordinate that the whole subplots area (including labels) will fit into. Default is (0, 0, 1, 1).</dd> </dl> </div>\n</blockquote> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/tight_layout_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/tight_layout_api.html</a>\n  </p>\n</div>\n","type1font":"<h1 id=\"type1font\">type1font</h1>  <h2 id=\"matplotlib-type1font\">matplotlib.type1font</h2> <p id=\"module-matplotlib.type1font\">This module contains a class representing a Type 1 font.</p> <p>This version reads pfa and pfb files and splits them for embedding in pdf files. It also supports SlantFont and ExtendFont transformations, similarly to pdfTeX and friends. There is no support yet for subsetting.</p> <p>Usage:</p> <pre data-language=\"python\">&gt;&gt;&gt; font = Type1Font(filename)\n&gt;&gt;&gt; clear_part, encrypted_part, finale = font.parts\n&gt;&gt;&gt; slanted_font = font.transform({'slant': 0.167})\n&gt;&gt;&gt; extended_font = font.transform({'extend': 1.2})\n</pre> <p>Sources:</p> <ul class=\"simple\"> <li>Adobe Technical Note #5040, Supporting Downloadable PostScript Language Fonts.</li> <li>Adobe Type 1 Font Format, Adobe Systems Incorporated, third printing, v1.1, 1993. ISBN 0-201-57044-0.</li> </ul> <dl class=\"class\"> <dt id=\"matplotlib.type1font.Type1Font\"><code>class matplotlib.type1font.Type1Font(input)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A class representing a Type-1 font, for use by backends.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.type1font.Type1Font.parts\"><code>parts</code></dt> <dd>\n<p>A 3-tuple of the cleartext part, the encrypted part, and the finale of zeros.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.type1font.Type1Font.prop\"><code>prop</code></dt> <dd>\n<p>A dictionary of font properties.</p> </dd>\n</dl> <p>Initialize a Type-1 font. <em>input</em> can be either the file name of a pfb file or a 3-tuple of already-decoded Type-1 font parts.</p> <dl class=\"attribute\"> <dt> <code>parts</code>\n</dt> \n</dl> <dl class=\"attribute\"> <dt> <code>prop</code>\n</dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.type1font.Type1Font.transform\"><code>transform(effects)</code></dt> <dd>\n<p>Transform the font by slanting or extending. <em>effects</em> should be a dict where <code>effects['slant']</code> is the tangent of the angle that the font is to be slanted to the right (so negative values slant to the left) and <code>effects['extend']</code> is the multiplier by which the font is to be extended (so values less than 1.0 condense). Returns a new <a class=\"reference internal\" href=\"#matplotlib.type1font.Type1Font\" title=\"matplotlib.type1font.Type1Font\"><code>Type1Font</code></a> object.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.type1font.ord\"><code>matplotlib.type1font.ord(x)</code></dt> \n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/type1font.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/type1font.html</a>\n  </p>\n</div>\n","figure_api":"<h1 id=\"figure\">figure</h1>  <h2 id=\"matplotlib-figure\">matplotlib.figure</h2> <p id=\"module-matplotlib.figure\">The figure module provides the top-level <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a>, the <a class=\"reference internal\" href=\"#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>, which contains all the plot elements. The following classes are defined</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.figure.SubplotParams\" title=\"matplotlib.figure.SubplotParams\"><code>SubplotParams</code></a></dt> <dd>control the default spacing of the subplots</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a></dt> <dd>top level container for all plot elements</dd> </dl> <dl class=\"class\"> <dt id=\"matplotlib.figure.AxesStack\"><code>class matplotlib.figure.AxesStack</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"cbook_api#matplotlib.cbook.Stack\" title=\"matplotlib.cbook.Stack\"><code>matplotlib.cbook.Stack</code></a></p> <p>Specialization of the Stack to handle all tracking of Axes in a Figure. This stack stores <code>key, (ind, axes)</code> pairs, where:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<strong>key</strong> should be a hash of the args and kwargs used in generating the Axes.</li> <li>\n<strong>ind</strong> is a serial number for tracking the order in which axes were added.</li> </ul> </div>\n</blockquote> <p>The AxesStack is a callable, where <code>ax_stack()</code> returns the current axes. Alternatively the <a class=\"reference internal\" href=\"#matplotlib.figure.AxesStack.current_key_axes\" title=\"matplotlib.figure.AxesStack.current_key_axes\"><code>current_key_axes()</code></a> will return the current key and associated axes.</p> <dl class=\"method\"> <dt id=\"matplotlib.figure.AxesStack.add\"><code>add(key, a)</code></dt> <dd>\n<p>Add Axes <em>a</em>, with key <em>key</em>, to the stack, and return the stack.</p> <p>If <em>a</em> is already on the stack, don’t add it again, but return <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.AxesStack.as_list\"><code>as_list()</code></dt> <dd>\n<p>Return a list of the Axes instances that have been added to the figure</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.AxesStack.bubble\"><code>bubble(a)</code></dt> <dd>\n<p>Move the given axes, which must already exist in the stack, to the top.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.AxesStack.current_key_axes\"><code>current_key_axes()</code></dt> <dd>\n<p>Return a tuple of <code>(key, axes)</code> for the active axes.</p> <p>If no axes exists on the stack, then returns <code>(None, None)</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.AxesStack.get\"><code>get(key)</code></dt> <dd>\n<p>Return the Axes instance that was added with <em>key</em>. If it is not present, return None.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.AxesStack.remove\"><code>remove(a)</code></dt> <dd>\n<p>Remove the axes from the stack.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.figure.Figure\"><code>class matplotlib.figure.Figure(figsize=None, dpi=None, facecolor=None, edgecolor=None, linewidth=0.0, frameon=None, subplotpars=None, tight_layout=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a></p> <p>The Figure instance supports callbacks through a <em>callbacks</em> attribute which is a <a class=\"reference internal\" href=\"cbook_api#matplotlib.cbook.CallbackRegistry\" title=\"matplotlib.cbook.CallbackRegistry\"><code>matplotlib.cbook.CallbackRegistry</code></a> instance. The events you can connect to are ‘dpi_changed’, and the callback will be called with <code>func(fig)</code> where fig is the <a class=\"reference internal\" href=\"#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance.</p> <dl class=\"docutils\"> <dt><em>patch</em></dt> <dd>The figure patch is drawn by a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>matplotlib.patches.Rectangle</code></a> instance</dd> <dt><em>suppressComposite</em></dt> <dd>For multiple figure images, the figure will make composite images depending on the renderer option_image_nocomposite function. If suppressComposite is True|False, this will override the renderer.</dd> <dt><em>figsize</em></dt> <dd>w,h tuple in inches</dd> <dt><em>dpi</em></dt> <dd>Dots per inch</dd> <dt><em>facecolor</em></dt> <dd>The figure patch facecolor; defaults to rc <code>figure.facecolor</code>\n</dd> <dt><em>edgecolor</em></dt> <dd>The figure patch edge color; defaults to rc <code>figure.edgecolor</code>\n</dd> <dt><em>linewidth</em></dt> <dd>The figure patch edge linewidth; the default linewidth of the frame</dd> <dt><em>frameon</em></dt> <dd>If <em>False</em>, suppress drawing the figure frame</dd> <dt><em>subplotpars</em></dt> <dd>A <a class=\"reference internal\" href=\"#matplotlib.figure.SubplotParams\" title=\"matplotlib.figure.SubplotParams\"><code>SubplotParams</code></a> instance, defaults to rc</dd> <dt><em>tight_layout</em></dt> <dd>If <em>False</em> use <em>subplotpars</em>; if <em>True</em> adjust subplot parameters using <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.tight_layout\" title=\"matplotlib.figure.Figure.tight_layout\"><code>tight_layout()</code></a> with default padding. When providing a dict containing the keys <code>pad</code>, <code>w_pad</code>, <code>h_pad</code> and <code>rect</code>, the default <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.tight_layout\" title=\"matplotlib.figure.Figure.tight_layout\"><code>tight_layout()</code></a> paddings will be overridden. Defaults to rc <code>figure.autolayout</code>.</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.add_axes\"><code>add_axes(*args, **kwargs)</code></dt> <dd>\n<p>Add an axes at position <em>rect</em> [<em>left</em>, <em>bottom</em>, <em>width</em>, <em>height</em>] where all quantities are in fractions of figure width and height. kwargs are legal <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> kwargs plus <em>projection</em> which sets the projection type of the axes. (For backward compatibility, <code>polar=True</code> may also be provided, which is equivalent to <code>projection='polar'</code>). Valid values for <em>projection</em> are: [‘aitoff’, ‘hammer’, ‘lambert’, ‘mollweide’, ‘polar’, ‘rectilinear’]. Some of these projections support additional kwargs, which may be provided to <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.add_axes\" title=\"matplotlib.figure.Figure.add_axes\"><code>add_axes()</code></a>. Typical usage:</p> <pre data-language=\"python\">rect = l,b,w,h\nfig.add_axes(rect)\nfig.add_axes(rect, frameon=False, axisbg='g')\nfig.add_axes(rect, polar=True)\nfig.add_axes(rect, projection='polar')\nfig.add_axes(ax)\n</pre> <p>If the figure already has an axes with the same parameters, then it will simply make that axes current and return it. If you do not want this behavior, e.g., you want to force the creation of a new Axes, you must use a unique set of args and kwargs. The axes <code>label</code> attribute has been exposed for this purpose. e.g., if you want two axes that are otherwise identical to be added to the figure, make sure you give them unique labels:</p> <pre data-language=\"python\">fig.add_axes(rect, label='axes1')\nfig.add_axes(rect, label='axes2')\n</pre> <p>In rare circumstances, add_axes may be called with a single argument, an Axes instance already created in the present figure but not in the figure’s list of axes. For example, if an axes has been removed with <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.delaxes\" title=\"matplotlib.figure.Figure.delaxes\"><code>delaxes()</code></a>, it can be restored with:</p> <pre data-language=\"python\">fig.add_axes(ax)\n</pre> <p>In all cases, the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance will be returned.</p> <p>In addition to <em>projection</em>, the following kwargs are supported:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"41%\"> <col width=\"59%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code>adjustable</code></td> <td>[ ‘box’ | ‘datalim’ | ‘box-forced’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-odd\">\n<td><code>anchor</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><code>aspect</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>autoscale_on</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>autoscalex_on</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>autoscaley_on</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><code>axes_locator</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>axis_bgcolor</code></td> <td>any matplotlib color - see <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colors\" title=\"matplotlib.pyplot.colors\"><code>colors()</code></a>\n</td> </tr> <tr class=\"row-even\">\n<td><code>axisbelow</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><code>color_cycle</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><code>figure</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>frame_on</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td><code>navigate</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-odd\">\n<td><code>navigate_mode</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><code>position</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>rasterization_zorder</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>title</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><code>xbound</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>xlabel</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>xlim</code></td> <td>length 2 sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><code>xmargin</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>xscale</code></td> <td>[‘linear’ | ‘log’ | ‘logit’ | ‘symlog’]</td> </tr> <tr class=\"row-even\">\n<td><code>xticklabels</code></td> <td>sequence of strings</td> </tr> <tr class=\"row-odd\">\n<td><code>xticks</code></td> <td>sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><code>ybound</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>ylabel</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>ylim</code></td> <td>length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><code>ymargin</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>yscale</code></td> <td>[‘linear’ | ‘log’ | ‘logit’ | ‘symlog’]</td> </tr> <tr class=\"row-odd\">\n<td><code>yticklabels</code></td> <td>sequence of strings</td> </tr> <tr class=\"row-even\">\n<td><code>yticks</code></td> <td>sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.add_axobserver\"><code>add_axobserver(func)</code></dt> <dd>\n<p>whenever the axes state change, <code>func(self)</code> will be called</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.add_subplot\"><code>add_subplot(*args, **kwargs)</code></dt> <dd>\n<p>Add a subplot. Examples:</p> <pre data-language=\"python\">fig.add_subplot(111)\n\n# equivalent but more general\nfig.add_subplot(1,1,1)\n\n# add subplot with red background\nfig.add_subplot(212, axisbg='r')\n\n# add a polar subplot\nfig.add_subplot(111, projection='polar')\n\n# add Subplot instance sub\nfig.add_subplot(sub)\n</pre> <p><em>kwargs</em> are legal <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> kwargs plus <em>projection</em>, which chooses a projection type for the axes. (For backward compatibility, <em>polar=True</em> may also be provided, which is equivalent to <em>projection=’polar’</em>). Valid values for <em>projection</em> are: [‘aitoff’, ‘hammer’, ‘lambert’, ‘mollweide’, ‘polar’, ‘rectilinear’]. Some of these projections support additional <em>kwargs</em>, which may be provided to <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.add_axes\" title=\"matplotlib.figure.Figure.add_axes\"><code>add_axes()</code></a>.</p> <p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance will be returned.</p> <p>If the figure already has a subplot with key (<em>args</em>, <em>kwargs</em>) then it will simply make that subplot current and return it.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.subplot\" title=\"matplotlib.pyplot.subplot\"><code>subplot()</code></a> for an explanation of the args.</p> </div> <p>The following kwargs are supported:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"41%\"> <col width=\"59%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code>adjustable</code></td> <td>[ ‘box’ | ‘datalim’ | ‘box-forced’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-odd\">\n<td><code>anchor</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><code>aspect</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>autoscale_on</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>autoscalex_on</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>autoscaley_on</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><code>axes_locator</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>axis_bgcolor</code></td> <td>any matplotlib color - see <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colors\" title=\"matplotlib.pyplot.colors\"><code>colors()</code></a>\n</td> </tr> <tr class=\"row-even\">\n<td><code>axisbelow</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><code>color_cycle</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><code>figure</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>frame_on</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td><code>navigate</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-odd\">\n<td><code>navigate_mode</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><code>position</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>rasterization_zorder</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>title</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><code>xbound</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>xlabel</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>xlim</code></td> <td>length 2 sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><code>xmargin</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>xscale</code></td> <td>[‘linear’ | ‘log’ | ‘logit’ | ‘symlog’]</td> </tr> <tr class=\"row-even\">\n<td><code>xticklabels</code></td> <td>sequence of strings</td> </tr> <tr class=\"row-odd\">\n<td><code>xticks</code></td> <td>sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><code>ybound</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>ylabel</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>ylim</code></td> <td>length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><code>ymargin</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>yscale</code></td> <td>[‘linear’ | ‘log’ | ‘logit’ | ‘symlog’]</td> </tr> <tr class=\"row-odd\">\n<td><code>yticklabels</code></td> <td>sequence of strings</td> </tr> <tr class=\"row-even\">\n<td><code>yticks</code></td> <td>sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.autofmt_xdate\"><code>autofmt_xdate(bottom=0.2, rotation=30, ha='right')</code></dt> <dd>\n<p>Date ticklabels often overlap, so it is useful to rotate them and right align them. Also, a common use case is a number of subplots with shared xaxes where the x-axis is date data. The ticklabels are often long, and it helps to rotate them on the bottom subplot and turn them off on other subplots, as well as turn off xlabels.</p> <dl class=\"docutils\"> <dt><em>bottom</em></dt> <dd>The bottom of the subplots for <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.subplots_adjust\" title=\"matplotlib.figure.Figure.subplots_adjust\"><code>subplots_adjust()</code></a>\n</dd> <dt><em>rotation</em></dt> <dd>The rotation of the xtick labels</dd> <dt><em>ha</em></dt> <dd>The horizontal alignment of the xticklabels</dd> </dl> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.figure.Figure.axes\"><code>axes</code></dt> <dd>\n<p>Read-only: list of axes in Figure</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.clear\"><code>clear()</code></dt> <dd>\n<p>Clear the figure – synonym for <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.clf\" title=\"matplotlib.figure.Figure.clf\"><code>clf()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.clf\"><code>clf(keep_observers=False)</code></dt> <dd>\n<p>Clear the figure.</p> <p>Set <em>keep_observers</em> to True if, for example, a gui widget is tracking the axes in the figure.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.colorbar\"><code>colorbar(mappable, cax=None, ax=None, use_gridspec=True, **kw)</code></dt> <dd>\n<p>Create a colorbar for a ScalarMappable instance, <em>mappable</em>.</p> <p>Documentation for the pylab thin wrapper:</p> <p>Add a colorbar to a plot.</p> <p>Function signatures for the <a class=\"reference internal\" href=\"pyplot_api#module-matplotlib.pyplot\" title=\"matplotlib.pyplot\"><code>pyplot</code></a> interface; all but the first are also method signatures for the <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a> method:</p> <pre data-language=\"python\">colorbar(**kwargs)\ncolorbar(mappable, **kwargs)\ncolorbar(mappable, cax=cax, **kwargs)\ncolorbar(mappable, ax=ax, **kwargs)\n</pre> <p>arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>mappable</em></dt> <dd>the <code>Image</code>, <code>ContourSet</code>, etc. to which the colorbar applies; this argument is mandatory for the <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a> method but optional for the <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colorbar\" title=\"matplotlib.pyplot.colorbar\"><code>colorbar()</code></a> function, which sets the default to the current image.</dd> </dl> </div>\n</blockquote> <p>keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>cax</em></dt> <dd>None | axes object into which the colorbar will be drawn</dd> <dt><em>ax</em></dt> <dd>None | parent axes object(s) from which space for a new colorbar axes will be stolen. If a list of axes is given they will all be resized to make room for the colorbar axes.</dd> <dt><em>use_gridspec</em></dt> <dd>False | If <em>cax</em> is None, a new <em>cax</em> is created as an instance of Axes. If <em>ax</em> is an instance of Subplot and <em>use_gridspec</em> is True, <em>cax</em> is created as an instance of Subplot using the grid_spec module.</dd> </dl> </div>\n</blockquote> <p>Additional keyword arguments are of two kinds:</p> <blockquote> <div>\n<p>axes properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>orientation</em></td> <td>vertical or horizontal</td> </tr> <tr class=\"row-odd\">\n<td><em>fraction</em></td> <td>0.15; fraction of original axes to use for colorbar</td> </tr> <tr class=\"row-even\">\n<td><em>pad</em></td> <td>0.05 if vertical, 0.15 if horizontal; fraction of original axes between colorbar and new image axes</td> </tr> <tr class=\"row-odd\">\n<td><em>shrink</em></td> <td>1.0; fraction by which to shrink the colorbar</td> </tr> <tr class=\"row-even\">\n<td><em>aspect</em></td> <td>20; ratio of long to short dimensions</td> </tr> <tr class=\"row-odd\">\n<td><em>anchor</em></td> <td>(0.0, 0.5) if vertical; (0.5, 1.0) if horizontal; the anchor point of the colorbar axes</td> </tr> <tr class=\"row-even\">\n<td><em>panchor</em></td> <td>(1.0, 0.5) if vertical; (0.5, 0.0) if horizontal; the anchor point of the colorbar parent axes. If False, the parent axes’ anchor will be unchanged</td> </tr> </tbody> </table> </div>\n</blockquote> <p>colorbar properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"18%\"> <col width=\"82%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>extend</em></td> <td>[ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ] If not ‘neither’, make pointed end(s) for out-of- range values. These are set for a given colormap using the colormap set_under and set_over methods.</td> </tr> <tr class=\"row-odd\">\n<td><em>extendfrac</em></td> <td>[ <em>None</em> | ‘auto’ | length | lengths ] If set to <em>None</em>, both the minimum and maximum triangular colorbar extensions with have a length of 5% of the interior colorbar length (this is the default setting). If set to ‘auto’, makes the triangular colorbar extensions the same lengths as the interior boxes (when <em>spacing</em> is set to ‘uniform’) or the same lengths as the respective adjacent interior boxes (when <em>spacing</em> is set to ‘proportional’). If a scalar, indicates the length of both the minimum and maximum triangular colorbar extensions as a fraction of the interior colorbar length. A two-element sequence of fractions may also be given, indicating the lengths of the minimum and maximum colorbar extensions respectively as a fraction of the interior colorbar length.</td> </tr> <tr class=\"row-even\">\n<td><em>extendrect</em></td> <td>[ <em>False</em> | <em>True</em> ] If <em>False</em> the minimum and maximum colorbar extensions will be triangular (the default). If <em>True</em> the extensions will be rectangular.</td> </tr> <tr class=\"row-odd\">\n<td><em>spacing</em></td> <td>[ ‘uniform’ | ‘proportional’ ] Uniform spacing gives each discrete color the same space; proportional makes the space proportional to the data interval.</td> </tr> <tr class=\"row-even\">\n<td><em>ticks</em></td> <td>[ None | list of ticks | Locator object ] If None, ticks are determined automatically from the input.</td> </tr> <tr class=\"row-odd\">\n<td><em>format</em></td> <td>[ None | format string | Formatter object ] If None, the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.ScalarFormatter\" title=\"matplotlib.ticker.ScalarFormatter\"><code>ScalarFormatter</code></a> is used. If a format string is given, e.g., ‘%.3f’, that is used. An alternative <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>Formatter</code></a> object may be given instead.</td> </tr> <tr class=\"row-even\">\n<td><em>drawedges</em></td> <td>[ False | True ] If true, draw lines at color boundaries.</td> </tr> </tbody> </table> <p>The following will probably be useful only in the context of indexed colors (that is, when the mappable has norm=NoNorm()), or other unusual circumstances.</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>boundaries</em></td> <td>None or a sequence</td> </tr> <tr class=\"row-odd\">\n<td><em>values</em></td> <td>None or a sequence which must be of length 1 less than the sequence of <em>boundaries</em>. For each region delimited by adjacent entries in <em>boundaries</em>, the color mapped to the corresponding value in values will be used.</td> </tr> </tbody> </table> </div>\n</blockquote> </div>\n</blockquote> <p>If <em>mappable</em> is a <code>ContourSet</code>, its <em>extend</em> kwarg is included automatically.</p> <p>Note that the <em>shrink</em> kwarg provides a simple way to keep a vertical colorbar, for example, from being taller than the axes of the mappable to which the colorbar is attached; but it is a manual method requiring some trial and error. If the colorbar is too tall (or a horizontal colorbar is too wide) use a smaller value of <em>shrink</em>.</p> <p>For more precise control, you can manually specify the positions of the axes objects in which the mappable and the colorbar are drawn. In this case, do not use any of the axes properties kwargs.</p> <p>It is known that some vector graphics viewer (svg and pdf) renders white gaps between segments of the colorbar. This is due to bugs in the viewers not matplotlib. As a workaround the colorbar can be rendered with overlapping segments:</p> <pre data-language=\"python\">cbar = colorbar()\ncbar.solids.set_edgecolor(\"face\")\ndraw()\n</pre> <p>However this has negative consequences in other circumstances. Particularly with semi transparent images (alpha &lt; 1) and colorbar extensions and is not enabled by default see (issue #1188).</p> <dl class=\"docutils\"> <dt>returns:</dt> <dd>\n<a class=\"reference internal\" href=\"colorbar_api#matplotlib.colorbar.Colorbar\" title=\"matplotlib.colorbar.Colorbar\"><code>Colorbar</code></a> instance; see also its base class, <a class=\"reference internal\" href=\"colorbar_api#matplotlib.colorbar.ColorbarBase\" title=\"matplotlib.colorbar.ColorbarBase\"><code>ColorbarBase</code></a>. Call the <a class=\"reference internal\" href=\"colorbar_api#matplotlib.colorbar.ColorbarBase.set_label\" title=\"matplotlib.colorbar.ColorbarBase.set_label\"><code>set_label()</code></a> method to label the colorbar.</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred on the figure.</p> <p>Returns True,{}</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.delaxes\"><code>delaxes(a)</code></dt> <dd>\n<p>remove a from the figure and update the current axes</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.figure.Figure.dpi\"><code>dpi</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>Render the figure using <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.RendererBase\" title=\"matplotlib.backend_bases.RendererBase\"><code>matplotlib.backend_bases.RendererBase</code></a> instance <em>renderer</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.draw_artist\"><code>draw_artist(a)</code></dt> <dd>\n<p>draw <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a> instance <em>a</em> only – this is available only after the figure is drawn</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.figimage\"><code>figimage(X, xo=0, yo=0, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, origin=None, resize=False, **kwargs)</code></dt> <dd>\n<p>Adds a non-resampled image to the figure.</p> <p>call signatures:</p> <pre data-language=\"python\">figimage(X, **kwargs)\n</pre> <p>adds a non-resampled array <em>X</em> to the figure.</p> <pre data-language=\"python\">figimage(X, xo, yo)\n</pre> <p>with pixel offsets <em>xo</em>, <em>yo</em>,</p> <p><em>X</em> must be a float array:</p> <ul class=\"simple\"> <li>If <em>X</em> is MxN, assume luminance (grayscale)</li> <li>If <em>X</em> is MxNx3, assume RGB</li> <li>If <em>X</em> is MxNx4, assume RGBA</li> </ul> <p>Optional keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"86%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Keyword</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>resize</td> <td>a boolean, True or False. If “True”, then re-size the Figure to match the given image size.</td> </tr> <tr class=\"row-odd\">\n<td>xo or yo</td> <td>An integer, the <em>x</em> and <em>y</em> image offset in pixels</td> </tr> <tr class=\"row-even\">\n<td>cmap</td> <td>a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance, e.g., cm.jet. If <em>None</em>, default to the rc <code>image.cmap</code> value</td> </tr> <tr class=\"row-odd\">\n<td>norm</td> <td>a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance. The default is normalization(). This scales luminance -&gt; 0-1</td> </tr> <tr class=\"row-even\">\n<td>vmin|vmax</td> <td>are used to scale a luminance image to 0-1. If either is <em>None</em>, the min and max of the luminance values will be used. Note if you pass a norm instance, the settings for <em>vmin</em> and <em>vmax</em> will be ignored.</td> </tr> <tr class=\"row-odd\">\n<td>alpha</td> <td>the alpha blending value, default is <em>None</em>\n</td> </tr> <tr class=\"row-even\">\n<td>origin</td> <td>[ ‘upper’ | ‘lower’ ] Indicates where the [0,0] index of the array is in the upper left or lower left corner of the axes. Defaults to the rc image.origin value</td> </tr> </tbody> </table> </div>\n</blockquote> <p>figimage complements the axes image (<a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.imshow\" title=\"matplotlib.axes.Axes.imshow\"><code>imshow()</code></a>) which will be resampled to fit the current axes. If you want a resampled image to fill the entire figure, you can define an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> with size [0,1,0,1].</p> <p>An <a class=\"reference internal\" href=\"image_api#matplotlib.image.FigureImage\" title=\"matplotlib.image.FigureImage\"><code>matplotlib.image.FigureImage</code></a> instance is returned.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figimage_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figimage_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figimage_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figimage_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/figimage_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/figimage_demo.png\"> </div> <p>Additional kwargs are Artist kwargs passed on to <a class=\"reference internal\" href=\"image_api#matplotlib.image.FigureImage\" title=\"matplotlib.image.FigureImage\"><code>FigureImage</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.gca\"><code>gca(**kwargs)</code></dt> <dd>\n<p>Get the current axes, creating one if necessary</p> <p>The following kwargs are supported for ensuring the returned axes adheres to the given projection etc., and for axes creation if the active axes does not exist:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"41%\"> <col width=\"59%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code>adjustable</code></td> <td>[ ‘box’ | ‘datalim’ | ‘box-forced’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-odd\">\n<td><code>anchor</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><code>aspect</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>autoscale_on</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>autoscalex_on</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>autoscaley_on</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><code>axes_locator</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>axis_bgcolor</code></td> <td>any matplotlib color - see <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colors\" title=\"matplotlib.pyplot.colors\"><code>colors()</code></a>\n</td> </tr> <tr class=\"row-even\">\n<td><code>axisbelow</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><code>color_cycle</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><code>figure</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>frame_on</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td><code>navigate</code></td> <td>[ <em>True</em> | <em>False</em> ]</td> </tr> <tr class=\"row-odd\">\n<td><code>navigate_mode</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><code>position</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>rasterization_zorder</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>title</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><code>xbound</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>xlabel</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>xlim</code></td> <td>length 2 sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><code>xmargin</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>xscale</code></td> <td>[‘linear’ | ‘log’ | ‘logit’ | ‘symlog’]</td> </tr> <tr class=\"row-even\">\n<td><code>xticklabels</code></td> <td>sequence of strings</td> </tr> <tr class=\"row-odd\">\n<td><code>xticks</code></td> <td>sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><code>ybound</code></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><code>ylabel</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>ylim</code></td> <td>length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><code>ymargin</code></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><code>yscale</code></td> <td>[‘linear’ | ‘log’ | ‘logit’ | ‘symlog’]</td> </tr> <tr class=\"row-odd\">\n<td><code>yticklabels</code></td> <td>sequence of strings</td> </tr> <tr class=\"row-even\">\n<td><code>yticks</code></td> <td>sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_axes\"><code>get_axes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_children\"><code>get_children()</code></dt> <dd>\n<p>get a list of artists contained in the figure</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_default_bbox_extra_artists\"><code>get_default_bbox_extra_artists()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_dpi\"><code>get_dpi()</code></dt> <dd>\n<p>Return the dpi as a float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_edgecolor\"><code>get_edgecolor()</code></dt> <dd>\n<p>Get the edge color of the Figure rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_facecolor\"><code>get_facecolor()</code></dt> <dd>\n<p>Get the face color of the Figure rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_figheight\"><code>get_figheight()</code></dt> <dd>\n<p>Return the figheight as a float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_figwidth\"><code>get_figwidth()</code></dt> <dd>\n<p>Return the figwidth as a float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_frameon\"><code>get_frameon()</code></dt> <dd>\n<p>get the boolean indicating frameon</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_size_inches\"><code>get_size_inches()</code></dt> <dd>\n<p>Returns the current size of the figure in inches (1in == 2.54cm) as an numpy array.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>size</strong> : ndarray</p> <blockquote class=\"last\"> <div>\n<p>The size of the figure in inches</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><code>matplotlib.Figure.set_size_inches</code></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_tight_layout\"><code>get_tight_layout()</code></dt> <dd>\n<p>Return the Boolean flag, True to use :meth`tight_layout` when drawing.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_tightbbox\"><code>get_tightbbox(renderer)</code></dt> <dd>\n<p>Return a (tight) bounding box of the figure in inches.</p> <p>It only accounts axes title, axis labels, and axis ticklabels. Needs improvement.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.get_window_extent\"><code>get_window_extent(*args, **kwargs)</code></dt> <dd>\n<p>get the figure bounding box in display space; kwargs are void</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.ginput\"><code>ginput(n=1, timeout=30, show_clicks=True, mouse_add=1, mouse_pop=3, mouse_stop=2)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">ginput(self, n=1, timeout=30, show_clicks=True,\n       mouse_add=1, mouse_pop=3, mouse_stop=2)\n</pre> <p>Blocking call to interact with the figure.</p> <p>This will wait for <em>n</em> clicks from the user and return a list of the coordinates of each click.</p> <p>If <em>timeout</em> is zero or negative, does not timeout.</p> <p>If <em>n</em> is zero or negative, accumulate clicks until a middle click (or potentially both mouse buttons at once) terminates the input.</p> <p>Right clicking cancels last input.</p> <p>The buttons used for the various actions (adding points, removing points, terminating the inputs) can be overriden via the arguments <em>mouse_add</em>, <em>mouse_pop</em> and <em>mouse_stop</em>, that give the associated mouse button: 1 for left, 2 for middle, 3 for right.</p> <p>The keyboard can also be used to select points in case your mouse does not have one or more of the buttons. The delete and backspace keys act like right clicking (i.e., remove last point), the enter key terminates input and any other key (not already used by the window manager) selects a point.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.hold\"><code>hold(b=None)</code></dt> <dd>\n<p>Set the hold state. If hold is None (default), toggle the hold state. Else set the hold state to boolean value b.</p> <p>e.g.:</p> <pre data-language=\"python\">hold()      # toggle hold\nhold(True)  # hold is on\nhold(False) # hold is off\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.legend\"><code>legend(handles, labels, *args, **kwargs)</code></dt> <dd>\n<p>Place a legend in the figure. Labels are a sequence of strings, handles is a sequence of <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> or <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> instances, and loc can be a string or an integer specifying the legend location</p> <p>USAGE:</p> <pre data-language=\"python\">legend( (line1, line2, line3),\n        ('label1', 'label2', 'label3'),\n        'upper right')\n</pre> <p>The <em>loc</em> location codes are:</p> <pre data-language=\"python\">'best' : 0,          (currently not supported for figure legends)\n'upper right'  : 1,\n'upper left'   : 2,\n'lower left'   : 3,\n'lower right'  : 4,\n'right'        : 5,\n'center left'  : 6,\n'center right' : 7,\n'lower center' : 8,\n'upper center' : 9,\n'center'       : 10,\n</pre> <p><em>loc</em> can also be an (x,y) tuple in figure coords, which specifies the lower left of the legend box. figure coords are (0,0) is the left, bottom of the figure and 1,1 is the right, top.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>prop</em>: [ <em>None</em> | FontProperties | dict ]</dt> <dd>A <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance. If <em>prop</em> is a dictionary, a new instance will be created with <em>prop</em>. If <em>None</em>, use rc settings.</dd> <dt>\n<em>numpoints</em>: integer</dt> <dd>The number of points in the legend line, default is 4</dd> <dt>\n<em>scatterpoints</em>: integer</dt> <dd>The number of points in the legend line, default is 4</dd> <dt>\n<em>scatteryoffsets</em>: list of floats</dt> <dd>a list of yoffsets for scatter symbols in legend</dd> <dt>\n<em>markerscale</em>: [ <em>None</em> | scalar ]</dt> <dd>The relative size of legend markers vs. original. If <em>None</em>, use rc settings.</dd> <dt>\n<em>markerfirst</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>if <em>True</em>, legend marker is placed to the left of the legend label if <em>False</em>, legend marker is placed to the right of the legend label</dd> <dt>\n<em>fancybox</em>: [ <em>None</em> | <em>False</em> | <em>True</em> ]</dt> <dd>if <em>True</em>, draw a frame with a round fancybox. If <em>None</em>, use rc</dd> <dt>\n<em>shadow</em>: [ <em>None</em> | <em>False</em> | <em>True</em> ]</dt> <dd>If <em>True</em>, draw a shadow behind legend. If <em>None</em>, use rc settings.</dd> <dt>\n<em>ncol</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">integer</span>\n</dt> <dd>number of columns. default is 1</dd> <dt>\n<em>mode</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[ “expand” | <em>None</em> ]</span>\n</dt> <dd>if mode is “expand”, the legend will be horizontally expanded to fill the axes area (or <em>bbox_to_anchor</em>)</dd> <dt>\n<em>title</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span>\n</dt> <dd>the legend title</dd> </dl> </div>\n</blockquote> <p>Padding and spacing between various elements use following keywords parameters. The dimensions of these values are given as a fraction of the fontsize. Values from rcParams will be used if None.</p> <table class=\"docutils\"> <colgroup> <col width=\"24%\"> <col width=\"76%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Keyword</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>borderpad</td> <td>the fractional whitespace inside the legend border</td> </tr> <tr class=\"row-odd\">\n<td>labelspacing</td> <td>the vertical space between the legend entries</td> </tr> <tr class=\"row-even\">\n<td>handlelength</td> <td>the length of the legend handles</td> </tr> <tr class=\"row-odd\">\n<td>handletextpad</td> <td>the pad between the legend handle and text</td> </tr> <tr class=\"row-even\">\n<td>borderaxespad</td> <td>the pad between the axes and legend border</td> </tr> <tr class=\"row-odd\">\n<td>columnspacing</td> <td>the spacing between columns</td> </tr> </tbody> </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all kinds of artist are supported by the legend. See LINK (FIXME) for details.</p> </div> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figlegend_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figlegend_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figlegend_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figlegend_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/figlegend_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/figlegend_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.savefig\"><code>savefig(*args, **kwargs)</code></dt> <dd>\n<p>Save the current figure.</p> <p>Call signature:</p> <pre data-language=\"python\">savefig(fname, dpi=None, facecolor='w', edgecolor='w',\n        orientation='portrait', papertype=None, format=None,\n        transparent=False, bbox_inches=None, pad_inches=0.1,\n        frameon=None)\n</pre> <p>The output formats available depend on the backend being used.</p> <p>Arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>fname</em>:</dt> <dd>\n<p class=\"first\">A string containing a path to a filename, or a Python file-like object, or possibly some backend-dependent object such as <a class=\"reference internal\" href=\"backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages\" title=\"matplotlib.backends.backend_pdf.PdfPages\"><code>PdfPages</code></a>.</p> <p>If <em>format</em> is <em>None</em> and <em>fname</em> is a string, the output format is deduced from the extension of the filename. If the filename has no extension, the value of the rc parameter <code>savefig.format</code> is used.</p> <p class=\"last\">If <em>fname</em> is not a string, remember to specify <em>format</em> to ensure that the correct backend is used.</p> </dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>dpi</em>: [ <em>None</em> | <code>scalar &gt; 0</code> | ‘figure’]</dt> <dd>The resolution in dots per inch. If <em>None</em> it will default to the value <code>savefig.dpi</code> in the matplotlibrc file. If ‘figure’ it will set the dpi to be the value of the figure.</dd> <dt>\n<em>facecolor</em>, <em>edgecolor</em>:</dt> <dd>the colors of the figure rectangle</dd> <dt>\n<em>orientation</em>: [ ‘landscape’ | ‘portrait’ ]</dt> <dd>not supported on all backends; currently only on postscript output</dd> <dt>\n<em>papertype</em>:</dt> <dd>One of ‘letter’, ‘legal’, ‘executive’, ‘ledger’, ‘a0’ through ‘a10’, ‘b0’ through ‘b10’. Only supported for postscript output.</dd> <dt>\n<em>format</em>:</dt> <dd>One of the file extensions supported by the active backend. Most backends support png, pdf, ps, eps and svg.</dd> <dt>\n<em>transparent</em>:</dt> <dd>If <em>True</em>, the axes patches will all be transparent; the figure patch will also be transparent unless facecolor and/or edgecolor are specified via kwargs. This is useful, for example, for displaying a plot on top of a colored background on a web page. The transparency of these patches will be restored to their original values upon exit of this function.</dd> <dt>\n<em>frameon</em>:</dt> <dd>If <em>True</em>, the figure patch will be colored, if <em>False</em>, the figure background will be transparent. If not provided, the rcParam ‘savefig.frameon’ will be used.</dd> <dt>\n<em>bbox_inches</em>:</dt> <dd>Bbox in inches. Only the given portion of the figure is saved. If ‘tight’, try to figure out the tight bbox of the figure.</dd> <dt>\n<em>pad_inches</em>:</dt> <dd>Amount of padding around the figure when bbox_inches is ‘tight’.</dd> <dt>\n<em>bbox_extra_artists</em>:</dt> <dd>A list of extra artists that will be considered when the tight bbox is calculated.</dd> </dl> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.sca\"><code>sca(a)</code></dt> <dd>\n<p>Set the current axes to be a and return a</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_canvas\"><code>set_canvas(canvas)</code></dt> <dd>\n<p>Set the canvas that contains the figure</p> <p>ACCEPTS: a FigureCanvas instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_dpi\"><code>set_dpi(val)</code></dt> <dd>\n<p>Set the dots-per-inch of the figure</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_edgecolor\"><code>set_edgecolor(color)</code></dt> <dd>\n<p>Set the edge color of the Figure rectangle</p> <p>ACCEPTS: any matplotlib color - see help(colors)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_facecolor\"><code>set_facecolor(color)</code></dt> <dd>\n<p>Set the face color of the Figure rectangle</p> <p>ACCEPTS: any matplotlib color - see help(colors)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_figheight\"><code>set_figheight(val, forward=False)</code></dt> <dd>\n<p>Set the height of the figure in inches</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_figwidth\"><code>set_figwidth(val, forward=False)</code></dt> <dd>\n<p>Set the width of the figure in inches</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_frameon\"><code>set_frameon(b)</code></dt> <dd>\n<p>Set whether the figure frame (background) is displayed or invisible</p> <p>ACCEPTS: boolean</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_size_inches\"><code>set_size_inches(w, h, forward=False)</code></dt> <dd>\n<p>Set the figure size in inches (1in == 2.54cm)</p> <p>Usage:</p> <pre data-language=\"python\">fig.set_size_inches(w,h)  # OR\nfig.set_size_inches((w,h) )\n</pre> <p>optional kwarg <em>forward=True</em> will cause the canvas size to be automatically updated; e.g., you can resize the figure window from the shell</p> <p>ACCEPTS: a w,h tuple with w,h in inches</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><code>matplotlib.Figure.get_size_inches</code></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.set_tight_layout\"><code>set_tight_layout(tight)</code></dt> <dd>\n<p>Set whether <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.tight_layout\" title=\"matplotlib.figure.Figure.tight_layout\"><code>tight_layout()</code></a> is used upon drawing. If None, the rcParams[‘figure.autolayout’] value will be set.</p> <p>When providing a dict containing the keys <code>pad</code>, <code>w_pad</code>, <code>h_pad</code> and <code>rect</code>, the default <a class=\"reference internal\" href=\"#matplotlib.figure.Figure.tight_layout\" title=\"matplotlib.figure.Figure.tight_layout\"><code>tight_layout()</code></a> paddings will be overridden.</p> <p>ACCEPTS: [True | False | dict | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.show\"><code>show(warn=True)</code></dt> <dd>\n<p>If using a GUI backend with pyplot, display the figure window.</p> <p>If the figure was not created using <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.figure\" title=\"matplotlib.pyplot.figure\"><code>figure()</code></a>, it will lack a <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.FigureManagerBase\" title=\"matplotlib.backend_bases.FigureManagerBase\"><code>FigureManagerBase</code></a>, and will raise an AttributeError.</p> <p>For non-GUI backends, this does nothing, in which case a warning will be issued if <em>warn</em> is True (default).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.subplots_adjust\"><code>subplots_adjust(*args, **kwargs)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">subplots_adjust(left=None, bottom=None, right=None, top=None,\n                    wspace=None, hspace=None)\n</pre> <p>Update the <a class=\"reference internal\" href=\"#matplotlib.figure.SubplotParams\" title=\"matplotlib.figure.SubplotParams\"><code>SubplotParams</code></a> with <em>kwargs</em> (defaulting to rc when <em>None</em>) and update the subplot locations</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.suptitle\"><code>suptitle(t, **kwargs)</code></dt> <dd>\n<p>Add a centered title to the figure.</p> <p>kwargs are <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> properties. Using figure coordinates, the defaults are:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.5</span>\n</dt> <dd>The x location of the text in figure coords</dd> <dt>\n<em>y</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.98</span>\n</dt> <dd>The y location of the text in figure coords</dd> <dt>\n<em>horizontalalignment</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">‘center’</span>\n</dt> <dd>The horizontal alignment of the text</dd> <dt>\n<em>verticalalignment</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">‘top’</span>\n</dt> <dd>The vertical alignment of the text</dd> </dl> </div>\n</blockquote> <p>A <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instance is returned.</p> <p>Example:</p> <pre data-language=\"python\">fig.suptitle('this is the figure title', fontsize=12)\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.text\"><code>text(x, y, s, *args, **kwargs)</code></dt> <dd>\n<p>Add text to figure.</p> <p>Call signature:</p> <pre data-language=\"python\">text(x, y, s, fontdict=None, **kwargs)\n</pre> <p>Add text to figure at location <em>x</em>, <em>y</em> (relative 0-1 coords). See <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.text\" title=\"matplotlib.pyplot.text\"><code>text()</code></a> for the meaning of the other arguments.</p> <p>kwargs control the <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"30%\"> <col width=\"70%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_backgroundcolor\" title=\"matplotlib.text.Text.set_backgroundcolor\"><code>backgroundcolor</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>bbox</code></a></td> <td>FancyBboxPatch prop dict</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_box\" title=\"matplotlib.text.Text.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_on\" title=\"matplotlib.text.Text.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_path\" title=\"matplotlib.text.Text.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_color\" title=\"matplotlib.text.Text.set_color\"><code>color</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_family\" title=\"matplotlib.text.Text.set_family\"><code>family</code></a> or name or fontname or fontfamily</td> <td>[FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ | ‘monospace’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_fontproperties\" title=\"matplotlib.text.Text.set_fontproperties\"><code>fontproperties</code></a> or font_properties</td> <td>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_horizontalalignment\" title=\"matplotlib.text.Text.set_horizontalalignment\"><code>horizontalalignment</code></a> or ha</td> <td>[ ‘center’ | ‘right’ | ‘left’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_linespacing\" title=\"matplotlib.text.Text.set_linespacing\"><code>linespacing</code></a></td> <td>float (multiple of font size)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_multialignment\" title=\"matplotlib.text.Text.set_multialignment\"><code>multialignment</code></a></td> <td>[‘left’ | ‘right’ | ‘center’ ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>position</code></a></td> <td>(x,y)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation\" title=\"matplotlib.text.Text.set_rotation\"><code>rotation</code></a></td> <td>[ angle in degrees | ‘vertical’ | ‘horizontal’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation_mode\" title=\"matplotlib.text.Text.set_rotation_mode\"><code>rotation_mode</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_size\" title=\"matplotlib.text.Text.set_size\"><code>size</code></a> or fontsize</td> <td>[size in points | ‘xx-small’ | ‘x-small’ | ‘small’ | ‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_stretch\" title=\"matplotlib.text.Text.set_stretch\"><code>stretch</code></a> or fontstretch</td> <td>[a numeric value in range 0-1000 | ‘ultra-condensed’ | ‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_style\" title=\"matplotlib.text.Text.set_style\"><code>style</code></a> or fontstyle</td> <td>[ ‘normal’ | ‘italic’ | ‘oblique’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_text\" title=\"matplotlib.text.Text.set_text\"><code>text</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_usetex\" title=\"matplotlib.text.Text.set_usetex\"><code>usetex</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_variant\" title=\"matplotlib.text.Text.set_variant\"><code>variant</code></a> or fontvariant</td> <td>[ ‘normal’ | ‘small-caps’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_verticalalignment\" title=\"matplotlib.text.Text.set_verticalalignment\"><code>verticalalignment</code></a> or va or ma</td> <td>[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_weight\" title=\"matplotlib.text.Text.set_weight\"><code>weight</code></a> or fontweight</td> <td>[a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ | ‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_wrap\" title=\"matplotlib.text.Text.set_wrap\"><code>wrap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_x\" title=\"matplotlib.text.Text.set_x\"><code>x</code></a></td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_y\" title=\"matplotlib.text.Text.set_y\"><code>y</code></a></td> <td>float</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.tight_layout\"><code>tight_layout(renderer=None, pad=1.08, h_pad=None, w_pad=None, rect=None)</code></dt> <dd>\n<p>Adjust subplot parameters to give specified padding.</p> <p>Parameters:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>pad</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding between the figure edge and the edges of subplots, as a fraction of the font-size.</dd> <dt>\n<em>h_pad</em>, <em>w_pad</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding (height/width) between edges of adjacent subplots. Defaults to <code>pad_inches</code>.</dd> <dt>\n<em>rect</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">if rect is given, it is interpreted as a rectangle</span>\n</dt> <dd>(left, bottom, right, top) in the normalized figure coordinate that the whole subplots area (including labels) will fit into. Default is (0, 0, 1, 1).</dd> </dl> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.Figure.waitforbuttonpress\"><code>waitforbuttonpress(timeout=-1)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">waitforbuttonpress(self, timeout=-1)\n</pre> <p>Blocking call to interact with the figure.</p> <p>This will return True is a key was pressed, False if a mouse button was pressed and None if <em>timeout</em> was reached without either being pressed.</p> <p>If <em>timeout</em> is negative, does not timeout.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.figure.SubplotParams\"><code>class matplotlib.figure.SubplotParams(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A class to hold the parameters for a subplot</p> <p>All dimensions are fraction of the figure width or height. All values default to their rc params</p> <p>The following attributes are available</p> <dl class=\"docutils\"> <dt>\n<em>left</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.125</span>\n</dt> <dd>The left side of the subplots of the figure</dd> <dt>\n<em>right</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.9</span>\n</dt> <dd>The right side of the subplots of the figure</dd> <dt>\n<em>bottom</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.1</span>\n</dt> <dd>The bottom of the subplots of the figure</dd> <dt>\n<em>top</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.9</span>\n</dt> <dd>The top of the subplots of the figure</dd> <dt>\n<em>wspace</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.2</span>\n</dt> <dd>The amount of width reserved for blank space between subplots</dd> <dt>\n<em>hspace</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.2</span>\n</dt> <dd>The amount of height reserved for white space between subplots</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.figure.SubplotParams.update\"><code>update(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None)</code></dt> <dd>\n<p>Update the current values. If any kwarg is None, default to the current value, if set, otherwise to rc</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.figure.figaspect\"><code>matplotlib.figure.figaspect(arg)</code></dt> <dd>\n<p>Create a figure with specified aspect ratio. If <em>arg</em> is a number, use that aspect ratio. If <em>arg</em> is an array, figaspect will determine the width and height for a figure that would fit array preserving aspect ratio. The figure width, height in inches are returned. Be sure to create an axes with equal with and height, e.g.,</p> <p>Example usage:</p> <pre data-language=\"python\"># make a figure twice as tall as it is wide\nw, h = figaspect(2.)\nfig = Figure(figsize=(w,h))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\nax.imshow(A, **kwargs)\n\n# make a figure with the proper aspect for an array\nA = rand(5,3)\nw, h = figaspect(A)\nfig = Figure(figsize=(w,h))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\nax.imshow(A, **kwargs)\n</pre> <p>Thanks to Fernando Perez for this function</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/figure_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/figure_api.html</a>\n  </p>\n</div>\n","backend_gtkagg_api":"<h1 id=\"matplotlib-backends-backend-gtkagg\">matplotlib.backends.backend_gtkagg</h1> <p><strong>TODO</strong> We’ll add this later, importing the gtk backends requires an active X-session, which is not compatible with cron jobs.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/backend_gtkagg_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/backend_gtkagg_api.html</a>\n  </p>\n</div>\n","backend_qt4agg_api":"<h1 id=\"matplotlib-backends-backend-qt4agg\">matplotlib.backends.backend_qt4agg</h1> <p id=\"module-matplotlib.backends.backend_qt4agg\">Render to qt from agg</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backends.backend_qt4agg.FigureCanvas\"><code>matplotlib.backends.backend_qt4agg.FigureCanvas</code></dt> <dd>\n<p>alias of <a class=\"reference internal\" href=\"#matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg\" title=\"matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg\"><code>FigureCanvasQTAgg</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg\"><code>class matplotlib.backends.backend_qt4agg.FigureCanvasQTAgg(figure)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backends.backend_qt4agg.FigureCanvasQTAggBase\" title=\"matplotlib.backends.backend_qt4agg.FigureCanvasQTAggBase\"><code>matplotlib.backends.backend_qt4agg.FigureCanvasQTAggBase</code></a>, <code>matplotlib.backends.backend_qt4.FigureCanvasQT</code>, <code>matplotlib.backends.backend_agg.FigureCanvasAgg</code></p> <p>The canvas the figure renders into. Calls the draw and print fig methods, creates the renderers, etc...</p> <p>Public attribute</p> <blockquote> <div>figure - A Figure instance</div>\n</blockquote> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_qt4agg.FigureCanvasQTAggBase\"><code>class matplotlib.backends.backend_qt4agg.FigureCanvasQTAggBase(figure)</code></dt> <dd>\n<p>Bases: <code>matplotlib.backends.backend_qt5agg.FigureCanvasQTAggBase</code></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backends.backend_qt4agg.new_figure_manager\"><code>matplotlib.backends.backend_qt4agg.new_figure_manager(num, *args, **kwargs)</code></dt> <dd>\n<p>Create a new figure manager instance</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backends.backend_qt4agg.new_figure_manager_given_figure\"><code>matplotlib.backends.backend_qt4agg.new_figure_manager_given_figure(num, figure)</code></dt> <dd>\n<p>Create a new figure manager instance for the given figure.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/backend_qt4agg_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/backend_qt4agg_api.html</a>\n  </p>\n</div>\n","ticker_api":"<h1 id=\"ticker\">ticker</h1>  <h2 id=\"matplotlib-ticker\">matplotlib.ticker</h2>  <h3 id=\"module-matplotlib.ticker\">Tick locating and formatting</h3> <p>This module contains classes to support completely configurable tick locating and formatting. Although the locators know nothing about major or minor ticks, they are used by the Axis class to support major and minor tick locating and formatting. Generic tick locators and formatters are provided, as well as domain specific custom ones..</p>  <h4 id=\"default-formatter\">Default Formatter</h4> <p>The default formatter identifies when the x-data being plotted is a small range on top of a large off set. To reduce the chances that the ticklabels overlap the ticks are labeled as deltas from a fixed offset. For example:</p> <pre data-language=\"python\">ax.plot(np.arange(2000, 2010), range(10))\n</pre> <p>will have tick of 0-9 with an offset of +2e3. If this is not desired turn off the use of the offset on the default formatter:</p> <pre data-language=\"python\">ax.get_xaxis().get_major_formatter().set_useOffset(False)\n</pre> <p>set the rcParam <code>axes.formatter.useoffset=False</code> to turn it off globally, or set a different formatter.</p>   <h4 id=\"tick-locating\">Tick locating</h4> <p>The Locator class is the base class for all tick locators. The locators handle autoscaling of the view limits based on the data limits, and the choosing of tick locations. A useful semi-automatic tick locator is MultipleLocator. You initialize this with a base, e.g., 10, and it picks axis limits and ticks that are multiples of your base.</p> <p>The Locator subclasses defined here are</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.NullLocator\" title=\"matplotlib.ticker.NullLocator\"><code>NullLocator</code></a></dt> <dd>No ticks</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.FixedLocator\" title=\"matplotlib.ticker.FixedLocator\"><code>FixedLocator</code></a></dt> <dd>Tick locations are fixed</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.IndexLocator\" title=\"matplotlib.ticker.IndexLocator\"><code>IndexLocator</code></a></dt> <dd>locator for index plots (e.g., where x = range(len(y)))</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.LinearLocator\" title=\"matplotlib.ticker.LinearLocator\"><code>LinearLocator</code></a></dt> <dd>evenly spaced ticks from min to max</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.LogLocator\" title=\"matplotlib.ticker.LogLocator\"><code>LogLocator</code></a></dt> <dd>logarithmically ticks from min to max</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.SymmetricalLogLocator\" title=\"matplotlib.ticker.SymmetricalLogLocator\"><code>SymmetricalLogLocator</code></a></dt> <dd>locator for use with with the symlog norm, works like the <a class=\"reference internal\" href=\"#matplotlib.ticker.LogLocator\" title=\"matplotlib.ticker.LogLocator\"><code>LogLocator</code></a> for the part outside of the threshold and add 0 if inside the limits</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.MultipleLocator\" title=\"matplotlib.ticker.MultipleLocator\"><code>MultipleLocator</code></a></dt> <dd>\n<dl class=\"first last docutils\"> <dt>ticks and range are a multiple of base;</dt> <dd>either integer or float</dd> </dl> </dd> <dt><code>OldAutoLocator</code></dt> <dd>choose a MultipleLocator and dyamically reassign it for intelligent ticking during navigation</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a></dt> <dd>finds up to a max number of ticks at nice locations</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.AutoLocator\" title=\"matplotlib.ticker.AutoLocator\"><code>AutoLocator</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> with simple defaults. This is the default tick locator for most plotting.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.AutoMinorLocator\" title=\"matplotlib.ticker.AutoMinorLocator\"><code>AutoMinorLocator</code></a></dt> <dd>locator for minor ticks when the axis is linear and the major ticks are uniformly spaced. It subdivides the major tick interval into a specified number of minor intervals, defaulting to 4 or 5 depending on the major interval.</dd> </dl> <p>There are a number of locators specialized for date locations - see the dates module</p> <p>You can define your own locator by deriving from Locator. You must override the __call__ method, which returns a sequence of locations, and you will probably want to override the autoscale method to set the view limits from the data limits.</p> <p>If you want to override the default locator, use one of the above or a custom locator and pass it to the x or y axis instance. The relevant methods are:</p> <pre data-language=\"python\">ax.xaxis.set_major_locator( xmajorLocator )\nax.xaxis.set_minor_locator( xminorLocator )\nax.yaxis.set_major_locator( ymajorLocator )\nax.yaxis.set_minor_locator( yminorLocator )\n</pre> <p>The default minor locator is the NullLocator, e.g., no minor ticks on by default.</p>   <h4 id=\"tick-formatting\">Tick formatting</h4> <p>Tick formatting is controlled by classes derived from Formatter. The formatter operates on a single tick value and returns a string to the axis.</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.NullFormatter\" title=\"matplotlib.ticker.NullFormatter\"><code>NullFormatter</code></a></dt> <dd>no labels on the ticks</dd> <dt><code>IndexFormatter</code></dt> <dd>set the strings from a list of labels</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.FixedFormatter\" title=\"matplotlib.ticker.FixedFormatter\"><code>FixedFormatter</code></a></dt> <dd>set the strings manually for the labels</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.FuncFormatter\" title=\"matplotlib.ticker.FuncFormatter\"><code>FuncFormatter</code></a></dt> <dd>user defined function sets the labels</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.StrMethodFormatter\" title=\"matplotlib.ticker.StrMethodFormatter\"><code>StrMethodFormatter</code></a></dt> <dd>Use string <code>format</code> method</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.FormatStrFormatter\" title=\"matplotlib.ticker.FormatStrFormatter\"><code>FormatStrFormatter</code></a></dt> <dd>use a sprintf format string</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.ScalarFormatter\" title=\"matplotlib.ticker.ScalarFormatter\"><code>ScalarFormatter</code></a></dt> <dd>default formatter for scalars; autopick the fmt string</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.ticker.LogFormatter\" title=\"matplotlib.ticker.LogFormatter\"><code>LogFormatter</code></a></dt> <dd>formatter for log axes</dd> </dl> <p>You can derive your own formatter from the Formatter base class by simply overriding the <code>__call__</code> method. The formatter class has access to the axis view and data limits.</p> <p>To control the major and minor tick label formats, use one of the following methods:</p> <pre data-language=\"python\">ax.xaxis.set_major_formatter( xmajorFormatter )\nax.xaxis.set_minor_formatter( xminorFormatter )\nax.yaxis.set_major_formatter( ymajorFormatter )\nax.yaxis.set_minor_formatter( yminorFormatter )\n</pre> <p>See <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/examples/pylab_examples/major_minor_demo1.html#pylab-examples-major-minor-demo1\"><span>pylab_examples example code: major_minor_demo1.py</span></a> for an example of setting major and minor ticks. See the <a class=\"reference internal\" href=\"dates_api#module-matplotlib.dates\" title=\"matplotlib.dates\"><code>matplotlib.dates</code></a> module for more information and examples of using date locators and formatters.</p> <dl class=\"class\"> <dt id=\"matplotlib.ticker.TickHelper\"><code>class matplotlib.ticker.TickHelper</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"attribute\"> <dt id=\"matplotlib.ticker.TickHelper.axis\"><code>axis = None</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.TickHelper.create_dummy_axis\"><code>create_dummy_axis(**kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.TickHelper.set_axis\"><code>set_axis(axis)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.TickHelper.set_bounds\"><code>set_bounds(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.TickHelper.set_data_interval\"><code>set_data_interval(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.TickHelper.set_view_interval\"><code>set_view_interval(vmin, vmax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.Formatter\"><code>class matplotlib.ticker.Formatter</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.TickHelper\" title=\"matplotlib.ticker.TickHelper\"><code>matplotlib.ticker.TickHelper</code></a></p> <p>Convert the tick location to a string</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Formatter.fix_minus\"><code>fix_minus(s)</code></dt> <dd>\n<p>Some classes may want to replace a hyphen for minus with the proper unicode symbol (U+2212) for typographical correctness. The default is to not replace it.</p> <p>Note, if you use this method, e.g., in <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter.format_data\" title=\"matplotlib.ticker.Formatter.format_data\"><code>format_data()</code></a> or call, you probably don’t want to use it for <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter.format_data_short\" title=\"matplotlib.ticker.Formatter.format_data_short\"><code>format_data_short()</code></a> since the toolbar uses this for interactive coord reporting and I doubt we can expect GUIs across platforms will handle the unicode correctly. So for now the classes that override <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter.fix_minus\" title=\"matplotlib.ticker.Formatter.fix_minus\"><code>fix_minus()</code></a> should have an explicit <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter.format_data_short\" title=\"matplotlib.ticker.Formatter.format_data_short\"><code>format_data_short()</code></a> method</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Formatter.format_data\"><code>format_data(value)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Formatter.format_data_short\"><code>format_data_short(value)</code></dt> <dd>\n<p>return a short string version</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Formatter.get_offset\"><code>get_offset()</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.ticker.Formatter.locs\"><code>locs = []</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Formatter.set_locs\"><code>set_locs(locs)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.FixedFormatter\"><code>class matplotlib.ticker.FixedFormatter(seq)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>Return fixed strings for tick labels</p> <p><em>seq</em> is a sequence of strings. For positions <code>i &lt; len(seq)</code> return <em>seq[i]</em> regardless of <em>x</em>. Otherwise return ‘’</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.FixedFormatter.get_offset\"><code>get_offset()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.FixedFormatter.set_offset_string\"><code>set_offset_string(ofs)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.NullFormatter\"><code>class matplotlib.ticker.NullFormatter</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>Always return the empty string</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.FuncFormatter\"><code>class matplotlib.ticker.FuncFormatter(func)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>User defined function for formatting</p> <p>The function should take in two inputs (tick value <em>x</em> and position <em>pos</em>) and return a string</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.FormatStrFormatter\"><code>class matplotlib.ticker.FormatStrFormatter(fmt)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>Use an old-style (‘%’ operator) format string to format the tick</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.StrMethodFormatter\"><code>class matplotlib.ticker.StrMethodFormatter(fmt)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>Use a new-style format string (as used by <code>str.format()</code>) to format the tick. The field formatting must be labeled <code>x</code>.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.ScalarFormatter\"><code>class matplotlib.ticker.ScalarFormatter(useOffset=None, useMathText=None, useLocale=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>Tick location is a plain old number. If useOffset==True and the data range is much smaller than the data average, then an offset will be determined such that the tick labels are meaningful. Scientific notation is used for data &lt; 10^-n or data &gt;= 10^m, where n and m are the power limits set using set_powerlimits((n,m)). The defaults for these are controlled by the axes.formatter.limits rc parameter.</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.fix_minus\"><code>fix_minus(s)</code></dt> <dd>\n<p>use a unicode minus rather than hyphen</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.format_data\"><code>format_data(value)</code></dt> <dd>\n<p>return a formatted string representation of a number</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.format_data_short\"><code>format_data_short(value)</code></dt> <dd>\n<p>return a short formatted string representation of a number</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.get_offset\"><code>get_offset()</code></dt> <dd>\n<p>Return scientific notation, plus offset</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.get_useLocale\"><code>get_useLocale()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.get_useOffset\"><code>get_useOffset()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.pprint_val\"><code>pprint_val(x)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.set_locs\"><code>set_locs(locs)</code></dt> <dd>\n<p>set the locations of the ticks</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.set_powerlimits\"><code>set_powerlimits(lims)</code></dt> <dd>\n<p>Sets size thresholds for scientific notation.</p> <p>e.g., <code>formatter.set_powerlimits((-3, 4))</code> sets the pre-2007 default in which scientific notation is used for numbers less than 1e-3 or greater than 1e4. See also <a class=\"reference internal\" href=\"#matplotlib.ticker.ScalarFormatter.set_scientific\" title=\"matplotlib.ticker.ScalarFormatter.set_scientific\"><code>set_scientific()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.set_scientific\"><code>set_scientific(b)</code></dt> <dd>\n<p>True or False to turn scientific notation on or off see also <a class=\"reference internal\" href=\"#matplotlib.ticker.ScalarFormatter.set_powerlimits\" title=\"matplotlib.ticker.ScalarFormatter.set_powerlimits\"><code>set_powerlimits()</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.set_useLocale\"><code>set_useLocale(val)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.ScalarFormatter.set_useOffset\"><code>set_useOffset(val)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.ticker.ScalarFormatter.useLocale\"><code>useLocale</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.ticker.ScalarFormatter.useOffset\"><code>useOffset</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.LogFormatter\"><code>class matplotlib.ticker.LogFormatter(base=10.0, labelOnlyBase=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>matplotlib.ticker.Formatter</code></a></p> <p>Format values for log axis;</p> <p><em>base</em> is used to locate the decade tick, which will be the only one to be labeled if <em>labelOnlyBase</em> is <code>False</code></p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogFormatter.base\"><code>base(base)</code></dt> <dd>\n<p>change the <em>base</em> for labeling - warning: should always match the base used for <a class=\"reference internal\" href=\"#matplotlib.ticker.LogLocator\" title=\"matplotlib.ticker.LogLocator\"><code>LogLocator</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogFormatter.format_data\"><code>format_data(value)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogFormatter.format_data_short\"><code>format_data_short(value)</code></dt> <dd>\n<p>return a short formatted string representation of a number</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogFormatter.label_minor\"><code>label_minor(labelOnlyBase)</code></dt> <dd>\n<p>switch on/off minor ticks labeling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogFormatter.pprint_val\"><code>pprint_val(x, d)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.LogFormatterExponent\"><code>class matplotlib.ticker.LogFormatterExponent(base=10.0, labelOnlyBase=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.LogFormatter\" title=\"matplotlib.ticker.LogFormatter\"><code>matplotlib.ticker.LogFormatter</code></a></p> <p>Format values for log axis; using <code>exponent = log_base(value)</code></p> <p><em>base</em> is used to locate the decade tick, which will be the only one to be labeled if <em>labelOnlyBase</em> is <code>False</code></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.LogFormatterMathtext\"><code>class matplotlib.ticker.LogFormatterMathtext(base=10.0, labelOnlyBase=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.LogFormatter\" title=\"matplotlib.ticker.LogFormatter\"><code>matplotlib.ticker.LogFormatter</code></a></p> <p>Format values for log axis; using <code>exponent = log_base(value)</code></p> <p><em>base</em> is used to locate the decade tick, which will be the only one to be labeled if <em>labelOnlyBase</em> is <code>False</code></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.Locator\"><code>class matplotlib.ticker.Locator</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.TickHelper\" title=\"matplotlib.ticker.TickHelper\"><code>matplotlib.ticker.TickHelper</code></a></p> <p>Determine the tick locations;</p> <p>Note, you should not use the same locator between different <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>Axis</code></a> because the locator stores references to the Axis data and view limits</p> <dl class=\"attribute\"> <dt id=\"matplotlib.ticker.Locator.MAXTICKS\"><code>MAXTICKS = 1000</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Locator.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>autoscale the view limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Locator.pan\"><code>pan(numsteps)</code></dt> <dd>\n<p>Pan numticks (can be positive or negative)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Locator.raise_if_exceeds\"><code>raise_if_exceeds(locs)</code></dt> <dd>\n<p>raise a RuntimeError if Locator attempts to create more than MAXTICKS locs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Locator.refresh\"><code>refresh()</code></dt> <dd>\n<p>refresh internal information based on current lim</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Locator.set_params\"><code>set_params(**kwargs)</code></dt> <dd>\n<p>Do nothing, and rase a warning. Any locator class not supporting the set_params() function will call this.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Locator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> <dd>\n<p>Return the values of the located ticks given <strong>vmin</strong> and <strong>vmax</strong>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>To get tick locations with the vmin and vmax values defined automatically for the associated <code>axis</code> simply call the Locator instance:</p> <pre data-language=\"python\">&gt;&gt;&gt; print((type(loc)))\n&lt;type 'Locator'&gt;\n&gt;&gt;&gt; print((loc()))\n[1, 2, 3, 4]\n</pre> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Locator.view_limits\"><code>view_limits(vmin, vmax)</code></dt> <dd>\n<p>select a scale for the range from vmin to vmax</p> <p>Normally this method is overridden by subclasses to change locator behaviour.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.Locator.zoom\"><code>zoom(direction)</code></dt> <dd>\n<p>Zoom in/out on axis; if direction is &gt;0 zoom in, else zoom out</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.IndexLocator\"><code>class matplotlib.ticker.IndexLocator(base, offset)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Place a tick on every multiple of some base number of points plotted, e.g., on every 5th point. It is assumed that you are doing index plotting; i.e., the axis is 0, len(data). This is mainly useful for x ticks.</p> <p>place ticks on the i-th data points where (i-offset)%base==0</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.IndexLocator.set_params\"><code>set_params(base=None, offset=None)</code></dt> <dd>\n<p>Set parameters within this locator</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.IndexLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.FixedLocator\"><code>class matplotlib.ticker.FixedLocator(locs, nbins=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Tick locations are fixed. If nbins is not None, the array of possible positions will be subsampled to keep the number of ticks &lt;= nbins +1. The subsampling will be done so as to include the smallest absolute value; for example, if zero is included in the array of possibilities, then it is guaranteed to be one of the chosen ticks.</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.FixedLocator.set_params\"><code>set_params(nbins=None)</code></dt> <dd>\n<p>Set parameters within this locator.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.FixedLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> <dd>\n<p>” Return the locations of the ticks.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Because the values are fixed, vmin and vmax are not used in this method.</p> </div> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.NullLocator\"><code>class matplotlib.ticker.NullLocator</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>No ticks</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.NullLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> <dd>\n<p>” Return the locations of the ticks.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Because the values are Null, vmin and vmax are not used in this method.</p> </div> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.LinearLocator\"><code>class matplotlib.ticker.LinearLocator(numticks=None, presets=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Determine the tick locations</p> <p>The first time this function is called it will try to set the number of ticks to make a nice tick partitioning. Thereafter the number of ticks will be fixed so that interactive navigation will be nice</p> <p>Use presets to set locs based on lom. A dict mapping vmin, vmax-&gt;locs</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LinearLocator.set_params\"><code>set_params(numticks=None, presets=None)</code></dt> <dd>\n<p>Set parameters within this locator.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LinearLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LinearLocator.view_limits\"><code>view_limits(vmin, vmax)</code></dt> <dd>\n<p>Try to choose the view limits intelligently</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.LogLocator\"><code>class matplotlib.ticker.LogLocator(base=10.0, subs=[1.0], numdecs=4, numticks=15)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Determine the tick locations for log axes</p> <p>place ticks on the location= base**i*subs[j]</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogLocator.base\"><code>base(base)</code></dt> <dd>\n<p>set the base of the log scaling (major tick every base**i, i integer)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogLocator.set_params\"><code>set_params(base=None, subs=None, numdecs=None, numticks=None)</code></dt> <dd>\n<p>Set parameters within this locator.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogLocator.subs\"><code>subs(subs)</code></dt> <dd>\n<p>set the minor ticks the log scaling every base**i*subs[j]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.LogLocator.view_limits\"><code>view_limits(vmin, vmax)</code></dt> <dd>\n<p>Try to choose the view limits intelligently</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.AutoLocator\"><code>class matplotlib.ticker.AutoLocator</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>matplotlib.ticker.MaxNLocator</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.MultipleLocator\"><code>class matplotlib.ticker.MultipleLocator(base=1.0)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Set a tick on every integer that is multiple of base in the view interval</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.MultipleLocator.set_params\"><code>set_params(base)</code></dt> <dd>\n<p>Set parameters within this locator.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.MultipleLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.MultipleLocator.view_limits\"><code>view_limits(dmin, dmax)</code></dt> <dd>\n<p>Set the view limits to the nearest multiples of base that contain the data</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.MaxNLocator\"><code>class matplotlib.ticker.MaxNLocator(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Select no more than N intervals at nice locations.</p> <p>Keyword args:</p> <dl class=\"docutils\"> <dt><em>nbins</em></dt> <dd>Maximum number of intervals; one less than max number of ticks.</dd> <dt><em>steps</em></dt> <dd>Sequence of nice numbers starting with 1 and ending with 10; e.g., [1, 2, 4, 5, 10]</dd> <dt><em>integer</em></dt> <dd>If True, ticks will take only integer values.</dd> <dt><em>symmetric</em></dt> <dd>If True, autoscaling will result in a range symmetric about zero.</dd> <dt><em>prune</em></dt> <dd>[‘lower’ | ‘upper’ | ‘both’ | None] Remove edge ticks – useful for stacked or ganged plots where the upper tick of one axes overlaps with the lower tick of the axes above it. If prune==’lower’, the smallest tick will be removed. If prune==’upper’, the largest tick will be removed. If prune==’both’, the largest and smallest ticks will be removed. If prune==None, no ticks will be removed.</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.MaxNLocator.bin_boundaries\"><code>bin_boundaries(vmin, vmax)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.ticker.MaxNLocator.default_params\"><code>default_params = {'symmetric': False, 'integer': False, 'trim': True, 'nbins': 10, 'prune': None, 'steps': None}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.MaxNLocator.set_params\"><code>set_params(**kwargs)</code></dt> <dd>\n<p>Set parameters within this locator.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.MaxNLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.MaxNLocator.view_limits\"><code>view_limits(dmin, dmax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.AutoMinorLocator\"><code>class matplotlib.ticker.AutoMinorLocator(n=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Dynamically find minor tick positions based on the positions of major ticks. Assumes the scale is linear and major ticks are evenly spaced.</p> <p><em>n</em> is the number of subdivisions of the interval between major ticks; e.g., n=2 will place a single minor tick midway between major ticks.</p> <p>If <em>n</em> is omitted or None, it will be set to 5 or 4.</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.AutoMinorLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.ticker.SymmetricalLogLocator\"><code>class matplotlib.ticker.SymmetricalLogLocator(transform, subs=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.ticker.Locator\" title=\"matplotlib.ticker.Locator\"><code>matplotlib.ticker.Locator</code></a></p> <p>Determine the tick locations for log axes</p> <p>place ticks on the location= base**i*subs[j]</p> <dl class=\"method\"> <dt id=\"matplotlib.ticker.SymmetricalLogLocator.set_params\"><code>set_params(subs=None, numticks=None)</code></dt> <dd>\n<p>Set parameters within this locator.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.SymmetricalLogLocator.tick_values\"><code>tick_values(vmin, vmax)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.ticker.SymmetricalLogLocator.view_limits\"><code>view_limits(vmin, vmax)</code></dt> <dd>\n<p>Try to choose the view limits intelligently</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/ticker_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/ticker_api.html</a>\n  </p>\n</div>\n","tri_api":"<h1 id=\"triangular-grids\">triangular grids</h1>  <h2 id=\"matplotlib-tri\">matplotlib.tri</h2> <p id=\"module-matplotlib.tri\">Unstructured triangular grid functions.</p> <dl class=\"class\"> <dt id=\"matplotlib.tri.Triangulation\"><code>class matplotlib.tri.Triangulation(x, y, triangles=None, mask=None)</code></dt> <dd>\n<p>An unstructured triangular grid consisting of npoints points and ntri triangles. The triangles can either be specified by the user or automatically generated using a Delaunay triangulation.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : array_like of shape (npoints)</p> <blockquote> <div>\n<p>Coordinates of grid points.</p> </div>\n</blockquote> <p><strong>triangles</strong> : integer array_like of shape (ntri, 3), optional</p> <blockquote> <div>\n<p>For each triangle, the indices of the three points that make up the triangle, ordered in an anticlockwise manner. If not specified, the Delaunay triangulation is calculated.</p> </div>\n</blockquote> <p><strong>mask</strong> : boolean array_like of shape (ntri), optional</p> <blockquote class=\"last\"> <div>\n<p>Which triangles are masked out.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>For a Triangulation to be valid it must not have duplicate points, triangles formed from colinear points, or overlapping triangles.</p> <h4 class=\"rubric\">Attributes</h4> <table class=\"docutils\"> <colgroup> <col width=\"9%\"> <col width=\"91%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation.edges\" title=\"matplotlib.tri.Triangulation.edges\"><code>edges</code></a></td> <td> </td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation.neighbors\" title=\"matplotlib.tri.Triangulation.neighbors\"><code>neighbors</code></a></td> <td> </td> </tr> <tr class=\"row-odd\">\n<td>is_delaunay</td> <td>(bool) Whether the Triangulation is a calculated Delaunay triangulation (where <code>triangles</code> was not specified) or not.</td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.tri.Triangulation.calculate_plane_coefficients\"><code>calculate_plane_coefficients(z)</code></dt> <dd>\n<p>Calculate plane equation coefficients for all unmasked triangles from the point (x,y) coordinates and specified z-array of shape (npoints). Returned array has shape (npoints,3) and allows z-value at (x,y) position in triangle tri to be calculated using z = array[tri,0]*x + array[tri,1]*y + array[tri,2].</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.tri.Triangulation.edges\"><code>edges</code></dt> <dd>\n<p>Return integer array of shape (nedges,2) containing all edges of non-masked triangles.</p> <p>Each edge is the start point index and end point index. Each edge (start,end and end,start) appears only once.</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.tri.Triangulation.get_from_args_and_kwargs\"><code>static get_from_args_and_kwargs(*args, **kwargs)</code></dt> <dd>\n<p>Return a Triangulation object from the args and kwargs, and the remaining args and kwargs with the consumed values removed.</p> <p>There are two alternatives: either the first argument is a Triangulation object, in which case it is returned, or the args and kwargs are sufficient to create a new Triangulation to return. In the latter case, see Triangulation.__init__ for the possible args and kwargs.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.tri.Triangulation.get_masked_triangles\"><code>get_masked_triangles()</code></dt> <dd>\n<p>Return an array of triangles that are not masked.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.tri.Triangulation.get_trifinder\"><code>get_trifinder()</code></dt> <dd>\n<p>Return the default <a class=\"reference internal\" href=\"#matplotlib.tri.TriFinder\" title=\"matplotlib.tri.TriFinder\"><code>matplotlib.tri.TriFinder</code></a> of this triangulation, creating it if necessary. This allows the same TriFinder object to be easily shared.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.tri.Triangulation.neighbors\"><code>neighbors</code></dt> <dd>\n<p>Return integer array of shape (ntri,3) containing neighbor triangles.</p> <p>For each triangle, the indices of the three triangles that share the same edges, or -1 if there is no such neighboring triangle. neighbors[i,j] is the triangle that is the neighbor to the edge from point index triangles[i,j] to point index triangles[i,(j+1)%3].</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.tri.Triangulation.set_mask\"><code>set_mask(mask)</code></dt> <dd>\n<p>Set or clear the mask array. This is either None, or a boolean array of shape (ntri).</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.tri.TriFinder\"><code>class matplotlib.tri.TriFinder(triangulation)</code></dt> <dd>\n<p>Abstract base class for classes used to find the triangles of a Triangulation in which (x,y) points lie.</p> <p>Rather than instantiate an object of a class derived from TriFinder, it is usually better to use the function <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation.get_trifinder\" title=\"matplotlib.tri.Triangulation.get_trifinder\"><code>matplotlib.tri.Triangulation.get_trifinder()</code></a>.</p> <p>Derived classes implement __call__(x,y) where x,y are array_like point coordinates of the same shape.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.tri.TrapezoidMapTriFinder\"><code>class matplotlib.tri.TrapezoidMapTriFinder(triangulation)</code></dt> <dd>\n<p>Bases: <code>matplotlib.tri.trifinder.TriFinder</code></p> <p><a class=\"reference internal\" href=\"#matplotlib.tri.TriFinder\" title=\"matplotlib.tri.TriFinder\"><code>TriFinder</code></a> class implemented using the trapezoid map algorithm from the book “Computational Geometry, Algorithms and Applications”, second edition, by M. de Berg, M. van Kreveld, M. Overmars and O. Schwarzkopf.</p> <p>The triangulation must be valid, i.e. it must not have duplicate points, triangles formed from colinear points, or overlapping triangles. The algorithm has some tolerance to triangles formed from colinear points, but this should not be relied upon.</p> <dl class=\"method\"> <dt id=\"matplotlib.tri.TrapezoidMapTriFinder.__call__\"><code>__call__(x, y)</code></dt> <dd>\n<p>Return an array containing the indices of the triangles in which the specified x,y points lie, or -1 for points that do not lie within a triangle.</p> <p><em>x</em>, <em>y</em> are array_like x and y coordinates of the same shape and any number of dimensions.</p> <p>Returns integer array with the same shape and <em>x</em> and <em>y</em>.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.tri.TriInterpolator\"><code>class matplotlib.tri.TriInterpolator(triangulation, z, trifinder=None)</code></dt> <dd>\n<p>Abstract base class for classes used to perform interpolation on triangular grids.</p> <p>Derived classes implement the following methods:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>__call__(x, y)</code> , where x, y are array_like point coordinates of the same shape, and that returns a masked array of the same shape containing the interpolated z-values.</li> <li>\n<code>gradient(x, y)</code> , where x, y are array_like point coordinates of the same shape, and that returns a list of 2 masked arrays of the same shape containing the 2 derivatives of the interpolator (derivatives of interpolated z values with respect to x and y).</li> </ul> </div>\n</blockquote> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.tri.LinearTriInterpolator\"><code>class matplotlib.tri.LinearTriInterpolator(triangulation, z, trifinder=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.tri.triinterpolate.TriInterpolator</code></p> <p>A LinearTriInterpolator performs linear interpolation on a triangular grid.</p> <p>Each triangle is represented by a plane so that an interpolated value at point (x,y) lies on the plane of the triangle containing (x,y). Interpolated values are therefore continuous across the triangulation, but their first derivatives are discontinuous at edges between triangles.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>triangulation</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> object</p> <blockquote> <div>\n<p>The triangulation to interpolate over.</p> </div>\n</blockquote> <p><strong>z</strong> : array_like of shape (npoints,)</p> <blockquote> <div>\n<p>Array of values, defined at grid points, to interpolate between.</p> </div>\n</blockquote> <p><strong>trifinder</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.TriFinder\" title=\"matplotlib.tri.TriFinder\"><code>TriFinder</code></a> object, optional</p> <blockquote class=\"last\"> <div>\n<p>If this is not specified, the Triangulation’s default TriFinder will be used by calling <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation.get_trifinder\" title=\"matplotlib.tri.Triangulation.get_trifinder\"><code>matplotlib.tri.Triangulation.get_trifinder()</code></a>.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Methods</h4> <table class=\"docutils\"> <colgroup> <col width=\"26%\"> <col width=\"74%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.tri.LinearTriInterpolator.__call__\" title=\"matplotlib.tri.LinearTriInterpolator.__call__\"><code>__call__</code></a> (x, y)</td> <td>( Returns interpolated values at x,y points)</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.tri.LinearTriInterpolator.gradient\" title=\"matplotlib.tri.LinearTriInterpolator.gradient\"><code>gradient</code></a> (x, y)</td> <td>(Returns interpolated derivatives at x,y points)</td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.tri.LinearTriInterpolator.__call__\"><code>__call__(x, y)</code></dt> <dd>\n<p>Returns a masked array containing interpolated values at the specified x,y points.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : array-like</p> <blockquote> <div>\n<p>x and y coordinates of the same shape and any number of dimensions.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>z</strong> : np.ma.array</p> <blockquote class=\"last\"> <div>\n<p>Masked array of the same shape as <em>x</em> and <em>y</em> ; values corresponding to (<em>x</em>, <em>y</em>) points outside of the triangulation are masked out.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.tri.LinearTriInterpolator.gradient\"><code>gradient(x, y)</code></dt> <dd>\n<p>Returns a list of 2 masked arrays containing interpolated derivatives at the specified x,y points.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : array-like</p> <blockquote> <div>\n<p>x and y coordinates of the same shape and any number of dimensions.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>dzdx, dzdy</strong> : np.ma.array</p> <blockquote class=\"last\"> <div>\n<p>2 masked arrays of the same shape as <em>x</em> and <em>y</em> ; values corresponding to (x,y) points outside of the triangulation are masked out. The first returned array contains the values of <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-c05929fd30.png\" style=\"position: relative; bottom: -10px\"> and the second those of <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-99abe4d704.png\" style=\"position: relative; bottom: -13px\">.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.tri.CubicTriInterpolator\"><code>class matplotlib.tri.CubicTriInterpolator(triangulation, z, kind='min_E', trifinder=None, dz=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.tri.triinterpolate.TriInterpolator</code></p> <p>A CubicTriInterpolator performs cubic interpolation on triangular grids.</p> <p>In one-dimension - on a segment - a cubic interpolating function is defined by the values of the function and its derivative at both ends. This is almost the same in 2-d inside a triangle, except that the values of the function and its 2 derivatives have to be defined at each triangle node.</p> <p>The CubicTriInterpolator takes the value of the function at each node - provided by the user - and internally computes the value of the derivatives, resulting in a smooth interpolation. (As a special feature, the user can also impose the value of the derivatives at each node, but this is not supposed to be the common usage.)</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>triangulation</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> object</p> <blockquote> <div>\n<p>The triangulation to interpolate over.</p> </div>\n</blockquote> <p><strong>z</strong> : array_like of shape (npoints,)</p> <blockquote> <div>\n<p>Array of values, defined at grid points, to interpolate between.</p> </div>\n</blockquote> <p><strong>kind</strong> : {‘min_E’, ‘geom’, ‘user’}, optional</p> <blockquote> <div>\n<p>Choice of the smoothing algorithm, in order to compute the interpolant derivatives (defaults to ‘min_E’):</p> <blockquote> <div>\n<ul class=\"simple\"> <li>if ‘min_E’: (default) The derivatives at each node is computed to minimize a bending energy.</li> <li>if ‘geom’: The derivatives at each node is computed as a weighted average of relevant triangle normals. To be used for speed optimization (large grids).</li> <li>if ‘user’: The user provides the argument <code>dz</code>, no computation is hence needed.</li> </ul> </div>\n</blockquote> </div>\n</blockquote> <p><strong>trifinder</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.TriFinder\" title=\"matplotlib.tri.TriFinder\"><code>TriFinder</code></a> object, optional</p> <blockquote> <div>\n<p>If not specified, the Triangulation’s default TriFinder will be used by calling <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation.get_trifinder\" title=\"matplotlib.tri.Triangulation.get_trifinder\"><code>matplotlib.tri.Triangulation.get_trifinder()</code></a>.</p> </div>\n</blockquote> <p><strong>dz</strong> : tuple of array_likes (dzdx, dzdy), optional</p> <blockquote class=\"last\"> <div>\n<p>Used only if <em>kind</em> =’user’. In this case <em>dz</em> must be provided as (dzdx, dzdy) where dzdx, dzdy are arrays of the same shape as <em>z</em> and are the interpolant first derivatives at the <em>triangulation</em> points.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>This note is a bit technical and details the way a <a class=\"reference internal\" href=\"#matplotlib.tri.CubicTriInterpolator\" title=\"matplotlib.tri.CubicTriInterpolator\"><code>CubicTriInterpolator</code></a> computes a cubic interpolation.</p> <p>The interpolation is based on a Clough-Tocher subdivision scheme of the <em>triangulation</em> mesh (to make it clearer, each triangle of the grid will be divided in 3 child-triangles, and on each child triangle the interpolated function is a cubic polynomial of the 2 coordinates). This technique originates from FEM (Finite Element Method) analysis; the element used is a reduced Hsieh-Clough-Tocher (HCT) element. Its shape functions are described in <a class=\"reference internal\" href=\"#r1\" id=\"id1\">[R1]</a>. The assembled function is guaranteed to be C1-smooth, i.e. it is continuous and its first derivatives are also continuous (this is easy to show inside the triangles but is also true when crossing the edges).</p> <p>In the default case (<em>kind</em> =’min_E’), the interpolant minimizes a curvature energy on the functional space generated by the HCT element shape functions - with imposed values but arbitrary derivatives at each node. The minimized functional is the integral of the so-called total curvature (implementation based on an algorithm from <a class=\"reference internal\" href=\"#r2\" id=\"id2\">[R2]</a> - PCG sparse solver):</p> <blockquote> <div><img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-4d96f7ca18.png\" class=\"center\"></div>\n</blockquote> <p>If the case <em>kind</em> =’geom’ is chosen by the user, a simple geometric approximation is used (weighted average of the triangle normal vectors), which could improve speed on very large grids.</p> <h4 class=\"rubric\">References</h4> <table class=\"docutils citation\" frame=\"void\" id=\"r1\" rules=\"none\"> <colgroup>\n<col class=\"label\">\n<col>\n</colgroup> <tbody valign=\"top\"> <tr>\n<td class=\"label\">[R1]</td>\n<td>\n<em>(<a class=\"fn-backref\" href=\"#id1\">1</a>, <a class=\"fn-backref\" href=\"#id3\">2</a>)</em> Michel Bernadou, Kamal Hassan, “Basis functions for general Hsieh-Clough-Tocher triangles, complete or reduced.”, International Journal for Numerical Methods in Engineering, 17(5):784 - 789. 2.01.</td>\n</tr> </tbody> </table> <table class=\"docutils citation\" frame=\"void\" id=\"r2\" rules=\"none\"> <colgroup>\n<col class=\"label\">\n<col>\n</colgroup> <tbody valign=\"top\"> <tr>\n<td class=\"label\">[R2]</td>\n<td>\n<em>(<a class=\"fn-backref\" href=\"#id2\">1</a>, <a class=\"fn-backref\" href=\"#id4\">2</a>)</em> C.T. Kelley, “Iterative Methods for Optimization”.</td>\n</tr> </tbody> </table> <h4 class=\"rubric\">Methods</h4> <table class=\"docutils\"> <colgroup> <col width=\"26%\"> <col width=\"74%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.tri.CubicTriInterpolator.__call__\" title=\"matplotlib.tri.CubicTriInterpolator.__call__\"><code>__call__</code></a> (x, y)</td> <td>( Returns interpolated values at x,y points)</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.tri.CubicTriInterpolator.gradient\" title=\"matplotlib.tri.CubicTriInterpolator.gradient\"><code>gradient</code></a> (x, y)</td> <td>(Returns interpolated derivatives at x,y points)</td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.tri.CubicTriInterpolator.__call__\"><code>__call__(x, y)</code></dt> <dd>\n<p>Returns a masked array containing interpolated values at the specified x,y points.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : array-like</p> <blockquote> <div>\n<p>x and y coordinates of the same shape and any number of dimensions.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>z</strong> : np.ma.array</p> <blockquote class=\"last\"> <div>\n<p>Masked array of the same shape as <em>x</em> and <em>y</em> ; values corresponding to (<em>x</em>, <em>y</em>) points outside of the triangulation are masked out.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.tri.CubicTriInterpolator.gradient\"><code>gradient(x, y)</code></dt> <dd>\n<p>Returns a list of 2 masked arrays containing interpolated derivatives at the specified x,y points.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : array-like</p> <blockquote> <div>\n<p>x and y coordinates of the same shape and any number of dimensions.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>dzdx, dzdy</strong> : np.ma.array</p> <blockquote class=\"last\"> <div>\n<p>2 masked arrays of the same shape as <em>x</em> and <em>y</em> ; values corresponding to (x,y) points outside of the triangulation are masked out. The first returned array contains the values of <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-c05929fd30.png\" style=\"position: relative; bottom: -10px\"> and the second those of <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-99abe4d704.png\" style=\"position: relative; bottom: -13px\">.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>An example of effective application is shown below (plot of the direction of the vector field derivated from a known potential field):</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/trigradient_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/trigradient_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/trigradient_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/trigradient_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/trigradient_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/trigradient_demo.png\"> </div> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.tri.TriRefiner\"><code>class matplotlib.tri.TriRefiner(triangulation)</code></dt> <dd>\n<p>Abstract base class for classes implementing mesh refinement.</p> <p>A TriRefiner encapsulates a Triangulation object and provides tools for mesh refinement and interpolation.</p> <p>Derived classes must implements:</p> <blockquote> <div>\n<ul> <li>\n<p class=\"first\"><code>refine_triangulation(return_tri_index=False, **kwargs)</code> , where the optional keyword arguments <em>kwargs</em> are defined in each TriRefiner concrete implementation, and which returns :</p> <blockquote> <div>\n<ul class=\"simple\"> <li>a refined triangulation</li> <li>optionally (depending on <em>return_tri_index</em>), for each point of the refined triangulation: the index of the initial triangulation triangle to which it belongs.</li> </ul> </div>\n</blockquote> </li> <li>\n<p class=\"first\"><code>refine_field(z, triinterpolator=None, **kwargs)</code> , where:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>z</em> array of field values (to refine) defined at the base triangulation nodes</li> <li>\n<em>triinterpolator</em> is a <a class=\"reference internal\" href=\"#matplotlib.tri.TriInterpolator\" title=\"matplotlib.tri.TriInterpolator\"><code>TriInterpolator</code></a> (optional)</li> <li>the other optional keyword arguments <em>kwargs</em> are defined in each TriRefiner concrete implementation</li> </ul> </div>\n</blockquote> <p>and which returns (as a tuple) a refined triangular mesh and the interpolated values of the field at the refined triangulation nodes.</p> </li> </ul> </div>\n</blockquote> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.tri.UniformTriRefiner\"><code>class matplotlib.tri.UniformTriRefiner(triangulation)</code></dt> <dd>\n<p>Bases: <code>matplotlib.tri.trirefine.TriRefiner</code></p> <p>Uniform mesh refinement by recursive subdivisions.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>triangulation</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a></p> <blockquote class=\"last\"> <div>\n<p>The encapsulated triangulation (to be refined)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.tri.UniformTriRefiner.refine_field\"><code>refine_field(z, triinterpolator=None, subdiv=3)</code></dt> <dd>\n<p>Refines a field defined on the encapsulated triangulation.</p> <p>Returns <em>refi_tri</em> (refined triangulation), <em>refi_z</em> (interpolated values of the field at the node of the refined triangulation).</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>z</strong> : 1d-array-like of length <code>n_points</code></p> <blockquote> <div>\n<p>Values of the field to refine, defined at the nodes of the encapsulated triangulation. (<code>n_points</code> is the number of points in the initial triangulation)</p> </div>\n</blockquote> <p><strong>triinterpolator</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.TriInterpolator\" title=\"matplotlib.tri.TriInterpolator\"><code>TriInterpolator</code></a>, optional</p> <blockquote> <div>\n<p>Interpolator used for field interpolation. If not specified, a <a class=\"reference internal\" href=\"#matplotlib.tri.CubicTriInterpolator\" title=\"matplotlib.tri.CubicTriInterpolator\"><code>CubicTriInterpolator</code></a> will be used.</p> </div>\n</blockquote> <p><strong>subdiv</strong> : integer, optional</p> <blockquote> <div>\n<p>Recursion level for the subdivision. Defaults to 3. Each triangle will be divided into <code>4**subdiv</code> child triangles.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>refi_tri</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> object</p> <blockquote> <div>\n<p>The returned refined triangulation</p> </div>\n</blockquote> <p><strong>refi_z</strong> : 1d array of length: <em>refi_tri</em> node count.</p> <blockquote class=\"last\"> <div>\n<p>The returned interpolated field (at <em>refi_tri</em> nodes)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>The main application of this method is to plot high-quality iso-contours on a coarse triangular grid (e.g., triangulation built from relatively sparse test data):</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_smooth_user.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_smooth_user.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_smooth_user.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_smooth_user.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/tricontour_smooth_user.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_smooth_user.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.tri.UniformTriRefiner.refine_triangulation\"><code>refine_triangulation(return_tri_index=False, subdiv=3)</code></dt> <dd>\n<p>Computes an uniformly refined triangulation <em>refi_triangulation</em> of the encapsulated <code>triangulation</code>.</p> <p>This function refines the encapsulated triangulation by splitting each father triangle into 4 child sub-triangles built on the edges midside nodes, recursively (level of recursion <em>subdiv</em>). In the end, each triangle is hence divided into <code>4**subdiv</code> child triangles. The default value for <em>subdiv</em> is 3 resulting in 64 refined subtriangles for each triangle of the initial triangulation.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>return_tri_index</strong> : boolean, optional</p> <blockquote> <div>\n<p>Boolean indicating whether an index table indicating the father triangle index of each point will be returned. Default value False.</p> </div>\n</blockquote> <p><strong>subdiv</strong> : integer, optional</p> <blockquote> <div>\n<p>Recursion level for the subdivision. Defaults value 3. Each triangle will be divided into <code>4**subdiv</code> child triangles.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>refi_triangulation</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a></p> <blockquote> <div>\n<p>The returned refined triangulation</p> </div>\n</blockquote> <p><strong>found_index</strong> : array-like of integers</p> <blockquote class=\"last\"> <div>\n<p>Index of the initial triangulation containing triangle, for each point of <em>refi_triangulation</em>. Returned only if <em>return_tri_index</em> is set to True.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.tri.TriAnalyzer\"><code>class matplotlib.tri.TriAnalyzer(triangulation)</code></dt> <dd>\n<p>Define basic tools for triangular mesh analysis and improvement.</p> <p>A TriAnalizer encapsulates a <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> object and provides basic tools for mesh analysis and mesh improvement.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>triangulation</strong> : <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> object</p> <blockquote class=\"last\"> <div>\n<p>The encapsulated triangulation to analyze.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Attributes</h4> <table class=\"docutils\"> <colgroup> <col width=\"60%\"> <col width=\"40%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.tri.TriAnalyzer.scale_factors\" title=\"matplotlib.tri.TriAnalyzer.scale_factors\"><code>scale_factors</code></a></td> <td> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.tri.TriAnalyzer.circle_ratios\"><code>circle_ratios(rescale=True)</code></dt> <dd>\n<p>Returns a measure of the triangulation triangles flatness.</p> <p>The ratio of the incircle radius over the circumcircle radius is a widely used indicator of a triangle flatness. It is always <code>&lt;= 0.5</code> and <code>== 0.5</code> only for equilateral triangles. Circle ratios below 0.01 denote very flat triangles.</p> <p>To avoid unduly low values due to a difference of scale between the 2 axis, the triangular mesh can first be rescaled to fit inside a unit square with <a class=\"reference internal\" href=\"#matplotlib.tri.TriAnalyzer.scale_factors\" title=\"matplotlib.tri.TriAnalyzer.scale_factors\"><code>scale_factors</code></a> (Only if <em>rescale</em> is True, which is its default value).</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>rescale</strong> : boolean, optional</p> <blockquote> <div>\n<p>If True, a rescaling will be internally performed (based on <a class=\"reference internal\" href=\"#matplotlib.tri.TriAnalyzer.scale_factors\" title=\"matplotlib.tri.TriAnalyzer.scale_factors\"><code>scale_factors</code></a>, so that the (unmasked) triangles fit exactly inside a unit square mesh. Default is True.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>circle_ratios</strong> : masked array</p> <blockquote class=\"last\"> <div>\n<p>Ratio of the incircle radius over the circumcircle radius, for each ‘rescaled’ triangle of the encapsulated triangulation. Values corresponding to masked triangles are masked out.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.tri.TriAnalyzer.get_flat_tri_mask\"><code>get_flat_tri_mask(min_circle_ratio=0.01, rescale=True)</code></dt> <dd>\n<p>Eliminates excessively flat border triangles from the triangulation.</p> <p>Returns a mask <em>new_mask</em> which allows to clean the encapsulated triangulation from its border-located flat triangles (according to their <a class=\"reference internal\" href=\"#matplotlib.tri.TriAnalyzer.circle_ratios\" title=\"matplotlib.tri.TriAnalyzer.circle_ratios\"><code>circle_ratios()</code></a>). This mask is meant to be subsequently applied to the triangulation using <a class=\"reference internal\" href=\"#matplotlib.tri.Triangulation.set_mask\" title=\"matplotlib.tri.Triangulation.set_mask\"><code>matplotlib.tri.Triangulation.set_mask()</code></a> . <em>new_mask</em> is an extension of the initial triangulation mask in the sense that an initially masked triangle will remain masked.</p> <p>The <em>new_mask</em> array is computed recursively ; at each step flat triangles are removed only if they share a side with the current mesh border. Thus no new holes in the triangulated domain will be created.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>min_circle_ratio</strong> : float, optional</p> <blockquote> <div>\n<p>Border triangles with incircle/circumcircle radii ratio r/R will be removed if r/R &lt; <em>min_circle_ratio</em>. Default value: 0.01</p> </div>\n</blockquote> <p><strong>rescale</strong> : boolean, optional</p> <blockquote> <div>\n<p>If True, a rescaling will first be internally performed (based on <a class=\"reference internal\" href=\"#matplotlib.tri.TriAnalyzer.scale_factors\" title=\"matplotlib.tri.TriAnalyzer.scale_factors\"><code>scale_factors</code></a> ), so that the (unmasked) triangles fit exactly inside a unit square mesh. This rescaling accounts for the difference of scale which might exist between the 2 axis. Default (and recommended) value is True.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>new_mask</strong> : array-like of booleans</p> <blockquote class=\"last\"> <div>\n<p>Mask to apply to encapsulated triangulation. All the initially masked triangles remain masked in the <em>new_mask</em>.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>The rationale behind this function is that a Delaunay triangulation - of an unstructured set of points - sometimes contains almost flat triangles at its border, leading to artifacts in plots (especially for high-resolution contouring). Masked with computed <em>new_mask</em>, the encapsulated triangulation would contain no more unmasked border triangles with a circle ratio below <em>min_circle_ratio</em>, thus improving the mesh quality for subsequent plots or interpolation.</p> <h4 class=\"rubric\">Examples</h4> <p>Please refer to the following illustrating example:</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_smooth_delaunay.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_smooth_delaunay.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_smooth_delaunay.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_smooth_delaunay.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/tricontour_smooth_delaunay.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_smooth_delaunay.png\"> </div> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.tri.TriAnalyzer.scale_factors\"><code>scale_factors</code></dt> <dd>\n<p>Factors to rescale the triangulation into a unit square.</p> <p>Returns <em>k</em>, tuple of 2 scale factors.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>k</strong> : tuple of 2 floats (kx, ky)</p> <blockquote class=\"last\"> <div>\n<p>Tuple of floats that would rescale the triangulation : <code>[triangulation.x * kx, triangulation.y * ky]</code> fits exactly inside a unit square.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/tri_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/tri_api.html</a>\n  </p>\n</div>\n","backend_managers_api":"<h1 id=\"matplotlib-backend-managers\">matplotlib.backend_managers</h1> <dl class=\"docutils\" id=\"module-matplotlib.backend_managers\"> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_managers.ToolManager\" title=\"matplotlib.backend_managers.ToolManager\"><code>ToolManager</code></a></dt> <dd>Class that makes the bridge between user interaction (key press, toolbar clicks, ..) and the actions in response to the user inputs.</dd> </dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_managers.ToolEvent\"><code>class matplotlib.backend_managers.ToolEvent(name, sender, tool, data=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Event for tool manipulation (add/remove)</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_managers.ToolManager\"><code>class matplotlib.backend_managers.ToolManager(canvas)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Helper class that groups all the user interactions for a FigureManager</p> <h4 class=\"rubric\">Attributes</h4> <table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>manager: <code>FigureManager</code>\n</td> <td> </td> </tr> <tr class=\"row-even\">\n<td>keypresslock: <code>widgets.LockDraw</code>\n</td> <td>\n<code>LockDraw</code> object to know if the <code>canvas</code> key_press_event is locked</td> </tr> <tr class=\"row-odd\">\n<td>messagelock: <code>widgets.LockDraw</code>\n</td> <td>\n<code>LockDraw</code> object to know if the message is available to write</td> </tr> </tbody> </table> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_managers.ToolManager.active_toggle\"><code>active_toggle</code></dt> <dd>\n<p>Currently toggled tools</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.add_tool\"><code>add_tool(name, tool, *args, **kwargs)</code></dt> <dd>\n<p>Add <em>tool</em> to <a class=\"reference internal\" href=\"#matplotlib.backend_managers.ToolManager\" title=\"matplotlib.backend_managers.ToolManager\"><code>ToolManager</code></a></p> <p>If successful adds a new event <code>tool_trigger_name</code> where <strong>name</strong> is the <strong>name</strong> of the tool, this event is fired everytime the tool is triggered.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : str</p> <blockquote> <div>\n<p>Name of the tool, treated as the ID, has to be unique</p> </div>\n</blockquote> <p><strong>tool</strong> : class_like, i.e. str or type</p> <blockquote class=\"last\"> <div>\n<p>Reference to find the class of the Tool to added.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"backend_tools_api#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></dt> <dd>The base class for tools.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>args and kwargs get passed directly to the tools constructor.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.get_tool\"><code>get_tool(name, warn=True)</code></dt> <dd>\n<p>Return the tool object, also accepts the actual tool for convenience</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : str, ToolBase</p> <blockquote> <div>\n<p>Name of the tool, or the tool itself</p> </div>\n</blockquote> <p><strong>warn</strong> : bool, optional</p> <blockquote class=\"last\"> <div>\n<p>If this method should give warnings.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.get_tool_keymap\"><code>get_tool_keymap(name)</code></dt> <dd>\n<p>Get the keymap associated with the specified tool</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : string</p> <blockquote> <div>\n<p>Name of the Tool</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>list</strong> : list of keys associated with the Tool</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.message_event\"><code>message_event(message, sender=None)</code></dt> <dd>\n<p>Emit a <a class=\"reference internal\" href=\"#matplotlib.backend_managers.ToolManagerMessageEvent\" title=\"matplotlib.backend_managers.ToolManagerMessageEvent\"><code>ToolManagerMessageEvent</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.remove_tool\"><code>remove_tool(name)</code></dt> <dd>\n<p>Remove tool from <a class=\"reference internal\" href=\"#matplotlib.backend_managers.ToolManager\" title=\"matplotlib.backend_managers.ToolManager\"><code>ToolManager</code></a></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : string</p> <blockquote class=\"last\"> <div>\n<p>Name of the Tool</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.toolmanager_connect\"><code>toolmanager_connect(s, func)</code></dt> <dd>\n<p>Connect event with string <em>s</em> to <em>func</em>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>s</strong> : String</p> <blockquote> <div>\n<p>Name of the event</p> <p>The following events are recognized</p> <ul class=\"simple\"> <li>‘tool_message_event’</li> <li>‘tool_removed_event’</li> <li>‘tool_added_event’</li> </ul> <p>For every tool added a new event is created</p> <ul class=\"simple\"> <li>‘tool_trigger_TOOLNAME` Where TOOLNAME is the id of the tool.</li> </ul> </div>\n</blockquote> <p><strong>func</strong> : function</p> <blockquote class=\"last\"> <div>\n<p>Function to be called with signature def func(event)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.toolmanager_disconnect\"><code>toolmanager_disconnect(cid)</code></dt> <dd>\n<p>Disconnect callback id <em>cid</em></p> <p>Example usage:</p> <pre data-language=\"python\">cid = toolmanager.toolmanager_connect('tool_trigger_zoom',\n                                      on_press)\n#...later\ntoolmanager.toolmanager_disconnect(cid)\n</pre> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_managers.ToolManager.tools\"><code>tools</code></dt> <dd>\n<p>Return the tools controlled by <a class=\"reference internal\" href=\"#matplotlib.backend_managers.ToolManager\" title=\"matplotlib.backend_managers.ToolManager\"><code>ToolManager</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.trigger_tool\"><code>trigger_tool(name, sender=None, canvasevent=None, data=None)</code></dt> <dd>\n<p>Trigger a tool and emit the tool_trigger_[name] event</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : string</p> <blockquote> <div>\n<p>Name of the tool</p> </div>\n</blockquote> <p><strong>sender: object</strong></p> <blockquote> <div>\n<p>Object that wishes to trigger the tool</p> </div>\n</blockquote> <p><strong>canvasevent</strong> : Event</p> <blockquote> <div>\n<p>Original Canvas event or None</p> </div>\n</blockquote> <p><strong>data</strong> : Object</p> <blockquote class=\"last\"> <div>\n<p>Extra data to pass to the tool when triggering</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_managers.ToolManager.update_keymap\"><code>update_keymap(name, *keys)</code></dt> <dd>\n<p>Set the keymap to associate with the specified tool</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : string</p> <blockquote> <div>\n<p>Name of the Tool</p> </div>\n</blockquote> <p class=\"last\"><strong>keys</strong> : keys to associate with the Tool</p> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_managers.ToolManagerMessageEvent\"><code>class matplotlib.backend_managers.ToolManagerMessageEvent(name, sender, message)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Event carrying messages from toolmanager</p> <p>Messages usually get displayed to the user by the toolbar</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_managers.ToolTriggerEvent\"><code>class matplotlib.backend_managers.ToolTriggerEvent(name, sender, tool, canvasevent=None, data=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_managers.ToolEvent\" title=\"matplotlib.backend_managers.ToolEvent\"><code>matplotlib.backend_managers.ToolEvent</code></a></p> <p>Event to inform that a tool has been triggered</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/backend_managers_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/backend_managers_api.html</a>\n  </p>\n</div>\n","mathtext_api":"<h1 id=\"mathtext\">mathtext</h1> <p class=\"graphviz\"> <img src=\"http://matplotlib.org/1.5.1/_images/inheritance-4480fa1bc75625ab7e4e7a72e4f5560f0ea705e2.png\" alt=\"Inheritance diagram of matplotlib.mathtext\" usemap=\"#inheritance0ca9968ee0\" class=\"inheritance\"> <map id=\"inheritance0ca9968ee0\" name=\"inheritance0ca9968ee0\"> <area shape=\"rect\" id=\"node1\" href=\"#matplotlib.mathtext.Accent\" target=\"_top\" title=\"The font metrics need to be dealt with differently for accents,\" alt=\"\" coords=\"391,363,453,385\"> <area shape=\"rect\" id=\"node2\" href=\"#matplotlib.mathtext.Char\" target=\"_top\" title=\"Represents a single character.  Unlike TeX, the font information\" alt=\"\" coords=\"202,406,263,427\"> <area shape=\"rect\" id=\"node3\" href=\"#matplotlib.mathtext.AutoHeightChar\" target=\"_top\" title=\":class:`AutoHeightChar` will create a character as close to the\" alt=\"\" coords=\"654,321,761,343\"> <area shape=\"rect\" id=\"node4\" href=\"#matplotlib.mathtext.Hlist\" target=\"_top\" title=\"A horizontal list of boxes.\" alt=\"\" coords=\"545,406,606,427\"> <area shape=\"rect\" id=\"node5\" href=\"#matplotlib.mathtext.AutoWidthChar\" target=\"_top\" title=\":class:`AutoWidthChar` will create a character as close to the\" alt=\"\" coords=\"657,363,758,385\"> <area shape=\"rect\" id=\"node16\" href=\"#matplotlib.mathtext.HCentered\" target=\"_top\" title=\"A convenience class to create an :class:`Hlist` whose contents are\" alt=\"\" coords=\"669,406,746,427\"> <area shape=\"rect\" id=\"node42\" href=\"#matplotlib.mathtext.SubSuperCluster\" target=\"_top\" title=\":class:`SubSuperCluster` is a sort of hack to get around that fact\" alt=\"\" coords=\"651,448,763,470\"> <area shape=\"rect\" id=\"node43\" href=\"#matplotlib.mathtext.VCentered\" target=\"_top\" title=\"A convenience class to create a :class:`Vlist` whose contents are\" alt=\"\" coords=\"669,490,746,512\"> <area shape=\"rect\" id=\"node6\" href=\"#matplotlib.mathtext.BakomaFonts\" target=\"_top\" title=\"Use the Bakoma TrueType fonts for rendering.\" alt=\"\" coords=\"375,237,470,258\"> <area shape=\"rect\" id=\"node7\" href=\"#matplotlib.mathtext.TruetypeFonts\" target=\"_top\" title=\"A generic base class for all font setups that use Truetype fonts\" alt=\"\" coords=\"185,258,280,280\"> <area shape=\"rect\" id=\"node40\" href=\"#matplotlib.mathtext.UnicodeFonts\" target=\"_top\" title=\"An abstract base class for handling Unicode fonts.\" alt=\"\" coords=\"375,279,469,301\"> <area shape=\"rect\" id=\"node8\" href=\"#matplotlib.mathtext.Box\" target=\"_top\" title=\"Represents any node with a physical location.\" alt=\"\" coords=\"202,490,263,512\"> <area shape=\"rect\" id=\"node17\" href=\"#matplotlib.mathtext.Hbox\" target=\"_top\" title=\"A box with only width (zero height and depth).\" alt=\"\" coords=\"391,406,453,427\"> <area shape=\"rect\" id=\"node18\" href=\"#matplotlib.mathtext.List\" target=\"_top\" title=\"A list of nodes (either horizontal or vertical).\" alt=\"\" coords=\"391,448,453,470\"> <area shape=\"rect\" id=\"node20\" href=\"#matplotlib.mathtext.Rule\" target=\"_top\" title=\"A :class:`Rule` node stands for a solid black rectangle; it has\" alt=\"\" coords=\"391,490,453,512\"> <area shape=\"rect\" id=\"node44\" href=\"#matplotlib.mathtext.Vbox\" target=\"_top\" title=\"A box with only height (zero width).\" alt=\"\" coords=\"391,533,453,554\"> <area shape=\"rect\" id=\"node9\" href=\"#matplotlib.mathtext.Node\" target=\"_top\" title=\"A node in the TeX box model\" alt=\"\" coords=\"31,575,93,597\"> <area shape=\"rect\" id=\"node11\" href=\"#matplotlib.mathtext.Glue\" target=\"_top\" title=\"Most of the information in this object is stored in the underlying\" alt=\"\" coords=\"202,659,263,681\"> <area shape=\"rect\" id=\"node21\" href=\"#matplotlib.mathtext.Kern\" target=\"_top\" title=\"A :class:`Kern` node has a width field to specify a (normally\" alt=\"\" coords=\"202,702,263,723\"> <area shape=\"rect\" id=\"node10\" href=\"#matplotlib.mathtext.Fil\" target=\"_top\" title=\"Fil\" alt=\"\" coords=\"391,575,453,597\"> <area shape=\"rect\" id=\"node12\" href=\"#matplotlib.mathtext.Fill\" target=\"_top\" title=\"Fill\" alt=\"\" coords=\"391,617,453,639\"> <area shape=\"rect\" id=\"node13\" href=\"#matplotlib.mathtext.Filll\" target=\"_top\" title=\"Filll\" alt=\"\" coords=\"391,659,453,681\"> <area shape=\"rect\" id=\"node32\" href=\"#matplotlib.mathtext.NegFil\" target=\"_top\" title=\"NegFil\" alt=\"\" coords=\"391,702,453,723\"> <area shape=\"rect\" id=\"node33\" href=\"#matplotlib.mathtext.NegFill\" target=\"_top\" title=\"NegFill\" alt=\"\" coords=\"391,744,453,766\"> <area shape=\"rect\" id=\"node34\" href=\"#matplotlib.mathtext.NegFilll\" target=\"_top\" title=\"NegFilll\" alt=\"\" coords=\"391,786,453,808\"> <area shape=\"rect\" id=\"node37\" href=\"#matplotlib.mathtext.SsGlue\" target=\"_top\" title=\"SsGlue\" alt=\"\" coords=\"391,829,453,850\"> <area shape=\"rect\" id=\"node14\" href=\"#matplotlib.mathtext.Fonts\" target=\"_top\" title=\"An abstract base class for a system of fonts to use for mathtext.\" alt=\"\" coords=\"31,290,93,312\"> <area shape=\"rect\" id=\"node38\" href=\"#matplotlib.mathtext.StandardPsFonts\" target=\"_top\" title=\"Use the standard postscript fonts for rendering to backend_ps\" alt=\"\" coords=\"177,301,289,322\"> <area shape=\"rect\" id=\"node15\" href=\"#matplotlib.mathtext.GlueSpec\" target=\"_top\" title=\"See :class:`Glue`.\" alt=\"\" coords=\"27,238,98,259\"> <area shape=\"rect\" id=\"node45\" href=\"#matplotlib.mathtext.Vlist\" target=\"_top\" title=\"A vertical list of boxes.\" alt=\"\" coords=\"545,448,606,470\"> <area shape=\"rect\" id=\"node19\" href=\"#matplotlib.mathtext.Hrule\" target=\"_top\" title=\"Convenience class to create a horizontal rule.\" alt=\"\" coords=\"545,490,606,512\"> <area shape=\"rect\" id=\"node46\" href=\"#matplotlib.mathtext.Vrule\" target=\"_top\" title=\"Convenience class to create a vertical rule.\" alt=\"\" coords=\"545,533,606,554\"> <area shape=\"rect\" id=\"node22\" href=\"#matplotlib.mathtext.MathTextParser\" target=\"_top\" title=\"MathTextParser\" alt=\"\" coords=\"11,195,113,217\"> <area shape=\"rect\" id=\"node23\" href=\"#matplotlib.mathtext.MathTextWarning\" target=\"_top\" title=\"MathTextWarning\" alt=\"\" coords=\"7,153,118,175\"> <area shape=\"rect\" id=\"node24\" href=\"#matplotlib.mathtext.MathtextBackend\" target=\"_top\" title=\"The base class for the mathtext backend-specific code.  The\" alt=\"\" coords=\"5,111,120,133\"> <area shape=\"rect\" id=\"node25\" href=\"#matplotlib.mathtext.MathtextBackendAgg\" target=\"_top\" title=\"Render glyphs and rectangles to an FTImage buffer, which is later\" alt=\"\" coords=\"165,5,301,26\"> <area shape=\"rect\" id=\"node27\" href=\"#matplotlib.mathtext.MathtextBackendCairo\" target=\"_top\" title=\"Store information to write a mathtext rendering to the Cairo\" alt=\"\" coords=\"161,47,304,69\"> <area shape=\"rect\" id=\"node28\" href=\"#matplotlib.mathtext.MathtextBackendPath\" target=\"_top\" title=\"Store information to write a mathtext rendering to the text path\" alt=\"\" coords=\"163,89,302,111\"> <area shape=\"rect\" id=\"node29\" href=\"#matplotlib.mathtext.MathtextBackendPdf\" target=\"_top\" title=\"Store information to write a mathtext rendering to the PDF\" alt=\"\" coords=\"166,131,299,153\"> <area shape=\"rect\" id=\"node30\" href=\"#matplotlib.mathtext.MathtextBackendPs\" target=\"_top\" title=\"Store information to write a mathtext rendering to the PostScript\" alt=\"\" coords=\"169,174,297,195\"> <area shape=\"rect\" id=\"node31\" href=\"#matplotlib.mathtext.MathtextBackendSvg\" target=\"_top\" title=\"Store information to write a mathtext rendering to the SVG\" alt=\"\" coords=\"165,216,301,238\"> <area shape=\"rect\" id=\"node26\" href=\"#matplotlib.mathtext.MathtextBackendBitmap\" target=\"_top\" title=\"MathtextBackendBitmap\" alt=\"\" coords=\"345,5,499,26\"> <area shape=\"rect\" id=\"node35\" href=\"#matplotlib.mathtext.Parser\" target=\"_top\" title=\"This is the pyparsing-based parser for math expressions.  It\" alt=\"\" coords=\"31,69,93,90\"> <area shape=\"rect\" id=\"node36\" href=\"#matplotlib.mathtext.Ship\" target=\"_top\" title=\"Once the boxes have been set up, this sends them to output.  Since\" alt=\"\" coords=\"31,26,93,48\"> <area shape=\"rect\" id=\"node39\" href=\"#matplotlib.mathtext.StixFonts\" target=\"_top\" title=\"A font handling class for the STIX fonts.\" alt=\"\" coords=\"541,279,610,301\"> <area shape=\"rect\" id=\"node41\" href=\"#matplotlib.mathtext.StixSansFonts\" target=\"_top\" title=\"A font handling class for the STIX fonts (that uses sans-serif\" alt=\"\" coords=\"659,279,756,301\"> </map> </p>  <h2 id=\"matplotlib-mathtext\">matplotlib.mathtext</h2> <p id=\"module-matplotlib.mathtext\"><a class=\"reference internal\" href=\"#module-matplotlib.mathtext\" title=\"matplotlib.mathtext\"><code>mathtext</code></a> is a module for parsing a subset of the TeX math syntax and drawing them to a matplotlib backend.</p> <p>For a tutorial of its usage see <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/mathtext.html#mathtext-tutorial\"><span>Writing mathematical expressions</span></a>. This document is primarily concerned with implementation details.</p> <p>The module uses <a class=\"reference external\" href=\"http://pyparsing.wikispaces.com/\">pyparsing</a> to parse the TeX expression.</p> <p>The Bakoma distribution of the TeX Computer Modern fonts, and STIX fonts are supported. There is experimental support for using arbitrary fonts, but results may vary without proper tweaking and metrics for those fonts.</p> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Accent\"><code>class matplotlib.mathtext.Accent(c, state)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Char\" title=\"matplotlib.mathtext.Char\"><code>matplotlib.mathtext.Char</code></a></p> <p>The font metrics need to be dealt with differently for accents, since they are already offset correctly from the baseline in TrueType fonts.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Accent.grow\"><code>grow()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Accent.render\"><code>render(x, y)</code></dt> <dd>\n<p>Render the character to the canvas.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Accent.shrink\"><code>shrink()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.AutoHeightChar\"><code>class matplotlib.mathtext.AutoHeightChar(c, height, depth, state, always=False, factor=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>matplotlib.mathtext.Hlist</code></a></p> <p><a class=\"reference internal\" href=\"#matplotlib.mathtext.AutoHeightChar\" title=\"matplotlib.mathtext.AutoHeightChar\"><code>AutoHeightChar</code></a> will create a character as close to the given height and depth as possible. When using a font with multiple height versions of some characters (such as the BaKoMa fonts), the correct glyph will be selected, otherwise this will always just return a scaled version of the glyph.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.AutoWidthChar\"><code>class matplotlib.mathtext.AutoWidthChar(c, width, state, always=False, char_class=<class>)</class></code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>matplotlib.mathtext.Hlist</code></a></p> <p><a class=\"reference internal\" href=\"#matplotlib.mathtext.AutoWidthChar\" title=\"matplotlib.mathtext.AutoWidthChar\"><code>AutoWidthChar</code></a> will create a character as close to the given width as possible. When using a font with multiple width versions of some characters (such as the BaKoMa fonts), the correct glyph will be selected, otherwise this will always just return a scaled version of the glyph.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.BakomaFonts\"><code>class matplotlib.mathtext.BakomaFonts(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.TruetypeFonts\" title=\"matplotlib.mathtext.TruetypeFonts\"><code>matplotlib.mathtext.TruetypeFonts</code></a></p> <p>Use the Bakoma TrueType fonts for rendering.</p> <p>Symbols are strewn about a number of font files, each of which has its own proprietary 8-bit encoding.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.BakomaFonts.alias\"><code>alias = '\\\\]'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.BakomaFonts.get_sized_alternatives_for_symbol\"><code>get_sized_alternatives_for_symbol(fontname, sym)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.BakomaFonts.target\"><code>target = ']'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Box\"><code>class matplotlib.mathtext.Box(width, height, depth)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Node\" title=\"matplotlib.mathtext.Node\"><code>matplotlib.mathtext.Node</code></a></p> <p>Represents any node with a physical location.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Box.grow\"><code>grow()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Box.render\"><code>render(x1, y1, x2, y2)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Box.shrink\"><code>shrink()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Char\"><code>class matplotlib.mathtext.Char(c, state)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Node\" title=\"matplotlib.mathtext.Node\"><code>matplotlib.mathtext.Node</code></a></p> <p>Represents a single character. Unlike TeX, the font information and metrics are stored with each <a class=\"reference internal\" href=\"#matplotlib.mathtext.Char\" title=\"matplotlib.mathtext.Char\"><code>Char</code></a> to make it easier to lookup the font metrics when needed. Note that TeX boxes have a width, height, and depth, unlike Type1 and Truetype which use a full bounding box and an advance in the x-direction. The metrics must be converted to the TeX way, and the advance (if different from width) must be converted into a <a class=\"reference internal\" href=\"#matplotlib.mathtext.Kern\" title=\"matplotlib.mathtext.Kern\"><code>Kern</code></a> node when the <a class=\"reference internal\" href=\"#matplotlib.mathtext.Char\" title=\"matplotlib.mathtext.Char\"><code>Char</code></a> is added to its parent <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>Hlist</code></a>.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Char.get_kerning\"><code>get_kerning(next)</code></dt> <dd>\n<p>Return the amount of kerning between this and the given character. Called when characters are strung together into <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>Hlist</code></a> to create <a class=\"reference internal\" href=\"#matplotlib.mathtext.Kern\" title=\"matplotlib.mathtext.Kern\"><code>Kern</code></a> nodes.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Char.grow\"><code>grow()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Char.is_slanted\"><code>is_slanted()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Char.render\"><code>render(x, y)</code></dt> <dd>\n<p>Render the character to the canvas</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Char.shrink\"><code>shrink()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mathtext.Error\"><code>matplotlib.mathtext.Error(msg)</code></dt> <dd>\n<p>Helper class to raise parser errors.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Fil\"><code>class matplotlib.mathtext.Fil</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Glue\" title=\"matplotlib.mathtext.Glue\"><code>matplotlib.mathtext.Glue</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Fill\"><code>class matplotlib.mathtext.Fill</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Glue\" title=\"matplotlib.mathtext.Glue\"><code>matplotlib.mathtext.Glue</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Filll\"><code>class matplotlib.mathtext.Filll</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Glue\" title=\"matplotlib.mathtext.Glue\"><code>matplotlib.mathtext.Glue</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Fonts\"><code>class matplotlib.mathtext.Fonts(default_font_prop, mathtext_backend)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>An abstract base class for a system of fonts to use for mathtext.</p> <p>The class must be able to take symbol keys and font file names and return the character metrics. It also delegates to a backend class to do the actual drawing.</p> <p><em>default_font_prop</em>: A <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>FontProperties</code></a> object to use for the default non-math font, or the base font for Unicode (generic) font rendering.</p> <p><em>mathtext_backend</em>: A subclass of <code>MathTextBackend</code> used to delegate the actual rendering.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.destroy\"><code>destroy()</code></dt> <dd>\n<p>Fix any cyclical references before the object is about to be destroyed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.get_kern\"><code>get_kern(font1, fontclass1, sym1, fontsize1, font2, fontclass2, sym2, fontsize2, dpi)</code></dt> <dd>\n<p>Get the kerning distance for font between <em>sym1</em> and <em>sym2</em>.</p> <p><em>fontX</em>: one of the TeX font names:</p> <pre data-language=\"python\">tt, it, rm, cal, sf, bf or default/regular (non-math)\n</pre> <p><em>fontclassX</em>: TODO</p> <p><em>symX</em>: a symbol in raw TeX form. e.g., ‘1’, ‘x’ or ‘sigma’</p> <p><em>fontsizeX</em>: the fontsize in points</p> <p><em>dpi</em>: the current dots-per-inch</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.get_metrics\"><code>get_metrics(font, font_class, sym, fontsize, dpi)</code></dt> <dd>\n<p><em>font</em>: one of the TeX font names:</p> <pre data-language=\"python\">tt, it, rm, cal, sf, bf or default/regular (non-math)\n</pre> <p><em>font_class</em>: TODO</p> <p><em>sym</em>: a symbol in raw TeX form. e.g., ‘1’, ‘x’ or ‘sigma’</p> <p><em>fontsize</em>: font size in points</p> <p><em>dpi</em>: current dots-per-inch</p> <p>Returns an object with the following attributes:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>advance</em>: The advance distance (in points) of the glyph.</li> <li>\n<em>height</em>: The height of the glyph in points.</li> <li>\n<em>width</em>: The width of the glyph in points.</li> <li>\n<em>xmin</em>, <em>xmax</em>, <em>ymin</em>, <em>ymax</em> - the ink rectangle of the glyph</li> <li>\n<em>iceberg</em> - the distance from the baseline to the top of the glyph. This corresponds to TeX’s definition of “height”.</li> </ul> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.get_results\"><code>get_results(box)</code></dt> <dd>\n<p>Get the data needed by the backend to render the math expression. The return value is backend-specific.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.get_sized_alternatives_for_symbol\"><code>get_sized_alternatives_for_symbol(fontname, sym)</code></dt> <dd>\n<p>Override if your font provides multiple sizes of the same symbol. Should return a list of symbols matching <em>sym</em> in various sizes. The expression renderer will select the most appropriate size for a given situation from this list.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.get_underline_thickness\"><code>get_underline_thickness(font, fontsize, dpi)</code></dt> <dd>\n<p>Get the line thickness that matches the given font. Used as a base unit for drawing lines such as in a fraction or radical.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.get_used_characters\"><code>get_used_characters()</code></dt> <dd>\n<p>Get the set of characters that were used in the math expression. Used by backends that need to subset fonts so they know which glyphs to include.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.get_xheight\"><code>get_xheight(font, fontsize, dpi)</code></dt> <dd>\n<p>Get the xheight for the given <em>font</em> and <em>fontsize</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.render_glyph\"><code>render_glyph(ox, oy, facename, font_class, sym, fontsize, dpi)</code></dt> <dd>\n<p>Draw a glyph at</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>ox</em>, <em>oy</em>: position</li> <li>\n<em>facename</em>: One of the TeX face names</li> <li>\n<em>font_class</em>:</li> <li>\n<em>sym</em>: TeX symbol name or single character</li> <li>\n<em>fontsize</em>: fontsize in points</li> <li>\n<em>dpi</em>: The dpi to draw at.</li> </ul> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.render_rect_filled\"><code>render_rect_filled(x1, y1, x2, y2)</code></dt> <dd>\n<p>Draw a filled rectangle from (<em>x1</em>, <em>y1</em>) to (<em>x2</em>, <em>y2</em>).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Fonts.set_canvas_size\"><code>set_canvas_size(w, h, d)</code></dt> <dd>\n<p>Set the size of the buffer used to render the math expression. Only really necessary for the bitmap backends.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Glue\"><code>class matplotlib.mathtext.Glue(glue_type, copy=False)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Node\" title=\"matplotlib.mathtext.Node\"><code>matplotlib.mathtext.Node</code></a></p> <p>Most of the information in this object is stored in the underlying <a class=\"reference internal\" href=\"#matplotlib.mathtext.GlueSpec\" title=\"matplotlib.mathtext.GlueSpec\"><code>GlueSpec</code></a> class, which is shared between multiple glue objects. (This is a memory optimization which probably doesn’t matter anymore, but it’s easier to stick to what TeX does.)</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Glue.grow\"><code>grow()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Glue.shrink\"><code>shrink()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.GlueSpec\"><code>class matplotlib.mathtext.GlueSpec(width=0.0, stretch=0.0, stretch_order=0, shrink=0.0, shrink_order=0)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>See <a class=\"reference internal\" href=\"#matplotlib.mathtext.Glue\" title=\"matplotlib.mathtext.Glue\"><code>Glue</code></a>.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.GlueSpec.copy\"><code>copy()</code></dt> \n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.mathtext.GlueSpec.factory\"><code>classmethod factory(glue_type)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.HCentered\"><code>class matplotlib.mathtext.HCentered(elements)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>matplotlib.mathtext.Hlist</code></a></p> <p>A convenience class to create an <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>Hlist</code></a> whose contents are centered within its enclosing box.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Hbox\"><code>class matplotlib.mathtext.Hbox(width)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Box\" title=\"matplotlib.mathtext.Box\"><code>matplotlib.mathtext.Box</code></a></p> <p>A box with only width (zero height and depth).</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Hlist\"><code>class matplotlib.mathtext.Hlist(elements, w=0.0, m='additional', do_kern=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.List\" title=\"matplotlib.mathtext.List\"><code>matplotlib.mathtext.List</code></a></p> <p>A horizontal list of boxes.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Hlist.hpack\"><code>hpack(w=0.0, m='additional')</code></dt> <dd>\n<p>The main duty of <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist.hpack\" title=\"matplotlib.mathtext.Hlist.hpack\"><code>hpack()</code></a> is to compute the dimensions of the resulting boxes, and to adjust the glue if one of those dimensions is pre-specified. The computed sizes normally enclose all of the material inside the new box; but some items may stick out if negative glue is used, if the box is overfull, or if a <code>\\vbox</code> includes other boxes that have been shifted left.</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>w</em>: specifies a width</li> <li>\n<em>m</em>: is either ‘exactly’ or ‘additional’.</li> </ul> </div>\n</blockquote> <p>Thus, <code>hpack(w, 'exactly')</code> produces a box whose width is exactly <em>w</em>, while <code>hpack(w, 'additional')</code> yields a box whose width is the natural width plus <em>w</em>. The default values produce a box with the natural width.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Hlist.kern\"><code>kern()</code></dt> <dd>\n<p>Insert <a class=\"reference internal\" href=\"#matplotlib.mathtext.Kern\" title=\"matplotlib.mathtext.Kern\"><code>Kern</code></a> nodes between <a class=\"reference internal\" href=\"#matplotlib.mathtext.Char\" title=\"matplotlib.mathtext.Char\"><code>Char</code></a> nodes to set kerning. The <a class=\"reference internal\" href=\"#matplotlib.mathtext.Char\" title=\"matplotlib.mathtext.Char\"><code>Char</code></a> nodes themselves determine the amount of kerning they need (in <a class=\"reference internal\" href=\"#matplotlib.mathtext.Char.get_kerning\" title=\"matplotlib.mathtext.Char.get_kerning\"><code>get_kerning()</code></a>), and this function just creates the linked list in the correct way.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Hrule\"><code>class matplotlib.mathtext.Hrule(state, thickness=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Rule\" title=\"matplotlib.mathtext.Rule\"><code>matplotlib.mathtext.Rule</code></a></p> <p>Convenience class to create a horizontal rule.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Kern\"><code>class matplotlib.mathtext.Kern(width)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Node\" title=\"matplotlib.mathtext.Node\"><code>matplotlib.mathtext.Node</code></a></p> <p>A <a class=\"reference internal\" href=\"#matplotlib.mathtext.Kern\" title=\"matplotlib.mathtext.Kern\"><code>Kern</code></a> node has a width field to specify a (normally negative) amount of spacing. This spacing correction appears in horizontal lists between letters like A and V when the font designer said that it looks better to move them closer together or further apart. A kern node can also appear in a vertical list, when its <em>width</em> denotes additional spacing in the vertical direction.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.Kern.depth\"><code>depth = 0</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Kern.grow\"><code>grow()</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.Kern.height\"><code>height = 0</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Kern.shrink\"><code>shrink()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.List\"><code>class matplotlib.mathtext.List(elements)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Box\" title=\"matplotlib.mathtext.Box\"><code>matplotlib.mathtext.Box</code></a></p> <p>A list of nodes (either horizontal or vertical).</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.List.grow\"><code>grow()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.List.shrink\"><code>shrink()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathTextParser\"><code>class matplotlib.mathtext.MathTextParser(output)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Create a MathTextParser for the given backend <em>output</em>.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathTextParser.get_depth\"><code>get_depth(texstr, dpi=120, fontsize=14)</code></dt> <dd>\n<p>Returns the offset of the baseline from the bottom of the image in pixels.</p> <dl class=\"docutils\"> <dt><em>texstr</em></dt> <dd>A valid mathtext string, e.g., r’IQ: $sigma_i=15$’</dd> <dt><em>dpi</em></dt> <dd>The dots-per-inch to render the text</dd> <dt><em>fontsize</em></dt> <dd>The font size in points</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathTextParser.parse\"><code>parse(s, dpi=72, prop=None)</code></dt> <dd>\n<p>Parse the given math expression <em>s</em> at the given <em>dpi</em>. If <em>prop</em> is provided, it is a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>FontProperties</code></a> object specifying the “default” font to use in the math expression, used for all non-math text.</p> <p>The results are cached, so multiple calls to <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathTextParser.parse\" title=\"matplotlib.mathtext.MathTextParser.parse\"><code>parse()</code></a> with the same expression should be fast.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathTextParser.to_mask\"><code>to_mask(texstr, dpi=120, fontsize=14)</code></dt> <dd>\n<dl class=\"docutils\"> <dt><em>texstr</em></dt> <dd>A valid mathtext string, e.g., r’IQ: $sigma_i=15$’</dd> <dt><em>dpi</em></dt> <dd>The dots-per-inch to render the text</dd> <dt><em>fontsize</em></dt> <dd>The font size in points</dd> </dl> <p>Returns a tuple (<em>array</em>, <em>depth</em>)</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>array</em> is an NxM uint8 alpha ubyte mask array of rasterized tex.</li> <li>depth is the offset of the baseline from the bottom of the image in pixels.</li> </ul> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathTextParser.to_png\"><code>to_png(filename, texstr, color='black', dpi=120, fontsize=14)</code></dt> <dd>\n<p>Writes a tex expression to a PNG file.</p> <p>Returns the offset of the baseline from the bottom of the image in pixels.</p> <dl class=\"docutils\"> <dt><em>filename</em></dt> <dd>A writable filename or fileobject</dd> <dt><em>texstr</em></dt> <dd>A valid mathtext string, e.g., r’IQ: $sigma_i=15$’</dd> <dt><em>color</em></dt> <dd>A valid matplotlib color argument</dd> <dt><em>dpi</em></dt> <dd>The dots-per-inch to render the text</dd> <dt><em>fontsize</em></dt> <dd>The font size in points</dd> </dl> <p>Returns the offset of the baseline from the bottom of the image in pixels.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathTextParser.to_rgba\"><code>to_rgba(texstr, color='black', dpi=120, fontsize=14)</code></dt> <dd>\n<dl class=\"docutils\"> <dt><em>texstr</em></dt> <dd>A valid mathtext string, e.g., r’IQ: $sigma_i=15$’</dd> <dt><em>color</em></dt> <dd>Any matplotlib color argument</dd> <dt><em>dpi</em></dt> <dd>The dots-per-inch to render the text</dd> <dt><em>fontsize</em></dt> <dd>The font size in points</dd> </dl> <p>Returns a tuple (<em>array</em>, <em>depth</em>)</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>array</em> is an NxM uint8 alpha ubyte mask array of rasterized tex.</li> <li>depth is the offset of the baseline from the bottom of the image in pixels.</li> </ul> </div>\n</blockquote> </dd>\n</dl> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"matplotlib.mathtext.MathTextWarning\"><code>exception matplotlib.mathtext.MathTextWarning</code></dt> <dd>\n<p>Bases: <code>Warning</code></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathtextBackend\"><code>class matplotlib.mathtext.MathtextBackend</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>The base class for the mathtext backend-specific code. The purpose of <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend\" title=\"matplotlib.mathtext.MathtextBackend\"><code>MathtextBackend</code></a> subclasses is to interface between mathtext and a specific matplotlib graphics backend.</p> <p>Subclasses need to override the following:</p> <blockquote> <div>\n<ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend.render_glyph\" title=\"matplotlib.mathtext.MathtextBackend.render_glyph\"><code>render_glyph()</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend.render_rect_filled\" title=\"matplotlib.mathtext.MathtextBackend.render_rect_filled\"><code>render_rect_filled()</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend.get_results\" title=\"matplotlib.mathtext.MathtextBackend.get_results\"><code>get_results()</code></a></li> </ul> </div>\n</blockquote> <p>And optionally, if you need to use a Freetype hinting style:</p> <blockquote> <div>\n<ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend.get_hinting_type\" title=\"matplotlib.mathtext.MathtextBackend.get_hinting_type\"><code>get_hinting_type()</code></a></li> </ul> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackend.get_hinting_type\"><code>get_hinting_type()</code></dt> <dd>\n<p>Get the Freetype hinting type to use with this particular backend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackend.get_results\"><code>get_results(box)</code></dt> <dd>\n<p>Return a backend-specific tuple to return to the backend after all processing is done.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackend.render_glyph\"><code>render_glyph(ox, oy, info)</code></dt> <dd>\n<p>Draw a glyph described by <em>info</em> to the reference point (<em>ox</em>, <em>oy</em>).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackend.render_rect_filled\"><code>render_rect_filled(x1, y1, x2, y2)</code></dt> <dd>\n<p>Draw a filled black rectangle from (<em>x1</em>, <em>y1</em>) to (<em>x2</em>, <em>y2</em>).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackend.set_canvas_size\"><code>set_canvas_size(w, h, d)</code></dt> <dd>\n<p>Dimension the drawing canvas</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathtextBackendAgg\"><code>class matplotlib.mathtext.MathtextBackendAgg</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend\" title=\"matplotlib.mathtext.MathtextBackend\"><code>matplotlib.mathtext.MathtextBackend</code></a></p> <p>Render glyphs and rectangles to an FTImage buffer, which is later transferred to the Agg image by the Agg backend.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendAgg.get_hinting_type\"><code>get_hinting_type()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendAgg.get_results\"><code>get_results(box, used_characters)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendAgg.render_glyph\"><code>render_glyph(ox, oy, info)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendAgg.render_rect_filled\"><code>render_rect_filled(x1, y1, x2, y2)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendAgg.set_canvas_size\"><code>set_canvas_size(w, h, d)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathtextBackendBitmap\"><code>class matplotlib.mathtext.MathtextBackendBitmap</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackendAgg\" title=\"matplotlib.mathtext.MathtextBackendAgg\"><code>matplotlib.mathtext.MathtextBackendAgg</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendBitmap.get_results\"><code>get_results(box, used_characters)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathtextBackendCairo\"><code>class matplotlib.mathtext.MathtextBackendCairo</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend\" title=\"matplotlib.mathtext.MathtextBackend\"><code>matplotlib.mathtext.MathtextBackend</code></a></p> <p>Store information to write a mathtext rendering to the Cairo backend.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendCairo.get_results\"><code>get_results(box, used_characters)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendCairo.render_glyph\"><code>render_glyph(ox, oy, info)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendCairo.render_rect_filled\"><code>render_rect_filled(x1, y1, x2, y2)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathtextBackendPath\"><code>class matplotlib.mathtext.MathtextBackendPath</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend\" title=\"matplotlib.mathtext.MathtextBackend\"><code>matplotlib.mathtext.MathtextBackend</code></a></p> <p>Store information to write a mathtext rendering to the text path machinery.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPath.get_results\"><code>get_results(box, used_characters)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPath.render_glyph\"><code>render_glyph(ox, oy, info)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPath.render_rect_filled\"><code>render_rect_filled(x1, y1, x2, y2)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathtextBackendPdf\"><code>class matplotlib.mathtext.MathtextBackendPdf</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend\" title=\"matplotlib.mathtext.MathtextBackend\"><code>matplotlib.mathtext.MathtextBackend</code></a></p> <p>Store information to write a mathtext rendering to the PDF backend.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPdf.get_results\"><code>get_results(box, used_characters)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPdf.render_glyph\"><code>render_glyph(ox, oy, info)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPdf.render_rect_filled\"><code>render_rect_filled(x1, y1, x2, y2)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathtextBackendPs\"><code>class matplotlib.mathtext.MathtextBackendPs</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend\" title=\"matplotlib.mathtext.MathtextBackend\"><code>matplotlib.mathtext.MathtextBackend</code></a></p> <p>Store information to write a mathtext rendering to the PostScript backend.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPs.get_results\"><code>get_results(box, used_characters)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPs.render_glyph\"><code>render_glyph(ox, oy, info)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendPs.render_rect_filled\"><code>render_rect_filled(x1, y1, x2, y2)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.MathtextBackendSvg\"><code>class matplotlib.mathtext.MathtextBackendSvg</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.MathtextBackend\" title=\"matplotlib.mathtext.MathtextBackend\"><code>matplotlib.mathtext.MathtextBackend</code></a></p> <p>Store information to write a mathtext rendering to the SVG backend.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendSvg.get_results\"><code>get_results(box, used_characters)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendSvg.render_glyph\"><code>render_glyph(ox, oy, info)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.MathtextBackendSvg.render_rect_filled\"><code>render_rect_filled(x1, y1, x2, y2)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.NegFil\"><code>class matplotlib.mathtext.NegFil</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Glue\" title=\"matplotlib.mathtext.Glue\"><code>matplotlib.mathtext.Glue</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.NegFill\"><code>class matplotlib.mathtext.NegFill</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Glue\" title=\"matplotlib.mathtext.Glue\"><code>matplotlib.mathtext.Glue</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.NegFilll\"><code>class matplotlib.mathtext.NegFilll</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Glue\" title=\"matplotlib.mathtext.Glue\"><code>matplotlib.mathtext.Glue</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Node\"><code>class matplotlib.mathtext.Node</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A node in the TeX box model</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Node.get_kerning\"><code>get_kerning(next)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Node.grow\"><code>grow()</code></dt> <dd>\n<p>Grows one level larger. There is no limit to how big something can get.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Node.render\"><code>render(x, y)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Node.shrink\"><code>shrink()</code></dt> <dd>\n<p>Shrinks one level smaller. There are only three levels of sizes, after which things will no longer get smaller.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Parser\"><code>class matplotlib.mathtext.Parser</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>This is the pyparsing-based parser for math expressions. It actually parses full strings <em>containing</em> math expressions, in that raw text may also appear outside of pairs of <code>$</code>.</p> <p>The grammar is based directly on that in TeX, though it cuts a few corners.</p> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Parser.State\"><code>class State(font_output, font, font_class, fontsize, dpi)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Stores the state of the parser.</p> <p>States are pushed and popped from a stack as necessary, and the “current” state is always at the top of the stack.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.State.copy\"><code>copy()</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.Parser.State.font\"><code>font</code></dt> \n</dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.accent\"><code>Parser.accent(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.auto_delim\"><code>Parser.auto_delim(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.binom\"><code>Parser.binom(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.c_over_c\"><code>Parser.c_over_c(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.customspace\"><code>Parser.customspace(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.end_group\"><code>Parser.end_group(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.font\"><code>Parser.font(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.frac\"><code>Parser.frac(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.function\"><code>Parser.function(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.genfrac\"><code>Parser.genfrac(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.get_state\"><code>Parser.get_state()</code></dt> <dd>\n<p>Get the current <a class=\"reference internal\" href=\"#matplotlib.mathtext.Parser.State\" title=\"matplotlib.mathtext.Parser.State\"><code>State</code></a> of the parser.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.group\"><code>Parser.group(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.is_dropsub\"><code>Parser.is_dropsub(nucleus)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.is_overunder\"><code>Parser.is_overunder(nucleus)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.is_slanted\"><code>Parser.is_slanted(nucleus)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.main\"><code>Parser.main(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.math\"><code>Parser.math(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.math_string\"><code>Parser.math_string(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.non_math\"><code>Parser.non_math(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.operatorname\"><code>Parser.operatorname(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.overline\"><code>Parser.overline(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.parse\"><code>Parser.parse(s, fonts_object, fontsize, dpi)</code></dt> <dd>\n<p>Parse expression <em>s</em> using the given <em>fonts_object</em> for output, at the given <em>fontsize</em> and <em>dpi</em>.</p> <p>Returns the parse tree of <a class=\"reference internal\" href=\"#matplotlib.mathtext.Node\" title=\"matplotlib.mathtext.Node\"><code>Node</code></a> instances.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.pop_state\"><code>Parser.pop_state()</code></dt> <dd>\n<p>Pop a <a class=\"reference internal\" href=\"#matplotlib.mathtext.Parser.State\" title=\"matplotlib.mathtext.Parser.State\"><code>State</code></a> off of the stack.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.push_state\"><code>Parser.push_state()</code></dt> <dd>\n<p>Push a new <a class=\"reference internal\" href=\"#matplotlib.mathtext.Parser.State\" title=\"matplotlib.mathtext.Parser.State\"><code>State</code></a> onto the stack which is just a copy of the current state.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.required_group\"><code>Parser.required_group(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.simple_group\"><code>Parser.simple_group(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.snowflake\"><code>Parser.snowflake(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.space\"><code>Parser.space(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.sqrt\"><code>Parser.sqrt(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.stackrel\"><code>Parser.stackrel(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.start_group\"><code>Parser.start_group(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.subsuper\"><code>Parser.subsuper(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.symbol\"><code>Parser.symbol(s, loc, toks)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Parser.unknown_symbol\"><code>Parser.unknown_symbol(s, loc, toks)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Rule\"><code>class matplotlib.mathtext.Rule(width, height, depth, state)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Box\" title=\"matplotlib.mathtext.Box\"><code>matplotlib.mathtext.Box</code></a></p> <p>A <a class=\"reference internal\" href=\"#matplotlib.mathtext.Rule\" title=\"matplotlib.mathtext.Rule\"><code>Rule</code></a> node stands for a solid black rectangle; it has <em>width</em>, <em>depth</em>, and <em>height</em> fields just as in an <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>Hlist</code></a>. However, if any of these dimensions is inf, the actual value will be determined by running the rule up to the boundary of the innermost enclosing box. This is called a “running dimension.” The width is never running in an <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>Hlist</code></a>; the height and depth are never running in a <a class=\"reference internal\" href=\"#matplotlib.mathtext.Vlist\" title=\"matplotlib.mathtext.Vlist\"><code>Vlist</code></a>.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Rule.render\"><code>render(x, y, w, h)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Ship\"><code>class matplotlib.mathtext.Ship</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Once the boxes have been set up, this sends them to output. Since boxes can be inside of boxes inside of boxes, the main work of <a class=\"reference internal\" href=\"#matplotlib.mathtext.Ship\" title=\"matplotlib.mathtext.Ship\"><code>Ship</code></a> is done by two mutually recursive routines, <a class=\"reference internal\" href=\"#matplotlib.mathtext.Ship.hlist_out\" title=\"matplotlib.mathtext.Ship.hlist_out\"><code>hlist_out()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.mathtext.Ship.vlist_out\" title=\"matplotlib.mathtext.Ship.vlist_out\"><code>vlist_out()</code></a>, which traverse the <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>Hlist</code></a> nodes and <a class=\"reference internal\" href=\"#matplotlib.mathtext.Vlist\" title=\"matplotlib.mathtext.Vlist\"><code>Vlist</code></a> nodes inside of horizontal and vertical boxes. The global variables used in TeX to store state as it processes have become member variables here.</p> <dl class=\"staticmethod\"> <dt id=\"matplotlib.mathtext.Ship.clamp\"><code>static clamp(value)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Ship.hlist_out\"><code>hlist_out(box)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Ship.vlist_out\"><code>vlist_out(box)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.SsGlue\"><code>class matplotlib.mathtext.SsGlue</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Glue\" title=\"matplotlib.mathtext.Glue\"><code>matplotlib.mathtext.Glue</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.StandardPsFonts\"><code>class matplotlib.mathtext.StandardPsFonts(default_font_prop)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Fonts\" title=\"matplotlib.mathtext.Fonts\"><code>matplotlib.mathtext.Fonts</code></a></p> <p>Use the standard postscript fonts for rendering to backend_ps</p> <p>Unlike the other font classes, BakomaFont and UnicodeFont, this one requires the Ps backend.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.StandardPsFonts.basepath\"><code>basepath = '/home/tcaswell/.virtualenvs/dd35/lib/python3.5/site-packages/matplotlib-1.5.1-py3.5-linux-x86_64.egg/matplotlib/mpl-data/fonts/afm'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.StandardPsFonts.fontmap\"><code>fontmap = {'rm': 'pncr8a', 'cal': 'pzcmi8a', 'it': 'pncri8a', None: 'psyr', 'sf': 'phvr8a', 'bf': 'pncb8a', 'tt': 'pcrr8a'}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.StandardPsFonts.get_kern\"><code>get_kern(font1, fontclass1, sym1, fontsize1, font2, fontclass2, sym2, fontsize2, dpi)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.StandardPsFonts.get_underline_thickness\"><code>get_underline_thickness(font, fontsize, dpi)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.StandardPsFonts.get_xheight\"><code>get_xheight(font, fontsize, dpi)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.StixFonts\"><code>class matplotlib.mathtext.StixFonts(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.UnicodeFonts\" title=\"matplotlib.mathtext.UnicodeFonts\"><code>matplotlib.mathtext.UnicodeFonts</code></a></p> <p>A font handling class for the STIX fonts.</p> <p>In addition to what UnicodeFonts provides, this class:</p> <ul class=\"simple\"> <li>supports “virtual fonts” which are complete alpha numeric character sets with different font styles at special Unicode code points, such as “Blackboard”.</li> <li>handles sized alternative characters for the STIXSizeX fonts.</li> </ul> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.StixFonts.cm_fallback\"><code>cm_fallback = False</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.StixFonts.get_sized_alternatives_for_symbol\"><code>get_sized_alternatives_for_symbol(fontname, sym)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.StixFonts.use_cmex\"><code>use_cmex = False</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.StixSansFonts\"><code>class matplotlib.mathtext.StixSansFonts(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.StixFonts\" title=\"matplotlib.mathtext.StixFonts\"><code>matplotlib.mathtext.StixFonts</code></a></p> <p>A font handling class for the STIX fonts (that uses sans-serif characters by default).</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.SubSuperCluster\"><code>class matplotlib.mathtext.SubSuperCluster</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>matplotlib.mathtext.Hlist</code></a></p> <p><a class=\"reference internal\" href=\"#matplotlib.mathtext.SubSuperCluster\" title=\"matplotlib.mathtext.SubSuperCluster\"><code>SubSuperCluster</code></a> is a sort of hack to get around that fact that this code do a two-pass parse like TeX. This lets us store enough information in the hlist itself, namely the nucleus, sub- and super-script, such that if another script follows that needs to be attached, it can be reconfigured on the fly.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.TruetypeFonts\"><code>class matplotlib.mathtext.TruetypeFonts(default_font_prop, mathtext_backend)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Fonts\" title=\"matplotlib.mathtext.Fonts\"><code>matplotlib.mathtext.Fonts</code></a></p> <p>A generic base class for all font setups that use Truetype fonts (through FT2Font).</p> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.TruetypeFonts.CachedFont\"><code>class CachedFont(font)</code></dt> <dd>\n<p>Bases: <code>object</code></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.TruetypeFonts.destroy\"><code>TruetypeFonts.destroy()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.TruetypeFonts.get_kern\"><code>TruetypeFonts.get_kern(font1, fontclass1, sym1, fontsize1, font2, fontclass2, sym2, fontsize2, dpi)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.TruetypeFonts.get_underline_thickness\"><code>TruetypeFonts.get_underline_thickness(font, fontsize, dpi)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.TruetypeFonts.get_xheight\"><code>TruetypeFonts.get_xheight(font, fontsize, dpi)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.UnicodeFonts\"><code>class matplotlib.mathtext.UnicodeFonts(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.TruetypeFonts\" title=\"matplotlib.mathtext.TruetypeFonts\"><code>matplotlib.mathtext.TruetypeFonts</code></a></p> <p>An abstract base class for handling Unicode fonts.</p> <p>While some reasonably complete Unicode fonts (such as DejaVu) may work in some situations, the only Unicode font I’m aware of with a complete set of math symbols is STIX.</p> <p>This class will “fallback” on the Bakoma fonts when a required symbol can not be found in the font.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.UnicodeFonts.get_sized_alternatives_for_symbol\"><code>get_sized_alternatives_for_symbol(fontname, sym)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.mathtext.UnicodeFonts.use_cmex\"><code>use_cmex = True</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.VCentered\"><code>class matplotlib.mathtext.VCentered(elements)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Hlist\" title=\"matplotlib.mathtext.Hlist\"><code>matplotlib.mathtext.Hlist</code></a></p> <p>A convenience class to create a <a class=\"reference internal\" href=\"#matplotlib.mathtext.Vlist\" title=\"matplotlib.mathtext.Vlist\"><code>Vlist</code></a> whose contents are centered within its enclosing box.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Vbox\"><code>class matplotlib.mathtext.Vbox(height, depth)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Box\" title=\"matplotlib.mathtext.Box\"><code>matplotlib.mathtext.Box</code></a></p> <p>A box with only height (zero width).</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Vlist\"><code>class matplotlib.mathtext.Vlist(elements, h=0.0, m='additional')</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.List\" title=\"matplotlib.mathtext.List\"><code>matplotlib.mathtext.List</code></a></p> <p>A vertical list of boxes.</p> <dl class=\"method\"> <dt id=\"matplotlib.mathtext.Vlist.vpack\"><code>vpack(h=0.0, m='additional', l=inf)</code></dt> <dd>\n<p>The main duty of <a class=\"reference internal\" href=\"#matplotlib.mathtext.Vlist.vpack\" title=\"matplotlib.mathtext.Vlist.vpack\"><code>vpack()</code></a> is to compute the dimensions of the resulting boxes, and to adjust the glue if one of those dimensions is pre-specified.</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>h</em>: specifies a height</li> <li>\n<em>m</em>: is either ‘exactly’ or ‘additional’.</li> <li>\n<em>l</em>: a maximum height</li> </ul> </div>\n</blockquote> <p>Thus, <code>vpack(h, 'exactly')</code> produces a box whose height is exactly <em>h</em>, while <code>vpack(h, 'additional')</code> yields a box whose height is the natural height plus <em>h</em>. The default values produce a box with the natural width.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mathtext.Vrule\"><code>class matplotlib.mathtext.Vrule(state)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mathtext.Rule\" title=\"matplotlib.mathtext.Rule\"><code>matplotlib.mathtext.Rule</code></a></p> <p>Convenience class to create a vertical rule.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mathtext.get_unicode_index\"><code>matplotlib.mathtext.get_unicode_index(symbol) → integer</code></dt> <dd>\n<p>Return the integer index (from the Unicode table) of symbol. <em>symbol</em> can be a single unicode character, a TeX command (i.e. r’pi’), or a Type1 symbol name (i.e. ‘phi’).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mathtext.math_to_image\"><code>matplotlib.mathtext.math_to_image(s, filename_or_obj, prop=None, dpi=None, format=None)</code></dt> <dd>\n<p>Given a math expression, renders it in a closely-clipped bounding box to an image file.</p> <dl class=\"docutils\"> <dt><em>s</em></dt> <dd>A math expression. The math portion should be enclosed in dollar signs.</dd> <dt><em>filename_or_obj</em></dt> <dd>A filepath or writable file-like object to write the image data to.</dd> <dt><em>prop</em></dt> <dd>If provided, a FontProperties() object describing the size and style of the text.</dd> <dt><em>dpi</em></dt> <dd>Override the output dpi, otherwise use the default associated with the output format.</dd> <dt><em>format</em></dt> <dd>The output format, e.g., ‘svg’, ‘pdf’, ‘ps’ or ‘png’. If not provided, will be deduced from the filename.</dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mathtext.unichr_safe\"><code>matplotlib.mathtext.unichr_safe(index)</code></dt> <dd>\n<p>Return the Unicode character corresponding to the index, or the replacement character if this is a narrow build of Python and the requested character is outside the BMP.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/mathtext_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/mathtext_api.html</a>\n  </p>\n</div>\n","units_api":"<h1 id=\"units\">units</h1>  <h2 id=\"matplotlib-units\">matplotlib.units</h2> <p id=\"module-matplotlib.units\">The classes here provide support for using custom classes with matplotlib, e.g., those that do not expose the array interface but know how to converter themselves to arrays. It also supoprts classes with units and units conversion. Use cases include converters for custom objects, e.g., a list of datetime objects, as well as for objects that are unit aware. We don’t assume any particular units implementation, rather a units implementation must provide a ConversionInterface, and the register with the Registry converter dictionary. For example, here is a complete implementation which supports plotting with native datetime objects:</p> <pre data-language=\"python\">import matplotlib.units as units\nimport matplotlib.dates as dates\nimport matplotlib.ticker as ticker\nimport datetime\n\nclass DateConverter(units.ConversionInterface):\n\n    @staticmethod\n    def convert(value, unit, axis):\n        'convert value to a scalar or array'\n        return dates.date2num(value)\n\n    @staticmethod\n    def axisinfo(unit, axis):\n        'return major and minor tick locators and formatters'\n        if unit!='date': return None\n        majloc = dates.AutoDateLocator()\n        majfmt = dates.AutoDateFormatter(majloc)\n        return AxisInfo(majloc=majloc,\n                        majfmt=majfmt,\n                        label='date')\n\n    @staticmethod\n    def default_units(x, axis):\n        'return the default unit for x or None'\n        return 'date'\n\n# finally we register our object type with a converter\nunits.registry[datetime.date] = DateConverter()\n</pre> <dl class=\"class\"> <dt id=\"matplotlib.units.AxisInfo\"><code>class matplotlib.units.AxisInfo(majloc=None, minloc=None, majfmt=None, minfmt=None, label=None, default_limits=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>information to support default axis labeling and tick labeling, and default limits</p> <p>majloc and minloc: TickLocators for the major and minor ticks majfmt and minfmt: TickFormatters for the major and minor ticks label: the default axis label default_limits: the default min, max of the axis if no data is present If any of the above are None, the axis will simply use the default</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.units.ConversionInterface\"><code>class matplotlib.units.ConversionInterface</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>The minimal interface for a converter to take custom instances (or sequences) and convert them to values mpl can use</p> <dl class=\"staticmethod\"> <dt id=\"matplotlib.units.ConversionInterface.axisinfo\"><code>static axisinfo(unit, axis)</code></dt> <dd>\n<p>return an units.AxisInfo instance for axis with the specified units</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.units.ConversionInterface.convert\"><code>static convert(obj, unit, axis)</code></dt> <dd>\n<p>convert obj using unit for the specified axis. If obj is a sequence, return the converted sequence. The ouput must be a sequence of scalars that can be used by the numpy array layer</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.units.ConversionInterface.default_units\"><code>static default_units(x, axis)</code></dt> <dd>\n<p>return the default unit for x or None for the given axis</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.units.ConversionInterface.is_numlike\"><code>static is_numlike(x)</code></dt> <dd>\n<p>The matplotlib datalim, autoscaling, locators etc work with scalars which are the units converted to floats given the current unit. The converter may be passed these floats, or arrays of them, even when units are set. Derived conversion interfaces may opt to pass plain-ol unitless numbers through the conversion interface and this is a helper function for them.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.units.Registry\"><code>class matplotlib.units.Registry</code></dt> <dd>\n<p>Bases: <code>dict</code></p> <p>register types with conversion interface</p> <dl class=\"method\"> <dt id=\"matplotlib.units.Registry.get_converter\"><code>get_converter(x)</code></dt> <dd>\n<p>get the converter interface instance for x, or None</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/units_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/units_api.html</a>\n  </p>\n</div>\n","backend_wxagg_api":"<h1 id=\"matplotlib-backends-backend-wxagg\">matplotlib.backends.backend_wxagg</h1> <dl class=\"attribute\" id=\"module-matplotlib.backends.backend_wxagg\"> <dt id=\"matplotlib.backends.backend_wxagg.FigureCanvas\"><code>matplotlib.backends.backend_wxagg.FigureCanvas</code></dt> <dd>\n<p>alias of <a class=\"reference internal\" href=\"#matplotlib.backends.backend_wxagg.FigureCanvasWxAgg\" title=\"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg\"><code>FigureCanvasWxAgg</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg\"><code>class matplotlib.backends.backend_wxagg.FigureCanvasWxAgg(parent, id, figure)</code></dt> <dd>\n<p>Bases: <code>matplotlib.backends.backend_agg.FigureCanvasAgg</code>, <code>matplotlib.backends.backend_wx.FigureCanvasWx</code></p> <p>The FigureCanvas contains the figure and does event handling.</p> <p>In the wxPython backend, it is derived from wxPanel, and (usually) lives inside a frame instantiated by a FigureManagerWx. The parent window probably implements a wxSizer to control the displayed control size - but we give a hint as to our preferred minimum size.</p> <p>Initialise a FigureWx instance.</p> <ul class=\"simple\"> <li>Initialise the FigureCanvasBase and wxPanel parents.</li> <li>Set event handlers for: EVT_SIZE (Resize event) EVT_PAINT (Paint event)</li> </ul> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg.blit\"><code>blit(bbox=None)</code></dt> <dd>\n<p>Transfer the region of the agg buffer defined by bbox to the display. If bbox is None, the entire buffer is transferred.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg.draw\"><code>draw(drawDC=None)</code></dt> <dd>\n<p>Render the figure using agg.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg.filetypes\"><code>filetypes = {'pgf': 'PGF code for LaTeX', 'rgba': 'Raw RGBA bitmap', 'svg': 'Scalable Vector Graphics', 'tif': 'Tagged Image File Format', 'ps': 'Postscript', 'jpeg': 'Joint Photographic Experts Group', 'tiff': 'Tagged Image File Format', 'svgz': 'Scalable Vector Graphics', 'eps': 'Encapsulated Postscript', 'png': 'Portable Network Graphics', 'raw': 'Raw RGBA bitmap', 'pdf': 'Portable Document Format', 'jpg': 'Joint Photographic Experts Group'}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_wxagg.FigureCanvasWxAgg.print_figure\"><code>print_figure(filename, *args, **kwargs)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_wxagg.FigureFrameWxAgg\"><code>class matplotlib.backends.backend_wxagg.FigureFrameWxAgg(num, fig)</code></dt> <dd>\n<p>Bases: <code>matplotlib.backends.backend_wx.FigureFrameWx</code></p> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_wxagg.FigureFrameWxAgg.get_canvas\"><code>get_canvas(fig)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_wxagg.NavigationToolbar2WxAgg\"><code>class matplotlib.backends.backend_wxagg.NavigationToolbar2WxAgg(canvas)</code></dt> <dd>\n<p>Bases: <code>matplotlib.backends.backend_wx.NavigationToolbar2Wx</code></p> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_wxagg.NavigationToolbar2WxAgg.get_canvas\"><code>get_canvas(frame, fig)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backends.backend_wxagg.new_figure_manager\"><code>matplotlib.backends.backend_wxagg.new_figure_manager(num, *args, **kwargs)</code></dt> <dd>\n<p>Create a new figure manager instance</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backends.backend_wxagg.new_figure_manager_given_figure\"><code>matplotlib.backends.backend_wxagg.new_figure_manager_given_figure(num, figure)</code></dt> <dd>\n<p>Create a new figure manager instance for the given figure.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/backend_wxagg_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/backend_wxagg_api.html</a>\n  </p>\n</div>\n","backend_pdf_api":"<h1 id=\"matplotlib-backends-backend-pdf\">matplotlib.backends.backend_pdf</h1> <p id=\"module-matplotlib.backends.backend_pdf\">A PDF matplotlib backend Author: Jouni K Seppänen &lt;<a class=\"reference external\" href=\"mailto:jks%40iki.fi\">jks<span>@</span>iki<span>.</span>fi</a>&gt;</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backends.backend_pdf.FigureCanvas\"><code>matplotlib.backends.backend_pdf.FigureCanvas</code></dt> <dd>\n<p>alias of <a class=\"reference internal\" href=\"#matplotlib.backends.backend_pdf.FigureCanvasPdf\" title=\"matplotlib.backends.backend_pdf.FigureCanvasPdf\"><code>FigureCanvasPdf</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_pdf.FigureCanvasPdf\"><code>class matplotlib.backends.backend_pdf.FigureCanvasPdf(figure)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.FigureCanvasBase\" title=\"matplotlib.backend_bases.FigureCanvasBase\"><code>matplotlib.backend_bases.FigureCanvasBase</code></a></p> <p>The canvas the figure renders into. Calls the draw and print fig methods, creates the renderers, etc...</p> <p>Public attribute</p> <blockquote> <div>figure - A Figure instance</div>\n</blockquote> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_pdf.Name\"><code>class matplotlib.backends.backend_pdf.Name(name)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>PDF name object.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_pdf.Operator\"><code>class matplotlib.backends.backend_pdf.Operator(op)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>PDF operator object.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile\"><code>class matplotlib.backends.backend_pdf.PdfFile(filename)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>PDF file object.</p> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.alphaState\"><code>alphaState(alpha)</code></dt> <dd>\n<p>Return name of an ExtGState that sets alpha to the given value</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.embedTTF\"><code>embedTTF(filename, characters)</code></dt> <dd>\n<p>Embed the TTF font from the named file into the document.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.fontName\"><code>fontName(fontprop)</code></dt> <dd>\n<p>Select a font based on fontprop and return a name suitable for Op.selectfont. If fontprop is a string, it will be interpreted as the filename (or dvi name) of the font.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.imageObject\"><code>imageObject(image)</code></dt> <dd>\n<p>Return name of an image XObject representing the given image.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.markerObject\"><code>markerObject(path, trans, fill, stroke, lw, joinstyle, capstyle)</code></dt> <dd>\n<p>Return name of a marker XObject representing the given path.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.reserveObject\"><code>reserveObject(name='')</code></dt> <dd>\n<p>Reserve an ID for an indirect object. The name is used for debugging in case we forget to print out the object with writeObject.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.writeInfoDict\"><code>writeInfoDict()</code></dt> <dd>\n<p>Write out the info dictionary, checking it for good form</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.writeTrailer\"><code>writeTrailer()</code></dt> <dd>\n<p>Write out the PDF trailer.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfFile.writeXref\"><code>writeXref()</code></dt> <dd>\n<p>Write out the xref table.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_pdf.PdfPages\"><code>class matplotlib.backends.backend_pdf.PdfPages(filename, keep_empty=True)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A multi-page PDF file.</p> <h4 class=\"rubric\">Notes</h4> <p>In reality <a class=\"reference internal\" href=\"#matplotlib.backends.backend_pdf.PdfPages\" title=\"matplotlib.backends.backend_pdf.PdfPages\"><code>PdfPages</code></a> is a thin wrapper around <a class=\"reference internal\" href=\"#matplotlib.backends.backend_pdf.PdfFile\" title=\"matplotlib.backends.backend_pdf.PdfFile\"><code>PdfFile</code></a>, in order to avoid confusion when using <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.savefig\" title=\"matplotlib.pyplot.savefig\"><code>savefig()</code></a> and forgetting the format argument.</p> <h4 class=\"rubric\">Examples</h4> <pre data-language=\"python\">&gt;&gt;&gt; import matplotlib.pyplot as plt\n&gt;&gt;&gt; # Initialize:\n&gt;&gt;&gt; with PdfPages('foo.pdf') as pdf:\n...     # As many times as you like, create a figure fig and save it:\n...     fig = plt.figure()\n...     pdf.savefig(fig)\n...     # When no figure is specified the current figure is saved\n...     pdf.savefig()\n</pre> <p>Create a new PdfPages object.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>filename: str</strong></p> <blockquote> <div>\n<p>Plots using <a class=\"reference internal\" href=\"#matplotlib.backends.backend_pdf.PdfPages.savefig\" title=\"matplotlib.backends.backend_pdf.PdfPages.savefig\"><code>PdfPages.savefig()</code></a> will be written to a file at this location. The file is opened at once and any older file with the same name is overwritten.</p> </div>\n</blockquote> <p><strong>keep_empty: bool, optional</strong></p> <blockquote class=\"last\"> <div>\n<p>If set to False, then empty pdf files will be deleted automatically when closed.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfPages.attach_note\"><code>attach_note(text, positionRect=[-100, -100, 0, 0])</code></dt> <dd>\n<p>Add a new text note to the page to be saved next. The optional positionRect specifies the position of the new note on the page. It is outside the page per default to make sure it is invisible on printouts.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfPages.close\"><code>close()</code></dt> <dd>\n<p>Finalize this object, making the underlying file a complete PDF file.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfPages.get_pagecount\"><code>get_pagecount()</code></dt> <dd>\n<p>Returns the current number of pages in the multipage pdf file.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfPages.infodict\"><code>infodict()</code></dt> <dd>\n<p>Return a modifiable information dictionary object (see PDF reference section 10.2.1 ‘Document Information Dictionary’).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.PdfPages.savefig\"><code>savefig(figure=None, **kwargs)</code></dt> <dd>\n<p>Saves a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> to this file as a new page.</p> <p>Any other keyword arguments are passed to <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.savefig\" title=\"matplotlib.figure.Figure.savefig\"><code>savefig()</code></a>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>figure: :class:`~matplotlib.figure.Figure` or int, optional</strong></p> <blockquote class=\"last\"> <div>\n<p>Specifies what figure is saved to file. If not specified, the active figure is saved. If a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance is provided, this figure is saved. If an int is specified, the figure instance to save is looked up by number.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_pdf.Reference\"><code>class matplotlib.backends.backend_pdf.Reference(id)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>PDF reference object. Use PdfFile.reserveObject() to create References.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_pdf.Stream\"><code>class matplotlib.backends.backend_pdf.Stream(id, len, file, extra=None, png=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>PDF stream object.</p> <p>This has no pdfRepr method. Instead, call begin(), then output the contents of the stream by calling write(), and finally call end().</p> <p>id: object id of stream; len: an unused Reference object for the length of the stream, or None (to use a memory buffer); file: a PdfFile; extra: a dictionary of extra key-value pairs to include in the stream header; png: if the data is already png compressed, the decode parameters</p> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.Stream.end\"><code>end()</code></dt> <dd>\n<p>Finalize stream.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backends.backend_pdf.Stream.write\"><code>write(data)</code></dt> <dd>\n<p>Write some data on the stream.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backends.backend_pdf.Verbatim\"><code>class matplotlib.backends.backend_pdf.Verbatim(x)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Store verbatim PDF command content for later inclusion in the stream.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backends.backend_pdf.fill\"><code>matplotlib.backends.backend_pdf.fill(strings, linelen=75)</code></dt> <dd>\n<p>Make one string from sequence of strings, with whitespace in between. The whitespace is chosen to form lines of at most linelen characters, if possible.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backends.backend_pdf.new_figure_manager\"><code>matplotlib.backends.backend_pdf.new_figure_manager(num, *args, **kwargs)</code></dt> <dd>\n<p>Create a new figure manager instance</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backends.backend_pdf.new_figure_manager_given_figure\"><code>matplotlib.backends.backend_pdf.new_figure_manager_given_figure(num, figure)</code></dt> <dd>\n<p>Create a new figure manager instance for the given figure.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backends.backend_pdf.pdfRepr\"><code>matplotlib.backends.backend_pdf.pdfRepr(obj)</code></dt> <dd>\n<p>Map Python objects to PDF syntax.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/backend_pdf_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/backend_pdf_api.html</a>\n  </p>\n</div>\n","text_api":"<h1 id=\"text\">text</h1>  <h2 id=\"matplotlib-text\">matplotlib.text</h2> <p id=\"module-matplotlib.text\">Classes for including text in a figure.</p> <dl class=\"class\"> <dt id=\"matplotlib.text.Annotation\"><code>class matplotlib.text.Annotation(s, xy, xytext=None, xycoords='data', textcoords=None, arrowprops=None, annotation_clip=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a>, <code>matplotlib.text._AnnotationBase</code></p> <p>A <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> class to make annotating things in the figure, such as <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>, <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a>, <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>Rectangle</code></a>, etc., easier.</p> <p>Annotate the <em>x</em>, <em>y</em> point <em>xy</em> with text <em>s</em> at <em>x</em>, <em>y</em> location <em>xytext</em>. (If <em>xytext</em> = <em>None</em>, defaults to <em>xy</em>, and if <em>textcoords</em> = <em>None</em>, defaults to <em>xycoords</em>).</p> <p><em>arrowprops</em>, if not <em>None</em>, is a dictionary of line properties (see <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a>) for the arrow that connects annotation to the point.</p> <p>If the dictionary has a key <em>arrowstyle</em>, a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a> instance is created with the given dictionary and is drawn. Otherwise, a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.YAArrow\" title=\"matplotlib.patches.YAArrow\"><code>YAArrow</code></a> patch instance is created and drawn. Valid keys for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.YAArrow\" title=\"matplotlib.patches.YAArrow\"><code>YAArrow</code></a> are:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"87%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>width</td> <td>the width of the arrow in points</td> </tr> <tr class=\"row-odd\">\n<td>frac</td> <td>the fraction of the arrow length occupied by the head</td> </tr> <tr class=\"row-even\">\n<td>headwidth</td> <td>the width of the base of the arrow head in points</td> </tr> <tr class=\"row-odd\">\n<td>shrink</td> <td>oftentimes it is convenient to have the arrowtip and base a bit away from the text and point being annotated. If <em>d</em> is the distance between the text and annotated point, shrink will shorten the arrow so the tip and base are shink percent of the distance <em>d</em> away from the endpoints. i.e., <code>shrink=0.05 is 5%</code>\n</td> </tr> <tr class=\"row-even\">\n<td>?</td> <td>any key for <code>matplotlib.patches.polygon</code>\n</td> </tr> </tbody> </table> <p>Valid keys for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a> are:</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"78%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>arrowstyle</td> <td>the arrow style</td> </tr> <tr class=\"row-odd\">\n<td>connectionstyle</td> <td>the connection style</td> </tr> <tr class=\"row-even\">\n<td>relpos</td> <td>default is (0.5, 0.5)</td> </tr> <tr class=\"row-odd\">\n<td>patchA</td> <td>default is bounding box of the text</td> </tr> <tr class=\"row-even\">\n<td>patchB</td> <td>default is None</td> </tr> <tr class=\"row-odd\">\n<td>shrinkA</td> <td>default is 2 points</td> </tr> <tr class=\"row-even\">\n<td>shrinkB</td> <td>default is 2 points</td> </tr> <tr class=\"row-odd\">\n<td>mutation_scale</td> <td>default is text size (in points)</td> </tr> <tr class=\"row-even\">\n<td>mutation_aspect</td> <td>default is 1.</td> </tr> <tr class=\"row-odd\">\n<td>?</td> <td>any key for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.PathPatch\" title=\"matplotlib.patches.PathPatch\"><code>matplotlib.patches.PathPatch</code></a>\n</td> </tr> </tbody> </table> <p><em>xycoords</em> and <em>textcoords</em> are strings that indicate the coordinates of <em>xy</em> and <em>xytext</em>, and may be one of the following values:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘figure points’</td> <td>points from the lower left corner of the figure</td> </tr> <tr class=\"row-odd\">\n<td>‘figure pixels’</td> <td>pixels from the lower left corner of the figure</td> </tr> <tr class=\"row-even\">\n<td>‘figure fraction’</td> <td>0,0 is lower left of figure and 1,1 is upper right</td> </tr> <tr class=\"row-odd\">\n<td>‘axes points’</td> <td>points from lower left corner of axes</td> </tr> <tr class=\"row-even\">\n<td>‘axes pixels’</td> <td>pixels from lower left corner of axes</td> </tr> <tr class=\"row-odd\">\n<td>‘axes fraction’</td> <td>0,0 is lower left of axes and 1,1 is upper right</td> </tr> <tr class=\"row-even\">\n<td>‘data’</td> <td>use the coordinate system of the object being annotated (default)</td> </tr> <tr class=\"row-odd\">\n<td>‘offset points’</td> <td>Specify an offset (in points) from the <em>xy</em> value</td> </tr> <tr class=\"row-even\">\n<td>‘polar’</td> <td>you can specify <em>theta</em>, <em>r</em> for the annotation, even in cartesian plots. Note that if you are using a polar axes, you do not need to specify polar for the coordinate system since that is the native “data” coordinate system.</td> </tr> </tbody> </table> <p>If a ‘points’ or ‘pixels’ option is specified, values will be added to the bottom-left and if negative, values will be subtracted from the top-right. e.g.:</p> <pre data-language=\"python\"># 10 points to the right of the left border of the axes and\n# 5 points below the top border\nxy=(10,-5), xycoords='axes points'\n</pre> <p>You may use an instance of <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> or <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a>. See <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/annotations_guide.html#plotting-guide-annotation\"><span>Annotating Axes</span></a> for more details.</p> <p>The <em>annotation_clip</em> attribute controls the visibility of the annotation when it goes outside the axes area. If <code>True</code>, the annotation will only be drawn when the <em>xy</em> is inside the axes. If <code>False</code>, the annotation will always be drawn regardless of its position. The default is <code>None</code>, which behave as <code>True</code> only if <em>xycoords</em> is “data”.</p> <p>Additional kwargs are <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"30%\"> <col width=\"70%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_backgroundcolor\" title=\"matplotlib.text.Text.set_backgroundcolor\"><code>backgroundcolor</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>bbox</code></a></td> <td>FancyBboxPatch prop dict</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_clip_box\" title=\"matplotlib.text.Text.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_clip_on\" title=\"matplotlib.text.Text.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_clip_path\" title=\"matplotlib.text.Text.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_color\" title=\"matplotlib.text.Text.set_color\"><code>color</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_family\" title=\"matplotlib.text.Text.set_family\"><code>family</code></a> or name or fontname or fontfamily</td> <td>[FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ | ‘monospace’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_fontproperties\" title=\"matplotlib.text.Text.set_fontproperties\"><code>fontproperties</code></a> or font_properties</td> <td>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_horizontalalignment\" title=\"matplotlib.text.Text.set_horizontalalignment\"><code>horizontalalignment</code></a> or ha</td> <td>[ ‘center’ | ‘right’ | ‘left’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_linespacing\" title=\"matplotlib.text.Text.set_linespacing\"><code>linespacing</code></a></td> <td>float (multiple of font size)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_multialignment\" title=\"matplotlib.text.Text.set_multialignment\"><code>multialignment</code></a></td> <td>[‘left’ | ‘right’ | ‘center’ ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>position</code></a></td> <td>(x,y)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_rotation\" title=\"matplotlib.text.Text.set_rotation\"><code>rotation</code></a></td> <td>[ angle in degrees | ‘vertical’ | ‘horizontal’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_rotation_mode\" title=\"matplotlib.text.Text.set_rotation_mode\"><code>rotation_mode</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_size\" title=\"matplotlib.text.Text.set_size\"><code>size</code></a> or fontsize</td> <td>[size in points | ‘xx-small’ | ‘x-small’ | ‘small’ | ‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_stretch\" title=\"matplotlib.text.Text.set_stretch\"><code>stretch</code></a> or fontstretch</td> <td>[a numeric value in range 0-1000 | ‘ultra-condensed’ | ‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_style\" title=\"matplotlib.text.Text.set_style\"><code>style</code></a> or fontstyle</td> <td>[ ‘normal’ | ‘italic’ | ‘oblique’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_text\" title=\"matplotlib.text.Text.set_text\"><code>text</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_usetex\" title=\"matplotlib.text.Text.set_usetex\"><code>usetex</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_variant\" title=\"matplotlib.text.Text.set_variant\"><code>variant</code></a> or fontvariant</td> <td>[ ‘normal’ | ‘small-caps’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_verticalalignment\" title=\"matplotlib.text.Text.set_verticalalignment\"><code>verticalalignment</code></a> or va or ma</td> <td>[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_weight\" title=\"matplotlib.text.Text.set_weight\"><code>weight</code></a> or fontweight</td> <td>[a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ | ‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_wrap\" title=\"matplotlib.text.Text.set_wrap\"><code>wrap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_x\" title=\"matplotlib.text.Text.set_x\"><code>x</code></a></td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_y\" title=\"matplotlib.text.Text.set_y\"><code>y</code></a></td> <td>float</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"attribute\"> <dt id=\"matplotlib.text.Annotation.anncoords\"><code>anncoords</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Annotation.contains\"><code>contains(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Annotation.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>Draw the <a class=\"reference internal\" href=\"#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>Annotation</code></a> object to the given <em>renderer</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Annotation.get_window_extent\"><code>get_window_extent(renderer=None)</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a> object bounding the text and arrow annotation, in display units.</p> <p><em>renderer</em> defaults to the _renderer attribute of the text object. This is not assigned until the first execution of <a class=\"reference internal\" href=\"#matplotlib.text.Annotation.draw\" title=\"matplotlib.text.Annotation.draw\"><code>draw()</code></a>, so you must use this kwarg if you want to call <a class=\"reference internal\" href=\"#matplotlib.text.Annotation.get_window_extent\" title=\"matplotlib.text.Annotation.get_window_extent\"><code>get_window_extent()</code></a> prior to the first <a class=\"reference internal\" href=\"#matplotlib.text.Annotation.draw\" title=\"matplotlib.text.Annotation.draw\"><code>draw()</code></a>. For getting web page regions, it is simpler to call the method after saving the figure. The <em>dpi</em> used defaults to self.figure.dpi; the renderer dpi is irrelevant.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Annotation.set_figure\"><code>set_figure(fig)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Annotation.update_positions\"><code>update_positions(renderer)</code></dt> <dd>\n<p>“Update the pixel positions of the annotated point and the text.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.text.Annotation.xyann\"><code>xyann</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.text.OffsetFrom\"><code>class matplotlib.text.OffsetFrom(artist, ref_coord, unit='points')</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"method\"> <dt id=\"matplotlib.text.OffsetFrom.get_unit\"><code>get_unit()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.OffsetFrom.set_unit\"><code>set_unit(unit)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.text.Text\"><code>class matplotlib.text.Text(x=0, y=0, text='', color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a></p> <p>Handle storing and drawing of text in window or data coordinates.</p> <p>Create a <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instance at <em>x</em>, <em>y</em> with string <em>text</em>.</p> <p>Valid kwargs are</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"30%\"> <col width=\"70%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_backgroundcolor\" title=\"matplotlib.text.Text.set_backgroundcolor\"><code>backgroundcolor</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>bbox</code></a></td> <td>FancyBboxPatch prop dict</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_clip_box\" title=\"matplotlib.text.Text.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_clip_on\" title=\"matplotlib.text.Text.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_clip_path\" title=\"matplotlib.text.Text.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_color\" title=\"matplotlib.text.Text.set_color\"><code>color</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_family\" title=\"matplotlib.text.Text.set_family\"><code>family</code></a> or name or fontname or fontfamily</td> <td>[FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ | ‘monospace’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_fontproperties\" title=\"matplotlib.text.Text.set_fontproperties\"><code>fontproperties</code></a> or font_properties</td> <td>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_horizontalalignment\" title=\"matplotlib.text.Text.set_horizontalalignment\"><code>horizontalalignment</code></a> or ha</td> <td>[ ‘center’ | ‘right’ | ‘left’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_linespacing\" title=\"matplotlib.text.Text.set_linespacing\"><code>linespacing</code></a></td> <td>float (multiple of font size)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_multialignment\" title=\"matplotlib.text.Text.set_multialignment\"><code>multialignment</code></a></td> <td>[‘left’ | ‘right’ | ‘center’ ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>position</code></a></td> <td>(x,y)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_rotation\" title=\"matplotlib.text.Text.set_rotation\"><code>rotation</code></a></td> <td>[ angle in degrees | ‘vertical’ | ‘horizontal’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_rotation_mode\" title=\"matplotlib.text.Text.set_rotation_mode\"><code>rotation_mode</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_size\" title=\"matplotlib.text.Text.set_size\"><code>size</code></a> or fontsize</td> <td>[size in points | ‘xx-small’ | ‘x-small’ | ‘small’ | ‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_stretch\" title=\"matplotlib.text.Text.set_stretch\"><code>stretch</code></a> or fontstretch</td> <td>[a numeric value in range 0-1000 | ‘ultra-condensed’ | ‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_style\" title=\"matplotlib.text.Text.set_style\"><code>style</code></a> or fontstyle</td> <td>[ ‘normal’ | ‘italic’ | ‘oblique’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_text\" title=\"matplotlib.text.Text.set_text\"><code>text</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_usetex\" title=\"matplotlib.text.Text.set_usetex\"><code>usetex</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_variant\" title=\"matplotlib.text.Text.set_variant\"><code>variant</code></a> or fontvariant</td> <td>[ ‘normal’ | ‘small-caps’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_verticalalignment\" title=\"matplotlib.text.Text.set_verticalalignment\"><code>verticalalignment</code></a> or va or ma</td> <td>[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.text.Text.set_weight\" title=\"matplotlib.text.Text.set_weight\"><code>weight</code></a> or fontweight</td> <td>[a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ | ‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_wrap\" title=\"matplotlib.text.Text.set_wrap\"><code>wrap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_x\" title=\"matplotlib.text.Text.set_x\"><code>x</code></a></td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_y\" title=\"matplotlib.text.Text.set_y\"><code>y</code></a></td> <td>float</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the patch.</p> <p>In the case of text, a hit is true anywhere in the axis-aligned bounding-box containing the text.</p> <p>Returns True or False.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>Draws the <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> object to the given <em>renderer</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_bbox_patch\"><code>get_bbox_patch()</code></dt> <dd>\n<p>Return the bbox Patch object. Returns None if the FancyBboxPatch is not made.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_color\"><code>get_color()</code></dt> <dd>\n<p>Return the color of the text</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_family\"><code>get_family()</code></dt> <dd>\n<p>Return the list of font families used for font lookup</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_font_properties\"><code>get_font_properties()</code></dt> <dd>\n<p>alias for get_fontproperties</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_fontfamily\"><code>get_fontfamily()</code></dt> <dd>\n<p>alias for get_family</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_fontname\"><code>get_fontname()</code></dt> <dd>\n<p>alias for get_name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_fontproperties\"><code>get_fontproperties()</code></dt> <dd>\n<p>Return the <code>FontProperties</code> object</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_fontsize\"><code>get_fontsize()</code></dt> <dd>\n<p>alias for get_size</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_fontstretch\"><code>get_fontstretch()</code></dt> <dd>\n<p>alias for get_stretch</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_fontstyle\"><code>get_fontstyle()</code></dt> <dd>\n<p>alias for get_style</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_fontvariant\"><code>get_fontvariant()</code></dt> <dd>\n<p>alias for get_variant</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_fontweight\"><code>get_fontweight()</code></dt> <dd>\n<p>alias for get_weight</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_ha\"><code>get_ha()</code></dt> <dd>\n<p>alias for get_horizontalalignment</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_horizontalalignment\"><code>get_horizontalalignment()</code></dt> <dd>\n<p>Return the horizontal alignment as string. Will be one of ‘left’, ‘center’ or ‘right’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_name\"><code>get_name()</code></dt> <dd>\n<p>Return the font name as string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_position\"><code>get_position()</code></dt> <dd>\n<p>Return the position of the text as a tuple (<em>x</em>, <em>y</em>)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_prop_tup\"><code>get_prop_tup()</code></dt> <dd>\n<p>Return a hashable tuple of properties.</p> <p>Not intended to be human readable, but useful for backends who want to cache derived information about text (e.g., layouts) and need to know if the text has changed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_rotation\"><code>get_rotation()</code></dt> <dd>\n<p>return the text angle as float in degrees</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_rotation_mode\"><code>get_rotation_mode()</code></dt> <dd>\n<p>get text rotation mode</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_size\"><code>get_size()</code></dt> <dd>\n<p>Return the font size as integer</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_stretch\"><code>get_stretch()</code></dt> <dd>\n<p>Get the font stretch as a string or number</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_style\"><code>get_style()</code></dt> <dd>\n<p>Return the font style as string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_text\"><code>get_text()</code></dt> <dd>\n<p>Get the text as string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_unitless_position\"><code>get_unitless_position()</code></dt> <dd>\n<p>Return the unitless position of the text as a tuple (<em>x</em>, <em>y</em>)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_usetex\"><code>get_usetex()</code></dt> <dd>\n<p>Return whether this <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> object will render using TeX.</p> <p>If the user has not manually set this value, it will default to the value of <code>rcParams['text.usetex']</code></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_va\"><code>get_va()</code></dt> <dd>\n<p>alias for <code>getverticalalignment()</code></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_variant\"><code>get_variant()</code></dt> <dd>\n<p>Return the font variant as a string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_verticalalignment\"><code>get_verticalalignment()</code></dt> <dd>\n<p>Return the vertical alignment as string. Will be one of ‘top’, ‘center’, ‘bottom’ or ‘baseline’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_weight\"><code>get_weight()</code></dt> <dd>\n<p>Get the font weight as string or number</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_window_extent\"><code>get_window_extent(renderer=None, dpi=None)</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a> object bounding the text, in display units.</p> <p>In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.</p> <p><em>renderer</em> defaults to the _renderer attribute of the text object. This is not assigned until the first execution of <a class=\"reference internal\" href=\"#matplotlib.text.Text.draw\" title=\"matplotlib.text.Text.draw\"><code>draw()</code></a>, so you must use this kwarg if you want to call <a class=\"reference internal\" href=\"#matplotlib.text.Text.get_window_extent\" title=\"matplotlib.text.Text.get_window_extent\"><code>get_window_extent()</code></a> prior to the first <a class=\"reference internal\" href=\"#matplotlib.text.Text.draw\" title=\"matplotlib.text.Text.draw\"><code>draw()</code></a>. For getting web page regions, it is simpler to call the method after saving the figure.</p> <p><em>dpi</em> defaults to self.figure.dpi; the renderer dpi is irrelevant. For the web application, if figure.dpi is not the value used when saving the figure, then the value that was used must be specified as the <em>dpi</em> argument.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.get_wrap\"><code>get_wrap()</code></dt> <dd>\n<p>Returns the wrapping state for the text.</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.text.Text.is_math_text\"><code>static is_math_text(s)</code></dt> <dd>\n<p>Returns a cleaned string and a boolean flag. The flag indicates if the given string <em>s</em> contains any mathtext, determined by counting unescaped dollar signs. If no mathtext is present, the cleaned string has its dollar signs unescaped. If usetex is on, the flag always has the value “TeX”.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_backgroundcolor\"><code>set_backgroundcolor(color)</code></dt> <dd>\n<p>Set the background color of the text by updating the bbox.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>set_bbox()</code></a></dt> <dd>To change the position of the bounding box.</dd> </dl> </div> <p>ACCEPTS: any matplotlib color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_bbox\"><code>set_bbox(rectprops)</code></dt> <dd>\n<p>Draw a bounding box around self. rectprops are any settable properties for a FancyBboxPatch, e.g., facecolor=’red’, alpha=0.5.</p> <blockquote> <div>t.set_bbox(dict(facecolor=’red’, alpha=0.5))</div>\n</blockquote> <p>The default boxstyle is ‘square’. The mutation scale of the FancyBboxPatch is set to the fontsize.</p> <p>ACCEPTS: FancyBboxPatch prop dict</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_color\"><code>set_color(color)</code></dt> <dd>\n<p>Set the foreground color of the text</p> <p>ACCEPTS: any matplotlib color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_family\"><code>set_family(fontname)</code></dt> <dd>\n<p>Set the font family. May be either a single string, or a list of strings in decreasing priority. Each string may be either a real font name or a generic font class name. If the latter, the specific font names will be looked up in the <code>matplotlibrc</code> file.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ |</dt> <dd>‘monospace’ ]</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_font_properties\"><code>set_font_properties(fp)</code></dt> <dd>\n<p>alias for set_fontproperties</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_fontname\"><code>set_fontname(fontname)</code></dt> <dd>\n<p>alias for set_family</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_fontproperties\"><code>set_fontproperties(fp)</code></dt> <dd>\n<p>Set the font properties that control the text. <em>fp</em> must be a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> object.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_fontsize\"><code>set_fontsize(fontsize)</code></dt> <dd>\n<p>alias for set_size</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_fontstretch\"><code>set_fontstretch(stretch)</code></dt> <dd>\n<p>alias for set_stretch</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_fontstyle\"><code>set_fontstyle(fontstyle)</code></dt> <dd>\n<p>alias for set_style</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_fontvariant\"><code>set_fontvariant(variant)</code></dt> <dd>\n<p>alias for set_variant</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_fontweight\"><code>set_fontweight(weight)</code></dt> <dd>\n<p>alias for set_weight</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_ha\"><code>set_ha(align)</code></dt> <dd>\n<p>alias for set_horizontalalignment</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_horizontalalignment\"><code>set_horizontalalignment(align)</code></dt> <dd>\n<p>Set the horizontal alignment to one of</p> <p>ACCEPTS: [ ‘center’ | ‘right’ | ‘left’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_linespacing\"><code>set_linespacing(spacing)</code></dt> <dd>\n<p>Set the line spacing as a multiple of the font size. Default is 1.2.</p> <p>ACCEPTS: float (multiple of font size)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_ma\"><code>set_ma(align)</code></dt> <dd>\n<p>alias for set_verticalalignment</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_multialignment\"><code>set_multialignment(align)</code></dt> <dd>\n<p>Set the alignment for multiple lines layout. The layout of the bounding box of all the lines is determined bu the horizontalalignment and verticalalignment properties, but the multiline text within that box can be</p> <p>ACCEPTS: [‘left’ | ‘right’ | ‘center’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_name\"><code>set_name(fontname)</code></dt> <dd>\n<p>alias for set_family</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_position\"><code>set_position(xy)</code></dt> <dd>\n<p>Set the (<em>x</em>, <em>y</em>) position of the text</p> <p>ACCEPTS: (x,y)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_rotation\"><code>set_rotation(s)</code></dt> <dd>\n<p>Set the rotation of the text</p> <p>ACCEPTS: [ angle in degrees | ‘vertical’ | ‘horizontal’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_rotation_mode\"><code>set_rotation_mode(m)</code></dt> <dd>\n<p>set text rotation mode. If “anchor”, the un-rotated text will first aligned according to their <em>ha</em> and <em>va</em>, and then will be rotated with the alignement reference point as a origin. If None (default), the text will be rotated first then will be aligned.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_size\"><code>set_size(fontsize)</code></dt> <dd>\n<p>Set the font size. May be either a size string, relative to the default font size, or an absolute font size in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [size in points | ‘xx-small’ | ‘x-small’ | ‘small’ |</dt> <dd>‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_stretch\"><code>set_stretch(stretch)</code></dt> <dd>\n<p>Set the font stretch (horizontal condensation or expansion).</p> <dl class=\"docutils\"> <dt>ACCEPTS: [a numeric value in range 0-1000 | ‘ultra-condensed’ |</dt> <dd>‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_style\"><code>set_style(fontstyle)</code></dt> <dd>\n<p>Set the font style.</p> <p>ACCEPTS: [ ‘normal’ | ‘italic’ | ‘oblique’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_text\"><code>set_text(s)</code></dt> <dd>\n<p>Set the text string <em>s</em></p> <p>It may contain newlines (<code>\\n</code>) or math in LaTeX syntax.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_usetex\"><code>set_usetex(usetex)</code></dt> <dd>\n<p>Set this <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> object to render using TeX (or not).</p> <p>If <code>None</code> is given, the option will be reset to use the value of <code>rcParams['text.usetex']</code></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_va\"><code>set_va(align)</code></dt> <dd>\n<p>alias for set_verticalalignment</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_variant\"><code>set_variant(variant)</code></dt> <dd>\n<p>Set the font variant, either ‘normal’ or ‘small-caps’.</p> <p>ACCEPTS: [ ‘normal’ | ‘small-caps’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_verticalalignment\"><code>set_verticalalignment(align)</code></dt> <dd>\n<p>Set the vertical alignment</p> <p>ACCEPTS: [ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_weight\"><code>set_weight(weight)</code></dt> <dd>\n<p>Set the font weight.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ |</dt> <dd>‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_wrap\"><code>set_wrap(wrap)</code></dt> <dd>\n<p>Sets the wrapping state for the text.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_x\"><code>set_x(x)</code></dt> <dd>\n<p>Set the <em>x</em> position of the text</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.set_y\"><code>set_y(y)</code></dt> <dd>\n<p>Set the <em>y</em> position of the text</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.update\"><code>update(kwargs)</code></dt> <dd>\n<p>Update properties from a dictionary.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.update_bbox_position_size\"><code>update_bbox_position_size(renderer)</code></dt> <dd>\n<p>Update the location and the size of the bbox. This method should be used when the position and size of the bbox needs to be updated before actually drawing the bbox.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.Text.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>Copy properties from other to self</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.text.Text.zorder\"><code>zorder = 3</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.text.TextWithDash\"><code>class matplotlib.text.TextWithDash(x=0, y=0, text='', color=None, verticalalignment='center', horizontalalignment='center', multialignment=None, fontproperties=None, rotation=None, linespacing=None, dashlength=0.0, dashdirection=0, dashrotation=None, dashpad=3, dashpush=0)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a></p> <p>This is basically a <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> with a dash (drawn with a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a>) before/after it. It is intended to be a drop-in replacement for <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a>, and should behave identically to it when <em>dashlength</em> = 0.0.</p> <p>The dash always comes between the point specified by <a class=\"reference internal\" href=\"#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>set_position()</code></a> and the text. When a dash exists, the text alignment arguments (<em>horizontalalignment</em>, <em>verticalalignment</em>) are ignored.</p> <p><em>dashlength</em> is the length of the dash in canvas units. (default = 0.0).</p> <p><em>dashdirection</em> is one of 0 or 1, where 0 draws the dash after the text and 1 before. (default = 0).</p> <p><em>dashrotation</em> specifies the rotation of the dash, and should generally stay <em>None</em>. In this case <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash.get_dashrotation\" title=\"matplotlib.text.TextWithDash.get_dashrotation\"><code>get_dashrotation()</code></a> returns <a class=\"reference internal\" href=\"#matplotlib.text.Text.get_rotation\" title=\"matplotlib.text.Text.get_rotation\"><code>get_rotation()</code></a>. (i.e., the dash takes its rotation from the text’s rotation). Because the text center is projected onto the dash, major deviations in the rotation cause what may be considered visually unappealing results. (default = <em>None</em>)</p> <p><em>dashpad</em> is a padding length to add (or subtract) space between the text and the dash, in canvas units. (default = 3)</p> <p><em>dashpush</em> “pushes” the dash and text away from the point specified by <a class=\"reference internal\" href=\"#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>set_position()</code></a> by the amount in canvas units. (default = 0)</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The alignment of the two objects is based on the bounding box of the <a class=\"reference internal\" href=\"#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a>, as obtained by <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.get_window_extent\" title=\"matplotlib.artist.Artist.get_window_extent\"><code>get_window_extent()</code></a>. This, in turn, appears to depend on the font metrics as given by the rendering backend. Hence the quality of the “centering” of the label text with respect to the dash varies depending on the backend used.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">I’m not sure that I got the <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash.get_window_extent\" title=\"matplotlib.text.TextWithDash.get_window_extent\"><code>get_window_extent()</code></a> right, or whether that’s sufficient for providing the object bounding box.</p> </div> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Draw the <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash\" title=\"matplotlib.text.TextWithDash\"><code>TextWithDash</code></a> object to the given <em>renderer</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_dashdirection\"><code>get_dashdirection()</code></dt> <dd>\n<p>Get the direction dash. 1 is before the text and 0 is after.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_dashlength\"><code>get_dashlength()</code></dt> <dd>\n<p>Get the length of the dash.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_dashpad\"><code>get_dashpad()</code></dt> <dd>\n<p>Get the extra spacing between the dash and the text, in canvas units.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_dashpush\"><code>get_dashpush()</code></dt> <dd>\n<p>Get the extra spacing between the dash and the specified text position, in canvas units.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_dashrotation\"><code>get_dashrotation()</code></dt> <dd>\n<p>Get the rotation of the dash in degrees.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>return the figure instance the artist belongs to</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_position\"><code>get_position()</code></dt> <dd>\n<p>Return the position of the text as a tuple (<em>x</em>, <em>y</em>)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_prop_tup\"><code>get_prop_tup()</code></dt> <dd>\n<p>Return a hashable tuple of properties.</p> <p>Not intended to be human readable, but useful for backends who want to cache derived information about text (e.g., layouts) and need to know if the text has changed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_unitless_position\"><code>get_unitless_position()</code></dt> <dd>\n<p>Return the unitless position of the text as a tuple (<em>x</em>, <em>y</em>)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.get_window_extent\"><code>get_window_extent(renderer=None)</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a> object bounding the text, in display units.</p> <p>In addition to being used internally, this is useful for specifying clickable regions in a png file on a web page.</p> <p><em>renderer</em> defaults to the _renderer attribute of the text object. This is not assigned until the first execution of <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash.draw\" title=\"matplotlib.text.TextWithDash.draw\"><code>draw()</code></a>, so you must use this kwarg if you want to call <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash.get_window_extent\" title=\"matplotlib.text.TextWithDash.get_window_extent\"><code>get_window_extent()</code></a> prior to the first <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash.draw\" title=\"matplotlib.text.TextWithDash.draw\"><code>draw()</code></a>. For getting web page regions, it is simpler to call the method after saving the figure.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_dashdirection\"><code>set_dashdirection(dd)</code></dt> <dd>\n<p>Set the direction of the dash following the text. 1 is before the text and 0 is after. The default is 0, which is what you’d want for the typical case of ticks below and on the left of the figure.</p> <p>ACCEPTS: int (1 is before, 0 is after)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_dashlength\"><code>set_dashlength(dl)</code></dt> <dd>\n<p>Set the length of the dash.</p> <p>ACCEPTS: float (canvas units)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_dashpad\"><code>set_dashpad(dp)</code></dt> <dd>\n<p>Set the “pad” of the TextWithDash, which is the extra spacing between the dash and the text, in canvas units.</p> <p>ACCEPTS: float (canvas units)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_dashpush\"><code>set_dashpush(dp)</code></dt> <dd>\n<p>Set the “push” of the TextWithDash, which is the extra spacing between the beginning of the dash and the specified position.</p> <p>ACCEPTS: float (canvas units)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_dashrotation\"><code>set_dashrotation(dr)</code></dt> <dd>\n<p>Set the rotation of the dash, in degrees</p> <p>ACCEPTS: float (degrees)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the figure instance the artist belong to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_position\"><code>set_position(xy)</code></dt> <dd>\n<p>Set the (<em>x</em>, <em>y</em>) position of the <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash\" title=\"matplotlib.text.TextWithDash\"><code>TextWithDash</code></a>.</p> <p>ACCEPTS: (x, y)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_x\"><code>set_x(x)</code></dt> <dd>\n<p>Set the <em>x</em> position of the <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash\" title=\"matplotlib.text.TextWithDash\"><code>TextWithDash</code></a>.</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.set_y\"><code>set_y(y)</code></dt> <dd>\n<p>Set the <em>y</em> position of the <a class=\"reference internal\" href=\"#matplotlib.text.TextWithDash\" title=\"matplotlib.text.TextWithDash\"><code>TextWithDash</code></a>.</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.text.TextWithDash.update_coords\"><code>update_coords(renderer)</code></dt> <dd>\n<p>Computes the actual <em>x</em>, <em>y</em> coordinates for text based on the input <em>x</em>, <em>y</em> and the <em>dashlength</em>. Since the rotation is with respect to the actual canvas’s coordinates we need to map back and forth.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.text.get_rotation\"><code>matplotlib.text.get_rotation(rotation)</code></dt> <dd>\n<p>Return the text angle as float. The returned angle is between 0 and 360 deg.</p> <p><em>rotation</em> may be ‘horizontal’, ‘vertical’, or a numeric value in degrees.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/text_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/text_api.html</a>\n  </p>\n</div>\n","widgets_api":"<h1 id=\"widgets\">widgets</h1>  <h2 id=\"matplotlib-widgets\">matplotlib.widgets</h2>  <h3 id=\"module-matplotlib.widgets\">GUI neutral widgets</h3> <p>Widgets that are designed to work for any of the GUI backends. All of these widgets require you to predefine a <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> instance and pass that as the first arg. matplotlib doesn’t try to be too smart with respect to layout – you will have to figure out how wide and tall you want your Axes to be to accommodate your widget.</p> <dl class=\"class\"> <dt id=\"matplotlib.widgets.AxesWidget\"><code>class matplotlib.widgets.AxesWidget(ax)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.Widget\" title=\"matplotlib.widgets.Widget\"><code>matplotlib.widgets.Widget</code></a></p> <p>Widget that is connected to a single <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a>.</p> <p>To guarantee that the widget remains responsive and not garbage-collected, a reference to the object should be maintained by the user.</p> <p>This is necessary because the callback registry maintains only weak-refs to the functions, which are member functions of the widget. If there are no references to the widget object it may be garbage collected which will disconnect the callbacks.</p> <p>Attributes:</p> <dl class=\"docutils\"> <dt>\n<em>ax</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a></span>\n</dt> <dd>The parent axes for the widget</dd> <dt>\n<em>canvas</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.FigureCanvasBase\" title=\"matplotlib.backend_bases.FigureCanvasBase\"><code>FigureCanvasBase</code></a> subclass</span>\n</dt> <dd>The parent figure canvas for the widget.</dd> <dt>\n<em>active</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span>\n</dt> <dd>If False, the widget does not respond to events.</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.AxesWidget.connect_event\"><code>connect_event(event, callback)</code></dt> <dd>\n<p>Connect callback with an event.</p> <p>This should be used in lieu of <code>figure.canvas.mpl_connect</code> since this function stores callback ids for later clean up.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.AxesWidget.disconnect_events\"><code>disconnect_events()</code></dt> <dd>\n<p>Disconnect all events created by this widget.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.Button\"><code>class matplotlib.widgets.Button(ax, label, image=None, color='0.85', hovercolor='0.95')</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.AxesWidget\" title=\"matplotlib.widgets.AxesWidget\"><code>matplotlib.widgets.AxesWidget</code></a></p> <p>A GUI neutral button.</p> <p>For the button to remain responsive you must keep a reference to it.</p> <p>The following attributes are accessible</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>ax</em></dt> <dd>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> the button renders into.</dd> <dt><em>label</em></dt> <dd>A <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instance.</dd> <dt><em>color</em></dt> <dd>The color of the button when not hovering.</dd> <dt><em>hovercolor</em></dt> <dd>The color of the button when hovering.</dd> </dl> </div>\n</blockquote> <p>Call <a class=\"reference internal\" href=\"#matplotlib.widgets.Button.on_clicked\" title=\"matplotlib.widgets.Button.on_clicked\"><code>on_clicked()</code></a> to connect to the button</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : matplotlib.axes.Axes</p> <blockquote> <div>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> instance the button will be placed into.</p> </div>\n</blockquote> <p><strong>label</strong> : str</p> <blockquote> <div>\n<p>The button text. Accepts string.</p> </div>\n</blockquote> <p><strong>image</strong> : array, mpl image, Pillow Image</p> <blockquote> <div>\n<p>The image to place in the button, if not <em>None</em>. Can be any legal arg to imshow (numpy array, matplotlib Image instance, or Pillow Image).</p> </div>\n</blockquote> <p><strong>color</strong> : color</p> <blockquote> <div>\n<p>The color of the button when not activated</p> </div>\n</blockquote> <p><strong>hovercolor</strong> : color</p> <blockquote class=\"last\"> <div>\n<p>The color of the button when the mouse is over it</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Button.disconnect\"><code>disconnect(cid)</code></dt> <dd>\n<p>remove the observer with connection id <em>cid</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Button.on_clicked\"><code>on_clicked(func)</code></dt> <dd>\n<p>When the button is clicked, call this <em>func</em> with event.</p> <p>A connection id is returned. It can be used to disconnect the button from its callback.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.CheckButtons\"><code>class matplotlib.widgets.CheckButtons(ax, labels, actives)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.AxesWidget\" title=\"matplotlib.widgets.AxesWidget\"><code>matplotlib.widgets.AxesWidget</code></a></p> <p>A GUI neutral radio button.</p> <p>For the check buttons to remain responsive you must keep a reference to this object.</p> <p>The following attributes are exposed</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>ax</em></dt> <dd>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> instance the buttons are located in</dd> <dt><em>labels</em></dt> <dd>List of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instances</dd> <dt><em>lines</em></dt> <dd>List of (line1, line2) tuples for the x’s in the check boxes. These lines exist for each box, but have <code>set_visible(False)</code> when its box is not checked.</dd> <dt><em>rectangles</em></dt> <dd>List of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>matplotlib.patches.Rectangle</code></a> instances</dd> </dl> </div>\n</blockquote> <p>Connect to the CheckButtons with the <a class=\"reference internal\" href=\"#matplotlib.widgets.CheckButtons.on_clicked\" title=\"matplotlib.widgets.CheckButtons.on_clicked\"><code>on_clicked()</code></a> method</p> <p>Add check buttons to <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> instance <em>ax</em></p> <dl class=\"docutils\"> <dt><em>labels</em></dt> <dd>A len(buttons) list of labels as strings</dd> <dt><em>actives</em></dt> <dd>\n<dl class=\"first last docutils\"> <dt>A len(buttons) list of booleans indicating whether</dt> <dd>the button is active</dd> </dl> </dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.CheckButtons.disconnect\"><code>disconnect(cid)</code></dt> <dd>\n<p>remove the observer with connection id <em>cid</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.CheckButtons.on_clicked\"><code>on_clicked(func)</code></dt> <dd>\n<p>When the button is clicked, call <em>func</em> with button label</p> <p>A connection id is returned which can be used to disconnect</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.CheckButtons.set_active\"><code>set_active(index)</code></dt> <dd>\n<p>Directly (de)activate a check button by index.</p> <dl class=\"docutils\"> <dt>\n<em>index</em> is an index into the original label list</dt> <dd>that this object was constructed with. Raises ValueError if <em>index</em> is invalid.</dd> </dl> <p>Callbacks will be triggered if <code>eventson</code> is True.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.Cursor\"><code>class matplotlib.widgets.Cursor(ax, horizOn=True, vertOn=True, useblit=False, **lineprops)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.AxesWidget\" title=\"matplotlib.widgets.AxesWidget\"><code>matplotlib.widgets.AxesWidget</code></a></p> <p>A horizontal and vertical line that spans the axes and moves with the pointer. You can turn off the hline or vline respectively with the following attributes:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>horizOn</em></dt> <dd>Controls the visibility of the horizontal line</dd> <dt><em>vertOn</em></dt> <dd>Controls the visibility of the horizontal line</dd> </dl> </div>\n</blockquote> <p>and the visibility of the cursor itself with the <em>visible</em> attribute.</p> <p>For the cursor to remain responsive you must keep a reference to it.</p> <p>Add a cursor to <em>ax</em>. If <code>useblit=True</code>, use the backend- dependent blitting features for faster updates (GTKAgg only for now). <em>lineprops</em> is a dictionary of line properties.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/widgets/cursor.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/widgets/cursor.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/widgets/cursor.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/widgets/cursor.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/cursor.png\" src=\"http://matplotlib.org/1.5.1/_images/cursor.png\"> </div> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Cursor.clear\"><code>clear(event)</code></dt> <dd>\n<p>clear the cursor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Cursor.onmove\"><code>onmove(event)</code></dt> <dd>\n<p>on mouse motion draw the cursor if visible</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.EllipseSelector\"><code>class matplotlib.widgets.EllipseSelector(ax, onselect, drawtype='box', minspanx=None, minspany=None, useblit=False, lineprops=None, rectprops=None, spancoords='data', button=None, maxdist=10, marker_props=None, interactive=False, state_modifier_keys=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.RectangleSelector\" title=\"matplotlib.widgets.RectangleSelector\"><code>matplotlib.widgets.RectangleSelector</code></a></p> <p>Select an elliptical region of an axes.</p> <p>For the cursor to remain responsive you must keep a reference to it.</p> <p>Example usage:</p> <pre data-language=\"python\">from matplotlib.widgets import  EllipseSelector\nfrom pylab import *\n\ndef onselect(eclick, erelease):\n  'eclick and erelease are matplotlib events at press and release'\n  print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))\n  print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))\n  print(' used button   : ', eclick.button)\n\ndef toggle_selector(event):\n    print(' Key pressed.')\n    if event.key in ['Q', 'q'] and toggle_selector.ES.active:\n        print(' EllipseSelector deactivated.')\n        toggle_selector.RS.set_active(False)\n    if event.key in ['A', 'a'] and not toggle_selector.ES.active:\n        print(' EllipseSelector activated.')\n        toggle_selector.ES.set_active(True)\n\nx = arange(100)/(99.0)\ny = sin(x)\nfig = figure\nax = subplot(111)\nax.plot(x,y)\n\ntoggle_selector.ES = EllipseSelector(ax, onselect, drawtype='line')\nconnect('key_press_event', toggle_selector)\nshow()\n</pre> <p>Create a selector in <em>ax</em>. When a selection is made, clear the span and call onselect with:</p> <pre data-language=\"python\">onselect(pos_1, pos_2)\n</pre> <p>and clear the drawn box/line. The <code>pos_1</code> and <code>pos_2</code> are arrays of length 2 containing the x- and y-coordinate.</p> <p>If <em>minspanx</em> is not <em>None</em> then events smaller than <em>minspanx</em> in x direction are ignored (it’s the same for y).</p> <p>The rectangle is drawn with <em>rectprops</em>; default:</p> <pre data-language=\"python\">rectprops = dict(facecolor='red', edgecolor = 'black',\n                 alpha=0.2, fill=True)\n</pre> <p>The line is drawn with <em>lineprops</em>; default:</p> <pre data-language=\"python\">lineprops = dict(color='black', linestyle='-',\n                 linewidth = 2, alpha=0.5)\n</pre> <p>Use <em>drawtype</em> if you want the mouse to draw a line, a box or nothing between click and actual position by setting</p> <p><code>drawtype = 'line'</code>, <code>drawtype='box'</code> or <code>drawtype = 'none'</code>.</p> <p><em>spancoords</em> is one of ‘data’ or ‘pixels’. If ‘data’, <em>minspanx</em> and <em>minspanx</em> will be interpreted in the same coordinates as the x and y axis. If ‘pixels’, they are in pixels.</p> <p><em>button</em> is a list of integers indicating which mouse buttons should be used for rectangle selection. You can also specify a single integer if only a single button is desired. Default is <em>None</em>, which does not limit which button can be used.</p> <dl class=\"docutils\"> <dt>Note, typically:</dt> <dd>1 = left mouse button 2 = center mouse button (scroll wheel) 3 = right mouse button</dd> </dl> <p><em>interactive</em> will draw a set of handles and allow you interact with the widget after it is drawn.</p> <p><em>state_modifier_keys</em> are keyboard modifiers that affect the behavior of the widget.</p> <p>The defaults are: dict(move=’ ‘, clear=’escape’, square=’shift’, center=’ctrl’)</p> <p>Keyboard modifiers, which: ‘move’: Move the existing shape. ‘clear’: Clear the current shape. ‘square’: Makes the shape square. ‘center’: Make the initial point the center of the shape. ‘square’ and ‘center’ can be combined.</p> <dl class=\"method\"> <dt id=\"matplotlib.widgets.EllipseSelector.draw_shape\"><code>draw_shape(extents)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.Lasso\"><code>class matplotlib.widgets.Lasso(ax, xy, callback=None, useblit=True)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.AxesWidget\" title=\"matplotlib.widgets.AxesWidget\"><code>matplotlib.widgets.AxesWidget</code></a></p> <p>Selection curve of an arbitrary shape.</p> <p>The selected path can be used in conjunction with <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path.contains_point\" title=\"matplotlib.path.Path.contains_point\"><code>contains_point()</code></a> to select data points from an image.</p> <p>Unlike <a class=\"reference internal\" href=\"#matplotlib.widgets.LassoSelector\" title=\"matplotlib.widgets.LassoSelector\"><code>LassoSelector</code></a>, this must be initialized with a starting point <code>xy</code>, and the <a class=\"reference internal\" href=\"#matplotlib.widgets.Lasso\" title=\"matplotlib.widgets.Lasso\"><code>Lasso</code></a> events are destroyed upon release.</p> <p>Parameters:</p> <dl class=\"docutils\"> <dt>\n<em>ax</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a></span>\n</dt> <dd>The parent axes for the widget.</dd> <dt>\n<em>xy</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span>\n</dt> <dd>Coordinates of the start of the lasso.</dd> <dt>\n<em>callback</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span>\n</dt> <dd>Whenever the lasso is released, the <code>callback</code> function is called and passed the vertices of the selected path.</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Lasso.onmove\"><code>onmove(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Lasso.onrelease\"><code>onrelease(event)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.LassoSelector\"><code>class matplotlib.widgets.LassoSelector(ax, onselect=None, useblit=True, lineprops=None, button=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.widgets._SelectorWidget</code></p> <p>Selection curve of an arbitrary shape.</p> <p>For the selector to remain responsive you must keep a reference to it.</p> <p>The selected path can be used in conjunction with <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path.contains_point\" title=\"matplotlib.path.Path.contains_point\"><code>contains_point()</code></a> to select data points from an image.</p> <p>In contrast to <a class=\"reference internal\" href=\"#matplotlib.widgets.Lasso\" title=\"matplotlib.widgets.Lasso\"><code>Lasso</code></a>, <a class=\"reference internal\" href=\"#matplotlib.widgets.LassoSelector\" title=\"matplotlib.widgets.LassoSelector\"><code>LassoSelector</code></a> is written with an interface similar to <a class=\"reference internal\" href=\"#matplotlib.widgets.RectangleSelector\" title=\"matplotlib.widgets.RectangleSelector\"><code>RectangleSelector</code></a> and <a class=\"reference internal\" href=\"#matplotlib.widgets.SpanSelector\" title=\"matplotlib.widgets.SpanSelector\"><code>SpanSelector</code></a> and will continue to interact with the axes until disconnected.</p> <p>Parameters:</p> <dl class=\"docutils\"> <dt>\n<em>ax</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a></span>\n</dt> <dd>The parent axes for the widget.</dd> <dt>\n<em>onselect</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span>\n</dt> <dd>Whenever the lasso is released, the <code>onselect</code> function is called and passed the vertices of the selected path.</dd> </dl> <p>Example usage:</p> <pre data-language=\"python\">   ax = subplot(111)\n   ax.plot(x,y)\n\n   def onselect(verts):\n       print verts\n   lasso = LassoSelector(ax, onselect)\n\n*button* is a list of integers indicating which mouse buttons should\n   be used for rectangle selection.  You can also specify a single\n   integer if only a single button is desired.  Default is *None*,\n   which does not limit which button can be used.\n\n   Note, typically:\n    1 = left mouse button\n    2 = center mouse button (scroll wheel)\n    3 = right mouse button\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.widgets.LassoSelector.onpress\"><code>onpress(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.LassoSelector.onrelease\"><code>onrelease(event)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.LockDraw\"><code>class matplotlib.widgets.LockDraw</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Some widgets, like the cursor, draw onto the canvas, and this is not desirable under all circumstances, like when the toolbar is in zoom-to-rect mode and drawing a rectangle. The module level “lock” allows someone to grab the lock and prevent other widgets from drawing. Use <code>matplotlib.widgets.lock(someobj)</code> to prevent other widgets from drawing while you’re interacting with the canvas.</p> <dl class=\"method\"> <dt id=\"matplotlib.widgets.LockDraw.available\"><code>available(o)</code></dt> <dd>\n<p>drawing is available to <em>o</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.LockDraw.isowner\"><code>isowner(o)</code></dt> <dd>\n<p>Return True if <em>o</em> owns this lock</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.LockDraw.locked\"><code>locked()</code></dt> <dd>\n<p>Return True if the lock is currently held by an owner</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.LockDraw.release\"><code>release(o)</code></dt> <dd>\n<p>release the lock</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.MultiCursor\"><code>class matplotlib.widgets.MultiCursor(canvas, axes, useblit=True, horizOn=False, vertOn=True, **lineprops)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.Widget\" title=\"matplotlib.widgets.Widget\"><code>matplotlib.widgets.Widget</code></a></p> <p>Provide a vertical (default) and/or horizontal line cursor shared between multiple axes.</p> <p>For the cursor to remain responsive you must keep a reference to it.</p> <p>Example usage:</p> <pre data-language=\"python\">from matplotlib.widgets import MultiCursor\nfrom pylab import figure, show, np\n\nt = np.arange(0.0, 2.0, 0.01)\ns1 = np.sin(2*np.pi*t)\ns2 = np.sin(4*np.pi*t)\nfig = figure()\nax1 = fig.add_subplot(211)\nax1.plot(t, s1)\n\nax2 = fig.add_subplot(212, sharex=ax1)\nax2.plot(t, s2)\n\nmulti = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1,\n                    horizOn=False, vertOn=True)\nshow()\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.widgets.MultiCursor.clear\"><code>clear(event)</code></dt> <dd>\n<p>clear the cursor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.MultiCursor.connect\"><code>connect()</code></dt> <dd>\n<p>connect events</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.MultiCursor.disconnect\"><code>disconnect()</code></dt> <dd>\n<p>disconnect events</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.MultiCursor.onmove\"><code>onmove(event)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.RadioButtons\"><code>class matplotlib.widgets.RadioButtons(ax, labels, active=0, activecolor='blue')</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.AxesWidget\" title=\"matplotlib.widgets.AxesWidget\"><code>matplotlib.widgets.AxesWidget</code></a></p> <p>A GUI neutral radio button.</p> <p>For the buttons to remain responsive you must keep a reference to this object.</p> <p>The following attributes are exposed:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>ax</em></dt> <dd>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> instance the buttons are in</dd> <dt><em>activecolor</em></dt> <dd>The color of the button when clicked</dd> <dt><em>labels</em></dt> <dd>A list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instances</dd> <dt><em>circles</em></dt> <dd>A list of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Circle\" title=\"matplotlib.patches.Circle\"><code>matplotlib.patches.Circle</code></a> instances</dd> <dt><em>value_selected</em></dt> <dd>A string listing the current value selected</dd> </dl> </div>\n</blockquote> <p>Connect to the RadioButtons with the <a class=\"reference internal\" href=\"#matplotlib.widgets.RadioButtons.on_clicked\" title=\"matplotlib.widgets.RadioButtons.on_clicked\"><code>on_clicked()</code></a> method</p> <p>Add radio buttons to <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> instance <em>ax</em></p> <dl class=\"docutils\"> <dt><em>labels</em></dt> <dd>A len(buttons) list of labels as strings</dd> <dt><em>active</em></dt> <dd>The index into labels for the button that is active</dd> <dt><em>activecolor</em></dt> <dd>The color of the button when clicked</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.RadioButtons.disconnect\"><code>disconnect(cid)</code></dt> <dd>\n<p>remove the observer with connection id <em>cid</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.RadioButtons.on_clicked\"><code>on_clicked(func)</code></dt> <dd>\n<p>When the button is clicked, call <em>func</em> with button label</p> <p>A connection id is returned which can be used to disconnect</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.RadioButtons.set_active\"><code>set_active(index)</code></dt> <dd>\n<p>Trigger which radio button to make active.</p> <dl class=\"docutils\"> <dt>\n<em>index</em> is an index into the original label list</dt> <dd>that this object was constructed with. Raise ValueError if the index is invalid.</dd> </dl> <p>Callbacks will be triggered if <code>eventson</code> is True.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.RectangleSelector\"><code>class matplotlib.widgets.RectangleSelector(ax, onselect, drawtype='box', minspanx=None, minspany=None, useblit=False, lineprops=None, rectprops=None, spancoords='data', button=None, maxdist=10, marker_props=None, interactive=False, state_modifier_keys=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.widgets._SelectorWidget</code></p> <p>Select a rectangular region of an axes.</p> <p>For the cursor to remain responsive you must keep a reference to it.</p> <p>Example usage:</p> <pre data-language=\"python\">from matplotlib.widgets import  RectangleSelector\nfrom pylab import *\n\ndef onselect(eclick, erelease):\n  'eclick and erelease are matplotlib events at press and release'\n  print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))\n  print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))\n  print(' used button   : ', eclick.button)\n\ndef toggle_selector(event):\n    print(' Key pressed.')\n    if event.key in ['Q', 'q'] and toggle_selector.RS.active:\n        print(' RectangleSelector deactivated.')\n        toggle_selector.RS.set_active(False)\n    if event.key in ['A', 'a'] and not toggle_selector.RS.active:\n        print(' RectangleSelector activated.')\n        toggle_selector.RS.set_active(True)\n\nx = arange(100)/(99.0)\ny = sin(x)\nfig = figure\nax = subplot(111)\nax.plot(x,y)\n\ntoggle_selector.RS = RectangleSelector(ax, onselect, drawtype='line')\nconnect('key_press_event', toggle_selector)\nshow()\n</pre> <p>Create a selector in <em>ax</em>. When a selection is made, clear the span and call onselect with:</p> <pre data-language=\"python\">onselect(pos_1, pos_2)\n</pre> <p>and clear the drawn box/line. The <code>pos_1</code> and <code>pos_2</code> are arrays of length 2 containing the x- and y-coordinate.</p> <p>If <em>minspanx</em> is not <em>None</em> then events smaller than <em>minspanx</em> in x direction are ignored (it’s the same for y).</p> <p>The rectangle is drawn with <em>rectprops</em>; default:</p> <pre data-language=\"python\">rectprops = dict(facecolor='red', edgecolor = 'black',\n                 alpha=0.2, fill=True)\n</pre> <p>The line is drawn with <em>lineprops</em>; default:</p> <pre data-language=\"python\">lineprops = dict(color='black', linestyle='-',\n                 linewidth = 2, alpha=0.5)\n</pre> <p>Use <em>drawtype</em> if you want the mouse to draw a line, a box or nothing between click and actual position by setting</p> <p><code>drawtype = 'line'</code>, <code>drawtype='box'</code> or <code>drawtype = 'none'</code>.</p> <p><em>spancoords</em> is one of ‘data’ or ‘pixels’. If ‘data’, <em>minspanx</em> and <em>minspanx</em> will be interpreted in the same coordinates as the x and y axis. If ‘pixels’, they are in pixels.</p> <p><em>button</em> is a list of integers indicating which mouse buttons should be used for rectangle selection. You can also specify a single integer if only a single button is desired. Default is <em>None</em>, which does not limit which button can be used.</p> <dl class=\"docutils\"> <dt>Note, typically:</dt> <dd>1 = left mouse button 2 = center mouse button (scroll wheel) 3 = right mouse button</dd> </dl> <p><em>interactive</em> will draw a set of handles and allow you interact with the widget after it is drawn.</p> <p><em>state_modifier_keys</em> are keyboard modifiers that affect the behavior of the widget.</p> <p>The defaults are: dict(move=’ ‘, clear=’escape’, square=’shift’, center=’ctrl’)</p> <p>Keyboard modifiers, which: ‘move’: Move the existing shape. ‘clear’: Clear the current shape. ‘square’: Makes the shape square. ‘center’: Make the initial point the center of the shape. ‘square’ and ‘center’ can be combined.</p> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.RectangleSelector.center\"><code>center</code></dt> <dd>\n<p>Center of rectangle</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.RectangleSelector.corners\"><code>corners</code></dt> <dd>\n<p>Corners of rectangle from lower left, moving clockwise.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.RectangleSelector.draw_shape\"><code>draw_shape(extents)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.RectangleSelector.edge_centers\"><code>edge_centers</code></dt> <dd>\n<p>Midpoint of rectangle edges from left, moving clockwise.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.RectangleSelector.extents\"><code>extents</code></dt> <dd>\n<p>Return (xmin, xmax, ymin, ymax).</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.RectangleSelector.geometry\"><code>geometry</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.Slider\"><code>class matplotlib.widgets.Slider(ax, label, valmin, valmax, valinit=0.5, valfmt='%1.2f', closedmin=True, closedmax=True, slidermin=None, slidermax=None, dragging=True, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.AxesWidget\" title=\"matplotlib.widgets.AxesWidget\"><code>matplotlib.widgets.AxesWidget</code></a></p> <p>A slider representing a floating point range.</p> <p>For the slider to remain responsive you must maintain a reference to it.</p> <dl class=\"docutils\"> <dt>The following attributes are defined</dt> <dd>\n<p class=\"first\"><em>ax</em> : the slider <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a> instance</p> <p><em>val</em> : the current slider value</p> <dl class=\"docutils\"> <dt>\n<em>vline</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a> instance</span>\n</dt> <dd>representing the initial value of the slider</dd> <dt>\n<em>poly</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">A <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>matplotlib.patches.Polygon</code></a> instance</span>\n</dt> <dd>which is the slider knob</dd> </dl> <p><em>valfmt</em> : the format string for formatting the slider text</p> <dl class=\"docutils\"> <dt>\n<em>label</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instance</span>\n</dt> <dd>for the slider label</dd> </dl> <p><em>closedmin</em> : whether the slider is closed on the minimum</p> <p><em>closedmax</em> : whether the slider is closed on the maximum</p> <dl class=\"docutils\"> <dt>\n<em>slidermin</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">another slider - if not <em>None</em>, this slider must be</span>\n</dt> <dd>greater than <em>slidermin</em>\n</dd> <dt>\n<em>slidermax</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">another slider - if not <em>None</em>, this slider must be</span>\n</dt> <dd>less than <em>slidermax</em>\n</dd> </dl> <p class=\"last\"><em>dragging</em> : allow for mouse dragging on slider</p> </dd> </dl> <p>Call <a class=\"reference internal\" href=\"#matplotlib.widgets.Slider.on_changed\" title=\"matplotlib.widgets.Slider.on_changed\"><code>on_changed()</code></a> to connect to the slider event</p> <p>Create a slider from <em>valmin</em> to <em>valmax</em> in axes <em>ax</em>.</p> <p>Additional kwargs are passed on to <code>self.poly</code> which is the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>matplotlib.patches.Rectangle</code></a> that draws the slider knob. See the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>matplotlib.patches.Rectangle</code></a> documentation for valid property names (e.g., <em>facecolor</em>, <em>edgecolor</em>, <em>alpha</em>, ...).</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : Axes</p> <blockquote> <div>\n<p>The Axes to put the slider in</p> </div>\n</blockquote> <p><strong>label</strong> : str</p> <blockquote> <div>\n<p>Slider label</p> </div>\n</blockquote> <p><strong>valmin</strong> : float</p> <blockquote> <div>\n<p>The minimum value of the slider</p> </div>\n</blockquote> <p><strong>valmax</strong> : float</p> <blockquote> <div>\n<p>The maximum value of the slider</p> </div>\n</blockquote> <p><strong>valinit</strong> : float</p> <blockquote> <div>\n<p>The slider initial position</p> </div>\n</blockquote> <p><strong>label</strong> : str</p> <blockquote> <div>\n<p>The slider label</p> </div>\n</blockquote> <p><strong>valfmt</strong> : str</p> <blockquote> <div>\n<p>Used to format the slider value, fprint format string</p> </div>\n</blockquote> <p><strong>closedmin</strong> : bool</p> <blockquote> <div>\n<p>Indicate whether the slider interval is closed on the bottom</p> </div>\n</blockquote> <p><strong>closedmax</strong> : bool</p> <blockquote> <div>\n<p>Indicate whether the slider interval is closed on the top</p> </div>\n</blockquote> <p><strong>slidermin</strong> : Slider or None</p> <blockquote> <div>\n<p>Do not allow the current slider to have a value less than <code>slidermin</code></p> </div>\n</blockquote> <p><strong>slidermax</strong> : Slider or None</p> <blockquote> <div>\n<p>Do not allow the current slider to have a value greater than <code>slidermax</code></p> </div>\n</blockquote> <p><strong>dragging</strong> : bool</p> <blockquote class=\"last\"> <div>\n<p>if the slider can be dragged by the mouse</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Slider.disconnect\"><code>disconnect(cid)</code></dt> <dd>\n<p>remove the observer with connection id <em>cid</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Slider.on_changed\"><code>on_changed(func)</code></dt> <dd>\n<p>When the slider value is changed, call <em>func</em> with the new slider position</p> <p>A connection id is returned which can be used to disconnect</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Slider.reset\"><code>reset()</code></dt> <dd>\n<p>reset the slider to the initial value if needed</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Slider.set_val\"><code>set_val(val)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.SpanSelector\"><code>class matplotlib.widgets.SpanSelector(ax, onselect, direction, minspan=None, useblit=False, rectprops=None, onmove_callback=None, span_stays=False, button=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.widgets._SelectorWidget</code></p> <p>Select a min/max range of the x or y axes for a matplotlib Axes.</p> <p>For the selector to remain responsive you must keep a reference to it.</p> <p>Example usage:</p> <pre data-language=\"python\">ax = subplot(111)\nax.plot(x,y)\n\ndef onselect(vmin, vmax):\n    print vmin, vmax\nspan = SpanSelector(ax, onselect, 'horizontal')\n</pre> <p><em>onmove_callback</em> is an optional callback that is called on mouse move within the span range</p> <p>Create a span selector in <em>ax</em>. When a selection is made, clear the span and call <em>onselect</em> with:</p> <pre data-language=\"python\">onselect(vmin, vmax)\n</pre> <p>and clear the span.</p> <p><em>direction</em> must be ‘horizontal’ or ‘vertical’</p> <p>If <em>minspan</em> is not <em>None</em>, ignore events smaller than <em>minspan</em></p> <p>The span rectangle is drawn with <em>rectprops</em>; default:</p> <pre data-language=\"python\">rectprops = dict(facecolor='red', alpha=0.5)\n</pre> <p>Set the visible attribute to <em>False</em> if you want to turn off the functionality of the span selector</p> <p>If <em>span_stays</em> is True, the span stays visble after making a valid selection.</p> <p><em>button</em> is a list of integers indicating which mouse buttons should be used for selection. You can also specify a single integer if only a single button is desired. Default is <em>None</em>, which does not limit which button can be used.</p> <dl class=\"docutils\"> <dt>Note, typically:</dt> <dd>1 = left mouse button 2 = center mouse button (scroll wheel) 3 = right mouse button</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.SpanSelector.ignore\"><code>ignore(event)</code></dt> <dd>\n<p>return <em>True</em> if <em>event</em> should be ignored</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.SpanSelector.new_axes\"><code>new_axes(ax)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.SubplotTool\"><code>class matplotlib.widgets.SubplotTool(targetfig, toolfig)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.widgets.Widget\" title=\"matplotlib.widgets.Widget\"><code>matplotlib.widgets.Widget</code></a></p> <p>A tool to adjust the subplot params of a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a>.</p> <dl class=\"docutils\"> <dt><em>targetfig</em></dt> <dd>The figure instance to adjust.</dd> <dt><em>toolfig</em></dt> <dd>The figure instance to embed the subplot tool into. If <em>None</em>, a default figure will be created. If you are using this from the GUI</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.SubplotTool.funcbottom\"><code>funcbottom(val)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.SubplotTool.funchspace\"><code>funchspace(val)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.SubplotTool.funcleft\"><code>funcleft(val)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.SubplotTool.funcright\"><code>funcright(val)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.SubplotTool.functop\"><code>functop(val)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.SubplotTool.funcwspace\"><code>funcwspace(val)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.ToolHandles\"><code>class matplotlib.widgets.ToolHandles(ax, x, y, marker='o', marker_props=None, useblit=True)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Control handles for canvas tools.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ax</strong> : <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>matplotlib.axes.Axes</code></a></p> <blockquote> <div>\n<p>Matplotlib axes where tool handles are displayed.</p> </div>\n</blockquote> <p><strong>x, y</strong> : 1D arrays</p> <blockquote> <div>\n<p>Coordinates of control handles.</p> </div>\n</blockquote> <p><strong>marker</strong> : str</p> <blockquote> <div>\n<p>Shape of marker used to display handle. See <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>matplotlib.pyplot.plot</code></a>.</p> </div>\n</blockquote> <p><strong>marker_props</strong> : dict</p> <blockquote class=\"last\"> <div>\n<p>Additional marker properties. See <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a>.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.widgets.ToolHandles.closest\"><code>closest(x, y)</code></dt> <dd>\n<p>Return index and pixel distance to closest index.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.ToolHandles.set_animated\"><code>set_animated(val)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.ToolHandles.set_data\"><code>set_data(pts, y=None)</code></dt> <dd>\n<p>Set x and y positions of handles</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.ToolHandles.set_visible\"><code>set_visible(val)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.ToolHandles.x\"><code>x</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.ToolHandles.y\"><code>y</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.widgets.Widget\"><code>class matplotlib.widgets.Widget</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Abstract base class for GUI neutral widgets</p> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.Widget.active\"><code>active</code></dt> <dd>\n<p>Is the widget active?</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.Widget.drawon\"><code>drawon = True</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.widgets.Widget.eventson\"><code>eventson = True</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Widget.get_active\"><code>get_active()</code></dt> <dd>\n<p>Get whether the widget is active.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Widget.ignore\"><code>ignore(event)</code></dt> <dd>\n<p>Return True if event should be ignored.</p> <p>This method (or a version of it) should be called at the beginning of any event callback.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.widgets.Widget.set_active\"><code>set_active(active)</code></dt> <dd>\n<p>Set whether the widget is active.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/widgets_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/widgets_api.html</a>\n  </p>\n</div>\n","backend_tools_api":"<h1 id=\"matplotlib-backend-tools\">matplotlib.backend_tools</h1> <p id=\"module-matplotlib.backend_tools\">Abstract base classes define the primitives for Tools. These tools are used by <a class=\"reference internal\" href=\"backend_managers_api#matplotlib.backend_managers.ToolManager\" title=\"matplotlib.backend_managers.ToolManager\"><code>matplotlib.backend_managers.ToolManager</code></a></p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>ToolBase</code></a></dt> <dd>Simple stateless tool</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase\" title=\"matplotlib.backend_tools.ToolToggleBase\"><code>ToolToggleBase</code></a></dt> <dd>Tool that has two states, only one Toggle tool can be active at any given time for the same <a class=\"reference internal\" href=\"backend_managers_api#matplotlib.backend_managers.ToolManager\" title=\"matplotlib.backend_managers.ToolManager\"><code>matplotlib.backend_managers.ToolManager</code></a>\n</dd> </dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.AxisScaleBase\"><code>class matplotlib.backend_tools.AxisScaleBase(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase\" title=\"matplotlib.backend_tools.ToolToggleBase\"><code>matplotlib.backend_tools.ToolToggleBase</code></a></p> <p>Base Tool to toggle between linear and logarithmic</p> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.AxisScaleBase.disable\"><code>disable(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.AxisScaleBase.enable\"><code>enable(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.AxisScaleBase.trigger\"><code>trigger(sender, event, data=None)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ConfigureSubplotsBase\"><code>class matplotlib.backend_tools.ConfigureSubplotsBase(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Base tool for the configuration of subplots</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ConfigureSubplotsBase.description\"><code>description = 'Configure subplots'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ConfigureSubplotsBase.image\"><code>image = 'subplots.png'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.Cursors\"><code>class matplotlib.backend_tools.Cursors</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Simple namespace for cursor reference</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.Cursors.HAND\"><code>HAND = 0</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.Cursors.MOVE\"><code>MOVE = 3</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.Cursors.POINTER\"><code>POINTER = 1</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.Cursors.SELECT_REGION\"><code>SELECT_REGION = 2</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.RubberbandBase\"><code>class matplotlib.backend_tools.RubberbandBase(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Draw and remove rubberband</p> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.RubberbandBase.draw_rubberband\"><code>draw_rubberband(*data)</code></dt> <dd>\n<p>Draw rubberband</p> <p>This method must get implemented per backend</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.RubberbandBase.remove_rubberband\"><code>remove_rubberband()</code></dt> <dd>\n<p>Remove rubberband</p> <p>This method should get implemented per backend</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.RubberbandBase.trigger\"><code>trigger(sender, event, data)</code></dt> <dd>\n<p>Call <a class=\"reference internal\" href=\"#matplotlib.backend_tools.RubberbandBase.draw_rubberband\" title=\"matplotlib.backend_tools.RubberbandBase.draw_rubberband\"><code>draw_rubberband</code></a> or <a class=\"reference internal\" href=\"#matplotlib.backend_tools.RubberbandBase.remove_rubberband\" title=\"matplotlib.backend_tools.RubberbandBase.remove_rubberband\"><code>remove_rubberband</code></a> based on data</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.SaveFigureBase\"><code>class matplotlib.backend_tools.SaveFigureBase(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Base tool for figure saving</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.SaveFigureBase.default_keymap\"><code>default_keymap = ['s', 'ctrl+s']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.SaveFigureBase.description\"><code>description = 'Save the figure'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.SaveFigureBase.image\"><code>image = 'filesave.png'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.SetCursorBase\"><code>class matplotlib.backend_tools.SetCursorBase(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Change to the current cursor while inaxes</p> <p>This tool, keeps track of all <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase\" title=\"matplotlib.backend_tools.ToolToggleBase\"><code>ToolToggleBase</code></a> derived tools, and calls set_cursor when a tool gets triggered</p> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.SetCursorBase.set_cursor\"><code>set_cursor(cursor)</code></dt> <dd>\n<p>Set the cursor</p> <p>This method has to be implemented per backend</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolBack\"><code>class matplotlib.backend_tools.ToolBack(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ViewsPositionsBase\" title=\"matplotlib.backend_tools.ViewsPositionsBase\"><code>matplotlib.backend_tools.ViewsPositionsBase</code></a></p> <p>Move back up the view lim stack</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolBack.default_keymap\"><code>default_keymap = ['left', 'c', 'backspace']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolBack.description\"><code>description = 'Back to previous view'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolBack.image\"><code>image = 'back.png'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolBase\"><code>class matplotlib.backend_tools.ToolBase(toolmanager, name)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Base tool class</p> <p>A base tool, only implements <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase.trigger\" title=\"matplotlib.backend_tools.ToolBase.trigger\"><code>trigger</code></a> method or not method at all. The tool is instantiated by <a class=\"reference internal\" href=\"backend_managers_api#matplotlib.backend_managers.ToolManager\" title=\"matplotlib.backend_managers.ToolManager\"><code>matplotlib.backend_managers.ToolManager</code></a></p> <h4 class=\"rubric\">Attributes</h4> <table class=\"docutils\"> <colgroup> <col width=\"40%\"> <col width=\"60%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>toolmanager: <a class=\"reference internal\" href=\"backend_managers_api#matplotlib.backend_managers.ToolManager\" title=\"matplotlib.backend_managers.ToolManager\"><code>matplotlib.backend_managers.ToolManager</code></a>\n</td> <td>ToolManager that controls this Tool</td> </tr> <tr class=\"row-even\">\n<td>figure: <code>FigureCanvas</code>\n</td> <td>Figure instance that is affected by this Tool</td> </tr> <tr class=\"row-odd\">\n<td>name: String</td> <td>Used as <strong>Id</strong> of the tool, has to be unique among tools of the same ToolManager</td> </tr> </tbody> </table> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolBase.default_keymap\"><code>default_keymap = None</code></dt> <dd>\n<p>Keymap to associate with this tool</p> <p><strong>String</strong>: List of comma separated keys that will be used to call this tool when the keypress event of <em>self.figure.canvas</em> is emited</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolBase.description\"><code>description = None</code></dt> <dd>\n<p>Description of the Tool</p> <p><strong>String</strong>: If the Tool is included in the Toolbar this text is used as a Tooltip</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolBase.destroy\"><code>destroy()</code></dt> <dd>\n<p>Destroy the tool</p> <p>This method is called when the tool is removed by <a class=\"reference internal\" href=\"backend_managers_api#matplotlib.backend_managers.ToolManager.remove_tool\" title=\"matplotlib.backend_managers.ToolManager.remove_tool\"><code>matplotlib.backend_managers.ToolManager.remove_tool</code></a></p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolBase.figure\"><code>figure</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolBase.image\"><code>image = None</code></dt> <dd>\n<p>Filename of the image</p> <p><strong>String</strong>: Filename of the image to use in the toolbar. If None, the <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase.name\" title=\"matplotlib.backend_tools.ToolBase.name\"><code>name</code></a> is used as a label in the toolbar button</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolBase.name\"><code>name</code></dt> <dd>\n<p>Tool Id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolBase.trigger\"><code>trigger(sender, event, data=None)</code></dt> <dd>\n<p>Called when this tool gets used</p> <p>This method is called by <a class=\"reference internal\" href=\"backend_managers_api#matplotlib.backend_managers.ToolManager.trigger_tool\" title=\"matplotlib.backend_managers.ToolManager.trigger_tool\"><code>matplotlib.backend_managers.ToolManager.trigger_tool</code></a></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>event: `Event`</strong></p> <blockquote> <div>\n<p>The Canvas event that caused this tool to be called</p> </div>\n</blockquote> <p><strong>sender: object</strong></p> <blockquote> <div>\n<p>Object that requested the tool to be triggered</p> </div>\n</blockquote> <p><strong>data: object</strong></p> <blockquote class=\"last\"> <div>\n<p>Extra data</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolCursorPosition\"><code>class matplotlib.backend_tools.ToolCursorPosition(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Send message with the current pointer position</p> <p>This tool runs in the background reporting the position of the cursor</p> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolCursorPosition.send_message\"><code>send_message(event)</code></dt> <dd>\n<p>Call <a class=\"reference internal\" href=\"backend_managers_api#matplotlib.backend_managers.ToolManager.message_event\" title=\"matplotlib.backend_managers.ToolManager.message_event\"><code>matplotlib.backend_managers.ToolManager.message_event</code></a></p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolEnableAllNavigation\"><code>class matplotlib.backend_tools.ToolEnableAllNavigation(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Tool to enable all axes for toolmanager interaction</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolEnableAllNavigation.default_keymap\"><code>default_keymap = ['a']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolEnableAllNavigation.description\"><code>description = 'Enables all axes toolmanager'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolEnableAllNavigation.trigger\"><code>trigger(sender, event, data=None)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolEnableNavigation\"><code>class matplotlib.backend_tools.ToolEnableNavigation(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Tool to enable a specific axes for toolmanager interaction</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolEnableNavigation.default_keymap\"><code>default_keymap = (1, 2, 3, 4, 5, 6, 7, 8, 9)</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolEnableNavigation.description\"><code>description = 'Enables one axes toolmanager'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolEnableNavigation.trigger\"><code>trigger(sender, event, data=None)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolForward\"><code>class matplotlib.backend_tools.ToolForward(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ViewsPositionsBase\" title=\"matplotlib.backend_tools.ViewsPositionsBase\"><code>matplotlib.backend_tools.ViewsPositionsBase</code></a></p> <p>Move forward in the view lim stack</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolForward.default_keymap\"><code>default_keymap = ['right', 'v']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolForward.description\"><code>description = 'Forward to next view'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolForward.image\"><code>image = 'forward.png'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolFullScreen\"><code>class matplotlib.backend_tools.ToolFullScreen(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase\" title=\"matplotlib.backend_tools.ToolToggleBase\"><code>matplotlib.backend_tools.ToolToggleBase</code></a></p> <p>Tool to toggle full screen</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolFullScreen.default_keymap\"><code>default_keymap = ['f', 'ctrl+f']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolFullScreen.description\"><code>description = 'Toogle Fullscreen mode'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolFullScreen.disable\"><code>disable(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolFullScreen.enable\"><code>enable(event)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolGrid\"><code>class matplotlib.backend_tools.ToolGrid(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase\" title=\"matplotlib.backend_tools.ToolToggleBase\"><code>matplotlib.backend_tools.ToolToggleBase</code></a></p> <p>Tool to toggle the grid of the figure</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolGrid.default_keymap\"><code>default_keymap = ['g']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolGrid.description\"><code>description = 'Toogle Grid'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolGrid.disable\"><code>disable(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolGrid.enable\"><code>enable(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolGrid.trigger\"><code>trigger(sender, event, data=None)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolHome\"><code>class matplotlib.backend_tools.ToolHome(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ViewsPositionsBase\" title=\"matplotlib.backend_tools.ViewsPositionsBase\"><code>matplotlib.backend_tools.ViewsPositionsBase</code></a></p> <p>Restore the original view lim</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolHome.default_keymap\"><code>default_keymap = ['h', 'r', 'home']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolHome.description\"><code>description = 'Reset original view'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolHome.image\"><code>image = 'home.png'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolPan\"><code>class matplotlib.backend_tools.ToolPan(*args)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ZoomPanBase\" title=\"matplotlib.backend_tools.ZoomPanBase\"><code>matplotlib.backend_tools.ZoomPanBase</code></a></p> <p>Pan axes with left mouse, zoom with right</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolPan.cursor\"><code>cursor = 3</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolPan.default_keymap\"><code>default_keymap = ['p']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolPan.description\"><code>description = 'Pan axes with left mouse, zoom with right'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolPan.image\"><code>image = 'move.png'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolPan.radio_group\"><code>radio_group = 'default'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolQuit\"><code>class matplotlib.backend_tools.ToolQuit(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Tool to call the figure manager destroy method</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolQuit.default_keymap\"><code>default_keymap = ['ctrl+w', 'cmd+w']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolQuit.description\"><code>description = 'Quit the figure'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolQuit.trigger\"><code>trigger(sender, event, data=None)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolToggleBase\"><code>class matplotlib.backend_tools.ToolToggleBase(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Toggleable tool</p> <p>Every time it is triggered, it switches between enable and disable</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolToggleBase.cursor\"><code>cursor = None</code></dt> <dd>\n<p>Cursor to use when the tool is active</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolToggleBase.disable\"><code>disable(event=None)</code></dt> <dd>\n<p>Disable the toggle tool</p> <p><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase.trigger\" title=\"matplotlib.backend_tools.ToolToggleBase.trigger\"><code>trigger</code></a> call this method when <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase.toggled\" title=\"matplotlib.backend_tools.ToolToggleBase.toggled\"><code>toggled</code></a> is True.</p> <p>This can happen in different circumstances</p> <ul class=\"simple\"> <li>Click on the toolbar tool button</li> <li>Call to <a class=\"reference internal\" href=\"backend_managers_api#matplotlib.backend_managers.ToolManager.trigger_tool\" title=\"matplotlib.backend_managers.ToolManager.trigger_tool\"><code>matplotlib.backend_managers.ToolManager.trigger_tool</code></a>\n</li> <li>Another <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase\" title=\"matplotlib.backend_tools.ToolToggleBase\"><code>ToolToggleBase</code></a> derived tool is triggered (from the same <code>ToolManager</code>)</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolToggleBase.enable\"><code>enable(event=None)</code></dt> <dd>\n<p>Enable the toggle tool</p> <p><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase.trigger\" title=\"matplotlib.backend_tools.ToolToggleBase.trigger\"><code>trigger</code></a> calls this method when <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase.toggled\" title=\"matplotlib.backend_tools.ToolToggleBase.toggled\"><code>toggled</code></a> is False</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolToggleBase.radio_group\"><code>radio_group = None</code></dt> <dd>\n<p>Attribute to group ‘radio’ like tools (mutually exclusive)</p> <p><strong>String</strong> that identifies the group or <strong>None</strong> if not belonging to a group</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolToggleBase.toggled\"><code>toggled</code></dt> <dd>\n<p>State of the toggled tool</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolToggleBase.trigger\"><code>trigger(sender, event, data=None)</code></dt> <dd>\n<p>Calls <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase.enable\" title=\"matplotlib.backend_tools.ToolToggleBase.enable\"><code>enable</code></a> or <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase.disable\" title=\"matplotlib.backend_tools.ToolToggleBase.disable\"><code>disable</code></a> based on <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase.toggled\" title=\"matplotlib.backend_tools.ToolToggleBase.toggled\"><code>toggled</code></a> value</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions\"><code>class matplotlib.backend_tools.ToolViewsPositions(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Auxiliary Tool to handle changes in views and positions</p> <p>Runs in the background and should get used by all the tools that need to access the figure’s history of views and positions, e.g.</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolZoom\" title=\"matplotlib.backend_tools.ToolZoom\"><code>ToolZoom</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolPan\" title=\"matplotlib.backend_tools.ToolPan\"><code>ToolPan</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolHome\" title=\"matplotlib.backend_tools.ToolHome\"><code>ToolHome</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBack\" title=\"matplotlib.backend_tools.ToolBack\"><code>ToolBack</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolForward\" title=\"matplotlib.backend_tools.ToolForward\"><code>ToolForward</code></a></li> </ul> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions.add_figure\"><code>add_figure()</code></dt> <dd>\n<p>Add the current figure to the stack of views and positions</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions.back\"><code>back()</code></dt> <dd>\n<p>Back one step in the stack of views and positions</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions.clear\"><code>clear(figure)</code></dt> <dd>\n<p>Reset the axes stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions.forward\"><code>forward()</code></dt> <dd>\n<p>Forward one step in the stack of views and positions</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions.home\"><code>home()</code></dt> <dd>\n<p>Recall the first view and position from the stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions.push_current\"><code>push_current()</code></dt> <dd>\n<p>push the current view limits and position onto the stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions.refresh_locators\"><code>refresh_locators()</code></dt> <dd>\n<p>Redraw the canvases, update the locators</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolViewsPositions.update_view\"><code>update_view()</code></dt> <dd>\n<p>Update the viewlim and position from the view and position stack for each axes</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolXScale\"><code>class matplotlib.backend_tools.ToolXScale(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.AxisScaleBase\" title=\"matplotlib.backend_tools.AxisScaleBase\"><code>matplotlib.backend_tools.AxisScaleBase</code></a></p> <p>Tool to toggle between linear and logarithmic scales on the X axis</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolXScale.default_keymap\"><code>default_keymap = ['k', 'L']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolXScale.description\"><code>description = 'Toogle Scale X axis'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolXScale.set_scale\"><code>set_scale(ax, scale)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolYScale\"><code>class matplotlib.backend_tools.ToolYScale(*args, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.AxisScaleBase\" title=\"matplotlib.backend_tools.AxisScaleBase\"><code>matplotlib.backend_tools.AxisScaleBase</code></a></p> <p>Tool to toggle between linear and logarithmic scales on the Y axis</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolYScale.default_keymap\"><code>default_keymap = ['l']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolYScale.description\"><code>description = 'Toogle Scale Y axis'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ToolYScale.set_scale\"><code>set_scale(ax, scale)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ToolZoom\"><code>class matplotlib.backend_tools.ToolZoom(*args)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ZoomPanBase\" title=\"matplotlib.backend_tools.ZoomPanBase\"><code>matplotlib.backend_tools.ZoomPanBase</code></a></p> <p>Zoom to rectangle</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolZoom.cursor\"><code>cursor = 2</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolZoom.default_keymap\"><code>default_keymap = ['o']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolZoom.description\"><code>description = 'Zoom to rectangle'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolZoom.image\"><code>image = 'zoom_to_rect.png'</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_tools.ToolZoom.radio_group\"><code>radio_group = 'default'</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ViewsPositionsBase\"><code>class matplotlib.backend_tools.ViewsPositionsBase(toolmanager, name)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBase\" title=\"matplotlib.backend_tools.ToolBase\"><code>matplotlib.backend_tools.ToolBase</code></a></p> <p>Base class for <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolHome\" title=\"matplotlib.backend_tools.ToolHome\"><code>ToolHome</code></a>, <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolBack\" title=\"matplotlib.backend_tools.ToolBack\"><code>ToolBack</code></a> and <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolForward\" title=\"matplotlib.backend_tools.ToolForward\"><code>ToolForward</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ViewsPositionsBase.trigger\"><code>trigger(sender, event, data=None)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_tools.ZoomPanBase\"><code>class matplotlib.backend_tools.ZoomPanBase(*args)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolToggleBase\" title=\"matplotlib.backend_tools.ToolToggleBase\"><code>matplotlib.backend_tools.ToolToggleBase</code></a></p> <p>Base class for <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolZoom\" title=\"matplotlib.backend_tools.ToolZoom\"><code>ToolZoom</code></a> and <a class=\"reference internal\" href=\"#matplotlib.backend_tools.ToolPan\" title=\"matplotlib.backend_tools.ToolPan\"><code>ToolPan</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ZoomPanBase.disable\"><code>disable(event)</code></dt> <dd>\n<p>Release the canvas and disconnect press/release events</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ZoomPanBase.enable\"><code>enable(event)</code></dt> <dd>\n<p>Connect press/release events and lock the canvas</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ZoomPanBase.scroll_zoom\"><code>scroll_zoom(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_tools.ZoomPanBase.trigger\"><code>trigger(sender, event, data=None)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backend_tools.add_tools_to_container\"><code>matplotlib.backend_tools.add_tools_to_container(container, tools=[['navigation', ['home', 'back', 'forward']], ['zoompan', ['pan', 'zoom']], ['layout', ['subplots']], ['io', ['save']]])</code></dt> <dd>\n<p>Add multiple tools to the container.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>container: Container</strong></p> <blockquote> <div>\n<p><code>backend_bases.ToolContainerBase</code> object that will get the tools added</p> </div>\n</blockquote> <p><strong>tools</strong> : list, optional</p> <blockquote class=\"last\"> <div>\n<p>List in the form [[group1, [tool1, tool2 ...]], [group2, [...]]] Where the tools given by tool1, and tool2 will display in group1. See <code>add_tool</code> for details.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backend_tools.add_tools_to_manager\"><code>matplotlib.backend_tools.add_tools_to_manager(toolmanager, tools={'allnav': <class>, 'yscale': <class>, 'pan': <class>, 'fullscreen': <class>, 'back': <class>, 'nav': <class>, 'viewpos': <class>, 'position': <class>, 'cursor': 'ToolSetCursor', 'forward': <class>, 'grid': <class>, 'save': 'ToolSaveFigure', 'rubberband': 'ToolRubberband', 'xscale': <class>, 'quit': <class>, 'subplots': 'ToolConfigureSubplots', 'zoom': <class>, 'home': <class>})</class></class></class></class></class></class></class></class></class></class></class></class></class></class></code></dt> <dd>\n<p>Add multiple tools to <code>ToolManager</code></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>toolmanager: ToolManager</strong></p> <blockquote> <div>\n<p><code>backend_managers.ToolManager</code> object that will get the tools added</p> </div>\n</blockquote> <p><strong>tools</strong> : {str: class_like}, optional</p> <blockquote class=\"last\"> <div>\n<p>The tools to add in a {name: tool} dict, see <code>add_tool</code> for more info.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"data\"> <dt id=\"matplotlib.backend_tools.default_toolbar_tools\"><code>matplotlib.backend_tools.default_toolbar_tools = [['navigation', ['home', 'back', 'forward']], ['zoompan', ['pan', 'zoom']], ['layout', ['subplots']], ['io', ['save']]]</code></dt> <dd>\n<p>Default tools in the toolbar</p> </dd>\n</dl> <dl class=\"data\"> <dt id=\"matplotlib.backend_tools.default_tools\"><code>matplotlib.backend_tools.default_tools = {'allnav': <class>, 'yscale': <class>, 'pan': <class>, 'fullscreen': <class>, 'back': <class>, 'nav': <class>, 'viewpos': <class>, 'position': <class>, 'cursor': 'ToolSetCursor', 'forward': <class>, 'grid': <class>, 'save': 'ToolSaveFigure', 'rubberband': 'ToolRubberband', 'xscale': <class>, 'quit': <class>, 'subplots': 'ToolConfigureSubplots', 'zoom': <class>, 'home': <class>}</class></class></class></class></class></class></class></class></class></class></class></class></class></class></code></dt> <dd>\n<p>Default tools</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/backend_tools_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/backend_tools_api.html</a>\n  </p>\n</div>\n","mlab_api":"<h1 id=\"mlab\">mlab</h1>  <h2 id=\"matplotlib-mlab\">matplotlib.mlab</h2> <p id=\"module-matplotlib.mlab\">Numerical python functions written for compatability with MATLAB commands with the same names.</p>  <h3 id=\"matlab-compatible-functions\">MATLAB compatible functions</h3> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.cohere\" title=\"matplotlib.mlab.cohere\"><code>cohere()</code></a></dt> <dd>Coherence (normalized cross spectral density)</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.csd\" title=\"matplotlib.mlab.csd\"><code>csd()</code></a></dt> <dd>Cross spectral density uing Welch’s average periodogram</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend\" title=\"matplotlib.mlab.detrend\"><code>detrend()</code></a></dt> <dd>Remove the mean or best fit line from an array</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.find\" title=\"matplotlib.mlab.find\"><code>find()</code></a></dt> <dd>Return the indices where some condition is true; numpy.nonzero is similar but more general.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.griddata\" title=\"matplotlib.mlab.griddata\"><code>griddata()</code></a></dt> <dd>Interpolate irregularly distributed data to a regular grid.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.prctile\" title=\"matplotlib.mlab.prctile\"><code>prctile()</code></a></dt> <dd>Find the percentiles of a sequence</dd> <dt><code>prepca()</code></dt> <dd>Principal Component Analysis</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a></dt> <dd>Power spectral density uing Welch’s average periodogram</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rk4\" title=\"matplotlib.mlab.rk4\"><code>rk4()</code></a></dt> <dd>A 4th order runge kutta integrator for 1D or ND systems</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a></dt> <dd>Spectrogram (spectrum over segments of time)</dd> </dl>   <h3 id=\"miscellaneous-functions\">Miscellaneous functions</h3> <p>Functions that don’t exist in MATLAB, but are useful anyway:</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.cohere_pairs\" title=\"matplotlib.mlab.cohere_pairs\"><code>cohere_pairs()</code></a></dt> <dd>Coherence over all pairs. This is not a MATLAB function, but we compute coherence a lot in my lab, and we compute it for a lot of pairs. This function is optimized to do this efficiently by caching the direct FFTs.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rk4\" title=\"matplotlib.mlab.rk4\"><code>rk4()</code></a></dt> <dd>A 4th order Runge-Kutta ODE integrator in case you ever find yourself stranded without scipy (and the far superior scipy.integrate tools)</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.contiguous_regions\" title=\"matplotlib.mlab.contiguous_regions\"><code>contiguous_regions()</code></a></dt> <dd>Return the indices of the regions spanned by some logical mask</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.cross_from_below\" title=\"matplotlib.mlab.cross_from_below\"><code>cross_from_below()</code></a></dt> <dd>Return the indices where a 1D array crosses a threshold from below</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.cross_from_above\" title=\"matplotlib.mlab.cross_from_above\"><code>cross_from_above()</code></a></dt> <dd>Return the indices where a 1D array crosses a threshold from above</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.complex_spectrum\" title=\"matplotlib.mlab.complex_spectrum\"><code>complex_spectrum()</code></a></dt> <dd>Return the complex-valued frequency spectrum of a signal</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>Return the magnitude of the frequency spectrum of a signal</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a></dt> <dd>Return the angle (wrapped phase) of the frequency spectrum of a signal</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.phase_spectrum\" title=\"matplotlib.mlab.phase_spectrum\"><code>phase_spectrum()</code></a></dt> <dd>Return the phase (unwrapped angle) of the frequency spectrum of a signal</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a></dt> <dd>Remove the mean from a line.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.demean\" title=\"matplotlib.mlab.demean\"><code>demean()</code></a></dt> <dd>Remove the mean from a line. This function is the same as as <a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a> except for the default <em>axis</em>.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_linear\" title=\"matplotlib.mlab.detrend_linear\"><code>detrend_linear()</code></a></dt> <dd>Remove the best fit line from a line.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_none\" title=\"matplotlib.mlab.detrend_none\"><code>detrend_none()</code></a></dt> <dd>Return the original line.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.stride_windows\" title=\"matplotlib.mlab.stride_windows\"><code>stride_windows()</code></a></dt> <dd>Get all windows in an array in a memory-efficient manner</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.stride_repeat\" title=\"matplotlib.mlab.stride_repeat\"><code>stride_repeat()</code></a></dt> <dd>Repeat an array in a memory-efficient manner</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.apply_window\" title=\"matplotlib.mlab.apply_window\"><code>apply_window()</code></a></dt> <dd>Apply a window along a given axis</dd> </dl>   <h3 id=\"record-array-helper-functions\">record array helper functions</h3> <p>A collection of helper methods for numpyrecord arrays</p> <blockquote id=\"htmlonly\"> <div>See <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/examples/misc/index.html#misc-examples-index\"><span>misc Examples</span></a>\n</div>\n</blockquote> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rec2txt\" title=\"matplotlib.mlab.rec2txt\"><code>rec2txt()</code></a></dt> <dd>Pretty print a record array</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rec2csv\" title=\"matplotlib.mlab.rec2csv\"><code>rec2csv()</code></a></dt> <dd>Store record array in CSV file</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.csv2rec\" title=\"matplotlib.mlab.csv2rec\"><code>csv2rec()</code></a></dt> <dd>Import record array from CSV file with type inspection</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rec_append_fields\" title=\"matplotlib.mlab.rec_append_fields\"><code>rec_append_fields()</code></a></dt> <dd>Adds field(s)/array(s) to record array</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rec_drop_fields\" title=\"matplotlib.mlab.rec_drop_fields\"><code>rec_drop_fields()</code></a></dt> <dd>Drop fields from record array</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rec_join\" title=\"matplotlib.mlab.rec_join\"><code>rec_join()</code></a></dt> <dd>Join two record arrays on sequence of fields</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.recs_join\" title=\"matplotlib.mlab.recs_join\"><code>recs_join()</code></a></dt> <dd>A simple join of multiple recarrays using a single column as a key</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rec_groupby\" title=\"matplotlib.mlab.rec_groupby\"><code>rec_groupby()</code></a></dt> <dd>Summarize data by groups (similar to SQL GROUP BY)</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.rec_summarize\" title=\"matplotlib.mlab.rec_summarize\"><code>rec_summarize()</code></a></dt> <dd>Helper code to filter rec array fields into new fields</dd> </dl> <p>For the rec viewer functions(e rec2csv), there are a bunch of Format objects you can pass into the functions that will do things like color negative values red, set percent formatting and scaling, etc.</p> <p>Example usage:</p> <pre data-language=\"python\">r = csv2rec('somefile.csv', checkrows=0)\n\nformatd = dict(\n    weight = FormatFloat(2),\n    change = FormatPercent(2),\n    cost   = FormatThousands(2),\n    )\n\n\nrec2excel(r, 'test.xls', formatd=formatd)\nrec2csv(r, 'test.csv', formatd=formatd)\nscroll = rec2gtk(r, formatd=formatd)\n\nwin = gtk.Window()\nwin.set_size_request(600,800)\nwin.add(scroll)\nwin.show_all()\ngtk.main()\n</pre> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatBool\"><code>class matplotlib.mlab.FormatBool</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatObj\" title=\"matplotlib.mlab.FormatObj\"><code>matplotlib.mlab.FormatObj</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatBool.fromstr\"><code>fromstr(s)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatBool.toval\"><code>toval(x)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatDate\"><code>class matplotlib.mlab.FormatDate(fmt)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatObj\" title=\"matplotlib.mlab.FormatObj\"><code>matplotlib.mlab.FormatObj</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatDate.fromstr\"><code>fromstr(x)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatDate.toval\"><code>toval(x)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatDatetime\"><code>class matplotlib.mlab.FormatDatetime(fmt='%Y-%m-%d %H:%M:%S')</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatDate\" title=\"matplotlib.mlab.FormatDate\"><code>matplotlib.mlab.FormatDate</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatDatetime.fromstr\"><code>fromstr(x)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatFloat\"><code>class matplotlib.mlab.FormatFloat(precision=4, scale=1.0)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatFormatStr\" title=\"matplotlib.mlab.FormatFormatStr\"><code>matplotlib.mlab.FormatFormatStr</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatFloat.fromstr\"><code>fromstr(s)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatFloat.toval\"><code>toval(x)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatFormatStr\"><code>class matplotlib.mlab.FormatFormatStr(fmt)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatObj\" title=\"matplotlib.mlab.FormatObj\"><code>matplotlib.mlab.FormatObj</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatFormatStr.tostr\"><code>tostr(x)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatInt\"><code>class matplotlib.mlab.FormatInt</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatObj\" title=\"matplotlib.mlab.FormatObj\"><code>matplotlib.mlab.FormatObj</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatInt.fromstr\"><code>fromstr(s)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatInt.tostr\"><code>tostr(x)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatInt.toval\"><code>toval(x)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatMillions\"><code>class matplotlib.mlab.FormatMillions(precision=4)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatFloat\" title=\"matplotlib.mlab.FormatFloat\"><code>matplotlib.mlab.FormatFloat</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatObj\"><code>class matplotlib.mlab.FormatObj</code></dt> <dd>\n<p>Bases: <code>object</code></p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatObj.fromstr\"><code>fromstr(s)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatObj.tostr\"><code>tostr(x)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatObj.toval\"><code>toval(x)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatPercent\"><code>class matplotlib.mlab.FormatPercent(precision=4)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatFloat\" title=\"matplotlib.mlab.FormatFloat\"><code>matplotlib.mlab.FormatFloat</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatString\"><code>class matplotlib.mlab.FormatString</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatObj\" title=\"matplotlib.mlab.FormatObj\"><code>matplotlib.mlab.FormatObj</code></a></p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.FormatString.tostr\"><code>tostr(x)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.FormatThousands\"><code>class matplotlib.mlab.FormatThousands(precision=4)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.mlab.FormatFloat\" title=\"matplotlib.mlab.FormatFloat\"><code>matplotlib.mlab.FormatFloat</code></a></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.GaussianKDE\"><code>class matplotlib.mlab.GaussianKDE(dataset, bw_method=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Representation of a kernel-density estimate using Gaussian kernels.</p> <p>Call signature:: kde = GaussianKDE(dataset, bw_method=’silverman’)</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>dataset</strong> : array_like</p> <blockquote> <div>\n<p>Datapoints to estimate from. In case of univariate data this is a 1-D array, otherwise a 2-D array with shape (# of dims, # of data).</p> </div>\n</blockquote> <p><strong>bw_method</strong> : str, scalar or callable, optional</p> <blockquote class=\"last\"> <div>\n<p>The method used to calculate the estimator bandwidth. This can be ‘scott’, ‘silverman’, a scalar constant or a callable. If a scalar, this will be used directly as <code>kde.factor</code>. If a callable, it should take a <a class=\"reference internal\" href=\"#matplotlib.mlab.GaussianKDE\" title=\"matplotlib.mlab.GaussianKDE\"><code>GaussianKDE</code></a> instance as only parameter and return a scalar. If None (default), ‘scott’ is used.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Attributes</h4> <table class=\"docutils\"> <colgroup> <col width=\"8%\"> <col width=\"92%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>dataset</td> <td>(ndarray) The dataset with which <code>gaussian_kde</code> was initialized.</td> </tr> <tr class=\"row-even\">\n<td>dim</td> <td>(int) Number of dimensions.</td> </tr> <tr class=\"row-odd\">\n<td>num_dp</td> <td>(int) Number of datapoints.</td> </tr> <tr class=\"row-even\">\n<td>factor</td> <td>(float) The bandwidth factor, obtained from <code>kde.covariance_factor</code>, with which the covariance matrix is multiplied.</td> </tr> <tr class=\"row-odd\">\n<td>covariance</td> <td>(ndarray) The covariance matrix of <code>dataset</code>, scaled by the calculated bandwidth (<code>kde.factor</code>).</td> </tr> <tr class=\"row-even\">\n<td>inv_cov</td> <td>(ndarray) The inverse of <code>covariance</code>.</td> </tr> </tbody> </table> <h4 class=\"rubric\">Methods</h4> <table class=\"docutils\"> <colgroup> <col width=\"24%\"> <col width=\"76%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>kde.evaluate(points)</td> <td>(ndarray) Evaluate the estimated pdf on a provided set of points.</td> </tr> <tr class=\"row-even\">\n<td>kde(points)</td> <td>(ndarray) Same as kde.evaluate(points)</td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.mlab.GaussianKDE.covariance_factor\"><code>covariance_factor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.GaussianKDE.evaluate\"><code>evaluate(points)</code></dt> <dd>\n<p>Evaluate the estimated pdf on a set of points.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>points</strong> : (# of dimensions, # of points)-array</p> <blockquote> <div>\n<p>Alternatively, a (# of dimensions,) vector can be passed in and treated as a single point.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>values</strong> : (# of points,)-array</p> <blockquote> <div>\n<p>The values at each point.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Raises:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ValueError</strong> : if the dimensionality of the input points is different</p> <blockquote class=\"last\"> <div>\n<p>than the dimensionality of the KDE.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.GaussianKDE.scotts_factor\"><code>scotts_factor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.GaussianKDE.silverman_factor\"><code>silverman_factor()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.mlab.PCA\"><code>class matplotlib.mlab.PCA(a, standardize=True)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>compute the SVD of a and store data for PCA. Use project to project the data onto a reduced set of dimensions</p> <p>Inputs:</p> <blockquote> <div>\n<em>a</em>: a numobservations x numdims array <em>standardize</em>: True if input data are to be standardized. If False, only centering will be carried out.</div>\n</blockquote> <p>Attrs:</p> <blockquote> <div>\n<p><em>a</em> a centered unit sigma version of input a</p> <p><em>numrows</em>, <em>numcols</em>: the dimensions of a</p> <p><em>mu</em>: a numdims array of means of a. This is the vector that points to the origin of PCA space.</p> <p><em>sigma</em>: a numdims array of standard deviation of a</p> <p><em>fracs</em>: the proportion of variance of each of the principal components</p> <p><em>s</em>: the actual eigenvalues of the decomposition</p> <p><em>Wt</em>: the weight vector for projecting a numdims point or array into PCA space</p> <p><em>Y</em>: a projected into PCA space</p> </div>\n</blockquote> <p>The factor loadings are in the Wt factor, i.e., the factor loadings for the 1st principal component are given by Wt[0]. This row is also the 1st eigenvector.</p> <dl class=\"method\"> <dt id=\"matplotlib.mlab.PCA.center\"><code>center(x)</code></dt> <dd>\n<p>center and optionally standardize the data using the mean and sigma from training set a</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.mlab.PCA.project\"><code>project(x, minfrac=0.0)</code></dt> <dd>\n<p>project x onto the principle axes, dropping any axes where fraction of variance&lt;minfrac</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.amap\"><code>matplotlib.mlab.amap(function, sequence[, sequence, ...]) → array.</code></dt> <dd>\n<p>Works like <code>map()</code>, but it returns an array. This is just a convenient shorthand for <code>numpy.array(map(...))</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.angle_spectrum\"><code>matplotlib.mlab.angle_spectrum(x, Fs=None, window=None, pad_to=None, sides=None)</code></dt> <dd>\n<p>Compute the angle of the frequency spectrum (wrapped phase spectrum) of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the angle spectrum in radians (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> </dl> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.complex_spectrum\" title=\"matplotlib.mlab.complex_spectrum\"><code>complex_spectrum()</code></a></dt> <dd>This function returns the angle value of <a class=\"reference internal\" href=\"#matplotlib.mlab.complex_spectrum\" title=\"matplotlib.mlab.complex_spectrum\"><code>complex_spectrum()</code></a>.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a> returns the magnitudes of the corresponding frequencies.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.phase_spectrum\" title=\"matplotlib.mlab.phase_spectrum\"><code>phase_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.phase_spectrum\" title=\"matplotlib.mlab.phase_spectrum\"><code>phase_spectrum()</code></a> returns the unwrapped version of this function.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a> can return the angle spectrum of segments within the signal.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.apply_window\"><code>matplotlib.mlab.apply_window(x, window, axis=0, return_window=None)</code></dt> <dd>\n<p>Apply the given window to the given 1D or 2D array along the given axis.</p> <p>Call signature:</p> <pre data-language=\"python\">  apply_window(x, window, axis=0, return_window=False)\n\n*x*: 1D or 2D array or sequence\n  Array or sequence containing the data.\n\n*winodw*: function or array.\n  Either a function to generate a window or an array with length\n  *x*.shape[*axis*]\n\n*axis*: integer\n  The axis over which to do the repetition.\n  Must be 0 or 1.  The default is 0\n\n*return_window*: bool\n  If true, also return the 1D values of the window that was applied\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.base_repr\"><code>matplotlib.mlab.base_repr(number, base=2, padding=0)</code></dt> <dd>\n<p>Return the representation of a <em>number</em> in any given <em>base</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.binary_repr\"><code>matplotlib.mlab.binary_repr(number, max_length=1025)</code></dt> <dd>\n<p>Return the binary representation of the input <em>number</em> as a string.</p> <p>This is more efficient than using <a class=\"reference internal\" href=\"#matplotlib.mlab.base_repr\" title=\"matplotlib.mlab.base_repr\"><code>base_repr()</code></a> with base 2.</p> <p>Increase the value of max_length for very large numbers. Note that on 32-bit machines, 2**1023 is the largest integer power of 2 which can be converted to a Python float.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.bivariate_normal\"><code>matplotlib.mlab.bivariate_normal(X, Y, sigmax=1.0, sigmay=1.0, mux=0.0, muy=0.0, sigmaxy=0.0)</code></dt> <dd>\n<p>Bivariate Gaussian distribution for equal shape <em>X</em>, <em>Y</em>.</p> <p>See <a class=\"reference external\" href=\"http://mathworld.wolfram.com/BivariateNormalDistribution.html\">bivariate normal</a> at mathworld.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.center_matrix\"><code>matplotlib.mlab.center_matrix(M, dim=0)</code></dt> <dd>\n<p>Return the matrix <em>M</em> with each row having zero mean and unit std.</p> <p>If <em>dim</em> = 1 operate on columns instead of rows. (<em>dim</em> is opposite to the numpy axis kwarg.)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.cohere\"><code>matplotlib.mlab.cohere(x, y, NFFT=256, Fs=2, detrend=<function detrend_none>, window=<function window_hanning>, noverlap=0, pad_to=None, sides='default', scale_by_freq=None)</function></function></code></dt> <dd>\n<p>The coherence between <em>x</em> and <em>y</em>. Coherence is the normalized cross spectral density:</p> <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-58775d54bf.png\" class=\"center\"><dl class=\"docutils\"> <dt>\n<em>x</em>, <em>y</em>\n</dt> <dd>Array or sequence containing the data</dd> </dl> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between blocks. The default value is 0 (no overlap).</dd> </dl> </dd> </dl> <p>The return value is the tuple (<em>Cxy</em>, <em>f</em>), where <em>f</em> are the frequencies of the coherence vector. For cohere, scaling the individual densities by the sampling frequency has no effect, since the factors cancel out.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.mlab.csd\" title=\"matplotlib.mlab.csd\"><code>csd()</code></a>\n</dt> <dd>For information about the methods used to compute <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0005c3a5e5.png\" style=\"position: relative; bottom: -9px\">, <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-f6d65b7f49.png\" style=\"position: relative; bottom: -6px\"> and <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0938c51d1a.png\" style=\"position: relative; bottom: -9px\">.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.cohere_pairs\"><code>matplotlib.mlab.cohere_pairs(X, ij, NFFT=256, Fs=2, detrend=<function detrend_none>, window=<function window_hanning>, noverlap=0, preferSpeedOverMemory=True, progressCallback=<function donothing_callback>, returnPxx=False)</function></function></function></code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">Cxy, Phase, freqs = cohere_pairs( X, ij, ...)\n</pre> <p>Compute the coherence and phase for all pairs <em>ij</em>, in <em>X</em>.</p> <p><em>X</em> is a <em>numSamples</em> * <em>numCols</em> array</p> <p><em>ij</em> is a list of tuples. Each tuple is a pair of indexes into the columns of X for which you want to compute coherence. For example, if <em>X</em> has 64 columns, and you want to compute all nonredundant pairs, define <em>ij</em> as:</p> <pre data-language=\"python\">ij = []\nfor i in range(64):\n    for j in range(i+1,64):\n        ij.append( (i,j) )\n</pre> <p><em>preferSpeedOverMemory</em> is an optional bool. Defaults to true. If False, limits the caching by only making one, rather than two, complex cache arrays. This is useful if memory becomes critical. Even when <em>preferSpeedOverMemory</em> is False, <a class=\"reference internal\" href=\"#matplotlib.mlab.cohere_pairs\" title=\"matplotlib.mlab.cohere_pairs\"><code>cohere_pairs()</code></a> will still give significant performace gains over calling <a class=\"reference internal\" href=\"#matplotlib.mlab.cohere\" title=\"matplotlib.mlab.cohere\"><code>cohere()</code></a> for each pair, and will use subtantially less memory than if <em>preferSpeedOverMemory</em> is True. In my tests with a 43000,64 array over all nonredundant pairs, <em>preferSpeedOverMemory</em> = True delivered a 33% performance boost on a 1.7GHZ Athlon with 512MB RAM compared with <em>preferSpeedOverMemory</em> = False. But both solutions were more than 10x faster than naively crunching all possible pairs through <a class=\"reference internal\" href=\"#matplotlib.mlab.cohere\" title=\"matplotlib.mlab.cohere\"><code>cohere()</code></a>.</p> <p>Returns:</p> <pre data-language=\"python\">(Cxy, Phase, freqs)\n</pre> <p>where:</p> <blockquote> <div>\n<ul> <li>\n<em>Cxy</em>: dictionary of (<em>i</em>, <em>j</em>) tuples -&gt; coherence vector for that pair. i.e., <code>Cxy[(i,j) = cohere(X[:,i], X[:,j])</code>. Number of dictionary keys is <code>len(ij)</code>. </li> <li>\n<em>Phase</em>: dictionary of phases of the cross spectral density at each frequency for each pair. Keys are (<em>i</em>, <em>j</em>). </li> <li>\n<dl class=\"first docutils\"> <dt>\n<em>freqs</em>: vector of frequencies, equal in length to either the</dt> <dd>\n<p class=\"first last\">coherence or phase vectors for any (<em>i</em>, <em>j</em>) key.</p> </dd> </dl> </li> </ul> </div>\n</blockquote> <p>e.g., to make a coherence Bode plot:</p> <pre data-language=\"python\">subplot(211)\nplot( freqs, Cxy[(12,19)])\nsubplot(212)\nplot( freqs, Phase[(12,19)])\n</pre> <p>For a large number of pairs, <a class=\"reference internal\" href=\"#matplotlib.mlab.cohere_pairs\" title=\"matplotlib.mlab.cohere_pairs\"><code>cohere_pairs()</code></a> can be much more efficient than just calling <a class=\"reference internal\" href=\"#matplotlib.mlab.cohere\" title=\"matplotlib.mlab.cohere\"><code>cohere()</code></a> for each pair, because it caches most of the intensive computations. If <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-1922d1ceaa.png\" style=\"position: relative; bottom: -3px\"> is the number of pairs, this function is <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-98c8089378.png\" style=\"position: relative; bottom: -8px\"> for most of the heavy lifting, whereas calling cohere for each pair is <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-83ff203e39.png\" style=\"position: relative; bottom: -8px\">. However, because of the caching, it is also more memory intensive, making 2 additional complex arrays with approximately the same number of elements as <em>X</em>.</p> <p>See <code>test/cohere_pairs_test.py</code> in the src tree for an example script that shows that this <a class=\"reference internal\" href=\"#matplotlib.mlab.cohere_pairs\" title=\"matplotlib.mlab.cohere_pairs\"><code>cohere_pairs()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.mlab.cohere\" title=\"matplotlib.mlab.cohere\"><code>cohere()</code></a> give the same results for a given pair.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a></dt> <dd>For information about the methods used to compute <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0005c3a5e5.png\" style=\"position: relative; bottom: -9px\">, <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-f6d65b7f49.png\" style=\"position: relative; bottom: -6px\"> and <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0938c51d1a.png\" style=\"position: relative; bottom: -9px\">.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.complex_spectrum\"><code>matplotlib.mlab.complex_spectrum(x, Fs=None, window=None, pad_to=None, sides=None)</code></dt> <dd>\n<p>Compute the complex-valued frequency spectrum of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the complex spectrum (complex valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> </dl> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a> returns the absolute value of this function.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a> returns the angle of this function.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.phase_spectrum\" title=\"matplotlib.mlab.phase_spectrum\"><code>phase_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.phase_spectrum\" title=\"matplotlib.mlab.phase_spectrum\"><code>phase_spectrum()</code></a> returns the phase (unwrapped angle) of this function.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a> can return the complex spectrum of segments within the signal.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.contiguous_regions\"><code>matplotlib.mlab.contiguous_regions(mask)</code></dt> <dd>\n<p>return a list of (ind0, ind1) such that mask[ind0:ind1].all() is True and we cover all such regions</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.cross_from_above\"><code>matplotlib.mlab.cross_from_above(x, threshold)</code></dt> <dd>\n<p>return the indices into <em>x</em> where <em>x</em> crosses some threshold from below, e.g., the i’s where:</p> <pre data-language=\"python\">x[i-1]&gt;threshold and x[i]&lt;=threshold\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"#matplotlib.mlab.cross_from_below\" title=\"matplotlib.mlab.cross_from_below\"><code>cross_from_below()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.mlab.contiguous_regions\" title=\"matplotlib.mlab.contiguous_regions\"><code>contiguous_regions()</code></a></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.cross_from_below\"><code>matplotlib.mlab.cross_from_below(x, threshold)</code></dt> <dd>\n<p>return the indices into <em>x</em> where <em>x</em> crosses some threshold from below, e.g., the i’s where:</p> <pre data-language=\"python\">x[i-1]&lt;threshold and x[i]&gt;=threshold\n</pre> <p>Example code:</p> <pre data-language=\"python\">import matplotlib.pyplot as plt\n\nt = np.arange(0.0, 2.0, 0.1)\ns = np.sin(2*np.pi*t)\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(t, s, '-o')\nax.axhline(0.5)\nax.axhline(-0.5)\n\nind = cross_from_below(s, 0.5)\nax.vlines(t[ind], -1, 1)\n\nind = cross_from_above(s, -0.5)\nax.vlines(t[ind], -1, 1)\n\nplt.show()\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"#matplotlib.mlab.cross_from_above\" title=\"matplotlib.mlab.cross_from_above\"><code>cross_from_above()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.mlab.contiguous_regions\" title=\"matplotlib.mlab.contiguous_regions\"><code>contiguous_regions()</code></a></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.csd\"><code>matplotlib.mlab.csd(x, y, NFFT=None, Fs=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None)</code></dt> <dd>\n<p>Compute the cross-spectral density.</p> <p>Call signature:</p> <pre data-language=\"python\">csd(x, y, NFFT=256, Fs=2, detrend=mlab.detrend_none,\n    window=mlab.window_hanning, noverlap=0, pad_to=None,\n    sides='default', scale_by_freq=None)\n</pre> <p>The cross spectral density <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0005c3a5e5.png\" style=\"position: relative; bottom: -9px\"> by Welch’s average periodogram method. The vectors <em>x</em> and <em>y</em> are divided into <em>NFFT</em> length segments. Each segment is detrended by function <em>detrend</em> and windowed by function <em>window</em>. <em>noverlap</em> gives the length of the overlap between segments. The product of the direct FFTs of <em>x</em> and <em>y</em> are averaged over each segment to compute <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0005c3a5e5.png\" style=\"position: relative; bottom: -9px\">, with a scaling to correct for power loss due to windowing.</p> <p>If len(<em>x</em>) &lt; <em>NFFT</em> or len(<em>y</em>) &lt; <em>NFFT</em>, they will be zero padded to <em>NFFT</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>, <em>y</em>: 1-D arrays or sequences</dt> <dd>Arrays or sequences containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between segments. The default value is 0 (no overlap).</dd> </dl> </dd> </dl> <p>Returns the tuple (<em>Pxy</em>, <em>freqs</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Pxy</em>: 1-D array</dt> <dd>The values for the cross spectrum <code>P_{xy}</code> before scaling (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>Pxy</em>\n</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>Refs:</dt> <dd>Bendat &amp; Piersol – Random Data: Analysis and Measurement Procedures, John Wiley &amp; Sons (1986)</dd> </dl> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a> is the equivalent to setting y=x.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.csv2rec\"><code>matplotlib.mlab.csv2rec(fname, comments='#', skiprows=0, checkrows=0, delimiter=', ', converterd=None, names=None, missing='', missingd=None, use_mrecords=False, dayfirst=False, yearfirst=False)</code></dt> <dd>\n<p>Load data from comma/space/tab delimited file in <em>fname</em> into a numpy record array and return the record array.</p> <p>If <em>names</em> is <em>None</em>, a header row is required to automatically assign the recarray names. The headers will be lower cased, spaces will be converted to underscores, and illegal attribute name characters removed. If <em>names</em> is not <em>None</em>, it is a sequence of names to use for the column names. In this case, it is assumed there is no header row.</p> <ul> <li>\n<em>fname</em>: can be a filename or a file handle. Support for gzipped files is automatic, if the filename ends in ‘.gz’ </li> <li>\n<em>comments</em>: the character used to indicate the start of a comment in the file, or <em>None</em> to switch off the removal of comments </li> <li>\n<em>skiprows</em>: is the number of rows from the top to skip </li> <li>\n<em>checkrows</em>: is the number of rows to check to validate the column data type. When set to zero all rows are validated. </li> <li>\n<em>converterd</em>: if not <em>None</em>, is a dictionary mapping column number or munged column name to a converter function. </li> <li>\n<em>names</em>: if not None, is a list of header names. In this case, no header will be read from the file </li> <li>\n<em>missingd</em> is a dictionary mapping munged column names to field values which signify that the field does not contain actual data and should be masked, e.g., ‘0000-00-00’ or ‘unused’ </li> <li>\n<em>missing</em>: a string whose value signals a missing field regardless of the column it appears in </li> <li>\n<em>use_mrecords</em>: if True, return an mrecords.fromrecords record array if any of the data are missing </li> <li>\n<em>dayfirst</em>: default is False so that MM-DD-YY has precedence over DD-MM-YY. See <a class=\"reference external\" href=\"http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47\">http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47</a> for further information. </li> <li>\n<p class=\"first\"><em>yearfirst</em>: default is False so that MM-DD-YY has precedence over YY-MM-DD. See <a class=\"reference external\" href=\"http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47\">http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47</a> for further information.</p> <p>If no rows are found, <em>None</em> is returned – see <code>examples/loadrec.py</code></p> </li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.csvformat_factory\"><code>matplotlib.mlab.csvformat_factory(format)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.demean\"><code>matplotlib.mlab.demean(x, axis=0)</code></dt> <dd>\n<p>Return x minus its mean along the specified axis.</p> <p>Call signature:</p> <pre data-language=\"python\">  demean(x, axis=0)\n\n*x*: array or sequence\n  Array or sequence containing the data\n  Can have any dimensionality\n\n*axis*: integer\n  The axis along which to take the mean.  See numpy.mean for a\n  description of this argument.\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p><code>delinear()</code></p> <dl class=\"last docutils\"> <dt><code>denone()</code></dt> <dd>\n<code>delinear()</code> and <code>denone()</code> are other detrend algorithms.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a></dt> <dd>This function is the same as as <a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a> except for the default <em>axis</em>.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.detrend\"><code>matplotlib.mlab.detrend(x, key=None, axis=None)</code></dt> <dd>\n<p>Return x with its trend removed.</p> <p>Call signature:</p> <pre data-language=\"python\">  detrend(x, key='mean')\n\n*x*: array or sequence\n  Array or sequence containing the data.\n\n*key*: [ 'default' | 'constant' | 'mean' | 'linear' | 'none'] or function\n    Specifies the detrend algorithm to use.  'default' is 'mean',\n    which is the same as :func:`detrend_mean`.  'constant' is the same.\n    'linear' is the same as :func:`detrend_linear`.  'none' is the same\n    as :func:`detrend_none`.  The default is 'mean'.  See the\n    corresponding functions for more details regarding the algorithms.\n    Can also be a function that carries out the detrend operation.\n\n*axis*: integer\n  The axis along which to do the detrending.\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a> implements the ‘mean’ algorithm.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_linear\" title=\"matplotlib.mlab.detrend_linear\"><code>detrend_linear()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_linear\" title=\"matplotlib.mlab.detrend_linear\"><code>detrend_linear()</code></a> implements the ‘linear’ algorithm.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_none\" title=\"matplotlib.mlab.detrend_none\"><code>detrend_none()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_none\" title=\"matplotlib.mlab.detrend_none\"><code>detrend_none()</code></a> implements the ‘none’ algorithm.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.detrend_linear\"><code>matplotlib.mlab.detrend_linear(y)</code></dt> <dd>\n<p>Return x minus best fit line; ‘linear’ detrending.</p> <p>Call signature:</p> <pre data-language=\"python\">  detrend_linear(y)\n\n*y*: 0-D or 1-D array or sequence\n  Array or sequence containing the data\n\n*axis*: integer\n  The axis along which to take the mean.  See numpy.mean for a\n  description of this argument.\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"docutils\"> <dt><code>delinear()</code></dt> <dd>This function is the same as as <code>delinear()</code> except for the default <em>axis</em>.</dd> </dl> <p><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a></p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_none\" title=\"matplotlib.mlab.detrend_none\"><code>detrend_none()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_none\" title=\"matplotlib.mlab.detrend_none\"><code>detrend_none()</code></a> are other detrend algorithms.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend\" title=\"matplotlib.mlab.detrend\"><code>detrend()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend\" title=\"matplotlib.mlab.detrend\"><code>detrend()</code></a> is a wrapper around all the detrend algorithms.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.detrend_mean\"><code>matplotlib.mlab.detrend_mean(x, axis=None)</code></dt> <dd>\n<p>Return x minus the mean(x).</p> <p>Call signature:</p> <pre data-language=\"python\">  detrend_mean(x, axis=None)\n\n*x*: array or sequence\n  Array or sequence containing the data\n  Can have any dimensionality\n\n*axis*: integer\n  The axis along which to take the mean.  See numpy.mean for a\n  description of this argument.\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.demean\" title=\"matplotlib.mlab.demean\"><code>demean()</code></a></dt> <dd>This function is the same as as <a class=\"reference internal\" href=\"#matplotlib.mlab.demean\" title=\"matplotlib.mlab.demean\"><code>demean()</code></a> except for the default <em>axis</em>.</dd> </dl> <p><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_linear\" title=\"matplotlib.mlab.detrend_linear\"><code>detrend_linear()</code></a></p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_none\" title=\"matplotlib.mlab.detrend_none\"><code>detrend_none()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_linear\" title=\"matplotlib.mlab.detrend_linear\"><code>detrend_linear()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_none\" title=\"matplotlib.mlab.detrend_none\"><code>detrend_none()</code></a> are other detrend algorithms.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend\" title=\"matplotlib.mlab.detrend\"><code>detrend()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend\" title=\"matplotlib.mlab.detrend\"><code>detrend()</code></a> is a wrapper around all the detrend algorithms.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.detrend_none\"><code>matplotlib.mlab.detrend_none(x, axis=None)</code></dt> <dd>\n<p>Return x: no detrending.</p> <p>Call signature:</p> <pre data-language=\"python\">  detrend_none(x, axis=None)\n\n*x*: any object\n  An object containing the data\n\n*axis*: integer\n  This parameter is ignored.\n  It is included for compatibility with detrend_mean\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"docutils\"> <dt><code>denone()</code></dt> <dd>This function is the same as as <code>denone()</code> except for the default <em>axis</em>, which has no effect.</dd> </dl> <p><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a></p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_linear\" title=\"matplotlib.mlab.detrend_linear\"><code>detrend_linear()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_mean\" title=\"matplotlib.mlab.detrend_mean\"><code>detrend_mean()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.mlab.detrend_linear\" title=\"matplotlib.mlab.detrend_linear\"><code>detrend_linear()</code></a> are other detrend algorithms.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.detrend\" title=\"matplotlib.mlab.detrend\"><code>detrend()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.detrend\" title=\"matplotlib.mlab.detrend\"><code>detrend()</code></a> is a wrapper around all the detrend algorithms.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.dist\"><code>matplotlib.mlab.dist(x, y)</code></dt> <dd>\n<p>Return the distance between two points.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.dist_point_to_segment\"><code>matplotlib.mlab.dist_point_to_segment(p, s0, s1)</code></dt> <dd>\n<p>Get the distance of a point to a segment.</p> <blockquote> <div>\n<em>p</em>, <em>s0</em>, <em>s1</em> are <em>xy</em> sequences</div>\n</blockquote> <p>This algorithm from <a class=\"reference external\" href=\"http://softsurfer.com/Archive/algorithm_0102/algorithm_0102.htm#Distance%20to%20Ray%20or%20Segment\">http://softsurfer.com/Archive/algorithm_0102/algorithm_0102.htm#Distance%20to%20Ray%20or%20Segment</a></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.distances_along_curve\"><code>matplotlib.mlab.distances_along_curve(X)</code></dt> <dd>\n<p>Computes the distance between a set of successive points in <em>N</em> dimensions.</p> <p>Where <em>X</em> is an <em>M</em> x <em>N</em> array or matrix. The distances between successive rows is computed. Distance is the standard Euclidean distance.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.donothing_callback\"><code>matplotlib.mlab.donothing_callback(*args)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.entropy\"><code>matplotlib.mlab.entropy(y, bins)</code></dt> <dd>\n<p>Return the entropy of the data in <em>y</em> in units of nat.</p> <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-dea1b42a91.png\" class=\"center\"><p>where <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-6700e99fd3.png\" style=\"position: relative; bottom: -7px\"> is the probability of observing <em>y</em> in the <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-fce1799ac3.png\" style=\"position: relative; bottom: -3px\"> bin of <em>bins</em>. <em>bins</em> can be a number of bins or a range of bins; see <code>numpy.histogram()</code>.</p> <p>Compare <em>S</em> with analytic calculation for a Gaussian:</p> <pre data-language=\"python\">x = mu + sigma * randn(200000)\nSanalytic = 0.5 * ( 1.0 + log(2*pi*sigma**2.0) )\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.exp_safe\"><code>matplotlib.mlab.exp_safe(x)</code></dt> <dd>\n<p>Compute exponentials which safely underflow to zero.</p> <p>Slow, but convenient to use. Note that numpy provides proper floating point exception handling with access to the underlying hardware.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.fftsurr\"><code>matplotlib.mlab.fftsurr(x, detrend=<function detrend_none>, window=<function window_none>)</function></function></code></dt> <dd>\n<p>Compute an FFT phase randomized surrogate of <em>x</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.find\"><code>matplotlib.mlab.find(condition)</code></dt> <dd>\n<p>Return the indices where ravel(condition) is true</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.frange\"><code>matplotlib.mlab.frange([start, ]stop[, step, keywords]) → array of floats</code></dt> <dd>\n<p>Return a numpy ndarray containing a progression of floats. Similar to <code>numpy.arange()</code>, but defaults to a closed interval.</p> <p><code>frange(x0, x1)</code> returns <code>[x0, x0+1, x0+2, ..., x1]</code>; <em>start</em> defaults to 0, and the endpoint <em>is included</em>. This behavior is different from that of <code>range()</code> and <code>numpy.arange()</code>. This is deliberate, since <a class=\"reference internal\" href=\"#matplotlib.mlab.frange\" title=\"matplotlib.mlab.frange\"><code>frange()</code></a> will probably be more useful for generating lists of points for function evaluation, and endpoints are often desired in this use. The usual behavior of <code>range()</code> can be obtained by setting the keyword <em>closed</em> = 0, in this case, <a class=\"reference internal\" href=\"#matplotlib.mlab.frange\" title=\"matplotlib.mlab.frange\"><code>frange()</code></a> basically becomes :func:numpy.arange`.</p> <p>When <em>step</em> is given, it specifies the increment (or decrement). All arguments can be floating point numbers.</p> <p><code>frange(x0,x1,d)</code> returns <code>[x0,x0+d,x0+2d,...,xfin]</code> where <em>xfin</em> &lt;= <em>x1</em>.</p> <p><a class=\"reference internal\" href=\"#matplotlib.mlab.frange\" title=\"matplotlib.mlab.frange\"><code>frange()</code></a> can also be called with the keyword <em>npts</em>. This sets the number of points the list should contain (and overrides the value <em>step</em> might have been given). <code>numpy.arange()</code> doesn’t offer this option.</p> <p>Examples:</p> <pre data-language=\"python\">&gt;&gt;&gt; frange(3)\narray([ 0.,  1.,  2.,  3.])\n&gt;&gt;&gt; frange(3,closed=0)\narray([ 0.,  1.,  2.])\n&gt;&gt;&gt; frange(1,6,2)\narray([1, 3, 5])   or 1,3,5,7, depending on floating point vagueries\n&gt;&gt;&gt; frange(1,6.5,npts=5)\narray([ 1.   ,  2.375,  3.75 ,  5.125,  6.5  ])\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.get_formatd\"><code>matplotlib.mlab.get_formatd(r, formatd=None)</code></dt> <dd>\n<p>build a formatd guaranteed to have a key for every dtype name</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.get_sparse_matrix\"><code>matplotlib.mlab.get_sparse_matrix(M, N, frac=0.1)</code></dt> <dd>\n<p>Return a <em>M</em> x <em>N</em> sparse matrix with <em>frac</em> elements randomly filled.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.get_xyz_where\"><code>matplotlib.mlab.get_xyz_where(Z, Cond)</code></dt> <dd>\n<p><em>Z</em> and <em>Cond</em> are <em>M</em> x <em>N</em> matrices. <em>Z</em> are data and <em>Cond</em> is a boolean matrix where some condition is satisfied. Return value is (<em>x</em>, <em>y</em>, <em>z</em>) where <em>x</em> and <em>y</em> are the indices into <em>Z</em> and <em>z</em> are the values of <em>Z</em> at those indices. <em>x</em>, <em>y</em>, and <em>z</em> are 1D arrays.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.griddata\"><code>matplotlib.mlab.griddata(x, y, z, xi, yi, interp='nn')</code></dt> <dd>\n<p>Interpolates from a nonuniformly spaced grid to some other grid.</p> <p>Fits a surface of the form z = f(<code>x</code>, <code>y</code>) to the data in the (usually) nonuniformly spaced vectors (<code>x</code>, <code>y</code>, <code>z</code>), then interpolates this surface at the points specified by (<code>xi</code>, <code>yi</code>) to produce <code>zi</code>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y, z</strong> : 1d array_like</p> <blockquote> <div>\n<p>Coordinates of grid points to interpolate from.</p> </div>\n</blockquote> <p><strong>xi, yi</strong> : 1d or 2d array_like</p> <blockquote> <div>\n<p>Coordinates of grid points to interpolate to.</p> </div>\n</blockquote> <p><strong>interp</strong> : string key from {‘nn’, ‘linear’}</p> <blockquote> <div>\n<p>Interpolation algorithm, either ‘nn’ for natural neighbor, or ‘linear’ for linear interpolation.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">2d float array</p> <blockquote class=\"last\"> <div>\n<p>Array of values interpolated at (<code>xi</code>, <code>yi</code>) points. Array will be masked is any of (<code>xi</code>, <code>yi</code>) are outside the convex hull of (<code>x</code>, <code>y</code>).</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>If <code>interp</code> is ‘nn’ (the default), uses natural neighbor interpolation based on Delaunay triangulation. This option is only available if the mpl_toolkits.natgrid module is installed. This can be downloaded from <a class=\"reference external\" href=\"https://github.com/matplotlib/natgrid\">https://github.com/matplotlib/natgrid</a>. The (<code>xi</code>, <code>yi</code>) grid must be regular and monotonically increasing in this case.</p> <p>If <code>interp</code> is ‘linear’, linear interpolation is used via matplotlib.tri.LinearTriInterpolator.</p> <p>Instead of using <a class=\"reference internal\" href=\"#matplotlib.mlab.griddata\" title=\"matplotlib.mlab.griddata\"><code>griddata</code></a>, more flexible functionality and other interpolation options are available using a matplotlib.tri.Triangulation and a matplotlib.tri.TriInterpolator.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.identity\"><code>matplotlib.mlab.identity(n, rank=2, dtype='l', typecode=None)</code></dt> <dd>\n<p>Returns the identity matrix of shape (<em>n</em>, <em>n</em>, ..., <em>n</em>) (rank <em>r</em>).</p> <p>For ranks higher than 2, this object is simply a multi-index Kronecker delta:</p> <pre data-language=\"python\">                    /  1  if i0=i1=...=iR,\nid[i0,i1,...,iR] = -|\n                    \\  0  otherwise.\n</pre> <p>Optionally a <em>dtype</em> (or typecode) may be given (it defaults to ‘l’).</p> <p>Since rank defaults to 2, this function behaves in the default case (when only <em>n</em> is given) like <code>numpy.identity(n)</code> – but surprisingly, it is much faster.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.inside_poly\"><code>matplotlib.mlab.inside_poly(points, verts)</code></dt> <dd>\n<p><em>points</em> is a sequence of <em>x</em>, <em>y</em> points. <em>verts</em> is a sequence of <em>x</em>, <em>y</em> vertices of a polygon.</p> <p>Return value is a sequence of indices into points for the points that are inside the polygon.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.is_closed_polygon\"><code>matplotlib.mlab.is_closed_polygon(X)</code></dt> <dd>\n<p>Tests whether first and last object in a sequence are the same. These are presumably coordinates on a polygonal curve, in which case this function tests if that curve is closed.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.ispower2\"><code>matplotlib.mlab.ispower2(n)</code></dt> <dd>\n<p>Returns the log base 2 of <em>n</em> if <em>n</em> is a power of 2, zero otherwise.</p> <p>Note the potential ambiguity if <em>n</em> == 1: 2**0 == 1, interpret accordingly.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.isvector\"><code>matplotlib.mlab.isvector(X)</code></dt> <dd>\n<p>Like the MATLAB function with the same name, returns <em>True</em> if the supplied numpy array or matrix <em>X</em> looks like a vector, meaning it has a one non-singleton axis (i.e., it can have multiple axes, but all must have length 1, except for one of them).</p> <p>If you just want to see if the array has 1 axis, use X.ndim == 1.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.l1norm\"><code>matplotlib.mlab.l1norm(a)</code></dt> <dd>\n<p>Return the <em>l1</em> norm of <em>a</em>, flattened out.</p> <p>Implemented as a separate function (not a call to <code>norm()</code> for speed).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.l2norm\"><code>matplotlib.mlab.l2norm(a)</code></dt> <dd>\n<p>Return the <em>l2</em> norm of <em>a</em>, flattened out.</p> <p>Implemented as a separate function (not a call to <code>norm()</code> for speed).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.less_simple_linear_interpolation\"><code>matplotlib.mlab.less_simple_linear_interpolation(x, y, xi, extrap=False)</code></dt> <dd>\n<p>This function provides simple (but somewhat less so than <code>cbook.simple_linear_interpolation()</code>) linear interpolation. <code>simple_linear_interpolation()</code> will give a list of point between a start and an end, while this does true linear interpolation at an arbitrary set of points.</p> <p>This is very inefficient linear interpolation meant to be used only for a small number of points in relatively non-intensive use cases. For real linear interpolation, use scipy.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.log2\"><code>matplotlib.mlab.log2(x, ln2=0.6931471805599453)</code></dt> <dd>\n<p>Return the log(<em>x</em>) in base 2.</p> <p>This is a _slow_ function but which is guaranteed to return the correct integer value if the input is an integer exact power of 2.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.logspace\"><code>matplotlib.mlab.logspace(xmin, xmax, N)</code></dt> <dd>\n<p>Return N values logarithmically spaced between xmin and xmax.</p> <p>Call signature:</p> <pre data-language=\"python\">logspace(xmin, xmax, N)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.longest_contiguous_ones\"><code>matplotlib.mlab.longest_contiguous_ones(x)</code></dt> <dd>\n<p>Return the indices of the longest stretch of contiguous ones in <em>x</em>, assuming <em>x</em> is a vector of zeros and ones. If there are two equally long stretches, pick the first.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.longest_ones\"><code>matplotlib.mlab.longest_ones(x)</code></dt> <dd>\n<p>alias for longest_contiguous_ones</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.magnitude_spectrum\"><code>matplotlib.mlab.magnitude_spectrum(x, Fs=None, window=None, pad_to=None, sides=None)</code></dt> <dd>\n<p>Compute the magnitude (absolute value) of the frequency spectrum of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the magnitude spectrum (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> </dl> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a> returns the power spectral density.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.complex_spectrum\" title=\"matplotlib.mlab.complex_spectrum\"><code>complex_spectrum()</code></a></dt> <dd>This function returns the absolute value of <a class=\"reference internal\" href=\"#matplotlib.mlab.complex_spectrum\" title=\"matplotlib.mlab.complex_spectrum\"><code>complex_spectrum()</code></a>.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a> returns the angles of the corresponding frequencies.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.phase_spectrum\" title=\"matplotlib.mlab.phase_spectrum\"><code>phase_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.phase_spectrum\" title=\"matplotlib.mlab.phase_spectrum\"><code>phase_spectrum()</code></a> returns the phase (unwrapped angle) of the corresponding frequencies.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a> can return the magnitude spectrum of segments within the signal.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.movavg\"><code>matplotlib.mlab.movavg(x, n)</code></dt> <dd>\n<p>Compute the len(<em>n</em>) moving average of <em>x</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.norm_flat\"><code>matplotlib.mlab.norm_flat(a, p=2)</code></dt> <dd>\n<p>norm(a,p=2) -&gt; l-p norm of a.flat</p> <p>Return the l-p norm of <em>a</em>, considered as a flat array. This is NOT a true matrix norm, since arrays of arbitrary rank are always flattened.</p> <p><em>p</em> can be a number or the string ‘Infinity’ to get the L-infinity norm.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.normpdf\"><code>matplotlib.mlab.normpdf(x, *args)</code></dt> <dd>\n<p>Return the normal pdf evaluated at <em>x</em>; args provides <em>mu</em>, <em>sigma</em></p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.offset_line\"><code>matplotlib.mlab.offset_line(y, yerr)</code></dt> <dd>\n<p>Offsets an array <em>y</em> by +/- an error and returns a tuple (y - err, y + err).</p> <p>The error term can be:</p> <ul> <li>A scalar. In this case, the returned tuple is obvious. </li> <li>A vector of the same length as <em>y</em>. The quantities y +/- err are computed component-wise. </li> <li>\n<p class=\"first\">A tuple of length 2. In this case, yerr[0] is the error below <em>y</em> and yerr[1] is error above <em>y</em>. For example:</p> <pre data-language=\"python\">from pylab import *\nx = linspace(0, 2*pi, num=100, endpoint=True)\ny = sin(x)\ny_minus, y_plus = mlab.offset_line(y, 0.1)\nplot(x, y)\nfill_between(x, ym, y2=yp)\nshow()\n</pre> </li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.path_length\"><code>matplotlib.mlab.path_length(X)</code></dt> <dd>\n<p>Computes the distance travelled along a polygonal curve in <em>N</em> dimensions.</p> <p>Where <em>X</em> is an <em>M</em> x <em>N</em> array or matrix. Returns an array of length <em>M</em> consisting of the distance along the curve at each point (i.e., the rows of <em>X</em>).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.phase_spectrum\"><code>matplotlib.mlab.phase_spectrum(x, Fs=None, window=None, pad_to=None, sides=None)</code></dt> <dd>\n<p>Compute the phase of the frequency spectrum (unwrapped angle spectrum) of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the phase spectrum in radians (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> </dl> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.complex_spectrum\" title=\"matplotlib.mlab.complex_spectrum\"><code>complex_spectrum()</code></a></dt> <dd>This function returns the angle value of <a class=\"reference internal\" href=\"#matplotlib.mlab.complex_spectrum\" title=\"matplotlib.mlab.complex_spectrum\"><code>complex_spectrum()</code></a>.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a> returns the magnitudes of the corresponding frequencies.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a> returns the wrapped version of this function.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a> can return the phase spectrum of segments within the signal.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.poly_below\"><code>matplotlib.mlab.poly_below(xmin, xs, ys)</code></dt> <dd>\n<p>Given a sequence of <em>xs</em> and <em>ys</em>, return the vertices of a polygon that has a horizontal base at <em>xmin</em> and an upper bound at the <em>ys</em>. <em>xmin</em> is a scalar.</p> <p>Intended for use with <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.fill\" title=\"matplotlib.axes.Axes.fill\"><code>matplotlib.axes.Axes.fill()</code></a>, e.g.,:</p> <pre data-language=\"python\">xv, yv = poly_below(0, x, y)\nax.fill(xv, yv)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.poly_between\"><code>matplotlib.mlab.poly_between(x, ylower, yupper)</code></dt> <dd>\n<p>Given a sequence of <em>x</em>, <em>ylower</em> and <em>yupper</em>, return the polygon that fills the regions between them. <em>ylower</em> or <em>yupper</em> can be scalar or iterable. If they are iterable, they must be equal in length to <em>x</em>.</p> <p>Return value is <em>x</em>, <em>y</em> arrays for use with <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.fill\" title=\"matplotlib.axes.Axes.fill\"><code>matplotlib.axes.Axes.fill()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.prctile\"><code>matplotlib.mlab.prctile(x, p=(0.0, 25.0, 50.0, 75.0, 100.0))</code></dt> <dd>\n<p>Return the percentiles of <em>x</em>. <em>p</em> can either be a sequence of percentile values or a scalar. If <em>p</em> is a sequence, the ith element of the return sequence is the <em>p*(i)-th percentile of *x</em>. If <em>p</em> is a scalar, the largest value of <em>x</em> less than or equal to the <em>p</em> percentage point in the sequence is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.prctile_rank\"><code>matplotlib.mlab.prctile_rank(x, p)</code></dt> <dd>\n<p>Return the rank for each element in <em>x</em>, return the rank 0..len(<em>p</em>). e.g., if <em>p</em> = (25, 50, 75), the return value will be a len(<em>x</em>) array with values in [0,1,2,3] where 0 indicates the value is less than the 25th percentile, 1 indicates the value is &gt;= the 25th and &lt; 50th percentile, ... and 3 indicates the value is above the 75th percentile cutoff.</p> <p><em>p</em> is either an array of percentiles in [0..100] or a scalar which indicates how many quantiles of data you want ranked.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.psd\"><code>matplotlib.mlab.psd(x, NFFT=None, Fs=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None)</code></dt> <dd>\n<p>Compute the power spectral density.</p> <p>Call signature:</p> <pre data-language=\"python\">psd(x, NFFT=256, Fs=2, detrend=mlab.detrend_none,\n    window=mlab.window_hanning, noverlap=0, pad_to=None,\n    sides='default', scale_by_freq=None)\n</pre> <p>The power spectral density <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-f6d65b7f49.png\" style=\"position: relative; bottom: -6px\"> by Welch’s average periodogram method. The vector <em>x</em> is divided into <em>NFFT</em> length segments. Each segment is detrended by function <em>detrend</em> and windowed by function <em>window</em>. <em>noverlap</em> gives the length of the overlap between segments. The <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-e29eb6062a.png\" style=\"position: relative; bottom: -8px\"> of each segment <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-387c1a8741.png\" style=\"position: relative; bottom: -3px\"> are averaged to compute <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-f6d65b7f49.png\" style=\"position: relative; bottom: -6px\">.</p> <p>If len(<em>x</em>) &lt; <em>NFFT</em>, it will be zero padded to <em>NFFT</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<p class=\"first\">Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</p> <p class=\"last\"><em>noverlap</em>: integer The number of points of overlap between segments. The default value is 0 (no overlap).</p> </dd> </dl> <p>Returns the tuple (<em>Pxx</em>, <em>freqs</em>).</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Pxx</em>: 1-D array</dt> <dd>The values for the power spectrum <code>P_{xx}</code> (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>Pxx</em>\n</dd> </dl> </div>\n</blockquote> <p>Refs:</p> <blockquote> <div>Bendat &amp; Piersol – Random Data: Analysis and Measurement Procedures, John Wiley &amp; Sons (1986)</div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a> differs in the default overlap; in not returning the mean of the segment periodograms; and in returning the times of the segments.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a> returns the magnitude spectrum.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.csd\" title=\"matplotlib.mlab.csd\"><code>csd()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.csd\" title=\"matplotlib.mlab.csd\"><code>csd()</code></a> returns the spectral density between two signals.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.quad2cubic\"><code>matplotlib.mlab.quad2cubic(q0x, q0y, q1x, q1y, q2x, q2y)</code></dt> <dd>\n<p>Converts a quadratic Bezier curve to a cubic approximation.</p> <p>The inputs are the <em>x</em> and <em>y</em> coordinates of the three control points of a quadratic curve, and the output is a tuple of <em>x</em> and <em>y</em> coordinates of the four control points of the cubic curve.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rec2csv\"><code>matplotlib.mlab.rec2csv(r, fname, delimiter=', ', formatd=None, missing='', missingd=None, withheader=True)</code></dt> <dd>\n<p>Save the data from numpy recarray <em>r</em> into a comma-/space-/tab-delimited file. The record array dtype names will be used for column headers.</p> <dl class=\"docutils\"> <dt>\n<em>fname</em>: can be a filename or a file handle. Support for gzipped</dt> <dd>files is automatic, if the filename ends in ‘.gz’</dd> <dt>\n<em>withheader</em>: if withheader is False, do not write the attribute</dt> <dd>names in the first row</dd> </dl> <p>for formatd type FormatFloat, we override the precision to store full precision floats in the CSV file</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.csv2rec\" title=\"matplotlib.mlab.csv2rec\"><code>csv2rec()</code></a></dt> <dd>For information about <em>missing</em> and <em>missingd</em>, which can be used to fill in masked values into your CSV file.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rec2txt\"><code>matplotlib.mlab.rec2txt(r, header=None, padding=3, precision=3, fields=None)</code></dt> <dd>\n<p>Returns a textual representation of a record array.</p> <p><em>r</em>: numpy recarray</p> <p><em>header</em>: list of column headers</p> <p><em>padding</em>: space between each column</p> <dl class=\"docutils\"> <dt>\n<em>precision</em>: number of decimal places to use for floats.</dt> <dd>Set to an integer to apply to all floats. Set to a list of integers to apply precision individually. Precision for non-floats is simply ignored.</dd> </dl> <p><em>fields</em> : if not None, a list of field names to print. fields can be a list of strings like [‘field1’, ‘field2’] or a single comma separated string like ‘field1,field2’</p> <p>Example:</p> <pre data-language=\"python\">precision=[0,2,3]\n</pre> <p>Output:</p> <pre data-language=\"python\">ID    Price   Return\nABC   12.54    0.234\nXYZ    6.32   -0.076\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rec_append_fields\"><code>matplotlib.mlab.rec_append_fields(rec, names, arrs, dtypes=None)</code></dt> <dd>\n<p>Return a new record array with field names populated with data from arrays in <em>arrs</em>. If appending a single field, then <em>names</em>, <em>arrs</em> and <em>dtypes</em> do not have to be lists. They can just be the values themselves.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rec_drop_fields\"><code>matplotlib.mlab.rec_drop_fields(rec, names)</code></dt> <dd>\n<p>Return a new numpy record array with fields in <em>names</em> dropped.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rec_groupby\"><code>matplotlib.mlab.rec_groupby(r, groupby, stats)</code></dt> <dd>\n<p><em>r</em> is a numpy record array</p> <p><em>groupby</em> is a sequence of record array attribute names that together form the grouping key. e.g., (‘date’, ‘productcode’)</p> <p><em>stats</em> is a sequence of (<em>attr</em>, <em>func</em>, <em>outname</em>) tuples which will call <code>x = func(attr)</code> and assign <em>x</em> to the record array output with attribute <em>outname</em>. For example:</p> <pre data-language=\"python\">stats = ( ('sales', len, 'numsales'), ('sales', np.mean, 'avgsale') )\n</pre> <p>Return record array has <em>dtype</em> names for each attribute name in the <em>groupby</em> argument, with the associated group values, and for each outname name in the <em>stats</em> argument, with the associated stat summary output.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rec_join\"><code>matplotlib.mlab.rec_join(key, r1, r2, jointype='inner', defaults=None, r1postfix='1', r2postfix='2')</code></dt> <dd>\n<p>Join record arrays <em>r1</em> and <em>r2</em> on <em>key</em>; <em>key</em> is a tuple of field names – if <em>key</em> is a string it is assumed to be a single attribute name. If <em>r1</em> and <em>r2</em> have equal values on all the keys in the <em>key</em> tuple, then their fields will be merged into a new record array containing the intersection of the fields of <em>r1</em> and <em>r2</em>.</p> <p><em>r1</em> (also <em>r2</em>) must not have any duplicate keys.</p> <p>The <em>jointype</em> keyword can be ‘inner’, ‘outer’, ‘leftouter’. To do a rightouter join just reverse <em>r1</em> and <em>r2</em>.</p> <p>The <em>defaults</em> keyword is a dictionary filled with <code>{column_name:default_value}</code> pairs.</p> <p>The keywords <em>r1postfix</em> and <em>r2postfix</em> are postfixed to column names (other than keys) that are both in <em>r1</em> and <em>r2</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rec_keep_fields\"><code>matplotlib.mlab.rec_keep_fields(rec, names)</code></dt> <dd>\n<p>Return a new numpy record array with only fields listed in names</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rec_summarize\"><code>matplotlib.mlab.rec_summarize(r, summaryfuncs)</code></dt> <dd>\n<p><em>r</em> is a numpy record array</p> <p><em>summaryfuncs</em> is a list of (<em>attr</em>, <em>func</em>, <em>outname</em>) tuples which will apply <em>func</em> to the array <em>r*[attr] and assign the output to a new attribute name *outname</em>. The returned record array is identical to <em>r</em>, with extra arrays for each element in <em>summaryfuncs</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.recs_join\"><code>matplotlib.mlab.recs_join(key, name, recs, jointype='outer', missing=0.0, postfixes=None)</code></dt> <dd>\n<p>Join a sequence of record arrays on single column key.</p> <p>This function only joins a single column of the multiple record arrays</p> <dl class=\"docutils\"> <dt><em>key</em></dt> <dd>is the column name that acts as a key</dd> <dt><em>name</em></dt> <dd>is the name of the column that we want to join</dd> <dt><em>recs</em></dt> <dd>is a list of record arrays to join</dd> <dt><em>jointype</em></dt> <dd>is a string ‘inner’ or ‘outer’</dd> <dt><em>missing</em></dt> <dd>is what any missing field is replaced by</dd> <dt><em>postfixes</em></dt> <dd>if not None, a len recs sequence of postfixes</dd> </dl> <p>returns a record array with columns [rowkey, name0, name1, ... namen-1]. or if postfixes [PF0, PF1, ..., PFN-1] are supplied, [rowkey, namePF0, namePF1, ... namePFN-1].</p> <p>Example:</p> <pre data-language=\"python\">r = recs_join(\"date\", \"close\", recs=[r0, r1], missing=0.)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rk4\"><code>matplotlib.mlab.rk4(derivs, y0, t)</code></dt> <dd>\n<p>Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta. This is a toy implementation which may be useful if you find yourself stranded on a system w/o scipy. Otherwise use <code>scipy.integrate()</code>.</p> <dl class=\"docutils\"> <dt><em>y0</em></dt> <dd>initial state vector</dd> <dt><em>t</em></dt> <dd>sample times</dd> <dt><em>derivs</em></dt> <dd>returns the derivative of the system and has the signature <code>dy = derivs(yi, ti)</code>\n</dd> </dl> <p>Example 1</p> <pre data-language=\"python\">## 2D system\n\ndef derivs6(x,t):\n    d1 =  x[0] + 2*x[1]\n    d2 =  -3*x[0] + 4*x[1]\n    return (d1, d2)\ndt = 0.0005\nt = arange(0.0, 2.0, dt)\ny0 = (1,2)\nyout = rk4(derivs6, y0, t)\n</pre> <p>Example 2:</p> <pre data-language=\"python\">## 1D system\nalpha = 2\ndef derivs(x,t):\n    return -alpha*x + exp(-t)\n\ny0 = 1\nyout = rk4(derivs, y0, t)\n</pre> <p>If you have access to scipy, you should probably be using the scipy.integrate tools rather than this function.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.rms_flat\"><code>matplotlib.mlab.rms_flat(a)</code></dt> <dd>\n<p>Return the root mean square of all the elements of <em>a</em>, flattened out.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.safe_isinf\"><code>matplotlib.mlab.safe_isinf(x)</code></dt> <dd>\n<p><code>numpy.isinf()</code> for arbitrary types</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.safe_isnan\"><code>matplotlib.mlab.safe_isnan(x)</code></dt> <dd>\n<p><code>numpy.isnan()</code> for arbitrary types</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.segments_intersect\"><code>matplotlib.mlab.segments_intersect(s1, s2)</code></dt> <dd>\n<p>Return <em>True</em> if <em>s1</em> and <em>s2</em> intersect. <em>s1</em> and <em>s2</em> are defined as:</p> <pre data-language=\"python\">s1: (x1, y1), (x2, y2)\ns2: (x3, y3), (x4, y4)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.slopes\"><code>matplotlib.mlab.slopes(x, y)</code></dt> <dd>\n<p><a class=\"reference internal\" href=\"#matplotlib.mlab.slopes\" title=\"matplotlib.mlab.slopes\"><code>slopes()</code></a> calculates the slope <em>y</em>‘(<em>x</em>)</p> <p>The slope is estimated using the slope obtained from that of a parabola through any three consecutive points.</p> <p>This method should be superior to that described in the appendix of A CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russel W. Stineman (Creative Computing July 1980) in at least one aspect:</p> <blockquote> <div>Circles for interpolation demand a known aspect ratio between <em>x</em>- and <em>y</em>-values. For many functions, however, the abscissa are given in different dimensions, so an aspect ratio is completely arbitrary.</div>\n</blockquote> <p>The parabola method gives very similar results to the circle method for most regular cases but behaves much better in special cases.</p> <p>Norbert Nemec, Institute of Theoretical Physics, University or Regensburg, April 2006 Norbert.Nemec at physik.uni-regensburg.de</p> <p>(inspired by a original implementation by Halldor Bjornsson, Icelandic Meteorological Office, March 2006 halldor at vedur.is)</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.specgram\"><code>matplotlib.mlab.specgram(x, NFFT=None, Fs=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, mode=None)</code></dt> <dd>\n<p>Compute a spectrogram.</p> <p>Call signature:</p> <pre data-language=\"python\">specgram(x, NFFT=256, Fs=2,detrend=mlab.detrend_none,\n        window=mlab.window_hanning, noverlap=128,\n        cmap=None, xextent=None, pad_to=None, sides='default',\n        scale_by_freq=None, mode='default')\n</pre> <p>Compute and plot a spectrogram of data in <em>x</em>. Data are split into <em>NFFT</em> length segments and the spectrum of each section is computed. The windowing function <em>window</em> is applied to each segment, and the amount of overlap of each segment is specified with <em>noverlap</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>mode</em>: [ ‘default’ | ‘psd’ | ‘complex’ | ‘magnitude’</dt> <dd>\n<blockquote class=\"first\"> <div>‘angle’ | ‘phase’ ]</div>\n</blockquote> <p class=\"last\">What sort of spectrum to use. Default is ‘psd’. which takes the power spectral density. ‘complex’ returns the complex-valued frequency spectrum. ‘magnitude’ returns the magnitude spectrum. ‘angle’ returns the phase spectrum without unwrapping. ‘phase’ returns the phase spectrum with unwrapping.</p> </dd> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between blocks. The default value is 128.</dd> </dl> </dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>t</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 2-D array</dt> <dd>columns are the periodograms of successive segments</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the rows in <em>spectrum</em>\n</dd> <dt>\n<em>t</em>: 1-D array</dt> <dd>The times corresponding to midpoints of segments (i.e the columns in <em>spectrum</em>).</dd> </dl> </div>\n</blockquote> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><em>detrend</em> and <em>scale_by_freq</em> only apply when <em>mode</em> is set to ‘psd’</p> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.psd\" title=\"matplotlib.mlab.psd\"><code>psd()</code></a> differs in the default overlap; in returning the mean of the segment periodograms; and in not returning times.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.complex_spectrum\" title=\"matplotlib.mlab.complex_spectrum\"><code>complex_spectrum()</code></a></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘complex’.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.magnitude_spectrum\" title=\"matplotlib.mlab.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘magnitude’.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.angle_spectrum\" title=\"matplotlib.mlab.angle_spectrum\"><code>angle_spectrum()</code></a></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘angle’.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.phase_spectrum\" title=\"matplotlib.mlab.phase_spectrum\"><code>phase_spectrum()</code></a></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘phase’.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.stineman_interp\"><code>matplotlib.mlab.stineman_interp(xi, x, y, yp=None)</code></dt> <dd>\n<p>Given data vectors <em>x</em> and <em>y</em>, the slope vector <em>yp</em> and a new abscissa vector <em>xi</em>, the function <a class=\"reference internal\" href=\"#matplotlib.mlab.stineman_interp\" title=\"matplotlib.mlab.stineman_interp\"><code>stineman_interp()</code></a> uses Stineman interpolation to calculate a vector <em>yi</em> corresponding to <em>xi</em>.</p> <p>Here’s an example that generates a coarse sine curve, then interpolates over a finer abscissa:</p> <pre data-language=\"python\">x = linspace(0,2*pi,20);  y = sin(x); yp = cos(x)\nxi = linspace(0,2*pi,40);\nyi = stineman_interp(xi,x,y,yp);\nplot(x,y,'o',xi,yi)\n</pre> <p>The interpolation method is described in the article A CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russell W. Stineman. The article appeared in the July 1980 issue of Creative Computing with a note from the editor stating that while they were:</p> <blockquote> <div>not an academic journal but once in a while something serious and original comes in adding that this was “apparently a real solution” to a well known problem.</div>\n</blockquote> <p>For <em>yp</em> = <em>None</em>, the routine automatically determines the slopes using the <a class=\"reference internal\" href=\"#matplotlib.mlab.slopes\" title=\"matplotlib.mlab.slopes\"><code>slopes()</code></a> routine.</p> <p><em>x</em> is assumed to be sorted in increasing order.</p> <p>For values <code>xi[j] &lt; x[0]</code> or <code>xi[j] &gt; x[-1]</code>, the routine tries an extrapolation. The relevance of the data obtained from this, of course, is questionable...</p> <p>Original implementation by Halldor Bjornsson, Icelandic Meteorolocial Office, March 2006 halldor at vedur.is</p> <p>Completely reworked and optimized for Python by Norbert Nemec, Institute of Theoretical Physics, University or Regensburg, April 2006 Norbert.Nemec at physik.uni-regensburg.de</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.stride_repeat\"><code>matplotlib.mlab.stride_repeat(x, n, axis=0)</code></dt> <dd>\n<p>Repeat the values in an array in a memory-efficient manner. Array x is stacked vertically n times.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">It is not safe to write to the output array. Multiple elements may point to the same piece of memory, so modifying one value may change others.</p> </div> <p>Call signature:</p> <pre data-language=\"python\">  stride_repeat(x, n, axis=0)\n\n*x*: 1D array or sequence\n  Array or sequence containing the data.\n\n*n*: integer\n  The number of time to repeat the array.\n\n*axis*: integer\n  The axis along which the data will run.\n</pre> <dl class=\"docutils\"> <dt>Refs:</dt> <dd><a class=\"reference external\" href=\"http://stackoverflow.com/a/5568169\">stackoverflaw: Repeat NumPy array without replicating data?</a></dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.stride_windows\"><code>matplotlib.mlab.stride_windows(x, n, noverlap=None, axis=0)</code></dt> <dd>\n<p>Get all windows of x with length n as a single array, using strides to avoid data duplication.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">It is not safe to write to the output array. Multiple elements may point to the same piece of memory, so modifying one value may change others.</p> </div> <p>Call signature:</p> <pre data-language=\"python\">  stride_windows(x, n, noverlap=0)\n\n*x*: 1D array or sequence\n  Array or sequence containing the data.\n\n*n*: integer\n  The number of data points in each window.\n\n*noverlap*: integer\n  The overlap between adjacent windows.\n  Default is 0 (no overlap)\n\n*axis*: integer\n  The axis along which the windows will run.\n</pre> <dl class=\"docutils\"> <dt>Refs:</dt> <dd>\n<a class=\"reference external\" href=\"http://stackoverflow.com/a/6811241\">stackoverflaw: Rolling window for 1D arrays in Numpy?</a> <a class=\"reference external\" href=\"http://stackoverflow.com/a/4947453\">stackoverflaw: Using strides for an efficient moving average filter</a>\n</dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.vector_lengths\"><code>matplotlib.mlab.vector_lengths(X, P=2.0, axis=None)</code></dt> <dd>\n<p>Finds the length of a set of vectors in <em>n</em> dimensions. This is like the <code>numpy.norm()</code> function for vectors, but has the ability to work over a particular axis of the supplied array or matrix.</p> <p>Computes <code>(sum((x_i)^P))^(1/P)</code> for each <code>{x_i}</code> being the elements of <em>X</em> along the given axis. If <em>axis</em> is <em>None</em>, compute over all elements of <em>X</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.window_hanning\"><code>matplotlib.mlab.window_hanning(x)</code></dt> <dd>\n<p>Return x times the hanning window of len(x).</p> <p>Call signature:</p> <pre data-language=\"python\">window_hanning(x)\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.window_none\" title=\"matplotlib.mlab.window_none\"><code>window_none()</code></a> is another window algorithm.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.mlab.window_none\"><code>matplotlib.mlab.window_none(x)</code></dt> <dd>\n<p>No window function; simply return x.</p> <p>Call signature:</p> <pre data-language=\"python\">window_none(x)\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.mlab.window_hanning\" title=\"matplotlib.mlab.window_hanning\"><code>window_hanning()</code></a> is another window algorithm.</dd> </dl> </div> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/mlab_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/mlab_api.html</a>\n  </p>\n</div>\n","backend_bases_api":"<h1 id=\"matplotlib-backend-bases\">matplotlib.backend_bases</h1> <p id=\"module-matplotlib.backend_bases\">Abstract base classes define the primitives that renderers and graphics contexts must implement to serve as a matplotlib backend</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase\" title=\"matplotlib.backend_bases.RendererBase\"><code>RendererBase</code></a></dt> <dd>An abstract base class to handle drawing/rendering operations.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.FigureCanvasBase\" title=\"matplotlib.backend_bases.FigureCanvasBase\"><code>FigureCanvasBase</code></a></dt> <dd>The abstraction layer that separates the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> from the backend specific details like a user interface drawing area</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.GraphicsContextBase\" title=\"matplotlib.backend_bases.GraphicsContextBase\"><code>GraphicsContextBase</code></a></dt> <dd>An abstract base class that provides color, line styles, etc...</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>Event</code></a></dt> <dd>The base class for all of the matplotlib event handling. Derived classes such as <a class=\"reference internal\" href=\"#matplotlib.backend_bases.KeyEvent\" title=\"matplotlib.backend_bases.KeyEvent\"><code>KeyEvent</code></a> and <a class=\"reference internal\" href=\"#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a> store the meta data like keys and buttons pressed, x and y locations in pixel and <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> coordinates.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.ShowBase\" title=\"matplotlib.backend_bases.ShowBase\"><code>ShowBase</code></a></dt> <dd>The base class for the Show class of each interactive backend; the ‘show’ callable is then set to Show.__call__, inherited from ShowBase.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.ToolContainerBase\" title=\"matplotlib.backend_bases.ToolContainerBase\"><code>ToolContainerBase</code></a></dt> <dd>The base class for the Toolbar class of each interactive backend.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.StatusbarBase\" title=\"matplotlib.backend_bases.StatusbarBase\"><code>StatusbarBase</code></a></dt> <dd>The base class for the messaging area.</dd> </dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.CloseEvent\"><code>class matplotlib.backend_bases.CloseEvent(name, canvas, guiEvent=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>matplotlib.backend_bases.Event</code></a></p> <p>An event triggered by a figure being closed</p> <p>In addition to the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>Event</code></a> attributes, the following event attributes are defined:</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.DrawEvent\"><code>class matplotlib.backend_bases.DrawEvent(name, canvas, renderer)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>matplotlib.backend_bases.Event</code></a></p> <p>An event triggered by a draw operation on the canvas</p> <p>In addition to the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>Event</code></a> attributes, the following event attributes are defined:</p> <dl class=\"docutils\"> <dt><em>renderer</em></dt> <dd>the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase\" title=\"matplotlib.backend_bases.RendererBase\"><code>RendererBase</code></a> instance for the draw event</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.Event\"><code>class matplotlib.backend_bases.Event(name, canvas, guiEvent=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A matplotlib event. Attach additional attributes as defined in <a class=\"reference internal\" href=\"#matplotlib.backend_bases.FigureCanvasBase.mpl_connect\" title=\"matplotlib.backend_bases.FigureCanvasBase.mpl_connect\"><code>FigureCanvasBase.mpl_connect()</code></a>. The following attributes are defined and shown with their default values</p> <dl class=\"docutils\"> <dt><em>name</em></dt> <dd>the event name</dd> <dt><em>canvas</em></dt> <dd>the FigureCanvas instance generating the event</dd> <dt><em>guiEvent</em></dt> <dd>the GUI event that triggered the matplotlib event</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase\"><code>class matplotlib.backend_bases.FigureCanvasBase(figure)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>The canvas the figure renders into.</p> <p>Public attributes</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>figure</em></dt> <dd>A <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</dd> </dl> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.blit\"><code>blit(bbox=None)</code></dt> <dd>\n<p>blit the canvas in bbox (default entire canvas)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.button_press_event\"><code>button_press_event(x, y, button, dblclick=False, guiEvent=None)</code></dt> <dd>\n<p>Backend derived classes should call this function on any mouse button press. x,y are the canvas coords: 0,0 is lower, left. button and key are as defined in <a class=\"reference internal\" href=\"#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a>.</p> <p>This method will be call all functions connected to the ‘button_press_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a> instance.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.button_release_event\"><code>button_release_event(x, y, button, guiEvent=None)</code></dt> <dd>\n<p>Backend derived classes should call this function on any mouse button release.</p> <dl class=\"docutils\"> <dt><em>x</em></dt> <dd>the canvas coordinates where 0=left</dd> <dt><em>y</em></dt> <dd>the canvas coordinates where 0=bottom</dd> <dt><em>guiEvent</em></dt> <dd>the native UI event that generated the mpl event</dd> </dl> <p>This method will be call all functions connected to the ‘button_release_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a> instance.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.close_event\"><code>close_event(guiEvent=None)</code></dt> <dd>\n<p>This method will be called by all functions connected to the ‘close_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.CloseEvent\" title=\"matplotlib.backend_bases.CloseEvent\"><code>CloseEvent</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.draw\"><code>draw(*args, **kwargs)</code></dt> <dd>\n<p>Render the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.draw_cursor\"><code>draw_cursor(event)</code></dt> <dd>\n<p>Draw a cursor in the event.axes if inaxes is not None. Use native GUI drawing for efficiency if possible</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.draw_event\"><code>draw_event(renderer)</code></dt> <dd>\n<p>This method will be call all functions connected to the ‘draw_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.DrawEvent\" title=\"matplotlib.backend_bases.DrawEvent\"><code>DrawEvent</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.draw_idle\"><code>draw_idle(*args, **kwargs)</code></dt> <dd>\n<p><a class=\"reference internal\" href=\"#matplotlib.backend_bases.FigureCanvasBase.draw\" title=\"matplotlib.backend_bases.FigureCanvasBase.draw\"><code>draw()</code></a> only if idle; defaults to draw but backends can overrride</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.enter_notify_event\"><code>enter_notify_event(guiEvent=None, xy=None)</code></dt> <dd>\n<p>Backend derived classes should call this function when entering canvas</p> <dl class=\"docutils\"> <dt><em>guiEvent</em></dt> <dd>the native UI event that generated the mpl event</dd> <dt><em>xy</em></dt> <dd>the coordinate location of the pointer when the canvas is entered</dd> </dl> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.events\"><code>events = ['resize_event', 'draw_event', 'key_press_event', 'key_release_event', 'button_press_event', 'button_release_event', 'scroll_event', 'motion_notify_event', 'pick_event', 'idle_event', 'figure_enter_event', 'figure_leave_event', 'axes_enter_event', 'axes_leave_event', 'close_event']</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.filetypes\"><code>filetypes = {'pgf': 'PGF code for LaTeX', 'rgba': 'Raw RGBA bitmap', 'svg': 'Scalable Vector Graphics', 'tif': 'Tagged Image File Format', 'ps': 'Postscript', 'jpeg': 'Joint Photographic Experts Group', 'tiff': 'Tagged Image File Format', 'svgz': 'Scalable Vector Graphics', 'eps': 'Encapsulated Postscript', 'png': 'Portable Network Graphics', 'raw': 'Raw RGBA bitmap', 'pdf': 'Portable Document Format', 'jpg': 'Joint Photographic Experts Group'}</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.fixed_dpi\"><code>fixed_dpi = None</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.flush_events\"><code>flush_events()</code></dt> <dd>\n<p>Flush the GUI events for the figure. Implemented only for backends with GUIs.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.get_default_filename\"><code>get_default_filename()</code></dt> <dd>\n<p>Return a string, which includes extension, suitable for use as a default filename.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.get_default_filetype\"><code>classmethod get_default_filetype()</code></dt> <dd>\n<p>Get the default savefig file format as specified in rcParam <code>savefig.format</code>. Returned string excludes period. Overridden in backends that only support a single file type.</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes\"><code>classmethod get_supported_filetypes()</code></dt> <dd>\n<p>Return dict of savefig file formats supported by this backend</p> </dd>\n</dl> <dl class=\"classmethod\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.get_supported_filetypes_grouped\"><code>classmethod get_supported_filetypes_grouped()</code></dt> <dd>\n<p>Return a dict of savefig file formats supported by this backend, where the keys are a file type name, such as ‘Joint Photographic Experts Group’, and the values are a list of filename extensions used for that filetype, such as [‘jpg’, ‘jpeg’].</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.get_width_height\"><code>get_width_height()</code></dt> <dd>\n<p>Return the figure width and height in points or pixels (depending on the backend), truncated to integers</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.get_window_title\"><code>get_window_title()</code></dt> <dd>\n<p>Get the title text of the window containing the figure. Return None if there is no window (e.g., a PS backend).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.grab_mouse\"><code>grab_mouse(ax)</code></dt> <dd>\n<p>Set the child axes which are currently grabbing the mouse events. Usually called by the widgets themselves. It is an error to call this if the mouse is already grabbed by another axes.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.idle_event\"><code>idle_event(guiEvent=None)</code></dt> <dd>\n<p>Called when GUI is idle.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.is_saving\"><code>is_saving()</code></dt> <dd>\n<p>Returns <code>True</code> when the renderer is in the process of saving to a file, rather than rendering for an on-screen buffer.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.key_press_event\"><code>key_press_event(key, guiEvent=None)</code></dt> <dd>\n<p>This method will be call all functions connected to the ‘key_press_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.KeyEvent\" title=\"matplotlib.backend_bases.KeyEvent\"><code>KeyEvent</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.key_release_event\"><code>key_release_event(key, guiEvent=None)</code></dt> <dd>\n<p>This method will be call all functions connected to the ‘key_release_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.KeyEvent\" title=\"matplotlib.backend_bases.KeyEvent\"><code>KeyEvent</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.leave_notify_event\"><code>leave_notify_event(guiEvent=None)</code></dt> <dd>\n<p>Backend derived classes should call this function when leaving canvas</p> <dl class=\"docutils\"> <dt><em>guiEvent</em></dt> <dd>the native UI event that generated the mpl event</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.motion_notify_event\"><code>motion_notify_event(x, y, guiEvent=None)</code></dt> <dd>\n<p>Backend derived classes should call this function on any motion-notify-event.</p> <dl class=\"docutils\"> <dt><em>x</em></dt> <dd>the canvas coordinates where 0=left</dd> <dt><em>y</em></dt> <dd>the canvas coordinates where 0=bottom</dd> <dt><em>guiEvent</em></dt> <dd>the native UI event that generated the mpl event</dd> </dl> <p>This method will be call all functions connected to the ‘motion_notify_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a> instance.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.mpl_connect\"><code>mpl_connect(s, func)</code></dt> <dd>\n<p>Connect event with string <em>s</em> to <em>func</em>. The signature of <em>func</em> is:</p> <pre data-language=\"python\">def func(event)\n</pre> <p>where event is a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>matplotlib.backend_bases.Event</code></a>. The following events are recognized</p> <ul class=\"simple\"> <li>‘button_press_event’</li> <li>‘button_release_event’</li> <li>‘draw_event’</li> <li>‘key_press_event’</li> <li>‘key_release_event’</li> <li>‘motion_notify_event’</li> <li>‘pick_event’</li> <li>‘resize_event’</li> <li>‘scroll_event’</li> <li>‘figure_enter_event’,</li> <li>‘figure_leave_event’,</li> <li>‘axes_enter_event’,</li> <li>‘axes_leave_event’</li> <li>‘close_event’</li> </ul> <p>For the location events (button and key press/release), if the mouse is over the axes, the variable <code>event.inaxes</code> will be set to the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> the event occurs is over, and additionally, the variables <code>event.xdata</code> and <code>event.ydata</code> will be defined. This is the mouse location in data coords. See <a class=\"reference internal\" href=\"#matplotlib.backend_bases.KeyEvent\" title=\"matplotlib.backend_bases.KeyEvent\"><code>KeyEvent</code></a> and <a class=\"reference internal\" href=\"#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a> for more info.</p> <p>Return value is a connection id that can be used with <code>mpl_disconnect()</code>.</p> <p>Example usage:</p> <pre data-language=\"python\">def on_press(event):\n    print('you pressed', event.button, event.xdata, event.ydata)\n\ncid = canvas.mpl_connect('button_press_event', on_press)\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.mpl_disconnect\"><code>mpl_disconnect(cid)</code></dt> <dd>\n<p>Disconnect callback id cid</p> <p>Example usage:</p> <pre data-language=\"python\">cid = canvas.mpl_connect('button_press_event', on_press)\n#...later\ncanvas.mpl_disconnect(cid)\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.new_timer\"><code>new_timer(*args, **kwargs)</code></dt> <dd>\n<p>Creates a new backend-specific subclass of <code>backend_bases.Timer</code>. This is useful for getting periodic events through the backend’s native event loop. Implemented only for backends with GUIs.</p> <p>optional arguments:</p> <dl class=\"docutils\"> <dt><em>interval</em></dt> <dd>Timer interval in milliseconds</dd> <dt><em>callbacks</em></dt> <dd>Sequence of (func, args, kwargs) where func(<em>args, **kwargs) will be executed by the timer every *interval</em>.</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.onHilite\"><code>onHilite(ev)</code></dt> <dd>\n<p>Mouse event processor which highlights the artists under the cursor. Connect this to the ‘motion_notify_event’ using:</p> <pre data-language=\"python\">canvas.mpl_connect('motion_notify_event',canvas.onHilite)\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.onRemove\"><code>onRemove(ev)</code></dt> <dd>\n<p>Mouse event processor which removes the top artist under the cursor. Connect this to the ‘mouse_press_event’ using:</p> <pre data-language=\"python\">canvas.mpl_connect('mouse_press_event',canvas.onRemove)\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.pick\"><code>pick(mouseevent)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.pick_event\"><code>pick_event(mouseevent, artist, **kwargs)</code></dt> <dd>\n<p>This method will be called by artists who are picked and will fire off <a class=\"reference internal\" href=\"#matplotlib.backend_bases.PickEvent\" title=\"matplotlib.backend_bases.PickEvent\"><code>PickEvent</code></a> callbacks registered listeners</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.print_figure\"><code>print_figure(filename, dpi=None, facecolor='w', edgecolor='w', orientation='portrait', format=None, **kwargs)</code></dt> <dd>\n<p>Render the figure to hardcopy. Set the figure patch face and edge colors. This is useful because some of the GUIs have a gray figure face color background and you’ll probably want to override this on hardcopy.</p> <p>Arguments are:</p> <dl class=\"docutils\"> <dt><em>filename</em></dt> <dd>can also be a file object on image backends</dd> <dt><em>orientation</em></dt> <dd>only currently applies to PostScript printing.</dd> <dt><em>dpi</em></dt> <dd>the dots per inch to save the figure in; if None, use savefig.dpi</dd> <dt><em>facecolor</em></dt> <dd>the facecolor of the figure</dd> <dt><em>edgecolor</em></dt> <dd>the edgecolor of the figure</dd> <dt><em>orientation</em></dt> <dd>landscape’ | ‘portrait’ (not supported on all backends)</dd> <dt><em>format</em></dt> <dd>when set, forcibly set the file format to save to</dd> <dt><em>bbox_inches</em></dt> <dd>Bbox in inches. Only the given portion of the figure is saved. If ‘tight’, try to figure out the tight bbox of the figure. If None, use savefig.bbox</dd> <dt><em>pad_inches</em></dt> <dd>Amount of padding around the figure when bbox_inches is ‘tight’. If None, use savefig.pad_inches</dd> <dt><em>bbox_extra_artists</em></dt> <dd>A list of extra artists that will be considered when the tight bbox is calculated.</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.release_mouse\"><code>release_mouse(ax)</code></dt> <dd>\n<p>Release the mouse grab held by the axes, ax. Usually called by the widgets. It is ok to call this even if you ax doesn’t have the mouse grab currently.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.resize\"><code>resize(w, h)</code></dt> <dd>\n<p>set the canvas size in pixels</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.resize_event\"><code>resize_event()</code></dt> <dd>\n<p>This method will be call all functions connected to the ‘resize_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.ResizeEvent\" title=\"matplotlib.backend_bases.ResizeEvent\"><code>ResizeEvent</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.scroll_event\"><code>scroll_event(x, y, step, guiEvent=None)</code></dt> <dd>\n<p>Backend derived classes should call this function on any scroll wheel event. x,y are the canvas coords: 0,0 is lower, left. button and key are as defined in MouseEvent.</p> <p>This method will be call all functions connected to the ‘scroll_event’ with a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a> instance.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.set_window_title\"><code>set_window_title(title)</code></dt> <dd>\n<p>Set the title text of the window containing the figure. Note that this has no effect if there is no window (e.g., a PS backend).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.start_event_loop\"><code>start_event_loop(timeout)</code></dt> <dd>\n<p>Start an event loop. This is used to start a blocking event loop so that interactive functions, such as ginput and waitforbuttonpress, can wait for events. This should not be confused with the main GUI event loop, which is always running and has nothing to do with this.</p> <p>This is implemented only for backends with GUIs.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.start_event_loop_default\"><code>start_event_loop_default(timeout=0)</code></dt> <dd>\n<p>Start an event loop. This is used to start a blocking event loop so that interactive functions, such as ginput and waitforbuttonpress, can wait for events. This should not be confused with the main GUI event loop, which is always running and has nothing to do with this.</p> <p>This function provides default event loop functionality based on time.sleep that is meant to be used until event loop functions for each of the GUI backends can be written. As such, it throws a deprecated warning.</p> <p>Call signature:</p> <pre data-language=\"python\">start_event_loop_default(self,timeout=0)\n</pre> <p>This call blocks until a callback function triggers stop_event_loop() or <em>timeout</em> is reached. If <em>timeout</em> is &lt;=0, never timeout.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.stop_event_loop\"><code>stop_event_loop()</code></dt> <dd>\n<p>Stop an event loop. This is used to stop a blocking event loop so that interactive functions, such as ginput and waitforbuttonpress, can wait for events.</p> <p>This is implemented only for backends with GUIs.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.stop_event_loop_default\"><code>stop_event_loop_default()</code></dt> <dd>\n<p>Stop an event loop. This is used to stop a blocking event loop so that interactive functions, such as ginput and waitforbuttonpress, can wait for events.</p> <p>Call signature:</p> <pre data-language=\"python\">stop_event_loop_default(self)\n</pre> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.supports_blit\"><code>supports_blit = True</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureCanvasBase.switch_backends\"><code>switch_backends(FigureCanvasClass)</code></dt> <dd>\n<p>Instantiate an instance of FigureCanvasClass</p> <p>This is used for backend switching, e.g., to instantiate a FigureCanvasPS from a FigureCanvasGTK. Note, deep copying is not done, so any changes to one of the instances (e.g., setting figure size or line props), will be reflected in the other</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase\"><code>class matplotlib.backend_bases.FigureManagerBase(canvas, num)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Helper class for pyplot mode, wraps everything up into a neat bundle</p> <p>Public attibutes:</p> <dl class=\"docutils\"> <dt><em>canvas</em></dt> <dd>A <a class=\"reference internal\" href=\"#matplotlib.backend_bases.FigureCanvasBase\" title=\"matplotlib.backend_bases.FigureCanvasBase\"><code>FigureCanvasBase</code></a> instance</dd> <dt><em>num</em></dt> <dd>The figure number</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase.destroy\"><code>destroy()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase.full_screen_toggle\"><code>full_screen_toggle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase.get_window_title\"><code>get_window_title()</code></dt> <dd>\n<p>Get the title text of the window containing the figure. Return None for non-GUI backends (e.g., a PS backend).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase.key_press\"><code>key_press(event)</code></dt> <dd>\n<p>Implement the default mpl key bindings defined at <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/navigation_toolbar.html#key-event-handling\"><span>Navigation Keyboard Shortcuts</span></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase.resize\"><code>resize(w, h)</code></dt> <dd>\n<p>“For gui backends, resize the window (in pixels).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase.set_window_title\"><code>set_window_title(title)</code></dt> <dd>\n<p>Set the title text of the window containing the figure. Note that this has no effect for non-GUI backends (e.g., a PS backend).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase.show\"><code>show()</code></dt> <dd>\n<p>For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception to be caught by <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.show\" title=\"matplotlib.figure.Figure.show\"><code>show()</code></a>, for an optional warning.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.FigureManagerBase.show_popup\"><code>show_popup(msg)</code></dt> <dd>\n<p>Display message in a popup – GUI only</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase\"><code>class matplotlib.backend_bases.GraphicsContextBase</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>An abstract base class that provides color, line styles, etc...</p> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.copy_properties\"><code>copy_properties(gc)</code></dt> <dd>\n<p>Copy properties from gc to self</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.dashd\"><code>dashd = {'solid': (None, None), 'dashdot': (0, (3.0, 5.0, 1.0, 5.0)), 'dotted': (0, (1.0, 3.0)), 'dashed': (0, (6.0, 6.0))}</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_antialiased\"><code>get_antialiased()</code></dt> <dd>\n<p>Return true if the object should try to do antialiased rendering</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_capstyle\"><code>get_capstyle()</code></dt> <dd>\n<p>Return the capstyle as a string in (‘butt’, ‘round’, ‘projecting’)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return the clip path in the form (path, transform), where path is a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, and transform is an affine transform to apply to the path before clipping.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_clip_rectangle\"><code>get_clip_rectangle()</code></dt> <dd>\n<p>Return the clip rectangle as a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_dashes\"><code>get_dashes()</code></dt> <dd>\n<p>Return the dash information as an offset dashlist tuple.</p> <p>The dash list is a even size list that gives the ink on, ink off in pixels.</p> <p>See p107 of to PostScript <a class=\"reference external\" href=\"http://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF\">BLUEBOOK</a> for more info.</p> <p>Default value is None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_forced_alpha\"><code>get_forced_alpha()</code></dt> <dd>\n<p>Return whether the value given by get_alpha() should be used to override any other alpha-channel values.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Return the object identifier if one is set, None otherwise.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Gets the current hatch style</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_hatch_path\"><code>get_hatch_path(density=6.0)</code></dt> <dd>\n<p>Returns a Path for the current hatch.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_joinstyle\"><code>get_joinstyle()</code></dt> <dd>\n<p>Return the line join style as one of (‘miter’, ‘round’, ‘bevel’)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_linestyle\"><code>get_linestyle(style)</code></dt> <dd>\n<p>Return the linestyle: one of (‘solid’, ‘dashed’, ‘dashdot’, ‘dotted’).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_linewidth\"><code>get_linewidth()</code></dt> <dd>\n<p>Return the line width in points as a scalar</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_rgb\"><code>get_rgb()</code></dt> <dd>\n<p>returns a tuple of three or four floats from 0-1.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.get_url\"><code>get_url()</code></dt> <dd>\n<p>returns a url if one is set, None otherwise</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.restore\"><code>restore()</code></dt> <dd>\n<p>Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha value used for blending - not supported on all backends. If <code>alpha=None</code> (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, <code>alpha</code> will override them.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_antialiased\"><code>set_antialiased(b)</code></dt> <dd>\n<p>True if object should be drawn with antialiased rendering</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_capstyle\"><code>set_capstyle(cs)</code></dt> <dd>\n<p>Set the capstyle as a string in (‘butt’, ‘round’, ‘projecting’)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_clip_path\"><code>set_clip_path(path)</code></dt> <dd>\n<p>Set the clip path and transformation. Path should be a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.TransformedPath\" title=\"matplotlib.transforms.TransformedPath\"><code>TransformedPath</code></a> instance.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_clip_rectangle\"><code>set_clip_rectangle(rectangle)</code></dt> <dd>\n<p>Set the clip rectangle with sequence (left, bottom, width, height)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_dashes\"><code>set_dashes(dash_offset, dash_list)</code></dt> <dd>\n<p>Set the dash style for the gc.</p> <dl class=\"docutils\"> <dt><em>dash_offset</em></dt> <dd>is the offset (usually 0).</dd> <dt><em>dash_list</em></dt> <dd>specifies the on-off sequence as points. <code>(None, None)</code> specifies a solid line</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_foreground\"><code>set_foreground(fg, isRGBA=False)</code></dt> <dd>\n<p>Set the foreground color. fg can be a MATLAB format string, a html hex color string, an rgb or rgba unit tuple, or a float between 0 and 1. In the latter case, grayscale is used.</p> <p>If you know fg is rgba, set <code>isRGBA=True</code> for efficiency.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_gid\"><code>set_gid(id)</code></dt> <dd>\n<p>Sets the id.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_graylevel\"><code>set_graylevel(frac)</code></dt> <dd>\n<p>Set the foreground color to be a gray level with <em>frac</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Sets the hatch style for filling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_joinstyle\"><code>set_joinstyle(js)</code></dt> <dd>\n<p>Set the join style to be one of (‘miter’, ‘round’, ‘bevel’)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_linestyle\"><code>set_linestyle(style)</code></dt> <dd>\n<p>Set the linestyle to be one of (‘solid’, ‘dashed’, ‘dashdot’, ‘dotted’). One may specify customized dash styles by providing a tuple of (offset, dash pairs). For example, the predefiend linestyles have following values.:</p> <blockquote> <div>‘dashed’ : (0, (6.0, 6.0)), ‘dashdot’ : (0, (3.0, 5.0, 1.0, 5.0)), ‘dotted’ : (0, (1.0, 3.0)),</div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_linewidth\"><code>set_linewidth(w)</code></dt> <dd>\n<p>Set the linewidth in points</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.GraphicsContextBase.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for links in compatible backends</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.IdleEvent\"><code>class matplotlib.backend_bases.IdleEvent(name, canvas, guiEvent=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>matplotlib.backend_bases.Event</code></a></p> <p>An event triggered by the GUI backend when it is idle – useful for passive animation</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.KeyEvent\"><code>class matplotlib.backend_bases.KeyEvent(name, canvas, key, x=0, y=0, guiEvent=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_bases.LocationEvent\" title=\"matplotlib.backend_bases.LocationEvent\"><code>matplotlib.backend_bases.LocationEvent</code></a></p> <p>A key event (key press, key release).</p> <p>Attach additional attributes as defined in <a class=\"reference internal\" href=\"#matplotlib.backend_bases.FigureCanvasBase.mpl_connect\" title=\"matplotlib.backend_bases.FigureCanvasBase.mpl_connect\"><code>FigureCanvasBase.mpl_connect()</code></a>.</p> <p>In addition to the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>Event</code></a> and <a class=\"reference internal\" href=\"#matplotlib.backend_bases.LocationEvent\" title=\"matplotlib.backend_bases.LocationEvent\"><code>LocationEvent</code></a> attributes, the following attributes are defined:</p> <dl class=\"docutils\"> <dt><em>key</em></dt> <dd>the key(s) pressed. Could be <strong>None</strong>, a single case sensitive ascii character (“g”, “G”, “#”, etc.), a special key (“control”, “shift”, “f1”, “up”, etc.) or a combination of the above (e.g., “ctrl+alt+g”, “ctrl+alt+G”).</dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Modifier keys will be prefixed to the pressed key and will be in the order “ctrl”, “alt”, “super”. The exception to this rule is when the pressed key is itself a modifier key, therefore “ctrl+alt” and “alt+control” can both be valid key values.</p> </div> <p>Example usage:</p> <pre data-language=\"python\">def on_key(event):\n    print('you pressed', event.key, event.xdata, event.ydata)\n\ncid = fig.canvas.mpl_connect('key_press_event', on_key)\n</pre> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.LocationEvent\"><code>class matplotlib.backend_bases.LocationEvent(name, canvas, x, y, guiEvent=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>matplotlib.backend_bases.Event</code></a></p> <p>An event that has a screen location</p> <p>The following additional attributes are defined and shown with their default values.</p> <p>In addition to the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>Event</code></a> attributes, the following event attributes are defined:</p> <dl class=\"docutils\"> <dt><em>x</em></dt> <dd>x position - pixels from left of canvas</dd> <dt><em>y</em></dt> <dd>y position - pixels from bottom of canvas</dd> <dt><em>inaxes</em></dt> <dd>the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance if mouse is over axes</dd> <dt><em>xdata</em></dt> <dd>x coord of mouse in data coords</dd> <dt><em>ydata</em></dt> <dd>y coord of mouse in data coords</dd> </dl> <p><em>x</em>, <em>y</em> in figure coords, 0,0 = bottom, left</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.LocationEvent.inaxes\"><code>inaxes = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.LocationEvent.lastevent\"><code>lastevent = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.LocationEvent.x\"><code>x = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.LocationEvent.xdata\"><code>xdata = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.LocationEvent.y\"><code>y = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.LocationEvent.ydata\"><code>ydata = None</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.MouseEvent\"><code>class matplotlib.backend_bases.MouseEvent(name, canvas, x, y, button=None, key=None, step=0, dblclick=False, guiEvent=None)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_bases.LocationEvent\" title=\"matplotlib.backend_bases.LocationEvent\"><code>matplotlib.backend_bases.LocationEvent</code></a></p> <dl class=\"docutils\"> <dt>A mouse event (‘button_press_event’,</dt> <dd>‘button_release_event’, ‘scroll_event’, ‘motion_notify_event’).</dd> </dl> <p>In addition to the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>Event</code></a> and <a class=\"reference internal\" href=\"#matplotlib.backend_bases.LocationEvent\" title=\"matplotlib.backend_bases.LocationEvent\"><code>LocationEvent</code></a> attributes, the following attributes are defined:</p> <dl class=\"docutils\"> <dt><em>button</em></dt> <dd>button pressed None, 1, 2, 3, ‘up’, ‘down’ (up and down are used for scroll events). Note that in the nbagg backend, both the middle and right clicks return 3 since right clicking will bring up the context menu in some browsers.</dd> <dt><em>key</em></dt> <dd>the key depressed when the mouse event triggered (see <a class=\"reference internal\" href=\"#matplotlib.backend_bases.KeyEvent\" title=\"matplotlib.backend_bases.KeyEvent\"><code>KeyEvent</code></a>)</dd> <dt><em>step</em></dt> <dd>number of scroll steps (positive for ‘up’, negative for ‘down’)</dd> </dl> <p>Example usage:</p> <pre data-language=\"python\">def on_press(event):\n    print('you pressed', event.button, event.xdata, event.ydata)\n\ncid = fig.canvas.mpl_connect('button_press_event', on_press)\n</pre> <p>x, y in figure coords, 0,0 = bottom, left button pressed None, 1, 2, 3, ‘up’, ‘down’</p> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.MouseEvent.button\"><code>button = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.MouseEvent.dblclick\"><code>dblclick = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.MouseEvent.inaxes\"><code>inaxes = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.MouseEvent.step\"><code>step = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.MouseEvent.x\"><code>x = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.MouseEvent.xdata\"><code>xdata = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.MouseEvent.y\"><code>y = None</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.MouseEvent.ydata\"><code>ydata = None</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2\"><code>class matplotlib.backend_bases.NavigationToolbar2(canvas)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Base class for the navigation cursor, version 2</p> <p>backends must implement a canvas that handles connections for ‘button_press_event’ and ‘button_release_event’. See <a class=\"reference internal\" href=\"#matplotlib.backend_bases.FigureCanvasBase.mpl_connect\" title=\"matplotlib.backend_bases.FigureCanvasBase.mpl_connect\"><code>FigureCanvasBase.mpl_connect()</code></a> for more information</p> <p>They must also define</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2.save_figure\" title=\"matplotlib.backend_bases.NavigationToolbar2.save_figure\"><code>save_figure()</code></a></dt> <dd>save the current figure</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2.set_cursor\" title=\"matplotlib.backend_bases.NavigationToolbar2.set_cursor\"><code>set_cursor()</code></a></dt> <dd>if you want the pointer icon to change</dd> <dt><code>_init_toolbar()</code></dt> <dd>create your toolbar widget</dd> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2.draw_rubberband\" title=\"matplotlib.backend_bases.NavigationToolbar2.draw_rubberband\"><code>draw_rubberband()</code></a> (optional)</dt> <dd>draw the zoom to rect “rubberband” rectangle</dd> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2.press\" title=\"matplotlib.backend_bases.NavigationToolbar2.press\"><code>press()</code></a> (optional)</dt> <dd>whenever a mouse button is pressed, you’ll be notified with the event</dd> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2.release\" title=\"matplotlib.backend_bases.NavigationToolbar2.release\"><code>release()</code></a> (optional)</dt> <dd>whenever a mouse button is released, you’ll be notified with the event</dd> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2.dynamic_update\" title=\"matplotlib.backend_bases.NavigationToolbar2.dynamic_update\"><code>dynamic_update()</code></a> (optional)</dt> <dd>dynamically update the window while navigating</dd> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2.set_message\" title=\"matplotlib.backend_bases.NavigationToolbar2.set_message\"><code>set_message()</code></a> (optional)</dt> <dd>display message</dd> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2.set_history_buttons\" title=\"matplotlib.backend_bases.NavigationToolbar2.set_history_buttons\"><code>set_history_buttons()</code></a> (optional)</dt> <dd>you can change the history back / forward buttons to indicate disabled / enabled state.</dd> </dl> </div>\n</blockquote> <p>That’s it, we’ll do the rest!</p> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.back\"><code>back(*args)</code></dt> <dd>\n<p>move back up the view lim stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.drag_pan\"><code>drag_pan(event)</code></dt> <dd>\n<p>the drag callback in pan/zoom mode</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.drag_zoom\"><code>drag_zoom(event)</code></dt> <dd>\n<p>the drag callback in zoom mode</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.draw\"><code>draw()</code></dt> <dd>\n<p>Redraw the canvases, update the locators</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.draw_rubberband\"><code>draw_rubberband(event, x0, y0, x1, y1)</code></dt> <dd>\n<p>Draw a rectangle rubberband to indicate zoom limits</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.dynamic_update\"><code>dynamic_update()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.forward\"><code>forward(*args)</code></dt> <dd>\n<p>Move forward in the view lim stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.home\"><code>home(*args)</code></dt> <dd>\n<p>Restore the original view</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.mouse_move\"><code>mouse_move(event)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.pan\"><code>pan(*args)</code></dt> <dd>\n<p>Activate the pan/zoom tool. pan with left button, zoom with right</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.press\"><code>press(event)</code></dt> <dd>\n<p>Called whenver a mouse button is pressed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.press_pan\"><code>press_pan(event)</code></dt> <dd>\n<p>the press mouse button in pan/zoom mode callback</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.press_zoom\"><code>press_zoom(event)</code></dt> <dd>\n<p>the press mouse button in zoom to rect mode callback</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.push_current\"><code>push_current()</code></dt> <dd>\n<p>push the current view limits and position onto the stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.release\"><code>release(event)</code></dt> <dd>\n<p>this will be called whenever mouse button is released</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.release_pan\"><code>release_pan(event)</code></dt> <dd>\n<p>the release mouse button callback in pan/zoom mode</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.release_zoom\"><code>release_zoom(event)</code></dt> <dd>\n<p>the release mouse button callback in zoom to rect mode</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.remove_rubberband\"><code>remove_rubberband()</code></dt> <dd>\n<p>Remove the rubberband</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.save_figure\"><code>save_figure(*args)</code></dt> <dd>\n<p>Save the current figure</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.set_cursor\"><code>set_cursor(cursor)</code></dt> <dd>\n<p>Set the current cursor to one of the <code>Cursors</code> enums values</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.set_history_buttons\"><code>set_history_buttons()</code></dt> <dd>\n<p>Enable or disable back/forward button</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.set_message\"><code>set_message(s)</code></dt> <dd>\n<p>Display a message on toolbar or in status bar</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.toolitems\"><code>toolitems = (('Home', 'Reset original view', 'home', 'home'), ('Back', 'Back to previous view', 'back', 'back'), ('Forward', 'Forward to next view', 'forward', 'forward'), (None, None, None, None), ('Pan', 'Pan axes with left mouse, zoom with right', 'move', 'pan'), ('Zoom', 'Zoom to rectangle', 'zoom_to_rect', 'zoom'), (None, None, None, None), ('Subplots', 'Configure subplots', 'subplots', 'configure_subplots'), ('Save', 'Save the figure', 'filesave', 'save_figure'))</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.update\"><code>update()</code></dt> <dd>\n<p>Reset the axes stack</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.NavigationToolbar2.zoom\"><code>zoom(*args)</code></dt> <dd>\n<p>Activate zoom to rect mode</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"exception\"> <dt id=\"matplotlib.backend_bases.NonGuiException\"><code>exception matplotlib.backend_bases.NonGuiException</code></dt> <dd>\n<p>Bases: <code>Exception</code></p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.PickEvent\"><code>class matplotlib.backend_bases.PickEvent(name, canvas, mouseevent, artist, guiEvent=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>matplotlib.backend_bases.Event</code></a></p> <p>a pick event, fired when the user picks a location on the canvas sufficiently close to an artist.</p> <p>Attrs: all the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>Event</code></a> attributes plus</p> <dl class=\"docutils\"> <dt><em>mouseevent</em></dt> <dd>the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a> that generated the pick</dd> <dt><em>artist</em></dt> <dd>the <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> picked</dd> <dt>other</dt> <dd>extra class dependent attrs – e.g., a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> pick may define different extra attributes than a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PatchCollection\" title=\"matplotlib.collections.PatchCollection\"><code>PatchCollection</code></a> pick event</dd> </dl> <p>Example usage:</p> <pre data-language=\"python\">line, = ax.plot(rand(100), 'o', picker=5)  # 5 points tolerance\n\ndef on_pick(event):\n    thisline = event.artist\n    xdata, ydata = thisline.get_data()\n    ind = event.ind\n    print('on pick line:', zip(xdata[ind], ydata[ind]))\n\ncid = fig.canvas.mpl_connect('pick_event', on_pick)\n</pre> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.RendererBase\"><code>class matplotlib.backend_bases.RendererBase</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>An abstract base class to handle drawing/rendering operations.</p> <p>The following methods must be implemented in the backend for full functionality (though just implementing <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_path\" title=\"matplotlib.backend_bases.RendererBase.draw_path\"><code>draw_path()</code></a> alone would give a highly capable backend):</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_path\" title=\"matplotlib.backend_bases.RendererBase.draw_path\"><code>draw_path()</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_image\" title=\"matplotlib.backend_bases.RendererBase.draw_image\"><code>draw_image()</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_gouraud_triangle\" title=\"matplotlib.backend_bases.RendererBase.draw_gouraud_triangle\"><code>draw_gouraud_triangle()</code></a></li> </ul> <p>The following methods <em>should</em> be implemented in the backend for optimization reasons:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_text\" title=\"matplotlib.backend_bases.RendererBase.draw_text\"><code>draw_text()</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_markers\" title=\"matplotlib.backend_bases.RendererBase.draw_markers\"><code>draw_markers()</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_path_collection\" title=\"matplotlib.backend_bases.RendererBase.draw_path_collection\"><code>draw_path_collection()</code></a></li> <li><a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_quad_mesh\" title=\"matplotlib.backend_bases.RendererBase.draw_quad_mesh\"><code>draw_quad_mesh()</code></a></li> </ul> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.close_group\"><code>close_group(s)</code></dt> <dd>\n<p>Close a grouping element with label <em>s</em> Is only currently used by <code>backend_svg</code></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_gouraud_triangle\"><code>draw_gouraud_triangle(gc, points, colors, transform)</code></dt> <dd>\n<p>Draw a Gouraud-shaded triangle.</p> <p><em>points</em> is a 3x2 array of (x, y) points for the triangle.</p> <p><em>colors</em> is a 3x4 array of RGBA colors for each point of the triangle.</p> <p><em>transform</em> is an affine transform to apply to the points.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_gouraud_triangles\"><code>draw_gouraud_triangles(gc, triangles_array, colors_array, transform)</code></dt> <dd>\n<p>Draws a series of Gouraud triangles.</p> <p><em>points</em> is a Nx3x2 array of (x, y) points for the trianglex.</p> <p><em>colors</em> is a Nx3x4 array of RGBA colors for each point of the triangles.</p> <p><em>transform</em> is an affine transform to apply to the points.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_image\"><code>draw_image(gc, x, y, im)</code></dt> <dd>\n<p>Draw the image instance into the current axes;</p> <dl class=\"docutils\"> <dt><em>gc</em></dt> <dd>a GraphicsContext containing clipping information</dd> <dt><em>x</em></dt> <dd>is the distance in pixels from the left hand side of the canvas.</dd> <dt><em>y</em></dt> <dd>the distance from the origin. That is, if origin is upper, y is the distance from top. If origin is lower, y is the distance from bottom</dd> <dt><em>im</em></dt> <dd>the <code>matplotlib._image.Image</code> instance</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_markers\"><code>draw_markers(gc, marker_path, marker_trans, path, trans, rgbFace=None)</code></dt> <dd>\n<p>Draws a marker at each of the vertices in path. This includes all vertices, including control points on curves. To avoid that behavior, those vertices should be removed before calling this function.</p> <dl class=\"docutils\"> <dt><em>gc</em></dt> <dd>the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.GraphicsContextBase\" title=\"matplotlib.backend_bases.GraphicsContextBase\"><code>GraphicsContextBase</code></a> instance</dd> <dt><em>marker_trans</em></dt> <dd>is an affine transform applied to the marker.</dd> <dt><em>trans</em></dt> <dd>is an affine transform applied to the path.</dd> </dl> <p>This provides a fallback implementation of draw_markers that makes multiple calls to <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_path\" title=\"matplotlib.backend_bases.RendererBase.draw_path\"><code>draw_path()</code></a>. Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_path\"><code>draw_path(gc, path, transform, rgbFace=None)</code></dt> <dd>\n<p>Draws a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance using the given affine transform.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_path_collection\"><code>draw_path_collection(gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)</code></dt> <dd>\n<p>Draws a collection of paths selecting drawing properties from the lists <em>facecolors</em>, <em>edgecolors</em>, <em>linewidths</em>, <em>linestyles</em> and <em>antialiaseds</em>. <em>offsets</em> is a list of offsets to apply to each of the paths. The offsets in <em>offsets</em> are first transformed by <em>offsetTrans</em> before being applied. <em>offset_position</em> may be either “screen” or “data” depending on the space that the offsets are in.</p> <p>This provides a fallback implementation of <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_path_collection\" title=\"matplotlib.backend_bases.RendererBase.draw_path_collection\"><code>draw_path_collection()</code></a> that makes multiple calls to <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_path\" title=\"matplotlib.backend_bases.RendererBase.draw_path\"><code>draw_path()</code></a>. Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods <code>_iter_collection_raw_paths()</code> and <code>_iter_collection()</code> are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_path_collection\" title=\"matplotlib.backend_bases.RendererBase.draw_path_collection\"><code>draw_path_collection()</code></a> can be made globally.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_quad_mesh\"><code>draw_quad_mesh(gc, master_transform, meshWidth, meshHeight, coordinates, offsets, offsetTrans, facecolors, antialiased, edgecolors)</code></dt> <dd>\n<p>This provides a fallback implementation of <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_quad_mesh\" title=\"matplotlib.backend_bases.RendererBase.draw_quad_mesh\"><code>draw_quad_mesh()</code></a> that generates paths and then calls <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_path_collection\" title=\"matplotlib.backend_bases.RendererBase.draw_path_collection\"><code>draw_path_collection()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_tex\"><code>draw_tex(gc, x, y, s, prop, angle, ismath='TeX!', mtext=None)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.draw_text\"><code>draw_text(gc, x, y, s, prop, angle, ismath=False, mtext=None)</code></dt> <dd>\n<p>Draw the text instance</p> <dl class=\"docutils\"> <dt><em>gc</em></dt> <dd>the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.GraphicsContextBase\" title=\"matplotlib.backend_bases.GraphicsContextBase\"><code>GraphicsContextBase</code></a> instance</dd> <dt><em>x</em></dt> <dd>the x location of the text in display coords</dd> <dt><em>y</em></dt> <dd>the y location of the text baseline in display coords</dd> <dt><em>s</em></dt> <dd>the text string</dd> <dt><em>prop</em></dt> <dd>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</dd> <dt><em>angle</em></dt> <dd>the rotation angle in degrees</dd> <dt><em>mtext</em></dt> <dd>a <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instance</dd> </dl> <p><strong>backend implementers note</strong></p> <p>When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py:</p> <pre data-language=\"python\">if 0: bbox_artist(self, renderer)\n</pre> <p>to if 1, and then the actual bounding box will be plotted along with your text.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.flipy\"><code>flipy()</code></dt> <dd>\n<p>Return true if y small numbers are top for renderer Is used for drawing text (<a class=\"reference internal\" href=\"text_api#module-matplotlib.text\" title=\"matplotlib.text\"><code>matplotlib.text</code></a>) and images (<a class=\"reference internal\" href=\"image_api#module-matplotlib.image\" title=\"matplotlib.image\"><code>matplotlib.image</code></a>) only</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.get_canvas_width_height\"><code>get_canvas_width_height()</code></dt> <dd>\n<p>return the canvas width and height in display coords</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.get_image_magnification\"><code>get_image_magnification()</code></dt> <dd>\n<p>Get the factor by which to magnify images passed to <a class=\"reference internal\" href=\"#matplotlib.backend_bases.RendererBase.draw_image\" title=\"matplotlib.backend_bases.RendererBase.draw_image\"><code>draw_image()</code></a>. Allows a backend to have images at a different resolution to other artists.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.get_texmanager\"><code>get_texmanager()</code></dt> <dd>\n<p>return the <code>matplotlib.texmanager.TexManager</code> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.get_text_width_height_descent\"><code>get_text_width_height_descent(s, prop, ismath)</code></dt> <dd>\n<p>get the width and height, and the offset from the bottom to the baseline (descent), in display coords of the string s with <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>FontProperties</code></a> prop</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.new_gc\"><code>new_gc()</code></dt> <dd>\n<p>Return an instance of a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.GraphicsContextBase\" title=\"matplotlib.backend_bases.GraphicsContextBase\"><code>GraphicsContextBase</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.open_group\"><code>open_group(s, gid=None)</code></dt> <dd>\n<p>Open a grouping element with label <em>s</em>. If <em>gid</em> is given, use <em>gid</em> as the id of the group. Is only currently used by <code>backend_svg</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.option_image_nocomposite\"><code>option_image_nocomposite()</code></dt> <dd>\n<p>override this method for renderers that do not necessarily always want to rescale and composite raster images. (like SVG, PDF, or PS)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.option_scale_image\"><code>option_scale_image()</code></dt> <dd>\n<p>override this method for renderers that support arbitrary scaling of image (most of the vector backend).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.points_to_pixels\"><code>points_to_pixels(points)</code></dt> <dd>\n<p>Convert points to display units</p> <dl class=\"docutils\"> <dt><em>points</em></dt> <dd>a float or a numpy array of float</dd> </dl> <p>return points converted to pixels</p> <p>You need to override this function (unless your backend doesn’t have a dpi, e.g., postscript or svg). Some imaging systems assume some value for pixels per inch:</p> <pre data-language=\"python\">points to pixels = points * pixels_per_inch/72.0 * dpi/72.0\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.start_filter\"><code>start_filter()</code></dt> <dd>\n<p>Used in AggRenderer. Switch to a temporary renderer for image filtering effects.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.start_rasterizing\"><code>start_rasterizing()</code></dt> <dd>\n<p>Used in MixedModeRenderer. Switch to the raster renderer.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.stop_filter\"><code>stop_filter(filter_func)</code></dt> <dd>\n<p>Used in AggRenderer. Switch back to the original renderer. The contents of the temporary renderer is processed with the <em>filter_func</em> and is drawn on the original renderer as an image.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.stop_rasterizing\"><code>stop_rasterizing()</code></dt> <dd>\n<p>Used in MixedModeRenderer. Switch back to the vector renderer and draw the contents of the raster renderer as an image on the vector renderer.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.RendererBase.strip_math\"><code>strip_math(s)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.ResizeEvent\"><code>class matplotlib.backend_bases.ResizeEvent(name, canvas)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>matplotlib.backend_bases.Event</code></a></p> <p>An event triggered by a canvas resize</p> <p>In addition to the <a class=\"reference internal\" href=\"#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>Event</code></a> attributes, the following event attributes are defined:</p> <dl class=\"docutils\"> <dt><em>width</em></dt> <dd>width of the canvas in pixels</dd> <dt><em>height</em></dt> <dd>height of the canvas in pixels</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.ShowBase\"><code>class matplotlib.backend_bases.ShowBase</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Simple base class to generate a show() callable in backends.</p> <p>Subclass must override mainloop() method.</p> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.ShowBase.mainloop\"><code>mainloop()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.StatusbarBase\"><code>class matplotlib.backend_bases.StatusbarBase(toolmanager)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Base class for the statusbar</p> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.StatusbarBase.set_message\"><code>set_message(s)</code></dt> <dd>\n<p>Display a message on toolbar or in status bar</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>s</strong> : str</p> <blockquote class=\"last\"> <div>\n<p>Message text</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.TimerBase\"><code>class matplotlib.backend_bases.TimerBase(interval=None, callbacks=None)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>A base class for providing timer events, useful for things animations. Backends need to implement a few specific methods in order to use their own timing mechanisms so that the timer events are integrated into their event loops.</p> <p>Mandatory functions that must be implemented:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>_timer_start</code>: Contains backend-specific code for starting the timer</li> <li>\n<code>_timer_stop</code>: Contains backend-specific code for stopping the timer</li> </ul> </div>\n</blockquote> <p>Optional overrides:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>_timer_set_single_shot</code>: Code for setting the timer to single shot operating mode, if supported by the timer object. If not, the <code>Timer</code> class itself will store the flag and the <code>_on_timer</code> method should be overridden to support such behavior.</li> <li>\n<code>_timer_set_interval</code>: Code for setting the interval on the timer, if there is a method for doing so on the timer object.</li> <li>\n<code>_on_timer</code>: This is the internal function that any timer object should call, which will handle the task of running all callbacks that have been set.</li> </ul> </div>\n</blockquote> <p>Attributes:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#matplotlib.backend_bases.TimerBase.interval\" title=\"matplotlib.backend_bases.TimerBase.interval\"><code>interval</code></a>: The time between timer events in milliseconds. Default is 1000 ms.</li> <li>\n<a class=\"reference internal\" href=\"#matplotlib.backend_bases.TimerBase.single_shot\" title=\"matplotlib.backend_bases.TimerBase.single_shot\"><code>single_shot</code></a>: Boolean flag indicating whether this timer should operate as single shot (run once and then stop). Defaults to <code>False</code>.</li> <li>\n<code>callbacks</code>: Stores list of (func, args) tuples that will be called upon timer events. This list can be manipulated directly, or the functions <a class=\"reference internal\" href=\"#matplotlib.backend_bases.TimerBase.add_callback\" title=\"matplotlib.backend_bases.TimerBase.add_callback\"><code>add_callback</code></a> and <a class=\"reference internal\" href=\"#matplotlib.backend_bases.TimerBase.remove_callback\" title=\"matplotlib.backend_bases.TimerBase.remove_callback\"><code>remove_callback</code></a> can be used.</li> </ul> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.TimerBase.add_callback\"><code>add_callback(func, *args, **kwargs)</code></dt> <dd>\n<p>Register <code>func</code> to be called by timer when the event fires. Any additional arguments provided will be passed to <code>func</code>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.TimerBase.interval\"><code>interval</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.TimerBase.remove_callback\"><code>remove_callback(func, *args, **kwargs)</code></dt> <dd>\n<p>Remove <code>func</code> from list of callbacks. <code>args</code> and <code>kwargs</code> are optional and used to distinguish between copies of the same function registered to be called with different arguments.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.backend_bases.TimerBase.single_shot\"><code>single_shot</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.TimerBase.start\"><code>start(interval=None)</code></dt> <dd>\n<p>Start the timer object. <a class=\"reference internal\" href=\"#matplotlib.backend_bases.TimerBase.interval\" title=\"matplotlib.backend_bases.TimerBase.interval\"><code>interval</code></a> is optional and will be used to reset the timer interval first if provided.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.TimerBase.stop\"><code>stop()</code></dt> <dd>\n<p>Stop the timer.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.backend_bases.ToolContainerBase\"><code>class matplotlib.backend_bases.ToolContainerBase(toolmanager)</code></dt> <dd>\n<p>Bases: <code>object</code></p> <p>Base class for all tool containers, e.g. toolbars.</p> <h4 class=\"rubric\">Attributes</h4> <table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"90%\"> </colgroup> <tbody valign=\"top\"> <tr class=\"row-odd\">\n<td>toolmanager</td> <td>(<code>ToolManager</code> object that holds the tools that) this <code>ToolContainer</code> wants to communicate with.</td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.ToolContainerBase.add_tool\"><code>add_tool(tool, group, position=-1)</code></dt> <dd>\n<p>Adds a tool to this container</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>tool</strong> : tool_like</p> <blockquote> <div>\n<p>The tool to add, see <code>ToolManager.get_tool</code>.</p> </div>\n</blockquote> <p><strong>group</strong> : str</p> <blockquote> <div>\n<p>The name of the group to add this tool to.</p> </div>\n</blockquote> <p><strong>position</strong> : int (optional)</p> <blockquote class=\"last\"> <div>\n<p>The position within the group to place this tool. Defaults to end.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.ToolContainerBase.add_toolitem\"><code>add_toolitem(name, group, position, image, description, toggle)</code></dt> <dd>\n<p>Add a toolitem to the container</p> <p>This method must get implemented per backend</p> <p>The callback associated with the button click event, must be <strong>EXACTLY</strong> <code>self.trigger_tool(name)</code></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : string</p> <blockquote> <div>\n<p>Name of the tool to add, this gets used as the tool’s ID and as the default label of the buttons</p> </div>\n</blockquote> <p><strong>group</strong> : String</p> <blockquote> <div>\n<p>Name of the group that this tool belongs to</p> </div>\n</blockquote> <p><strong>position</strong> : Int</p> <blockquote> <div>\n<p>Position of the tool within its group, if -1 it goes at the End</p> </div>\n</blockquote> <p><strong>image_file</strong> : String</p> <blockquote> <div>\n<p>Filename of the image for the button or <code>None</code></p> </div>\n</blockquote> <p><strong>description</strong> : String</p> <blockquote> <div>\n<p>Description of the tool, used for the tooltips</p> </div>\n</blockquote> <p><strong>toggle</strong> : Bool</p> <blockquote class=\"last\"> <div>\n<ul class=\"simple\"> <li>\n<code>True</code> : The button is a toggle (change the pressed/unpressed state between consecutive clicks)</li> <li>\n<code>False</code> : The button is a normal button (returns to unpressed state after release)</li> </ul> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.ToolContainerBase.remove_toolitem\"><code>remove_toolitem(name)</code></dt> <dd>\n<p>Remove a toolitem from the <code>ToolContainer</code></p> <p>This method must get implemented per backend</p> <p>Called when <code>ToolManager</code> emits a <code>tool_removed_event</code></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : string</p> <blockquote class=\"last\"> <div>\n<p>Name of the tool to remove</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.ToolContainerBase.toggle_toolitem\"><code>toggle_toolitem(name, toggled)</code></dt> <dd>\n<p>Toggle the toolitem without firing event</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : String</p> <blockquote> <div>\n<p>Id of the tool to toggle</p> </div>\n</blockquote> <p><strong>toggled</strong> : bool</p> <blockquote class=\"last\"> <div>\n<p>Whether to set this tool as toggled or not.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.backend_bases.ToolContainerBase.trigger_tool\"><code>trigger_tool(name)</code></dt> <dd>\n<p>Trigger the tool</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>name</strong> : String</p> <blockquote class=\"last\"> <div>\n<p>Name(id) of the tool triggered from within the container</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backend_bases.get_registered_canvas_class\"><code>matplotlib.backend_bases.get_registered_canvas_class(format)</code></dt> <dd>\n<p>Return the registered default canvas for given file format. Handles deferred import of required backend.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backend_bases.key_press_handler\"><code>matplotlib.backend_bases.key_press_handler(event, canvas, toolbar=None)</code></dt> <dd>\n<p>Implement the default mpl key bindings for the canvas and toolbar described at <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/navigation_toolbar.html#key-event-handling\"><span>Navigation Keyboard Shortcuts</span></a></p> <dl class=\"docutils\"> <dt><em>event</em></dt> <dd>a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.KeyEvent\" title=\"matplotlib.backend_bases.KeyEvent\"><code>KeyEvent</code></a> instance</dd> <dt><em>canvas</em></dt> <dd>a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.FigureCanvasBase\" title=\"matplotlib.backend_bases.FigureCanvasBase\"><code>FigureCanvasBase</code></a> instance</dd> <dt><em>toolbar</em></dt> <dd>a <a class=\"reference internal\" href=\"#matplotlib.backend_bases.NavigationToolbar2\" title=\"matplotlib.backend_bases.NavigationToolbar2\"><code>NavigationToolbar2</code></a> instance</dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.backend_bases.register_backend\"><code>matplotlib.backend_bases.register_backend(format, backend, description=None)</code></dt> <dd>\n<p>Register a backend for saving to a given file format.</p> <dl class=\"docutils\"> <dt>format <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span>\n</dt> <dd>File extention</dd> <dt>backend <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">module string or canvas class</span>\n</dt> <dd>Backend for handling file output</dd> <dt>description <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str, optional</span>\n</dt> <dd>Description of the file type. Defaults to an empty string</dd> </dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/backend_bases_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/backend_bases_api.html</a>\n  </p>\n</div>\n","patches_api":"<h1 id=\"patches\">patches</h1>  <h2 id=\"matplotlib-patches\">matplotlib.patches</h2> <dl class=\"class\" id=\"module-matplotlib.patches\"> <dt id=\"matplotlib.patches.Arc\"><code>class matplotlib.patches.Arc(xy, width, height, angle=0.0, theta1=0.0, theta2=360.0, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Ellipse\" title=\"matplotlib.patches.Ellipse\"><code>matplotlib.patches.Ellipse</code></a></p> <p>An elliptical arc. Because it performs various optimizations, it can not be filled.</p> <p>The arc must be used in an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance—it can not be added directly to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>—because it is optimized to only render the segments that are inside the axes bounding box with high resolution.</p> <p>The following args are supported:</p> <dl class=\"docutils\"> <dt><em>xy</em></dt> <dd>center of ellipse</dd> <dt><em>width</em></dt> <dd>length of horizontal axis</dd> <dt><em>height</em></dt> <dd>length of vertical axis</dd> <dt><em>angle</em></dt> <dd>rotation in degrees (anti-clockwise)</dd> <dt><em>theta1</em></dt> <dd>starting angle of the arc in degrees</dd> <dt><em>theta2</em></dt> <dd>ending angle of the arc in degrees</dd> </dl> <p>If <em>theta1</em> and <em>theta2</em> are not provided, the arc will form a complete ellipse.</p> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.Arc.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>Ellipses are normally drawn using an approximation that uses eight cubic bezier splines. The error of this approximation is 1.89818e-6, according to this unverified source:</p> <blockquote> <div>\n<p>Lancaster, Don. Approximating a Circle or an Ellipse Using Four Bezier Cubic Splines.</p> <p><a class=\"reference external\" href=\"http://www.tinaja.com/glib/ellipse4.pdf\">http://www.tinaja.com/glib/ellipse4.pdf</a></p> </div>\n</blockquote> <p>There is a use case where very large ellipses must be drawn with very high accuracy, and it is too expensive to render the entire ellipse with enough segments (either splines or line segments). Therefore, in the case where either radius of the ellipse is large enough that the error of the spline approximation will be visible (greater than one pixel offset from the ideal), a different technique is used.</p> <p>In that case, only the visible parts of the ellipse are drawn, with each visible arc using a fixed number of spline segments (8). The algorithm proceeds as follows:</p> <blockquote> <div>\n<ol class=\"arabic\"> <li>\n<p class=\"first\">The points where the ellipse intersects the axes bounding box are located. (This is done be performing an inverse transformation on the axes bbox such that it is relative to the unit circle – this makes the intersection calculation much easier than doing rotated ellipse intersection directly).</p> <p>This uses the “line intersecting a circle” algorithm from:</p> <blockquote> <div>\n<p>Vince, John. Geometry for Computer Graphics: Formulae, Examples &amp; Proofs. London: Springer-Verlag, 2005.</p> </div>\n</blockquote> </li> <li>The angles of each of the intersection points are calculated. </li> <li>Proceeding counterclockwise starting in the positive x-direction, each of the visible arc-segments between the pairs of vertices are drawn using the bezier arc approximation technique implemented in <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path.arc\" title=\"matplotlib.path.Path.arc\"><code>matplotlib.path.Path.arc()</code></a>. </li> </ol> </div>\n</blockquote> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.Arrow\"><code>class matplotlib.patches.Arrow(x, y, dx, dy, width=1.0, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>An arrow patch.</p> <p>Draws an arrow, starting at (<em>x</em>, <em>y</em>), direction and length given by (<em>dx</em>, <em>dy</em>) the width of the arrow is scaled by <em>width</em>.</p> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.Arrow.get_patch_transform\"><code>get_patch_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Arrow.get_path\"><code>get_path()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle\"><code>class matplotlib.patches.ArrowStyle</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Style</code></p> <p><a class=\"reference internal\" href=\"#matplotlib.patches.ArrowStyle\" title=\"matplotlib.patches.ArrowStyle\"><code>ArrowStyle</code></a> is a container class which defines several arrowstyle classes, which is used to create an arrow path along a given path. These are mainly used with <a class=\"reference internal\" href=\"#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a>.</p> <p>A arrowstyle object can be either created as:</p> <pre data-language=\"python\">ArrowStyle.Fancy(head_length=.4, head_width=.4, tail_width=.4)\n</pre> <p>or:</p> <pre data-language=\"python\">ArrowStyle(\"Fancy\", head_length=.4, head_width=.4, tail_width=.4)\n</pre> <p>or:</p> <pre data-language=\"python\">ArrowStyle(\"Fancy, head_length=.4, head_width=.4, tail_width=.4\")\n</pre> <p>The following classes are defined</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"11%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Class</th> <th class=\"head\">Name</th> <th class=\"head\">Attrs</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Curve</td> <td><code>-</code></td> <td>None</td> </tr> <tr class=\"row-odd\">\n<td>CurveB</td> <td><code>-&gt;</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>BracketB</td> <td><code>-[</code></td> <td>widthB=1.0,lengthB=0.2,angleB=None</td> </tr> <tr class=\"row-odd\">\n<td>CurveFilledB</td> <td><code>-|&gt;</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>CurveA</td> <td><code>&lt;-</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-odd\">\n<td>CurveAB</td> <td><code>&lt;-&gt;</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>CurveFilledA</td> <td><code>&lt;|-</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-odd\">\n<td>CurveFilledAB</td> <td><code>&lt;|-|&gt;</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>BracketA</td> <td><code>]-</code></td> <td>widthA=1.0,lengthA=0.2,angleA=None</td> </tr> <tr class=\"row-odd\">\n<td>BracketAB</td> <td><code>]-[</code></td> <td>widthA=1.0,lengthA=0.2,angleA=None,widthB=1.0,lengthB=0.2,angleB=None</td> </tr> <tr class=\"row-even\">\n<td>Fancy</td> <td><code>fancy</code></td> <td>head_length=0.4,head_width=0.4,tail_width=0.4</td> </tr> <tr class=\"row-odd\">\n<td>Simple</td> <td><code>simple</code></td> <td>head_length=0.5,head_width=0.5,tail_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>Wedge</td> <td><code>wedge</code></td> <td>tail_width=0.3,shrink_factor=0.5</td> </tr> <tr class=\"row-odd\">\n<td>BarAB</td> <td><code>|-|</code></td> <td>widthA=1.0,angleA=None,widthB=1.0,angleB=None</td> </tr> </tbody> </table> </div>\n</blockquote> <p>An instance of any arrow style class is a callable object, whose call signature is:</p> <pre data-language=\"python\">__call__(self, path, mutation_size, linewidth, aspect_ratio=1.)\n</pre> <p>and it returns a tuple of a <code>Path</code> instance and a boolean value. <em>path</em> is a <code>Path</code> instance along which the arrow will be drawn. <em>mutation_size</em> and <em>aspect_ratio</em> have the same meaning as in <a class=\"reference internal\" href=\"#matplotlib.patches.BoxStyle\" title=\"matplotlib.patches.BoxStyle\"><code>BoxStyle</code></a>. <em>linewidth</em> is a line width to be stroked. This is meant to be used to correct the location of the head so that it does not overshoot the destination point, but not all classes support it.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fancyarrow_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fancyarrow_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fancyarrow_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fancyarrow_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/fancyarrow_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/fancyarrow_demo.png\"> </div> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.BarAB\"><code>class BarAB(widthA=1.0, angleA=None, widthB=1.0, angleB=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Bracket</code></p> <p>An arrow with a bar(|) at both ends.</p> <dl class=\"docutils\"> <dt><em>widthA</em></dt> <dd>width of the bracket</dd> <dt><em>lengthA</em></dt> <dd>length of the bracket</dd> <dt><em>angleA</em></dt> <dd>angle between the bracket and the line</dd> <dt><em>widthB</em></dt> <dd>width of the bracket</dd> <dt><em>lengthB</em></dt> <dd>length of the bracket</dd> <dt><em>angleB</em></dt> <dd>angle between the bracket and the line</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.BracketA\"><code>class ArrowStyle.BracketA(widthA=1.0, lengthA=0.2, angleA=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Bracket</code></p> <p>An arrow with a bracket(]) at its end.</p> <dl class=\"docutils\"> <dt><em>widthA</em></dt> <dd>width of the bracket</dd> <dt><em>lengthA</em></dt> <dd>length of the bracket</dd> <dt><em>angleA</em></dt> <dd>angle between the bracket and the line</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.BracketAB\"><code>class ArrowStyle.BracketAB(widthA=1.0, lengthA=0.2, angleA=None, widthB=1.0, lengthB=0.2, angleB=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Bracket</code></p> <p>An arrow with a bracket(]) at both ends.</p> <dl class=\"docutils\"> <dt><em>widthA</em></dt> <dd>width of the bracket</dd> <dt><em>lengthA</em></dt> <dd>length of the bracket</dd> <dt><em>angleA</em></dt> <dd>angle between the bracket and the line</dd> <dt><em>widthB</em></dt> <dd>width of the bracket</dd> <dt><em>lengthB</em></dt> <dd>length of the bracket</dd> <dt><em>angleB</em></dt> <dd>angle between the bracket and the line</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.BracketB\"><code>class ArrowStyle.BracketB(widthB=1.0, lengthB=0.2, angleB=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Bracket</code></p> <p>An arrow with a bracket([) at its end.</p> <dl class=\"docutils\"> <dt><em>widthB</em></dt> <dd>width of the bracket</dd> <dt><em>lengthB</em></dt> <dd>length of the bracket</dd> <dt><em>angleB</em></dt> <dd>angle between the bracket and the line</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.Curve\"><code>class ArrowStyle.Curve</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Curve</code></p> <p>A simple curve without any arrow head.</p> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.CurveA\"><code>class ArrowStyle.CurveA(head_length=0.4, head_width=0.2)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Curve</code></p> <p>An arrow with a head at its begin point.</p> <dl class=\"docutils\"> <dt><em>head_length</em></dt> <dd>length of the arrow head</dd> <dt><em>head_width</em></dt> <dd>width of the arrow head</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.CurveAB\"><code>class ArrowStyle.CurveAB(head_length=0.4, head_width=0.2)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Curve</code></p> <p>An arrow with heads both at the begin and the end point.</p> <dl class=\"docutils\"> <dt><em>head_length</em></dt> <dd>length of the arrow head</dd> <dt><em>head_width</em></dt> <dd>width of the arrow head</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.CurveB\"><code>class ArrowStyle.CurveB(head_length=0.4, head_width=0.2)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Curve</code></p> <p>An arrow with a head at its end point.</p> <dl class=\"docutils\"> <dt><em>head_length</em></dt> <dd>length of the arrow head</dd> <dt><em>head_width</em></dt> <dd>width of the arrow head</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.CurveFilledA\"><code>class ArrowStyle.CurveFilledA(head_length=0.4, head_width=0.2)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Curve</code></p> <p>An arrow with filled triangle head at the begin.</p> <dl class=\"docutils\"> <dt><em>head_length</em></dt> <dd>length of the arrow head</dd> <dt><em>head_width</em></dt> <dd>width of the arrow head</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.CurveFilledAB\"><code>class ArrowStyle.CurveFilledAB(head_length=0.4, head_width=0.2)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Curve</code></p> <p>An arrow with filled triangle heads both at the begin and the end point.</p> <dl class=\"docutils\"> <dt><em>head_length</em></dt> <dd>length of the arrow head</dd> <dt><em>head_width</em></dt> <dd>width of the arrow head</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.CurveFilledB\"><code>class ArrowStyle.CurveFilledB(head_length=0.4, head_width=0.2)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Curve</code></p> <p>An arrow with filled triangle head at the end.</p> <dl class=\"docutils\"> <dt><em>head_length</em></dt> <dd>length of the arrow head</dd> <dt><em>head_width</em></dt> <dd>width of the arrow head</dd> </dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.Fancy\"><code>class ArrowStyle.Fancy(head_length=0.4, head_width=0.4, tail_width=0.4)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>A fancy arrow. Only works with a quadratic bezier curve.</p> <dl class=\"docutils\"> <dt><em>head_length</em></dt> <dd>length of the arrow head</dd> <dt><em>head_with</em></dt> <dd>width of the arrow head</dd> <dt><em>tail_width</em></dt> <dd>width of the arrow tail</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ArrowStyle.Fancy.transmute\"><code>transmute(path, mutation_size, linewidth)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.Simple\"><code>class ArrowStyle.Simple(head_length=0.5, head_width=0.5, tail_width=0.2)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>A simple arrow. Only works with a quadratic bezier curve.</p> <dl class=\"docutils\"> <dt><em>head_length</em></dt> <dd>length of the arrow head</dd> <dt><em>head_with</em></dt> <dd>width of the arrow head</dd> <dt><em>tail_width</em></dt> <dd>width of the arrow tail</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ArrowStyle.Simple.transmute\"><code>transmute(path, mutation_size, linewidth)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ArrowStyle.Wedge\"><code>class ArrowStyle.Wedge(tail_width=0.3, shrink_factor=0.5)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>Wedge(?) shape. Only works with a quadratic bezier curve. The begin point has a width of the tail_width and the end point has a width of 0. At the middle, the width is shrink_factor*tail_width.</p> <dl class=\"docutils\"> <dt><em>tail_width</em></dt> <dd>width of the tail</dd> <dt><em>shrink_factor</em></dt> <dd>fraction of the arrow width at the middle point</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ArrowStyle.Wedge.transmute\"><code>transmute(path, mutation_size, linewidth)</code></dt> \n</dl> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle\"><code>class matplotlib.patches.BoxStyle</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Style</code></p> <p><a class=\"reference internal\" href=\"#matplotlib.patches.BoxStyle\" title=\"matplotlib.patches.BoxStyle\"><code>BoxStyle</code></a> is a container class which defines several boxstyle classes, which are used for <code>FancyBoxPatch</code>.</p> <p>A style object can be created as:</p> <pre data-language=\"python\">BoxStyle.Round(pad=0.2)\n</pre> <p>or:</p> <pre data-language=\"python\">BoxStyle(\"Round\", pad=0.2)\n</pre> <p>or:</p> <pre data-language=\"python\">BoxStyle(\"Round, pad=0.2\")\n</pre> <p>Following boxstyle classes are defined.</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"28%\"> <col width=\"52%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Class</th> <th class=\"head\">Name</th> <th class=\"head\">Attrs</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Circle</td> <td><code>circle</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-odd\">\n<td>DArrow</td> <td><code>darrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-even\">\n<td>LArrow</td> <td><code>larrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-odd\">\n<td>RArrow</td> <td><code>rarrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-even\">\n<td>Round</td> <td><code>round</code></td> <td>pad=0.3,rounding_size=None</td> </tr> <tr class=\"row-odd\">\n<td>Round4</td> <td><code>round4</code></td> <td>pad=0.3,rounding_size=None</td> </tr> <tr class=\"row-even\">\n<td>Roundtooth</td> <td><code>roundtooth</code></td> <td>pad=0.3,tooth_size=None</td> </tr> <tr class=\"row-odd\">\n<td>Sawtooth</td> <td><code>sawtooth</code></td> <td>pad=0.3,tooth_size=None</td> </tr> <tr class=\"row-even\">\n<td>Square</td> <td><code>square</code></td> <td>pad=0.3</td> </tr> </tbody> </table> </div>\n</blockquote> <p>An instance of any boxstyle class is an callable object, whose call signature is:</p> <pre data-language=\"python\">__call__(self, x0, y0, width, height, mutation_size, aspect_ratio=1.)\n</pre> <p>and returns a <code>Path</code> instance. <em>x0</em>, <em>y0</em>, <em>width</em> and <em>height</em> specify the location and size of the box to be drawn. <em>mutation_scale</em> determines the overall size of the mutation (by which I mean the transformation of the rectangle to the fancy box). <em>mutation_aspect</em> determines the aspect-ratio of the mutation.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fancybox_demo2.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fancybox_demo2.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fancybox_demo2.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fancybox_demo2.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/fancybox_demo2.png\" src=\"http://matplotlib.org/1.5.1/_images/fancybox_demo2.png\"> </div> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.Circle\"><code>class Circle(pad=0.3)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>A simple circle box.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>pad</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The amount of padding around the original box.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.Circle.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.DArrow\"><code>class BoxStyle.DArrow(pad=0.3)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>(Double) Arrow Box</p> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.DArrow.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.LArrow\"><code>class BoxStyle.LArrow(pad=0.3)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>(left) Arrow Box</p> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.LArrow.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.RArrow\"><code>class BoxStyle.RArrow(pad=0.3)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches.LArrow</code></p> <p>(right) Arrow Box</p> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.RArrow.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.Round\"><code>class BoxStyle.Round(pad=0.3, rounding_size=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>A box with round corners.</p> <dl class=\"docutils\"> <dt><em>pad</em></dt> <dd>amount of padding</dd> <dt><em>rounding_size</em></dt> <dd>rounding radius of corners. <em>pad</em> if None</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.Round.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.Round4\"><code>class BoxStyle.Round4(pad=0.3, rounding_size=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>Another box with round edges.</p> <dl class=\"docutils\"> <dt><em>pad</em></dt> <dd>amount of padding</dd> <dt><em>rounding_size</em></dt> <dd>rounding size of edges. <em>pad</em> if None</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.Round4.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.Roundtooth\"><code>class BoxStyle.Roundtooth(pad=0.3, tooth_size=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches.Sawtooth</code></p> <p>A rounded tooth box.</p> <dl class=\"docutils\"> <dt><em>pad</em></dt> <dd>amount of padding</dd> <dt><em>tooth_size</em></dt> <dd>size of the sawtooth. pad* if None</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.Roundtooth.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.Sawtooth\"><code>class BoxStyle.Sawtooth(pad=0.3, tooth_size=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>A sawtooth box.</p> <dl class=\"docutils\"> <dt><em>pad</em></dt> <dd>amount of padding</dd> <dt><em>tooth_size</em></dt> <dd>size of the sawtooth. pad* if None</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.Sawtooth.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.BoxStyle.Square\"><code>class BoxStyle.Square(pad=0.3)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>A simple square box.</p> <dl class=\"docutils\"> <dt><em>pad</em></dt> <dd>amount of padding</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.BoxStyle.Square.transmute\"><code>transmute(x0, y0, width, height, mutation_size)</code></dt> \n</dl> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.Circle\"><code>class matplotlib.patches.Circle(xy, radius=5, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Ellipse\" title=\"matplotlib.patches.Ellipse\"><code>matplotlib.patches.Ellipse</code></a></p> <p>A circle patch.</p> <p>Create true circle at center <em>xy</em> = (<em>x</em>, <em>y</em>) with given <em>radius</em>. Unlike <a class=\"reference internal\" href=\"#matplotlib.patches.CirclePolygon\" title=\"matplotlib.patches.CirclePolygon\"><code>CirclePolygon</code></a> which is a polygonal approximation, this uses Bézier splines and is much closer to a scale-free circle.</p> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.Circle.get_radius\"><code>get_radius()</code></dt> <dd>\n<p>return the radius of the circle</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.Circle.radius\"><code>radius</code></dt> <dd>\n<p>return the radius of the circle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Circle.set_radius\"><code>set_radius(radius)</code></dt> <dd>\n<p>Set the radius of the circle</p> <p>ACCEPTS: float</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.CirclePolygon\"><code>class matplotlib.patches.CirclePolygon(xy, radius=5, resolution=20, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.RegularPolygon\" title=\"matplotlib.patches.RegularPolygon\"><code>matplotlib.patches.RegularPolygon</code></a></p> <p>A polygon-approximation of a circle patch.</p> <p>Create a circle at <em>xy</em> = (<em>x</em>, <em>y</em>) with given <em>radius</em>. This circle is approximated by a regular polygon with <em>resolution</em> sides. For a smoother circle drawn with splines, see <a class=\"reference internal\" href=\"#matplotlib.patches.Circle\" title=\"matplotlib.patches.Circle\"><code>Circle</code></a>.</p> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ConnectionPatch\"><code>class matplotlib.patches.ConnectionPatch(xyA, xyB, coordsA, coordsB=None, axesA=None, axesB=None, arrowstyle='-', arrow_transmuter=None, connectionstyle='arc3', connector=None, patchA=None, patchB=None, shrinkA=0.0, shrinkB=0.0, mutation_scale=10.0, mutation_aspect=None, clip_on=False, dpi_cor=1.0, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>matplotlib.patches.FancyArrowPatch</code></a></p> <p>A <a class=\"reference internal\" href=\"#matplotlib.patches.ConnectionPatch\" title=\"matplotlib.patches.ConnectionPatch\"><code>ConnectionPatch</code></a> class is to make connecting lines between two points (possibly in different axes).</p> <p>Connect point <em>xyA</em> in <em>coordsA</em> with point <em>xyB</em> in <em>coordsB</em></p> <p>Valid keys are</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"78%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>arrowstyle</td> <td>the arrow style</td> </tr> <tr class=\"row-odd\">\n<td>connectionstyle</td> <td>the connection style</td> </tr> <tr class=\"row-even\">\n<td>relpos</td> <td>default is (0.5, 0.5)</td> </tr> <tr class=\"row-odd\">\n<td>patchA</td> <td>default is bounding box of the text</td> </tr> <tr class=\"row-even\">\n<td>patchB</td> <td>default is None</td> </tr> <tr class=\"row-odd\">\n<td>shrinkA</td> <td>default is 2 points</td> </tr> <tr class=\"row-even\">\n<td>shrinkB</td> <td>default is 2 points</td> </tr> <tr class=\"row-odd\">\n<td>mutation_scale</td> <td>default is text size (in points)</td> </tr> <tr class=\"row-even\">\n<td>mutation_aspect</td> <td>default is 1.</td> </tr> <tr class=\"row-odd\">\n<td>?</td> <td>any key for <a class=\"reference internal\" href=\"#matplotlib.patches.PathPatch\" title=\"matplotlib.patches.PathPatch\"><code>matplotlib.patches.PathPatch</code></a>\n</td> </tr> </tbody> </table> <p><em>coordsA</em> and <em>coordsB</em> are strings that indicate the coordinates of <em>xyA</em> and <em>xyB</em>.</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘figure points’</td> <td>points from the lower left corner of the figure</td> </tr> <tr class=\"row-odd\">\n<td>‘figure pixels’</td> <td>pixels from the lower left corner of the figure</td> </tr> <tr class=\"row-even\">\n<td>‘figure fraction’</td> <td>0,0 is lower left of figure and 1,1 is upper, right</td> </tr> <tr class=\"row-odd\">\n<td>‘axes points’</td> <td>points from lower left corner of axes</td> </tr> <tr class=\"row-even\">\n<td>‘axes pixels’</td> <td>pixels from lower left corner of axes</td> </tr> <tr class=\"row-odd\">\n<td>‘axes fraction’</td> <td>0,1 is lower left of axes and 1,1 is upper right</td> </tr> <tr class=\"row-even\">\n<td>‘data’</td> <td>use the coordinate system of the object being annotated (default)</td> </tr> <tr class=\"row-odd\">\n<td>‘offset points’</td> <td>Specify an offset (in points) from the <em>xy</em> value</td> </tr> <tr class=\"row-even\">\n<td>‘polar’</td> <td>you can specify <em>theta</em>, <em>r</em> for the annotation, even in cartesian plots. Note that if you are using a polar axes, you do not need to specify polar for the coordinate system since that is the native “data” coordinate system.</td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionPatch.draw\"><code>draw(renderer)</code></dt> <dd>\n<p>Draw.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionPatch.get_annotation_clip\"><code>get_annotation_clip()</code></dt> <dd>\n<p>Return <em>annotation_clip</em> attribute. See <a class=\"reference internal\" href=\"#matplotlib.patches.ConnectionPatch.set_annotation_clip\" title=\"matplotlib.patches.ConnectionPatch.set_annotation_clip\"><code>set_annotation_clip()</code></a> for the meaning of return values.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionPatch.get_path_in_displaycoord\"><code>get_path_in_displaycoord()</code></dt> <dd>\n<p>Return the mutated path of the arrow in the display coord</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionPatch.set_annotation_clip\"><code>set_annotation_clip(b)</code></dt> <dd>\n<p>set <em>annotation_clip</em> attribute.</p> <blockquote> <div>\n<ul> <li>\n<dl class=\"first docutils\"> <dt>True: the annotation will only be drawn when self.xy is inside the</dt> <dd>\n<p class=\"first last\">axes.</p> </dd> </dl> </li> <li>\n<dl class=\"first docutils\"> <dt>False: the annotation will always be drawn regardless of its</dt> <dd>\n<p class=\"first last\">position.</p> </dd> </dl> </li> <li>None: the self.xy will be checked only if <em>xycoords</em> is “data” </li> </ul> </div>\n</blockquote> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ConnectionStyle\"><code>class matplotlib.patches.ConnectionStyle</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Style</code></p> <p><a class=\"reference internal\" href=\"#matplotlib.patches.ConnectionStyle\" title=\"matplotlib.patches.ConnectionStyle\"><code>ConnectionStyle</code></a> is a container class which defines several connectionstyle classes, which is used to create a path between two points. These are mainly used with <a class=\"reference internal\" href=\"#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a>.</p> <p>A connectionstyle object can be either created as:</p> <pre data-language=\"python\">ConnectionStyle.Arc3(rad=0.2)\n</pre> <p>or:</p> <pre data-language=\"python\">ConnectionStyle(\"Arc3\", rad=0.2)\n</pre> <p>or:</p> <pre data-language=\"python\">ConnectionStyle(\"Arc3, rad=0.2\")\n</pre> <p>The following classes are defined</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"16%\"> <col width=\"74%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Class</th> <th class=\"head\">Name</th> <th class=\"head\">Attrs</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Angle</td> <td><code>angle</code></td> <td>angleA=90,angleB=0,rad=0.0</td> </tr> <tr class=\"row-odd\">\n<td>Angle3</td> <td><code>angle3</code></td> <td>angleA=90,angleB=0</td> </tr> <tr class=\"row-even\">\n<td>Arc</td> <td><code>arc</code></td> <td>angleA=0,angleB=0,armA=None,armB=None,rad=0.0</td> </tr> <tr class=\"row-odd\">\n<td>Arc3</td> <td><code>arc3</code></td> <td>rad=0.0</td> </tr> <tr class=\"row-even\">\n<td>Bar</td> <td><code>bar</code></td> <td>armA=0.0,armB=0.0,fraction=0.3,angle=None</td> </tr> </tbody> </table> </div>\n</blockquote> <p>An instance of any connection style class is an callable object, whose call signature is:</p> <pre data-language=\"python\">__call__(self, posA, posB,\n         patchA=None, patchB=None,\n         shrinkA=2., shrinkB=2.)\n</pre> <p>and it returns a <code>Path</code> instance. <em>posA</em> and <em>posB</em> are tuples of x,y coordinates of the two points to be connected. <em>patchA</em> (or <em>patchB</em>) is given, the returned path is clipped so that it start (or end) from the boundary of the patch. The path is further shrunk by <em>shrinkA</em> (or <em>shrinkB</em>) which is given in points.</p> <dl class=\"class\"> <dt id=\"matplotlib.patches.ConnectionStyle.Angle\"><code>class Angle(angleA=90, angleB=0, rad=0.0)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>Creates a picewise continuous quadratic bezier path between two points. The path has a one passing-through point placed at the intersecting point of two lines which crosses the start (or end) point and has a angle of angleA (or angleB). The connecting edges are rounded with <em>rad</em>.</p> <dl class=\"docutils\"> <dt><em>angleA</em></dt> <dd>starting angle of the path</dd> <dt><em>angleB</em></dt> <dd>ending angle of the path</dd> <dt><em>rad</em></dt> <dd>rounding radius of the edge</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionStyle.Angle.connect\"><code>connect(posA, posB)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ConnectionStyle.Angle3\"><code>class ConnectionStyle.Angle3(angleA=90, angleB=0)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>Creates a simple quadratic bezier curve between two points. The middle control points is placed at the intersecting point of two lines which crosses the start (or end) point and has a angle of angleA (or angleB).</p> <dl class=\"docutils\"> <dt><em>angleA</em></dt> <dd>starting angle of the path</dd> <dt><em>angleB</em></dt> <dd>ending angle of the path</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionStyle.Angle3.connect\"><code>connect(posA, posB)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ConnectionStyle.Arc\"><code>class ConnectionStyle.Arc(angleA=0, angleB=0, armA=None, armB=None, rad=0.0)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>Creates a picewise continuous quadratic bezier path between two points. The path can have two passing-through points, a point placed at the distance of armA and angle of angleA from point A, another point with respect to point B. The edges are rounded with <em>rad</em>.</p> <dl class=\"docutils\"> <dt>\n<em>angleA</em> :</dt> <dd>starting angle of the path</dd> <dt>\n<em>angleB</em> :</dt> <dd>ending angle of the path</dd> <dt>\n<em>armA</em> :</dt> <dd>length of the starting arm</dd> <dt>\n<em>armB</em> :</dt> <dd>length of the ending arm</dd> <dt>\n<em>rad</em> :</dt> <dd>rounding radius of the edges</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionStyle.Arc.connect\"><code>connect(posA, posB)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ConnectionStyle.Arc3\"><code>class ConnectionStyle.Arc3(rad=0.0)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>Creates a simple quadratic bezier curve between two points. The curve is created so that the middle contol points (C1) is located at the same distance from the start (C0) and end points(C2) and the distance of the C1 to the line connecting C0-C2 is <em>rad</em> times the distance of C0-C2.</p> <dl class=\"docutils\"> <dt><em>rad</em></dt> <dd>curvature of the curve.</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionStyle.Arc3.connect\"><code>connect(posA, posB)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.ConnectionStyle.Bar\"><code>class ConnectionStyle.Bar(armA=0.0, armB=0.0, fraction=0.3, angle=None)</code></dt> <dd>\n<p>Bases: <code>matplotlib.patches._Base</code></p> <p>A line with <em>angle</em> between A and B with <em>armA</em> and <em>armB</em>. One of the arms is extended so that they are connected in a right angle. The length of armA is determined by (<em>armA</em> + <em>fraction</em> x AB distance). Same for armB.</p> <p><em>armA</em> : minimum length of armA</p> <p><em>armB</em> : minimum length of armB</p> <dl class=\"docutils\"> <dt>\n<em>fraction</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a fraction of the distance between two points that</span>\n</dt> <dd>will be added to armA and armB.</dd> <dt>\n<em>angle</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">angle of the connecting line (if None, parallel to A</span>\n</dt> <dd>and B)</dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.ConnectionStyle.Bar.connect\"><code>connect(posA, posB)</code></dt> \n</dl> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.Ellipse\"><code>class matplotlib.patches.Ellipse(xy, width, height, angle=0.0, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>A scale-free ellipse.</p> <dl class=\"docutils\"> <dt><em>xy</em></dt> <dd>center of ellipse</dd> <dt><em>width</em></dt> <dd>total length (diameter) of horizontal axis</dd> <dt><em>height</em></dt> <dd>total length (diameter) of vertical axis</dd> <dt><em>angle</em></dt> <dd>rotation in degrees (anti-clockwise)</dd> </dl> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.Ellipse.get_patch_transform\"><code>get_patch_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Ellipse.get_path\"><code>get_path()</code></dt> <dd>\n<p>Return the vertices of the rectangle</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.FancyArrow\"><code>class matplotlib.patches.FancyArrow(x, y, dx, dy, width=0.001, length_includes_head=False, head_width=None, head_length=None, shape='full', overhang=0, head_starts_at_zero=False, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>matplotlib.patches.Polygon</code></a></p> <p>Like Arrow, but lets you set head width and head height independently.</p> <dl class=\"docutils\"> <dt>Constructor arguments</dt> <dd>\n<dl class=\"first last docutils\"> <dt>\n<em>width</em>: float (default: 0.001)</dt> <dd>width of full arrow tail</dd> <dt>\n<em>length_includes_head</em>: [True | False] (default: False)</dt> <dd>True if head is to be counted in calculating the length.</dd> <dt>\n<em>head_width</em>: float or None (default: 3*width)</dt> <dd>total width of the full arrow head</dd> <dt>\n<em>head_length</em>: float or None (default: 1.5 * head_width)</dt> <dd>length of arrow head</dd> <dt>\n<em>shape</em>: [‘full’, ‘left’, ‘right’] (default: ‘full’)</dt> <dd>draw the left-half, right-half, or full arrow</dd> <dt>\n<em>overhang</em>: float (default: 0)</dt> <dd>fraction that the arrow is swept back (0 overhang means triangular shape). Can be negative or greater than one.</dd> <dt>\n<em>head_starts_at_zero</em>: [True | False] (default: False)</dt> <dd>if True, the head starts being drawn at coordinate 0 instead of ending at coordinate 0.</dd> </dl> </dd> </dl> <p>Other valid kwargs (inherited from <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>) are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.FancyArrowPatch\"><code>class matplotlib.patches.FancyArrowPatch(posA=None, posB=None, path=None, arrowstyle='simple', arrow_transmuter=None, connectionstyle='arc3', connector=None, patchA=None, patchB=None, shrinkA=2.0, shrinkB=2.0, mutation_scale=1.0, mutation_aspect=None, dpi_cor=1.0, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>A fancy arrow patch. It draws an arrow using the :class:ArrowStyle.</p> <p>If <em>posA</em> and <em>posB</em> is given, a path connecting two point are created according to the connectionstyle. The path will be clipped with <em>patchA</em> and <em>patchB</em> and further shrunken by <em>shrinkA</em> and <em>shrinkB</em>. An arrow is drawn along this resulting path using the <em>arrowstyle</em> parameter. If <em>path</em> provided, an arrow is drawn along this path and <em>patchA</em>, <em>patchB</em>, <em>shrinkA</em>, and <em>shrinkB</em> are ignored.</p> <p>The <em>connectionstyle</em> describes how <em>posA</em> and <em>posB</em> are connected. It can be an instance of the ConnectionStyle class (matplotlib.patches.ConnectionStlye) or a string of the connectionstyle name, with optional comma-separated attributes. The following connection styles are available.</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"16%\"> <col width=\"74%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Class</th> <th class=\"head\">Name</th> <th class=\"head\">Attrs</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Angle</td> <td><code>angle</code></td> <td>angleA=90,angleB=0,rad=0.0</td> </tr> <tr class=\"row-odd\">\n<td>Angle3</td> <td><code>angle3</code></td> <td>angleA=90,angleB=0</td> </tr> <tr class=\"row-even\">\n<td>Arc</td> <td><code>arc</code></td> <td>angleA=0,angleB=0,armA=None,armB=None,rad=0.0</td> </tr> <tr class=\"row-odd\">\n<td>Arc3</td> <td><code>arc3</code></td> <td>rad=0.0</td> </tr> <tr class=\"row-even\">\n<td>Bar</td> <td><code>bar</code></td> <td>armA=0.0,armB=0.0,fraction=0.3,angle=None</td> </tr> </tbody> </table> </div>\n</blockquote> <p>The <em>arrowstyle</em> describes how the fancy arrow will be drawn. It can be string of the available arrowstyle names, with optional comma-separated attributes, or one of the ArrowStyle instance. The optional attributes are meant to be scaled with the <em>mutation_scale</em>. The following arrow styles are available.</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"11%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Class</th> <th class=\"head\">Name</th> <th class=\"head\">Attrs</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Curve</td> <td><code>-</code></td> <td>None</td> </tr> <tr class=\"row-odd\">\n<td>CurveB</td> <td><code>-&gt;</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>BracketB</td> <td><code>-[</code></td> <td>widthB=1.0,lengthB=0.2,angleB=None</td> </tr> <tr class=\"row-odd\">\n<td>CurveFilledB</td> <td><code>-|&gt;</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>CurveA</td> <td><code>&lt;-</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-odd\">\n<td>CurveAB</td> <td><code>&lt;-&gt;</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>CurveFilledA</td> <td><code>&lt;|-</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-odd\">\n<td>CurveFilledAB</td> <td><code>&lt;|-|&gt;</code></td> <td>head_length=0.4,head_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>BracketA</td> <td><code>]-</code></td> <td>widthA=1.0,lengthA=0.2,angleA=None</td> </tr> <tr class=\"row-odd\">\n<td>BracketAB</td> <td><code>]-[</code></td> <td>widthA=1.0,lengthA=0.2,angleA=None,widthB=1.0,lengthB=0.2,angleB=None</td> </tr> <tr class=\"row-even\">\n<td>Fancy</td> <td><code>fancy</code></td> <td>head_length=0.4,head_width=0.4,tail_width=0.4</td> </tr> <tr class=\"row-odd\">\n<td>Simple</td> <td><code>simple</code></td> <td>head_length=0.5,head_width=0.5,tail_width=0.2</td> </tr> <tr class=\"row-even\">\n<td>Wedge</td> <td><code>wedge</code></td> <td>tail_width=0.3,shrink_factor=0.5</td> </tr> <tr class=\"row-odd\">\n<td>BarAB</td> <td><code>|-|</code></td> <td>widthA=1.0,angleA=None,widthB=1.0,angleB=None</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>mutation_scale</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a value with which attributes of arrowstyle</span>\n</dt> <dd>(e.g., head_length) will be scaled. default=1.</dd> <dt>\n<em>mutation_aspect</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">The height of the rectangle will be</span>\n</dt> <dd>squeezed by this value before the mutation and the mutated box will be stretched by the inverse of it. default=None.</dd> </dl> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.draw\"><code>draw(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.get_arrowstyle\"><code>get_arrowstyle()</code></dt> <dd>\n<p>Return the arrowstyle object</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.get_connectionstyle\"><code>get_connectionstyle()</code></dt> <dd>\n<p>Return the ConnectionStyle instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.get_dpi_cor\"><code>get_dpi_cor()</code></dt> <dd>\n<p>dpi_cor is currently used for linewidth-related things and shink factor. Mutation scale is not affected by this.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.get_mutation_aspect\"><code>get_mutation_aspect()</code></dt> <dd>\n<p>Return the aspect ratio of the bbox mutation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.get_mutation_scale\"><code>get_mutation_scale()</code></dt> <dd>\n<p>Return the mutation scale.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.get_path\"><code>get_path()</code></dt> <dd>\n<p>return the path of the arrow in the data coordinate. Use get_path_in_displaycoord() method to retrieve the arrow path in the display coord.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.get_path_in_displaycoord\"><code>get_path_in_displaycoord()</code></dt> <dd>\n<p>Return the mutated path of the arrow in the display coord</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.set_arrowstyle\"><code>set_arrowstyle(arrowstyle=None, **kw)</code></dt> <dd>\n<p>Set the arrow style.</p> <dl class=\"docutils\"> <dt>\n<em>arrowstyle</em> can be a string with arrowstyle name with optional</dt> <dd>\n<p class=\"first\">comma-separated attributes. Alternatively, the attrs can be provided as keywords.</p> <p class=\"last\">set_arrowstyle(“Fancy,head_length=0.2”) set_arrowstyle(“fancy”, head_length=0.2)</p> </dd> </dl> <p>Old attrs simply are forgotten.</p> <p>Without argument (or with arrowstyle=None), return available box styles as a list of strings.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.set_connectionstyle\"><code>set_connectionstyle(connectionstyle, **kw)</code></dt> <dd>\n<p>Set the connection style.</p> <dl class=\"docutils\"> <dt>\n<em>connectionstyle</em> can be a string with connectionstyle name with</dt> <dd>\n<p class=\"first\">optional comma-separated attributes. Alternatively, the attrs can be provided as keywords.</p> <p class=\"last\">set_connectionstyle(“arc,angleA=0,armA=30,rad=10”) set_connectionstyle(“arc”, angleA=0,armA=30,rad=10)</p> </dd> </dl> <p>Old attrs simply are forgotten.</p> <p>Without argument (or with connectionstyle=None), return available styles as a list of strings.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.set_dpi_cor\"><code>set_dpi_cor(dpi_cor)</code></dt> <dd>\n<p>dpi_cor is currently used for linewidth-related things and shink factor. Mutation scale is not affected by this.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.set_mutation_aspect\"><code>set_mutation_aspect(aspect)</code></dt> <dd>\n<p>Set the aspect ratio of the bbox mutation.</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.set_mutation_scale\"><code>set_mutation_scale(scale)</code></dt> <dd>\n<p>Set the mutation scale.</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.set_patchA\"><code>set_patchA(patchA)</code></dt> <dd>\n<p>set the begin patch.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.set_patchB\"><code>set_patchB(patchB)</code></dt> <dd>\n<p>set the begin patch</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyArrowPatch.set_positions\"><code>set_positions(posA, posB)</code></dt> <dd>\n<p>set the begin end end positions of the connecting path. Use current vlaue if None.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.FancyBboxPatch\"><code>class matplotlib.patches.FancyBboxPatch(xy, width, height, boxstyle='round', bbox_transmuter=None, mutation_scale=1.0, mutation_aspect=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>Draw a fancy box around a rectangle with lower left at <em>xy*=(*x</em>, <em>y</em>) with specified width and height.</p> <p><a class=\"reference internal\" href=\"#matplotlib.patches.FancyBboxPatch\" title=\"matplotlib.patches.FancyBboxPatch\"><code>FancyBboxPatch</code></a> class is similar to <a class=\"reference internal\" href=\"#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>Rectangle</code></a> class, but it draws a fancy box around the rectangle. The transformation of the rectangle box to the fancy box is delegated to the <code>BoxTransmuterBase</code> and its derived classes.</p> <p><em>xy</em> = lower left corner</p> <p><em>width</em>, <em>height</em></p> <p><em>boxstyle</em> determines what kind of fancy box will be drawn. It can be a string of the style name with a comma separated attribute, or an instance of <a class=\"reference internal\" href=\"#matplotlib.patches.BoxStyle\" title=\"matplotlib.patches.BoxStyle\"><code>BoxStyle</code></a>. Following box styles are available.</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"28%\"> <col width=\"52%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Class</th> <th class=\"head\">Name</th> <th class=\"head\">Attrs</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Circle</td> <td><code>circle</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-odd\">\n<td>DArrow</td> <td><code>darrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-even\">\n<td>LArrow</td> <td><code>larrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-odd\">\n<td>RArrow</td> <td><code>rarrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-even\">\n<td>Round</td> <td><code>round</code></td> <td>pad=0.3,rounding_size=None</td> </tr> <tr class=\"row-odd\">\n<td>Round4</td> <td><code>round4</code></td> <td>pad=0.3,rounding_size=None</td> </tr> <tr class=\"row-even\">\n<td>Roundtooth</td> <td><code>roundtooth</code></td> <td>pad=0.3,tooth_size=None</td> </tr> <tr class=\"row-odd\">\n<td>Sawtooth</td> <td><code>sawtooth</code></td> <td>pad=0.3,tooth_size=None</td> </tr> <tr class=\"row-even\">\n<td>Square</td> <td><code>square</code></td> <td>pad=0.3</td> </tr> </tbody> </table> </div>\n</blockquote> <p><em>mutation_scale</em> : a value with which attributes of boxstyle (e.g., pad) will be scaled. default=1.</p> <p><em>mutation_aspect</em> : The height of the rectangle will be squeezed by this value before the mutation and the mutated box will be stretched by the inverse of it. default=None.</p> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_bbox\"><code>get_bbox()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_boxstyle\"><code>get_boxstyle()</code></dt> <dd>\n<p>Return the boxstyle object</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_height\"><code>get_height()</code></dt> <dd>\n<p>Return the height of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_mutation_aspect\"><code>get_mutation_aspect()</code></dt> <dd>\n<p>Return the aspect ratio of the bbox mutation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_mutation_scale\"><code>get_mutation_scale()</code></dt> <dd>\n<p>Return the mutation scale.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_path\"><code>get_path()</code></dt> <dd>\n<p>Return the mutated path of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_width\"><code>get_width()</code></dt> <dd>\n<p>Return the width of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_x\"><code>get_x()</code></dt> <dd>\n<p>Return the left coord of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.get_y\"><code>get_y()</code></dt> <dd>\n<p>Return the bottom coord of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.set_bounds\"><code>set_bounds(*args)</code></dt> <dd>\n<p>Set the bounds of the rectangle: l,b,w,h</p> <p>ACCEPTS: (left, bottom, width, height)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.set_boxstyle\"><code>set_boxstyle(boxstyle=None, **kw)</code></dt> <dd>\n<p>Set the box style.</p> <p><em>boxstyle</em> can be a string with boxstyle name with optional comma-separated attributes. Alternatively, the attrs can be provided as keywords:</p> <pre data-language=\"python\">set_boxstyle(\"round,pad=0.2\")\nset_boxstyle(\"round\", pad=0.2)\n</pre> <p>Old attrs simply are forgotten.</p> <p>Without argument (or with <em>boxstyle</em> = None), it returns available box styles.</p> <p>The following boxstyles are available:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"28%\"> <col width=\"52%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Class</th> <th class=\"head\">Name</th> <th class=\"head\">Attrs</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>Circle</td> <td><code>circle</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-odd\">\n<td>DArrow</td> <td><code>darrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-even\">\n<td>LArrow</td> <td><code>larrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-odd\">\n<td>RArrow</td> <td><code>rarrow</code></td> <td>pad=0.3</td> </tr> <tr class=\"row-even\">\n<td>Round</td> <td><code>round</code></td> <td>pad=0.3,rounding_size=None</td> </tr> <tr class=\"row-odd\">\n<td>Round4</td> <td><code>round4</code></td> <td>pad=0.3,rounding_size=None</td> </tr> <tr class=\"row-even\">\n<td>Roundtooth</td> <td><code>roundtooth</code></td> <td>pad=0.3,tooth_size=None</td> </tr> <tr class=\"row-odd\">\n<td>Sawtooth</td> <td><code>sawtooth</code></td> <td>pad=0.3,tooth_size=None</td> </tr> <tr class=\"row-even\">\n<td>Square</td> <td><code>square</code></td> <td>pad=0.3</td> </tr> </tbody> </table> </div>\n</blockquote> <p>ACCEPTS: [ ‘circle’ | ‘darrow’ | ‘larrow’ | ‘rarrow’ | ‘round’ | ‘round4’ | ‘roundtooth’ | ‘sawtooth’ | ‘square’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.set_height\"><code>set_height(h)</code></dt> <dd>\n<p>Set the width rectangle</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.set_mutation_aspect\"><code>set_mutation_aspect(aspect)</code></dt> <dd>\n<p>Set the aspect ratio of the bbox mutation.</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.set_mutation_scale\"><code>set_mutation_scale(scale)</code></dt> <dd>\n<p>Set the mutation scale.</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.set_width\"><code>set_width(w)</code></dt> <dd>\n<p>Set the width rectangle</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.set_x\"><code>set_x(x)</code></dt> <dd>\n<p>Set the left coord of the rectangle</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.FancyBboxPatch.set_y\"><code>set_y(y)</code></dt> <dd>\n<p>Set the bottom coord of the rectangle</p> <p>ACCEPTS: float</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.Patch\"><code>class matplotlib.patches.Patch(edgecolor=None, facecolor=None, color=None, linewidth=None, linestyle=None, antialiased=None, hatch=None, fill=True, capstyle=None, joinstyle=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a></p> <p>A patch is a 2D artist with a face color and an edge color.</p> <p>If any of <em>edgecolor</em>, <em>facecolor</em>, <em>linewidth</em>, or <em>antialiased</em> are <em>None</em>, they default to their rc params setting.</p> <p>The following kwarg properties are supported</p> <table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.contains\"><code>contains(mouseevent, radius=None)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the patch.</p> <p>Returns T/F, {}</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.contains_point\"><code>contains_point(point, radius=None)</code></dt> <dd>\n<p>Returns <em>True</em> if the given point is inside the path (transformed with its transform attribute).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>Draw the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> to the given <em>renderer</em>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.Patch.fill\"><code>fill</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_aa\"><code>get_aa()</code></dt> <dd>\n<p>Returns True if the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> is to be drawn with antialiasing.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_antialiased\"><code>get_antialiased()</code></dt> <dd>\n<p>Returns True if the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> is to be drawn with antialiasing.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_capstyle\"><code>get_capstyle()</code></dt> <dd>\n<p>Return the current capstyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_data_transform\"><code>get_data_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance which maps data coordinates to physical coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_ec\"><code>get_ec()</code></dt> <dd>\n<p>Return the edge color of the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_edgecolor\"><code>get_edgecolor()</code></dt> <dd>\n<p>Return the edge color of the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_extents\"><code>get_extents()</code></dt> <dd>\n<p>Return a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a> object defining the axis-aligned extents of the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_facecolor\"><code>get_facecolor()</code></dt> <dd>\n<p>Return the face color of the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_fc\"><code>get_fc()</code></dt> <dd>\n<p>Return the face color of the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_joinstyle\"><code>get_joinstyle()</code></dt> <dd>\n<p>Return the current joinstyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_linestyle\"><code>get_linestyle()</code></dt> <dd>\n<p>Return the linestyle. Will be one of [‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_linewidth\"><code>get_linewidth()</code></dt> <dd>\n<p>Return the line width in points.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_ls\"><code>get_ls()</code></dt> <dd>\n<p>Return the linestyle. Will be one of [‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_lw\"><code>get_lw()</code></dt> <dd>\n<p>Return the line width in points.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_patch_transform\"><code>get_patch_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance which takes patch coordinates to data coordinates.</p> <p>For example, one may define a patch of a circle which represents a radius of 5 by providing coordinates for a unit circle, and a transform which scales the coordinates (the patch coordinate) by 5.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_path\"><code>get_path()</code></dt> <dd>\n<p>Return the path of this patch</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> applied to the <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_verts\"><code>get_verts()</code></dt> <dd>\n<p>Return a copy of the vertices used in this patch</p> <p>If the patch contains Bezier curves, the curves will be interpolated by line segments. To access the curves as curves, use <a class=\"reference internal\" href=\"#matplotlib.patches.Patch.get_path\" title=\"matplotlib.patches.Patch.get_path\"><code>get_path()</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.get_window_extent\"><code>get_window_extent(renderer=None)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_aa\"><code>set_aa(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparency of the patch.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set whether to use antialiased rendering</p> <p>ACCEPTS: [True | False] or None for default</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_capstyle\"><code>set_capstyle(s)</code></dt> <dd>\n<p>Set the patch capstyle</p> <p>ACCEPTS: [‘butt’ | ‘round’ | ‘projecting’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color spec</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_ec\"><code>set_ec(color)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_edgecolor\"><code>set_edgecolor(color)</code></dt> <dd>\n<p>Set the patch edge color</p> <p>ACCEPTS: mpl color spec, or None for default, or ‘none’ for no color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_facecolor\"><code>set_facecolor(color)</code></dt> <dd>\n<p>Set the patch face color</p> <p>ACCEPTS: mpl color spec, or None for default, or ‘none’ for no color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_fc\"><code>set_fc(color)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_fill\"><code>set_fill(b)</code></dt> <dd>\n<p>Set whether to fill the patch</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>ACCEPTS: [‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_joinstyle\"><code>set_joinstyle(s)</code></dt> <dd>\n<p>Set the patch joinstyle</p> <p>ACCEPTS: [‘miter’ | ‘round’ | ‘bevel’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the patch linestyle</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_linewidth\"><code>set_linewidth(w)</code></dt> <dd>\n<p>Set the patch linewidth in points</p> <p>ACCEPTS: float or None for default</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_ls\"><code>set_ls(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Patch.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>Updates this <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> from the properties of <em>other</em>.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.Patch.validCap\"><code>validCap = ('butt', 'round', 'projecting')</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.Patch.validJoin\"><code>validJoin = ('miter', 'round', 'bevel')</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.Patch.zorder\"><code>zorder = 1</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.PathPatch\"><code>class matplotlib.patches.PathPatch(path, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>A general polycurve path patch.</p> <p><em>path</em> is a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>matplotlib.path.Path</code></a> object.</p> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a></dt> <dd>For additional kwargs</dd> </dl> </div> <dl class=\"method\"> <dt id=\"matplotlib.patches.PathPatch.get_path\"><code>get_path()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.Polygon\"><code>class matplotlib.patches.Polygon(xy, closed=True, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>A general polygon patch.</p> <p><em>xy</em> is a numpy array with shape Nx2.</p> <p>If <em>closed</em> is <em>True</em>, the polygon will be closed so the starting and ending points are the same.</p> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a></dt> <dd>For additional kwargs</dd> </dl> </div> <dl class=\"method\"> <dt id=\"matplotlib.patches.Polygon.get_closed\"><code>get_closed()</code></dt> <dd>\n<p>Returns if the polygon is closed</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>closed</strong> : bool</p> <blockquote class=\"last\"> <div>\n<p>If the path is closed</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Polygon.get_path\"><code>get_path()</code></dt> <dd>\n<p>Get the path of the polygon</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>path</strong> : Path</p> <blockquote class=\"last\"> <div>\n<p>The <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> object for the polygon</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Polygon.get_xy\"><code>get_xy()</code></dt> <dd>\n<p>Get the vertices of the path</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>vertices</strong> : numpy array</p> <blockquote class=\"last\"> <div>\n<p>The coordinates of the vertices as a Nx2 ndarray.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Polygon.set_closed\"><code>set_closed(closed)</code></dt> <dd>\n<p>Set if the polygon is closed</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>closed</strong> : bool</p> <blockquote class=\"last\"> <div>\n<p>True if the polygon is closed</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Polygon.set_xy\"><code>set_xy(xy)</code></dt> <dd>\n<p>Set the vertices of the polygon</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>xy</strong> : numpy array or iterable of pairs</p> <blockquote class=\"last\"> <div>\n<p>The coordinates of the vertices as a Nx2 ndarray or iterable of pairs.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.Polygon.xy\"><code>xy</code></dt> <dd>\n<p>Set/get the vertices of the polygon. This property is provided for backward compatibility with matplotlib 0.91.x only. New code should use <a class=\"reference internal\" href=\"#matplotlib.patches.Polygon.get_xy\" title=\"matplotlib.patches.Polygon.get_xy\"><code>get_xy()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.patches.Polygon.set_xy\" title=\"matplotlib.patches.Polygon.set_xy\"><code>set_xy()</code></a> instead.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.Rectangle\"><code>class matplotlib.patches.Rectangle(xy, width, height, angle=0.0, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>Draw a rectangle with lower left at <em>xy</em> = (<em>x</em>, <em>y</em>) with specified <em>width</em> and <em>height</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>angle</em></dt> <dd>rotation in degrees (anti-clockwise)</dd> </dl> <p><em>fill</em> is a boolean indicating whether to fill the rectangle</p> <p>Valid kwargs are:</p> </div>\n</blockquote> <table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.get_bbox\"><code>get_bbox()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.get_height\"><code>get_height()</code></dt> <dd>\n<p>Return the height of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.get_patch_transform\"><code>get_patch_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.get_path\"><code>get_path()</code></dt> <dd>\n<p>Return the vertices of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.get_width\"><code>get_width()</code></dt> <dd>\n<p>Return the width of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.get_x\"><code>get_x()</code></dt> <dd>\n<p>Return the left coord of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.get_xy\"><code>get_xy()</code></dt> <dd>\n<p>Return the left and bottom coords of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.get_y\"><code>get_y()</code></dt> <dd>\n<p>Return the bottom coord of the rectangle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.set_bounds\"><code>set_bounds(*args)</code></dt> <dd>\n<p>Set the bounds of the rectangle: l,b,w,h</p> <p>ACCEPTS: (left, bottom, width, height)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.set_height\"><code>set_height(h)</code></dt> <dd>\n<p>Set the width rectangle</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.set_width\"><code>set_width(w)</code></dt> <dd>\n<p>Set the width rectangle</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.set_x\"><code>set_x(x)</code></dt> <dd>\n<p>Set the left coord of the rectangle</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.set_xy\"><code>set_xy(xy)</code></dt> <dd>\n<p>Set the left and bottom coords of the rectangle</p> <p>ACCEPTS: 2-item sequence</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Rectangle.set_y\"><code>set_y(y)</code></dt> <dd>\n<p>Set the bottom coord of the rectangle</p> <p>ACCEPTS: float</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.Rectangle.xy\"><code>xy</code></dt> <dd>\n<p>Return the left and bottom coords of the rectangle</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.RegularPolygon\"><code>class matplotlib.patches.RegularPolygon(xy, numVertices, radius=5, orientation=0, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>A regular polygon patch.</p> <p>Constructor arguments:</p> <dl class=\"docutils\"> <dt><em>xy</em></dt> <dd>A length 2 tuple (<em>x</em>, <em>y</em>) of the center.</dd> <dt><em>numVertices</em></dt> <dd>the number of vertices.</dd> <dt><em>radius</em></dt> <dd>The distance from the center to each of the vertices.</dd> <dt><em>orientation</em></dt> <dd>rotates the polygon (in radians).</dd> </dl> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.RegularPolygon.get_patch_transform\"><code>get_patch_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.RegularPolygon.get_path\"><code>get_path()</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.RegularPolygon.numvertices\"><code>numvertices</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.RegularPolygon.orientation\"><code>orientation</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.RegularPolygon.radius\"><code>radius</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.patches.RegularPolygon.xy\"><code>xy</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.Shadow\"><code>class matplotlib.patches.Shadow(patch, ox, oy, props=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>Create a shadow of the given <em>patch</em> offset by <em>ox</em>, <em>oy</em>. <em>props</em>, if not <em>None</em>, is a patch property update dictionary. If <em>None</em>, the shadow will have have the same color as the face, but darkened.</p> <p>kwargs are</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.Shadow.draw\"><code>draw(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Shadow.get_patch_transform\"><code>get_patch_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Shadow.get_path\"><code>get_path()</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.Wedge\"><code>class matplotlib.patches.Wedge(center, r, theta1, theta2, width=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>Wedge shaped patch.</p> <p>Draw a wedge centered at <em>x</em>, <em>y</em> center with radius <em>r</em> that sweeps <em>theta1</em> to <em>theta2</em> (in degrees). If <em>width</em> is given, then a partial wedge is drawn from inner radius <em>r</em> - <em>width</em> to outer radius <em>r</em>.</p> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.Wedge.get_path\"><code>get_path()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Wedge.set_center\"><code>set_center(center)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Wedge.set_radius\"><code>set_radius(radius)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Wedge.set_theta1\"><code>set_theta1(theta1)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Wedge.set_theta2\"><code>set_theta2(theta2)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.Wedge.set_width\"><code>set_width(width)</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.patches.YAArrow\"><code>class matplotlib.patches.YAArrow(figure, xytip, xybase, width=4, frac=0.1, headwidth=12, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>matplotlib.patches.Patch</code></a></p> <p>Yet another arrow class.</p> <p>This is an arrow that is defined in display space and has a tip at <em>x1</em>, <em>y1</em> and a base at <em>x2</em>, <em>y2</em>.</p> <p>Constructor arguments:</p> <dl class=\"docutils\"> <dt><em>xytip</em></dt> <dd>(<em>x</em>, <em>y</em>) location of arrow tip</dd> <dt><em>xybase</em></dt> <dd>(<em>x</em>, <em>y</em>) location the arrow base mid point</dd> <dt><em>figure</em></dt> <dd>The <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance (fig.dpi)</dd> <dt><em>width</em></dt> <dd>The width of the arrow in points</dd> <dt><em>frac</em></dt> <dd>The fraction of the arrow length occupied by the head</dd> <dt><em>headwidth</em></dt> <dd>The width of the base of the arrow head in points</dd> </dl> <p>Valid kwargs are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.patches.YAArrow.get_patch_transform\"><code>get_patch_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.YAArrow.get_path\"><code>get_path()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.patches.YAArrow.getpoints\"><code>getpoints(x1, y1, x2, y2, k)</code></dt> <dd>\n<p>For line segment defined by (<em>x1</em>, <em>y1</em>) and (<em>x2</em>, <em>y2</em>) return the points on the line that is perpendicular to the line and intersects (<em>x2</em>, <em>y2</em>) and the distance from (<em>x2</em>, <em>y2</em>) of the returned points is <em>k</em>.</p> </dd>\n</dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.patches.bbox_artist\"><code>matplotlib.patches.bbox_artist(artist, renderer, props=None, fill=True)</code></dt> <dd>\n<p>This is a debug function to draw a rectangle around the bounding box returned by <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.get_window_extent\" title=\"matplotlib.artist.Artist.get_window_extent\"><code>get_window_extent()</code></a> of an artist, to test whether the artist is returning the correct bbox.</p> <p><em>props</em> is a dict of rectangle props with the additional property ‘pad’ that sets the padding around the bbox in points.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.patches.draw_bbox\"><code>matplotlib.patches.draw_bbox(bbox, renderer, color='k', trans=None)</code></dt> <dd>\n<p>This is a debug function to draw a rectangle around the bounding box returned by <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.get_window_extent\" title=\"matplotlib.artist.Artist.get_window_extent\"><code>get_window_extent()</code></a> of an artist, to test whether the artist is returning the correct bbox.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/patches_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/patches_api.html</a>\n  </p>\n</div>\n","axes_api":"<h1 id=\"axes\">axes</h1>  <h2 id=\"matplotlib-axes\"><code>matplotlib.axes</code></h2> <dl class=\"class\"> <dt id=\"matplotlib.axes.Axes\"><code>class matplotlib.axes.Axes(fig, rect, axisbg=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, **kwargs)</code></dt> <dd>\n<p>The <code>Axes</code> contains most of the figure elements: <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>Axis</code></a>, <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Tick\" title=\"matplotlib.axis.Tick\"><code>Tick</code></a>, <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a>, <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a>, <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>Polygon</code></a>, etc., and sets the coordinate system.</p> <p>The <code>Axes</code> instance supports callbacks through a callbacks attribute which is a <a class=\"reference internal\" href=\"cbook_api#matplotlib.cbook.CallbackRegistry\" title=\"matplotlib.cbook.CallbackRegistry\"><code>CallbackRegistry</code></a> instance. The events you can connect to are ‘xlim_changed’ and ‘ylim_changed’ and the callback will be called with func(<em>ax</em>) where <em>ax</em> is the <code>Axes</code> instance.</p> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.acorr\"><code>acorr(x, **kwargs)</code></dt> <dd>\n<p>Plot the autocorrelation of <code>x</code>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : sequence of scalar</p> <p><strong>hold</strong> : boolean, optional, default: True</p> <p><strong>detrend</strong> : callable, optional, default: <code>mlab.detrend_none</code></p> <blockquote> <div>\n<p>x is detrended by the <code>detrend</code> callable. Default is no normalization.</p> </div>\n</blockquote> <p><strong>normed</strong> : boolean, optional, default: True</p> <blockquote> <div>\n<p>if True, normalize the data by the autocorrelation at the 0-th lag.</p> </div>\n</blockquote> <p><strong>usevlines</strong> : boolean, optional, default: True</p> <blockquote> <div>\n<p>if True, Axes.vlines is used to plot the vertical lines from the origin to the acorr. Otherwise, Axes.plot is used.</p> </div>\n</blockquote> <p><strong>maxlags</strong> : integer, optional, default: 10</p> <blockquote> <div>\n<p>number of lags to show. If None, will return all 2 * len(x) - 1 lags.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>(lags, c, line, b)</strong> : where:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>lags</code> are a length 2`maxlags+1 lag vector.</li> <li>\n<code>c</code> is the 2`maxlags+1 auto correlation vectorI</li> <li>\n<code>line</code> is a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance returned by <code>plot</code>.</li> <li>\n<code>b</code> is the x-axis.</li> </ul> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>linestyle</strong> : <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> prop, optional, default: None</p> <blockquote> <div>\n<p>Only used if usevlines is False.</p> </div>\n</blockquote> <p class=\"last\"><strong>marker</strong> : string, optional, default: ‘o’</p> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.xcorr\" title=\"matplotlib.pyplot.xcorr\"><code>xcorr</code></a> is top graph, and <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.acorr\" title=\"matplotlib.pyplot.acorr\"><code>acorr</code></a> is bottom graph.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/xcorr_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/xcorr_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/xcorr_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/xcorr_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/xcorr_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/xcorr_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.add_artist\"><code>add_artist(a)</code></dt> <dd>\n<p>Add any <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> to the axes.</p> <p>Use <code>add_artist</code> only for artists for which there is no dedicated “add” method; and if necessary, use a method such as <code>update_datalim</code> or <code>update_datalim_numerix</code> to manually update the dataLim if the artist is to be included in autoscaling.</p> <p>Returns the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <code>remove_callback()</code> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.add_collection\"><code>add_collection(collection, autolim=True)</code></dt> <dd>\n<p>Add a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a> instance to the axes.</p> <p>Returns the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.add_container\"><code>add_container(container)</code></dt> <dd>\n<p>Add a <code>Container</code> instance to the axes.</p> <p>Returns the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.add_image\"><code>add_image(image)</code></dt> <dd>\n<p>Add a <a class=\"reference internal\" href=\"image_api#matplotlib.image.AxesImage\" title=\"matplotlib.image.AxesImage\"><code>AxesImage</code></a> to the axes.</p> <p>Returns the image.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.add_line\"><code>add_line(line)</code></dt> <dd>\n<p>Add a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> to the list of plot lines</p> <p>Returns the line.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.add_patch\"><code>add_patch(p)</code></dt> <dd>\n<p>Add a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> <em>p</em> to the list of axes patches; the clipbox will be set to the Axes clipping box. If the transform is not set, it will be set to <code>transData</code>.</p> <p>Returns the patch.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.add_table\"><code>add_table(tab)</code></dt> <dd>\n<p>Add a <code>Table</code> instance to the list of axes tables</p> <p>Returns the table.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.axes.Axes.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.angle_spectrum\"><code>angle_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, **kwargs)</code></dt> <dd>\n<p>Plot the angle spectrum.</p> <p>Call signature:</p> <pre data-language=\"python\">angle_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,\n               pad_to=None, sides='default', **kwargs)\n</pre> <p>Compute the angle spectrum (wrapped phase spectrum) of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>\n<blockquote class=\"first\"> <div>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> </dl> </dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the angle spectrum in radians (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function</dd> </dl> </div>\n</blockquote> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/spectrum_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/spectrum_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>magnitude_spectrum()</code></dt> <dd>\n<code>angle_spectrum()</code> plots the magnitudes of the corresponding frequencies.</dd> <dt><code>phase_spectrum()</code></dt> <dd>\n<code>phase_spectrum()</code> plots the unwrapped version of this function.</dd> <dt><code>specgram()</code></dt> <dd>\n<code>specgram()</code> can plot the angle spectrum of segments within the signal in a colormap.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.annotate\"><code>annotate(*args, **kwargs)</code></dt> <dd>\n<p>Create an annotation: a piece of text referring to a data point.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>s</strong> : string</p> <blockquote> <div>\n<p>label</p> </div>\n</blockquote> <p><strong>xy</strong> : (x, y)</p> <blockquote> <div>\n<p>position of element to annotate. See <em>xycoords</em> to control what coordinate system this value is interpretated in.</p> </div>\n</blockquote> <p><strong>xytext</strong> : (x, y) , optional, default: None</p> <blockquote> <div>\n<p>position of the label <code>s</code>. See <em>textcoords</em> to control what coordinate system this value is interpreted in.</p> </div>\n</blockquote> <p><strong>xycoords</strong> : string, optional, default: “data”</p> <blockquote> <div>\n<p>string that indicates what type of coordinates <code>xy</code> is. Examples: “figure points”, “figure pixels”, “figure fraction”, “axes points”, .... See <a class=\"reference internal\" href=\"text_api#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>matplotlib.text.Annotation</code></a> for more details.</p> </div>\n</blockquote> <p><strong>textcoords</strong> : string, optional, default: None</p> <blockquote> <div>\n<p>string that indicates what type of coordinates <code>text</code> is. Examples: “figure points”, “figure pixels”, “figure fraction”, “axes points”, .... See <a class=\"reference internal\" href=\"text_api#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>matplotlib.text.Annotation</code></a> for more details.</p> </div>\n</blockquote> <p><strong>arrowprops</strong> : <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a> properties, optional</p> <blockquote> <div>\n<p>Dictionary of line properties for the arrow that connects the annotation to the point. If the dictionnary has a key <code>arrowstyle</code>, a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a> instance is created and drawn. See <a class=\"reference internal\" href=\"text_api#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>matplotlib.text.Annotation</code></a> for more details on valid options. Default is None.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>a</strong> : <a class=\"reference internal\" href=\"text_api#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>Annotation</code></a></p> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p><em>arrowprops</em>, if not <em>None</em>, is a dictionary of line properties (see <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a>) for the arrow that connects annotation to the point.</p> <p>If the dictionary has a key <em>arrowstyle</em>, a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a> instance is created with the given dictionary and is drawn. Otherwise, a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.YAArrow\" title=\"matplotlib.patches.YAArrow\"><code>YAArrow</code></a> patch instance is created and drawn. Valid keys for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.YAArrow\" title=\"matplotlib.patches.YAArrow\"><code>YAArrow</code></a> are:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"87%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>width</td> <td>the width of the arrow in points</td> </tr> <tr class=\"row-odd\">\n<td>frac</td> <td>the fraction of the arrow length occupied by the head</td> </tr> <tr class=\"row-even\">\n<td>headwidth</td> <td>the width of the base of the arrow head in points</td> </tr> <tr class=\"row-odd\">\n<td>shrink</td> <td>oftentimes it is convenient to have the arrowtip and base a bit away from the text and point being annotated. If <em>d</em> is the distance between the text and annotated point, shrink will shorten the arrow so the tip and base are shink percent of the distance <em>d</em> away from the endpoints. i.e., <code>shrink=0.05 is 5%</code>\n</td> </tr> <tr class=\"row-even\">\n<td>?</td> <td>any key for <code>matplotlib.patches.polygon</code>\n</td> </tr> </tbody> </table> <p>Valid keys for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a> are:</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"78%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>arrowstyle</td> <td>the arrow style</td> </tr> <tr class=\"row-odd\">\n<td>connectionstyle</td> <td>the connection style</td> </tr> <tr class=\"row-even\">\n<td>relpos</td> <td>default is (0.5, 0.5)</td> </tr> <tr class=\"row-odd\">\n<td>patchA</td> <td>default is bounding box of the text</td> </tr> <tr class=\"row-even\">\n<td>patchB</td> <td>default is None</td> </tr> <tr class=\"row-odd\">\n<td>shrinkA</td> <td>default is 2 points</td> </tr> <tr class=\"row-even\">\n<td>shrinkB</td> <td>default is 2 points</td> </tr> <tr class=\"row-odd\">\n<td>mutation_scale</td> <td>default is text size (in points)</td> </tr> <tr class=\"row-even\">\n<td>mutation_aspect</td> <td>default is 1.</td> </tr> <tr class=\"row-odd\">\n<td>?</td> <td>any key for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.PathPatch\" title=\"matplotlib.patches.PathPatch\"><code>matplotlib.patches.PathPatch</code></a>\n</td> </tr> </tbody> </table> <p><em>xycoords</em> and <em>textcoords</em> are strings that indicate the coordinates of <em>xy</em> and <em>xytext</em>, and may be one of the following values:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘figure points’</td> <td>points from the lower left corner of the figure</td> </tr> <tr class=\"row-odd\">\n<td>‘figure pixels’</td> <td>pixels from the lower left corner of the figure</td> </tr> <tr class=\"row-even\">\n<td>‘figure fraction’</td> <td>0,0 is lower left of figure and 1,1 is upper right</td> </tr> <tr class=\"row-odd\">\n<td>‘axes points’</td> <td>points from lower left corner of axes</td> </tr> <tr class=\"row-even\">\n<td>‘axes pixels’</td> <td>pixels from lower left corner of axes</td> </tr> <tr class=\"row-odd\">\n<td>‘axes fraction’</td> <td>0,0 is lower left of axes and 1,1 is upper right</td> </tr> <tr class=\"row-even\">\n<td>‘data’</td> <td>use the coordinate system of the object being annotated (default)</td> </tr> <tr class=\"row-odd\">\n<td>‘offset points’</td> <td>Specify an offset (in points) from the <em>xy</em> value</td> </tr> <tr class=\"row-even\">\n<td>‘polar’</td> <td>you can specify <em>theta</em>, <em>r</em> for the annotation, even in cartesian plots. Note that if you are using a polar axes, you do not need to specify polar for the coordinate system since that is the native “data” coordinate system.</td> </tr> </tbody> </table> <p>If a ‘points’ or ‘pixels’ option is specified, values will be added to the bottom-left and if negative, values will be subtracted from the top-right. e.g.:</p> <pre data-language=\"python\"># 10 points to the right of the left border of the axes and\n# 5 points below the top border\nxy=(10,-5), xycoords='axes points'\n</pre> <p>You may use an instance of <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> or <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a>. See <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/annotations_guide.html#plotting-guide-annotation\"><span>Annotating Axes</span></a> for more details.</p> <p>The <em>annotation_clip</em> attribute controls the visibility of the annotation when it goes outside the axes area. If <code>True</code>, the annotation will only be drawn when the <em>xy</em> is inside the axes. If <code>False</code>, the annotation will always be drawn regardless of its position. The default is <code>None</code>, which behave as <code>True</code> only if <em>xycoords</em> is “data”.</p> <p>Additional kwargs are <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"30%\"> <col width=\"70%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_backgroundcolor\" title=\"matplotlib.text.Text.set_backgroundcolor\"><code>backgroundcolor</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>bbox</code></a></td> <td>FancyBboxPatch prop dict</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_box\" title=\"matplotlib.text.Text.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_on\" title=\"matplotlib.text.Text.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_path\" title=\"matplotlib.text.Text.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_color\" title=\"matplotlib.text.Text.set_color\"><code>color</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_family\" title=\"matplotlib.text.Text.set_family\"><code>family</code></a> or name or fontname or fontfamily</td> <td>[FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ | ‘monospace’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_fontproperties\" title=\"matplotlib.text.Text.set_fontproperties\"><code>fontproperties</code></a> or font_properties</td> <td>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_horizontalalignment\" title=\"matplotlib.text.Text.set_horizontalalignment\"><code>horizontalalignment</code></a> or ha</td> <td>[ ‘center’ | ‘right’ | ‘left’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_linespacing\" title=\"matplotlib.text.Text.set_linespacing\"><code>linespacing</code></a></td> <td>float (multiple of font size)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_multialignment\" title=\"matplotlib.text.Text.set_multialignment\"><code>multialignment</code></a></td> <td>[‘left’ | ‘right’ | ‘center’ ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>position</code></a></td> <td>(x,y)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation\" title=\"matplotlib.text.Text.set_rotation\"><code>rotation</code></a></td> <td>[ angle in degrees | ‘vertical’ | ‘horizontal’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation_mode\" title=\"matplotlib.text.Text.set_rotation_mode\"><code>rotation_mode</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_size\" title=\"matplotlib.text.Text.set_size\"><code>size</code></a> or fontsize</td> <td>[size in points | ‘xx-small’ | ‘x-small’ | ‘small’ | ‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_stretch\" title=\"matplotlib.text.Text.set_stretch\"><code>stretch</code></a> or fontstretch</td> <td>[a numeric value in range 0-1000 | ‘ultra-condensed’ | ‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_style\" title=\"matplotlib.text.Text.set_style\"><code>style</code></a> or fontstyle</td> <td>[ ‘normal’ | ‘italic’ | ‘oblique’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_text\" title=\"matplotlib.text.Text.set_text\"><code>text</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_usetex\" title=\"matplotlib.text.Text.set_usetex\"><code>usetex</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_variant\" title=\"matplotlib.text.Text.set_variant\"><code>variant</code></a> or fontvariant</td> <td>[ ‘normal’ | ‘small-caps’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_verticalalignment\" title=\"matplotlib.text.Text.set_verticalalignment\"><code>verticalalignment</code></a> or va or ma</td> <td>[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_weight\" title=\"matplotlib.text.Text.set_weight\"><code>weight</code></a> or fontweight</td> <td>[a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ | ‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_wrap\" title=\"matplotlib.text.Text.set_wrap\"><code>wrap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_x\" title=\"matplotlib.text.Text.set_x\"><code>x</code></a></td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_y\" title=\"matplotlib.text.Text.set_y\"><code>y</code></a></td> <td>float</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2.py\">Source code</a>)</p> <div class=\"figure\" id=\"id1\"> <img alt=\"../_images/annotation_demo2_00.png\" src=\"http://matplotlib.org/1.5.1/_images/annotation_demo2_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id2\"> <img alt=\"../_images/annotation_demo2_01.png\" src=\"http://matplotlib.org/1.5.1/_images/annotation_demo2_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_01.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.apply_aspect\"><code>apply_aspect(position=None)</code></dt> <dd>\n<p>Use <code>_aspect()</code> and <code>_adjustable()</code> to modify the axes box or the view limits.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.arrow\"><code>arrow(x, y, dx, dy, **kwargs)</code></dt> <dd>\n<p>Add an arrow to the axes.</p> <p>Call signature:</p> <pre data-language=\"python\">arrow(x, y, dx, dy, **kwargs)\n</pre> <p>Draws arrow on specified axis from (<em>x</em>, <em>y</em>) to (<em>x</em> + <em>dx</em>, <em>y</em> + <em>dy</em>). Uses FancyArrow patch to construct the arrow.</p> <p>The resulting arrow is affected by the axes aspect ratio and limits. This may produce an arrow whose head is not square with its stem. To create an arrow whose head is square with its stem, use <code>annotate()</code> for example:</p> <pre data-language=\"python\">ax.annotate(\"\", xy=(0.5, 0.5), xytext=(0, 0),\n    arrowprops=dict(arrowstyle=\"-&gt;\"))\n</pre> <p>Optional kwargs control the arrow construction and properties:</p> <dl class=\"docutils\"> <dt>Constructor arguments</dt> <dd>\n<dl class=\"first last docutils\"> <dt>\n<em>width</em>: float (default: 0.001)</dt> <dd>width of full arrow tail</dd> <dt>\n<em>length_includes_head</em>: [True | False] (default: False)</dt> <dd>True if head is to be counted in calculating the length.</dd> <dt>\n<em>head_width</em>: float or None (default: 3*width)</dt> <dd>total width of the full arrow head</dd> <dt>\n<em>head_length</em>: float or None (default: 1.5 * head_width)</dt> <dd>length of arrow head</dd> <dt>\n<em>shape</em>: [‘full’, ‘left’, ‘right’] (default: ‘full’)</dt> <dd>draw the left-half, right-half, or full arrow</dd> <dt>\n<em>overhang</em>: float (default: 0)</dt> <dd>fraction that the arrow is swept back (0 overhang means triangular shape). Can be negative or greater than one.</dd> <dt>\n<em>head_starts_at_zero</em>: [True | False] (default: False)</dt> <dd>if True, the head starts being drawn at coordinate 0 instead of ending at coordinate 0.</dd> </dl> </dd> </dl> <p>Other valid kwargs (inherited from <code>Patch</code>) are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/arrow_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/arrow_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/arrow_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/arrow_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/arrow_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/arrow_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.autoscale\"><code>autoscale(enable=True, axis='both', tight=None)</code></dt> <dd>\n<p>Autoscale the axis view to the data (toggle).</p> <p>Convenience method for simple axis view autoscaling. It turns autoscaling on or off, and then, if autoscaling for either axis is on, it performs the autoscaling on the specified axis or axes.</p> <dl class=\"docutils\"> <dt>\n<em>enable</em>: [True | False | None]</dt> <dd>True (default) turns autoscaling on, False turns it off. None leaves the autoscaling state unchanged.</dd> <dt>\n<em>axis</em>: [‘x’ | ‘y’ | ‘both’]</dt> <dd>which axis to operate on; default is ‘both’</dd> <dt>\n<em>tight</em>: [True | False | None]</dt> <dd>If True, set view limits to data limits; if False, let the locator and margins expand the view limits; if None, use tight scaling if the only artist is an image, otherwise treat <em>tight</em> as False. The <em>tight</em> setting is retained for future autoscaling until it is explicitly changed.</dd> </dl> <p>Returns None.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.autoscale_view\"><code>autoscale_view(tight=None, scalex=True, scaley=True)</code></dt> <dd>\n<p>Autoscale the view limits using the data limits. You can selectively autoscale only a single axis, e.g., the xaxis by setting <em>scaley</em> to <em>False</em>. The autoscaling preserves any axis direction reversal that has already been done.</p> <p>The data limits are not updated automatically when artist data are changed after the artist has been added to an Axes instance. In that case, use <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> prior to calling autoscale_view.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.axes.Axes.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.axhline\"><code>axhline(y=0, xmin=0, xmax=1, **kwargs)</code></dt> <dd>\n<p>Add a horizontal line across the axis.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>y</strong> : scalar, optional, default: 0</p> <blockquote> <div>\n<p>y position in data coordinates of the horizontal line.</p> </div>\n</blockquote> <p><strong>xmin</strong> : scalar, optional, default: 0</p> <blockquote> <div>\n<p>Should be between 0 and 1, 0 being the far left of the plot, 1 the far right of the plot.</p> </div>\n</blockquote> <p><strong>xmax</strong> : scalar, optional, default: 1</p> <blockquote> <div>\n<p>Should be between 0 and 1, 0 being the far left of the plot, 1 the far right of the plot.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\"><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a></p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>axhspan</code></dt> <dd>for example plot and source code</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>kwargs are passed to <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> and can be used to control the line properties.</p> <h4 class=\"rubric\">Examples</h4> <ul> <li>\n<p class=\"first\">draw a thick red hline at ‘y’ = 0 that spans the xrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axhline(linewidth=4, color='r')\n</pre> </li> <li>\n<p class=\"first\">draw a default hline at ‘y’ = 1 that spans the xrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axhline(y=1)\n</pre> </li> <li>\n<p class=\"first\">draw a default hline at ‘y’ = .5 that spans the middle half of the xrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axhline(y=.5, xmin=0.25, xmax=0.75)\n</pre> </li> </ul> <p>Valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties, with the exception of ‘transform’:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.axhspan\"><code>axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs)</code></dt> <dd>\n<p>Add a horizontal span (rectangle) across the axis.</p> <p>Call signature:</p> <pre data-language=\"python\">axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs)\n</pre> <p><em>y</em> coords are in data units and <em>x</em> coords are in axes (relative 0-1) units.</p> <p>Draw a horizontal span (rectangle) from <em>ymin</em> to <em>ymax</em>. With the default values of <em>xmin</em> = 0 and <em>xmax</em> = 1, this always spans the xrange, regardless of the xlim settings, even if you change them, e.g., with the <code>set_xlim()</code> command. That is, the horizontal extent is in axes coords: 0=left, 0.5=middle, 1.0=right but the <em>y</em> location is in data coordinates.</p> <p>Return value is a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>matplotlib.patches.Polygon</code></a> instance.</p> <p>Examples:</p> <ul> <li>\n<p class=\"first\">draw a gray rectangle from <em>y</em> = 0.25-0.75 that spans the horizontal extent of the axes:</p> <pre data-language=\"python\">&gt;&gt;&gt; axhspan(0.25, 0.75, facecolor='0.5', alpha=0.5)\n</pre> </li> </ul> <p>Valid kwargs are <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>Polygon</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/axhspan_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/axhspan_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/axhspan_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/axhspan_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/axhspan_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/axhspan_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.axis\"><code>axis(*v, **kwargs)</code></dt> <dd>\n<p>Set axis properties.</p> <p>Valid signatures:</p> <pre data-language=\"python\">xmin, xmax, ymin, ymax = axis()\nxmin, xmax, ymin, ymax = axis(list_arg)\nxmin, xmax, ymin, ymax = axis(string_arg)\nxmin, xmax, ymin, ymax = axis(**kwargs)\n</pre> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>v</strong> : list of float or {‘on’, ‘off’, ‘equal’, ‘tight’, ‘scaled’, ‘normal’, ‘auto’, ‘image’, ‘square’}</p> <blockquote> <div>\n<p>Optional positional argument</p> <p>Axis data limits set from a list; or a command relating to axes:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"9%\"> <col width=\"91%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Value</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘on’</td> <td>Toggle axis lines and labels on</td> </tr> <tr class=\"row-odd\">\n<td>‘off’</td> <td>Toggle axis lines and labels off</td> </tr> <tr class=\"row-even\">\n<td>‘equal’</td> <td>Equal scaling by changing limits</td> </tr> <tr class=\"row-odd\">\n<td>‘scaled’</td> <td>Equal scaling by changing box dimensions</td> </tr> <tr class=\"row-even\">\n<td>‘tight’</td> <td>Limits set such that all data is shown</td> </tr> <tr class=\"row-odd\">\n<td>‘auto’</td> <td>Automatic scaling, fill rectangle with data</td> </tr> <tr class=\"row-even\">\n<td>‘normal’</td> <td>Same as ‘auto’; deprecated</td> </tr> <tr class=\"row-odd\">\n<td>‘image’</td> <td>‘scaled’ with axis limits equal to data limits</td> </tr> <tr class=\"row-even\">\n<td>‘square’</td> <td>Square plot; similar to ‘scaled’, but initially forcing xmax-xmin = ymax-ymin</td> </tr> </tbody> </table> </div>\n</blockquote> </div>\n</blockquote> <p><strong>emit</strong> : bool, optional</p> <blockquote> <div>\n<p>Passed to set_{x,y}lim functions, if observers are notified of axis limit change</p> </div>\n</blockquote> <p><strong>xmin, ymin, xmax, ymax</strong> : float, optional</p> <blockquote> <div>\n<p>The axis limits to be set</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>xmin, xmax, ymin, ymax</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The axis limits</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.axvline\"><code>axvline(x=0, ymin=0, ymax=1, **kwargs)</code></dt> <dd>\n<p>Add a vertical line across the axes.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : scalar, optional, default: 0</p> <blockquote> <div>\n<p>x position in data coordinates of the vertical line.</p> </div>\n</blockquote> <p><strong>ymin</strong> : scalar, optional, default: 0</p> <blockquote> <div>\n<p>Should be between 0 and 1, 0 being the bottom of the plot, 1 the top of the plot.</p> </div>\n</blockquote> <p><strong>ymax</strong> : scalar, optional, default: 1</p> <blockquote> <div>\n<p>Should be between 0 and 1, 0 being the bottom of the plot, 1 the top of the plot.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\"><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a></p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>axhspan</code></dt> <dd>for example plot and source code</dd> </dl> </div> <h4 class=\"rubric\">Examples</h4> <ul> <li>\n<p class=\"first\">draw a thick red vline at <em>x</em> = 0 that spans the yrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axvline(linewidth=4, color='r')\n</pre> </li> <li>\n<p class=\"first\">draw a default vline at <em>x</em> = 1 that spans the yrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axvline(x=1)\n</pre> </li> <li>\n<p class=\"first\">draw a default vline at <em>x</em> = .5 that spans the middle half of the yrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axvline(x=.5, ymin=0.25, ymax=0.75)\n</pre> </li> </ul> <p>Valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties, with the exception of ‘transform’:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.axvspan\"><code>axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs)</code></dt> <dd>\n<p>Add a vertical span (rectangle) across the axes.</p> <p>Call signature:</p> <pre data-language=\"python\">axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs)\n</pre> <p><em>x</em> coords are in data units and <em>y</em> coords are in axes (relative 0-1) units.</p> <p>Draw a vertical span (rectangle) from <em>xmin</em> to <em>xmax</em>. With the default values of <em>ymin</em> = 0 and <em>ymax</em> = 1, this always spans the yrange, regardless of the ylim settings, even if you change them, e.g., with the <code>set_ylim()</code> command. That is, the vertical extent is in axes coords: 0=bottom, 0.5=middle, 1.0=top but the <em>y</em> location is in data coordinates.</p> <p>Return value is the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>matplotlib.patches.Polygon</code></a> instance.</p> <p>Examples:</p> <ul> <li>\n<p class=\"first\">draw a vertical green translucent rectangle from x=1.25 to 1.55 that spans the yrange of the axes:</p> <pre data-language=\"python\">&gt;&gt;&gt; axvspan(1.25, 1.55, facecolor='g', alpha=0.5)\n</pre> </li> </ul> <p>Valid kwargs are <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>Polygon</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>axhspan()</code></dt> <dd>for example plot and source code</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.bar\"><code>bar(left, height, width=0.8, bottom=None, **kwargs)</code></dt> <dd>\n<p>Make a bar plot.</p> <p>Make a bar plot with rectangles bounded by:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<code>left</code>, <code>left</code> + <code>width</code>, <code>bottom</code>, <code>bottom</code> + <code>height</code>\n</dt> <dd>(left, right, bottom and top edges)</dd> </dl> </div>\n</blockquote> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>left</strong> : sequence of scalars</p> <blockquote> <div>\n<p>the x coordinates of the left sides of the bars</p> </div>\n</blockquote> <p><strong>height</strong> : sequence of scalars</p> <blockquote> <div>\n<p>the heights of the bars</p> </div>\n</blockquote> <p><strong>width</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the width(s) of the bars default: 0.8</p> </div>\n</blockquote> <p><strong>bottom</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the y coordinate(s) of the bars default: None</p> </div>\n</blockquote> <p><strong>color</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the colors of the bar faces</p> </div>\n</blockquote> <p><strong>edgecolor</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the colors of the bar edges</p> </div>\n</blockquote> <p><strong>linewidth</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>width of bar edge(s). If None, use default linewidth; If 0, don’t draw edges. default: None</p> </div>\n</blockquote> <p><strong>tick_label</strong> : string or array-like, optional</p> <blockquote> <div>\n<p>the tick labels of the bars default: None</p> </div>\n</blockquote> <p><strong>xerr</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>if not None, will be used to generate errorbar(s) on the bar chart default: None</p> </div>\n</blockquote> <p><strong>yerr</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>if not None, will be used to generate errorbar(s) on the bar chart default: None</p> </div>\n</blockquote> <p><strong>ecolor</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>specifies the color of errorbar(s) default: None</p> </div>\n</blockquote> <p><strong>capsize</strong> : scalar, optional</p> <blockquote> <div>\n<p>determines the length in points of the error bar caps default: None, which will take the value from the <code>errorbar.capsize</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>error_kw</strong> : dict, optional</p> <blockquote> <div>\n<p>dictionary of kwargs to be passed to errorbar method. <em>ecolor</em> and <em>capsize</em> may be specified here rather than as independent kwargs.</p> </div>\n</blockquote> <p><strong>align</strong> : {‘edge’, ‘center’}, optional</p> <blockquote> <div>\n<p>If ‘edge’, aligns bars by their left edges (for vertical bars) and by their bottom edges (for horizontal bars). If ‘center’, interpret the <code>left</code> argument as the coordinates of the centers of the bars. To align on the align bars on the right edge pass a negative <code>width</code>.</p> </div>\n</blockquote> <p><strong>orientation</strong> : {‘vertical’, ‘horizontal’}, optional</p> <blockquote> <div>\n<p>The orientation of the bars.</p> </div>\n</blockquote> <p><strong>log</strong> : boolean, optional</p> <blockquote> <div>\n<p>If true, sets the axis to be log scale. default: False</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>bars</strong> : matplotlib.container.BarContainer</p> <blockquote class=\"last\"> <div>\n<p>Container with all of the bars + errorbars</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>barh</code></dt> <dd>Plot a horizontal bar plot.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘height’, ‘color’, ‘ecolor’, ‘edgecolor’, ‘bottom’, ‘tick_label’, ‘width’, ‘yerr’, ‘xerr’, ‘linewidth’, ‘left’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p><strong>Example:</strong> A stacked bar chart.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/bar_stacked.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/bar_stacked.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/bar_stacked.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/bar_stacked.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/bar_stacked.png\" src=\"http://matplotlib.org/1.5.1/_images/bar_stacked.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.barbs\"><code>barbs(*args, **kw)</code></dt> <dd>\n<p>Plot a 2-D field of barbs.</p> <p>Call signatures:</p> <pre data-language=\"python\">barb(U, V, **kw)\nbarb(U, V, C, **kw)\nbarb(X, Y, U, V, **kw)\nbarb(X, Y, U, V, C, **kw)\n</pre> <p>Arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>X</em>, <em>Y</em>:</dt> <dd>The x and y coordinates of the barb locations (default is head of barb; see <em>pivot</em> kwarg)</dd> <dt>\n<em>U</em>, <em>V</em>:</dt> <dd>Give the x and y components of the barb shaft</dd> <dt>\n<em>C</em>:</dt> <dd>An optional array used to map colors to the barbs</dd> </dl> </div>\n</blockquote> <p>All arguments may be 1-D or 2-D arrays or sequences. If <em>X</em> and <em>Y</em> are absent, they will be generated as a uniform grid. If <em>U</em> and <em>V</em> are 2-D arrays but <em>X</em> and <em>Y</em> are 1-D, and if <code>len(X)</code> and <code>len(Y)</code> match the column and row dimensions of <em>U</em>, then <em>X</em> and <em>Y</em> will be expanded with <code>numpy.meshgrid()</code>.</p> <p><em>U</em>, <em>V</em>, <em>C</em> may be masked arrays, but masked <em>X</em>, <em>Y</em> are not supported at present.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>length</em>:</dt> <dd>Length of the barb in points; the other parts of the barb are scaled against this. Default is 9</dd> <dt>\n<em>pivot</em>: [ ‘tip’ | ‘middle’ ]</dt> <dd>The part of the arrow that is at the grid point; the arrow rotates about this point, hence the name <em>pivot</em>. Default is ‘tip’</dd> <dt>\n<em>barbcolor</em>: [ color | color sequence ]</dt> <dd>Specifies the color all parts of the barb except any flags. This parameter is analagous to the <em>edgecolor</em> parameter for polygons, which can be used instead. However this parameter will override facecolor.</dd> <dt>\n<em>flagcolor</em>: [ color | color sequence ]</dt> <dd>Specifies the color of any flags on the barb. This parameter is analagous to the <em>facecolor</em> parameter for polygons, which can be used instead. However this parameter will override facecolor. If this is not set (and <em>C</em> has not either) then <em>flagcolor</em> will be set to match <em>barbcolor</em> so that the barb has a uniform color. If <em>C</em> has been set, <em>flagcolor</em> has no effect.</dd> <dt>\n<em>sizes</em>:</dt> <dd>\n<p class=\"first\">A dictionary of coefficients specifying the ratio of a given feature to the length of the barb. Only those values one wishes to override need to be included. These features include:</p> <blockquote class=\"last\"> <div>\n<ul class=\"simple\"> <li>‘spacing’ - space between features (flags, full/half barbs)</li> <li>‘height’ - height (distance from shaft to top) of a flag or full barb</li> <li>‘width’ - width of a flag, twice the width of a full barb</li> <li>‘emptybarb’ - radius of the circle used for low magnitudes</li> </ul> </div>\n</blockquote> </dd> <dt>\n<em>fill_empty</em>:</dt> <dd>A flag on whether the empty barbs (circles) that are drawn should be filled with the flag color. If they are not filled, they will be drawn such that no color is applied to the center. Default is False</dd> <dt>\n<em>rounding</em>:</dt> <dd>A flag to indicate whether the vector magnitude should be rounded when allocating barb components. If True, the magnitude is rounded to the nearest multiple of the half-barb increment. If False, the magnitude is simply truncated to the next lowest multiple. Default is True</dd> <dt>\n<em>barb_increments</em>:</dt> <dd>\n<p class=\"first\">A dictionary of increments specifying values to associate with different parts of the barb. Only those values one wishes to override need to be included.</p> <blockquote class=\"last\"> <div>\n<ul class=\"simple\"> <li>‘half’ - half barbs (Default is 5)</li> <li>‘full’ - full barbs (Default is 10)</li> <li>‘flag’ - flags (default is 50)</li> </ul> </div>\n</blockquote> </dd> <dt>\n<em>flip_barb</em>:</dt> <dd>Either a single boolean flag or an array of booleans. Single boolean indicates whether the lines and flags should point opposite to normal for all barbs. An array (which should be the same size as the other data arrays) indicates whether to flip for each individual barb. Normal behavior is for the barbs and lines to point right (comes from wind barbs having these features point towards low pressure in the Northern Hemisphere.) Default is False</dd> </dl> </div>\n</blockquote> <p>Barbs are traditionally used in meteorology as a way to plot the speed and direction of wind observations, but can technically be used to plot any two dimensional vector quantity. As opposed to arrows, which give vector magnitude by the length of the arrow, the barbs give more quantitative information about the vector magnitude by putting slanted lines or a triangle for various increments in magnitude, as show schematically below:</p> <pre data-language=\"python\">:     /\\    \\\n:    /  \\    \\\n:   /    \\    \\    \\\n:  /      \\    \\    \\\n: ------------------------------\n</pre> <p>The largest increment is given by a triangle (or “flag”). After those come full lines (barbs). The smallest increment is a half line. There is only, of course, ever at most 1 half line. If the magnitude is small and only needs a single half-line and no full lines or triangles, the half-line is offset from the end of the barb so that it can be easily distinguished from barbs with a single full line. The magnitude for the barb shown above would nominally be 65, using the standard increments of 50, 10, and 5.</p> <p>linewidths and edgecolors can be used to customize the barb. Additional <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id3\"> <img alt=\"../_images/barb_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/barb_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id4\"> <img alt=\"../_images/barb_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/barb_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_01.pdf\">pdf</a>)</span></p> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.barh\"><code>barh(bottom, width, height=0.8, left=None, **kwargs)</code></dt> <dd>\n<p>Make a horizontal bar plot.</p> <p>Make a horizontal bar plot with rectangles bounded by:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<code>left</code>, <code>left</code> + <code>width</code>, <code>bottom</code>, <code>bottom</code> + <code>height</code>\n</dt> <dd>(left, right, bottom and top edges)</dd> </dl> </div>\n</blockquote> <p><code>bottom</code>, <code>width</code>, <code>height</code>, and <code>left</code> can be either scalars or sequences</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>bottom</strong> : scalar or array-like</p> <blockquote> <div>\n<p>the y coordinate(s) of the bars</p> </div>\n</blockquote> <p><strong>width</strong> : scalar or array-like</p> <blockquote> <div>\n<p>the width(s) of the bars</p> </div>\n</blockquote> <p><strong>height</strong> : sequence of scalars, optional, default: 0.8</p> <blockquote> <div>\n<p>the heights of the bars</p> </div>\n</blockquote> <p><strong>left</strong> : sequence of scalars</p> <blockquote> <div>\n<p>the x coordinates of the left sides of the bars</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>matplotlib.patches.Rectangle</code></a> instances.</p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>color</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the colors of the bars</p> </div>\n</blockquote> <p><strong>edgecolor</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the colors of the bar edges</p> </div>\n</blockquote> <p><strong>linewidth</strong> : scalar or array-like, optional, default: None</p> <blockquote> <div>\n<p>width of bar edge(s). If None, use default linewidth; If 0, don’t draw edges.</p> </div>\n</blockquote> <p><strong>tick_label</strong> : string or array-like, optional, default: None</p> <blockquote> <div>\n<p>the tick labels of the bars</p> </div>\n</blockquote> <p><strong>xerr</strong> : scalar or array-like, optional, default: None</p> <blockquote> <div>\n<p>if not None, will be used to generate errorbar(s) on the bar chart</p> </div>\n</blockquote> <p><strong>yerr</strong> : scalar or array-like, optional, default: None</p> <blockquote> <div>\n<p>if not None, will be used to generate errorbar(s) on the bar chart</p> </div>\n</blockquote> <p><strong>ecolor</strong> : scalar or array-like, optional, default: None</p> <blockquote> <div>\n<p>specifies the color of errorbar(s)</p> </div>\n</blockquote> <p><strong>capsize</strong> : scalar, optional</p> <blockquote> <div>\n<p>determines the length in points of the error bar caps default: None, which will take the value from the <code>errorbar.capsize</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>error_kw :</strong></p> <blockquote> <div>\n<p>dictionary of kwargs to be passed to errorbar method. <code>ecolor</code> and <code>capsize</code> may be specified here rather than as independent kwargs.</p> </div>\n</blockquote> <p><strong>align</strong> : [‘edge’ | ‘center’], optional, default: ‘edge’</p> <blockquote> <div>\n<p>If <code>edge</code>, aligns bars by their left edges (for vertical bars) and by their bottom edges (for horizontal bars). If <code>center</code>, interpret the <code>left</code> argument as the coordinates of the centers of the bars.</p> </div>\n</blockquote> <p><strong>log</strong> : boolean, optional, default: False</p> <blockquote class=\"last\"> <div>\n<p>If true, sets the axis to be log scale</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>bar</code></dt> <dd>Plot a vertical bar plot.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>The optional arguments <code>color</code>, <code>edgecolor</code>, <code>linewidth</code>, <code>xerr</code>, and <code>yerr</code> can be either scalars or sequences of length equal to the number of bars. This enables you to use bar as the basis for stacked bar charts, or candlestick plots. Detail: <code>xerr</code> and <code>yerr</code> are passed directly to <code>errorbar()</code>, so they can also have shape 2xN for independent specification of lower and upper errors.</p> <p>Other optional kwargs:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.boxplot\"><code>boxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_xticks=True)</code></dt> <dd>\n<p>Make a box and whisker plot.</p> <p>Call signature:</p> <pre data-language=\"python\">boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n        positions=None, widths=None, patch_artist=False,\n        bootstrap=None, usermedians=None, conf_intervals=None,\n        meanline=False, showmeans=False, showcaps=True,\n        showbox=True, showfliers=True, boxprops=None, labels=None,\n        flierprops=None, medianprops=None, meanprops=None,\n        capprops=None, whiskerprops=None, manage_xticks=True):\n</pre> <p>Make a box and whisker plot for each column of <em>x</em> or each vector in sequence <em>x</em>. The box extends from the lower to upper quartile values of the data, with a line at the median. The whiskers extend from the box to show the range of the data. Flier points are those past the end of the whiskers.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : Array or a sequence of vectors.</p> <blockquote> <div>\n<p>The input data.</p> </div>\n</blockquote> <p><strong>notch</strong> : bool, default = False</p> <blockquote> <div>\n<p>If False, produces a rectangular box plot. If True, will produce a notched box plot</p> </div>\n</blockquote> <p><strong>sym</strong> : str or None, default = None</p> <blockquote> <div>\n<p>The default symbol for flier points. Enter an empty string (‘’) if you don’t want to show fliers. If <code>None</code>, then the fliers default to ‘b+’ If you want more control use the flierprops kwarg.</p> </div>\n</blockquote> <p><strong>vert</strong> : bool, default = True</p> <blockquote> <div>\n<p>If True (default), makes the boxes vertical. If False, makes horizontal boxes.</p> </div>\n</blockquote> <p><strong>whis</strong> : float, sequence (default = 1.5) or string</p> <blockquote> <div>\n<p>As a float, determines the reach of the whiskers past the first and third quartiles (e.g., Q3 + whis*IQR, IQR = interquartile range, Q3-Q1). Beyond the whiskers, data are considered outliers and are plotted as individual points. Set this to an unreasonably high value to force the whiskers to show the min and max values. Alternatively, set this to an ascending sequence of percentile (e.g., [5, 95]) to set the whiskers at specific percentiles of the data. Finally, <em>whis</em> can be the string ‘range’ to force the whiskers to the min and max of the data. In the edge case that the 25th and 75th percentiles are equivalent, <em>whis</em> will be automatically set to ‘range’.</p> </div>\n</blockquote> <p><strong>bootstrap</strong> : None (default) or integer</p> <blockquote> <div>\n<p>Specifies whether to bootstrap the confidence intervals around the median for notched boxplots. If bootstrap==None, no bootstrapping is performed, and notches are calculated using a Gaussian-based asymptotic approximation (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and Kendall and Stuart, 1967). Otherwise, bootstrap specifies the number of times to bootstrap the median to determine it’s 95% confidence intervals. Values between 1000 and 10000 are recommended.</p> </div>\n</blockquote> <p><strong>usermedians</strong> : array-like or None (default)</p> <blockquote> <div>\n<p>An array or sequence whose first dimension (or length) is compatible with <em>x</em>. This overrides the medians computed by matplotlib for each element of <em>usermedians</em> that is not None. When an element of <em>usermedians</em> == None, the median will be computed by matplotlib as normal.</p> </div>\n</blockquote> <p><strong>conf_intervals</strong> : array-like or None (default)</p> <blockquote> <div>\n<p>Array or sequence whose first dimension (or length) is compatible with <em>x</em> and whose second dimension is 2. When the current element of <em>conf_intervals</em> is not None, the notch locations computed by matplotlib are overridden (assuming notch is True). When an element of <em>conf_intervals</em> is None, boxplot compute notches the method specified by the other kwargs (e.g., <em>bootstrap</em>).</p> </div>\n</blockquote> <p><strong>positions</strong> : array-like, default = [1, 2, ..., n]</p> <blockquote> <div>\n<p>Sets the positions of the boxes. The ticks and limits are automatically set to match the positions.</p> </div>\n</blockquote> <p><strong>widths</strong> : array-like, default = 0.5</p> <blockquote> <div>\n<p>Either a scalar or a vector and sets the width of each box. The default is 0.5, or <code>0.15*(distance between extreme positions)</code> if that is smaller.</p> </div>\n</blockquote> <p><strong>labels</strong> : sequence or None (default)</p> <blockquote> <div>\n<p>Labels for each dataset. Length must be compatible with dimensions of <em>x</em></p> </div>\n</blockquote> <p><strong>patch_artist</strong> : bool, default = False</p> <blockquote> <div>\n<p>If False produces boxes with the Line2D artist If True produces boxes with the Patch artist</p> </div>\n</blockquote> <p><strong>showmeans</strong> : bool, default = False</p> <blockquote> <div>\n<p>If True, will toggle one the rendering of the means</p> </div>\n</blockquote> <p><strong>showcaps</strong> : bool, default = True</p> <blockquote> <div>\n<p>If True, will toggle one the rendering of the caps</p> </div>\n</blockquote> <p><strong>showbox</strong> : bool, default = True</p> <blockquote> <div>\n<p>If True, will toggle one the rendering of box</p> </div>\n</blockquote> <p><strong>showfliers</strong> : bool, default = True</p> <blockquote> <div>\n<p>If True, will toggle one the rendering of the fliers</p> </div>\n</blockquote> <p><strong>boxprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the boxes</p> </div>\n</blockquote> <p><strong>whiskerprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the whiskers</p> </div>\n</blockquote> <p><strong>capprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the caps</p> </div>\n</blockquote> <p><strong>flierprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the fliers</p> </div>\n</blockquote> <p><strong>medianprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the medians</p> </div>\n</blockquote> <p><strong>meanprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the means</p> </div>\n</blockquote> <p><strong>meanline</strong> : bool, default = False</p> <blockquote> <div>\n<p>If True (and <em>showmeans</em> is True), will try to render the mean as a line spanning the full width of the box according to <em>meanprops</em>. Not recommended if <em>shownotches</em> is also True. Otherwise, means will be shown as points.</p> </div>\n</blockquote> <p><strong>manage_xticks</strong> : bool, default = True</p> <blockquote> <div>\n<p>If the function should adjust the xlim and xtick locations.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>result</strong> : dict</p> <blockquote class=\"last\"> <div>\n<p>A dictionary mapping each component of the boxplot to a list of the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a> instances created. That dictionary has the following keys (assuming vertical boxplots):</p> <ul class=\"simple\"> <li>boxes: the main body of the boxplot showing the quartiles and the median’s confidence intervals if enabled.</li> <li>medians: horizonal lines at the median of each box.</li> <li>whiskers: the vertical lines extending to the most extreme, n-outlier data points.</li> <li>caps: the horizontal lines at the ends of the whiskers.</li> <li>fliers: points representing data that extend beyond the whiskers (outliers).</li> <li>means: points or lines representing the means.</li> </ul> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_00_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_00_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_00_00.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/boxplot_demo_00_00.png\" src=\"http://matplotlib.org/1.5.1/_images/boxplot_demo_00_00.png\"> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_01_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_01_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_01_00.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/boxplot_demo_01_00.png\" src=\"http://matplotlib.org/1.5.1/_images/boxplot_demo_01_00.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.broken_barh\"><code>broken_barh(xranges, yrange, **kwargs)</code></dt> <dd>\n<p>Plot horizontal bars.</p> <p>Call signature:</p> <pre data-language=\"python\">broken_barh(self, xranges, yrange, **kwargs)\n</pre> <p>A collection of horizontal bars spanning <em>yrange</em> with a sequence of <em>xranges</em>.</p> <p>Required arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Argument</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>xranges</em></td> <td>sequence of (<em>xmin</em>, <em>xwidth</em>)</td> </tr> <tr class=\"row-odd\">\n<td><em>yrange</em></td> <td>sequence of (<em>ymin</em>, <em>ywidth</em>)</td> </tr> </tbody> </table> </div>\n</blockquote> <p>kwargs are <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.BrokenBarHCollection\" title=\"matplotlib.collections.BrokenBarHCollection\"><code>matplotlib.collections.BrokenBarHCollection</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>these can either be a single argument, i.e.,:</p> <pre data-language=\"python\">facecolors = 'black'\n</pre> <p>or a sequence of arguments for the various bars, i.e.,:</p> <pre data-language=\"python\">facecolors = ('black', 'red', 'green')\n</pre> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/broken_barh.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/broken_barh.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/broken_barh.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/broken_barh.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/broken_barh.png\" src=\"http://matplotlib.org/1.5.1/_images/broken_barh.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.bxp\"><code>bxp(bxpstats, positions=None, widths=None, vert=True, patch_artist=False, shownotches=False, showmeans=False, showcaps=True, showbox=True, showfliers=True, boxprops=None, whiskerprops=None, flierprops=None, medianprops=None, capprops=None, meanprops=None, meanline=False, manage_xticks=True)</code></dt> <dd>\n<p>Drawing function for box and whisker plots.</p> <p>Call signature:</p> <pre data-language=\"python\">bxp(self, bxpstats, positions=None, widths=None, vert=True,\n    patch_artist=False, shownotches=False, showmeans=False,\n    showcaps=True, showbox=True, showfliers=True,\n    boxprops=None, whiskerprops=None, flierprops=None,\n    medianprops=None, capprops=None, meanprops=None,\n    meanline=False, manage_xticks=True):\n</pre> <p>Make a box and whisker plot for each column of <em>x</em> or each vector in sequence <em>x</em>. The box extends from the lower to upper quartile values of the data, with a line at the median. The whiskers extend from the box to show the range of the data. Flier points are those past the end of the whiskers.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>bxpstats</strong> : list of dicts</p> <blockquote> <div>\n<p>A list of dictionaries containing stats for each boxplot. Required keys are:</p> <ul class=\"simple\"> <li>\n<code>med</code>: The median (scalar float).</li> <li>\n<code>q1</code>: The first quartile (25th percentile) (scalar float).</li> <li>\n<code>q3</code>: The third quartile (75th percentile) (scalar float).</li> <li>\n<code>whislo</code>: Lower bound of the lower whisker (scalar float).</li> <li>\n<code>whishi</code>: Upper bound of the upper whisker (scalar float).</li> </ul> <p>Optional keys are:</p> <ul class=\"simple\"> <li>\n<code>mean</code>: The mean (scalar float). Needed if <code>showmeans=True</code>.</li> <li>\n<code>fliers</code>: Data beyond the whiskers (sequence of floats). Needed if <code>showfliers=True</code>.</li> <li>\n<code>cilo</code> &amp; <code>cihi</code>: Lower and upper confidence intervals about the median. Needed if <code>shownotches=True</code>.</li> <li>\n<code>label</code>: Name of the dataset (string). If available, this will be used a tick label for the boxplot</li> </ul> </div>\n</blockquote> <p><strong>positions</strong> : array-like, default = [1, 2, ..., n]</p> <blockquote> <div>\n<p>Sets the positions of the boxes. The ticks and limits are automatically set to match the positions.</p> </div>\n</blockquote> <p><strong>widths</strong> : array-like, default = 0.5</p> <blockquote> <div>\n<p>Either a scalar or a vector and sets the width of each box. The default is 0.5, or <code>0.15*(distance between extreme\npositions)</code> if that is smaller.</p> </div>\n</blockquote> <p><strong>vert</strong> : bool, default = False</p> <blockquote> <div>\n<p>If <code>True</code> (default), makes the boxes vertical. If <code>False</code>, makes horizontal boxes.</p> </div>\n</blockquote> <p><strong>patch_artist</strong> : bool, default = False</p> <blockquote> <div>\n<p>If <code>False</code> produces boxes with the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> artist. If <code>True</code> produces boxes with the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> artist.</p> </div>\n</blockquote> <p><strong>shownotches</strong> : bool, default = False</p> <blockquote> <div>\n<p>If <code>False</code> (default), produces a rectangular box plot. If <code>True</code>, will produce a notched box plot</p> </div>\n</blockquote> <p><strong>showmeans</strong> : bool, default = False</p> <blockquote> <div>\n<p>If <code>True</code>, will toggle one the rendering of the means</p> </div>\n</blockquote> <p><strong>showcaps</strong> : bool, default = True</p> <blockquote> <div>\n<p>If <code>True</code>, will toggle one the rendering of the caps</p> </div>\n</blockquote> <p><strong>showbox</strong> : bool, default = True</p> <blockquote> <div>\n<p>If <code>True</code>, will toggle one the rendering of box</p> </div>\n</blockquote> <p><strong>showfliers</strong> : bool, default = True</p> <blockquote> <div>\n<p>If <code>True</code>, will toggle one the rendering of the fliers</p> </div>\n</blockquote> <p><strong>boxprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the boxes</p> </div>\n</blockquote> <p><strong>whiskerprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the whiskers</p> </div>\n</blockquote> <p><strong>capprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the caps</p> </div>\n</blockquote> <p><strong>flierprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided will set the plotting style of the fliers</p> </div>\n</blockquote> <p><strong>medianprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the medians</p> </div>\n</blockquote> <p><strong>meanprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the means</p> </div>\n</blockquote> <p><strong>meanline</strong> : bool, default = False</p> <blockquote> <div>\n<p>If <code>True</code> (and <em>showmeans</em> is <code>True</code>), will try to render the mean as a line spanning the full width of the box according to <em>meanprops</em>. Not recommended if <em>shownotches</em> is also True. Otherwise, means will be shown as points.</p> </div>\n</blockquote> <p><strong>manage_xticks</strong> : bool, default = True</p> <blockquote> <div>\n<p>If the function should adjust the xlim and xtick locations.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>result</strong> : dict</p> <blockquote class=\"last\"> <div>\n<p>A dictionary mapping each component of the boxplot to a list of the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a> instances created. That dictionary has the following keys (assuming vertical boxplots):</p> <ul class=\"simple\"> <li>\n<code>boxes</code>: the main body of the boxplot showing the quartiles and the median’s confidence intervals if enabled.</li> <li>\n<code>medians</code>: horizonal lines at the median of each box.</li> <li>\n<code>whiskers</code>: the vertical lines extending to the most extreme, n-outlier data points.</li> <li>\n<code>caps</code>: the horizontal lines at the ends of the whiskers.</li> <li>\n<code>fliers</code>: points representing data that extend beyond the whiskers (fliers).</li> <li>\n<code>means</code>: points or lines representing the means.</li> </ul> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/bxp_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/bxp_demo_00_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/bxp_demo_00_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/bxp_demo_00_00.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/bxp_demo_00_00.png\" src=\"http://matplotlib.org/1.5.1/_images/bxp_demo_00_00.png\"> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/bxp_demo_01_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/bxp_demo_01_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/bxp_demo_01_00.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/bxp_demo_01_00.png\" src=\"http://matplotlib.org/1.5.1/_images/bxp_demo_01_00.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.can_pan\"><code>can_pan()</code></dt> <dd>\n<p>Return <em>True</em> if this axes supports any pan/zoom button functionality.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.can_zoom\"><code>can_zoom()</code></dt> <dd>\n<p>Return <em>True</em> if this axes supports the zoom box button functionality.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.cla\"><code>cla()</code></dt> <dd>\n<p>Clear the current axes.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.clabel\"><code>clabel(CS, *args, **kwargs)</code></dt> <dd>\n<p>Label a contour plot.</p> <p>Call signature:</p> <pre data-language=\"python\">clabel(cs, **kwargs)\n</pre> <p>Adds labels to line contours in <em>cs</em>, where <em>cs</em> is a <code>ContourSet</code> object returned by contour.</p> <pre data-language=\"python\">clabel(cs, v, **kwargs)\n</pre> <p>only labels contours listed in <em>v</em>.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>fontsize</em>:</dt> <dd>size in points or relative size e.g., ‘smaller’, ‘x-large’</dd> <dt>\n<em>colors</em>:</dt> <dd>\n<ul class=\"first last simple\"> <li>if <em>None</em>, the color of each label matches the color of the corresponding contour</li> <li>if one string color, e.g., <em>colors</em> = ‘r’ or <em>colors</em> = ‘red’, all labels will be plotted in this color</li> <li>if a tuple of matplotlib color args (string, float, rgb, etc), different labels will be plotted in different colors in the order specified</li> </ul> </dd> <dt>\n<em>inline</em>:</dt> <dd>controls whether the underlying contour is removed or not. Default is <em>True</em>.</dd> <dt>\n<em>inline_spacing</em>:</dt> <dd>space in pixels to leave on each side of label when placing inline. Defaults to 5. This spacing will be exact for labels at locations where the contour is straight, less so for labels on curved contours.</dd> <dt>\n<em>fmt</em>:</dt> <dd>a format string for the label. Default is ‘%1.3f’ Alternatively, this can be a dictionary matching contour levels with arbitrary strings to use for each contour level (i.e., fmt[level]=string), or it can be any callable, such as a <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>Formatter</code></a> instance, that returns a string when called with a numeric contour level.</dd> <dt>\n<em>manual</em>:</dt> <dd>\n<p class=\"first\">if <em>True</em>, contour labels will be placed manually using mouse clicks. Click the first button near a contour to add a label, click the second button (or potentially both mouse buttons at once) to finish adding labels. The third button can be used to remove the last label added, but only if labels are not inline. Alternatively, the keyboard can be used to select label locations (enter to end label placement, delete or backspace act like the third mouse button, and any other key will select a label location).</p> <p class=\"last\"><em>manual</em> can be an iterable object of x,y tuples. Contour labels will be created as if mouse is clicked at each x,y positions.</p> </dd> <dt>\n<em>rightside_up</em>:</dt> <dd>if <em>True</em> (default), label rotations will always be plus or minus 90 degrees from level.</dd> <dt>\n<em>use_clabeltext</em>:</dt> <dd>if <em>True</em> (default is False), ClabelText class (instead of matplotlib.Text) is used to create labels. ClabelText recalculates rotation angles of texts during the drawing time, therefore this can be used if aspect of the axes changes.</dd> </dl> </div>\n</blockquote> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id5\"> <img alt=\"../_images/contour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id6\"> <img alt=\"../_images/contour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id7\"> <img alt=\"../_images/contour_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id8\"> <img alt=\"../_images/contour_demo_03.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_03.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id9\"> <img alt=\"../_images/contour_demo_04.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_04.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id10\"> <img alt=\"../_images/contour_demo_05.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_05.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.clear\"><code>clear()</code></dt> <dd>\n<p>clear the axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.cohere\"><code>cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend=<function detrend_none>, window=<function window_hanning>, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, **kwargs)</function></function></code></dt> <dd>\n<p>Plot the coherence between <em>x</em> and <em>y</em>.</p> <p>Call signature:</p> <pre data-language=\"python\">cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend = mlab.detrend_none,\n       window = mlab.window_hanning, noverlap=0, pad_to=None,\n       sides='default', scale_by_freq=None, **kwargs)\n</pre> <p>Plot the coherence between <em>x</em> and <em>y</em>. Coherence is the normalized cross spectral density:</p> <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-58775d54bf.png\" class=\"center\"><p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between blocks. The default value is 0 (no overlap).</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> </dl> </dd> </dl> <p>The return value is a tuple (<em>Cxy</em>, <em>f</em>), where <em>f</em> are the frequencies of the coherence vector.</p> <p>kwargs are applied to the lines.</p> <p>References:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>Bendat &amp; Piersol – Random Data: Analysis and Measurement Procedures, John Wiley &amp; Sons (1986)</li> </ul> </div>\n</blockquote> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties of the coherence plot:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/cohere_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/cohere_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/cohere_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/cohere_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/cohere_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/cohere_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occured in the axes.</p> <p>Returns <em>True</em> / <em>False</em>, {}</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.contains_point\"><code>contains_point(point)</code></dt> <dd>\n<p>Returns <em>True</em> if the point (tuple of x,y) is inside the axes (the area defined by the its patch). A pixel coordinate is required.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.contour\"><code>contour(*args, **kwargs)</code></dt> <dd>\n<p>Plot contours.</p> <p><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour()</code></a> and <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.</p> <p><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> differs from the MATLAB version in that it does not draw the polygon edges. To draw edges, add line contours with calls to <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour()</code></a>.</p> <p>Call signatures:</p> <pre data-language=\"python\">contour(Z)\n</pre> <p>make a contour plot of an array <em>Z</em>. The level values are chosen automatically.</p> <pre data-language=\"python\">contour(X,Y,Z)\n</pre> <p><em>X</em>, <em>Y</em> specify the (x, y) coordinates of the surface</p> <pre data-language=\"python\">contour(Z,N)\ncontour(X,Y,Z,N)\n</pre> <p>contour up to <em>N</em> automatically-chosen levels.</p> <pre data-language=\"python\">contour(Z,V)\ncontour(X,Y,Z,V)\n</pre> <p>draw contour lines at the values specified in sequence <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">contourf(..., V)\n</pre> <p>fill the <code>len(V)-1</code> regions between the values in <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">contour(Z, **kwargs)\n</pre> <p>Use keyword args to control colors, linewidth, origin, cmap ... see below for more details.</p> <p><em>X</em> and <em>Y</em> must both be 2-D with the same shape as <em>Z</em>, or they must both be 1-D such that <code>len(X)</code> is the number of columns in <em>Z</em> and <code>len(Y)</code> is the number of rows in <em>Z</em>.</p> <p><code>C = contour(...)</code> returns a <code>QuadContourSet</code> object.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>corner_mask</em>: [ <em>True</em> | <em>False</em> | ‘legacy’ ]</dt> <dd>\n<p class=\"first\">Enable/disable corner masking, which only has an effect if <em>Z</em> is a masked array. If <em>False</em>, any quad touching a masked point is masked out. If <em>True</em>, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual. If ‘legacy’, the old contouring algorithm is used, which is equivalent to <em>False</em> and is deprecated, only remaining whilst the new algorithm is tested fully.</p> <p class=\"last\">If not specified, the default is taken from rcParams[‘contour.corner_mask’], which is True unless it has been modified.</p> </dd> <dt>\n<em>colors</em>: [ <em>None</em> | string | (mpl_colors) ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the colormap specified by cmap will be used.</p> <p>If a string, like ‘r’ or ‘red’, all levels will be plotted in this color.</p> <p class=\"last\">If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</p> </dd> <dt>\n<em>alpha</em>: float</dt> <dd>The alpha blending value</dd> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A cm <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or <em>None</em>. If <em>cmap</em> is <em>None</em> and <em>colors</em> is <em>None</em>, a default Colormap is used.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance for scaling data values to colors. If <em>norm</em> is <em>None</em> and <em>colors</em> is <em>None</em>, the default linear scaling is used.</dd> <dt>\n<em>vmin</em>, <em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>If not <em>None</em>, either or both of these values will be supplied to the <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance, overriding the default color scaling based on <em>levels</em>.</dd> <dt>\n<em>levels</em>: [level0, level1, ..., leveln]</dt> <dd>A list of floating point numbers indicating the level curves to draw, in increasing order; e.g., to draw just the zero contour pass <code>levels=[0]</code>\n</dd> <dt>\n<em>origin</em>: [ <em>None</em> | ‘upper’ | ‘lower’ | ‘image’ ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the first value of <em>Z</em> will correspond to the lower left corner, location (0,0). If ‘image’, the rc value for <code>image.origin</code> will be used.</p> <p class=\"last\">This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </dd> </dl> <p><em>extent</em>: [ <em>None</em> | (x0,x1,y0,y1) ]</p> <blockquote> <div>\n<p>If <em>origin</em> is not <em>None</em>, then <em>extent</em> is interpreted as in <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow()</code></a>: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If <em>origin</em> is <em>None</em>, then (<em>x0</em>, <em>y0</em>) is the position of Z[0,0], and (<em>x1</em>, <em>y1</em>) is the position of Z[-1,-1].</p> <p>This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>locator</em>: [ <em>None</em> | ticker.Locator subclass ]</dt> <dd>If <em>locator</em> is <em>None</em>, the default <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> is used. The locator is used to determine the contour levels if they are not given explicitly via the <em>V</em> argument.</dd> <dt>\n<em>extend</em>: [ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ]</dt> <dd>Unless this is ‘neither’, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range, but can be set via <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_under\" title=\"matplotlib.colors.Colormap.set_under\"><code>matplotlib.colors.Colormap.set_under()</code></a> and <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_over\" title=\"matplotlib.colors.Colormap.set_over\"><code>matplotlib.colors.Colormap.set_over()</code></a> methods.</dd> <dt>\n<em>xunits</em>, <em>yunits</em>: [ <em>None</em> | registered units ]</dt> <dd>Override axis units by specifying an instance of a <a class=\"reference internal\" href=\"units_api#matplotlib.units.ConversionInterface\" title=\"matplotlib.units.ConversionInterface\"><code>matplotlib.units.ConversionInterface</code></a>.</dd> <dt>\n<em>antialiased</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>enable antialiasing, overriding the defaults. For filled contours, the default is <em>True</em>. For line contours, it is taken from rcParams[‘lines.antialiased’].</dd> <dt>\n<em>nchunk</em>: [ 0 | integer ]</dt> <dd>If 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of <em>nchunk</em> by <em>nchunk</em> quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the <em>antialiased</em> flag and value of <em>alpha</em>.</dd> </dl> </div>\n</blockquote> <p>contour-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>linewidths</em>: [ <em>None</em> | number | tuple of numbers ]</dt> <dd>\n<p class=\"first\">If <em>linewidths</em> is <em>None</em>, the default width in <code>lines.linewidth</code> in <code>matplotlibrc</code> is used.</p> <p>If a number, all levels will be plotted with this linewidth.</p> <p class=\"last\">If a tuple, different levels will be plotted with different linewidths in the order specified.</p> </dd> <dt>\n<em>linestyles</em>: [ <em>None</em> | ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">If <em>linestyles</em> is <em>None</em>, the default is ‘solid’ unless the lines are monochrome. In that case, negative contours will take their linestyle from the <code>matplotlibrc</code> <code>contour.negative_linestyle</code> setting.</p> <p class=\"last\"><em>linestyles</em> can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.</p> </dd> </dl> </div>\n</blockquote> <p>contourf-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>hatches</em>:</dt> <dd>A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</dd> </dl> </div>\n</blockquote> <p>Note: contourf fills intervals that are closed at the top; that is, for boundaries <em>z1</em> and <em>z2</em>, the filled region is:</p> <pre data-language=\"python\">z1 &lt; z &lt;= z2\n</pre> <p>There is one exception: if the lowest boundary coincides with the minimum value of the <em>z</em> array, then that minimum value will be included in the lowest interval.</p> <p><strong>Examples:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id11\"> <img alt=\"../_images/contour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id12\"> <img alt=\"../_images/contour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id13\"> <img alt=\"../_images/contour_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id14\"> <img alt=\"../_images/contour_demo_03.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_03.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id15\"> <img alt=\"../_images/contour_demo_04.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_04.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id16\"> <img alt=\"../_images/contour_demo_05.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_05.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.pdf\">pdf</a>)</span></p> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id17\"> <img alt=\"../_images/contourf_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id18\"> <img alt=\"../_images/contourf_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id19\"> <img alt=\"../_images/contourf_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.pdf\">pdf</a>)</span></p> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/contour_corner_mask.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_corner_mask.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.contourf\"><code>contourf(*args, **kwargs)</code></dt> <dd>\n<p>Plot contours.</p> <p><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour()</code></a> and <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.</p> <p><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> differs from the MATLAB version in that it does not draw the polygon edges. To draw edges, add line contours with calls to <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour()</code></a>.</p> <p>Call signatures:</p> <pre data-language=\"python\">contour(Z)\n</pre> <p>make a contour plot of an array <em>Z</em>. The level values are chosen automatically.</p> <pre data-language=\"python\">contour(X,Y,Z)\n</pre> <p><em>X</em>, <em>Y</em> specify the (x, y) coordinates of the surface</p> <pre data-language=\"python\">contour(Z,N)\ncontour(X,Y,Z,N)\n</pre> <p>contour up to <em>N</em> automatically-chosen levels.</p> <pre data-language=\"python\">contour(Z,V)\ncontour(X,Y,Z,V)\n</pre> <p>draw contour lines at the values specified in sequence <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">contourf(..., V)\n</pre> <p>fill the <code>len(V)-1</code> regions between the values in <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">contour(Z, **kwargs)\n</pre> <p>Use keyword args to control colors, linewidth, origin, cmap ... see below for more details.</p> <p><em>X</em> and <em>Y</em> must both be 2-D with the same shape as <em>Z</em>, or they must both be 1-D such that <code>len(X)</code> is the number of columns in <em>Z</em> and <code>len(Y)</code> is the number of rows in <em>Z</em>.</p> <p><code>C = contour(...)</code> returns a <code>QuadContourSet</code> object.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>corner_mask</em>: [ <em>True</em> | <em>False</em> | ‘legacy’ ]</dt> <dd>\n<p class=\"first\">Enable/disable corner masking, which only has an effect if <em>Z</em> is a masked array. If <em>False</em>, any quad touching a masked point is masked out. If <em>True</em>, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual. If ‘legacy’, the old contouring algorithm is used, which is equivalent to <em>False</em> and is deprecated, only remaining whilst the new algorithm is tested fully.</p> <p class=\"last\">If not specified, the default is taken from rcParams[‘contour.corner_mask’], which is True unless it has been modified.</p> </dd> <dt>\n<em>colors</em>: [ <em>None</em> | string | (mpl_colors) ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the colormap specified by cmap will be used.</p> <p>If a string, like ‘r’ or ‘red’, all levels will be plotted in this color.</p> <p class=\"last\">If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</p> </dd> <dt>\n<em>alpha</em>: float</dt> <dd>The alpha blending value</dd> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A cm <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or <em>None</em>. If <em>cmap</em> is <em>None</em> and <em>colors</em> is <em>None</em>, a default Colormap is used.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance for scaling data values to colors. If <em>norm</em> is <em>None</em> and <em>colors</em> is <em>None</em>, the default linear scaling is used.</dd> <dt>\n<em>vmin</em>, <em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>If not <em>None</em>, either or both of these values will be supplied to the <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance, overriding the default color scaling based on <em>levels</em>.</dd> <dt>\n<em>levels</em>: [level0, level1, ..., leveln]</dt> <dd>A list of floating point numbers indicating the level curves to draw, in increasing order; e.g., to draw just the zero contour pass <code>levels=[0]</code>\n</dd> <dt>\n<em>origin</em>: [ <em>None</em> | ‘upper’ | ‘lower’ | ‘image’ ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the first value of <em>Z</em> will correspond to the lower left corner, location (0,0). If ‘image’, the rc value for <code>image.origin</code> will be used.</p> <p class=\"last\">This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </dd> </dl> <p><em>extent</em>: [ <em>None</em> | (x0,x1,y0,y1) ]</p> <blockquote> <div>\n<p>If <em>origin</em> is not <em>None</em>, then <em>extent</em> is interpreted as in <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow()</code></a>: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If <em>origin</em> is <em>None</em>, then (<em>x0</em>, <em>y0</em>) is the position of Z[0,0], and (<em>x1</em>, <em>y1</em>) is the position of Z[-1,-1].</p> <p>This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>locator</em>: [ <em>None</em> | ticker.Locator subclass ]</dt> <dd>If <em>locator</em> is <em>None</em>, the default <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> is used. The locator is used to determine the contour levels if they are not given explicitly via the <em>V</em> argument.</dd> <dt>\n<em>extend</em>: [ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ]</dt> <dd>Unless this is ‘neither’, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range, but can be set via <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_under\" title=\"matplotlib.colors.Colormap.set_under\"><code>matplotlib.colors.Colormap.set_under()</code></a> and <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_over\" title=\"matplotlib.colors.Colormap.set_over\"><code>matplotlib.colors.Colormap.set_over()</code></a> methods.</dd> <dt>\n<em>xunits</em>, <em>yunits</em>: [ <em>None</em> | registered units ]</dt> <dd>Override axis units by specifying an instance of a <a class=\"reference internal\" href=\"units_api#matplotlib.units.ConversionInterface\" title=\"matplotlib.units.ConversionInterface\"><code>matplotlib.units.ConversionInterface</code></a>.</dd> <dt>\n<em>antialiased</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>enable antialiasing, overriding the defaults. For filled contours, the default is <em>True</em>. For line contours, it is taken from rcParams[‘lines.antialiased’].</dd> <dt>\n<em>nchunk</em>: [ 0 | integer ]</dt> <dd>If 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of <em>nchunk</em> by <em>nchunk</em> quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the <em>antialiased</em> flag and value of <em>alpha</em>.</dd> </dl> </div>\n</blockquote> <p>contour-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>linewidths</em>: [ <em>None</em> | number | tuple of numbers ]</dt> <dd>\n<p class=\"first\">If <em>linewidths</em> is <em>None</em>, the default width in <code>lines.linewidth</code> in <code>matplotlibrc</code> is used.</p> <p>If a number, all levels will be plotted with this linewidth.</p> <p class=\"last\">If a tuple, different levels will be plotted with different linewidths in the order specified.</p> </dd> <dt>\n<em>linestyles</em>: [ <em>None</em> | ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">If <em>linestyles</em> is <em>None</em>, the default is ‘solid’ unless the lines are monochrome. In that case, negative contours will take their linestyle from the <code>matplotlibrc</code> <code>contour.negative_linestyle</code> setting.</p> <p class=\"last\"><em>linestyles</em> can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.</p> </dd> </dl> </div>\n</blockquote> <p>contourf-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>hatches</em>:</dt> <dd>A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</dd> </dl> </div>\n</blockquote> <p>Note: contourf fills intervals that are closed at the top; that is, for boundaries <em>z1</em> and <em>z2</em>, the filled region is:</p> <pre data-language=\"python\">z1 &lt; z &lt;= z2\n</pre> <p>There is one exception: if the lowest boundary coincides with the minimum value of the <em>z</em> array, then that minimum value will be included in the lowest interval.</p> <p><strong>Examples:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id20\"> <img alt=\"../_images/contour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id21\"> <img alt=\"../_images/contour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id22\"> <img alt=\"../_images/contour_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id23\"> <img alt=\"../_images/contour_demo_03.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_03.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id24\"> <img alt=\"../_images/contour_demo_04.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_04.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id25\"> <img alt=\"../_images/contour_demo_05.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_05.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.pdf\">pdf</a>)</span></p> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id26\"> <img alt=\"../_images/contourf_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id27\"> <img alt=\"../_images/contourf_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id28\"> <img alt=\"../_images/contourf_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.pdf\">pdf</a>)</span></p> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/contour_corner_mask.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_corner_mask.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.csd\"><code>csd(x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, **kwargs)</code></dt> <dd>\n<p>Plot the cross-spectral density.</p> <p>Call signature:</p> <pre data-language=\"python\">csd(x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,\n    window=mlab.window_hanning, noverlap=0, pad_to=None,\n    sides='default', scale_by_freq=None, return_line=None, **kwargs)\n</pre> <p>The cross spectral density <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0005c3a5e5.png\" style=\"position: relative; bottom: -9px\"> by Welch’s average periodogram method. The vectors <em>x</em> and <em>y</em> are divided into <em>NFFT</em> length segments. Each segment is detrended by function <em>detrend</em> and windowed by function <em>window</em>. <em>noverlap</em> gives the length of the overlap between segments. The product of the direct FFTs of <em>x</em> and <em>y</em> are averaged over each segment to compute <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0005c3a5e5.png\" style=\"position: relative; bottom: -9px\">, with a scaling to correct for power loss due to windowing.</p> <p>If len(<em>x</em>) &lt; <em>NFFT</em> or len(<em>y</em>) &lt; <em>NFFT</em>, they will be zero padded to <em>NFFT</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>, <em>y</em>: 1-D arrays or sequences</dt> <dd>Arrays or sequences containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between segments. The default value is 0 (no overlap).</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> <dt>\n<em>return_line</em>: bool</dt> <dd>Whether to include the line object plotted in the returned values. Default is False.</dd> </dl> </dd> </dl> <p>If <em>return_line</em> is False, returns the tuple (<em>Pxy</em>, <em>freqs</em>). If <em>return_line</em> is True, returns the tuple (<em>Pxy</em>, <em>freqs</em>. <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Pxy</em>: 1-D array</dt> <dd>The values for the cross spectrum <code>P_{xy}</code> before scaling (complex valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>Pxy</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function. Only returend if <em>return_line</em> is True.</dd> </dl> </div>\n</blockquote> <p>For plotting, the power is plotted as <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-6c04e9a88a.png\" style=\"position: relative; bottom: -9px\"> for decibels, though <code>P_{xy}</code> itself is returned.</p> <dl class=\"docutils\"> <dt>References:</dt> <dd>Bendat &amp; Piersol – Random Data: Analysis and Measurement Procedures, John Wiley &amp; Sons (1986)</dd> </dl> <p>kwargs control the Line2D properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/csd_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/csd_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/csd_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/csd_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/csd_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/csd_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>psd()</code></dt> <dd>\n<code>psd()</code> is the equivalent to setting y=x.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.drag_pan\"><code>drag_pan(button, key, x, y)</code></dt> <dd>\n<p>Called when the mouse moves during a pan operation.</p> <p><em>button</em> is the mouse button number:</p> <ul class=\"simple\"> <li>1: LEFT</li> <li>2: MIDDLE</li> <li>3: RIGHT</li> </ul> <p><em>key</em> is a “shift” key</p> <p><em>x</em>, <em>y</em> are the mouse coordinates in display coords.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Intended to be overridden by new projection types.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> <dd>\n<p>Draw everything (plot lines, axes, labels)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.draw_artist\"><code>draw_artist(a)</code></dt> <dd>\n<p>This method can only be used after an initial draw which caches the renderer. It is used to efficiently update Axes data (axis ticks, labels, etc are not updated)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.end_pan\"><code>end_pan()</code></dt> <dd>\n<p>Called when a pan operation completes (when the mouse button is up.)</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Intended to be overridden by new projection types.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.errorbar\"><code>errorbar(x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, **kwargs)</code></dt> <dd>\n<p>Plot an errorbar graph.</p> <p>Call signature:</p> <pre data-language=\"python\">errorbar(x, y, yerr=None, xerr=None,\n         fmt='', ecolor=None, elinewidth=None, capsize=None,\n         barsabove=False, lolims=False, uplims=False,\n         xlolims=False, xuplims=False, errorevery=1,\n         capthick=None)\n</pre> <p>Plot <em>x</em> versus <em>y</em> with error deltas in <em>yerr</em> and <em>xerr</em>. Vertical errorbars are plotted if <em>yerr</em> is not <em>None</em>. Horizontal errorbars are plotted if <em>xerr</em> is not <em>None</em>.</p> <p><em>x</em>, <em>y</em>, <em>xerr</em>, and <em>yerr</em> can all be scalars, which plots a single error bar at <em>x</em>, <em>y</em>.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>xerr</em>/<em>yerr</em>: [ scalar | N, Nx1, or 2xN array-like ]</dt> <dd>\n<p class=\"first\">If a scalar number, len(N) array-like object, or an Nx1 array-like object, errorbars are drawn at +/-value relative to the data.</p> <p class=\"last\">If a sequence of shape 2xN, errorbars are drawn at -row1 and +row2 relative to the data.</p> </dd> <dt>\n<em>fmt</em>: [ ‘’ | ‘none’ | plot format string ]</dt> <dd>The plot format symbol. If <em>fmt</em> is ‘none’ (case-insensitive), only the errorbars are plotted. This is used for adding errorbars to a bar plot, for example. Default is ‘’, an empty plot format string; properties are then identical to the defaults for <code>plot()</code>.</dd> <dt>\n<em>ecolor</em>: [ <em>None</em> | mpl color ]</dt> <dd>A matplotlib color arg which gives the color the errorbar lines; if <em>None</em>, use the color of the line connecting the markers.</dd> <dt>\n<em>elinewidth</em>: scalar</dt> <dd>The linewidth of the errorbar lines. If <em>None</em>, use the linewidth.</dd> <dt>\n<em>capsize</em>: scalar</dt> <dd>The length of the error bar caps in points; if <em>None</em>, it will take the value from <code>errorbar.capsize</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</dd> <dt>\n<em>capthick</em>: scalar</dt> <dd>An alias kwarg to <em>markeredgewidth</em> (a.k.a. - <em>mew</em>). This setting is a more sensible name for the property that controls the thickness of the error bar cap in points. For backwards compatibility, if <em>mew</em> or <em>markeredgewidth</em> are given, then they will over-ride <em>capthick</em>. This may change in future releases.</dd> <dt>\n<em>barsabove</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>if <em>True</em>, will plot the errorbars above the plot symbols. Default is below.</dd> <dt>\n<em>lolims</em> / <em>uplims</em> / <em>xlolims</em> / <em>xuplims</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>These arguments can be used to indicate that a value gives only upper/lower limits. In that case a caret symbol is used to indicate this. lims-arguments may be of the same type as <em>xerr</em> and <em>yerr</em>. To use limits with inverted axes, <code>set_xlim()</code> or <code>set_ylim()</code> must be called before <code>errorbar()</code>.</dd> <dt>\n<em>errorevery</em>: positive integer</dt> <dd>subsamples the errorbars. e.g., if errorevery=5, errorbars for every 5-th datapoint will be plotted. The data plot itself still shows all data points.</dd> </dl> </div>\n</blockquote> <p>All other keyword arguments are passed on to the plot command for the markers. For example, this code makes big red squares with thick green edges:</p> <pre data-language=\"python\">x,y,yerr = rand(3,10)\nerrorbar(x, y, yerr, marker='s',\n         mfc='red', mec='green', ms=20, mew=4)\n</pre> <p>where <em>mfc</em>, <em>mec</em>, <em>ms</em> and <em>mew</em> are aliases for the longer property names, <em>markerfacecolor</em>, <em>markeredgecolor</em>, <em>markersize</em> and <em>markeredgewith</em>.</p> <p>valid kwargs for the marker properties are</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>Returns (<em>plotline</em>, <em>caplines</em>, <em>barlinecols</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>plotline</em>: <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>\n<em>x</em>, <em>y</em> plot markers and/or line</dd> <dt>\n<em>caplines</em>: list of error bar cap</dt> <dd>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instances</dd> <dt>\n<em>barlinecols</em>: list of</dt> <dd>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a> instances for the horizontal and vertical error ranges.</dd> </dl> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/errorbar_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/errorbar_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/errorbar_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/errorbar_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/errorbar_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/errorbar_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘yerr’, ‘xerr’, ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.eventplot\"><code>eventplot(positions, orientation='horizontal', lineoffsets=1, linelengths=1, linewidths=None, colors=None, linestyles='solid', **kwargs)</code></dt> <dd>\n<p>Plot identical parallel lines at specific positions.</p> <p>Call signature:</p> <pre data-language=\"python\">eventplot(positions, orientation='horizontal', lineoffsets=0,\n          linelengths=1, linewidths=None, color =None,\n          linestyles='solid'\n</pre> <p>Plot parallel lines at the given positions. positions should be a 1D or 2D array-like object, with each row corresponding to a row or column of lines.</p> <p>This type of plot is commonly used in neuroscience for representing neural events, where it is commonly called a spike raster, dot raster, or raster plot.</p> <p>However, it is useful in any situation where you wish to show the timing or position of multiple sets of discrete events, such as the arrival times of people to a business on each day of the month or the date of hurricanes each year of the last century.</p> <dl class=\"docutils\"> <dt>\n<em>orientation</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[ ‘horizonal’ | ‘vertical’ ]</span>\n</dt> <dd>‘horizonal’ : the lines will be vertical and arranged in rows “vertical’ : lines will be horizontal and arranged in columns</dd> <dt>\n<em>lineoffsets</em> :</dt> <dd>A float or array-like containing floats.</dd> <dt>\n<em>linelengths</em> :</dt> <dd>A float or array-like containing floats.</dd> <dt>\n<em>linewidths</em> :</dt> <dd>A float or array-like containing floats.</dd> <dt><em>colors</em></dt> <dd>must be a sequence of RGBA tuples (e.g., arbitrary color strings, etc, not allowed) or a list of such sequences</dd> <dt>\n<em>linestyles</em> :</dt> <dd>[ ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ] or an array of these values</dd> </dl> <p>For linelengths, linewidths, colors, and linestyles, if only a single value is given, that value is applied to all lines. If an array-like is given, it must have the same length as positions, and each value will be applied to the corresponding row or column in positions.</p> <p>Returns a list of <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.EventCollection\" title=\"matplotlib.collections.EventCollection\"><code>matplotlib.collections.EventCollection</code></a> objects that were added.</p> <p>kwargs are <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection.set_color\" title=\"matplotlib.collections.LineCollection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection.set_paths\" title=\"matplotlib.collections.LineCollection.set_paths\"><code>paths</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection.set_segments\" title=\"matplotlib.collections.LineCollection.set_segments\"><code>segments</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection.set_verts\" title=\"matplotlib.collections.LineCollection.set_verts\"><code>verts</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventplot_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventplot_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventplot_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventplot_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/eventplot_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/eventplot_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘colors’, ‘lineoffsets’, ‘linestyles’, ‘linewidths’, ‘linelengths’, ‘positions’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.fill\"><code>fill(*args, **kwargs)</code></dt> <dd>\n<p>Plot filled polygons.</p> <p>Call signature:</p> <pre data-language=\"python\">fill(*args, **kwargs)\n</pre> <p><em>args</em> is a variable length argument, allowing for multiple <em>x</em>, <em>y</em> pairs with an optional color format string; see <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> for details on the argument parsing. For example, to plot a polygon with vertices at <em>x</em>, <em>y</em> in blue.:</p> <pre data-language=\"python\">ax.fill(x,y, 'b' )\n</pre> <p>An arbitrary number of <em>x</em>, <em>y</em>, <em>color</em> groups can be specified:</p> <pre data-language=\"python\">ax.fill(x1, y1, 'g', x2, y2, 'r')\n</pre> <p>Return value is a list of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> instances that were added.</p> <p>The same color strings that <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> supports are supported by the fill format string.</p> <p>If you would like to fill below a curve, e.g., shade a region between 0 and <em>y</em> along <em>x</em>, use <code>fill_between()</code></p> <p>The <em>closed</em> kwarg will close the polygon when <em>True</em> (default).</p> <p>kwargs control the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>Polygon</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/lines_bars_and_markers/fill_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/lines_bars_and_markers/fill_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/lines_bars_and_markers/fill_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/lines_bars_and_markers/fill_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/fill_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.fill_between\"><code>fill_between(x, y1, y2=0, where=None, interpolate=False, step=None, **kwargs)</code></dt> <dd>\n<p>Make filled polygons between two curves.</p> <p>Create a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> filling the regions between <em>y1</em> and <em>y2</em> where <code>where==True</code></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : array</p> <blockquote> <div>\n<p>An N-length array of the x data</p> </div>\n</blockquote> <p><strong>y1</strong> : array</p> <blockquote> <div>\n<p>An N-length array (or scalar) of the y data</p> </div>\n</blockquote> <p><strong>y2</strong> : array</p> <blockquote> <div>\n<p>An N-length array (or scalar) of the y data</p> </div>\n</blockquote> <p><strong>where</strong> : array, optional</p> <blockquote> <div>\n<p>If <code>None</code>, default to fill between everywhere. If not <code>None</code>, it is an N-length numpy boolean array and the fill will only happen over the regions where <code>where==True</code>.</p> </div>\n</blockquote> <p><strong>interpolate</strong> : bool, optional</p> <blockquote> <div>\n<p>If <code>True</code>, interpolate between the two lines to find the precise point of intersection. Otherwise, the start and end points of the filled region will only occur on explicit values in the <em>x</em> array.</p> </div>\n</blockquote> <p><strong>step</strong> : {‘pre’, ‘post’, ‘mid’}, optional</p> <blockquote class=\"last\"> <div>\n<p>If not None, fill with step logic.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘y2’, ‘where’, ‘x’, ‘y1’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id29\"> <img alt=\"../_images/fill_between_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_between_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id30\"> <img alt=\"../_images/fill_between_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_between_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id31\"> <img alt=\"../_images/fill_between_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_between_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_02.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.fill_betweenx\"><code>fill_betweenx(y, x1, x2=0, where=None, step=None, **kwargs)</code></dt> <dd>\n<p>Make filled polygons between two horizontal curves.</p> <p>Call signature:</p> <pre data-language=\"python\">fill_betweenx(y, x1, x2=0, where=None, **kwargs)\n</pre> <p>Create a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> filling the regions between <em>x1</em> and <em>x2</em> where <code>where==True</code></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>y</strong> : array</p> <blockquote> <div>\n<p>An N-length array of the y data</p> </div>\n</blockquote> <p><strong>x1</strong> : array</p> <blockquote> <div>\n<p>An N-length array (or scalar) of the x data</p> </div>\n</blockquote> <p><strong>x2</strong> : array, optional</p> <blockquote> <div>\n<p>An N-length array (or scalar) of the x data</p> </div>\n</blockquote> <p><strong>where</strong> : array, optional</p> <blockquote> <div>\n<p>If <em>None</em>, default to fill between everywhere. If not <em>None</em>, it is a N length numpy boolean array and the fill will only happen over the regions where <code>where==True</code></p> </div>\n</blockquote> <p><strong>step</strong> : {‘pre’, ‘post’, ‘mid’}, optional</p> <blockquote class=\"last\"> <div>\n<p>If not None, fill with step logic.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x2’, ‘where’, ‘x1’, ‘y’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id32\"> <img alt=\"../_images/fill_betweenx_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_betweenx_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id33\"> <img alt=\"../_images/fill_betweenx_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_betweenx_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_01.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.format_coord\"><code>format_coord(x, y)</code></dt> <dd>\n<p>Return a format string formatting the <em>x</em>, <em>y</em> coord</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.format_xdata\"><code>format_xdata(x)</code></dt> <dd>\n<p>Return <em>x</em> string formatted. This function will use the attribute self.fmt_xdata if it is callable, else will fall back on the xaxis major formatter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.format_ydata\"><code>format_ydata(y)</code></dt> <dd>\n<p>Return y string formatted. This function will use the <code>fmt_ydata</code> attribute if it is callable, else will fall back on the yaxis major formatter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_adjustable\"><code>get_adjustable()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_anchor\"><code>get_anchor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_aspect\"><code>get_aspect()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_autoscale_on\"><code>get_autoscale_on()</code></dt> <dd>\n<p>Get whether autoscaling is applied for both axes on plot commands</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_autoscalex_on\"><code>get_autoscalex_on()</code></dt> <dd>\n<p>Get whether autoscaling for the x-axis is applied on plot commands</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_autoscaley_on\"><code>get_autoscaley_on()</code></dt> <dd>\n<p>Get whether autoscaling for the y-axis is applied on plot commands</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_axes_locator\"><code>get_axes_locator()</code></dt> <dd>\n<p>return axes_locator</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_axis_bgcolor\"><code>get_axis_bgcolor()</code></dt> <dd>\n<p>Return the axis background color</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_axisbelow\"><code>get_axisbelow()</code></dt> <dd>\n<p>Get whether axis below is true or not</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_children\"><code>get_children()</code></dt> <dd>\n<p>return a list of child artists</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_cursor_props\"><code>get_cursor_props()</code></dt> <dd>\n<p>Return the cursor propertiess as a (<em>linewidth</em>, <em>color</em>) tuple, where <em>linewidth</em> is a float and <em>color</em> is an RGBA tuple</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_data_ratio\"><code>get_data_ratio()</code></dt> <dd>\n<p>Returns the aspect ratio of the raw data.</p> <p>This method is intended to be overridden by new projection types.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_data_ratio_log\"><code>get_data_ratio_log()</code></dt> <dd>\n<p>Returns the aspect ratio of the raw data in log scale. Will be used when both axis scales are in log.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_default_bbox_extra_artists\"><code>get_default_bbox_extra_artists()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_frame_on\"><code>get_frame_on()</code></dt> <dd>\n<p>Get whether the axes rectangle patch is drawn</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_images\"><code>get_images()</code></dt> <dd>\n<p>return a list of Axes images contained by the Axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_legend\"><code>get_legend()</code></dt> <dd>\n<p>Return the legend.Legend instance, or None if no legend is defined</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_legend_handles_labels\"><code>get_legend_handles_labels(legend_handler_map=None)</code></dt> <dd>\n<p>Return handles and labels for legend</p> <p><code>ax.legend()</code> is equivalent to</p> <pre data-language=\"python\">h, l = ax.get_legend_handles_labels()\nax.legend(h, l)\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_lines\"><code>get_lines()</code></dt> <dd>\n<p>Return a list of lines contained by the Axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_navigate\"><code>get_navigate()</code></dt> <dd>\n<p>Get whether the axes responds to navigation commands</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_navigate_mode\"><code>get_navigate_mode()</code></dt> <dd>\n<p>Get the navigation toolbar button status: ‘PAN’, ‘ZOOM’, or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_position\"><code>get_position(original=False)</code></dt> <dd>\n<p>Return the a copy of the axes rectangle as a Bbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_rasterization_zorder\"><code>get_rasterization_zorder()</code></dt> <dd>\n<p>Get zorder value below which artists will be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_renderer_cache\"><code>get_renderer_cache()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_shared_x_axes\"><code>get_shared_x_axes()</code></dt> <dd>\n<p>Return a copy of the shared axes Grouper object for x axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_shared_y_axes\"><code>get_shared_y_axes()</code></dt> <dd>\n<p>Return a copy of the shared axes Grouper object for y axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_tightbbox\"><code>get_tightbbox(renderer, call_axes_locator=True)</code></dt> <dd>\n<p>Return the tight bounding box of the axes. The dimension of the Bbox in canvas coordinate.</p> <p>If <em>call_axes_locator</em> is <em>False</em>, it does not call the _axes_locator attribute, which is necessary to get the correct bounding box. <code>call_axes_locator==False</code> can be used if the caller is only intereted in the relative size of the tightbbox compared to the axes bbox.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_title\"><code>get_title(loc='center')</code></dt> <dd>\n<p>Get an axes title.</p> <p>Get one of the three available axes titles. The available titles are positioned above the axes in the center, flush with the left edge, and flush with the right edge.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>loc</strong> : {‘center’, ‘left’, ‘right’}, str, optional</p> <blockquote> <div>\n<p>Which title to get, defaults to ‘center’</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">title: str</p> <blockquote class=\"last\"> <div>\n<p>The title text string.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_window_extent\"><code>get_window_extent(*args, **kwargs)</code></dt> <dd>\n<p>get the axes bounding box in display space; <em>args</em> and <em>kwargs</em> are empty</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xaxis\"><code>get_xaxis()</code></dt> <dd>\n<p>Return the XAxis instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xaxis_text1_transform\"><code>get_xaxis_text1_transform(pad_points)</code></dt> <dd>\n<p>Get the transformation used for drawing x-axis labels, which will add the given amount of padding (in points) between the axes and the label. The x-direction is in data coordinates and the y-direction is in axis coordinates. Returns a 3-tuple of the form:</p> <pre data-language=\"python\">(transform, valign, halign)\n</pre> <p>where <em>valign</em> and <em>halign</em> are requested alignments for the text.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This transformation is primarily used by the <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>Axis</code></a> class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xaxis_text2_transform\"><code>get_xaxis_text2_transform(pad_points)</code></dt> <dd>\n<p>Get the transformation used for drawing the secondary x-axis labels, which will add the given amount of padding (in points) between the axes and the label. The x-direction is in data coordinates and the y-direction is in axis coordinates. Returns a 3-tuple of the form:</p> <pre data-language=\"python\">(transform, valign, halign)\n</pre> <p>where <em>valign</em> and <em>halign</em> are requested alignments for the text.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This transformation is primarily used by the <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>Axis</code></a> class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xaxis_transform\"><code>get_xaxis_transform(which='grid')</code></dt> <dd>\n<p>Get the transformation used for drawing x-axis labels, ticks and gridlines. The x-direction is in data coordinates and the y-direction is in axis coordinates.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This transformation is primarily used by the <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>Axis</code></a> class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xbound\"><code>get_xbound()</code></dt> <dd>\n<p>Returns the x-axis numerical bounds where:</p> <pre data-language=\"python\">lowerBound &lt; upperBound\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xgridlines\"><code>get_xgridlines()</code></dt> <dd>\n<p>Get the x grid lines as a list of Line2D instances</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xlabel\"><code>get_xlabel()</code></dt> <dd>\n<p>Get the xlabel text string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xlim\"><code>get_xlim()</code></dt> <dd>\n<p>Get the x-axis range [<em>left</em>, <em>right</em>]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xmajorticklabels\"><code>get_xmajorticklabels()</code></dt> <dd>\n<p>Get the xtick labels as a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xminorticklabels\"><code>get_xminorticklabels()</code></dt> <dd>\n<p>Get the x minor tick labels as a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instances.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xscale\"><code>get_xscale()</code></dt> <dd>\n<p>Return the xaxis scale string: linear, log, logit, symlog</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xticklabels\"><code>get_xticklabels(minor=False, which=None)</code></dt> <dd>\n<p>Get the x tick labels as a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>minor</strong> : bool</p> <blockquote> <div>\n<p>If True return the minor ticklabels, else return the major ticklabels</p> </div>\n</blockquote> <p><strong>which</strong> : None, (‘minor’, ‘major’, ‘both’)</p> <blockquote> <div>\n<p>Overrides <code>minor</code>.</p> <p>Selects which ticklabels to return</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : list</p> <blockquote class=\"last\"> <div>\n<p>List of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xticklines\"><code>get_xticklines()</code></dt> <dd>\n<p>Get the xtick lines as a list of Line2D instances</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_xticks\"><code>get_xticks(minor=False)</code></dt> <dd>\n<p>Return the x ticks as a list of locations</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yaxis\"><code>get_yaxis()</code></dt> <dd>\n<p>Return the YAxis instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yaxis_text1_transform\"><code>get_yaxis_text1_transform(pad_points)</code></dt> <dd>\n<p>Get the transformation used for drawing y-axis labels, which will add the given amount of padding (in points) between the axes and the label. The x-direction is in axis coordinates and the y-direction is in data coordinates. Returns a 3-tuple of the form:</p> <pre data-language=\"python\">(transform, valign, halign)\n</pre> <p>where <em>valign</em> and <em>halign</em> are requested alignments for the text.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This transformation is primarily used by the <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>Axis</code></a> class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yaxis_text2_transform\"><code>get_yaxis_text2_transform(pad_points)</code></dt> <dd>\n<p>Get the transformation used for drawing the secondary y-axis labels, which will add the given amount of padding (in points) between the axes and the label. The x-direction is in axis coordinates and the y-direction is in data coordinates. Returns a 3-tuple of the form:</p> <pre data-language=\"python\">(transform, valign, halign)\n</pre> <p>where <em>valign</em> and <em>halign</em> are requested alignments for the text.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This transformation is primarily used by the <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>Axis</code></a> class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yaxis_transform\"><code>get_yaxis_transform(which='grid')</code></dt> <dd>\n<p>Get the transformation used for drawing y-axis labels, ticks and gridlines. The x-direction is in axis coordinates and the y-direction is in data coordinates.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This transformation is primarily used by the <a class=\"reference internal\" href=\"axis_api#matplotlib.axis.Axis\" title=\"matplotlib.axis.Axis\"><code>Axis</code></a> class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_ybound\"><code>get_ybound()</code></dt> <dd>\n<p>Return y-axis numerical bounds in the form of <code>lowerBound &lt; upperBound</code></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_ygridlines\"><code>get_ygridlines()</code></dt> <dd>\n<p>Get the y grid lines as a list of Line2D instances</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_ylabel\"><code>get_ylabel()</code></dt> <dd>\n<p>Get the ylabel text string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_ylim\"><code>get_ylim()</code></dt> <dd>\n<p>Get the y-axis range [<em>bottom</em>, <em>top</em>]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_ymajorticklabels\"><code>get_ymajorticklabels()</code></dt> <dd>\n<p>Get the major y tick labels as a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yminorticklabels\"><code>get_yminorticklabels()</code></dt> <dd>\n<p>Get the minor y tick labels as a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yscale\"><code>get_yscale()</code></dt> <dd>\n<p>Return the yaxis scale string: linear, log, logit, symlog</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yticklabels\"><code>get_yticklabels(minor=False, which=None)</code></dt> <dd>\n<p>Get the x tick labels as a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>minor</strong> : bool</p> <blockquote> <div>\n<p>If True return the minor ticklabels, else return the major ticklabels</p> </div>\n</blockquote> <p><strong>which</strong> : None, (‘minor’, ‘major’, ‘both’)</p> <blockquote> <div>\n<p>Overrides <code>minor</code>.</p> <p>Selects which ticklabels to return</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ret</strong> : list</p> <blockquote class=\"last\"> <div>\n<p>List of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yticklines\"><code>get_yticklines()</code></dt> <dd>\n<p>Get the ytick lines as a list of Line2D instances</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_yticks\"><code>get_yticks(minor=False)</code></dt> <dd>\n<p>Return the y ticks as a list of locations</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.grid\"><code>grid(b=None, which='major', axis='both', **kwargs)</code></dt> <dd>\n<p>Turn the axes grids on or off.</p> <p>Call signature:</p> <pre data-language=\"python\">grid(self, b=None, which='major', axis='both', **kwargs)\n</pre> <p>Set the axes grids on or off; <em>b</em> is a boolean. (For MATLAB compatibility, <em>b</em> may also be a string, ‘on’ or ‘off’.)</p> <p>If <em>b</em> is <em>None</em> and <code>len(kwargs)==0</code>, toggle the grid state. If <em>kwargs</em> are supplied, it is assumed that you want a grid and <em>b</em> is thus set to <em>True</em>.</p> <p><em>which</em> can be ‘major’ (default), ‘minor’, or ‘both’ to control whether major tick grids, minor tick grids, or both are affected.</p> <p><em>axis</em> can be ‘both’ (default), ‘x’, or ‘y’ to control which set of gridlines are drawn.</p> <p><em>kwargs</em> are used to set the grid line properties, e.g.,:</p> <pre data-language=\"python\">ax.grid(color='r', linestyle='-', linewidth=2)\n</pre> <p>Valid <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> kwargs are</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.has_data\"><code>has_data()</code></dt> <dd>\n<p>Return <em>True</em> if any artists have been added to axes.</p> <p>This should not be used to determine whether the <em>dataLim</em> need to be updated, and may not actually be useful for anything.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.hexbin\"><code>hexbin(x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='none', reduce_C_function=<function mean>, mincnt=None, marginals=False, **kwargs)</function></code></dt> <dd>\n<p>Make a hexagonal binning plot.</p> <p>Call signature:</p> <pre data-language=\"python\">hexbin(x, y, C = None, gridsize = 100, bins = None,\n       xscale = 'linear', yscale = 'linear',\n       cmap=None, norm=None, vmin=None, vmax=None,\n       alpha=None, linewidths=None, edgecolors='none'\n       reduce_C_function = np.mean, mincnt=None, marginals=True\n       **kwargs)\n</pre> <p>Make a hexagonal binning plot of <em>x</em> versus <em>y</em>, where <em>x</em>, <em>y</em> are 1-D sequences of the same length, <em>N</em>. If <em>C</em> is <em>None</em> (the default), this is a histogram of the number of occurences of the observations at (x[i],y[i]).</p> <p>If <em>C</em> is specified, it specifies values at the coordinate (x[i],y[i]). These values are accumulated for each hexagonal bin and then reduced according to <em>reduce_C_function</em>, which defaults to numpy’s mean function (np.mean). (If <em>C</em> is specified, it must also be a 1-D sequence of the same length as <em>x</em> and <em>y</em>.)</p> <p><em>x</em>, <em>y</em> and/or <em>C</em> may be masked arrays, in which case only unmasked points will be plotted.</p> <p>Optional keyword arguments:</p> <dl class=\"docutils\"> <dt>\n<em>gridsize</em>: [ 100 | integer ]</dt> <dd>The number of hexagons in the <em>x</em>-direction, default is 100. The corresponding number of hexagons in the <em>y</em>-direction is chosen such that the hexagons are approximately regular. Alternatively, gridsize can be a tuple with two elements specifying the number of hexagons in the <em>x</em>-direction and the <em>y</em>-direction.</dd> <dt>\n<em>bins</em>: [ <em>None</em> | ‘log’ | integer | sequence ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, no binning is applied; the color of each hexagon directly corresponds to its count value.</p> <p>If ‘log’, use a logarithmic scale for the color map. Internally, <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-56f328ad77.png\" style=\"position: relative; bottom: -8px\"> is used to determine the hexagon color.</p> <p>If an integer, divide the counts in the specified number of bins, and color the hexagons accordingly.</p> <p class=\"last\">If a sequence of values, the values of the lower bound of the bins to be used.</p> </dd> <dt>\n<em>xscale</em>: [ ‘linear’ | ‘log’ ]</dt> <dd>Use a linear or log10 scale on the horizontal axis.</dd> <dt>\n<em>scale</em>: [ ‘linear’ | ‘log’ ]</dt> <dd>Use a linear or log10 scale on the vertical axis.</dd> <dt>\n<em>mincnt</em>: [ <em>None</em> | a positive integer ]</dt> <dd>If not <em>None</em>, only display cells with more than <em>mincnt</em> number of points in the cell</dd> <dt>\n<em>marginals</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>if marginals is <em>True</em>, plot the marginal density as colormapped rectagles along the bottom of the x-axis and left of the y-axis</dd> <dt>\n<em>extent</em>: [ <em>None</em> | scalars (left, right, bottom, top) ]</dt> <dd>The limits of the bins. The default assigns the limits based on gridsize, x, y, xscale and yscale.</dd> </dl> <p>Other keyword arguments controlling color mapping and normalization arguments:</p> <dl class=\"docutils\"> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance. If <em>None</em>, defaults to rc <code>image.cmap</code>.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>\n<a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance is used to scale luminance data to 0,1.</dd> <dt>\n<em>vmin</em> / <em>vmax</em>: scalar</dt> <dd>\n<em>vmin</em> and <em>vmax</em> are used in conjunction with <em>norm</em> to normalize luminance data. If either are <em>None</em>, the min and max of the color array <em>C</em> is used. Note if you pass a norm instance, your settings for <em>vmin</em> and <em>vmax</em> will be ignored.</dd> <dt>\n<em>alpha</em>: scalar between 0 and 1, or <em>None</em>\n</dt> <dd>the alpha value for the patches</dd> <dt>\n<em>linewidths</em>: [ <em>None</em> | scalar ]</dt> <dd>If <em>None</em>, defaults to rc lines.linewidth. Note that this is a tuple, and if you set the linewidths argument you must set it as a sequence of floats, as required by <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.RegularPolyCollection\" title=\"matplotlib.collections.RegularPolyCollection\"><code>RegularPolyCollection</code></a>.</dd> </dl> <p>Other keyword arguments controlling the Collection properties:</p> <dl class=\"docutils\"> <dt>\n<em>edgecolors</em>: [ <em>None</em> | <code>'none'</code> | mpl color | color sequence ]</dt> <dd>\n<p class=\"first\">If <code>'none'</code>, draws the edges in the same color as the fill color. This is the default, as it avoids unsightly unpainted pixels between the hexagons.</p> <p>If <em>None</em>, draws the outlines in the default color.</p> <p class=\"last\">If a matplotlib color arg or sequence of rgba tuples, draws the outlines in the specified color.</p> </dd> </dl> <p>Here are the standard descriptions of all the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a> kwargs:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>The return value is a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> instance; use <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection.get_array\" title=\"matplotlib.collections.PolyCollection.get_array\"><code>get_array()</code></a> on this <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> to get the counts in each hexagon. If <em>marginals</em> is <em>True</em>, horizontal bar and vertical bar (both PolyCollections) will be attached to the return collection as attributes <em>hbar</em> and <em>vbar</em>.</p> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hexbin_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hexbin_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hexbin_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hexbin_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/hexbin_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/hexbin_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.hist\"><code>hist(x, bins=10, range=None, normed=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, **kwargs)</code></dt> <dd>\n<p>Plot a histogram.</p> <p>Compute and draw the histogram of <em>x</em>. The return value is a tuple (<em>n</em>, <em>bins</em>, <em>patches</em>) or ([<em>n0</em>, <em>n1</em>, ...], <em>bins</em>, [<em>patches0</em>, <em>patches1</em>,...]) if the input contains multiple data.</p> <p>Multiple data can be provided via <em>x</em> as a list of datasets of potentially different length ([<em>x0</em>, <em>x1</em>, ...]), or as a 2-D ndarray in which each column is a dataset. Note that the ndarray form is transposed relative to the list form.</p> <p>Masked arrays are not supported at present.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : (n,) array or sequence of (n,) arrays</p> <blockquote> <div>\n<p>Input values, this takes either a single array or a sequency of arrays which are not required to be of the same length</p> </div>\n</blockquote> <p><strong>bins</strong> : integer or array_like, optional</p> <blockquote> <div>\n<p>If an integer is given, <code>bins + 1</code> bin edges are returned, consistently with <code>numpy.histogram()</code> for numpy version &gt;= 1.3.</p> <p>Unequally spaced bins are supported if <code>bins</code> is a sequence.</p> <p>default is 10</p> </div>\n</blockquote> <p><strong>range</strong> : tuple or None, optional</p> <blockquote> <div>\n<p>The lower and upper range of the bins. Lower and upper outliers are ignored. If not provided, <code>range</code> is (x.min(), x.max()). Range has no effect if <code>bins</code> is a sequence.</p> <p>If <code>bins</code> is a sequence or <code>range</code> is specified, autoscaling is based on the specified bin range instead of the range of x.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>normed</strong> : boolean, optional</p> <blockquote> <div>\n<p>If <code>True</code>, the first element of the return tuple will be the counts normalized to form a probability density, i.e., <code>n/(len(x)`dbin)</code>, i.e., the integral of the histogram will sum to 1. If <em>stacked</em> is also <em>True</em>, the sum of the histograms is normalized to 1.</p> <p>Default is <code>False</code></p> </div>\n</blockquote> <p><strong>weights</strong> : (n, ) array_like or None, optional</p> <blockquote> <div>\n<p>An array of weights, of the same shape as <code>x</code>. Each value in <code>x</code> only contributes its associated weight towards the bin count (instead of 1). If <code>normed</code> is True, the weights are normalized, so that the integral of the density over the range remains 1.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>cumulative</strong> : boolean, optional</p> <blockquote> <div>\n<p>If <code>True</code>, then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values. The last bin gives the total number of datapoints. If <code>normed</code> is also <code>True</code> then the histogram is normalized such that the last bin equals 1. If <code>cumulative</code> evaluates to less than 0 (e.g., -1), the direction of accumulation is reversed. In this case, if <code>normed</code> is also <code>True</code>, then the histogram is normalized such that the first bin equals 1.</p> <p>Default is <code>False</code></p> </div>\n</blockquote> <p><strong>bottom</strong> : array_like, scalar, or None</p> <blockquote> <div>\n<p>Location of the bottom baseline of each bin. If a scalar, the base line for each bin is shifted by the same amount. If an array, each bin is shifted independently and the length of bottom must match the number of bins. If None, defaults to 0.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>histtype</strong> : {‘bar’, ‘barstacked’, ‘step’, ‘stepfilled’}, optional</p> <blockquote> <div>\n<p>The type of histogram to draw.</p> <ul class=\"simple\"> <li>‘bar’ is a traditional bar-type histogram. If multiple data are given the bars are aranged side by side.</li> <li>‘barstacked’ is a bar-type histogram where multiple data are stacked on top of each other.</li> <li>‘step’ generates a lineplot that is by default unfilled.</li> <li>‘stepfilled’ generates a lineplot that is by default filled.</li> </ul> <p>Default is ‘bar’</p> </div>\n</blockquote> <p><strong>align</strong> : {‘left’, ‘mid’, ‘right’}, optional</p> <blockquote> <div>\n<p>Controls how the histogram is plotted.</p> <blockquote> <div>\n<ul class=\"simple\"> <li>‘left’: bars are centered on the left bin edges.</li> <li>‘mid’: bars are centered between the bin edges.</li> <li>‘right’: bars are centered on the right bin edges.</li> </ul> </div>\n</blockquote> <p>Default is ‘mid’</p> </div>\n</blockquote> <p><strong>orientation</strong> : {‘horizontal’, ‘vertical’}, optional</p> <blockquote> <div>\n<p>If ‘horizontal’, <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.barh\" title=\"matplotlib.pyplot.barh\"><code>barh</code></a> will be used for bar-type histograms and the <em>bottom</em> kwarg will be the left edges.</p> </div>\n</blockquote> <p><strong>rwidth</strong> : scalar or None, optional</p> <blockquote> <div>\n<p>The relative width of the bars as a fraction of the bin width. If <code>None</code>, automatically compute the width.</p> <p>Ignored if <code>histtype</code> is ‘step’ or ‘stepfilled’.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>log</strong> : boolean, optional</p> <blockquote> <div>\n<p>If <code>True</code>, the histogram axis will be set to a log scale. If <code>log</code> is <code>True</code> and <code>x</code> is a 1D array, empty bins will be filtered out and only the non-empty (<code>n</code>, <code>bins</code>, <code>patches</code>) will be returned.</p> <p>Default is <code>False</code></p> </div>\n</blockquote> <p><strong>color</strong> : color or array_like of colors or None, optional</p> <blockquote> <div>\n<p>Color spec or sequence of color specs, one per dataset. Default (<code>None</code>) uses the standard line color sequence.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>label</strong> : string or None, optional</p> <blockquote> <div>\n<p>String, or sequence of strings to match multiple datasets. Bar charts yield multiple patches per dataset, but only the first gets the label, so that the legend command will work as expected.</p> <p>default is <code>None</code></p> </div>\n</blockquote> <p><strong>stacked</strong> : boolean, optional</p> <blockquote> <div>\n<p>If <code>True</code>, multiple data are stacked on top of each other If <code>False</code> multiple data are aranged side by side if histtype is ‘bar’ or on top of each other if histtype is ‘step’</p> <p>Default is <code>False</code></p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>n</strong> : array or list of arrays</p> <blockquote> <div>\n<p>The values of the histogram bins. See <strong>normed</strong> and <strong>weights</strong> for a description of the possible semantics. If input <strong>x</strong> is an array, then this is an array of length <strong>nbins</strong>. If input is a sequence arrays <code>[data1, data2,..]</code>, then this is a list of arrays with the values of the histograms for each of the arrays in the same order.</p> </div>\n</blockquote> <p><strong>bins</strong> : array</p> <blockquote> <div>\n<p>The edges of the bins. Length nbins + 1 (nbins left edges and right edge of last bin). Always a single array even when multiple data sets are passed in.</p> </div>\n</blockquote> <p><strong>patches</strong> : list or list of lists</p> <blockquote> <div>\n<p>Silent list of individual patches used to create the histogram or list of such list if multiple input datasets.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> properties</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>hist2d</code></dt> <dd>2D histograms</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘weights’, ‘x’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/histogram_demo_features.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/histogram_demo_features.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/histogram_demo_features.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/histogram_demo_features.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/histogram_demo_features.png\" src=\"http://matplotlib.org/1.5.1/_images/histogram_demo_features.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.hist2d\"><code>hist2d(x, y, bins=10, range=None, normed=False, weights=None, cmin=None, cmax=None, **kwargs)</code></dt> <dd>\n<p>Make a 2D histogram plot.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y: array_like, shape (n, )</strong></p> <blockquote> <div>\n<p>Input values</p> </div>\n</blockquote> <p><strong>bins: [None | int | [int, int] | array_like | [array, array]]</strong></p> <blockquote> <div>\n<p>The bin specification:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>If int, the number of bins for the two dimensions (nx=ny=bins).</li> <li>If [int, int], the number of bins in each dimension (nx, ny = bins).</li> <li>If array_like, the bin edges for the two dimensions (x_edges=y_edges=bins).</li> <li>If [array, array], the bin edges in each dimension (x_edges, y_edges = bins).</li> </ul> </div>\n</blockquote> <p>The default value is 10.</p> </div>\n</blockquote> <p><strong>range</strong> : array_like shape(2, 2), optional, default: None</p> <blockquote> <div>\n<p>The leftmost and rightmost edges of the bins along each dimension (if not specified explicitly in the bins parameters): [[xmin, xmax], [ymin, ymax]]. All values outside of this range will be considered outliers and not tallied in the histogram.</p> </div>\n</blockquote> <p><strong>normed</strong> : boolean, optional, default: False</p> <blockquote> <div>\n<p>Normalize histogram.</p> </div>\n</blockquote> <p><strong>weights</strong> : array_like, shape (n, ), optional, default: None</p> <blockquote> <div>\n<p>An array of values w_i weighing each sample (x_i, y_i).</p> </div>\n</blockquote> <p><strong>cmin</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>All bins that has count less than cmin will not be displayed and these count values in the return value count histogram will also be set to nan upon return</p> </div>\n</blockquote> <p><strong>cmax</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>All bins that has count more than cmax will not be displayed (set to none before passing to imshow) and these count values in the return value count histogram will also be set to nan upon return</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The return value is <code>(counts, xedges, yedges, Image)</code>.</p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <code>pcolorfast()</code> properties.</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>hist</code></dt> <dd>1D histogram</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘weights’, ‘x’, ‘y’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hist2d_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hist2d_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hist2d_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hist2d_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/hist2d_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/hist2d_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.hlines\"><code>hlines(y, xmin, xmax, colors='k', linestyles='solid', label='', **kwargs)</code></dt> <dd>\n<p>Plot horizontal lines at each <code>y</code> from <code>xmin</code> to <code>xmax</code>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>y</strong> : scalar or sequence of scalar</p> <blockquote> <div>\n<p>y-indexes where to plot the lines.</p> </div>\n</blockquote> <p><strong>xmin, xmax</strong> : scalar or 1D array_like</p> <blockquote> <div>\n<p>Respective beginning and end of each line. If scalars are provided, all lines will have same length.</p> </div>\n</blockquote> <p><strong>colors</strong> : array_like of colors, optional, default: ‘k’</p> <p><strong>linestyles</strong> : [‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’], optional</p> <p><strong>label</strong> : string, optional, default: ‘’</p> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>lines</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a> properties.</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>vlines</code></dt> <dd>vertical lines</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘xmax’, ‘xmin’, ‘y’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/vline_hline_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/vline_hline_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.hold\"><code>hold(b=None)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">hold(b=None)\n</pre> <p>Set the hold state. If <em>hold</em> is <em>None</em> (default), toggle the <em>hold</em> state. Else set the <em>hold</em> state to boolean value <em>b</em>.</p> <p>Examples:</p> <pre data-language=\"python\"># toggle hold\nhold()\n\n# turn hold on\nhold(True)\n\n# turn hold off\nhold(False)\n</pre> <p>When hold is <em>True</em>, subsequent plot commands will be added to the current axes. When hold is <em>False</em>, the current axes and figure will be cleared on the next plot command</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.imshow\"><code>imshow(X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, shape=None, filternorm=1, filterrad=4.0, imlim=None, resample=None, url=None, **kwargs)</code></dt> <dd>\n<p>Display an image on the axes.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>X</strong> : array_like, shape (n, m) or (n, m, 3) or (n, m, 4)</p> <blockquote> <div>\n<p>Display the image in <code>X</code> to current axes. <code>X</code> may be a float array, a uint8 array or a PIL image. If <code>X</code> is an array, it can have the following shapes:</p> <ul class=\"simple\"> <li>MxN – luminance (grayscale, float array only)</li> <li>MxNx3 – RGB (float or uint8 array)</li> <li>MxNx4 – RGBA (float or uint8 array)</li> </ul> <p>The value for each component of MxNx3 and MxNx4 float arrays should be in the range 0.0 to 1.0; MxN float arrays may be normalised.</p> </div>\n</blockquote> <p><strong>cmap</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a>, optional, default: None</p> <blockquote> <div>\n<p>If None, default to rc <code>image.cmap</code> value. <code>cmap</code> is ignored when <code>X</code> has RGB(A) information</p> </div>\n</blockquote> <p><strong>aspect</strong> : [‘auto’ | ‘equal’ | scalar], optional, default: None</p> <blockquote> <div>\n<p>If ‘auto’, changes the image aspect ratio to match that of the axes.</p> <p>If ‘equal’, and <code>extent</code> is None, changes the axes aspect ratio to match that of the image. If <code>extent</code> is not <code>None</code>, the axes aspect ratio is changed to match that of the extent.</p> <p>If None, default to rc <code>image.aspect</code> value.</p> </div>\n</blockquote> <p><strong>interpolation</strong> : string, optional, default: None</p> <blockquote> <div>\n<p>Acceptable values are ‘none’, ‘nearest’, ‘bilinear’, ‘bicubic’, ‘spline16’, ‘spline36’, ‘hanning’, ‘hamming’, ‘hermite’, ‘kaiser’, ‘quadric’, ‘catrom’, ‘gaussian’, ‘bessel’, ‘mitchell’, ‘sinc’, ‘lanczos’</p> <p>If <code>interpolation</code> is None, default to rc <code>image.interpolation</code>. See also the <code>filternorm</code> and <code>filterrad</code> parameters. If <code>interpolation</code> is ‘none’, then no interpolation is performed on the Agg, ps and pdf backends. Other backends will fall back to ‘nearest’.</p> </div>\n</blockquote> <p><strong>norm</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a>, optional, default: None</p> <blockquote> <div>\n<p>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a> instance is used to scale luminance data to 0, 1. If <code>None</code>, use the default func:<code>normalize</code>. <code>norm</code> is only used if <code>X</code> is an array of floats.</p> </div>\n</blockquote> <p><strong>vmin, vmax</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p><code>vmin</code> and <code>vmax</code> are used in conjunction with norm to normalize luminance data. Note if you pass a <code>norm</code> instance, your settings for <code>vmin</code> and <code>vmax</code> will be ignored.</p> </div>\n</blockquote> <p><strong>alpha</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>The alpha blending value, between 0 (transparent) and 1 (opaque)</p> </div>\n</blockquote> <p><strong>origin</strong> : [‘upper’ | ‘lower’], optional, default: None</p> <blockquote> <div>\n<p>Place the [0,0] index of the array in the upper left or lower left corner of the axes. If None, default to rc <code>image.origin</code>.</p> </div>\n</blockquote> <p><strong>extent</strong> : scalars (left, right, bottom, top), optional, default: None</p> <blockquote> <div>\n<p>The location, in data-coordinates, of the lower-left and upper-right corners. If <code>None</code>, the image is positioned such that the pixel centers fall on zero-based (row, column) indices.</p> </div>\n</blockquote> <p><strong>shape</strong> : scalars (columns, rows), optional, default: None</p> <blockquote> <div>\n<p>For raw buffer images</p> </div>\n</blockquote> <p><strong>filternorm</strong> : scalar, optional, default: 1</p> <blockquote> <div>\n<p>A parameter for the antigrain image resize filter. From the antigrain documentation, if <code>filternorm</code> = 1, the filter normalizes integer values and corrects the rounding errors. It doesn’t do anything with the source floating point values, it corrects only integers according to the rule of 1.0 which means that any sum of pixel weights must be equal to 1.0. So, the filter function must produce a graph of the proper shape.</p> </div>\n</blockquote> <p><strong>filterrad</strong> : scalar, optional, default: 4.0</p> <blockquote> <div>\n<p>The filter radius for filters that have a radius parameter, i.e. when interpolation is one of: ‘sinc’, ‘lanczos’ or ‘blackman’</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>image</strong> : <a class=\"reference internal\" href=\"image_api#matplotlib.image.AxesImage\" title=\"matplotlib.image.AxesImage\"><code>AxesImage</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> properties.</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>matshow</code></dt> <dd>Plot a matrix or an array as an image.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/image_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/image_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/image_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/image_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/image_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/image_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.in_axes\"><code>in_axes(mouseevent)</code></dt> <dd>\n<p>Return <em>True</em> if the given <em>mouseevent</em> (in display coords) is in the Axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.invert_xaxis\"><code>invert_xaxis()</code></dt> <dd>\n<p>Invert the x-axis.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.invert_yaxis\"><code>invert_yaxis()</code></dt> <dd>\n<p>Invert the y-axis.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.ishold\"><code>ishold()</code></dt> <dd>\n<p>return the HOLD status of the axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.legend\"><code>legend(*args, **kwargs)</code></dt> <dd>\n<p>Places a legend on the axes.</p> <p>To make a legend for lines which already exist on the axes (via plot for instance), simply call this function with an iterable of strings, one for each legend item. For example:</p> <pre data-language=\"python\">ax.plot([1, 2, 3])\nax.legend(['A simple line'])\n</pre> <p>However, in order to keep the “label” and the legend element instance together, it is preferable to specify the label either at artist creation, or by calling the <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>set_label()</code></a> method on the artist:</p> <pre data-language=\"python\">line, = ax.plot([1, 2, 3], label='Inline label')\n# Overwrite the label by calling the method.\nline.set_label('Label via method')\nax.legend()\n</pre> <p>Specific lines can be excluded from the automatic legend element selection by defining a label starting with an underscore. This is default for all artists, so calling <code>legend()</code> without any arguments and without setting the labels manually will result in no legend being drawn.</p> <p>For full control of which artists have a legend entry, it is possible to pass an iterable of legend artists followed by an iterable of legend labels respectively:</p> <pre data-language=\"python\">legend((line1, line2, line3), ('label1', 'label2', 'label3'))\n</pre> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>loc</strong> : int or string or pair of floats, default: ‘upper right’</p> <blockquote> <div>\n<p>The location of the legend. Possible codes are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"54%\"> <col width=\"46%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Location String</th> <th class=\"head\">Location Code</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘best’</td> <td>0</td> </tr> <tr class=\"row-odd\">\n<td>‘upper right’</td> <td>1</td> </tr> <tr class=\"row-even\">\n<td>‘upper left’</td> <td>2</td> </tr> <tr class=\"row-odd\">\n<td>‘lower left’</td> <td>3</td> </tr> <tr class=\"row-even\">\n<td>‘lower right’</td> <td>4</td> </tr> <tr class=\"row-odd\">\n<td>‘right’</td> <td>5</td> </tr> <tr class=\"row-even\">\n<td>‘center left’</td> <td>6</td> </tr> <tr class=\"row-odd\">\n<td>‘center right’</td> <td>7</td> </tr> <tr class=\"row-even\">\n<td>‘lower center’</td> <td>8</td> </tr> <tr class=\"row-odd\">\n<td>‘upper center’</td> <td>9</td> </tr> <tr class=\"row-even\">\n<td>‘center’</td> <td>10</td> </tr> </tbody> </table> </div>\n</blockquote> <p>Alternatively can be a 2-tuple giving <code>x, y</code> of the lower-left corner of the legend in axes coordinates (in which case <code>bbox_to_anchor</code> will be ignored).</p> </div>\n</blockquote> <p><strong>bbox_to_anchor</strong> : <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.BboxBase\" title=\"matplotlib.transforms.BboxBase\"><code>matplotlib.transforms.BboxBase</code></a> instance or tuple of floats</p> <blockquote> <div>\n<p>Specify any arbitrary location for the legend in <code>bbox_transform</code> coordinates (default Axes coordinates).</p> <p>For example, to put the legend’s upper right hand corner in the center of the axes the following keywords can be used:</p> <pre data-language=\"python\">loc='upper right', bbox_to_anchor=(0.5, 0.5)\n</pre> </div>\n</blockquote> <p><strong>ncol</strong> : integer</p> <blockquote> <div>\n<p>The number of columns that the legend has. Default is 1.</p> </div>\n</blockquote> <p><strong>prop</strong> : None or <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> or dict</p> <blockquote> <div>\n<p>The font properties of the legend. If None (default), the current <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> will be used.</p> </div>\n</blockquote> <p><strong>fontsize</strong> : int or float or {‘xx-small’, ‘x-small’, ‘small’, ‘medium’, ‘large’, ‘x-large’, ‘xx-large’}</p> <blockquote> <div>\n<p>Controls the font size of the legend. If the value is numeric the size will be the absolute font size in points. String values are relative to the current default font size. This argument is only used if <code>prop</code> is not specified.</p> </div>\n</blockquote> <p><strong>numpoints</strong> : None or int</p> <blockquote> <div>\n<p>The number of marker points in the legend when creating a legend entry for a line/<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a>. Default is <code>None</code> which will take the value from the <code>legend.numpoints</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>scatterpoints</strong> : None or int</p> <blockquote> <div>\n<p>The number of marker points in the legend when creating a legend entry for a scatter plot/ <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PathCollection\" title=\"matplotlib.collections.PathCollection\"><code>matplotlib.collections.PathCollection</code></a>. Default is <code>None</code> which will take the value from the <code>legend.scatterpoints</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>scatteryoffsets</strong> : iterable of floats</p> <blockquote> <div>\n<p>The vertical offset (relative to the font size) for the markers created for a scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at the top. To draw all markers at the same height, set to <code>[0.5]</code>. Default <code>[0.375, 0.5, 0.3125]</code>.</p> </div>\n</blockquote> <p><strong>markerscale</strong> : None or int or float</p> <blockquote> <div>\n<p>The relative size of legend markers compared with the originally drawn ones. Default is <code>None</code> which will take the value from the <code>legend.markerscale</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>*markerfirst*: [ *True* | *False* ]</strong></p> <blockquote> <div>\n<p>if <em>True</em>, legend marker is placed to the left of the legend label if <em>False</em>, legend marker is placed to the right of the legend label</p> </div>\n</blockquote> <p><strong>frameon</strong> : None or bool</p> <blockquote> <div>\n<p>Control whether a frame should be drawn around the legend. Default is <code>None</code> which will take the value from the <code>legend.frameon</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>fancybox</strong> : None or bool</p> <blockquote> <div>\n<p>Control whether round edges should be enabled around the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyBboxPatch\" title=\"matplotlib.patches.FancyBboxPatch\"><code>FancyBboxPatch</code></a> which makes up the legend’s background. Default is <code>None</code> which will take the value from the <code>legend.fancybox</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>shadow</strong> : None or bool</p> <blockquote> <div>\n<p>Control whether to draw a shadow behind the legend. Default is <code>None</code> which will take the value from the <code>legend.shadow</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>framealpha</strong> : None or float</p> <blockquote> <div>\n<p>Control the alpha transparency of the legend’s frame. Default is <code>None</code> which will take the value from the <code>legend.framealpha</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>mode</strong> : {“expand”, None}</p> <blockquote> <div>\n<p>If <code>mode</code> is set to <code>\"expand\"</code> the legend will be horizontally expanded to fill the axes area (or <code>bbox_to_anchor</code> if defines the legend’s size).</p> </div>\n</blockquote> <p><strong>bbox_transform</strong> : None or <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a></p> <blockquote> <div>\n<p>The transform for the bounding box (<code>bbox_to_anchor</code>). For a value of <code>None</code> (default) the Axes’ <code>transAxes</code> transform will be used.</p> </div>\n</blockquote> <p><strong>title</strong> : str or None</p> <blockquote> <div>\n<p>The legend’s title. Default is no title (<code>None</code>).</p> </div>\n</blockquote> <p><strong>borderpad</strong> : float or None</p> <blockquote> <div>\n<p>The fractional whitespace inside the legend border. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.borderpad</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>labelspacing</strong> : float or None</p> <blockquote> <div>\n<p>The vertical space between the legend entries. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.labelspacing</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>handlelength</strong> : float or None</p> <blockquote> <div>\n<p>The length of the legend handles. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.handlelength</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>handletextpad</strong> : float or None</p> <blockquote> <div>\n<p>The pad between the legend handle and text. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.handletextpad</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>borderaxespad</strong> : float or None</p> <blockquote> <div>\n<p>The pad between the axes and legend border. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.borderaxespad</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>columnspacing</strong> : float or None</p> <blockquote> <div>\n<p>The spacing between columns. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.columnspacing</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>handler_map</strong> : dict or None</p> <blockquote class=\"last\"> <div>\n<p>The custom dictionary mapping instances or types to a legend handler. This <code>handler_map</code> updates the default handler map found at <a class=\"reference internal\" href=\"legend_api#matplotlib.legend.Legend.get_legend_handler_map\" title=\"matplotlib.legend.Legend.get_legend_handler_map\"><code>matplotlib.legend.Legend.get_legend_handler_map()</code></a>.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>Not all kinds of artist are supported by the legend command. See <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/legend_guide.html#plotting-guide-legend\"><span>Legend guide</span></a> for details.</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/legend_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/legend_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/legend_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/legend_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/legend_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/legend_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.locator_params\"><code>locator_params(axis='both', tight=None, **kwargs)</code></dt> <dd>\n<p>Control behavior of tick locators.</p> <p>Keyword arguments:</p> <dl class=\"docutils\"> <dt><em>axis</em></dt> <dd>[‘x’ | ‘y’ | ‘both’] Axis on which to operate; default is ‘both’.</dd> <dt><em>tight</em></dt> <dd>[True | False | None] Parameter passed to <code>autoscale_view()</code>. Default is None, for no change.</dd> </dl> <p>Remaining keyword arguments are passed to directly to the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator.set_params\" title=\"matplotlib.ticker.MaxNLocator.set_params\"><code>set_params()</code></a> method.</p> <p>Typically one might want to reduce the maximum number of ticks and use tight bounds when plotting small subplots, for example:</p> <pre data-language=\"python\">ax.locator_params(tight=True, nbins=4)\n</pre> <p>Because the locator is involved in autoscaling, <code>autoscale_view()</code> is called automatically after the parameters are changed.</p> <p>This presently works only for the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> used by default on linear axes, but it may be generalized.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.loglog\"><code>loglog(*args, **kwargs)</code></dt> <dd>\n<p>Make a plot with log scaling on both the <em>x</em> and <em>y</em> axis.</p> <p>Call signature:</p> <pre data-language=\"python\">loglog(*args, **kwargs)\n</pre> <p><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.loglog\" title=\"matplotlib.pyplot.loglog\"><code>loglog()</code></a> supports all the keyword arguments of <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.set_xscale\" title=\"matplotlib.axes.Axes.set_xscale\"><code>matplotlib.axes.Axes.set_xscale()</code></a> / <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.set_yscale\" title=\"matplotlib.axes.Axes.set_yscale\"><code>matplotlib.axes.Axes.set_yscale()</code></a>.</p> <p>Notable keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>: scalar &gt; 1</dt> <dd>Base of the <em>x</em>/<em>y</em> logarithm</dd> <dt>\n<em>subsx</em>/<em>subsy</em>: [ <em>None</em> | sequence ]</dt> <dd>The location of the minor <em>x</em>/<em>y</em> ticks; <em>None</em> defaults to autosubs, which depend on the number of decades in the plot; see <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.set_xscale\" title=\"matplotlib.axes.Axes.set_xscale\"><code>matplotlib.axes.Axes.set_xscale()</code></a> / <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.set_yscale\" title=\"matplotlib.axes.Axes.set_yscale\"><code>matplotlib.axes.Axes.set_yscale()</code></a> for details</dd> <dt>\n<em>nonposx</em>/<em>nonposy</em>: [‘mask’ | ‘clip’ ]</dt> <dd>Non-positive values in <em>x</em> or <em>y</em> can be masked as invalid, or clipped to a very small positive number</dd> </dl> </div>\n</blockquote> <p>The remaining valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/log_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/log_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/log_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/log_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/log_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/log_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.magnitude_spectrum\"><code>magnitude_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, scale=None, **kwargs)</code></dt> <dd>\n<p>Plot the magnitude spectrum.</p> <p>Call signature:</p> <pre data-language=\"python\">magnitude_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,\n                   pad_to=None, sides='default', **kwargs)\n</pre> <p>Compute the magnitude spectrum of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>\n<blockquote class=\"first\"> <div>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>scale</em>: [ ‘default’ | ‘linear’ | ‘dB’ ]</dt> <dd>The scaling of the values in the <em>spec</em>. ‘linear’ is no scaling. ‘dB’ returns the values in dB scale. When <em>mode</em> is ‘density’, this is dB power (10 * log10). Otherwise this is dB amplitude (20 * log10). ‘default’ is ‘linear’.</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> </dl> </dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the magnitude spectrum before scaling (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function</dd> </dl> </div>\n</blockquote> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/spectrum_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/spectrum_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>psd()</code></dt> <dd>\n<code>psd()</code> plots the power spectral density.`.</dd> <dt><code>angle_spectrum()</code></dt> <dd>\n<code>angle_spectrum()</code> plots the angles of the corresponding frequencies.</dd> <dt><code>phase_spectrum()</code></dt> <dd>\n<code>phase_spectrum()</code> plots the phase (unwrapped angle) of the corresponding frequencies.</dd> <dt><code>specgram()</code></dt> <dd>\n<code>specgram()</code> can plot the magnitude spectrum of segments within the signal in a colormap.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.margins\"><code>margins(*args, **kw)</code></dt> <dd>\n<p>Set or retrieve autoscaling margins.</p> <p>signatures:</p> <pre data-language=\"python\">margins()\n</pre> <p>returns xmargin, ymargin</p> <pre data-language=\"python\">margins(margin)\n\nmargins(xmargin, ymargin)\n\nmargins(x=xmargin, y=ymargin)\n\nmargins(..., tight=False)\n</pre> <p>All three forms above set the xmargin and ymargin parameters. All keyword parameters are optional. A single argument specifies both xmargin and ymargin. The <em>tight</em> parameter is passed to <code>autoscale_view()</code>, which is executed after a margin is changed; the default here is <em>True</em>, on the assumption that when margins are specified, no additional padding to match tick marks is usually desired. Setting <em>tight</em> to <em>None</em> will preserve the previous setting.</p> <p>Specifying any margin changes only the autoscaling; for example, if <em>xmargin</em> is not None, then <em>xmargin</em> times the X data interval will be added to each end of that interval before it is used in autoscaling.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.matshow\"><code>matshow(Z, **kwargs)</code></dt> <dd>\n<p>Plot a matrix or array as an image.</p> <p>The matrix will be shown the way it would be printed, with the first row at the top. Row and column numbering is zero-based.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>Z</strong> : array_like shape (n, m)</p> <blockquote> <div>\n<p>The matrix to be displayed.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>image</strong> : <a class=\"reference internal\" href=\"image_api#matplotlib.image.AxesImage\" title=\"matplotlib.image.AxesImage\"><code>AxesImage</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.imshow\" title=\"matplotlib.axes.Axes.imshow\"><code>imshow</code></a> arguments</p> <blockquote class=\"last\"> <div>\n<p>Sets <code>origin</code> to ‘upper’, ‘interpolation’ to ‘nearest’ and ‘aspect’ to equal.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>imshow</code></dt> <dd>plot an image</dd> </dl> </div> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow.py\">Source code</a>)</p> <div class=\"figure\" id=\"id34\"> <img alt=\"../_images/matshow_00.png\" src=\"http://matplotlib.org/1.5.1/_images/matshow_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id35\"> <img alt=\"../_images/matshow_01.png\" src=\"http://matplotlib.org/1.5.1/_images/matshow_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id36\"> <img alt=\"../_images/matshow_02.png\" src=\"http://matplotlib.org/1.5.1/_images/matshow_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/matshow_02.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.minorticks_off\"><code>minorticks_off()</code></dt> <dd>\n<p>Remove minor ticks from the axes.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.minorticks_on\"><code>minorticks_on()</code></dt> <dd>\n<p>Add autoscaling minor ticks to the axes.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.axes.Axes.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.axes.Axes.name\"><code>name = 'rectilinear'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.pcolor\"><code>pcolor(*args, **kwargs)</code></dt> <dd>\n<p>Create a pseudocolor plot of a 2-D array.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">pcolor can be very slow for large arrays; consider using the similar but much faster <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pcolormesh\" title=\"matplotlib.pyplot.pcolormesh\"><code>pcolormesh()</code></a> instead.</p> </div> <p>Call signatures:</p> <pre data-language=\"python\">pcolor(C, **kwargs)\npcolor(X, Y, C, **kwargs)\n</pre> <p><em>C</em> is the array of color values.</p> <p><em>X</em> and <em>Y</em>, if given, specify the (<em>x</em>, <em>y</em>) coordinates of the colored quadrilaterals; the quadrilateral for C[i,j] has corners at:</p> <pre data-language=\"python\">(X[i,   j],   Y[i,   j]),\n(X[i,   j+1], Y[i,   j+1]),\n(X[i+1, j],   Y[i+1, j]),\n(X[i+1, j+1], Y[i+1, j+1]).\n</pre> <p>Ideally the dimensions of <em>X</em> and <em>Y</em> should be one greater than those of <em>C</em>; if the dimensions are the same, then the last row and column of <em>C</em> will be ignored.</p> <p>Note that the column index corresponds to the <em>x</em>-coordinate, and the row index corresponds to <em>y</em>; for details, see the <a class=\"reference internal\" href=\"pyplot_api#axes-pcolor-grid-orientation\"><span>Grid Orientation</span></a> section below.</p> <p>If either or both of <em>X</em> and <em>Y</em> are 1-D arrays or column vectors, they will be expanded as needed into the appropriate 2-D arrays, making a rectangular grid.</p> <p><em>X</em>, <em>Y</em> and <em>C</em> may be masked arrays. If either C[i, j], or one of the vertices surrounding C[i,j] (<em>X</em> or <em>Y</em> at [i, j], [i+1, j], [i, j+1],[i+1, j+1]) is masked, nothing is plotted.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance. If <em>None</em>, use rc settings.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>An <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance is used to scale luminance data to 0,1. If <em>None</em>, defaults to <code>normalize()</code>.</dd> <dt>\n<em>vmin</em>/<em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>\n<em>vmin</em> and <em>vmax</em> are used in conjunction with <em>norm</em> to normalize luminance data. If either is <em>None</em>, it is autoscaled to the respective min or max of the color array <em>C</em>. If not <em>None</em>, <em>vmin</em> or <em>vmax</em> passed in here override any pre-existing values supplied in the <em>norm</em> instance.</dd> <dt>\n<em>shading</em>: [ ‘flat’ | ‘faceted’ ]</dt> <dd>\n<p class=\"first\">If ‘faceted’, a black grid is drawn around each rectangle; if ‘flat’, edges are not drawn. Default is ‘flat’, contrary to MATLAB.</p> <dl class=\"last docutils\"> <dt>This kwarg is deprecated; please use ‘edgecolors’ instead:</dt> <dd>\n<ul class=\"first last simple\"> <li>shading=’flat’ – edgecolors=’none’</li> <li>shading=’faceted – edgecolors=’k’</li> </ul> </dd> </dl> </dd> <dt>\n<em>edgecolors</em>: [ <em>None</em> | <code>'none'</code> | color | color sequence]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the rc setting is used by default.</p> <p>If <code>'none'</code>, edges will not be visible.</p> <p class=\"last\">An mpl color or sequence of colors will set the edge color</p> </dd> <dt>\n<em>alpha</em>: <code>0 &lt;= scalar &lt;= 1</code> or <em>None</em>\n</dt> <dd>the alpha blending value</dd> <dt>\n<em>snap</em>: bool</dt> <dd>Whether to snap the mesh to pixel boundaries.</dd> </dl> </div>\n</blockquote> <p>Return value is a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>matplotlib.collections.Collection</code></a> instance.</p> <p id=\"axes-pcolor-grid-orientation\">The grid orientation follows the MATLAB convention: an array <em>C</em> with shape (<em>nrows</em>, <em>ncolumns</em>) is plotted with the column number as <em>X</em> and the row number as <em>Y</em>, increasing up; hence it is plotted the way the array would be printed, except that the <em>Y</em> axis is reversed. That is, <em>C</em> is taken as <em>C*(*y</em>, <em>x</em>).</p> <p>Similarly for <code>meshgrid()</code>:</p> <pre data-language=\"python\">x = np.arange(5)\ny = np.arange(3)\nX, Y = np.meshgrid(x, y)\n</pre> <p>is equivalent to:</p> <pre data-language=\"python\">X = array([[0, 1, 2, 3, 4],\n           [0, 1, 2, 3, 4],\n           [0, 1, 2, 3, 4]])\n\nY = array([[0, 0, 0, 0, 0],\n           [1, 1, 1, 1, 1],\n           [2, 2, 2, 2, 2]])\n</pre> <p>so if you have:</p> <pre data-language=\"python\">C = rand(len(x), len(y))\n</pre> <p>then you need to transpose C:</p> <pre data-language=\"python\">pcolor(X, Y, C.T)\n</pre> <p>or:</p> <pre data-language=\"python\">pcolor(C.T)\n</pre> <p>MATLAB <code>pcolor()</code> always discards the last row and column of <em>C</em>, but matplotlib displays the last row and column if <em>X</em> and <em>Y</em> are not specified, or if <em>X</em> and <em>Y</em> have one more row and column than <em>C</em>.</p> <p>kwargs can be used to control the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The default <em>antialiaseds</em> is False if the default <em>edgecolors*=”none” is used. This eliminates artificial lines at patch boundaries, and works regardless of the value of alpha. If *edgecolors</em> is not “none”, then the default <em>antialiaseds</em> is taken from rcParams[‘patch.antialiased’], which defaults to <em>True</em>. Stroking the edges may be preferred if <em>alpha</em> is 1, but will cause artifacts otherwise.</p> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pcolormesh\" title=\"matplotlib.pyplot.pcolormesh\"><code>pcolormesh()</code></a></dt> <dd>For an explanation of the differences between pcolor and pcolormesh.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.pcolorfast\"><code>pcolorfast(*args, **kwargs)</code></dt> <dd>\n<p>pseudocolor plot of a 2-D array</p> <p>Experimental; this is a pcolor-type method that provides the fastest possible rendering with the Agg backend, and that can handle any quadrilateral grid. It supports only flat shading (no outlines), it lacks support for log scaling of the axes, and it does not have a pyplot wrapper.</p> <p>Call signatures:</p> <pre data-language=\"python\">ax.pcolorfast(C, **kwargs)\nax.pcolorfast(xr, yr, C, **kwargs)\nax.pcolorfast(x, y, C, **kwargs)\nax.pcolorfast(X, Y, C, **kwargs)\n</pre> <p>C is the 2D array of color values corresponding to quadrilateral cells. Let (nr, nc) be its shape. C may be a masked array.</p> <p><code>ax.pcolorfast(C, **kwargs)</code> is equivalent to <code>ax.pcolorfast([0,nc], [0,nr], C, **kwargs)</code></p> <p><em>xr</em>, <em>yr</em> specify the ranges of <em>x</em> and <em>y</em> corresponding to the rectangular region bounding <em>C</em>. If:</p> <pre data-language=\"python\">xr = [x0, x1]\n</pre> <p>and:</p> <pre data-language=\"python\">yr = [y0,y1]\n</pre> <p>then <em>x</em> goes from <em>x0</em> to <em>x1</em> as the second index of <em>C</em> goes from 0 to <em>nc</em>, etc. (<em>x0</em>, <em>y0</em>) is the outermost corner of cell (0,0), and (<em>x1</em>, <em>y1</em>) is the outermost corner of cell (<em>nr</em>-1, <em>nc</em>-1). All cells are rectangles of the same size. This is the fastest version.</p> <p><em>x</em>, <em>y</em> are 1D arrays of length <em>nc</em> +1 and <em>nr</em> +1, respectively, giving the x and y boundaries of the cells. Hence the cells are rectangular but the grid may be nonuniform. The speed is intermediate. (The grid is checked, and if found to be uniform the fast version is used.)</p> <p><em>X</em> and <em>Y</em> are 2D arrays with shape (<em>nr</em> +1, <em>nc</em> +1) that specify the (x,y) coordinates of the corners of the colored quadrilaterals; the quadrilateral for C[i,j] has corners at (X[i,j],Y[i,j]), (X[i,j+1],Y[i,j+1]), (X[i+1,j],Y[i+1,j]), (X[i+1,j+1],Y[i+1,j+1]). The cells need not be rectangular. This is the most general, but the slowest to render. It may produce faster and more compact output using ps, pdf, and svg backends, however.</p> <p>Note that the column index corresponds to the x-coordinate, and the row index corresponds to y; for details, see the “Grid Orientation” section below.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance from cm. If <em>None</em>, use rc settings.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance is used to scale luminance data to 0,1. If <em>None</em>, defaults to normalize()</dd> <dt>\n<em>vmin</em>/<em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>\n<em>vmin</em> and <em>vmax</em> are used in conjunction with norm to normalize luminance data. If either are <em>None</em>, the min and max of the color array <em>C</em> is used. If you pass a norm instance, <em>vmin</em> and <em>vmax</em> will be <em>None</em>.</dd> <dt>\n<em>alpha</em>: <code>0 &lt;= scalar &lt;= 1</code> or <em>None</em>\n</dt> <dd>the alpha blending value</dd> </dl> </div>\n</blockquote> <p>Return value is an image if a regular or rectangular grid is specified, and a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.QuadMesh\" title=\"matplotlib.collections.QuadMesh\"><code>QuadMesh</code></a> collection in the general quadrilateral case.</p> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.pcolormesh\"><code>pcolormesh(*args, **kwargs)</code></dt> <dd>\n<p>Plot a quadrilateral mesh.</p> <p>Call signatures:</p> <pre data-language=\"python\">pcolormesh(C)\npcolormesh(X, Y, C)\npcolormesh(C, **kwargs)\n</pre> <p>Create a pseudocolor plot of a 2-D array.</p> <p>pcolormesh is similar to <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor()</code></a>, but uses a different mechanism and returns a different object; pcolor returns a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> but pcolormesh returns a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.QuadMesh\" title=\"matplotlib.collections.QuadMesh\"><code>QuadMesh</code></a>. It is much faster, so it is almost always preferred for large arrays.</p> <p><em>C</em> may be a masked array, but <em>X</em> and <em>Y</em> may not. Masked array support is implemented via <em>cmap</em> and <em>norm</em>; in contrast, <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor()</code></a> simply does not draw quadrilaterals with masked colors or vertices.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance. If <em>None</em>, use rc settings.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance is used to scale luminance data to 0,1. If <em>None</em>, defaults to <code>normalize()</code>.</dd> <dt>\n<em>vmin</em>/<em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>\n<em>vmin</em> and <em>vmax</em> are used in conjunction with <em>norm</em> to normalize luminance data. If either is <em>None</em>, it is autoscaled to the respective min or max of the color array <em>C</em>. If not <em>None</em>, <em>vmin</em> or <em>vmax</em> passed in here override any pre-existing values supplied in the <em>norm</em> instance.</dd> <dt>\n<em>shading</em>: [ ‘flat’ | ‘gouraud’ ]</dt> <dd>‘flat’ indicates a solid color for each quad. When ‘gouraud’, each quad will be Gouraud shaded. When gouraud shading, edgecolors is ignored.</dd> <dt>\n<em>edgecolors</em>: [<em>None</em> | <code>'None'</code> | <code>'face'</code> | color |</dt> <dd>\n<blockquote class=\"first\"> <div>color sequence]</div>\n</blockquote> <p>If <em>None</em>, the rc setting is used by default.</p> <p>If <code>'None'</code>, edges will not be visible.</p> <p>If <code>'face'</code>, edges will have the same color as the faces.</p> <p class=\"last\">An mpl color or sequence of colors will set the edge color</p> </dd> <dt>\n<em>alpha</em>: <code>0 &lt;= scalar &lt;= 1</code> or <em>None</em>\n</dt> <dd>the alpha blending value</dd> </dl> </div>\n</blockquote> <p>Return value is a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.QuadMesh\" title=\"matplotlib.collections.QuadMesh\"><code>matplotlib.collections.QuadMesh</code></a> object.</p> <p>kwargs can be used to control the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.QuadMesh\" title=\"matplotlib.collections.QuadMesh\"><code>matplotlib.collections.QuadMesh</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor()</code></a></dt> <dd>For an explanation of the grid orientation and the expansion of 1-D <em>X</em> and/or <em>Y</em> to 2-D arrays.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.phase_spectrum\"><code>phase_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, **kwargs)</code></dt> <dd>\n<p>Plot the phase spectrum.</p> <p>Call signature:</p> <pre data-language=\"python\">phase_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,\n               pad_to=None, sides='default', **kwargs)\n</pre> <p>Compute the phase spectrum (unwrapped angle spectrum) of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>\n<blockquote class=\"first\"> <div>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> </dl> </dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the phase spectrum in radians (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function</dd> </dl> </div>\n</blockquote> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/spectrum_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/spectrum_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>magnitude_spectrum()</code></dt> <dd>\n<code>magnitude_spectrum()</code> plots the magnitudes of the corresponding frequencies.</dd> <dt><code>angle_spectrum()</code></dt> <dd>\n<code>angle_spectrum()</code> plots the wrapped version of this function.</dd> <dt><code>specgram()</code></dt> <dd>\n<code>specgram()</code> can plot the phase spectrum of segments within the signal in a colormap.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.pick\"><code>pick(*args)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if mouseevent is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.pie\"><code>pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None, radius=None, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False)</code></dt> <dd>\n<p>Plot a pie chart.</p> <p>Call signature:</p> <pre data-language=\"python\">pie(x, explode=None, labels=None,\n    colors=('b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'),\n    autopct=None, pctdistance=0.6, shadow=False,\n    labeldistance=1.1, startangle=None, radius=None,\n    counterclock=True, wedgeprops=None, textprops=None,\n    center = (0, 0), frame = False )\n</pre> <p>Make a pie chart of array <em>x</em>. The fractional area of each wedge is given by x/sum(x). If sum(x) &lt;= 1, then the values of x give the fractional area directly and the array will not be normalized. The wedges are plotted counterclockwise, by default starting from the x-axis.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>explode</em>: [ <em>None</em> | len(x) sequence ]</dt> <dd>If not <em>None</em>, is a <code>len(x)</code> array which specifies the fraction of the radius with which to offset each wedge.</dd> <dt>\n<em>colors</em>: [ <em>None</em> | color sequence ]</dt> <dd>A sequence of matplotlib color args through which the pie chart will cycle.</dd> <dt>\n<em>labels</em>: [ <em>None</em> | len(x) sequence of strings ]</dt> <dd>A sequence of strings providing the labels for each wedge</dd> <dt>\n<em>autopct</em>: [ <em>None</em> | format string | format function ]</dt> <dd>If not <em>None</em>, is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be <code>fmt%pct</code>. If it is a function, it will be called.</dd> <dt>\n<em>pctdistance</em>: scalar</dt> <dd>The ratio between the center of each pie slice and the start of the text generated by <em>autopct</em>. Ignored if <em>autopct</em> is <em>None</em>; default is 0.6.</dd> <dt>\n<em>labeldistance</em>: scalar</dt> <dd>The radial distance at which the pie labels are drawn</dd> <dt>\n<em>shadow</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>Draw a shadow beneath the pie.</dd> <dt>\n<em>startangle</em>: [ <em>None</em> | Offset angle ]</dt> <dd>If not <em>None</em>, rotates the start of the pie chart by <em>angle</em> degrees counterclockwise from the x-axis.</dd> </dl> <p><em>radius</em>: [ <em>None</em> | scalar ] The radius of the pie, if <em>radius</em> is <em>None</em> it will be set to 1.</p> <dl class=\"docutils\"> <dt>\n<em>counterclock</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>Specify fractions direction, clockwise or counterclockwise.</dd> <dt>\n<em>wedgeprops</em>: [ <em>None</em> | dict of key value pairs ]</dt> <dd>Dict of arguments passed to the wedge objects making the pie. For example, you can pass in wedgeprops = { ‘linewidth’ : 3 } to set the width of the wedge border lines equal to 3. For more details, look at the doc/arguments of the wedge object. By default <code>clip_on=False</code>.</dd> <dt>\n<em>textprops</em>: [ <em>None</em> | dict of key value pairs ]</dt> <dd>Dict of arguments to pass to the text objects.</dd> </dl> <p><em>center</em>: [ (0,0) | sequence of 2 scalars ] Center position of the chart.</p> <dl class=\"docutils\"> <dt>\n<em>frame</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>Plot axes frame with the chart.</dd> </dl> </div>\n</blockquote> <p>The pie chart will probably look best if the figure and axes are square, or the Axes aspect is equal. e.g.:</p> <pre data-language=\"python\">figure(figsize=(8,8))\nax = axes([0.1, 0.1, 0.8, 0.8])\n</pre> <p>or:</p> <pre data-language=\"python\">axes(aspect=1)\n</pre> <dl class=\"docutils\"> <dt>Return value:</dt> <dd>\n<p class=\"first\">If <em>autopct</em> is <em>None</em>, return the tuple (<em>patches</em>, <em>texts</em>):</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>patches</em> is a sequence of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Wedge\" title=\"matplotlib.patches.Wedge\"><code>matplotlib.patches.Wedge</code></a> instances</li> <li>\n<em>texts</em> is a list of the label <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instances.</li> </ul> </div>\n</blockquote> <p class=\"last\">If <em>autopct</em> is not <em>None</em>, return the tuple (<em>patches</em>, <em>texts</em>, <em>autotexts</em>), where <em>patches</em> and <em>texts</em> are as above, and <em>autotexts</em> is a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances for the numeric labels.</p> </dd> </dl> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘colors’, ‘x’, ‘explode’, ‘labels’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.plot\"><code>plot(*args, **kwargs)</code></dt> <dd>\n<p>Plot lines and/or markers to the <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a>. <em>args</em> is a variable length argument, allowing for multiple <em>x</em>, <em>y</em> pairs with an optional format string. For example, each of the following is legal:</p> <pre data-language=\"python\">plot(x, y)        # plot x and y using default line style and color\nplot(x, y, 'bo')  # plot x and y using blue circle markers\nplot(y)           # plot y using x as index array 0..N-1\nplot(y, 'r+')     # ditto, but with red plusses\n</pre> <p>If <em>x</em> and/or <em>y</em> is 2-dimensional, then the corresponding columns will be plotted.</p> <p>If used with labeled data, make sure that the color spec is not included as an element in data, as otherwise the last case <code>plot(\"v\",\"r\", data={\"v\":..., \"r\":...)</code> can be interpreted as the first case which would do <code>plot(v, r)</code> using the default line style and color.</p> <p>If not used with labeled data (i.e., without a data argument), an arbitrary number of <em>x</em>, <em>y</em>, <em>fmt</em> groups can be specified, as in:</p> <pre data-language=\"python\">a.plot(x1, y1, 'g^', x2, y2, 'g-')\n</pre> <p>Return value is a list of lines that were added.</p> <p>By default, each line is assigned a different style specified by a ‘style cycle’. To change this behavior, you can edit the axes.prop_cycle rcParam.</p> <p>The following format string characters are accepted to control the line style or marker:</p> <table class=\"docutils\"> <colgroup> <col width=\"34%\"> <col width=\"66%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">character</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code>'-'</code></td> <td>solid line style</td> </tr> <tr class=\"row-odd\">\n<td><code>'--'</code></td> <td>dashed line style</td> </tr> <tr class=\"row-even\">\n<td><code>'-.'</code></td> <td>dash-dot line style</td> </tr> <tr class=\"row-odd\">\n<td><code>':'</code></td> <td>dotted line style</td> </tr> <tr class=\"row-even\">\n<td><code>'.'</code></td> <td>point marker</td> </tr> <tr class=\"row-odd\">\n<td><code>','</code></td> <td>pixel marker</td> </tr> <tr class=\"row-even\">\n<td><code>'o'</code></td> <td>circle marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'v'</code></td> <td>triangle_down marker</td> </tr> <tr class=\"row-even\">\n<td><code>'^'</code></td> <td>triangle_up marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'&lt;'</code></td> <td>triangle_left marker</td> </tr> <tr class=\"row-even\">\n<td><code>'&gt;'</code></td> <td>triangle_right marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'1'</code></td> <td>tri_down marker</td> </tr> <tr class=\"row-even\">\n<td><code>'2'</code></td> <td>tri_up marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'3'</code></td> <td>tri_left marker</td> </tr> <tr class=\"row-even\">\n<td><code>'4'</code></td> <td>tri_right marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'s'</code></td> <td>square marker</td> </tr> <tr class=\"row-even\">\n<td><code>'p'</code></td> <td>pentagon marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'*'</code></td> <td>star marker</td> </tr> <tr class=\"row-even\">\n<td><code>'h'</code></td> <td>hexagon1 marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'H'</code></td> <td>hexagon2 marker</td> </tr> <tr class=\"row-even\">\n<td><code>'+'</code></td> <td>plus marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'x'</code></td> <td>x marker</td> </tr> <tr class=\"row-even\">\n<td><code>'D'</code></td> <td>diamond marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'d'</code></td> <td>thin_diamond marker</td> </tr> <tr class=\"row-even\">\n<td><code>'|'</code></td> <td>vline marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'_'</code></td> <td>hline marker</td> </tr> </tbody> </table> <p>The following color abbreviations are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"56%\"> <col width=\"44%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">character</th> <th class=\"head\">color</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘b’</td> <td>blue</td> </tr> <tr class=\"row-odd\">\n<td>‘g’</td> <td>green</td> </tr> <tr class=\"row-even\">\n<td>‘r’</td> <td>red</td> </tr> <tr class=\"row-odd\">\n<td>‘c’</td> <td>cyan</td> </tr> <tr class=\"row-even\">\n<td>‘m’</td> <td>magenta</td> </tr> <tr class=\"row-odd\">\n<td>‘y’</td> <td>yellow</td> </tr> <tr class=\"row-even\">\n<td>‘k’</td> <td>black</td> </tr> <tr class=\"row-odd\">\n<td>‘w’</td> <td>white</td> </tr> </tbody> </table> <p>In addition, you can specify colors in many weird and wonderful ways, including full names (<code>'green'</code>), hex strings (<code>'#008000'</code>), RGB or RGBA tuples (<code>(0,1,0,1)</code>) or grayscale intensities as a string (<code>'0.8'</code>). Of these, the string specifications can be used in place of a <code>fmt</code> group, but the tuple forms can be used only as <code>kwargs</code>.</p> <p>Line styles and colors are combined in a single format string, as in <code>'bo'</code> for blue circles.</p> <p>The <em>kwargs</em> can be used to set line properties (any property that has a <code>set_*</code> method). You can use this to set a line label (for auto legends), linewidth, anitialising, marker face color, etc. Here is an example:</p> <pre data-language=\"python\">plot([1,2,3], [1,2,3], 'go-', label='line 1', linewidth=2)\nplot([1,2,3], [1,4,9], 'rs',  label='line 2')\naxis([0, 4, 0, 10])\nlegend()\n</pre> <p>If you make multiple lines with one plot command, the kwargs apply to all those lines, e.g.:</p> <pre data-language=\"python\">plot(x1, y1, x2, y2, antialiased=False)\n</pre> <p>Neither line will be antialiased.</p> <p>You do not need to use format strings, which are just abbreviations. All of the line properties can be controlled by keyword arguments. For example, you can set the color, marker, linestyle, and markercolor with:</p> <pre data-language=\"python\">plot(x, y, color='green', linestyle='dashed', marker='o',\n     markerfacecolor='blue', markersize=12).\n</pre> <p>See <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> for details.</p> <p>The kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>kwargs <em>scalex</em> and <em>scaley</em>, if defined, are passed on to <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.autoscale_view\" title=\"matplotlib.axes.Axes.autoscale_view\"><code>autoscale_view()</code></a> to determine whether the <em>x</em> and <em>y</em> axes are autoscaled; the default is <em>True</em>.</p> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.plot_date\"><code>plot_date(x, y, fmt='o', tz=None, xdate=True, ydate=False, **kwargs)</code></dt> <dd>\n<p>Plot with data with dates.</p> <p>Call signature:</p> <pre data-language=\"python\">plot_date(x, y, fmt='bo', tz=None, xdate=True,\n          ydate=False, **kwargs)\n</pre> <p>Similar to the <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> command, except the <em>x</em> or <em>y</em> (or both) data is considered to be dates, and the axis is labeled accordingly.</p> <p><em>x</em> and/or <em>y</em> can be a sequence of dates represented as float days since 0001-01-01 UTC.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>fmt</em>: string</dt> <dd>The plot format string.</dd> <dt>\n<em>tz</em>: [ <em>None</em> | timezone string | <code>tzinfo</code> instance]</dt> <dd>The time zone to use in labeling dates. If <em>None</em>, defaults to rc value.</dd> <dt>\n<em>xdate</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>If <em>True</em>, the <em>x</em>-axis will be labeled with dates.</dd> <dt>\n<em>ydate</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>If <em>True</em>, the <em>y</em>-axis will be labeled with dates.</dd> </dl> </div>\n</blockquote> <p>Note if you are using custom date tickers and formatters, it may be necessary to set the formatters/locators after the call to <code>plot_date()</code> since <code>plot_date()</code> will set the default tick locator to <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.AutoDateLocator\" title=\"matplotlib.dates.AutoDateLocator\"><code>matplotlib.dates.AutoDateLocator</code></a> (if the tick locator is not already set to a <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.DateLocator\" title=\"matplotlib.dates.DateLocator\"><code>matplotlib.dates.DateLocator</code></a> instance) and the default tick formatter to <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.AutoDateFormatter\" title=\"matplotlib.dates.AutoDateFormatter\"><code>matplotlib.dates.AutoDateFormatter</code></a> (if the tick formatter is not already set to a <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.DateFormatter\" title=\"matplotlib.dates.DateFormatter\"><code>matplotlib.dates.DateFormatter</code></a> instance).</p> <p>Valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p><a class=\"reference internal\" href=\"dates_api#module-matplotlib.dates\" title=\"matplotlib.dates\"><code>dates</code></a> for helper functions</p> <p class=\"last\"><a class=\"reference internal\" href=\"dates_api#matplotlib.dates.date2num\" title=\"matplotlib.dates.date2num\"><code>date2num()</code></a>, <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.num2date\" title=\"matplotlib.dates.num2date\"><code>num2date()</code></a> and <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.drange\" title=\"matplotlib.dates.drange\"><code>drange()</code></a> for help on creating the required floating point dates.</p> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.psd\"><code>psd(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, **kwargs)</code></dt> <dd>\n<p>Plot the power spectral density.</p> <p>Call signature:</p> <pre data-language=\"python\">psd(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,\n    window=mlab.window_hanning, noverlap=0, pad_to=None,\n    sides='default', scale_by_freq=None, return_line=None, **kwargs)\n</pre> <p>The power spectral density <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-f6d65b7f49.png\" style=\"position: relative; bottom: -6px\"> by Welch’s average periodogram method. The vector <em>x</em> is divided into <em>NFFT</em> length segments. Each segment is detrended by function <em>detrend</em> and windowed by function <em>window</em>. <em>noverlap</em> gives the length of the overlap between segments. The <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-e29eb6062a.png\" style=\"position: relative; bottom: -8px\"> of each segment <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-387c1a8741.png\" style=\"position: relative; bottom: -3px\"> are averaged to compute <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-f6d65b7f49.png\" style=\"position: relative; bottom: -6px\">, with a scaling to correct for power loss due to windowing.</p> <p>If len(<em>x</em>) &lt; <em>NFFT</em>, it will be zero padded to <em>NFFT</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between segments. The default value is 0 (no overlap).</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> <dt>\n<em>return_line</em>: bool</dt> <dd>Whether to include the line object plotted in the returned values. Default is False.</dd> </dl> </dd> </dl> <p>If <em>return_line</em> is False, returns the tuple (<em>Pxx</em>, <em>freqs</em>). If <em>return_line</em> is True, returns the tuple (<em>Pxx</em>, <em>freqs</em>. <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Pxx</em>: 1-D array</dt> <dd>The values for the power spectrum <code>P_{xx}</code> before scaling (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>Pxx</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function. Only returend if <em>return_line</em> is True.</dd> </dl> </div>\n</blockquote> <p>For plotting, the power is plotted as <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-c53255ce25.png\" style=\"position: relative; bottom: -8px\"> for decibels, though <em>Pxx</em> itself is returned.</p> <dl class=\"docutils\"> <dt>References:</dt> <dd>Bendat &amp; Piersol – Random Data: Analysis and Measurement Procedures, John Wiley &amp; Sons (1986)</dd> </dl> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/psd_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/psd_demo_00_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/psd_demo_00_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/psd_demo_00_00.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/psd_demo_00_00.png\" src=\"http://matplotlib.org/1.5.1/_images/psd_demo_00_00.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>specgram()</code></dt> <dd>\n<code>specgram()</code> differs in the default overlap; in not returning the mean of the segment periodograms; in returning the times of the segments; and in plotting a colormap instead of a line.</dd> <dt><code>magnitude_spectrum()</code></dt> <dd>\n<code>magnitude_spectrum()</code> plots the magnitude spectrum.</dd> <dt><code>csd()</code></dt> <dd>\n<code>csd()</code> plots the spectral density between two signals.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.quiver\"><code>quiver(*args, **kw)</code></dt> <dd>\n<p>Plot a 2-D field of arrows.</p> <p>call signatures:</p> <pre data-language=\"python\">quiver(U, V, **kw)\nquiver(U, V, C, **kw)\nquiver(X, Y, U, V, **kw)\nquiver(X, Y, U, V, C, **kw)\n</pre> <p>Arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>X</em>, <em>Y</em>:</dt> <dd>The x and y coordinates of the arrow locations (default is tail of arrow; see <em>pivot</em> kwarg)</dd> <dt>\n<em>U</em>, <em>V</em>:</dt> <dd>Give the x and y components of the arrow vectors</dd> <dt>\n<em>C</em>:</dt> <dd>An optional array used to map colors to the arrows</dd> </dl> </div>\n</blockquote> <p>All arguments may be 1-D or 2-D arrays or sequences. If <em>X</em> and <em>Y</em> are absent, they will be generated as a uniform grid. If <em>U</em> and <em>V</em> are 2-D arrays but <em>X</em> and <em>Y</em> are 1-D, and if <code>len(X)</code> and <code>len(Y)</code> match the column and row dimensions of <em>U</em>, then <em>X</em> and <em>Y</em> will be expanded with <code>numpy.meshgrid()</code>.</p> <p><em>U</em>, <em>V</em>, <em>C</em> may be masked arrays, but masked <em>X</em>, <em>Y</em> are not supported at present.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>units</em>: [ ‘width’ | ‘height’ | ‘dots’ | ‘inches’ | ‘x’ | ‘y’ | ‘xy’ ]</dt> <dd>\n<p class=\"first\">Arrow units; the arrow dimensions <em>except for length</em> are in multiples of this unit.</p> <ul class=\"simple\"> <li>‘width’ or ‘height’: the width or height of the axes</li> <li>‘dots’ or ‘inches’: pixels or inches, based on the figure dpi</li> <li>‘x’, ‘y’, or ‘xy’: <em>X</em>, <em>Y</em>, or sqrt(X^2+Y^2) data units</li> </ul> <p class=\"last\">The arrows scale differently depending on the units. For ‘x’ or ‘y’, the arrows get larger as one zooms in; for other units, the arrow size is independent of the zoom state. For ‘width or ‘height’, the arrow size increases with the width and height of the axes, respectively, when the window is resized; for ‘dots’ or ‘inches’, resizing does not change the arrows.</p> </dd> <dt>\n<em>angles</em>: [ ‘uv’ | ‘xy’ | array ]</dt> <dd>With the default ‘uv’, the arrow axis aspect ratio is 1, so that if <em>U*==*V</em> the orientation of the arrow on the plot is 45 degrees CCW from the horizontal axis (positive to the right). With ‘xy’, the arrow points from (x,y) to (x+u, y+v). Use this for plotting a gradient field, for example. Alternatively, arbitrary angles may be specified as an array of values in degrees, CCW from the horizontal axis. Note: inverting a data axis will correspondingly invert the arrows <em>only</em> with <code>angles='xy'</code>.</dd> <dt>\n<em>scale</em>: [ <em>None</em> | float ]</dt> <dd>Data units per arrow length unit, e.g., m/s per plot width; a smaller scale parameter makes the arrow longer. If <em>None</em>, a simple autoscaling algorithm is used, based on the average vector length and the number of vectors. The arrow length unit is given by the <em>scale_units</em> parameter</dd> <dt>\n<em>scale_units</em>: <em>None</em>, or any of the <em>units</em> options.</dt> <dd>\n<p class=\"first\">For example, if <em>scale_units</em> is ‘inches’, <em>scale</em> is 2.0, and <code>(u,v) = (1,0)</code>, then the vector will be 0.5 inches long. If <em>scale_units</em> is ‘width’, then the vector will be half the width of the axes.</p> <p class=\"last\">If <em>scale_units</em> is ‘x’ then the vector will be 0.5 x-axis units. To plot vectors in the x-y plane, with u and v having the same units as x and y, use “angles=’xy’, scale_units=’xy’, scale=1”.</p> </dd> <dt>\n<em>width</em>:</dt> <dd>Shaft width in arrow units; default depends on choice of units, above, and number of vectors; a typical starting value is about 0.005 times the width of the plot.</dd> <dt>\n<em>headwidth</em>: scalar</dt> <dd>Head width as multiple of shaft width, default is 3</dd> <dt>\n<em>headlength</em>: scalar</dt> <dd>Head length as multiple of shaft width, default is 5</dd> <dt>\n<em>headaxislength</em>: scalar</dt> <dd>Head length at shaft intersection, default is 4.5</dd> <dt>\n<em>minshaft</em>: scalar</dt> <dd>Length below which arrow scales, in units of head length. Do not set this to less than 1, or small arrows will look terrible! Default is 1</dd> <dt>\n<em>minlength</em>: scalar</dt> <dd>Minimum length as a multiple of shaft width; if an arrow length is less than this, plot a dot (hexagon) of this diameter instead. Default is 1.</dd> <dt>\n<em>pivot</em>: [ ‘tail’ | ‘mid’ | ‘middle’ | ‘tip’ ]</dt> <dd>The part of the arrow that is at the grid point; the arrow rotates about this point, hence the name <em>pivot</em>.</dd> <dt>\n<em>color</em>: [ color | color sequence ]</dt> <dd>This is a synonym for the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> facecolor kwarg. If <em>C</em> has been set, <em>color</em> has no effect.</dd> </dl> </div>\n</blockquote> <p>The defaults give a slightly swept-back arrow; to make the head a triangle, make <em>headaxislength</em> the same as <em>headlength</em>. To make the arrow more pointed, reduce <em>headwidth</em> or increase <em>headlength</em> and <em>headaxislength</em>. To make the head smaller relative to the shaft, scale down all the head parameters. You will probably do best to leave minshaft alone.</p> <p>linewidths and edgecolors can be used to customize the arrow outlines. Additional <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.quiverkey\"><code>quiverkey(*args, **kw)</code></dt> <dd>\n<p>Add a key to a quiver plot.</p> <p>Call signature:</p> <pre data-language=\"python\">quiverkey(Q, X, Y, U, label, **kw)\n</pre> <p>Arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Q</em>:</dt> <dd>The Quiver instance returned by a call to quiver.</dd> <dt>\n<em>X</em>, <em>Y</em>:</dt> <dd>The location of the key; additional explanation follows.</dd> <dt>\n<em>U</em>:</dt> <dd>The length of the key</dd> <dt>\n<em>label</em>:</dt> <dd>A string with the length and units of the key</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>coordinates</em> = [ ‘axes’ | ‘figure’ | ‘data’ | ‘inches’ ]</dt> <dd>Coordinate system and units for <em>X</em>, <em>Y</em>: ‘axes’ and ‘figure’ are normalized coordinate systems with 0,0 in the lower left and 1,1 in the upper right; ‘data’ are the axes data coordinates (used for the locations of the vectors in the quiver plot itself); ‘inches’ is position in the figure in inches, with 0,0 at the lower left corner.</dd> <dt>\n<em>color</em>:</dt> <dd>overrides face and edge colors from <em>Q</em>.</dd> <dt>\n<em>labelpos</em> = [ ‘N’ | ‘S’ | ‘E’ | ‘W’ ]</dt> <dd>Position the label above, below, to the right, to the left of the arrow, respectively.</dd> <dt>\n<em>labelsep</em>:</dt> <dd>Distance in inches between the arrow and the label. Default is 0.1</dd> <dt>\n<em>labelcolor</em>:</dt> <dd>defaults to default <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> color.</dd> <dt>\n<em>fontproperties</em>:</dt> <dd>A dictionary with keyword arguments accepted by the <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>FontProperties</code></a> initializer: <em>family</em>, <em>style</em>, <em>variant</em>, <em>size</em>, <em>weight</em>\n</dd> </dl> </div>\n</blockquote> <p>Any additional keyword arguments are used to override vector properties taken from <em>Q</em>.</p> <p>The positioning of the key depends on <em>X</em>, <em>Y</em>, <em>coordinates</em>, and <em>labelpos</em>. If <em>labelpos</em> is ‘N’ or ‘S’, <em>X</em>, <em>Y</em> give the position of the middle of the key arrow. If <em>labelpos</em> is ‘E’, <em>X</em>, <em>Y</em> positions the head, and if <em>labelpos</em> is ‘W’, <em>X</em>, <em>Y</em> positions the tail; in either of these two cases, <em>X</em>, <em>Y</em> is somewhere in the middle of the arrow+label key object.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.redraw_in_frame\"><code>redraw_in_frame()</code></dt> <dd>\n<p>This method can only be used after an initial draw which caches the renderer. It is used to efficiently update Axes data (axis ticks, labels, etc are not updated)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.relim\"><code>relim(visible_only=False)</code></dt> <dd>\n<p>Recompute the data limits based on current artists. If you want to exclude invisible artists from the calculation, set <code>visible_only=True</code></p> <p>At present, <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a> instances are not supported.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>add_callback()</code></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.reset_position\"><code>reset_position()</code></dt> <dd>\n<p>Make the original position the active position</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.scatter\"><code>scatter(x, y, s=20, c=None, marker='o', cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, **kwargs)</code></dt> <dd>\n<p>Make a scatter plot of x vs y, where x and y are sequence like objects of the same lengths.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : array_like, shape (n, )</p> <blockquote> <div>\n<p>Input data</p> </div>\n</blockquote> <p><strong>s</strong> : scalar or array_like, shape (n, ), optional, default: 20</p> <blockquote> <div>\n<p>size in points^2.</p> </div>\n</blockquote> <p><strong>c</strong> : color or sequence of color, optional, default</p> <blockquote> <div>\n<p><code>c</code> can be a single color format string, or a sequence of color specifications of length <code>N</code>, or a sequence of <code>N</code> numbers to be mapped to colors using the <code>cmap</code> and <code>norm</code> specified via kwargs (see below). Note that <code>c</code> should not be a single numeric RGB or RGBA sequence because that is indistinguishable from an array of values to be colormapped. <code>c</code> can be a 2-D array in which the rows are RGB or RGBA, however, including the case of a single row to specify the same color for all points.</p> </div>\n</blockquote> <p><strong>marker</strong> : <a class=\"reference internal\" href=\"markers_api#matplotlib.markers.MarkerStyle\" title=\"matplotlib.markers.MarkerStyle\"><code>MarkerStyle</code></a>, optional, default: ‘o’</p> <blockquote> <div>\n<p>See <a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>markers</code></a> for more information on the different styles of markers scatter supports. <code>marker</code> can be either an instance of the class or the text shorthand for a particular marker.</p> </div>\n</blockquote> <p><strong>cmap</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a>, optional, default: None</p> <blockquote> <div>\n<p>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or registered name. <code>cmap</code> is only used if <code>c</code> is an array of floats. If None, defaults to rc <code>image.cmap</code>.</p> </div>\n</blockquote> <p><strong>norm</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a>, optional, default: None</p> <blockquote> <div>\n<p>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a> instance is used to scale luminance data to 0, 1. <code>norm</code> is only used if <code>c</code> is an array of floats. If <code>None</code>, use the default <code>normalize()</code>.</p> </div>\n</blockquote> <p><strong>vmin, vmax</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p><code>vmin</code> and <code>vmax</code> are used in conjunction with <code>norm</code> to normalize luminance data. If either are <code>None</code>, the min and max of the color array is used. Note if you pass a <code>norm</code> instance, your settings for <code>vmin</code> and <code>vmax</code> will be ignored.</p> </div>\n</blockquote> <p><strong>alpha</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>The alpha blending value, between 0 (transparent) and 1 (opaque)</p> </div>\n</blockquote> <p><strong>linewidths</strong> : scalar or array_like, optional, default: None</p> <blockquote> <div>\n<p>If None, defaults to (lines.linewidth,).</p> </div>\n</blockquote> <p><strong>edgecolors</strong> : color or sequence of color, optional, default: None</p> <blockquote> <div>\n<p>If None, defaults to (patch.edgecolor). If ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn. For non-filled markers, the <code>edgecolors</code> kwarg is ignored; color is determined by <code>c</code>.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>paths</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PathCollection\" title=\"matplotlib.collections.PathCollection\"><code>PathCollection</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a> properties</p> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘facecolor’, ‘s’, ‘color’, ‘c’, ‘edgecolors’, ‘linewidths’, ‘x’, ‘facecolors’, ‘y’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/shapes_and_collections/scatter_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/shapes_and_collections/scatter_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/shapes_and_collections/scatter_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/shapes_and_collections/scatter_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/scatter_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/scatter_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.semilogx\"><code>semilogx(*args, **kwargs)</code></dt> <dd>\n<p>Make a plot with log scaling on the <em>x</em> axis.</p> <p>Call signature:</p> <pre data-language=\"python\">semilogx(*args, **kwargs)\n</pre> <p><code>semilogx()</code> supports all the keyword arguments of <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.set_xscale\" title=\"matplotlib.axes.Axes.set_xscale\"><code>matplotlib.axes.Axes.set_xscale()</code></a>.</p> <p>Notable keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>: scalar &gt; 1</dt> <dd>Base of the <em>x</em> logarithm</dd> <dt>\n<em>subsx</em>: [ <em>None</em> | sequence ]</dt> <dd>The location of the minor xticks; <em>None</em> defaults to autosubs, which depend on the number of decades in the plot; see <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.set_xscale\" title=\"matplotlib.axes.Axes.set_xscale\"><code>set_xscale()</code></a> for details.</dd> <dt>\n<em>nonposx</em>: [ ‘mask’ | ‘clip’ ]</dt> <dd>Non-positive values in <em>x</em> can be masked as invalid, or clipped to a very small positive number</dd> </dl> </div>\n</blockquote> <p>The remaining valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>loglog()</code></dt> <dd>For example code and figure</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.semilogy\"><code>semilogy(*args, **kwargs)</code></dt> <dd>\n<p>Make a plot with log scaling on the <em>y</em> axis.</p> <p>call signature:</p> <pre data-language=\"python\">semilogy(*args, **kwargs)\n</pre> <p><code>semilogy()</code> supports all the keyword arguments of <code>plot()</code> and <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.set_yscale\" title=\"matplotlib.axes.Axes.set_yscale\"><code>matplotlib.axes.Axes.set_yscale()</code></a>.</p> <p>Notable keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basey</em>: scalar &gt; 1</dt> <dd>Base of the <em>y</em> logarithm</dd> <dt>\n<em>subsy</em>: [ <em>None</em> | sequence ]</dt> <dd>The location of the minor yticks; <em>None</em> defaults to autosubs, which depend on the number of decades in the plot; see <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.set_yscale\" title=\"matplotlib.axes.Axes.set_yscale\"><code>set_yscale()</code></a> for details.</dd> <dt>\n<em>nonposy</em>: [ ‘mask’ | ‘clip’ ]</dt> <dd>Non-positive values in <em>y</em> can be masked as invalid, or clipped to a very small positive number</dd> </dl> </div>\n</blockquote> <p>The remaining valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>loglog()</code></dt> <dd>For example code and figure</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_adjustable\"><code>set_adjustable(adjustable)</code></dt> <dd>\n<p>ACCEPTS: [ ‘box’ | ‘datalim’ | ‘box-forced’]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha value used for blending - not supported on all backends.</p> <p>ACCEPTS: float (0.0 transparent through 1.0 opaque)</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_anchor\"><code>set_anchor(anchor)</code></dt> <dd>\n<p><em>anchor</em></p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"29%\"> <col width=\"71%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">value</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘C’</td> <td>Center</td> </tr> <tr class=\"row-odd\">\n<td>‘SW’</td> <td>bottom left</td> </tr> <tr class=\"row-even\">\n<td>‘S’</td> <td>bottom</td> </tr> <tr class=\"row-odd\">\n<td>‘SE’</td> <td>bottom right</td> </tr> <tr class=\"row-even\">\n<td>‘E’</td> <td>right</td> </tr> <tr class=\"row-odd\">\n<td>‘NE’</td> <td>top right</td> </tr> <tr class=\"row-even\">\n<td>‘N’</td> <td>top</td> </tr> <tr class=\"row-odd\">\n<td>‘NW’</td> <td>top left</td> </tr> <tr class=\"row-even\">\n<td>‘W’</td> <td>left</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_aspect\"><code>set_aspect(aspect, adjustable=None, anchor=None)</code></dt> <dd>\n<p><em>aspect</em></p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"86%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">value</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘auto’</td> <td>automatic; fill position rectangle with data</td> </tr> <tr class=\"row-odd\">\n<td>‘normal’</td> <td>same as ‘auto’; deprecated</td> </tr> <tr class=\"row-even\">\n<td>‘equal’</td> <td>same scaling from data to plot units for x and y</td> </tr> <tr class=\"row-odd\">\n<td>num</td> <td>a circle will be stretched such that the height is num times the width. aspect=1 is the same as aspect=’equal’.</td> </tr> </tbody> </table> </div>\n</blockquote> <p><em>adjustable</em></p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"24%\"> <col width=\"76%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">value</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘box’</td> <td>change physical size of axes</td> </tr> <tr class=\"row-odd\">\n<td>‘datalim’</td> <td>change xlim or ylim</td> </tr> <tr class=\"row-even\">\n<td>‘box-forced’</td> <td>same as ‘box’, but axes can be shared</td> </tr> </tbody> </table> </div>\n</blockquote> <p>‘box’ does not allow axes sharing, as this can cause unintended side effect. For cases when sharing axes is fine, use ‘box-forced’.</p> <p><em>anchor</em></p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">value</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘C’</td> <td>centered</td> </tr> <tr class=\"row-odd\">\n<td>‘SW’</td> <td>lower left corner</td> </tr> <tr class=\"row-even\">\n<td>‘S’</td> <td>middle of bottom edge</td> </tr> <tr class=\"row-odd\">\n<td>‘SE’</td> <td>lower right corner</td> </tr> <tr class=\"row-even\">\n<td>etc.</td> <td> </td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"deprecated\"> <p><span class=\"versionmodified\">Deprecated since version 1.2: </span>the option ‘normal’ for aspect is deprecated. Use ‘auto’ instead.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_autoscale_on\"><code>set_autoscale_on(b)</code></dt> <dd>\n<p>Set whether autoscaling is applied on plot commands</p> <p>accepts: [ <em>True</em> | <em>False</em> ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_autoscalex_on\"><code>set_autoscalex_on(b)</code></dt> <dd>\n<p>Set whether autoscaling for the x-axis is applied on plot commands</p> <p>accepts: [ <em>True</em> | <em>False</em> ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_autoscaley_on\"><code>set_autoscaley_on(b)</code></dt> <dd>\n<p>Set whether autoscaling for the y-axis is applied on plot commands</p> <p>accepts: [ <em>True</em> | <em>False</em> ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_axes_locator\"><code>set_axes_locator(locator)</code></dt> <dd>\n<p>set axes_locator</p> <dl class=\"docutils\"> <dt>ACCEPT: a callable object which takes an axes instance and renderer and</dt> <dd>returns a bbox.</dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_axis_bgcolor\"><code>set_axis_bgcolor(color)</code></dt> <dd>\n<p>set the axes background color</p> <p>ACCEPTS: any matplotlib color - see <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.colors\" title=\"matplotlib.pyplot.colors\"><code>colors()</code></a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_axis_off\"><code>set_axis_off()</code></dt> <dd>\n<p>turn off the axis</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_axis_on\"><code>set_axis_on()</code></dt> <dd>\n<p>turn on the axis</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_axisbelow\"><code>set_axisbelow(b)</code></dt> <dd>\n<p>Set whether the axis ticks and gridlines are above or below most artists</p> <p>ACCEPTS: [ <em>True</em> | <em>False</em> ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_color_cycle\"><code>set_color_cycle(clist)</code></dt> <dd>\n<p>Set the color cycle for any future plot commands on this Axes.</p> <p><em>clist</em> is a list of mpl color specifiers.</p> <div class=\"deprecated\"> <p><span class=\"versionmodified\">Deprecated since version 1.5.</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_cursor_props\"><code>set_cursor_props(*args)</code></dt> <dd>\n<p>Set the cursor property as:</p> <pre data-language=\"python\">ax.set_cursor_props(linewidth, color)\n</pre> <p>or:</p> <pre data-language=\"python\">ax.set_cursor_props((linewidth, color))\n</pre> <p>ACCEPTS: a (<em>float</em>, <em>color</em>) tuple</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the class:<a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> figure</p> <p>accepts a class:<a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_frame_on\"><code>set_frame_on(b)</code></dt> <dd>\n<p>Set whether the axes rectangle patch is drawn</p> <p>ACCEPTS: [ <em>True</em> | <em>False</em> ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_navigate\"><code>set_navigate(b)</code></dt> <dd>\n<p>Set whether the axes responds to navigation toolbar commands</p> <p>ACCEPTS: [ <em>True</em> | <em>False</em> ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_navigate_mode\"><code>set_navigate_mode(b)</code></dt> <dd>\n<p>Set the navigation toolbar button status;</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">this is not a user-API function.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_position\"><code>set_position(pos, which='both')</code></dt> <dd>\n<p>Set the axes position with:</p> <pre data-language=\"python\">pos = [left, bottom, width, height]\n</pre> <p>in relative 0,1 coords, or <em>pos</em> can be a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a></p> <p>There are two position variables: one which is ultimately used, but which may be modified by <code>apply_aspect()</code>, and a second which is the starting point for <code>apply_aspect()</code>.</p> <dl class=\"docutils\"> <dt>Optional keyword arguments:</dt> <dd>\n<p class=\"first\"><em>which</em></p> <blockquote class=\"last\"> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"33%\"> <col width=\"67%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">value</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘active’</td> <td>to change the first</td> </tr> <tr class=\"row-odd\">\n<td>‘original’</td> <td>to change the second</td> </tr> <tr class=\"row-even\">\n<td>‘both’</td> <td>to change both</td> </tr> </tbody> </table> </div>\n</blockquote> </dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_prop_cycle\"><code>set_prop_cycle(*args, **kwargs)</code></dt> <dd>\n<p>Set the property cycle for any future plot commands on this Axes.</p> <p>set_prop_cycle(arg) set_prop_cycle(label, itr) set_prop_cycle(label1=itr1[, label2=itr2[, ...]])</p> <p>Form 1 simply sets given <code>Cycler</code> object.</p> <p>Form 2 creates and sets a <code>Cycler</code> from a label and an iterable.</p> <p>Form 3 composes and sets a <code>Cycler</code> as an inner product of the pairs of keyword arguments. In other words, all of the iterables are cycled simultaneously, as if through zip().</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>arg</strong> : Cycler</p> <blockquote> <div>\n<p>Set the given Cycler. Can also be <code>None</code> to reset to the cycle defined by the current style.</p> </div>\n</blockquote> <p><strong>label</strong> : str</p> <blockquote> <div>\n<p>The property key. Must be a valid <code>Artist</code> property. For example, ‘color’ or ‘linestyle’. Aliases are allowed, such as ‘c’ for ‘color’ and ‘lw’ for ‘linewidth’.</p> </div>\n</blockquote> <p><strong>itr</strong> : iterable</p> <blockquote class=\"last\"> <div>\n<p>Finite-length iterable of the property values. These values are validated and will raise a ValueError if invalid.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_rasterization_zorder\"><code>set_rasterization_zorder(z)</code></dt> <dd>\n<p>Set zorder value below which artists will be rasterized. Set to <code>None</code> to disable rasterizing of artists below a particular zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_title\"><code>set_title(label, fontdict=None, loc='center', **kwargs)</code></dt> <dd>\n<p>Set a title for the axes.</p> <p>Set one of the three available axes titles. The available titles are positioned above the axes in the center, flush with the left edge, and flush with the right edge.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>label</strong> : str</p> <blockquote> <div>\n<p>Text to use for the title</p> </div>\n</blockquote> <p><strong>fontdict</strong> : dict</p> <blockquote> <div>\n<p>A dictionary controlling the appearance of the title text, the default <code>fontdict</code> is:</p> <pre data-language=\"python\">{'fontsize': rcParams['axes.titlesize'],\n 'fontweight' : rcParams['axes.titleweight'],\n 'verticalalignment': 'baseline',\n 'horizontalalignment': loc}\n</pre> </div>\n</blockquote> <p><strong>loc</strong> : {‘center’, ‘left’, ‘right’}, str, optional</p> <blockquote> <div>\n<p>Which title to set, defaults to ‘center’</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>text</strong> : <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a></p> <blockquote> <div>\n<p>The matplotlib text instance representing the title</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>kwargs</strong> : text properties</p> <blockquote class=\"last\"> <div>\n<p>Other keyword arguments are text properties, see <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> for a list of valid text properties.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_xbound\"><code>set_xbound(lower=None, upper=None)</code></dt> <dd>\n<p>Set the lower and upper numerical bounds of the x-axis. This method will honor axes inversion regardless of parameter order. It will not change the _autoscaleXon attribute.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_xlabel\"><code>set_xlabel(xlabel, fontdict=None, labelpad=None, **kwargs)</code></dt> <dd>\n<p>Set the label for the xaxis.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>xlabel</strong> : string</p> <blockquote> <div>\n<p>x label</p> </div>\n</blockquote> <p><strong>labelpad</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>spacing in points between the label and the x-axis</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-even field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>text</code></dt> <dd>for information on how override and the optional args work</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_xlim\"><code>set_xlim(left=None, right=None, emit=True, auto=False, **kw)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">set_xlim(self, *args, **kwargs):\n</pre> <p>Set the data limits for the xaxis</p> <p>Examples:</p> <pre data-language=\"python\">set_xlim((left, right))\nset_xlim(left, right)\nset_xlim(left=1) # right unchanged\nset_xlim(right=1) # left unchanged\n</pre> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>left</em>: scalar</dt> <dd>The left xlim; <em>xmin</em>, the previous name, may still be used</dd> <dt>\n<em>right</em>: scalar</dt> <dd>The right xlim; <em>xmax</em>, the previous name, may still be used</dd> <dt>\n<em>emit</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>Notify observers of limit change</dd> <dt>\n<em>auto</em>: [ <em>True</em> | <em>False</em> | <em>None</em> ]</dt> <dd>Turn <em>x</em> autoscaling on (<em>True</em>), off (<em>False</em>; default), or leave unchanged (<em>None</em>)</dd> </dl> </div>\n</blockquote> <p>Note, the <em>left</em> (formerly <em>xmin</em>) value may be greater than the <em>right</em> (formerly <em>xmax</em>). For example, suppose <em>x</em> is years before present. Then one might use:</p> <pre data-language=\"python\">set_ylim(5000, 0)\n</pre> <p>so 5000 years ago is on the left of the plot and the present is on the right.</p> <p>Returns the current xlimits as a length 2 tuple</p> <p>ACCEPTS: length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_xmargin\"><code>set_xmargin(m)</code></dt> <dd>\n<p>Set padding of X data limits prior to autoscaling.</p> <p><em>m</em> times the data interval will be added to each end of that interval before it is used in autoscaling.</p> <p>accepts: float in range 0 to 1</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_xscale\"><code>set_xscale(value, **kwargs)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">set_xscale(value)\n</pre> <p>Set the scaling of the x-axis: ‘linear’ | ‘log’ | ‘logit’ | ‘symlog’</p> <p>ACCEPTS: [‘linear’ | ‘log’ | ‘logit’ | ‘symlog’]</p> <dl class=\"docutils\"> <dt>Different kwargs are accepted, depending on the scale:</dt> <dd>\n<p class=\"first\">‘linear’</p> <p>‘log’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>:</dt> <dd>The base of the logarithm</dd> <dt>\n<em>nonposx</em>/<em>nonposy</em>: [‘mask’ | ‘clip’ ]</dt> <dd>non-positive values in <em>x</em> or <em>y</em> can be masked as invalid, or clipped to a very small positive number</dd> <dt>\n<em>subsx</em>/<em>subsy</em>:</dt> <dd>\n<p class=\"first\">Where to place the subticks between each major tick. Should be a sequence of integers. For example, in a log10 scale: <code>[2, 3, 4, 5, 6, 7, 8, 9]</code></p> <p class=\"last\">will place 8 logarithmically spaced minor ticks between each major tick.</p> </dd> </dl> </div>\n</blockquote> <p>‘logit’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>nonpos</em>: [‘mask’ | ‘clip’ ]</dt> <dd>values beyond ]0, 1[ can be masked as invalid, or clipped to a number very close to 0 or 1</dd> </dl> </div>\n</blockquote> <p>‘symlog’</p> <blockquote class=\"last\"> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>:</dt> <dd>The base of the logarithm</dd> <dt>\n<em>linthreshx</em>/<em>linthreshy</em>:</dt> <dd>The range (-<em>x</em>, <em>x</em>) within which the plot is linear (to avoid having the plot go to infinity around zero).</dd> <dt>\n<em>subsx</em>/<em>subsy</em>:</dt> <dd>\n<p class=\"first\">Where to place the subticks between each major tick. Should be a sequence of integers. For example, in a log10 scale: <code>[2, 3, 4, 5, 6, 7, 8, 9]</code></p> <p class=\"last\">will place 8 logarithmically spaced minor ticks between each major tick.</p> </dd> <dt>\n<em>linscalex</em>/<em>linscaley</em>:</dt> <dd>This allows the linear range (-<em>linthresh</em> to <em>linthresh</em>) to be stretched relative to the logarithmic range. Its value is the number of decades to use for each half of the linear range. For example, when <em>linscale</em> == 1.0 (the default), the space used for the positive and negative halves of the linear range will be equal to one decade in the logarithmic range.</dd> </dl> </div>\n</blockquote> </dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_xticklabels\"><code>set_xticklabels(labels, fontdict=None, minor=False, **kwargs)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">set_xticklabels(labels, fontdict=None, minor=False, **kwargs)\n</pre> <p>Set the xtick labels with list of strings <em>labels</em>. Return a list of axis text instances.</p> <p><em>kwargs</em> set the <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties. Valid properties are</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"30%\"> <col width=\"70%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_backgroundcolor\" title=\"matplotlib.text.Text.set_backgroundcolor\"><code>backgroundcolor</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>bbox</code></a></td> <td>FancyBboxPatch prop dict</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_box\" title=\"matplotlib.text.Text.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_on\" title=\"matplotlib.text.Text.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_path\" title=\"matplotlib.text.Text.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_color\" title=\"matplotlib.text.Text.set_color\"><code>color</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_family\" title=\"matplotlib.text.Text.set_family\"><code>family</code></a> or name or fontname or fontfamily</td> <td>[FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ | ‘monospace’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_fontproperties\" title=\"matplotlib.text.Text.set_fontproperties\"><code>fontproperties</code></a> or font_properties</td> <td>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_horizontalalignment\" title=\"matplotlib.text.Text.set_horizontalalignment\"><code>horizontalalignment</code></a> or ha</td> <td>[ ‘center’ | ‘right’ | ‘left’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_linespacing\" title=\"matplotlib.text.Text.set_linespacing\"><code>linespacing</code></a></td> <td>float (multiple of font size)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_multialignment\" title=\"matplotlib.text.Text.set_multialignment\"><code>multialignment</code></a></td> <td>[‘left’ | ‘right’ | ‘center’ ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>position</code></a></td> <td>(x,y)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation\" title=\"matplotlib.text.Text.set_rotation\"><code>rotation</code></a></td> <td>[ angle in degrees | ‘vertical’ | ‘horizontal’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation_mode\" title=\"matplotlib.text.Text.set_rotation_mode\"><code>rotation_mode</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_size\" title=\"matplotlib.text.Text.set_size\"><code>size</code></a> or fontsize</td> <td>[size in points | ‘xx-small’ | ‘x-small’ | ‘small’ | ‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_stretch\" title=\"matplotlib.text.Text.set_stretch\"><code>stretch</code></a> or fontstretch</td> <td>[a numeric value in range 0-1000 | ‘ultra-condensed’ | ‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_style\" title=\"matplotlib.text.Text.set_style\"><code>style</code></a> or fontstyle</td> <td>[ ‘normal’ | ‘italic’ | ‘oblique’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_text\" title=\"matplotlib.text.Text.set_text\"><code>text</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_usetex\" title=\"matplotlib.text.Text.set_usetex\"><code>usetex</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_variant\" title=\"matplotlib.text.Text.set_variant\"><code>variant</code></a> or fontvariant</td> <td>[ ‘normal’ | ‘small-caps’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_verticalalignment\" title=\"matplotlib.text.Text.set_verticalalignment\"><code>verticalalignment</code></a> or va or ma</td> <td>[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_weight\" title=\"matplotlib.text.Text.set_weight\"><code>weight</code></a> or fontweight</td> <td>[a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ | ‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_wrap\" title=\"matplotlib.text.Text.set_wrap\"><code>wrap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_x\" title=\"matplotlib.text.Text.set_x\"><code>x</code></a></td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_y\" title=\"matplotlib.text.Text.set_y\"><code>y</code></a></td> <td>float</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>ACCEPTS: sequence of strings</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_xticks\"><code>set_xticks(ticks, minor=False)</code></dt> <dd>\n<p>Set the x ticks with list of <em>ticks</em></p> <p>ACCEPTS: sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_ybound\"><code>set_ybound(lower=None, upper=None)</code></dt> <dd>\n<p>Set the lower and upper numerical bounds of the y-axis. This method will honor axes inversion regardless of parameter order. It will not change the _autoscaleYon attribute.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_ylabel\"><code>set_ylabel(ylabel, fontdict=None, labelpad=None, **kwargs)</code></dt> <dd>\n<p>Set the label for the yaxis</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ylabel</strong> : string</p> <blockquote> <div>\n<p>y label</p> </div>\n</blockquote> <p><strong>labelpad</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>spacing in points between the label and the x-axis</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-even field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>text</code></dt> <dd>for information on how override and the optional args work</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_ylim\"><code>set_ylim(bottom=None, top=None, emit=True, auto=False, **kw)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">set_ylim(self, *args, **kwargs):\n</pre> <p>Set the data limits for the yaxis</p> <p>Examples:</p> <pre data-language=\"python\">set_ylim((bottom, top))\nset_ylim(bottom, top)\nset_ylim(bottom=1) # top unchanged\nset_ylim(top=1) # bottom unchanged\n</pre> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>bottom</em>: scalar</dt> <dd>The bottom ylim; the previous name, <em>ymin</em>, may still be used</dd> <dt>\n<em>top</em>: scalar</dt> <dd>The top ylim; the previous name, <em>ymax</em>, may still be used</dd> <dt>\n<em>emit</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>Notify observers of limit change</dd> <dt>\n<em>auto</em>: [ <em>True</em> | <em>False</em> | <em>None</em> ]</dt> <dd>Turn <em>y</em> autoscaling on (<em>True</em>), off (<em>False</em>; default), or leave unchanged (<em>None</em>)</dd> </dl> </div>\n</blockquote> <p>Note, the <em>bottom</em> (formerly <em>ymin</em>) value may be greater than the <em>top</em> (formerly <em>ymax</em>). For example, suppose <em>y</em> is depth in the ocean. Then one might use:</p> <pre data-language=\"python\">set_ylim(5000, 0)\n</pre> <p>so 5000 m depth is at the bottom of the plot and the surface, 0 m, is at the top.</p> <p>Returns the current ylimits as a length 2 tuple</p> <p>ACCEPTS: length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_ymargin\"><code>set_ymargin(m)</code></dt> <dd>\n<p>Set padding of Y data limits prior to autoscaling.</p> <p><em>m</em> times the data interval will be added to each end of that interval before it is used in autoscaling.</p> <p>accepts: float in range 0 to 1</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_yscale\"><code>set_yscale(value, **kwargs)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">set_yscale(value)\n</pre> <p>Set the scaling of the y-axis: ‘linear’ | ‘log’ | ‘logit’ | ‘symlog’</p> <p>ACCEPTS: [‘linear’ | ‘log’ | ‘logit’ | ‘symlog’]</p> <dl class=\"docutils\"> <dt>Different kwargs are accepted, depending on the scale:</dt> <dd>\n<p class=\"first\">‘linear’</p> <p>‘log’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>:</dt> <dd>The base of the logarithm</dd> <dt>\n<em>nonposx</em>/<em>nonposy</em>: [‘mask’ | ‘clip’ ]</dt> <dd>non-positive values in <em>x</em> or <em>y</em> can be masked as invalid, or clipped to a very small positive number</dd> <dt>\n<em>subsx</em>/<em>subsy</em>:</dt> <dd>\n<p class=\"first\">Where to place the subticks between each major tick. Should be a sequence of integers. For example, in a log10 scale: <code>[2, 3, 4, 5, 6, 7, 8, 9]</code></p> <p class=\"last\">will place 8 logarithmically spaced minor ticks between each major tick.</p> </dd> </dl> </div>\n</blockquote> <p>‘logit’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>nonpos</em>: [‘mask’ | ‘clip’ ]</dt> <dd>values beyond ]0, 1[ can be masked as invalid, or clipped to a number very close to 0 or 1</dd> </dl> </div>\n</blockquote> <p>‘symlog’</p> <blockquote class=\"last\"> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>:</dt> <dd>The base of the logarithm</dd> <dt>\n<em>linthreshx</em>/<em>linthreshy</em>:</dt> <dd>The range (-<em>x</em>, <em>x</em>) within which the plot is linear (to avoid having the plot go to infinity around zero).</dd> <dt>\n<em>subsx</em>/<em>subsy</em>:</dt> <dd>\n<p class=\"first\">Where to place the subticks between each major tick. Should be a sequence of integers. For example, in a log10 scale: <code>[2, 3, 4, 5, 6, 7, 8, 9]</code></p> <p class=\"last\">will place 8 logarithmically spaced minor ticks between each major tick.</p> </dd> <dt>\n<em>linscalex</em>/<em>linscaley</em>:</dt> <dd>This allows the linear range (-<em>linthresh</em> to <em>linthresh</em>) to be stretched relative to the logarithmic range. Its value is the number of decades to use for each half of the linear range. For example, when <em>linscale</em> == 1.0 (the default), the space used for the positive and negative halves of the linear range will be equal to one decade in the logarithmic range.</dd> </dl> </div>\n</blockquote> </dd> </dl> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_yticklabels\"><code>set_yticklabels(labels, fontdict=None, minor=False, **kwargs)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">set_yticklabels(labels, fontdict=None, minor=False, **kwargs)\n</pre> <p>Set the y tick labels with list of strings <em>labels</em>. Return a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> <p><em>kwargs</em> set <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties for the labels. Valid properties are</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"30%\"> <col width=\"70%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_backgroundcolor\" title=\"matplotlib.text.Text.set_backgroundcolor\"><code>backgroundcolor</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>bbox</code></a></td> <td>FancyBboxPatch prop dict</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_box\" title=\"matplotlib.text.Text.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_on\" title=\"matplotlib.text.Text.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_path\" title=\"matplotlib.text.Text.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_color\" title=\"matplotlib.text.Text.set_color\"><code>color</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_family\" title=\"matplotlib.text.Text.set_family\"><code>family</code></a> or name or fontname or fontfamily</td> <td>[FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ | ‘monospace’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_fontproperties\" title=\"matplotlib.text.Text.set_fontproperties\"><code>fontproperties</code></a> or font_properties</td> <td>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_horizontalalignment\" title=\"matplotlib.text.Text.set_horizontalalignment\"><code>horizontalalignment</code></a> or ha</td> <td>[ ‘center’ | ‘right’ | ‘left’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_linespacing\" title=\"matplotlib.text.Text.set_linespacing\"><code>linespacing</code></a></td> <td>float (multiple of font size)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_multialignment\" title=\"matplotlib.text.Text.set_multialignment\"><code>multialignment</code></a></td> <td>[‘left’ | ‘right’ | ‘center’ ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>position</code></a></td> <td>(x,y)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation\" title=\"matplotlib.text.Text.set_rotation\"><code>rotation</code></a></td> <td>[ angle in degrees | ‘vertical’ | ‘horizontal’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation_mode\" title=\"matplotlib.text.Text.set_rotation_mode\"><code>rotation_mode</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_size\" title=\"matplotlib.text.Text.set_size\"><code>size</code></a> or fontsize</td> <td>[size in points | ‘xx-small’ | ‘x-small’ | ‘small’ | ‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_stretch\" title=\"matplotlib.text.Text.set_stretch\"><code>stretch</code></a> or fontstretch</td> <td>[a numeric value in range 0-1000 | ‘ultra-condensed’ | ‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_style\" title=\"matplotlib.text.Text.set_style\"><code>style</code></a> or fontstyle</td> <td>[ ‘normal’ | ‘italic’ | ‘oblique’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_text\" title=\"matplotlib.text.Text.set_text\"><code>text</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_usetex\" title=\"matplotlib.text.Text.set_usetex\"><code>usetex</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_variant\" title=\"matplotlib.text.Text.set_variant\"><code>variant</code></a> or fontvariant</td> <td>[ ‘normal’ | ‘small-caps’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_verticalalignment\" title=\"matplotlib.text.Text.set_verticalalignment\"><code>verticalalignment</code></a> or va or ma</td> <td>[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_weight\" title=\"matplotlib.text.Text.set_weight\"><code>weight</code></a> or fontweight</td> <td>[a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ | ‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_wrap\" title=\"matplotlib.text.Text.set_wrap\"><code>wrap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_x\" title=\"matplotlib.text.Text.set_x\"><code>x</code></a></td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_y\" title=\"matplotlib.text.Text.set_y\"><code>y</code></a></td> <td>float</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>ACCEPTS: sequence of strings</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_yticks\"><code>set_yticks(ticks, minor=False)</code></dt> <dd>\n<p>Set the y ticks with list of <em>ticks</em></p> <p>ACCEPTS: sequence of floats</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>minor</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>Sets the minor ticks if <em>True</em>\n</dd> </dl> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.specgram\"><code>specgram(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, **kwargs)</code></dt> <dd>\n<p>Plot a spectrogram.</p> <p>Call signature:</p> <pre data-language=\"python\">specgram(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,\n         window=mlab.window_hanning, noverlap=128,\n         cmap=None, xextent=None, pad_to=None, sides='default',\n         scale_by_freq=None, mode='default', scale='default',\n         **kwargs)\n</pre> <p>Compute and plot a spectrogram of data in <em>x</em>. Data are split into <em>NFFT</em> length segments and the spectrum of each section is computed. The windowing function <em>window</em> is applied to each segment, and the amount of overlap of each segment is specified with <em>noverlap</em>. The spectrogram is plotted as a colormap (using imshow).</p> <dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>mode</em>: [ ‘default’ | ‘psd’ | ‘magnitude’ | ‘angle’ | ‘phase’ ]</dt> <dd>What sort of spectrum to use. Default is ‘psd’. which takes the power spectral density. ‘complex’ returns the complex-valued frequency spectrum. ‘magnitude’ returns the magnitude spectrum. ‘angle’ returns the phase spectrum without unwrapping. ‘phase’ returns the phase spectrum with unwrapping.</dd> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between blocks. The default value is 128.</dd> <dt>\n<em>scale</em>: [ ‘default’ | ‘linear’ | ‘dB’ ]</dt> <dd>The scaling of the values in the <em>spec</em>. ‘linear’ is no scaling. ‘dB’ returns the values in dB scale. When <em>mode</em> is ‘psd’, this is dB power (10 * log10). Otherwise this is dB amplitude (20 * log10). ‘default’ is ‘dB’ if <em>mode</em> is ‘psd’ or ‘magnitude’ and ‘linear’ otherwise. This must be ‘linear’ if <em>mode</em> is ‘angle’ or ‘phase’.</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> <dt>\n<em>cmap</em>:</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance; if <em>None</em>, use default determined by rc</dd> <dt>\n<em>xextent</em>:</dt> <dd>The image extent along the x-axis. xextent = (xmin,xmax) The default is (0,max(bins)), where bins is the return value from <a class=\"reference internal\" href=\"mlab_api#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a>\n</dd> <dt>\n<em>kwargs</em>:</dt> <dd>Additional kwargs are passed on to imshow which makes the specgram image</dd> </dl> </dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><em>detrend</em> and <em>scale_by_freq</em> only apply when <em>mode</em> is set to ‘psd’</p> </div> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>t</em>, <em>im</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 2-D array</dt> <dd>columns are the periodograms of successive segments</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the rows in <em>spectrum</em>\n</dd> <dt>\n<em>t</em>: 1-D array</dt> <dd>The times corresponding to midpoints of segments (i.e the columns in <em>spectrum</em>)</dd> <dt>\n<em>im</em>: instance of class <a class=\"reference internal\" href=\"image_api#matplotlib.image.AxesImage\" title=\"matplotlib.image.AxesImage\"><code>AxesImage</code></a>\n</dt> <dd>The image created by imshow containing the spectrogram</dd> </dl> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/specgram_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/specgram_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/specgram_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/specgram_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/specgram_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/specgram_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>psd()</code></dt> <dd>\n<code>psd()</code> differs in the default overlap; in returning the mean of the segment periodograms; in not returning times; and in generating a line plot instead of colormap.</dd> <dt><code>magnitude_spectrum()</code></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘magnitude’. Plots a line instead of a colormap.</dd> <dt><code>angle_spectrum()</code></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘angle’. Plots a line instead of a colormap.</dd> <dt><code>phase_spectrum()</code></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘phase’. Plots a line instead of a colormap.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.spy\"><code>spy(Z, precision=0, marker=None, markersize=None, aspect='equal', origin='upper', **kwargs)</code></dt> <dd>\n<p>Plot the sparsity pattern on a 2-D array.</p> <p><code>spy(Z)</code> plots the sparsity pattern of the 2-D array <em>Z</em>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>Z</strong> : sparse array (n, m)</p> <blockquote> <div>\n<p>The array to be plotted.</p> </div>\n</blockquote> <p><strong>precision</strong> : float, optional, default: 0</p> <blockquote> <div>\n<p>If <em>precision</em> is 0, any non-zero value will be plotted; else, values of <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-102fd18c41.png\" style=\"position: relative; bottom: -7px\"> will be plotted.</p> <p>For <code>scipy.sparse.spmatrix</code> instances, there is a special case: if <em>precision</em> is ‘present’, any value present in the array will be plotted, even if it is identically zero.</p> </div>\n</blockquote> <p><strong>origin</strong> : [“upper”, “lower”], optional, default: “upper”</p> <blockquote> <div>\n<p>Place the [0,0] index of the array in the upper left or lower left corner of the axes.</p> </div>\n</blockquote> <p><strong>aspect</strong> : [‘auto’ | ‘equal’ | scalar], optional, default: “equal”</p> <blockquote> <div>\n<p>If ‘equal’, and <code>extent</code> is None, changes the axes aspect ratio to match that of the image. If <code>extent</code> is not <code>None</code>, the axes aspect ratio is changed to match that of the extent.</p> <p>If ‘auto’, changes the image aspect ratio to match that of the axes.</p> <p>If None, default to rc <code>image.aspect</code> value.</p> </div>\n</blockquote> <p><strong>Two plotting styles are available: image or marker. Both</strong></p> <p><strong>are available for full arrays, but only the marker style</strong></p> <p><strong>works for :class:`scipy.sparse.spmatrix` instances.</strong></p> <p><strong>If *marker* and *markersize* are *None*, an image will be</strong></p> <p><strong>returned and any remaining kwargs are passed to</strong></p> <p><strong>:func:`~matplotlib.pyplot.imshow`; else, a</strong></p> <p><strong>:class:`~matplotlib.lines.Line2D` object will be returned with</strong></p> <p><strong>the value of marker determining the marker type, and any</strong></p> <p><strong>remaining kwargs passed to the</strong></p> <p><strong>:meth:`~matplotlib.axes.Axes.plot` method.</strong></p> <p><strong>If *marker* and *markersize* are *None*, useful kwargs include:</strong></p> <p><strong>* *cmap*</strong></p> <p class=\"last\"><strong>* *alpha*</strong></p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>imshow</code></dt> <dd>for image options.</dd> <dt><code>plot</code></dt> <dd>for plotting options</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.stackplot\"><code>stackplot(x, *args, **kwargs)</code></dt> <dd>\n<p>Draws a stacked area plot.</p> <p><em>x</em> : 1d array of dimension N</p> <dl class=\"docutils\"> <dt>\n<em>y</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2d array of dimension MxN, OR any number 1d arrays each of dimension</span>\n</dt> <dd>\n<p class=\"first\">1xN. The data is assumed to be unstacked. Each of the following calls is legal:</p> <pre data-language=\"python\">stackplot(x, y)               # where y is MxN\nstackplot(x, y1, y2, y3, y4)  # where y1, y2, y3, y4, are all 1xNm\n</pre> </dd> </dl> <p>Keyword arguments:</p> <dl class=\"docutils\"> <dt>\n<em>baseline</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[‘zero’, ‘sym’, ‘wiggle’, ‘weighted_wiggle’]</span>\n</dt> <dd>Method used to calculate the baseline. ‘zero’ is just a simple stacked plot. ‘sym’ is symmetric around zero and is sometimes called <code>ThemeRiver</code>. ‘wiggle’ minimizes the sum of the squared slopes. ‘weighted_wiggle’ does the same but weights to account for size of each layer. It is also called <code>Streamgraph</code>-layout. More details can be found at <a class=\"reference external\" href=\"http://www.leebyron.com/else/streamgraph/\">http://www.leebyron.com/else/streamgraph/</a>.</dd> </dl> <p><em>labels</em> : A list or tuple of labels to assign to each data series.</p> <dl class=\"docutils\"> <dt>\n<em>colors</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">A list or tuple of colors. These will be cycled through and</span>\n</dt> <dd>used to colour the stacked areas. All other keyword arguments are passed to <code>fill_between()</code>\n</dd> </dl> <p>Returns <em>r</em> : A list of <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a>, one for each element in the stacked area plot.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.axes.Axes.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.start_pan\"><code>start_pan(x, y, button)</code></dt> <dd>\n<p>Called when a pan operation has started.</p> <p><em>x</em>, <em>y</em> are the mouse coordinates in display coords. button is the mouse button number:</p> <ul class=\"simple\"> <li>1: LEFT</li> <li>2: MIDDLE</li> <li>3: RIGHT</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Intended to be overridden by new projection types.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.stem\"><code>stem(*args, **kwargs)</code></dt> <dd>\n<p>Create a stem plot.</p> <p>Call signatures:</p> <pre data-language=\"python\">stem(y, linefmt='b-', markerfmt='bo', basefmt='r-')\nstem(x, y, linefmt='b-', markerfmt='bo', basefmt='r-')\n</pre> <p>A stem plot plots vertical lines (using <em>linefmt</em>) at each <em>x</em> location from the baseline to <em>y</em>, and places a marker there using <em>markerfmt</em>. A horizontal line at 0 is is plotted using <em>basefmt</em>.</p> <p>If no <em>x</em> values are provided, the default is (0, 1, ..., len(y) - 1)</p> <p>Return value is a tuple (<em>markerline</em>, <em>stemlines</em>, <em>baseline</em>).</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\">This <a class=\"reference external\" href=\"http://www.mathworks.com/help/techdoc/ref/stem.html\">document</a> for details.</p> </div> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/stem_plot.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/stem_plot.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/stem_plot.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/stem_plot.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/stem_plot.png\" src=\"http://matplotlib.org/1.5.1/_images/stem_plot.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.step\"><code>step(x, y, *args, **kwargs)</code></dt> <dd>\n<p>Make a step plot.</p> <p>Call signature:</p> <pre data-language=\"python\">step(x, y, *args, **kwargs)\n</pre> <p>Additional keyword args to <code>step()</code> are the same as those for <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a>.</p> <p><em>x</em> and <em>y</em> must be 1-D sequences, and it is assumed, but not checked, that <em>x</em> is uniformly increasing.</p> <p>Keyword arguments:</p> <dl class=\"docutils\"> <dt>\n<em>where</em>: [ ‘pre’ | ‘post’ | ‘mid’ ]</dt> <dd>\n<p class=\"first\">If ‘pre’ (the default), the interval from x[i] to x[i+1] has level y[i+1].</p> <p>If ‘post’, that interval has level y[i].</p> <p class=\"last\">If ‘mid’, the jumps in <em>y</em> occur half-way between the <em>x</em>-values.</p> </dd> </dl> <p>Return value is a list of lines that were added.</p> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.streamplot\"><code>streamplot(x, y, u, v, density=1, linewidth=None, color=None, cmap=None, norm=None, arrowsize=1, arrowstyle='-|&gt;', minlength=0.1, transform=None, zorder=1, start_points=None)</code></dt> <dd>\n<p>Draws streamlines of a vector flow.</p> <dl class=\"docutils\"> <dt>\n<em>x</em>, <em>y</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1d arrays</span>\n</dt> <dd>an <em>evenly spaced</em> grid.</dd> <dt>\n<em>u</em>, <em>v</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2d arrays</span>\n</dt> <dd>x and y-velocities. Number of rows should match length of y, and the number of columns should match x.</dd> <dt>\n<em>density</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or 2-tuple</span>\n</dt> <dd>Controls the closeness of streamlines. When <code>density = 1</code>, the domain is divided into a 30x30 grid—<em>density</em> linearly scales this grid. Each cell in the grid can have, at most, one traversing streamline. For different densities in each direction, use [density_x, density_y].</dd> <dt>\n<em>linewidth</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">numeric or 2d array</span>\n</dt> <dd>vary linewidth when given a 2d array with the same shape as velocities.</dd> <dt>\n<em>color</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">matplotlib color code, or 2d array</span>\n</dt> <dd>Streamline color. When given an array with the same shape as velocities, <em>color</em> values are converted to colors using <em>cmap</em>.</dd> <dt>\n<em>cmap</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a></span>\n</dt> <dd>Colormap used to plot streamlines and arrows. Only necessary when using an array input for <em>color</em>.</dd> <dt>\n<em>norm</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a></span>\n</dt> <dd>Normalize object used to scale luminance data to 0, 1. If None, stretch (min, max) to (0, 1). Only necessary when <em>color</em> is an array.</dd> <dt>\n<em>arrowsize</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>Factor scale arrow size.</dd> <dt>\n<em>arrowstyle</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span>\n</dt> <dd>Arrow style specification. See <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a>.</dd> <dt>\n<em>minlength</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>Minimum length of streamline in axes coordinates.</dd> <dt>\n<em>start_points</em>: Nx2 array</dt> <dd>Coordinates of starting points for the streamlines. In data coordinates, the same as the <code>x</code> and <code>y</code> arrays.</dd> <dt>\n<em>zorder</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span>\n</dt> <dd>any number</dd> </dl> <p>Returns:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>stream_container</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">StreamplotSet</span>\n</dt> <dd>\n<p class=\"first\">Container object with attributes</p> <blockquote> <div>\n<ul class=\"simple\"> <li>lines: <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> of streamlines</li> <li>arrows: collection of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>matplotlib.patches.FancyArrowPatch</code></a> objects representing arrows half-way along stream lines.</li> </ul> </div>\n</blockquote> <p class=\"last\">This container will probably change in the future to allow changes to the colormap, alpha, etc. for both lines and arrows, but these changes should be backward compatible.</p> </dd> </dl> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.table\"><code>table(**kwargs)</code></dt> <dd>\n<p>Add a table to the current axes.</p> <p>Call signature:</p> <pre data-language=\"python\">table(cellText=None, cellColours=None,\n      cellLoc='right', colWidths=None,\n      rowLabels=None, rowColours=None, rowLoc='left',\n      colLabels=None, colColours=None, colLoc='center',\n      loc='bottom', bbox=None):\n</pre> <p>Returns a <code>matplotlib.table.Table</code> instance. For finer grained control over tables, use the <code>Table</code> class and add it to the axes with <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.add_table\" title=\"matplotlib.axes.Axes.add_table\"><code>add_table()</code></a>.</p> <p>Thanks to John Gill for providing the class and table.</p> <p>kwargs control the <code>Table</code> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"35%\"> <col width=\"65%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><code>fontsize</code></td> <td>a float in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.text\"><code>text(x, y, s, fontdict=None, withdash=False, **kwargs)</code></dt> <dd>\n<p>Add text to the axes.</p> <p>Add text in string <code>s</code> to axis at location <code>x</code>, <code>y</code>, data coordinates.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : scalars</p> <blockquote> <div>\n<p>data coordinates</p> </div>\n</blockquote> <p><strong>s</strong> : string</p> <blockquote> <div>\n<p>text</p> </div>\n</blockquote> <p><strong>fontdict</strong> : dictionary, optional, default: None</p> <blockquote> <div>\n<p>A dictionary to override the default text properties. If fontdict is None, the defaults are determined by your rc parameters.</p> </div>\n</blockquote> <p><strong>withdash</strong> : boolean, optional, default: False</p> <blockquote> <div>\n<p>Creates a <a class=\"reference internal\" href=\"text_api#matplotlib.text.TextWithDash\" title=\"matplotlib.text.TextWithDash\"><code>TextWithDash</code></a> instance instead of a <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instance.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-even field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties.</p> <blockquote class=\"last\"> <div>\n<p>Other miscellaneous text parameters.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>Individual keyword arguments can be used to override any given parameter:</p> <pre data-language=\"python\">&gt;&gt;&gt; text(x, y, s, fontsize=12)\n</pre> <p>The default transform specifies that text is in data coords, alternatively, you can specify text in axis coords (0,0 is lower-left and 1,1 is upper-right). The example below places text in the center of the axes:</p> <pre data-language=\"python\">&gt;&gt;&gt; text(0.5, 0.5,'matplotlib', horizontalalignment='center',\n...      verticalalignment='center',\n...      transform=ax.transAxes)\n</pre> <p>You can put a rectangular box around the text instance (e.g., to set a background color) by using the keyword <code>bbox</code>. <code>bbox</code> is a dictionary of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>Rectangle</code></a> properties. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.tick_params\"><code>tick_params(axis='both', **kwargs)</code></dt> <dd>\n<p>Change the appearance of ticks and tick labels.</p> <p>Keyword arguments:</p> <dl class=\"docutils\"> <dt>\n<em>axis</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[‘x’ | ‘y’ | ‘both’]</span>\n</dt> <dd>Axis on which to operate; default is ‘both’.</dd> <dt>\n<em>reset</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[True | False]</span>\n</dt> <dd>If <em>True</em>, set all parameters to defaults before processing other keyword arguments. Default is <em>False</em>.</dd> <dt>\n<em>which</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[‘major’ | ‘minor’ | ‘both’]</span>\n</dt> <dd>Default is ‘major’; apply arguments to <em>which</em> ticks.</dd> <dt>\n<em>direction</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[‘in’ | ‘out’ | ‘inout’]</span>\n</dt> <dd>Puts ticks inside the axes, outside the axes, or both.</dd> <dt><em>length</em></dt> <dd>Tick length in points.</dd> <dt><em>width</em></dt> <dd>Tick width in points.</dd> <dt><em>color</em></dt> <dd>Tick color; accepts any mpl color spec.</dd> <dt><em>pad</em></dt> <dd>Distance in points between tick and label.</dd> <dt><em>labelsize</em></dt> <dd>Tick label font size in points or as a string (e.g., ‘large’).</dd> <dt><em>labelcolor</em></dt> <dd>Tick label color; mpl color spec.</dd> <dt><em>colors</em></dt> <dd>Changes the tick color and the label color to the same value: mpl color spec.</dd> <dt><em>zorder</em></dt> <dd>Tick and label zorder.</dd> <dt>\n<em>bottom</em>, <em>top</em>, <em>left</em>, <em>right</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[bool | ‘on’ | ‘off’]</span>\n</dt> <dd>controls whether to draw the respective ticks.</dd> <dt>\n<em>labelbottom</em>, <em>labeltop</em>, <em>labelleft</em>, <em>labelright</em>\n</dt> <dd>Boolean or [‘on’ | ‘off’], controls whether to draw the respective tick labels.</dd> </dl> <p>Example:</p> <pre data-language=\"python\">ax.tick_params(direction='out', length=6, width=2, colors='r')\n</pre> <p>This will make all major ticks be red, pointing out of the box, and with dimensions 6 points by 2 points. Tick labels will also be red.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.ticklabel_format\"><code>ticklabel_format(**kwargs)</code></dt> <dd>\n<p>Change the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.ScalarFormatter\" title=\"matplotlib.ticker.ScalarFormatter\"><code>ScalarFormatter</code></a> used by default for linear axes.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Keyword</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>style</em></td> <td>[ ‘sci’ (or ‘scientific’) | ‘plain’ ] plain turns off scientific notation</td> </tr> <tr class=\"row-odd\">\n<td><em>scilimits</em></td> <td>(m, n), pair of integers; if <em>style</em> is ‘sci’, scientific notation will be used for numbers outside the range 10`m`:sup: to 10`n`:sup:. Use (0,0) to include all numbers.</td> </tr> <tr class=\"row-even\">\n<td><em>useOffset</em></td> <td>[True | False | offset]; if True, the offset will be calculated as needed; if False, no offset will be used; if a numeric offset is specified, it will be used.</td> </tr> <tr class=\"row-odd\">\n<td><em>axis</em></td> <td>[ ‘x’ | ‘y’ | ‘both’ ]</td> </tr> <tr class=\"row-even\">\n<td><em>useLocale</em></td> <td>If True, format the number according to the current locale. This affects things such as the character used for the decimal separator. If False, use C-style (English) formatting. The default setting is controlled by the axes.formatter.use_locale rcparam.</td> </tr> </tbody> </table> </div>\n</blockquote> <p>Only the major ticks are affected. If the method is called when the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.ScalarFormatter\" title=\"matplotlib.ticker.ScalarFormatter\"><code>ScalarFormatter</code></a> is not the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>Formatter</code></a> being used, an <code>AttributeError</code> will be raised.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.tricontour\"><code>tricontour(*args, **kwargs)</code></dt> <dd>\n<p>Draw contours on an unstructured triangular grid. <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tricontour\" title=\"matplotlib.pyplot.tricontour\"><code>tricontour()</code></a> and <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tricontourf\" title=\"matplotlib.pyplot.tricontourf\"><code>tricontourf()</code></a> draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.</p> <p>The triangulation can be specified in one of two ways; either:</p> <pre data-language=\"python\">tricontour(triangulation, ...)\n</pre> <p>where triangulation is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>matplotlib.tri.Triangulation</code></a> object, or</p> <pre data-language=\"python\">tricontour(x, y, ...)\ntricontour(x, y, triangles, ...)\ntricontour(x, y, triangles=triangles, ...)\ntricontour(x, y, mask=mask, ...)\ntricontour(x, y, triangles, mask=mask, ...)\n</pre> <p>in which case a Triangulation object will be created. See <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> for a explanation of these possibilities.</p> <p>The remaining arguments may be:</p> <pre data-language=\"python\">tricontour(..., Z)\n</pre> <p>where <em>Z</em> is the array of values to contour, one per point in the triangulation. The level values are chosen automatically.</p> <pre data-language=\"python\">tricontour(..., Z, N)\n</pre> <p>contour <em>N</em> automatically-chosen levels.</p> <pre data-language=\"python\">tricontour(..., Z, V)\n</pre> <p>draw contour lines at the values specified in sequence <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">tricontourf(..., Z, V)\n</pre> <p>fill the (len(<em>V</em>)-1) regions between the values in <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">tricontour(Z, **kwargs)\n</pre> <p>Use keyword args to control colors, linewidth, origin, cmap ... see below for more details.</p> <p><code>C = tricontour(...)</code> returns a <code>TriContourSet</code> object.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>colors</em>: [ <em>None</em> | string | (mpl_colors) ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the colormap specified by cmap will be used.</p> <p>If a string, like ‘r’ or ‘red’, all levels will be plotted in this color.</p> <p class=\"last\">If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</p> </dd> <dt>\n<em>alpha</em>: float</dt> <dd>The alpha blending value</dd> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A cm <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or <em>None</em>. If <em>cmap</em> is <em>None</em> and <em>colors</em> is <em>None</em>, a default Colormap is used.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance for scaling data values to colors. If <em>norm</em> is <em>None</em> and <em>colors</em> is <em>None</em>, the default linear scaling is used.</dd> <dt>\n<em>levels</em> [level0, level1, ..., leveln]</dt> <dd>A list of floating point numbers indicating the level curves to draw, in increasing order; e.g., to draw just the zero contour pass <code>levels=[0]</code>\n</dd> <dt>\n<em>origin</em>: [ <em>None</em> | ‘upper’ | ‘lower’ | ‘image’ ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the first value of <em>Z</em> will correspond to the lower left corner, location (0,0). If ‘image’, the rc value for <code>image.origin</code> will be used.</p> <p class=\"last\">This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </dd> </dl> <p><em>extent</em>: [ <em>None</em> | (x0,x1,y0,y1) ]</p> <blockquote> <div>\n<p>If <em>origin</em> is not <em>None</em>, then <em>extent</em> is interpreted as in <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow()</code></a>: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If <em>origin</em> is <em>None</em>, then (<em>x0</em>, <em>y0</em>) is the position of Z[0,0], and (<em>x1</em>, <em>y1</em>) is the position of Z[-1,-1].</p> <p>This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>locator</em>: [ <em>None</em> | ticker.Locator subclass ]</dt> <dd>If <em>locator</em> is None, the default <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> is used. The locator is used to determine the contour levels if they are not given explicitly via the <em>V</em> argument.</dd> <dt>\n<em>extend</em>: [ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ]</dt> <dd>Unless this is ‘neither’, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range, but can be set via <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_under\" title=\"matplotlib.colors.Colormap.set_under\"><code>matplotlib.colors.Colormap.set_under()</code></a> and <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_over\" title=\"matplotlib.colors.Colormap.set_over\"><code>matplotlib.colors.Colormap.set_over()</code></a> methods.</dd> <dt>\n<em>xunits</em>, <em>yunits</em>: [ <em>None</em> | registered units ]</dt> <dd>Override axis units by specifying an instance of a <a class=\"reference internal\" href=\"units_api#matplotlib.units.ConversionInterface\" title=\"matplotlib.units.ConversionInterface\"><code>matplotlib.units.ConversionInterface</code></a>.</dd> </dl> </div>\n</blockquote> <p>tricontour-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>linewidths</em>: [ <em>None</em> | number | tuple of numbers ]</dt> <dd>\n<p class=\"first\">If <em>linewidths</em> is <em>None</em>, the default width in <code>lines.linewidth</code> in <code>matplotlibrc</code> is used.</p> <p>If a number, all levels will be plotted with this linewidth.</p> <p class=\"last\">If a tuple, different levels will be plotted with different linewidths in the order specified</p> </dd> <dt>\n<em>linestyles</em>: [ <em>None</em> | ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">If <em>linestyles</em> is <em>None</em>, the ‘solid’ is used.</p> <p><em>linestyles</em> can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.</p> <p class=\"last\">If contour is using a monochrome colormap and the contour level is less than 0, then the linestyle specified in <code>contour.negative_linestyle</code> in <code>matplotlibrc</code> will be used.</p> </dd> </dl> </div>\n</blockquote> <p>tricontourf-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>antialiased</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>enable antialiasing</dd> </dl> </div>\n</blockquote> <p>Note: tricontourf fills intervals that are closed at the top; that is, for boundaries <em>z1</em> and <em>z2</em>, the filled region is:</p> <pre data-language=\"python\">z1 &lt; z &lt;= z2\n</pre> <p>There is one exception: if the lowest boundary coincides with the minimum value of the <em>z</em> array, then that minimum value will be included in the lowest interval.</p> <p><strong>Examples:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id37\"> <img alt=\"../_images/tricontour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id38\"> <img alt=\"../_images/tricontour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.tricontourf\"><code>tricontourf(*args, **kwargs)</code></dt> <dd>\n<p>Draw contours on an unstructured triangular grid. <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tricontour\" title=\"matplotlib.pyplot.tricontour\"><code>tricontour()</code></a> and <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.tricontourf\" title=\"matplotlib.pyplot.tricontourf\"><code>tricontourf()</code></a> draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.</p> <p>The triangulation can be specified in one of two ways; either:</p> <pre data-language=\"python\">tricontour(triangulation, ...)\n</pre> <p>where triangulation is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>matplotlib.tri.Triangulation</code></a> object, or</p> <pre data-language=\"python\">tricontour(x, y, ...)\ntricontour(x, y, triangles, ...)\ntricontour(x, y, triangles=triangles, ...)\ntricontour(x, y, mask=mask, ...)\ntricontour(x, y, triangles, mask=mask, ...)\n</pre> <p>in which case a Triangulation object will be created. See <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> for a explanation of these possibilities.</p> <p>The remaining arguments may be:</p> <pre data-language=\"python\">tricontour(..., Z)\n</pre> <p>where <em>Z</em> is the array of values to contour, one per point in the triangulation. The level values are chosen automatically.</p> <pre data-language=\"python\">tricontour(..., Z, N)\n</pre> <p>contour <em>N</em> automatically-chosen levels.</p> <pre data-language=\"python\">tricontour(..., Z, V)\n</pre> <p>draw contour lines at the values specified in sequence <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">tricontourf(..., Z, V)\n</pre> <p>fill the (len(<em>V</em>)-1) regions between the values in <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">tricontour(Z, **kwargs)\n</pre> <p>Use keyword args to control colors, linewidth, origin, cmap ... see below for more details.</p> <p><code>C = tricontour(...)</code> returns a <code>TriContourSet</code> object.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>colors</em>: [ <em>None</em> | string | (mpl_colors) ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the colormap specified by cmap will be used.</p> <p>If a string, like ‘r’ or ‘red’, all levels will be plotted in this color.</p> <p class=\"last\">If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</p> </dd> <dt>\n<em>alpha</em>: float</dt> <dd>The alpha blending value</dd> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A cm <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or <em>None</em>. If <em>cmap</em> is <em>None</em> and <em>colors</em> is <em>None</em>, a default Colormap is used.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance for scaling data values to colors. If <em>norm</em> is <em>None</em> and <em>colors</em> is <em>None</em>, the default linear scaling is used.</dd> <dt>\n<em>levels</em> [level0, level1, ..., leveln]</dt> <dd>A list of floating point numbers indicating the level curves to draw, in increasing order; e.g., to draw just the zero contour pass <code>levels=[0]</code>\n</dd> <dt>\n<em>origin</em>: [ <em>None</em> | ‘upper’ | ‘lower’ | ‘image’ ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the first value of <em>Z</em> will correspond to the lower left corner, location (0,0). If ‘image’, the rc value for <code>image.origin</code> will be used.</p> <p class=\"last\">This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </dd> </dl> <p><em>extent</em>: [ <em>None</em> | (x0,x1,y0,y1) ]</p> <blockquote> <div>\n<p>If <em>origin</em> is not <em>None</em>, then <em>extent</em> is interpreted as in <a class=\"reference internal\" href=\"pyplot_api#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow()</code></a>: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If <em>origin</em> is <em>None</em>, then (<em>x0</em>, <em>y0</em>) is the position of Z[0,0], and (<em>x1</em>, <em>y1</em>) is the position of Z[-1,-1].</p> <p>This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>locator</em>: [ <em>None</em> | ticker.Locator subclass ]</dt> <dd>If <em>locator</em> is None, the default <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> is used. The locator is used to determine the contour levels if they are not given explicitly via the <em>V</em> argument.</dd> <dt>\n<em>extend</em>: [ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ]</dt> <dd>Unless this is ‘neither’, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range, but can be set via <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_under\" title=\"matplotlib.colors.Colormap.set_under\"><code>matplotlib.colors.Colormap.set_under()</code></a> and <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_over\" title=\"matplotlib.colors.Colormap.set_over\"><code>matplotlib.colors.Colormap.set_over()</code></a> methods.</dd> <dt>\n<em>xunits</em>, <em>yunits</em>: [ <em>None</em> | registered units ]</dt> <dd>Override axis units by specifying an instance of a <a class=\"reference internal\" href=\"units_api#matplotlib.units.ConversionInterface\" title=\"matplotlib.units.ConversionInterface\"><code>matplotlib.units.ConversionInterface</code></a>.</dd> </dl> </div>\n</blockquote> <p>tricontour-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>linewidths</em>: [ <em>None</em> | number | tuple of numbers ]</dt> <dd>\n<p class=\"first\">If <em>linewidths</em> is <em>None</em>, the default width in <code>lines.linewidth</code> in <code>matplotlibrc</code> is used.</p> <p>If a number, all levels will be plotted with this linewidth.</p> <p class=\"last\">If a tuple, different levels will be plotted with different linewidths in the order specified</p> </dd> <dt>\n<em>linestyles</em>: [ <em>None</em> | ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">If <em>linestyles</em> is <em>None</em>, the ‘solid’ is used.</p> <p><em>linestyles</em> can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.</p> <p class=\"last\">If contour is using a monochrome colormap and the contour level is less than 0, then the linestyle specified in <code>contour.negative_linestyle</code> in <code>matplotlibrc</code> will be used.</p> </dd> </dl> </div>\n</blockquote> <p>tricontourf-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>antialiased</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>enable antialiasing</dd> </dl> </div>\n</blockquote> <p>Note: tricontourf fills intervals that are closed at the top; that is, for boundaries <em>z1</em> and <em>z2</em>, the filled region is:</p> <pre data-language=\"python\">z1 &lt; z &lt;= z2\n</pre> <p>There is one exception: if the lowest boundary coincides with the minimum value of the <em>z</em> array, then that minimum value will be included in the lowest interval.</p> <p><strong>Examples:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id39\"> <img alt=\"../_images/tricontour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id40\"> <img alt=\"../_images/tricontour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.tripcolor\"><code>tripcolor(*args, **kwargs)</code></dt> <dd>\n<p>Create a pseudocolor plot of an unstructured triangular grid.</p> <p>The triangulation can be specified in one of two ways; either:</p> <pre data-language=\"python\">tripcolor(triangulation, ...)\n</pre> <p>where triangulation is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>matplotlib.tri.Triangulation</code></a> object, or</p> <pre data-language=\"python\">tripcolor(x, y, ...)\ntripcolor(x, y, triangles, ...)\ntripcolor(x, y, triangles=triangles, ...)\ntripcolor(x, y, mask=mask, ...)\ntripcolor(x, y, triangles, mask=mask, ...)\n</pre> <p>in which case a Triangulation object will be created. See <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> for a explanation of these possibilities.</p> <p>The next argument must be <em>C</em>, the array of color values, either one per point in the triangulation if color values are defined at points, or one per triangle in the triangulation if color values are defined at triangles. If there are the same number of points and triangles in the triangulation it is assumed that color values are defined at points; to force the use of color values at triangles use the kwarg <em>facecolors*=C instead of just *C</em>.</p> <p><em>shading</em> may be ‘flat’ (the default) or ‘gouraud’. If <em>shading</em> is ‘flat’ and C values are defined at points, the color values used for each triangle are from the mean C of the triangle’s three points. If <em>shading</em> is ‘gouraud’ then color values must be defined at points.</p> <p>The remaining kwargs are the same as for <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.pcolor\" title=\"matplotlib.axes.Axes.pcolor\"><code>pcolor()</code></a>.</p> <p><strong>Example:</strong></p> <blockquote> <div>\n<p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id41\"> <img alt=\"../_images/tripcolor_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/tripcolor_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id42\"> <img alt=\"../_images/tripcolor_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/tripcolor_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id43\"> <img alt=\"../_images/tripcolor_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/tripcolor_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_02.pdf\">pdf</a>)</span></p> </div> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.triplot\"><code>triplot(*args, **kwargs)</code></dt> <dd>\n<p>Draw a unstructured triangular grid as lines and/or markers.</p> <p>The triangulation to plot can be specified in one of two ways; either:</p> <pre data-language=\"python\">triplot(triangulation, ...)\n</pre> <p>where triangulation is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>matplotlib.tri.Triangulation</code></a> object, or</p> <pre data-language=\"python\">triplot(x, y, ...)\ntriplot(x, y, triangles, ...)\ntriplot(x, y, triangles=triangles, ...)\ntriplot(x, y, mask=mask, ...)\ntriplot(x, y, triangles, mask=mask, ...)\n</pre> <p>in which case a Triangulation object will be created. See <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> for a explanation of these possibilities.</p> <p>The remaining args and kwargs are the same as for <a class=\"reference internal\" href=\"#matplotlib.axes.Axes.plot\" title=\"matplotlib.axes.Axes.plot\"><code>plot()</code></a>.</p> <p>Return a list of 2 <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> containing respectively:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>the lines plotted for triangles edges</li> <li>the markers plotted for triangles nodes</li> </ul> </div>\n</blockquote> <p><strong>Example:</strong></p> <blockquote> <div>\n<p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id44\"> <img alt=\"../_images/triplot_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/triplot_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id45\"> <img alt=\"../_images/triplot_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/triplot_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_01.pdf\">pdf</a>)</span></p> </div> </div>\n</blockquote> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.twinx\"><code>twinx()</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">ax = twinx()\n</pre> <p>create a twin of Axes for generating a plot with a sharex x-axis but independent y axis. The y-axis of self will have ticks on left and the returned axes will have ticks on the right.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For those who are ‘picking’ artists while using twinx, pick events are only called for the artists in the top-most axes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.twiny\"><code>twiny()</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">ax = twiny()\n</pre> <p>create a twin of Axes for generating a plot with a shared y-axis but independent x axis. The x-axis of self will have ticks on bottom and the returned axes will have ticks on the top.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For those who are ‘picking’ artists while using twiny, pick events are only called for the artists in the top-most axes.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.update_datalim\"><code>update_datalim(xys, updatex=True, updatey=True)</code></dt> <dd>\n<p>Update the data lim bbox with seq of xy tups or equiv. 2-D array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.update_datalim_bounds\"><code>update_datalim_bounds(bounds)</code></dt> <dd>\n<p>Update the datalim to include the given <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a> <em>bounds</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.update_datalim_numerix\"><code>update_datalim_numerix(x, y)</code></dt> <dd>\n<p>Update the data lim bbox with seq of xy tups</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>Copy properties from <em>other</em> to <em>self</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.violin\"><code>violin(vpstats, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False)</code></dt> <dd>\n<p>Drawing function for violin plots.</p> <p>Call signature:</p> <pre data-language=\"python\">violin(vpstats, positions=None, vert=True, widths=0.5,\n       showmeans=False, showextrema=True, showmedians=False):\n</pre> <p>Draw a violin plot for each column of <code>vpstats</code>. Each filled area extends to represent the entire data range, with optional lines at the mean, the median, the minimum, and the maximum.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>vpstats</strong> : list of dicts</p> <blockquote> <div>\n<p>A list of dictionaries containing stats for each violin plot. Required keys are:</p> <ul class=\"simple\"> <li>\n<code>coords</code>: A list of scalars containing the coordinates that the violin’s kernel density estimate were evaluated at.</li> <li>\n<code>vals</code>: A list of scalars containing the values of the kernel density estimate at each of the coordinates given in <em>coords</em>.</li> <li>\n<code>mean</code>: The mean value for this violin’s dataset.</li> <li>\n<code>median</code>: The median value for this violin’s dataset.</li> <li>\n<code>min</code>: The minimum value for this violin’s dataset.</li> <li>\n<code>max</code>: The maximum value for this violin’s dataset.</li> </ul> </div>\n</blockquote> <p><strong>positions</strong> : array-like, default = [1, 2, ..., n]</p> <blockquote> <div>\n<p>Sets the positions of the violins. The ticks and limits are automatically set to match the positions.</p> </div>\n</blockquote> <p><strong>vert</strong> : bool, default = True.</p> <blockquote> <div>\n<p>If true, plots the violins veritcally. Otherwise, plots the violins horizontally.</p> </div>\n</blockquote> <p><strong>widths</strong> : array-like, default = 0.5</p> <blockquote> <div>\n<p>Either a scalar or a vector that sets the maximal width of each violin. The default is 0.5, which uses about half of the available horizontal space.</p> </div>\n</blockquote> <p><strong>showmeans</strong> : bool, default = False</p> <blockquote> <div>\n<p>If true, will toggle rendering of the means.</p> </div>\n</blockquote> <p><strong>showextrema</strong> : bool, default = True</p> <blockquote> <div>\n<p>If true, will toggle rendering of the extrema.</p> </div>\n</blockquote> <p><strong>showmedians</strong> : bool, default = False</p> <blockquote> <div>\n<p>If true, will toggle rendering of the medians.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>result</strong> : dict</p> <blockquote class=\"last\"> <div>\n<p>A dictionary mapping each component of the violinplot to a list of the corresponding collection instances created. The dictionary has the following keys:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>bodies</code>: A list of the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>matplotlib.collections.PolyCollection</code></a> instances containing the filled area of each violin.</li> <li>\n<code>cmeans</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the mean values of each of the violin’s distribution.</li> <li>\n<code>cmins</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the bottom of each violin’s distribution.</li> <li>\n<code>cmaxes</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the top of each violin’s distribution.</li> <li>\n<code>cbars</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the centers of each violin’s distribution.</li> <li>\n<code>cmedians</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the median values of each of the violin’s distribution.</li> </ul> </div>\n</blockquote> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.violinplot\"><code>violinplot(dataset, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False, points=100, bw_method=None)</code></dt> <dd>\n<p>Make a violin plot.</p> <blockquote> <div>\n<p>Call signature:</p> <pre data-language=\"python\">violinplot(dataset, positions=None, vert=True, widths=0.5,\n           showmeans=False, showextrema=True, showmedians=False,\n           points=100, bw_method=None):\n</pre> <p>Make a violin plot for each column of <em>dataset</em> or each vector in sequence <em>dataset</em>. Each filled area extends to represent the entire data range, with optional lines at the mean, the median, the minimum, and the maximum.</p> </div>\n</blockquote> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>dataset</strong> : Array or a sequence of vectors.</p> <blockquote> <div>\n<blockquote> <div>\n<p>The input data.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>positions <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like, default = [1, 2, ..., n]</span>\n</dt> <dd>\n<p class=\"first last\">Sets the positions of the violins. The ticks and limits are automatically set to match the positions.</p> </dd> <dt>vert <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default = True.</span>\n</dt> <dd>\n<p class=\"first last\">If true, creates a vertical violin plot. Otherwise, creates a horizontal violin plot.</p> </dd> <dt>widths <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like, default = 0.5</span>\n</dt> <dd>\n<p class=\"first last\">Either a scalar or a vector that sets the maximal width of each violin. The default is 0.5, which uses about half of the available horizontal space.</p> </dd> <dt>showmeans <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default = False</span>\n</dt> <dd>\n<p class=\"first last\">If <code>True</code>, will toggle rendering of the means.</p> </dd> <dt>showextrema <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default = True</span>\n</dt> <dd>\n<p class=\"first last\">If <code>True</code>, will toggle rendering of the extrema.</p> </dd> <dt>showmedians <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default = False</span>\n</dt> <dd>\n<p class=\"first last\">If <code>True</code>, will toggle rendering of the medians.</p> </dd> <dt>points <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">scalar, default = 100</span>\n</dt> <dd>\n<p class=\"first last\">Defines the number of points to evaluate each of the gaussian kernel density estimations at.</p> </dd> <dt>bw_method <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str, scalar or callable, optional</span>\n</dt> <dd>\n<p class=\"first last\">The method used to calculate the estimator bandwidth. This can be ‘scott’, ‘silverman’, a scalar constant or a callable. If a scalar, this will be used directly as <code>kde.factor</code>. If a callable, it should take a <code>GaussianKDE</code> instance as its only parameter and return a scalar. If None (default), ‘scott’ is used.</p> </dd> </dl> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>result</strong> : dict</p> <blockquote class=\"last\"> <div>\n<p>A dictionary mapping each component of the violinplot to a list of the corresponding collection instances created. The dictionary has the following keys:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>bodies</code>: A list of the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>matplotlib.collections.PolyCollection</code></a> instances containing the filled area of each violin.</li> <li>\n<code>cmeans</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the mean values of each of the violin’s distribution.</li> <li>\n<code>cmins</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the bottom of each violin’s distribution.</li> <li>\n<code>cmaxes</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the top of each violin’s distribution.</li> <li>\n<code>cbars</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the centers of each violin’s distribution.</li> <li>\n<code>cmedians</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the median values of each of the violin’s distribution.</li> </ul> </div>\n</blockquote> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘dataset’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.vlines\"><code>vlines(x, ymin, ymax, colors='k', linestyles='solid', label='', **kwargs)</code></dt> <dd>\n<p>Plot vertical lines.</p> <p>Plot vertical lines at each <code>x</code> from <code>ymin</code> to <code>ymax</code>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : scalar or 1D array_like</p> <blockquote> <div>\n<p>x-indexes where to plot the lines.</p> </div>\n</blockquote> <p><strong>ymin, ymax</strong> : scalar or 1D array_like</p> <blockquote> <div>\n<p>Respective beginning and end of each line. If scalars are provided, all lines will have same length.</p> </div>\n</blockquote> <p><strong>colors</strong> : array_like of colors, optional, default: ‘k’</p> <p><strong>linestyles</strong> : [‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’], optional</p> <p><strong>label</strong> : string, optional, default: ‘’</p> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>lines</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a> properties.</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>hlines</code></dt> <dd>horizontal lines</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘ymax’, ‘x’, ‘colors’, ‘ymin’.</li> </ul> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/vline_hline_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/vline_hline_demo.png\"> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.xaxis_date\"><code>xaxis_date(tz=None)</code></dt> <dd>\n<p>Sets up x-axis ticks and labels that treat the x data as dates.</p> <p><em>tz</em> is a timezone string or <code>tzinfo</code> instance. Defaults to rc value.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.xaxis_inverted\"><code>xaxis_inverted()</code></dt> <dd>\n<p>Returns <em>True</em> if the x-axis is inverted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.xcorr\"><code>xcorr(x, y, normed=True, detrend=<function detrend_none>, usevlines=True, maxlags=10, **kwargs)</function></code></dt> <dd>\n<p>Plot the cross correlation between <em>x</em> and <em>y</em>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : sequence of scalars of length n</p> <p><strong>y</strong> : sequence of scalars of length n</p> <p><strong>hold</strong> : boolean, optional, default: True</p> <p><strong>detrend</strong> : callable, optional, default: <code>mlab.detrend_none</code></p> <blockquote> <div>\n<p>x is detrended by the <code>detrend</code> callable. Default is no normalization.</p> </div>\n</blockquote> <p><strong>normed</strong> : boolean, optional, default: True</p> <blockquote> <div>\n<p>if True, normalize the data by the autocorrelation at the 0-th lag.</p> </div>\n</blockquote> <p><strong>usevlines</strong> : boolean, optional, default: True</p> <blockquote> <div>\n<p>if True, Axes.vlines is used to plot the vertical lines from the origin to the acorr. Otherwise, Axes.plot is used.</p> </div>\n</blockquote> <p><strong>maxlags</strong> : integer, optional, default: 10</p> <blockquote> <div>\n<p>number of lags to show. If None, will return all 2 * len(x) - 1 lags.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>(lags, c, line, b)</strong> : where:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>lags</code> are a length 2`maxlags+1 lag vector.</li> <li>\n<code>c</code> is the 2`maxlags+1 auto correlation vectorI</li> <li>\n<code>line</code> is a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance returned by <code>plot</code>.</li> <li>\n<code>b</code> is the x-axis (none, if plot is used).</li> </ul> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>linestyle</strong> : <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> prop, optional, default: None</p> <blockquote> <div>\n<p>Only used if usevlines is False.</p> </div>\n</blockquote> <p class=\"last\"><strong>marker</strong> : string, optional, default: ‘o’</p> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.yaxis_date\"><code>yaxis_date(tz=None)</code></dt> <dd>\n<p>Sets up y-axis ticks and labels that treat the y data as dates.</p> <p><em>tz</em> is a timezone string or <code>tzinfo</code> instance. Defaults to rc value.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.axes.Axes.yaxis_inverted\"><code>yaxis_inverted()</code></dt> <dd>\n<p>Returns <em>True</em> if the y-axis is inverted.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.axes.Axes.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/axes_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/axes_api.html</a>\n  </p>\n</div>\n","collections_api":"<h1 id=\"collections\">collections</h1> <p class=\"graphviz\"> <img src=\"http://matplotlib.org/1.5.1/_images/inheritance-e0e5921cb5aef756cc65c0fee19abc07762c6b19.png\" alt=\"Inheritance diagram of matplotlib.collections\" usemap=\"#inheritance829eaf436e\" class=\"inheritance\"> <map id=\"inheritance829eaf436e\" name=\"inheritance829eaf436e\"> <area shape=\"rect\" id=\"node1\" href=\"artist_api.html#matplotlib.artist.Artist\" target=\"_top\" title=\"Abstract base class for someone who renders into a\" alt=\"\" coords=\"21,160,80,176\"> <area shape=\"rect\" id=\"node9\" href=\"#matplotlib.collections.Collection\" target=\"_top\" title=\"Base class for Collections.  Must be subclassed to be usable.\" alt=\"\" coords=\"128,176,226,192\"> <area shape=\"rect\" id=\"node2\" href=\"cm_api.html#matplotlib.cm.ScalarMappable\" target=\"_top\" title=\"This is a mixin class to support scalar data to RGBA mapping.\" alt=\"\" coords=\"3,191,97,207\"> <area shape=\"rect\" id=\"node3\" href=\"#matplotlib.collections.AsteriskPolygonCollection\" target=\"_top\" title=\"Draw a collection of regular asterisks with *numsides* points.\" alt=\"\" coords=\"602,3,765,19\"> <area shape=\"rect\" id=\"node4\" href=\"#matplotlib.collections.RegularPolyCollection\" target=\"_top\" title=\"Draw a collection of regular polygons with *numsides*.\" alt=\"\" coords=\"428,35,572,51\"> <area shape=\"rect\" id=\"node16\" href=\"#matplotlib.collections.StarPolygonCollection\" target=\"_top\" title=\"Draw a collection of regular stars with *numsides* points.\" alt=\"\" coords=\"610,35,757,51\"> <area shape=\"rect\" id=\"node5\" href=\"#matplotlib.collections.BrokenBarHCollection\" target=\"_top\" title=\"A collection of horizontal bars spanning *yrange* with a sequence of\" alt=\"\" coords=\"610,66,757,82\"> <area shape=\"rect\" id=\"node6\" href=\"#matplotlib.collections.PolyCollection\" target=\"_top\" title=\"collections.PolyCollection\" alt=\"\" coords=\"442,66,557,82\"> <area shape=\"rect\" id=\"node7\" href=\"#matplotlib.collections.CircleCollection\" target=\"_top\" title=\"A collection of circles, drawn using splines.\" alt=\"\" coords=\"439,97,560,113\"> <area shape=\"rect\" id=\"node8\" title=\"Base class for collections that have an array of sizes.\" alt=\"\" coords=\"256,97,397,113\"> <area shape=\"rect\" id=\"node14\" href=\"#matplotlib.collections.PathCollection\" target=\"_top\" title=\"This is the most basic :class:`Collection` subclass.\" alt=\"\" coords=\"442,128,558,144\"> <area shape=\"rect\" id=\"node10\" href=\"#matplotlib.collections.EllipseCollection\" target=\"_top\" title=\"A collection of ellipses, drawn using splines.\" alt=\"\" coords=\"265,128,388,144\"> <area shape=\"rect\" id=\"node12\" href=\"#matplotlib.collections.LineCollection\" target=\"_top\" title=\"All parameters must be sequences or scalars; if scalars, they will\" alt=\"\" coords=\"269,160,384,176\"> <area shape=\"rect\" id=\"node13\" href=\"#matplotlib.collections.PatchCollection\" target=\"_top\" title=\"A generic collection of patches.\" alt=\"\" coords=\"266,191,387,207\"> <area shape=\"rect\" id=\"node15\" href=\"#matplotlib.collections.QuadMesh\" target=\"_top\" title=\"Class for the efficient drawing of a quadrilateral mesh.\" alt=\"\" coords=\"275,222,378,238\"> <area shape=\"rect\" id=\"node17\" href=\"#matplotlib.collections.TriMesh\" target=\"_top\" title=\"Class for the efficient drawing of a triangular mesh using\" alt=\"\" coords=\"282,253,371,270\"> <area shape=\"rect\" id=\"node11\" href=\"#matplotlib.collections.EventCollection\" target=\"_top\" title=\"A collection of discrete events.\" alt=\"\" coords=\"439,160,560,176\"> </map> </p>  <h2 id=\"matplotlib-collections\">matplotlib.collections</h2> <p id=\"module-matplotlib.collections\">Classes for the efficient drawing of large collections of objects that share most properties, e.g., a large number of line segments or polygons.</p> <p>The classes are not meant to be as flexible as their single element counterparts (e.g., you may not be able to select all line styles) but they are meant to be fast for common use cases (e.g., a large set of solid line segemnts)</p> <dl class=\"class\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection\"><code>class matplotlib.collections.AsteriskPolygonCollection(numsides, rotation=0, sizes=(1, ), **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.RegularPolyCollection\" title=\"matplotlib.collections.RegularPolyCollection\"><code>matplotlib.collections.RegularPolyCollection</code></a></p> <p>Draw a collection of regular asterisks with <em>numsides</em> points.</p> <dl class=\"docutils\"> <dt><em>numsides</em></dt> <dd>the number of sides of the polygon</dd> <dt><em>rotation</em></dt> <dd>the rotation of the polygon in radians</dd> <dt><em>sizes</em></dt> <dd>\n<p class=\"first\">gives the area of the circle circumscribing the regular polygon in points^2</p> <p>Valid Collection keyword arguments:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets)</p> <p class=\"last\">If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> </dd> </dl> <p>Example: see <code>examples/dynamic_collection.py</code> for complete example:</p> <pre data-language=\"python\">offsets = np.random.rand(20,2)\nfacecolors = [cm.jet(x) for x in np.random.rand(20)]\nblack = (0,0,0,1)\n\ncollection = RegularPolyCollection(\n    numsides=5, # a pentagon\n    rotation=0, sizes=(50,),\n    facecolors = facecolors,\n    edgecolors = (black,),\n    linewidths = (1,),\n    offsets = offsets,\n    transOffset = ax.transData,\n    )\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.AsteriskPolygonCollection.remove_callback\" title=\"matplotlib.collections.AsteriskPolygonCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_numsides\"><code>get_numsides()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_rotation\"><code>get_rotation()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_sizes\"><code>get_sizes()</code></dt> <dd>\n<p>Returns the sizes of the elements in the collection. The value represents the ‘area’ of the element.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The ‘area’ of each element.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.AsteriskPolygonCollection.add_callback\" title=\"matplotlib.collections.AsteriskPolygonCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.AsteriskPolygonCollection.set_facecolor\" title=\"matplotlib.collections.AsteriskPolygonCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.AsteriskPolygonCollection.set_edgecolor\" title=\"matplotlib.collections.AsteriskPolygonCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_paths\"><code>set_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_sizes\"><code>set_sizes(sizes, dpi=72.0)</code></dt> <dd>\n<p>Set the sizes of each member of the collection.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : ndarray or None</p> <blockquote> <div>\n<p>The size to set for each element of the collection. The value is the ‘area’ of the element.</p> </div>\n</blockquote> <p><strong>dpi</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The dpi of the canvas. Defaults to 72.0.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.AsteriskPolygonCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.BrokenBarHCollection\"><code>class matplotlib.collections.BrokenBarHCollection(xranges, yrange, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>matplotlib.collections.PolyCollection</code></a></p> <p>A collection of horizontal bars spanning <em>yrange</em> with a sequence of <em>xranges</em>.</p> <dl class=\"docutils\"> <dt><em>xranges</em></dt> <dd>sequence of (<em>xmin</em>, <em>xwidth</em>)</dd> <dt><em>yrange</em></dt> <dd>\n<p class=\"first\"><em>ymin</em>, <em>ywidth</em></p> <p>Valid Collection keyword arguments:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets)</p> <p class=\"last\">If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> </dd> </dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.BrokenBarHCollection.remove_callback\" title=\"matplotlib.collections.BrokenBarHCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_sizes\"><code>get_sizes()</code></dt> <dd>\n<p>Returns the sizes of the elements in the collection. The value represents the ‘area’ of the element.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The ‘area’ of each element.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.BrokenBarHCollection.add_callback\" title=\"matplotlib.collections.BrokenBarHCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.BrokenBarHCollection.set_facecolor\" title=\"matplotlib.collections.BrokenBarHCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.BrokenBarHCollection.set_edgecolor\" title=\"matplotlib.collections.BrokenBarHCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_paths\"><code>set_paths(verts, closed=True)</code></dt> <dd>\n<p>This allows one to delay initialization of the vertices.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_sizes\"><code>set_sizes(sizes, dpi=72.0)</code></dt> <dd>\n<p>Set the sizes of each member of the collection.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : ndarray or None</p> <blockquote> <div>\n<p>The size to set for each element of the collection. The value is the ‘area’ of the element.</p> </div>\n</blockquote> <p><strong>dpi</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The dpi of the canvas. Defaults to 72.0.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_verts\"><code>set_verts(verts, closed=True)</code></dt> <dd>\n<p>This allows one to delay initialization of the vertices.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_verts_and_codes\"><code>set_verts_and_codes(verts, codes)</code></dt> <dd>\n<p>This allows one to initialize vertices with path codes.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.span_where\"><code>static span_where(x, ymin, ymax, where, **kwargs)</code></dt> <dd>\n<p>Create a BrokenBarHCollection to plot horizontal bars from over the regions in <em>x</em> where <em>where</em> is True. The bars range on the y-axis from <em>ymin</em> to <em>ymax</em></p> <p>A <a class=\"reference internal\" href=\"#matplotlib.collections.BrokenBarHCollection\" title=\"matplotlib.collections.BrokenBarHCollection\"><code>BrokenBarHCollection</code></a> is returned. <em>kwargs</em> are passed on to the collection.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.BrokenBarHCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.CircleCollection\"><code>class matplotlib.collections.CircleCollection(sizes, **kwargs)</code></dt> <dd>\n<p>Bases: <code>matplotlib.collections._CollectionWithSizes</code></p> <p>A collection of circles, drawn using splines.</p> <p><em>sizes</em> Gives the area of the circle in points^2</p> <p>Valid Collection keyword arguments:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets)</p> <p>If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.CircleCollection.remove_callback\" title=\"matplotlib.collections.CircleCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.CircleCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.CircleCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_sizes\"><code>get_sizes()</code></dt> <dd>\n<p>Returns the sizes of the elements in the collection. The value represents the ‘area’ of the element.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The ‘area’ of each element.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.CircleCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.CircleCollection.add_callback\" title=\"matplotlib.collections.CircleCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.CircleCollection.set_facecolor\" title=\"matplotlib.collections.CircleCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.CircleCollection.set_edgecolor\" title=\"matplotlib.collections.CircleCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_paths\"><code>set_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_sizes\"><code>set_sizes(sizes, dpi=72.0)</code></dt> <dd>\n<p>Set the sizes of each member of the collection.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : ndarray or None</p> <blockquote> <div>\n<p>The size to set for each element of the collection. The value is the ‘area’ of the element.</p> </div>\n</blockquote> <p><strong>dpi</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The dpi of the canvas. Defaults to 72.0.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.CircleCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.CircleCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.CircleCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.Collection\"><code>class matplotlib.collections.Collection(edgecolors=None, facecolors=None, linewidths=None, linestyles='solid', antialiaseds=None, offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5.0, hatch=None, urls=None, offset_position='screen', zorder=1, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>matplotlib.artist.Artist</code></a>, <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a></p> <p>Base class for Collections. Must be subclassed to be usable.</p> <p>All properties in a collection must be sequences or scalars; if scalars, they will be converted to sequences. The property of the ith element of the collection is:</p> <pre data-language=\"python\">prop[i % len(props)]\n</pre> <p>Keyword arguments and default values:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>offset_position</em>: ‘screen’ (default) or ‘data’</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>hatch</em>: None</li> <li>\n<em>zorder</em>: 1</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets). If offset_position is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> <p>If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> <p>The use of <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> is optional. If the <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> matrix _A is not None (i.e., a call to set_array has been made), at draw time a call to scalar mappable will be made to set the face colors.</p> <p>Create a Collection</p> <p>%(Collection)s</p> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.Collection.remove_callback\" title=\"matplotlib.collections.Collection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.Collection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.Collection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.Collection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.Collection.add_callback\" title=\"matplotlib.collections.Collection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_paths\"><code>set_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.Collection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.Collection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.Collection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.EllipseCollection\"><code>class matplotlib.collections.EllipseCollection(widths, heights, angles, units='points', **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>matplotlib.collections.Collection</code></a></p> <p>A collection of ellipses, drawn using splines.</p> <dl class=\"docutils\"> <dt>\n<em>widths</em>: sequence</dt> <dd>lengths of first axes (e.g., major axis lengths)</dd> <dt>\n<em>heights</em>: sequence</dt> <dd>lengths of second axes</dd> <dt>\n<em>angles</em>: sequence</dt> <dd>angles of first axes, degrees CCW from the X-axis</dd> </dl> <p><em>units</em>: [‘points’ | ‘inches’ | ‘dots’ | ‘width’ | ‘height’ | ‘x’ | ‘y’ | ‘xy’]</p> <blockquote> <div>units in which majors and minors are given; ‘width’ and ‘height’ refer to the dimensions of the axes, while ‘x’ and ‘y’ refer to the <em>offsets</em> data units. ‘xy’ differs from all others in that the angle as plotted varies with the aspect ratio, and equals the specified angle only when the aspect ratio is unity. Hence it behaves the same as the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Ellipse\" title=\"matplotlib.patches.Ellipse\"><code>Ellipse</code></a> with axes.transData as its transform.</div>\n</blockquote> <p>Additional kwargs inherited from the base <a class=\"reference internal\" href=\"#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a>:</p> <blockquote> <div>\n<p>Valid Collection keyword arguments:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets)</p> <p>If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.EllipseCollection.remove_callback\" title=\"matplotlib.collections.EllipseCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EllipseCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EllipseCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EllipseCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.EllipseCollection.add_callback\" title=\"matplotlib.collections.EllipseCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.EllipseCollection.set_facecolor\" title=\"matplotlib.collections.EllipseCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.EllipseCollection.set_edgecolor\" title=\"matplotlib.collections.EllipseCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_paths\"><code>set_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EllipseCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EllipseCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EllipseCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.EventCollection\"><code>class matplotlib.collections.EventCollection(positions, orientation=None, lineoffset=0, linelength=1, linewidth=None, color=None, linestyle='solid', antialiased=None, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a></p> <p>A collection of discrete events.</p> <p>An event is a 1-dimensional value, usually the position of something along an axis, such as time or length. Events do not have an amplitude. They are displayed as v</p> <dl class=\"docutils\"> <dt><em>positions</em></dt> <dd>a sequence of numerical values or a 1D numpy array. Can be None</dd> <dt>\n<em>orientation</em> [ ‘horizontal’ | ‘vertical’ | None ]</dt> <dd>defaults to ‘horizontal’ if not specified or None</dd> <dt><em>lineoffset</em></dt> <dd>a single numerical value, corresponding to the offset of the center of the markers from the origin</dd> <dt><em>linelength</em></dt> <dd>a single numerical value, corresponding to the total height of the marker (i.e. the marker stretches from lineoffset+linelength/2 to lineoffset-linelength/2). Defaults to 1</dd> <dt><em>linewidth</em></dt> <dd>a single numerical value</dd> <dt><em>color</em></dt> <dd>must be a sequence of RGBA tuples (e.g., arbitrary color strings, etc, not allowed).</dd> </dl> <p><em>linestyle</em> [ ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</p> <dl class=\"docutils\"> <dt><em>antialiased</em></dt> <dd>1 or 2</dd> </dl> <p>If <em>linewidth</em>, <em>color</em>, or <em>antialiased</em> is None, they default to their rcParams setting, in sequence form.</p> <dl class=\"docutils\"> <dt><em>norm</em></dt> <dd>None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</dd> <dt><em>cmap</em></dt> <dd>None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</dd> </dl> <p><em>pickradius</em> is the tolerance for mouse clicks picking a line. The default is 5 pt.</p> <p>The use of <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> is optional. If the <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> array <code>_A</code> is not None (i.e., a call to <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>set_array()</code></a> has been made), at draw time a call to scalar mappable will be made to set the colors.</p> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventcollection_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventcollection_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventcollection_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventcollection_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/eventcollection_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/eventcollection_demo.png\"> </div> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.EventCollection.remove_callback\" title=\"matplotlib.collections.EventCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.add_positions\"><code>add_positions(position)</code></dt> <dd>\n<p>add one or more events at the specified positions</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EventCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.append_positions\"><code>append_positions(position)</code></dt> <dd>\n<p>add one or more events at the specified positions</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EventCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.extend_positions\"><code>extend_positions(position)</code></dt> <dd>\n<p>add one or more events at the specified positions</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_color\"><code>get_color()</code></dt> <dd>\n<p>get the color of the lines used to mark each event</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_colors\"><code>get_colors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_linelength\"><code>get_linelength()</code></dt> <dd>\n<p>get the length of the lines used to mark each event</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_lineoffset\"><code>get_lineoffset()</code></dt> <dd>\n<p>get the offset of the lines used to mark each event</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_linestyle\"><code>get_linestyle()</code></dt> <dd>\n<p>get the style of the lines used to mark each event [ ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_linewidth\"><code>get_linewidth()</code></dt> <dd>\n<p>get the width of the lines used to mark each event</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_orientation\"><code>get_orientation()</code></dt> <dd>\n<p>get the orientation of the event line, may be: [ ‘horizontal’ | ‘vertical’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_positions\"><code>get_positions()</code></dt> <dd>\n<p>return an array containing the floating-point values of the positions</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_segments\"><code>get_segments()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.is_horizontal\"><code>is_horizontal()</code></dt> <dd>\n<p>True if the eventcollection is horizontal, False if vertical</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EventCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.EventCollection.add_callback\" title=\"matplotlib.collections.EventCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set the color(s) of the line collection. <em>c</em> can be a matplotlib color arg (all patches have same color), or a sequence or rgba tuples; if it is a sequence the patches will cycle through the sequence.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_linelength\"><code>set_linelength(linelength)</code></dt> <dd>\n<p>set the length of the lines used to mark each event</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_lineoffset\"><code>set_lineoffset(lineoffset)</code></dt> <dd>\n<p>set the offset of the lines used to mark each event</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_orientation\"><code>set_orientation(orientation=None)</code></dt> <dd>\n<p>set the orientation of the event line [ ‘horizontal’ | ‘vertical’ | None ] defaults to ‘horizontal’ if not specified or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_paths\"><code>set_paths(segments)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_positions\"><code>set_positions(positions)</code></dt> <dd>\n<p>set the positions of the events to the specified value</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_segments\"><code>set_segments(segments)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_verts\"><code>set_verts(segments)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EventCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.switch_orientation\"><code>switch_orientation()</code></dt> <dd>\n<p>switch the orientation of the event line, either from vertical to horizontal or vice versus</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.EventCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.EventCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.LineCollection\"><code>class matplotlib.collections.LineCollection(segments, linewidths=None, colors=None, antialiaseds=None, linestyles='solid', offsets=None, transOffset=None, norm=None, cmap=None, pickradius=5, zorder=2, facecolors='none', **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>matplotlib.collections.Collection</code></a></p> <p>All parameters must be sequences or scalars; if scalars, they will be converted to sequences. The property of the ith line segment is:</p> <pre data-language=\"python\">prop[i % len(props)]\n</pre> <p>i.e., the properties cycle if the <code>len</code> of props is less than the number of segments.</p> <dl class=\"docutils\"> <dt><em>segments</em></dt> <dd>\n<p class=\"first\">a sequence of (<em>line0</em>, <em>line1</em>, <em>line2</em>), where:</p> <pre data-language=\"python\">linen = (x0, y0), (x1, y1), ... (xm, ym)\n</pre> <p class=\"last\">or the equivalent numpy array with two columns. Each line can be a different length.</p> </dd> <dt><em>colors</em></dt> <dd>must be a sequence of RGBA tuples (e.g., arbitrary color strings, etc, not allowed).</dd> <dt><em>antialiaseds</em></dt> <dd>must be a sequence of ones or zeros</dd> <dt>\n<em>linestyles</em> [ ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">a string or dash tuple. The dash tuple is:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p class=\"last\">where <em>onoffseq</em> is an even length tuple of on and off ink in points.</p> </dd> </dl> <p>If <em>linewidths</em>, <em>colors</em>, or <em>antialiaseds</em> is None, they default to their rcParams setting, in sequence form.</p> <p>If <em>offsets</em> and <em>transOffset</em> are not None, then <em>offsets</em> are transformed by <em>transOffset</em> and applied after the segments have been transformed to display coordinates.</p> <p>If <em>offsets</em> is not None but <em>transOffset</em> is None, then the <em>offsets</em> are added to the segments before any transformation. In this case, a single offset can be specified as:</p> <pre data-language=\"python\">offsets=(xo,yo)\n</pre> <p>and this value will be added cumulatively to each successive segment, so as to produce a set of successively offset curves.</p> <dl class=\"docutils\"> <dt><em>norm</em></dt> <dd>None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</dd> <dt><em>cmap</em></dt> <dd>None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</dd> </dl> <p><em>pickradius</em> is the tolerance for mouse clicks picking a line. The default is 5 pt.</p> <dl class=\"docutils\"> <dt><em>zorder</em></dt> <dd>The zorder of the LineCollection. Default is 2</dd> <dt><em>facecolors</em></dt> <dd>The facecolors of the LineCollection. Default is ‘none’ Setting to a value other than ‘none’ will lead to a filled polygon being drawn between points on each line.</dd> </dl> <p>The use of <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> is optional. If the <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> array <code>_A</code> is not None (i.e., a call to <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>set_array()</code></a> has been made), at draw time a call to scalar mappable will be made to set the colors.</p> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.LineCollection.remove_callback\" title=\"matplotlib.collections.LineCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.LineCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.LineCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_color\"><code>get_color()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_colors\"><code>get_colors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_segments\"><code>get_segments()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.LineCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.LineCollection.add_callback\" title=\"matplotlib.collections.LineCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set the color(s) of the line collection. <em>c</em> can be a matplotlib color arg (all patches have same color), or a sequence or rgba tuples; if it is a sequence the patches will cycle through the sequence.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_paths\"><code>set_paths(segments)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_segments\"><code>set_segments(segments)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_verts\"><code>set_verts(segments)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.LineCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.LineCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.LineCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.PatchCollection\"><code>class matplotlib.collections.PatchCollection(patches, match_original=False, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>matplotlib.collections.Collection</code></a></p> <p>A generic collection of patches.</p> <p>This makes it easier to assign a color map to a heterogeneous collection of patches.</p> <p>This also may improve plotting speed, since PatchCollection will draw faster than a large number of patches.</p> <dl class=\"docutils\"> <dt><em>patches</em></dt> <dd>a sequence of Patch objects. This list may include a heterogeneous assortment of different patch types.</dd> <dt><em>match_original</em></dt> <dd>If True, use the colors and linewidths of the original patches. If False, new colors may be assigned by providing the standard collection arguments, facecolor, edgecolor, linewidths, norm or cmap.</dd> </dl> <p>If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> <p>The use of <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> is optional. If the <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> matrix _A is not None (i.e., a call to set_array has been made), at draw time a call to scalar mappable will be made to set the face colors.</p> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.PatchCollection.remove_callback\" title=\"matplotlib.collections.PatchCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PatchCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PatchCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PatchCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.PatchCollection.add_callback\" title=\"matplotlib.collections.PatchCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.PatchCollection.set_facecolor\" title=\"matplotlib.collections.PatchCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.PatchCollection.set_edgecolor\" title=\"matplotlib.collections.PatchCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_paths\"><code>set_paths(patches)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PatchCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PatchCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PatchCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.PathCollection\"><code>class matplotlib.collections.PathCollection(paths, sizes=None, **kwargs)</code></dt> <dd>\n<p>Bases: <code>matplotlib.collections._CollectionWithSizes</code></p> <p>This is the most basic <a class=\"reference internal\" href=\"#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a> subclass.</p> <p><em>paths</em> is a sequence of <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>matplotlib.path.Path</code></a> instances.</p> <blockquote> <div>\n<p>Valid Collection keyword arguments:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets)</p> <p>If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.PathCollection.remove_callback\" title=\"matplotlib.collections.PathCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PathCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PathCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_sizes\"><code>get_sizes()</code></dt> <dd>\n<p>Returns the sizes of the elements in the collection. The value represents the ‘area’ of the element.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The ‘area’ of each element.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PathCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.PathCollection.add_callback\" title=\"matplotlib.collections.PathCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.PathCollection.set_facecolor\" title=\"matplotlib.collections.PathCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.PathCollection.set_edgecolor\" title=\"matplotlib.collections.PathCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_paths\"><code>set_paths(paths)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_sizes\"><code>set_sizes(sizes, dpi=72.0)</code></dt> <dd>\n<p>Set the sizes of each member of the collection.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : ndarray or None</p> <blockquote> <div>\n<p>The size to set for each element of the collection. The value is the ‘area’ of the element.</p> </div>\n</blockquote> <p><strong>dpi</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The dpi of the canvas. Defaults to 72.0.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PathCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PathCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PathCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.PolyCollection\"><code>class matplotlib.collections.PolyCollection(verts, sizes=None, closed=True, **kwargs)</code></dt> <dd>\n<p>Bases: <code>matplotlib.collections._CollectionWithSizes</code></p> <p><em>verts</em> is a sequence of ( <em>verts0</em>, <em>verts1</em>, ...) where <em>verts_i</em> is a sequence of <em>xy</em> tuples of vertices, or an equivalent <code>numpy</code> array of shape (<em>nv</em>, 2).</p> <p><em>sizes</em> is <em>None</em> (default) or a sequence of floats that scale the corresponding <em>verts_i</em>. The scaling is applied before the Artist master transform; if the latter is an identity transform, then the overall scaling is such that if <em>verts_i</em> specify a unit square, then <em>sizes_i</em> is the area of that square in points^2. If len(<em>sizes</em>) &lt; <em>nv</em>, the additional values will be taken cyclically from the array.</p> <p><em>closed</em>, when <em>True</em>, will explicitly close the polygon.</p> <blockquote> <div>\n<p>Valid Collection keyword arguments:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets)</p> <p>If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> </div>\n</blockquote> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.PolyCollection.remove_callback\" title=\"matplotlib.collections.PolyCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PolyCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PolyCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_sizes\"><code>get_sizes()</code></dt> <dd>\n<p>Returns the sizes of the elements in the collection. The value represents the ‘area’ of the element.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The ‘area’ of each element.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PolyCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.PolyCollection.add_callback\" title=\"matplotlib.collections.PolyCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.PolyCollection.set_facecolor\" title=\"matplotlib.collections.PolyCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.PolyCollection.set_edgecolor\" title=\"matplotlib.collections.PolyCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_paths\"><code>set_paths(verts, closed=True)</code></dt> <dd>\n<p>This allows one to delay initialization of the vertices.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_sizes\"><code>set_sizes(sizes, dpi=72.0)</code></dt> <dd>\n<p>Set the sizes of each member of the collection.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : ndarray or None</p> <blockquote> <div>\n<p>The size to set for each element of the collection. The value is the ‘area’ of the element.</p> </div>\n</blockquote> <p><strong>dpi</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The dpi of the canvas. Defaults to 72.0.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_verts\"><code>set_verts(verts, closed=True)</code></dt> <dd>\n<p>This allows one to delay initialization of the vertices.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_verts_and_codes\"><code>set_verts_and_codes(verts, codes)</code></dt> <dd>\n<p>This allows one to initialize vertices with path codes.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PolyCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.PolyCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.PolyCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.QuadMesh\"><code>class matplotlib.collections.QuadMesh(meshWidth, meshHeight, coordinates, antialiased=True, shading='flat', **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>matplotlib.collections.Collection</code></a></p> <p>Class for the efficient drawing of a quadrilateral mesh.</p> <p>A quadrilateral mesh consists of a grid of vertices. The dimensions of this array are (<em>meshWidth</em> + 1, <em>meshHeight</em> + 1). Each vertex in the mesh has a different set of “mesh coordinates” representing its position in the topology of the mesh. For any values (<em>m</em>, <em>n</em>) such that 0 &lt;= <em>m</em> &lt;= <em>meshWidth</em> and 0 &lt;= <em>n</em> &lt;= <em>meshHeight</em>, the vertices at mesh coordinates (<em>m</em>, <em>n</em>), (<em>m</em>, <em>n</em> + 1), (<em>m</em> + 1, <em>n</em> + 1), and (<em>m</em> + 1, <em>n</em>) form one of the quadrilaterals in the mesh. There are thus (<em>meshWidth</em> * <em>meshHeight</em>) quadrilaterals in the mesh. The mesh need not be regular and the polygons need not be convex.</p> <p>A quadrilateral mesh is represented by a (2 x ((<em>meshWidth</em> + 1) * (<em>meshHeight</em> + 1))) numpy array <em>coordinates</em>, where each row is the <em>x</em> and <em>y</em> coordinates of one of the vertices. To define the function that maps from a data point to its corresponding color, use the <a class=\"reference internal\" href=\"#matplotlib.collections.QuadMesh.set_cmap\" title=\"matplotlib.collections.QuadMesh.set_cmap\"><code>set_cmap()</code></a> method. Each of these arrays is indexed in row-major order by the mesh coordinates of the vertex (or the mesh coordinates of the lower left vertex, in the case of the colors).</p> <p>For example, the first entry in <em>coordinates</em> is the coordinates of the vertex at mesh coordinates (0, 0), then the one at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and so on.</p> <p><em>shading</em> may be ‘flat’, or ‘gouraud’</p> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.QuadMesh.remove_callback\" title=\"matplotlib.collections.QuadMesh.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.QuadMesh.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.QuadMesh.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.collections.QuadMesh.convert_mesh_to_paths\"><code>static convert_mesh_to_paths(meshWidth, meshHeight, coordinates)</code></dt> <dd>\n<p>Converts a given mesh into a sequence of <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>matplotlib.path.Path</code></a> objects for easier rendering by backends that do not directly support quadmeshes.</p> <p>This function is primarily of use to backend implementers.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.convert_mesh_to_triangles\"><code>convert_mesh_to_triangles(meshWidth, meshHeight, coordinates)</code></dt> <dd>\n<p>Converts a given mesh into a sequence of triangles, each point with its own color. This is useful for experiments using <code>draw_qouraud_triangle</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.QuadMesh.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.QuadMesh.add_callback\" title=\"matplotlib.collections.QuadMesh.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.QuadMesh.set_facecolor\" title=\"matplotlib.collections.QuadMesh.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.QuadMesh.set_edgecolor\" title=\"matplotlib.collections.QuadMesh.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_paths\"><code>set_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.QuadMesh.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.QuadMesh.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.QuadMesh.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.RegularPolyCollection\"><code>class matplotlib.collections.RegularPolyCollection(numsides, rotation=0, sizes=(1, ), **kwargs)</code></dt> <dd>\n<p>Bases: <code>matplotlib.collections._CollectionWithSizes</code></p> <p>Draw a collection of regular polygons with <em>numsides</em>.</p> <dl class=\"docutils\"> <dt><em>numsides</em></dt> <dd>the number of sides of the polygon</dd> <dt><em>rotation</em></dt> <dd>the rotation of the polygon in radians</dd> <dt><em>sizes</em></dt> <dd>\n<p class=\"first\">gives the area of the circle circumscribing the regular polygon in points^2</p> <p>Valid Collection keyword arguments:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets)</p> <p class=\"last\">If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> </dd> </dl> <p>Example: see <code>examples/dynamic_collection.py</code> for complete example:</p> <pre data-language=\"python\">offsets = np.random.rand(20,2)\nfacecolors = [cm.jet(x) for x in np.random.rand(20)]\nblack = (0,0,0,1)\n\ncollection = RegularPolyCollection(\n    numsides=5, # a pentagon\n    rotation=0, sizes=(50,),\n    facecolors = facecolors,\n    edgecolors = (black,),\n    linewidths = (1,),\n    offsets = offsets,\n    transOffset = ax.transData,\n    )\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.RegularPolyCollection.remove_callback\" title=\"matplotlib.collections.RegularPolyCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.RegularPolyCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.RegularPolyCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_numsides\"><code>get_numsides()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_rotation\"><code>get_rotation()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_sizes\"><code>get_sizes()</code></dt> <dd>\n<p>Returns the sizes of the elements in the collection. The value represents the ‘area’ of the element.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The ‘area’ of each element.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.RegularPolyCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.RegularPolyCollection.add_callback\" title=\"matplotlib.collections.RegularPolyCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.RegularPolyCollection.set_facecolor\" title=\"matplotlib.collections.RegularPolyCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.RegularPolyCollection.set_edgecolor\" title=\"matplotlib.collections.RegularPolyCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_paths\"><code>set_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_sizes\"><code>set_sizes(sizes, dpi=72.0)</code></dt> <dd>\n<p>Set the sizes of each member of the collection.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : ndarray or None</p> <blockquote> <div>\n<p>The size to set for each element of the collection. The value is the ‘area’ of the element.</p> </div>\n</blockquote> <p><strong>dpi</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The dpi of the canvas. Defaults to 72.0.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.RegularPolyCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.RegularPolyCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.RegularPolyCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.StarPolygonCollection\"><code>class matplotlib.collections.StarPolygonCollection(numsides, rotation=0, sizes=(1, ), **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.RegularPolyCollection\" title=\"matplotlib.collections.RegularPolyCollection\"><code>matplotlib.collections.RegularPolyCollection</code></a></p> <p>Draw a collection of regular stars with <em>numsides</em> points.</p> <dl class=\"docutils\"> <dt><em>numsides</em></dt> <dd>the number of sides of the polygon</dd> <dt><em>rotation</em></dt> <dd>the rotation of the polygon in radians</dd> <dt><em>sizes</em></dt> <dd>\n<p class=\"first\">gives the area of the circle circumscribing the regular polygon in points^2</p> <p>Valid Collection keyword arguments:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>edgecolors</em>: None</li> <li>\n<em>facecolors</em>: None</li> <li>\n<em>linewidths</em>: None</li> <li>\n<em>antialiaseds</em>: None</li> <li>\n<em>offsets</em>: None</li> <li>\n<em>transOffset</em>: transforms.IdentityTransform()</li> <li>\n<em>norm</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> <li>\n<em>cmap</em>: None (optional for <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>matplotlib.cm.ScalarMappable</code></a>)</li> </ul> </div>\n</blockquote> <p><em>offsets</em> and <em>transOffset</em> are used to translate the patch after rendering (default no offsets)</p> <p class=\"last\">If any of <em>edgecolors</em>, <em>facecolors</em>, <em>linewidths</em>, <em>antialiaseds</em> are None, they default to their <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> patch setting, in sequence form.</p> </dd> </dl> <p>Example: see <code>examples/dynamic_collection.py</code> for complete example:</p> <pre data-language=\"python\">offsets = np.random.rand(20,2)\nfacecolors = [cm.jet(x) for x in np.random.rand(20)]\nblack = (0,0,0,1)\n\ncollection = RegularPolyCollection(\n    numsides=5, # a pentagon\n    rotation=0, sizes=(50,),\n    facecolors = facecolors,\n    edgecolors = (black,),\n    linewidths = (1,),\n    offsets = offsets,\n    transOffset = ax.transData,\n    )\n</pre> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.StarPolygonCollection.remove_callback\" title=\"matplotlib.collections.StarPolygonCollection.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.StarPolygonCollection.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.StarPolygonCollection.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_numsides\"><code>get_numsides()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_rotation\"><code>get_rotation()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_sizes\"><code>get_sizes()</code></dt> <dd>\n<p>Returns the sizes of the elements in the collection. The value represents the ‘area’ of the element.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : array</p> <blockquote class=\"last\"> <div>\n<p>The ‘area’ of each element.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.StarPolygonCollection.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.StarPolygonCollection.add_callback\" title=\"matplotlib.collections.StarPolygonCollection.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.StarPolygonCollection.set_facecolor\" title=\"matplotlib.collections.StarPolygonCollection.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.StarPolygonCollection.set_edgecolor\" title=\"matplotlib.collections.StarPolygonCollection.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_paths\"><code>set_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_sizes\"><code>set_sizes(sizes, dpi=72.0)</code></dt> <dd>\n<p>Set the sizes of each member of the collection.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sizes</strong> : ndarray or None</p> <blockquote> <div>\n<p>The size to set for each element of the collection. The value is the ‘area’ of the element.</p> </div>\n</blockquote> <p><strong>dpi</strong> : float</p> <blockquote class=\"last\"> <div>\n<p>The dpi of the canvas. Defaults to 72.0.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.StarPolygonCollection.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.StarPolygonCollection.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.StarPolygonCollection.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl> <dl class=\"class\"> <dt id=\"matplotlib.collections.TriMesh\"><code>class matplotlib.collections.TriMesh(triangulation, **kwargs)</code></dt> <dd>\n<p>Bases: <a class=\"reference internal\" href=\"#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>matplotlib.collections.Collection</code></a></p> <p>Class for the efficient drawing of a triangular mesh using Gouraud shading.</p> <p>A triangular mesh is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> object.</p> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.add_callback\"><code>add_callback(func)</code></dt> <dd>\n<p>Adds a callback function that will be called whenever one of the <code>Artist</code>‘s properties changes.</p> <p>Returns an <em>id</em> that is useful for removing the callback with <a class=\"reference internal\" href=\"#matplotlib.collections.TriMesh.remove_callback\" title=\"matplotlib.collections.TriMesh.remove_callback\"><code>remove_callback()</code></a> later.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.add_checker\"><code>add_checker(checker)</code></dt> <dd>\n<p>Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.TriMesh.aname\"><code>aname = 'Artist'</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.autoscale\"><code>autoscale()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.autoscale_None\"><code>autoscale_None()</code></dt> <dd>\n<p>Autoscale the scalar limits on the norm instance using the current array, changing only limits that are None</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.TriMesh.axes\"><code>axes</code></dt> <dd>\n<p>The <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.changed\"><code>changed()</code></dt> <dd>\n<p>Call this whenever the mappable is changed to notify all the callbackSM listeners to the ‘changed’ signal</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.check_update\"><code>check_update(checker)</code></dt> <dd>\n<p>If mappable has changed since the last check, return True; else return False</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.contains\"><code>contains(mouseevent)</code></dt> <dd>\n<p>Test whether the mouse event occurred in the collection.</p> <p>Returns True | False, <code>dict(ind=itemlist)</code>, where every item in itemlist contains the event.</p> </dd>\n</dl> <dl class=\"staticmethod\"> <dt id=\"matplotlib.collections.TriMesh.convert_mesh_to_paths\"><code>static convert_mesh_to_paths(tri)</code></dt> <dd>\n<p>Converts a given mesh into a sequence of <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>matplotlib.path.Path</code></a> objects for easier rendering by backends that do not directly support meshes.</p> <p>This function is primarily of use to backend implementers.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.convert_xunits\"><code>convert_xunits(x)</code></dt> <dd>\n<p>For artists in an axes, if the xaxis has units support, convert <em>x</em> using xaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.convert_yunits\"><code>convert_yunits(y)</code></dt> <dd>\n<p>For artists in an axes, if the yaxis has units support, convert <em>y</em> using yaxis unit type</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.draw\"><code>draw(artist, renderer, *args, **kwargs)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.findobj\"><code>findobj(match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.format_cursor_data\"><code>format_cursor_data(data)</code></dt> <dd>\n<p>Return <em>cursor data</em> string formatted.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_agg_filter\"><code>get_agg_filter()</code></dt> <dd>\n<p>return filter function to be used for agg filter</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_alpha\"><code>get_alpha()</code></dt> <dd>\n<p>Return the alpha value used for blending - not supported on all backends</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_animated\"><code>get_animated()</code></dt> <dd>\n<p>Return the artist’s animated state</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_array\"><code>get_array()</code></dt> <dd>\n<p>Return the array</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_axes\"><code>get_axes()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance the artist resides in, or <em>None</em>.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_children\"><code>get_children()</code></dt> <dd>\n<p>Return a list of the child <code>Artist`s this\n:class:`Artist</code> contains.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_clim\"><code>get_clim()</code></dt> <dd>\n<p>return the min, max of the color limits for image scaling</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_clip_box\"><code>get_clip_box()</code></dt> <dd>\n<p>Return artist clipbox</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_clip_on\"><code>get_clip_on()</code></dt> <dd>\n<p>Return whether artist uses clipping</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_clip_path\"><code>get_clip_path()</code></dt> <dd>\n<p>Return artist clip path</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_cmap\"><code>get_cmap()</code></dt> <dd>\n<p>return the colormap</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_contains\"><code>get_contains()</code></dt> <dd>\n<p>Return the _contains test used by the artist, or <em>None</em> for default.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_cursor_data\"><code>get_cursor_data(event)</code></dt> <dd>\n<p>Get the cursor data for a given event.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_dashes\"><code>get_dashes()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_datalim\"><code>get_datalim(transData)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_edgecolor\"><code>get_edgecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_edgecolors\"><code>get_edgecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_facecolor\"><code>get_facecolor()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_facecolors\"><code>get_facecolors()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_figure\"><code>get_figure()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_fill\"><code>get_fill()</code></dt> <dd>\n<p>return whether fill is set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_gid\"><code>get_gid()</code></dt> <dd>\n<p>Returns the group id</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_hatch\"><code>get_hatch()</code></dt> <dd>\n<p>Return the current hatching pattern</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_label\"><code>get_label()</code></dt> <dd>\n<p>Get the label used for this artist in the legend.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_linestyle\"><code>get_linestyle()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_linestyles\"><code>get_linestyles()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_linewidth\"><code>get_linewidth()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_linewidths\"><code>get_linewidths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_offset_position\"><code>get_offset_position()</code></dt> <dd>\n<p>Returns how offsets are applied for the collection. If <em>offset_position</em> is ‘screen’, the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_offset_transform\"><code>get_offset_transform()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_offsets\"><code>get_offsets()</code></dt> <dd>\n<p>Return the offsets for the collection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_path_effects\"><code>get_path_effects()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_paths\"><code>get_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_picker\"><code>get_picker()</code></dt> <dd>\n<p>Return the picker object used by this artist</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_pickradius\"><code>get_pickradius()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_rasterized\"><code>get_rasterized()</code></dt> <dd>\n<p>return True if the artist is to be rasterized</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_sketch_params\"><code>get_sketch_params()</code></dt> <dd>\n<p>Returns the sketch parameters for the artist.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>sketch_params</strong> : tuple or <code>None</code></p> <p>A 3-tuple with the following elements:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>scale</code>: The amplitude of the wiggle perpendicular to the source line.</li> <li>\n<code>length</code>: The length of the wiggle along the line.</li> <li>\n<code>randomness</code>: The scale factor by which the length is shrunken or expanded.</li> </ul> </div>\n</blockquote> <p class=\"last\">May return <code>None</code> if no sketch parameters were set.</p> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_snap\"><code>get_snap()</code></dt> <dd>\n<p>Returns the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_transform\"><code>get_transform()</code></dt> <dd>\n<p>Return the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_transformed_clip_path_and_affine\"><code>get_transformed_clip_path_and_affine()</code></dt> <dd>\n<p>Return the clip path with the non-affine part of its transformation applied, and the remaining affine part of its transformation.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_transforms\"><code>get_transforms()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_url\"><code>get_url()</code></dt> <dd>\n<p>Returns the url</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_urls\"><code>get_urls()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_visible\"><code>get_visible()</code></dt> <dd>\n<p>Return the artist’s visiblity</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_window_extent\"><code>get_window_extent(renderer)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.get_zorder\"><code>get_zorder()</code></dt> <dd>\n<p>Return the <code>Artist</code>‘s zorder.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.have_units\"><code>have_units()</code></dt> <dd>\n<p>Return <em>True</em> if units are set on the <em>x</em> or <em>y</em> axes</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.hitlist\"><code>hitlist(event)</code></dt> <dd>\n<p>List the children of the artist which contain the mouse event <em>event</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.is_figure_set\"><code>is_figure_set()</code></dt> <dd>\n<p>Returns True if the artist is assigned to a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.is_transform_set\"><code>is_transform_set()</code></dt> <dd>\n<p>Returns <em>True</em> if <code>Artist</code> has a transform explicitly set.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.TriMesh.mouseover\"><code>mouseover</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.pchanged\"><code>pchanged()</code></dt> <dd>\n<p>Fire an event when property changed, calling all of the registered callbacks.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.pick\"><code>pick(mouseevent)</code></dt> <dd>\n<p>call signature:</p> <pre data-language=\"python\">pick(mouseevent)\n</pre> <p>each child artist will fire a pick event if <em>mouseevent</em> is over the artist and the artist has picker set</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.pickable\"><code>pickable()</code></dt> <dd>\n<p>Return <em>True</em> if <code>Artist</code> is pickable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.properties\"><code>properties()</code></dt> <dd>\n<p>return a dictionary mapping property name -&gt; value for all Artist props</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.remove\"><code>remove()</code></dt> <dd>\n<p>Remove the artist from the figure if possible. The effect will not be visible until the figure is redrawn, e.g., with <code>matplotlib.axes.Axes.draw_idle()</code>. Call <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>matplotlib.axes.Axes.relim()</code></a> to update the axes limits if desired.</p> <p>Note: <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.relim\" title=\"matplotlib.axes.Axes.relim\"><code>relim()</code></a> will not see collections even if the collection was added to axes with <em>autolim</em> = True.</p> <p>Note: there is no support for removing the artist’s legend entry.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.remove_callback\"><code>remove_callback(oid)</code></dt> <dd>\n<p>Remove a callback based on its <em>id</em>.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.collections.TriMesh.add_callback\" title=\"matplotlib.collections.TriMesh.add_callback\"><code>add_callback()</code></a></dt> <dd>For adding callbacks</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set\"><code>set(**kwargs)</code></dt> <dd>\n<p>A property batch setter. Pass <em>kwargs</em> to set properties. Will handle property name collisions (e.g., if both ‘color’ and ‘facecolor’ are specified, the property with higher priority gets set last).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_agg_filter\"><code>set_agg_filter(filter_func)</code></dt> <dd>\n<p>set agg_filter fuction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_alpha\"><code>set_alpha(alpha)</code></dt> <dd>\n<p>Set the alpha tranparencies of the collection. <em>alpha</em> must be a float or <em>None</em>.</p> <p>ACCEPTS: float or None</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_animated\"><code>set_animated(b)</code></dt> <dd>\n<p>Set the artist’s animation state.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_antialiased\"><code>set_antialiased(aa)</code></dt> <dd>\n<p>Set the antialiasing state for rendering.</p> <p>ACCEPTS: Boolean or sequence of booleans</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_antialiaseds\"><code>set_antialiaseds(aa)</code></dt> <dd>\n<p>alias for set_antialiased</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_array\"><code>set_array(A)</code></dt> <dd>\n<p>Set the image array from numpy array <em>A</em></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_axes\"><code>set_axes(axes)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance in which the artist resides, if any.</p> <p>This has been deprecated in mpl 1.5, please use the axes property. Will be removed in 1.7 or 2.0.</p> <p>ACCEPTS: an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_clim\"><code>set_clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>set the norm limits for image scaling; if <em>vmin</em> is a length2 sequence, interpret it as <code>(vmin, vmax)</code> which is used to support setp</p> <p>ACCEPTS: a length 2 sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_clip_box\"><code>set_clip_box(clipbox)</code></dt> <dd>\n<p>Set the artist’s clip <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>Bbox</code></a>.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_clip_on\"><code>set_clip_on(b)</code></dt> <dd>\n<p>Set whether artist uses clipping.</p> <p>When False artists will be visible out side of the axes which can lead to unexpected results.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_clip_path\"><code>set_clip_path(path, transform=None)</code></dt> <dd>\n<p>Set the artist’s clip path, which may be:</p> <blockquote> <div>\n<ul> <li>a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> (or subclass) instance </li> <li>\n<dl class=\"first docutils\"> <dt>a <a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a> instance, in which case</dt> <dd>\n<p class=\"first last\">an optional <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance may be provided, which will be applied to the path before using it for clipping.</p> </dd> </dl> </li> <li>\n<em>None</em>, to remove the clipping path </li> </ul> </div>\n</blockquote> <p>For efficiency, if the path happens to be an axis-aligned rectangle, this method will set the clipping box to the corresponding rectangle and set the clipping path to <em>None</em>.</p> <p>ACCEPTS: [ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_cmap\"><code>set_cmap(cmap)</code></dt> <dd>\n<p>set the colormap for luminance data</p> <p>ACCEPTS: a colormap or registered colormap name</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_color\"><code>set_color(c)</code></dt> <dd>\n<p>Set both the edgecolor and the facecolor.</p> <p>ACCEPTS: matplotlib color arg or sequence of rgba tuples</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.collections.TriMesh.set_facecolor\" title=\"matplotlib.collections.TriMesh.set_facecolor\"><code>set_facecolor()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.collections.TriMesh.set_edgecolor\" title=\"matplotlib.collections.TriMesh.set_edgecolor\"><code>set_edgecolor()</code></a>\n</dt> <dd>For setting the edge or face color individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_contains\"><code>set_contains(picker)</code></dt> <dd>\n<p>Replace the contains test used by this artist. The new picker should be a callable function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>If the mouse event is over the artist, return <em>hit</em> = <em>True</em> and <em>props</em> is a dictionary of properties you want returned with the contains test.</p> <p>ACCEPTS: a callable function</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_dashes\"><code>set_dashes(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_edgecolor\"><code>set_edgecolor(c)</code></dt> <dd>\n<p>Set the edgecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_edgecolors\"><code>set_edgecolors(c)</code></dt> <dd>\n<p>alias for set_edgecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_facecolor\"><code>set_facecolor(c)</code></dt> <dd>\n<p>Set the facecolor(s) of the collection. <em>c</em> can be a matplotlib color spec (all patches have same color), or a sequence of specs; if it is a sequence the patches will cycle through the sequence.</p> <p>If <em>c</em> is ‘none’, the patch will not be filled.</p> <p>ACCEPTS: matplotlib color spec or sequence of specs</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_facecolors\"><code>set_facecolors(c)</code></dt> <dd>\n<p>alias for set_facecolor</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_figure\"><code>set_figure(fig)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance the artist belongs to.</p> <p>ACCEPTS: a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_gid\"><code>set_gid(gid)</code></dt> <dd>\n<p>Sets the (group) id for the artist</p> <p>ACCEPTS: an id string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_hatch\"><code>set_hatch(hatch)</code></dt> <dd>\n<p>Set the hatching pattern</p> <p><em>hatch</em> can be one of:</p> <pre data-language=\"python\">/   - diagonal hatching\n\\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\n</pre> <p>Letters can be combined, in which case all the specified hatchings are done. If same letter repeats, it increases the density of hatching of that pattern.</p> <p>Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</p> <p>Unlike other properties such as linewidth and colors, hatching can only be specified for the collection as a whole, not separately for each member.</p> <p>ACCEPTS: [ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_label\"><code>set_label(s)</code></dt> <dd>\n<p>Set the label to <em>s</em> for auto legend.</p> <p>ACCEPTS: string or anything printable with ‘%s’ conversion.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_linestyle\"><code>set_linestyle(ls)</code></dt> <dd>\n<p>Set the linestyle(s) for the collection.</p> <table class=\"docutils\"> <colgroup> <col width=\"61%\"> <col width=\"39%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">linestyle</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>\n<code>'-'</code> or <code>'solid'</code>\n</td> <td>solid line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>'--'</code> or <code>'dashed'</code>\n</td> <td>dashed line</td> </tr> <tr class=\"row-even\">\n<td>\n<code>'-.'</code> or <code>'dash_dot'</code>\n</td> <td>dash-dotted line</td> </tr> <tr class=\"row-odd\">\n<td>\n<code>':'</code> or <code>'dotted'</code>\n</td> <td>dotted line</td> </tr> </tbody> </table> <p>Alternatively a dash tuple of the following form can be provided:</p> <pre data-language=\"python\">(offset, onoffseq),\n</pre> <p>where <code>onoffseq</code> is an even length tuple of on and off ink in points.</p> <dl class=\"docutils\"> <dt>ACCEPTS: [‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ |</dt> <dd>(offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</dd> </dl> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>ls</strong> : { ‘-‘, ‘–’, ‘-.’, ‘:’} and more see description</p> <blockquote class=\"last\"> <div>\n<p>The line style.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_linestyles\"><code>set_linestyles(ls)</code></dt> <dd>\n<p>alias for set_linestyle</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_linewidth\"><code>set_linewidth(lw)</code></dt> <dd>\n<p>Set the linewidth(s) for the collection. <em>lw</em> can be a scalar or a sequence; if it is a sequence the patches will cycle through the sequence</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_linewidths\"><code>set_linewidths(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_lw\"><code>set_lw(lw)</code></dt> <dd>\n<p>alias for set_linewidth</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_norm\"><code>set_norm(norm)</code></dt> <dd>\n<p>set the normalization instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_offset_position\"><code>set_offset_position(offset_position)</code></dt> <dd>\n<p>Set how offsets are applied. If <em>offset_position</em> is ‘screen’ (default) the offset is applied after the master transform has been applied, that is, the offsets are in screen coordinates. If offset_position is ‘data’, the offset is applied before the master transform, i.e., the offsets are in data coordinates.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_offsets\"><code>set_offsets(offsets)</code></dt> <dd>\n<p>Set the offsets for the collection. <em>offsets</em> can be a scalar or a sequence.</p> <p>ACCEPTS: float or sequence of floats</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_path_effects\"><code>set_path_effects(path_effects)</code></dt> <dd>\n<p>set path_effects, which should be a list of instances of matplotlib.patheffect._Base class or its derivatives.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_paths\"><code>set_paths()</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_picker\"><code>set_picker(picker)</code></dt> <dd>\n<p>Set the epsilon for picking used by this artist</p> <p><em>picker</em> can be one of the following:</p> <blockquote> <div>\n<ul> <li>\n<em>None</em>: picking is disabled for this artist (default) </li> <li>A boolean: if <em>True</em> then picking will be enabled and the artist will fire a pick event if the mouse event is over the artist </li> <li>A float: if picker is a number it is interpreted as an epsilon tolerance in points and the artist will fire off an event if it’s data is within epsilon of the mouse event. For some artists like lines and patch collections, the artist may provide additional data to the pick event that is generated, e.g., the indices of the data within epsilon of the pick event </li> <li>\n<p class=\"first\">A function: if picker is callable, it is a user supplied function which determines whether the artist is hit by the mouse event:</p> <pre data-language=\"python\">hit, props = picker(artist, mouseevent)\n</pre> <p>to determine the hit test. if the mouse event is over the artist, return <em>hit=True</em> and props is a dictionary of properties you want added to the PickEvent attributes.</p> </li> </ul> </div>\n</blockquote> <p>ACCEPTS: [None|float|boolean|callable]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_pickradius\"><code>set_pickradius(pr)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_rasterized\"><code>set_rasterized(rasterized)</code></dt> <dd>\n<p>Force rasterized (bitmap) drawing in vector backend output.</p> <p>Defaults to None, which implies the backend’s default behavior</p> <p>ACCEPTS: [True | False | None]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_sketch_params\"><code>set_sketch_params(scale=None, length=None, randomness=None)</code></dt> <dd>\n<p>Sets the sketch parameters.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line, in pixels. If scale is <code>None</code>, or not provided, no sketch filter will be provided.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line, in pixels (default 128.0)</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded (default 16.0)</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_snap\"><code>set_snap(snap)</code></dt> <dd>\n<p>Sets the snap setting which may be:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>True: snap vertices to the nearest pixel center</li> <li>False: leave vertices as-is</li> <li>None: (auto) If the path contains only rectilinear line segments, round to the nearest pixel center</li> </ul> </div>\n</blockquote> <p>Only supported by the Agg and MacOSX backends.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_transform\"><code>set_transform(t)</code></dt> <dd>\n<p>Set the <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance used by this artist.</p> <p>ACCEPTS: <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_url\"><code>set_url(url)</code></dt> <dd>\n<p>Sets the url for the artist</p> <p>ACCEPTS: a url string</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_urls\"><code>set_urls(urls)</code></dt> \n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_visible\"><code>set_visible(b)</code></dt> <dd>\n<p>Set the artist’s visiblity.</p> <p>ACCEPTS: [True | False]</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.set_zorder\"><code>set_zorder(level)</code></dt> <dd>\n<p>Set the zorder for the artist. Artists with lower zorder values are drawn first.</p> <p>ACCEPTS: any number</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.TriMesh.stale\"><code>stale</code></dt> <dd>\n<p>If the artist is ‘stale’ and needs to be re-drawn for the output to match the internal state of the artist.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.to_rgba\"><code>to_rgba(x, alpha=None, bytes=False)</code></dt> <dd>\n<p>Return a normalized rgba array corresponding to <em>x</em>.</p> <p>In the normal case, <em>x</em> is a 1-D or 2-D sequence of scalars, and the corresponding ndarray of rgba values will be returned, based on the norm and colormap set for this ScalarMappable.</p> <p>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If <em>x</em> is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. If the last dimension is 3, the <em>alpha</em> kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the <em>alpha</em> kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</p> <p>In either case, if <em>bytes</em> is <em>False</em> (default), the rgba array will be floats in the 0-1 range; if it is <em>True</em>, the returned rgba array will be uint8 in the 0 to 255 range.</p> <p>Note: this method assumes the input is well-behaved; it does not check for anomalies such as <em>x</em> being a masked rgba array, or being an integer type other than uint8, or being a floating point rgba array with values outside the 0-1 range.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.update\"><code>update(props)</code></dt> <dd>\n<p>Update the properties of this <code>Artist</code> from the dictionary <em>prop</em>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.update_from\"><code>update_from(other)</code></dt> <dd>\n<p>copy properties from other to self</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"matplotlib.collections.TriMesh.update_scalarmappable\"><code>update_scalarmappable()</code></dt> <dd>\n<p>If the scalar mappable array is not none, update colors from scalar data</p> </dd>\n</dl> <dl class=\"attribute\"> <dt id=\"matplotlib.collections.TriMesh.zorder\"><code>zorder = 0</code></dt> \n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/collections_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/collections_api.html</a>\n  </p>\n</div>\n","pyplot_api":"<h1 id=\"pyplot\">pyplot</h1>  <h2 id=\"matplotlib-pyplot\">matplotlib.pyplot</h2> <p id=\"module-matplotlib.pyplot\">Provides a MATLAB-like plotting framework.</p> <p><code>pylab</code> combines pyplot with numpy into a single namespace. This is convenient for interactive work, but for programming it is recommended that the namespaces be kept separate, e.g.:</p> <pre data-language=\"python\">import numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 5, 0.1);\ny = np.sin(x)\nplt.plot(x, y)\n</pre> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.acorr\"><code>matplotlib.pyplot.acorr(x, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot the autocorrelation of <code>x</code>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : sequence of scalar</p> <p><strong>hold</strong> : boolean, optional, default: True</p> <p><strong>detrend</strong> : callable, optional, default: <code>mlab.detrend_none</code></p> <blockquote> <div>\n<p>x is detrended by the <code>detrend</code> callable. Default is no normalization.</p> </div>\n</blockquote> <p><strong>normed</strong> : boolean, optional, default: True</p> <blockquote> <div>\n<p>if True, normalize the data by the autocorrelation at the 0-th lag.</p> </div>\n</blockquote> <p><strong>usevlines</strong> : boolean, optional, default: True</p> <blockquote> <div>\n<p>if True, Axes.vlines is used to plot the vertical lines from the origin to the acorr. Otherwise, Axes.plot is used.</p> </div>\n</blockquote> <p><strong>maxlags</strong> : integer, optional, default: 10</p> <blockquote> <div>\n<p>number of lags to show. If None, will return all 2 * len(x) - 1 lags.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>(lags, c, line, b)</strong> : where:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>lags</code> are a length 2`maxlags+1 lag vector.</li> <li>\n<code>c</code> is the 2`maxlags+1 auto correlation vectorI</li> <li>\n<code>line</code> is a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance returned by <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot</code></a>.</li> <li>\n<code>b</code> is the x-axis.</li> </ul> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>linestyle</strong> : <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> prop, optional, default: None</p> <blockquote> <div>\n<p>Only used if usevlines is False.</p> </div>\n</blockquote> <p class=\"last\"><strong>marker</strong> : string, optional, default: ‘o’</p> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.xcorr\" title=\"matplotlib.pyplot.xcorr\"><code>xcorr</code></a> is top graph, and <a class=\"reference internal\" href=\"#matplotlib.pyplot.acorr\" title=\"matplotlib.pyplot.acorr\"><code>acorr</code></a> is bottom graph.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/xcorr_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/xcorr_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/xcorr_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/xcorr_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/xcorr_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/xcorr_demo.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.angle_spectrum\"><code>matplotlib.pyplot.angle_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot the angle spectrum.</p> <p>Call signature:</p> <pre data-language=\"python\">angle_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,\n               pad_to=None, sides='default', **kwargs)\n</pre> <p>Compute the angle spectrum (wrapped phase spectrum) of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>\n<blockquote class=\"first\"> <div>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> </dl> </dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the angle spectrum in radians (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function</dd> </dl> </div>\n</blockquote> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/spectrum_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/spectrum_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.magnitude_spectrum\" title=\"matplotlib.pyplot.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.angle_spectrum\" title=\"matplotlib.pyplot.angle_spectrum\"><code>angle_spectrum()</code></a> plots the magnitudes of the corresponding frequencies.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.phase_spectrum\" title=\"matplotlib.pyplot.phase_spectrum\"><code>phase_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.phase_spectrum\" title=\"matplotlib.pyplot.phase_spectrum\"><code>phase_spectrum()</code></a> plots the unwrapped version of this function.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram()</code></a> can plot the angle spectrum of segments within the signal in a colormap.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.annotate\"><code>matplotlib.pyplot.annotate(*args, **kwargs)</code></dt> <dd>\n<p>Create an annotation: a piece of text referring to a data point.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>s</strong> : string</p> <blockquote> <div>\n<p>label</p> </div>\n</blockquote> <p><strong>xy</strong> : (x, y)</p> <blockquote> <div>\n<p>position of element to annotate. See <em>xycoords</em> to control what coordinate system this value is interpretated in.</p> </div>\n</blockquote> <p><strong>xytext</strong> : (x, y) , optional, default: None</p> <blockquote> <div>\n<p>position of the label <code>s</code>. See <em>textcoords</em> to control what coordinate system this value is interpreted in.</p> </div>\n</blockquote> <p><strong>xycoords</strong> : string, optional, default: “data”</p> <blockquote> <div>\n<p>string that indicates what type of coordinates <code>xy</code> is. Examples: “figure points”, “figure pixels”, “figure fraction”, “axes points”, .... See <a class=\"reference internal\" href=\"text_api#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>matplotlib.text.Annotation</code></a> for more details.</p> </div>\n</blockquote> <p><strong>textcoords</strong> : string, optional, default: None</p> <blockquote> <div>\n<p>string that indicates what type of coordinates <a class=\"reference internal\" href=\"#matplotlib.pyplot.text\" title=\"matplotlib.pyplot.text\"><code>text</code></a> is. Examples: “figure points”, “figure pixels”, “figure fraction”, “axes points”, .... See <a class=\"reference internal\" href=\"text_api#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>matplotlib.text.Annotation</code></a> for more details.</p> </div>\n</blockquote> <p><strong>arrowprops</strong> : <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a> properties, optional</p> <blockquote> <div>\n<p>Dictionary of line properties for the arrow that connects the annotation to the point. If the dictionnary has a key <code>arrowstyle</code>, a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a> instance is created and drawn. See <a class=\"reference internal\" href=\"text_api#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>matplotlib.text.Annotation</code></a> for more details on valid options. Default is None.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>a</strong> : <a class=\"reference internal\" href=\"text_api#matplotlib.text.Annotation\" title=\"matplotlib.text.Annotation\"><code>Annotation</code></a></p> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p><em>arrowprops</em>, if not <em>None</em>, is a dictionary of line properties (see <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a>) for the arrow that connects annotation to the point.</p> <p>If the dictionary has a key <em>arrowstyle</em>, a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a> instance is created with the given dictionary and is drawn. Otherwise, a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.YAArrow\" title=\"matplotlib.patches.YAArrow\"><code>YAArrow</code></a> patch instance is created and drawn. Valid keys for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.YAArrow\" title=\"matplotlib.patches.YAArrow\"><code>YAArrow</code></a> are:</p> <table class=\"docutils\"> <colgroup> <col width=\"13%\"> <col width=\"87%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>width</td> <td>the width of the arrow in points</td> </tr> <tr class=\"row-odd\">\n<td>frac</td> <td>the fraction of the arrow length occupied by the head</td> </tr> <tr class=\"row-even\">\n<td>headwidth</td> <td>the width of the base of the arrow head in points</td> </tr> <tr class=\"row-odd\">\n<td>shrink</td> <td>oftentimes it is convenient to have the arrowtip and base a bit away from the text and point being annotated. If <em>d</em> is the distance between the text and annotated point, shrink will shorten the arrow so the tip and base are shink percent of the distance <em>d</em> away from the endpoints. i.e., <code>shrink=0.05 is 5%</code>\n</td> </tr> <tr class=\"row-even\">\n<td>?</td> <td>any key for <code>matplotlib.patches.polygon</code>\n</td> </tr> </tbody> </table> <p>Valid keys for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a> are:</p> <table class=\"docutils\"> <colgroup> <col width=\"22%\"> <col width=\"78%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>arrowstyle</td> <td>the arrow style</td> </tr> <tr class=\"row-odd\">\n<td>connectionstyle</td> <td>the connection style</td> </tr> <tr class=\"row-even\">\n<td>relpos</td> <td>default is (0.5, 0.5)</td> </tr> <tr class=\"row-odd\">\n<td>patchA</td> <td>default is bounding box of the text</td> </tr> <tr class=\"row-even\">\n<td>patchB</td> <td>default is None</td> </tr> <tr class=\"row-odd\">\n<td>shrinkA</td> <td>default is 2 points</td> </tr> <tr class=\"row-even\">\n<td>shrinkB</td> <td>default is 2 points</td> </tr> <tr class=\"row-odd\">\n<td>mutation_scale</td> <td>default is text size (in points)</td> </tr> <tr class=\"row-even\">\n<td>mutation_aspect</td> <td>default is 1.</td> </tr> <tr class=\"row-odd\">\n<td>?</td> <td>any key for <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.PathPatch\" title=\"matplotlib.patches.PathPatch\"><code>matplotlib.patches.PathPatch</code></a>\n</td> </tr> </tbody> </table> <p><em>xycoords</em> and <em>textcoords</em> are strings that indicate the coordinates of <em>xy</em> and <em>xytext</em>, and may be one of the following values:</p> <table class=\"docutils\"> <colgroup> <col width=\"25%\"> <col width=\"75%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘figure points’</td> <td>points from the lower left corner of the figure</td> </tr> <tr class=\"row-odd\">\n<td>‘figure pixels’</td> <td>pixels from the lower left corner of the figure</td> </tr> <tr class=\"row-even\">\n<td>‘figure fraction’</td> <td>0,0 is lower left of figure and 1,1 is upper right</td> </tr> <tr class=\"row-odd\">\n<td>‘axes points’</td> <td>points from lower left corner of axes</td> </tr> <tr class=\"row-even\">\n<td>‘axes pixels’</td> <td>pixels from lower left corner of axes</td> </tr> <tr class=\"row-odd\">\n<td>‘axes fraction’</td> <td>0,0 is lower left of axes and 1,1 is upper right</td> </tr> <tr class=\"row-even\">\n<td>‘data’</td> <td>use the coordinate system of the object being annotated (default)</td> </tr> <tr class=\"row-odd\">\n<td>‘offset points’</td> <td>Specify an offset (in points) from the <em>xy</em> value</td> </tr> <tr class=\"row-even\">\n<td>‘polar’</td> <td>you can specify <em>theta</em>, <em>r</em> for the annotation, even in cartesian plots. Note that if you are using a polar axes, you do not need to specify polar for the coordinate system since that is the native “data” coordinate system.</td> </tr> </tbody> </table> <p>If a ‘points’ or ‘pixels’ option is specified, values will be added to the bottom-left and if negative, values will be subtracted from the top-right. e.g.:</p> <pre data-language=\"python\"># 10 points to the right of the left border of the axes and\n# 5 points below the top border\nxy=(10,-5), xycoords='axes points'\n</pre> <p>You may use an instance of <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> or <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a>. See <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/annotations_guide.html#plotting-guide-annotation\"><span>Annotating Axes</span></a> for more details.</p> <p>The <em>annotation_clip</em> attribute controls the visibility of the annotation when it goes outside the axes area. If <code>True</code>, the annotation will only be drawn when the <em>xy</em> is inside the axes. If <code>False</code>, the annotation will always be drawn regardless of its position. The default is <code>None</code>, which behave as <code>True</code> only if <em>xycoords</em> is “data”.</p> <p>Additional kwargs are <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"30%\"> <col width=\"70%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_backgroundcolor\" title=\"matplotlib.text.Text.set_backgroundcolor\"><code>backgroundcolor</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>bbox</code></a></td> <td>FancyBboxPatch prop dict</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_box\" title=\"matplotlib.text.Text.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_on\" title=\"matplotlib.text.Text.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_path\" title=\"matplotlib.text.Text.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_color\" title=\"matplotlib.text.Text.set_color\"><code>color</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_family\" title=\"matplotlib.text.Text.set_family\"><code>family</code></a> or name or fontname or fontfamily</td> <td>[FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ | ‘monospace’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_fontproperties\" title=\"matplotlib.text.Text.set_fontproperties\"><code>fontproperties</code></a> or font_properties</td> <td>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_horizontalalignment\" title=\"matplotlib.text.Text.set_horizontalalignment\"><code>horizontalalignment</code></a> or ha</td> <td>[ ‘center’ | ‘right’ | ‘left’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_linespacing\" title=\"matplotlib.text.Text.set_linespacing\"><code>linespacing</code></a></td> <td>float (multiple of font size)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_multialignment\" title=\"matplotlib.text.Text.set_multialignment\"><code>multialignment</code></a></td> <td>[‘left’ | ‘right’ | ‘center’ ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>position</code></a></td> <td>(x,y)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation\" title=\"matplotlib.text.Text.set_rotation\"><code>rotation</code></a></td> <td>[ angle in degrees | ‘vertical’ | ‘horizontal’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation_mode\" title=\"matplotlib.text.Text.set_rotation_mode\"><code>rotation_mode</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_size\" title=\"matplotlib.text.Text.set_size\"><code>size</code></a> or fontsize</td> <td>[size in points | ‘xx-small’ | ‘x-small’ | ‘small’ | ‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_stretch\" title=\"matplotlib.text.Text.set_stretch\"><code>stretch</code></a> or fontstretch</td> <td>[a numeric value in range 0-1000 | ‘ultra-condensed’ | ‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_style\" title=\"matplotlib.text.Text.set_style\"><code>style</code></a> or fontstyle</td> <td>[ ‘normal’ | ‘italic’ | ‘oblique’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_text\" title=\"matplotlib.text.Text.set_text\"><code>text</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_usetex\" title=\"matplotlib.text.Text.set_usetex\"><code>usetex</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_variant\" title=\"matplotlib.text.Text.set_variant\"><code>variant</code></a> or fontvariant</td> <td>[ ‘normal’ | ‘small-caps’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_verticalalignment\" title=\"matplotlib.text.Text.set_verticalalignment\"><code>verticalalignment</code></a> or va or ma</td> <td>[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_weight\" title=\"matplotlib.text.Text.set_weight\"><code>weight</code></a> or fontweight</td> <td>[a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ | ‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_wrap\" title=\"matplotlib.text.Text.set_wrap\"><code>wrap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_x\" title=\"matplotlib.text.Text.set_x\"><code>x</code></a></td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_y\" title=\"matplotlib.text.Text.set_y\"><code>y</code></a></td> <td>float</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2.py\">Source code</a>)</p> <div class=\"figure\" id=\"id1\"> <img alt=\"../_images/annotation_demo2_00.png\" src=\"http://matplotlib.org/1.5.1/_images/annotation_demo2_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id2\"> <img alt=\"../_images/annotation_demo2_01.png\" src=\"http://matplotlib.org/1.5.1/_images/annotation_demo2_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/annotation_demo2_01.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.arrow\"><code>matplotlib.pyplot.arrow(x, y, dx, dy, hold=None, **kwargs)</code></dt> <dd>\n<p>Add an arrow to the axes.</p> <p>Call signature:</p> <pre data-language=\"python\">arrow(x, y, dx, dy, **kwargs)\n</pre> <p>Draws arrow on specified axis from (<em>x</em>, <em>y</em>) to (<em>x</em> + <em>dx</em>, <em>y</em> + <em>dy</em>). Uses FancyArrow patch to construct the arrow.</p> <p>The resulting arrow is affected by the axes aspect ratio and limits. This may produce an arrow whose head is not square with its stem. To create an arrow whose head is square with its stem, use <a class=\"reference internal\" href=\"#matplotlib.pyplot.annotate\" title=\"matplotlib.pyplot.annotate\"><code>annotate()</code></a> for example:</p> <pre data-language=\"python\">ax.annotate(\"\", xy=(0.5, 0.5), xytext=(0, 0),\n    arrowprops=dict(arrowstyle=\"-&gt;\"))\n</pre> <p>Optional kwargs control the arrow construction and properties:</p> <dl class=\"docutils\"> <dt>Constructor arguments</dt> <dd>\n<dl class=\"first last docutils\"> <dt>\n<em>width</em>: float (default: 0.001)</dt> <dd>width of full arrow tail</dd> <dt>\n<em>length_includes_head</em>: [True | False] (default: False)</dt> <dd>True if head is to be counted in calculating the length.</dd> <dt>\n<em>head_width</em>: float or None (default: 3*width)</dt> <dd>total width of the full arrow head</dd> <dt>\n<em>head_length</em>: float or None (default: 1.5 * head_width)</dt> <dd>length of arrow head</dd> <dt>\n<em>shape</em>: [‘full’, ‘left’, ‘right’] (default: ‘full’)</dt> <dd>draw the left-half, right-half, or full arrow</dd> <dt>\n<em>overhang</em>: float (default: 0)</dt> <dd>fraction that the arrow is swept back (0 overhang means triangular shape). Can be negative or greater than one.</dd> <dt>\n<em>head_starts_at_zero</em>: [True | False] (default: False)</dt> <dd>if True, the head starts being drawn at coordinate 0 instead of ending at coordinate 0.</dd> </dl> </dd> </dl> <p>Other valid kwargs (inherited from <code>Patch</code>) are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/arrow_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/arrow_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/arrow_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/arrow_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/arrow_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/arrow_demo.png\"> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.autoscale\"><code>matplotlib.pyplot.autoscale(enable=True, axis='both', tight=None)</code></dt> <dd>\n<p>Autoscale the axis view to the data (toggle).</p> <p>Convenience method for simple axis view autoscaling. It turns autoscaling on or off, and then, if autoscaling for either axis is on, it performs the autoscaling on the specified axis or axes.</p> <dl class=\"docutils\"> <dt>\n<em>enable</em>: [True | False | None]</dt> <dd>True (default) turns autoscaling on, False turns it off. None leaves the autoscaling state unchanged.</dd> <dt>\n<em>axis</em>: [‘x’ | ‘y’ | ‘both’]</dt> <dd>which axis to operate on; default is ‘both’</dd> <dt>\n<em>tight</em>: [True | False | None]</dt> <dd>If True, set view limits to data limits; if False, let the locator and margins expand the view limits; if None, use tight scaling if the only artist is an image, otherwise treat <em>tight</em> as False. The <em>tight</em> setting is retained for future autoscaling until it is explicitly changed.</dd> </dl> <p>Returns None.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.autumn\"><code>matplotlib.pyplot.autumn()</code></dt> <dd>\n<p>set the default colormap to autumn and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.axes\"><code>matplotlib.pyplot.axes(*args, **kwargs)</code></dt> <dd>\n<p>Add an axes to the figure.</p> <p>The axes is added at position <em>rect</em> specified by:</p> <ul class=\"simple\"> <li>\n<code>axes()</code> by itself creates a default full <code>subplot(111)</code> window axis.</li> <li>\n<code>axes(rect, axisbg='w')</code> where <em>rect</em> = [left, bottom, width, height] in normalized (0, 1) units. <em>axisbg</em> is the background color for the axis, default white.</li> <li>\n<code>axes(h)</code> where <em>h</em> is an axes instance makes <em>h</em> the current axis. An <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance is returned.</li> </ul> <table class=\"docutils\"> <colgroup> <col width=\"10%\"> <col width=\"21%\"> <col width=\"69%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">kwarg</th> <th class=\"head\">Accepts</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>axisbg</td> <td>color</td> <td>the axes background color</td> </tr> <tr class=\"row-odd\">\n<td>frameon</td> <td>[True|False]</td> <td>display the frame?</td> </tr> <tr class=\"row-even\">\n<td>sharex</td> <td>otherax</td> <td>current axes shares xaxis attribute with otherax</td> </tr> <tr class=\"row-odd\">\n<td>sharey</td> <td>otherax</td> <td>current axes shares yaxis attribute with otherax</td> </tr> <tr class=\"row-even\">\n<td>polar</td> <td>[True|False]</td> <td>use a polar axes?</td> </tr> <tr class=\"row-odd\">\n<td>aspect</td> <td>[str | num]</td> <td>[‘equal’, ‘auto’] or a number. If a number the ratio of x-unit/y-unit in screen-space. Also see <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_aspect\" title=\"matplotlib.axes.Axes.set_aspect\"><code>set_aspect()</code></a>.</td> </tr> </tbody> </table> <p>Examples:</p> <ul class=\"simple\"> <li>\n<code>examples/pylab_examples/axes_demo.py</code> places custom axes.</li> <li>\n<code>examples/pylab_examples/shared_axis_demo.py</code> uses <em>sharex</em> and <em>sharey</em>.</li> </ul> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.axhline\"><code>matplotlib.pyplot.axhline(y=0, xmin=0, xmax=1, hold=None, **kwargs)</code></dt> <dd>\n<p>Add a horizontal line across the axis.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>y</strong> : scalar, optional, default: 0</p> <blockquote> <div>\n<p>y position in data coordinates of the horizontal line.</p> </div>\n</blockquote> <p><strong>xmin</strong> : scalar, optional, default: 0</p> <blockquote> <div>\n<p>Should be between 0 and 1, 0 being the far left of the plot, 1 the far right of the plot.</p> </div>\n</blockquote> <p><strong>xmax</strong> : scalar, optional, default: 1</p> <blockquote> <div>\n<p>Should be between 0 and 1, 0 being the far left of the plot, 1 the far right of the plot.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\"><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a></p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.axhspan\" title=\"matplotlib.pyplot.axhspan\"><code>axhspan</code></a></dt> <dd>for example plot and source code</dd> </dl> <p class=\"last\"><code>Additional</code></p> </div> <h4 class=\"rubric\">Notes</h4> <p>kwargs are passed to <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> and can be used to control the line properties.</p> <h4 class=\"rubric\">Examples</h4> <ul> <li>\n<p class=\"first\">draw a thick red hline at ‘y’ = 0 that spans the xrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axhline(linewidth=4, color='r')\n</pre> </li> <li>\n<p class=\"first\">draw a default hline at ‘y’ = 1 that spans the xrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axhline(y=1)\n</pre> </li> <li>\n<p class=\"first\">draw a default hline at ‘y’ = .5 that spans the middle half of the xrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axhline(y=.5, xmin=0.25, xmax=0.75)\n</pre> </li> </ul> <p>Valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties, with the exception of ‘transform’:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.axhspan\"><code>matplotlib.pyplot.axhspan(ymin, ymax, xmin=0, xmax=1, hold=None, **kwargs)</code></dt> <dd>\n<p>Add a horizontal span (rectangle) across the axis.</p> <p>Call signature:</p> <pre data-language=\"python\">axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs)\n</pre> <p><em>y</em> coords are in data units and <em>x</em> coords are in axes (relative 0-1) units.</p> <p>Draw a horizontal span (rectangle) from <em>ymin</em> to <em>ymax</em>. With the default values of <em>xmin</em> = 0 and <em>xmax</em> = 1, this always spans the xrange, regardless of the xlim settings, even if you change them, e.g., with the <code>set_xlim()</code> command. That is, the horizontal extent is in axes coords: 0=left, 0.5=middle, 1.0=right but the <em>y</em> location is in data coordinates.</p> <p>Return value is a <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>matplotlib.patches.Polygon</code></a> instance.</p> <p>Examples:</p> <ul> <li>\n<p class=\"first\">draw a gray rectangle from <em>y</em> = 0.25-0.75 that spans the horizontal extent of the axes:</p> <pre data-language=\"python\">&gt;&gt;&gt; axhspan(0.25, 0.75, facecolor='0.5', alpha=0.5)\n</pre> </li> </ul> <p>Valid kwargs are <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>Polygon</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/axhspan_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/axhspan_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/axhspan_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/axhspan_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/axhspan_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/axhspan_demo.png\"> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.axis\"><code>matplotlib.pyplot.axis(*v, **kwargs)</code></dt> <dd>\n<p>Convenience method to get or set axis properties.</p> <p>Calling with no arguments:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis()\n</pre> <p>returns the current axes limits <code>[xmin, xmax, ymin, ymax]</code>.:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis(v)\n</pre> <p>sets the min and max of the x and y axes, with <code>v = [xmin, xmax, ymin, ymax]</code>.:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis('off')\n</pre> <p>turns off the axis lines and labels.:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis('equal')\n</pre> <p>changes limits of <em>x</em> or <em>y</em> axis so that equal increments of <em>x</em> and <em>y</em> have the same length; a circle is circular.:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis('scaled')\n</pre> <p>achieves the same result by changing the dimensions of the plot box instead of the axis data limits.:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis('tight')\n</pre> <p>changes <em>x</em> and <em>y</em> axis limits such that all data is shown. If all data is already shown, it will move it to the center of the figure without modifying (<em>xmax</em> - <em>xmin</em>) or (<em>ymax</em> - <em>ymin</em>). Note this is slightly different than in MATLAB.:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis('image')\n</pre> <p>is ‘scaled’ with the axis limits equal to the data limits.:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis('auto')\n</pre> <p>and:</p> <pre data-language=\"python\">&gt;&gt;&gt; axis('normal')\n</pre> <p>are deprecated. They restore default behavior; axis limits are automatically scaled to make the data fit comfortably within the plot box.</p> <p>if <code>len(*v)==0</code>, you can pass in <em>xmin</em>, <em>xmax</em>, <em>ymin</em>, <em>ymax</em> as kwargs selectively to alter just those limits without changing the others.</p> <pre data-language=\"python\">&gt;&gt;&gt; axis('square')\n</pre> <p>changes the limit ranges (<em>xmax</em>-<em>xmin</em>) and (<em>ymax</em>-<em>ymin</em>) of the <em>x</em> and <em>y</em> axes to be the same, and have the same scaling, resulting in a square plot.</p> <p>The xmin, xmax, ymin, ymax tuple is returned</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.xlim\" title=\"matplotlib.pyplot.xlim\"><code>xlim()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.pyplot.ylim\" title=\"matplotlib.pyplot.ylim\"><code>ylim()</code></a>\n</dt> <dd>For setting the x- and y-limits individually.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.axvline\"><code>matplotlib.pyplot.axvline(x=0, ymin=0, ymax=1, hold=None, **kwargs)</code></dt> <dd>\n<p>Add a vertical line across the axes.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : scalar, optional, default: 0</p> <blockquote> <div>\n<p>x position in data coordinates of the vertical line.</p> </div>\n</blockquote> <p><strong>ymin</strong> : scalar, optional, default: 0</p> <blockquote> <div>\n<p>Should be between 0 and 1, 0 being the bottom of the plot, 1 the top of the plot.</p> </div>\n</blockquote> <p><strong>ymax</strong> : scalar, optional, default: 1</p> <blockquote> <div>\n<p>Should be between 0 and 1, 0 being the bottom of the plot, 1 the top of the plot.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\"><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a></p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.axhspan\" title=\"matplotlib.pyplot.axhspan\"><code>axhspan</code></a></dt> <dd>for example plot and source code</dd> </dl> <p class=\"last\"><code>Additional</code></p> </div> <h4 class=\"rubric\">Examples</h4> <ul> <li>\n<p class=\"first\">draw a thick red vline at <em>x</em> = 0 that spans the yrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axvline(linewidth=4, color='r')\n</pre> </li> <li>\n<p class=\"first\">draw a default vline at <em>x</em> = 1 that spans the yrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axvline(x=1)\n</pre> </li> <li>\n<p class=\"first\">draw a default vline at <em>x</em> = .5 that spans the middle half of the yrange:</p> <pre data-language=\"python\">&gt;&gt;&gt; axvline(x=.5, ymin=0.25, ymax=0.75)\n</pre> </li> </ul> <p>Valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties, with the exception of ‘transform’:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.axvspan\"><code>matplotlib.pyplot.axvspan(xmin, xmax, ymin=0, ymax=1, hold=None, **kwargs)</code></dt> <dd>\n<p>Add a vertical span (rectangle) across the axes.</p> <p>Call signature:</p> <pre data-language=\"python\">axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs)\n</pre> <p><em>x</em> coords are in data units and <em>y</em> coords are in axes (relative 0-1) units.</p> <p>Draw a vertical span (rectangle) from <em>xmin</em> to <em>xmax</em>. With the default values of <em>ymin</em> = 0 and <em>ymax</em> = 1, this always spans the yrange, regardless of the ylim settings, even if you change them, e.g., with the <code>set_ylim()</code> command. That is, the vertical extent is in axes coords: 0=bottom, 0.5=middle, 1.0=top but the <em>y</em> location is in data coordinates.</p> <p>Return value is the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>matplotlib.patches.Polygon</code></a> instance.</p> <p>Examples:</p> <ul> <li>\n<p class=\"first\">draw a vertical green translucent rectangle from x=1.25 to 1.55 that spans the yrange of the axes:</p> <pre data-language=\"python\">&gt;&gt;&gt; axvspan(1.25, 1.55, facecolor='g', alpha=0.5)\n</pre> </li> </ul> <p>Valid kwargs are <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>Polygon</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.axhspan\" title=\"matplotlib.pyplot.axhspan\"><code>axhspan()</code></a></dt> <dd>for example plot and source code</dd> </dl> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.bar\"><code>matplotlib.pyplot.bar(left, height, width=0.8, bottom=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Make a bar plot.</p> <p>Make a bar plot with rectangles bounded by:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<code>left</code>, <code>left</code> + <code>width</code>, <code>bottom</code>, <code>bottom</code> + <code>height</code>\n</dt> <dd>(left, right, bottom and top edges)</dd> </dl> </div>\n</blockquote> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>left</strong> : sequence of scalars</p> <blockquote> <div>\n<p>the x coordinates of the left sides of the bars</p> </div>\n</blockquote> <p><strong>height</strong> : sequence of scalars</p> <blockquote> <div>\n<p>the heights of the bars</p> </div>\n</blockquote> <p><strong>width</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the width(s) of the bars default: 0.8</p> </div>\n</blockquote> <p><strong>bottom</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the y coordinate(s) of the bars default: None</p> </div>\n</blockquote> <p><strong>color</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the colors of the bar faces</p> </div>\n</blockquote> <p><strong>edgecolor</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the colors of the bar edges</p> </div>\n</blockquote> <p><strong>linewidth</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>width of bar edge(s). If None, use default linewidth; If 0, don’t draw edges. default: None</p> </div>\n</blockquote> <p><strong>tick_label</strong> : string or array-like, optional</p> <blockquote> <div>\n<p>the tick labels of the bars default: None</p> </div>\n</blockquote> <p><strong>xerr</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>if not None, will be used to generate errorbar(s) on the bar chart default: None</p> </div>\n</blockquote> <p><strong>yerr</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>if not None, will be used to generate errorbar(s) on the bar chart default: None</p> </div>\n</blockquote> <p><strong>ecolor</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>specifies the color of errorbar(s) default: None</p> </div>\n</blockquote> <p><strong>capsize</strong> : scalar, optional</p> <blockquote> <div>\n<p>determines the length in points of the error bar caps default: None, which will take the value from the <code>errorbar.capsize</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>error_kw</strong> : dict, optional</p> <blockquote> <div>\n<p>dictionary of kwargs to be passed to errorbar method. <em>ecolor</em> and <em>capsize</em> may be specified here rather than as independent kwargs.</p> </div>\n</blockquote> <p><strong>align</strong> : {‘edge’, ‘center’}, optional</p> <blockquote> <div>\n<p>If ‘edge’, aligns bars by their left edges (for vertical bars) and by their bottom edges (for horizontal bars). If ‘center’, interpret the <code>left</code> argument as the coordinates of the centers of the bars. To align on the align bars on the right edge pass a negative <code>width</code>.</p> </div>\n</blockquote> <p><strong>orientation</strong> : {‘vertical’, ‘horizontal’}, optional</p> <blockquote> <div>\n<p>The orientation of the bars.</p> </div>\n</blockquote> <p><strong>log</strong> : boolean, optional</p> <blockquote> <div>\n<p>If true, sets the axis to be log scale. default: False</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>bars</strong> : matplotlib.container.BarContainer</p> <blockquote class=\"last\"> <div>\n<p>Container with all of the bars + errorbars</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.barh\" title=\"matplotlib.pyplot.barh\"><code>barh</code></a></dt> <dd>Plot a horizontal bar plot.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘height’, ‘color’, ‘ecolor’, ‘edgecolor’, ‘bottom’, ‘tick_label’, ‘width’, ‘yerr’, ‘xerr’, ‘linewidth’, ‘left’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p><strong>Example:</strong> A stacked bar chart.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/bar_stacked.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/bar_stacked.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/bar_stacked.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/bar_stacked.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/bar_stacked.png\" src=\"http://matplotlib.org/1.5.1/_images/bar_stacked.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.barbs\"><code>matplotlib.pyplot.barbs(*args, **kw)</code></dt> <dd>\n<p>Plot a 2-D field of barbs.</p> <p>Call signatures:</p> <pre data-language=\"python\">barb(U, V, **kw)\nbarb(U, V, C, **kw)\nbarb(X, Y, U, V, **kw)\nbarb(X, Y, U, V, C, **kw)\n</pre> <p>Arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>X</em>, <em>Y</em>:</dt> <dd>The x and y coordinates of the barb locations (default is head of barb; see <em>pivot</em> kwarg)</dd> <dt>\n<em>U</em>, <em>V</em>:</dt> <dd>Give the x and y components of the barb shaft</dd> <dt>\n<em>C</em>:</dt> <dd>An optional array used to map colors to the barbs</dd> </dl> </div>\n</blockquote> <p>All arguments may be 1-D or 2-D arrays or sequences. If <em>X</em> and <em>Y</em> are absent, they will be generated as a uniform grid. If <em>U</em> and <em>V</em> are 2-D arrays but <em>X</em> and <em>Y</em> are 1-D, and if <code>len(X)</code> and <code>len(Y)</code> match the column and row dimensions of <em>U</em>, then <em>X</em> and <em>Y</em> will be expanded with <code>numpy.meshgrid()</code>.</p> <p><em>U</em>, <em>V</em>, <em>C</em> may be masked arrays, but masked <em>X</em>, <em>Y</em> are not supported at present.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>length</em>:</dt> <dd>Length of the barb in points; the other parts of the barb are scaled against this. Default is 9</dd> <dt>\n<em>pivot</em>: [ ‘tip’ | ‘middle’ ]</dt> <dd>The part of the arrow that is at the grid point; the arrow rotates about this point, hence the name <em>pivot</em>. Default is ‘tip’</dd> <dt>\n<em>barbcolor</em>: [ color | color sequence ]</dt> <dd>Specifies the color all parts of the barb except any flags. This parameter is analagous to the <em>edgecolor</em> parameter for polygons, which can be used instead. However this parameter will override facecolor.</dd> <dt>\n<em>flagcolor</em>: [ color | color sequence ]</dt> <dd>Specifies the color of any flags on the barb. This parameter is analagous to the <em>facecolor</em> parameter for polygons, which can be used instead. However this parameter will override facecolor. If this is not set (and <em>C</em> has not either) then <em>flagcolor</em> will be set to match <em>barbcolor</em> so that the barb has a uniform color. If <em>C</em> has been set, <em>flagcolor</em> has no effect.</dd> <dt>\n<em>sizes</em>:</dt> <dd>\n<p class=\"first\">A dictionary of coefficients specifying the ratio of a given feature to the length of the barb. Only those values one wishes to override need to be included. These features include:</p> <blockquote class=\"last\"> <div>\n<ul class=\"simple\"> <li>‘spacing’ - space between features (flags, full/half barbs)</li> <li>‘height’ - height (distance from shaft to top) of a flag or full barb</li> <li>‘width’ - width of a flag, twice the width of a full barb</li> <li>‘emptybarb’ - radius of the circle used for low magnitudes</li> </ul> </div>\n</blockquote> </dd> <dt>\n<em>fill_empty</em>:</dt> <dd>A flag on whether the empty barbs (circles) that are drawn should be filled with the flag color. If they are not filled, they will be drawn such that no color is applied to the center. Default is False</dd> <dt>\n<em>rounding</em>:</dt> <dd>A flag to indicate whether the vector magnitude should be rounded when allocating barb components. If True, the magnitude is rounded to the nearest multiple of the half-barb increment. If False, the magnitude is simply truncated to the next lowest multiple. Default is True</dd> <dt>\n<em>barb_increments</em>:</dt> <dd>\n<p class=\"first\">A dictionary of increments specifying values to associate with different parts of the barb. Only those values one wishes to override need to be included.</p> <blockquote class=\"last\"> <div>\n<ul class=\"simple\"> <li>‘half’ - half barbs (Default is 5)</li> <li>‘full’ - full barbs (Default is 10)</li> <li>‘flag’ - flags (default is 50)</li> </ul> </div>\n</blockquote> </dd> <dt>\n<em>flip_barb</em>:</dt> <dd>Either a single boolean flag or an array of booleans. Single boolean indicates whether the lines and flags should point opposite to normal for all barbs. An array (which should be the same size as the other data arrays) indicates whether to flip for each individual barb. Normal behavior is for the barbs and lines to point right (comes from wind barbs having these features point towards low pressure in the Northern Hemisphere.) Default is False</dd> </dl> </div>\n</blockquote> <p>Barbs are traditionally used in meteorology as a way to plot the speed and direction of wind observations, but can technically be used to plot any two dimensional vector quantity. As opposed to arrows, which give vector magnitude by the length of the arrow, the barbs give more quantitative information about the vector magnitude by putting slanted lines or a triangle for various increments in magnitude, as show schematically below:</p> <pre data-language=\"python\">:     /\\    \\\n:    /  \\    \\\n:   /    \\    \\    \\\n:  /      \\    \\    \\\n: ------------------------------\n</pre> <p>The largest increment is given by a triangle (or “flag”). After those come full lines (barbs). The smallest increment is a half line. There is only, of course, ever at most 1 half line. If the magnitude is small and only needs a single half-line and no full lines or triangles, the half-line is offset from the end of the barb so that it can be easily distinguished from barbs with a single full line. The magnitude for the barb shown above would nominally be 65, using the standard increments of 50, 10, and 5.</p> <p>linewidths and edgecolors can be used to customize the barb. Additional <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id3\"> <img alt=\"../_images/barb_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/barb_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id4\"> <img alt=\"../_images/barb_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/barb_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/barb_demo_01.pdf\">pdf</a>)</span></p> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.barh\"><code>matplotlib.pyplot.barh(bottom, width, height=0.8, left=None, hold=None, **kwargs)</code></dt> <dd>\n<p>Make a horizontal bar plot.</p> <p>Make a horizontal bar plot with rectangles bounded by:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<code>left</code>, <code>left</code> + <code>width</code>, <code>bottom</code>, <code>bottom</code> + <code>height</code>\n</dt> <dd>(left, right, bottom and top edges)</dd> </dl> </div>\n</blockquote> <p><code>bottom</code>, <code>width</code>, <code>height</code>, and <code>left</code> can be either scalars or sequences</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>bottom</strong> : scalar or array-like</p> <blockquote> <div>\n<p>the y coordinate(s) of the bars</p> </div>\n</blockquote> <p><strong>width</strong> : scalar or array-like</p> <blockquote> <div>\n<p>the width(s) of the bars</p> </div>\n</blockquote> <p><strong>height</strong> : sequence of scalars, optional, default: 0.8</p> <blockquote> <div>\n<p>the heights of the bars</p> </div>\n</blockquote> <p><strong>left</strong> : sequence of scalars</p> <blockquote> <div>\n<p>the x coordinates of the left sides of the bars</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>matplotlib.patches.Rectangle</code></a> instances.</p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>color</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the colors of the bars</p> </div>\n</blockquote> <p><strong>edgecolor</strong> : scalar or array-like, optional</p> <blockquote> <div>\n<p>the colors of the bar edges</p> </div>\n</blockquote> <p><strong>linewidth</strong> : scalar or array-like, optional, default: None</p> <blockquote> <div>\n<p>width of bar edge(s). If None, use default linewidth; If 0, don’t draw edges.</p> </div>\n</blockquote> <p><strong>tick_label</strong> : string or array-like, optional, default: None</p> <blockquote> <div>\n<p>the tick labels of the bars</p> </div>\n</blockquote> <p><strong>xerr</strong> : scalar or array-like, optional, default: None</p> <blockquote> <div>\n<p>if not None, will be used to generate errorbar(s) on the bar chart</p> </div>\n</blockquote> <p><strong>yerr</strong> : scalar or array-like, optional, default: None</p> <blockquote> <div>\n<p>if not None, will be used to generate errorbar(s) on the bar chart</p> </div>\n</blockquote> <p><strong>ecolor</strong> : scalar or array-like, optional, default: None</p> <blockquote> <div>\n<p>specifies the color of errorbar(s)</p> </div>\n</blockquote> <p><strong>capsize</strong> : scalar, optional</p> <blockquote> <div>\n<p>determines the length in points of the error bar caps default: None, which will take the value from the <code>errorbar.capsize</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>error_kw :</strong></p> <blockquote> <div>\n<p>dictionary of kwargs to be passed to errorbar method. <code>ecolor</code> and <code>capsize</code> may be specified here rather than as independent kwargs.</p> </div>\n</blockquote> <p><strong>align</strong> : [‘edge’ | ‘center’], optional, default: ‘edge’</p> <blockquote> <div>\n<p>If <code>edge</code>, aligns bars by their left edges (for vertical bars) and by their bottom edges (for horizontal bars). If <code>center</code>, interpret the <code>left</code> argument as the coordinates of the centers of the bars.</p> </div>\n</blockquote> <p><strong>log</strong> : boolean, optional, default: False</p> <blockquote class=\"last\"> <div>\n<p>If true, sets the axis to be log scale</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.bar\" title=\"matplotlib.pyplot.bar\"><code>bar</code></a></dt> <dd>Plot a vertical bar plot.</dd> </dl> <p class=\"last\"><code>Additional</code></p> </div> <h4 class=\"rubric\">Notes</h4> <p>The optional arguments <code>color</code>, <code>edgecolor</code>, <code>linewidth</code>, <code>xerr</code>, and <code>yerr</code> can be either scalars or sequences of length equal to the number of bars. This enables you to use bar as the basis for stacked bar charts, or candlestick plots. Detail: <code>xerr</code> and <code>yerr</code> are passed directly to <a class=\"reference internal\" href=\"#matplotlib.pyplot.errorbar\" title=\"matplotlib.pyplot.errorbar\"><code>errorbar()</code></a>, so they can also have shape 2xN for independent specification of lower and upper errors.</p> <p>Other optional kwargs:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.bone\"><code>matplotlib.pyplot.bone()</code></dt> <dd>\n<p>set the default colormap to bone and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.box\"><code>matplotlib.pyplot.box(on=None)</code></dt> <dd>\n<p>Turn the axes box on or off. <em>on</em> may be a boolean or a string, ‘on’ or ‘off’.</p> <p>If <em>on</em> is <em>None</em>, toggle state.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.boxplot\"><code>matplotlib.pyplot.boxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_xticks=True, hold=None, data=None)</code></dt> <dd>\n<p>Make a box and whisker plot.</p> <p>Call signature:</p> <pre data-language=\"python\">boxplot(self, x, notch=None, sym=None, vert=None, whis=None,\n        positions=None, widths=None, patch_artist=False,\n        bootstrap=None, usermedians=None, conf_intervals=None,\n        meanline=False, showmeans=False, showcaps=True,\n        showbox=True, showfliers=True, boxprops=None, labels=None,\n        flierprops=None, medianprops=None, meanprops=None,\n        capprops=None, whiskerprops=None, manage_xticks=True):\n</pre> <p>Make a box and whisker plot for each column of <em>x</em> or each vector in sequence <em>x</em>. The box extends from the lower to upper quartile values of the data, with a line at the median. The whiskers extend from the box to show the range of the data. Flier points are those past the end of the whiskers.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : Array or a sequence of vectors.</p> <blockquote> <div>\n<p>The input data.</p> </div>\n</blockquote> <p><strong>notch</strong> : bool, default = False</p> <blockquote> <div>\n<p>If False, produces a rectangular box plot. If True, will produce a notched box plot</p> </div>\n</blockquote> <p><strong>sym</strong> : str or None, default = None</p> <blockquote> <div>\n<p>The default symbol for flier points. Enter an empty string (‘’) if you don’t want to show fliers. If <code>None</code>, then the fliers default to ‘b+’ If you want more control use the flierprops kwarg.</p> </div>\n</blockquote> <p><strong>vert</strong> : bool, default = True</p> <blockquote> <div>\n<p>If True (default), makes the boxes vertical. If False, makes horizontal boxes.</p> </div>\n</blockquote> <p><strong>whis</strong> : float, sequence (default = 1.5) or string</p> <blockquote> <div>\n<p>As a float, determines the reach of the whiskers past the first and third quartiles (e.g., Q3 + whis*IQR, IQR = interquartile range, Q3-Q1). Beyond the whiskers, data are considered outliers and are plotted as individual points. Set this to an unreasonably high value to force the whiskers to show the min and max values. Alternatively, set this to an ascending sequence of percentile (e.g., [5, 95]) to set the whiskers at specific percentiles of the data. Finally, <em>whis</em> can be the string ‘range’ to force the whiskers to the min and max of the data. In the edge case that the 25th and 75th percentiles are equivalent, <em>whis</em> will be automatically set to ‘range’.</p> </div>\n</blockquote> <p><strong>bootstrap</strong> : None (default) or integer</p> <blockquote> <div>\n<p>Specifies whether to bootstrap the confidence intervals around the median for notched boxplots. If bootstrap==None, no bootstrapping is performed, and notches are calculated using a Gaussian-based asymptotic approximation (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and Kendall and Stuart, 1967). Otherwise, bootstrap specifies the number of times to bootstrap the median to determine it’s 95% confidence intervals. Values between 1000 and 10000 are recommended.</p> </div>\n</blockquote> <p><strong>usermedians</strong> : array-like or None (default)</p> <blockquote> <div>\n<p>An array or sequence whose first dimension (or length) is compatible with <em>x</em>. This overrides the medians computed by matplotlib for each element of <em>usermedians</em> that is not None. When an element of <em>usermedians</em> == None, the median will be computed by matplotlib as normal.</p> </div>\n</blockquote> <p><strong>conf_intervals</strong> : array-like or None (default)</p> <blockquote> <div>\n<p>Array or sequence whose first dimension (or length) is compatible with <em>x</em> and whose second dimension is 2. When the current element of <em>conf_intervals</em> is not None, the notch locations computed by matplotlib are overridden (assuming notch is True). When an element of <em>conf_intervals</em> is None, boxplot compute notches the method specified by the other kwargs (e.g., <em>bootstrap</em>).</p> </div>\n</blockquote> <p><strong>positions</strong> : array-like, default = [1, 2, ..., n]</p> <blockquote> <div>\n<p>Sets the positions of the boxes. The ticks and limits are automatically set to match the positions.</p> </div>\n</blockquote> <p><strong>widths</strong> : array-like, default = 0.5</p> <blockquote> <div>\n<p>Either a scalar or a vector and sets the width of each box. The default is 0.5, or <code>0.15*(distance between extreme positions)</code> if that is smaller.</p> </div>\n</blockquote> <p><strong>labels</strong> : sequence or None (default)</p> <blockquote> <div>\n<p>Labels for each dataset. Length must be compatible with dimensions of <em>x</em></p> </div>\n</blockquote> <p><strong>patch_artist</strong> : bool, default = False</p> <blockquote> <div>\n<p>If False produces boxes with the Line2D artist If True produces boxes with the Patch artist</p> </div>\n</blockquote> <p><strong>showmeans</strong> : bool, default = False</p> <blockquote> <div>\n<p>If True, will toggle one the rendering of the means</p> </div>\n</blockquote> <p><strong>showcaps</strong> : bool, default = True</p> <blockquote> <div>\n<p>If True, will toggle one the rendering of the caps</p> </div>\n</blockquote> <p><strong>showbox</strong> : bool, default = True</p> <blockquote> <div>\n<p>If True, will toggle one the rendering of box</p> </div>\n</blockquote> <p><strong>showfliers</strong> : bool, default = True</p> <blockquote> <div>\n<p>If True, will toggle one the rendering of the fliers</p> </div>\n</blockquote> <p><strong>boxprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the boxes</p> </div>\n</blockquote> <p><strong>whiskerprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the whiskers</p> </div>\n</blockquote> <p><strong>capprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the caps</p> </div>\n</blockquote> <p><strong>flierprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the fliers</p> </div>\n</blockquote> <p><strong>medianprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the medians</p> </div>\n</blockquote> <p><strong>meanprops</strong> : dict or None (default)</p> <blockquote> <div>\n<p>If provided, will set the plotting style of the means</p> </div>\n</blockquote> <p><strong>meanline</strong> : bool, default = False</p> <blockquote> <div>\n<p>If True (and <em>showmeans</em> is True), will try to render the mean as a line spanning the full width of the box according to <em>meanprops</em>. Not recommended if <em>shownotches</em> is also True. Otherwise, means will be shown as points.</p> </div>\n</blockquote> <p><strong>manage_xticks</strong> : bool, default = True</p> <blockquote> <div>\n<p>If the function should adjust the xlim and xtick locations.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>result</strong> : dict</p> <blockquote class=\"last\"> <div>\n<p>A dictionary mapping each component of the boxplot to a list of the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a> instances created. That dictionary has the following keys (assuming vertical boxplots):</p> <ul class=\"simple\"> <li>boxes: the main body of the boxplot showing the quartiles and the median’s confidence intervals if enabled.</li> <li>medians: horizonal lines at the median of each box.</li> <li>whiskers: the vertical lines extending to the most extreme, n-outlier data points.</li> <li>caps: the horizontal lines at the ends of the whiskers.</li> <li>fliers: points representing data that extend beyond the whiskers (outliers).</li> <li>means: points or lines representing the means.</li> </ul> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_00_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_00_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_00_00.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/boxplot_demo_00_00.png\" src=\"http://matplotlib.org/1.5.1/_images/boxplot_demo_00_00.png\"> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_01_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_01_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/boxplot_demo_01_00.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/boxplot_demo_01_00.png\" src=\"http://matplotlib.org/1.5.1/_images/boxplot_demo_01_00.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.broken_barh\"><code>matplotlib.pyplot.broken_barh(xranges, yrange, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot horizontal bars.</p> <p>Call signature:</p> <pre data-language=\"python\">broken_barh(self, xranges, yrange, **kwargs)\n</pre> <p>A collection of horizontal bars spanning <em>yrange</em> with a sequence of <em>xranges</em>.</p> <p>Required arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Argument</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>xranges</em></td> <td>sequence of (<em>xmin</em>, <em>xwidth</em>)</td> </tr> <tr class=\"row-odd\">\n<td><em>yrange</em></td> <td>sequence of (<em>ymin</em>, <em>ywidth</em>)</td> </tr> </tbody> </table> </div>\n</blockquote> <p>kwargs are <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.BrokenBarHCollection\" title=\"matplotlib.collections.BrokenBarHCollection\"><code>matplotlib.collections.BrokenBarHCollection</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>these can either be a single argument, i.e.,:</p> <pre data-language=\"python\">facecolors = 'black'\n</pre> <p>or a sequence of arguments for the various bars, i.e.,:</p> <pre data-language=\"python\">facecolors = ('black', 'red', 'green')\n</pre> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/broken_barh.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/broken_barh.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/broken_barh.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/broken_barh.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/broken_barh.png\" src=\"http://matplotlib.org/1.5.1/_images/broken_barh.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.cla\"><code>matplotlib.pyplot.cla()</code></dt> <dd>\n<p>Clear the current axes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.clabel\"><code>matplotlib.pyplot.clabel(CS, *args, **kwargs)</code></dt> <dd>\n<p>Label a contour plot.</p> <p>Call signature:</p> <pre data-language=\"python\">clabel(cs, **kwargs)\n</pre> <p>Adds labels to line contours in <em>cs</em>, where <em>cs</em> is a <code>ContourSet</code> object returned by contour.</p> <pre data-language=\"python\">clabel(cs, v, **kwargs)\n</pre> <p>only labels contours listed in <em>v</em>.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>fontsize</em>:</dt> <dd>size in points or relative size e.g., ‘smaller’, ‘x-large’</dd> <dt>\n<em>colors</em>:</dt> <dd>\n<ul class=\"first last simple\"> <li>if <em>None</em>, the color of each label matches the color of the corresponding contour</li> <li>if one string color, e.g., <em>colors</em> = ‘r’ or <em>colors</em> = ‘red’, all labels will be plotted in this color</li> <li>if a tuple of matplotlib color args (string, float, rgb, etc), different labels will be plotted in different colors in the order specified</li> </ul> </dd> <dt>\n<em>inline</em>:</dt> <dd>controls whether the underlying contour is removed or not. Default is <em>True</em>.</dd> <dt>\n<em>inline_spacing</em>:</dt> <dd>space in pixels to leave on each side of label when placing inline. Defaults to 5. This spacing will be exact for labels at locations where the contour is straight, less so for labels on curved contours.</dd> <dt>\n<em>fmt</em>:</dt> <dd>a format string for the label. Default is ‘%1.3f’ Alternatively, this can be a dictionary matching contour levels with arbitrary strings to use for each contour level (i.e., fmt[level]=string), or it can be any callable, such as a <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>Formatter</code></a> instance, that returns a string when called with a numeric contour level.</dd> <dt>\n<em>manual</em>:</dt> <dd>\n<p class=\"first\">if <em>True</em>, contour labels will be placed manually using mouse clicks. Click the first button near a contour to add a label, click the second button (or potentially both mouse buttons at once) to finish adding labels. The third button can be used to remove the last label added, but only if labels are not inline. Alternatively, the keyboard can be used to select label locations (enter to end label placement, delete or backspace act like the third mouse button, and any other key will select a label location).</p> <p class=\"last\"><em>manual</em> can be an iterable object of x,y tuples. Contour labels will be created as if mouse is clicked at each x,y positions.</p> </dd> <dt>\n<em>rightside_up</em>:</dt> <dd>if <em>True</em> (default), label rotations will always be plus or minus 90 degrees from level.</dd> <dt>\n<em>use_clabeltext</em>:</dt> <dd>if <em>True</em> (default is False), ClabelText class (instead of matplotlib.Text) is used to create labels. ClabelText recalculates rotation angles of texts during the drawing time, therefore this can be used if aspect of the axes changes.</dd> </dl> </div>\n</blockquote> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id5\"> <img alt=\"../_images/contour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id6\"> <img alt=\"../_images/contour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id7\"> <img alt=\"../_images/contour_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id8\"> <img alt=\"../_images/contour_demo_03.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_03.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id9\"> <img alt=\"../_images/contour_demo_04.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_04.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id10\"> <img alt=\"../_images/contour_demo_05.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_05.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.pdf\">pdf</a>)</span></p> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.clf\"><code>matplotlib.pyplot.clf()</code></dt> <dd>\n<p>Clear the current figure.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.clim\"><code>matplotlib.pyplot.clim(vmin=None, vmax=None)</code></dt> <dd>\n<p>Set the color limits of the current image.</p> <p>To apply clim to all axes images do:</p> <pre data-language=\"python\">clim(0, 0.5)\n</pre> <p>If either <em>vmin</em> or <em>vmax</em> is None, the image min/max respectively will be used for color scaling.</p> <p>If you want to set the clim of multiple images, use, for example:</p> <pre data-language=\"python\">for im in gca().get_images():\n    im.set_clim(0, 0.05)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.close\"><code>matplotlib.pyplot.close(*args)</code></dt> <dd>\n<p>Close a figure window.</p> <p><code>close()</code> by itself closes the current figure</p> <p><code>close(h)</code> where <em>h</em> is a <code>Figure</code> instance, closes that figure</p> <p><code>close(num)</code> closes figure number <em>num</em></p> <p><code>close(name)</code> where <em>name</em> is a string, closes figure with that label</p> <p><code>close('all')</code> closes all the figure windows</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.cohere\"><code>matplotlib.pyplot.cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend=<function detrend_none>, window=<function window_hanning>, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, hold=None, data=None, **kwargs)</function></function></code></dt> <dd>\n<p>Plot the coherence between <em>x</em> and <em>y</em>.</p> <p>Call signature:</p> <pre data-language=\"python\">cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend = mlab.detrend_none,\n       window = mlab.window_hanning, noverlap=0, pad_to=None,\n       sides='default', scale_by_freq=None, **kwargs)\n</pre> <p>Plot the coherence between <em>x</em> and <em>y</em>. Coherence is the normalized cross spectral density:</p> <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-58775d54bf.png\" class=\"center\"><p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between blocks. The default value is 0 (no overlap).</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> </dl> </dd> </dl> <p>The return value is a tuple (<em>Cxy</em>, <em>f</em>), where <em>f</em> are the frequencies of the coherence vector.</p> <p>kwargs are applied to the lines.</p> <p>References:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>Bendat &amp; Piersol – Random Data: Analysis and Measurement Procedures, John Wiley &amp; Sons (1986)</li> </ul> </div>\n</blockquote> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties of the coherence plot:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/cohere_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/cohere_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/cohere_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/cohere_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/cohere_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/cohere_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.colorbar\"><code>matplotlib.pyplot.colorbar(mappable=None, cax=None, ax=None, **kw)</code></dt> <dd>\n<p>Add a colorbar to a plot.</p> <p>Function signatures for the <a class=\"reference internal\" href=\"#module-matplotlib.pyplot\" title=\"matplotlib.pyplot\"><code>pyplot</code></a> interface; all but the first are also method signatures for the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a> method:</p> <pre data-language=\"python\">colorbar(**kwargs)\ncolorbar(mappable, **kwargs)\ncolorbar(mappable, cax=cax, **kwargs)\ncolorbar(mappable, ax=ax, **kwargs)\n</pre> <p>arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>mappable</em></dt> <dd>the <code>Image</code>, <code>ContourSet</code>, etc. to which the colorbar applies; this argument is mandatory for the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.colorbar\" title=\"matplotlib.figure.Figure.colorbar\"><code>colorbar()</code></a> method but optional for the <a class=\"reference internal\" href=\"#matplotlib.pyplot.colorbar\" title=\"matplotlib.pyplot.colorbar\"><code>colorbar()</code></a> function, which sets the default to the current image.</dd> </dl> </div>\n</blockquote> <p>keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt><em>cax</em></dt> <dd>None | axes object into which the colorbar will be drawn</dd> <dt><em>ax</em></dt> <dd>None | parent axes object(s) from which space for a new colorbar axes will be stolen. If a list of axes is given they will all be resized to make room for the colorbar axes.</dd> <dt><em>use_gridspec</em></dt> <dd>False | If <em>cax</em> is None, a new <em>cax</em> is created as an instance of Axes. If <em>ax</em> is an instance of Subplot and <em>use_gridspec</em> is True, <em>cax</em> is created as an instance of Subplot using the grid_spec module.</dd> </dl> </div>\n</blockquote> <p>Additional keyword arguments are of two kinds:</p> <blockquote> <div>\n<p>axes properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"20%\"> <col width=\"80%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>orientation</em></td> <td>vertical or horizontal</td> </tr> <tr class=\"row-odd\">\n<td><em>fraction</em></td> <td>0.15; fraction of original axes to use for colorbar</td> </tr> <tr class=\"row-even\">\n<td><em>pad</em></td> <td>0.05 if vertical, 0.15 if horizontal; fraction of original axes between colorbar and new image axes</td> </tr> <tr class=\"row-odd\">\n<td><em>shrink</em></td> <td>1.0; fraction by which to shrink the colorbar</td> </tr> <tr class=\"row-even\">\n<td><em>aspect</em></td> <td>20; ratio of long to short dimensions</td> </tr> <tr class=\"row-odd\">\n<td><em>anchor</em></td> <td>(0.0, 0.5) if vertical; (0.5, 1.0) if horizontal; the anchor point of the colorbar axes</td> </tr> <tr class=\"row-even\">\n<td><em>panchor</em></td> <td>(1.0, 0.5) if vertical; (0.5, 0.0) if horizontal; the anchor point of the colorbar parent axes. If False, the parent axes’ anchor will be unchanged</td> </tr> </tbody> </table> </div>\n</blockquote> <p>colorbar properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"18%\"> <col width=\"82%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>extend</em></td> <td>[ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ] If not ‘neither’, make pointed end(s) for out-of- range values. These are set for a given colormap using the colormap set_under and set_over methods.</td> </tr> <tr class=\"row-odd\">\n<td><em>extendfrac</em></td> <td>[ <em>None</em> | ‘auto’ | length | lengths ] If set to <em>None</em>, both the minimum and maximum triangular colorbar extensions with have a length of 5% of the interior colorbar length (this is the default setting). If set to ‘auto’, makes the triangular colorbar extensions the same lengths as the interior boxes (when <em>spacing</em> is set to ‘uniform’) or the same lengths as the respective adjacent interior boxes (when <em>spacing</em> is set to ‘proportional’). If a scalar, indicates the length of both the minimum and maximum triangular colorbar extensions as a fraction of the interior colorbar length. A two-element sequence of fractions may also be given, indicating the lengths of the minimum and maximum colorbar extensions respectively as a fraction of the interior colorbar length.</td> </tr> <tr class=\"row-even\">\n<td><em>extendrect</em></td> <td>[ <em>False</em> | <em>True</em> ] If <em>False</em> the minimum and maximum colorbar extensions will be triangular (the default). If <em>True</em> the extensions will be rectangular.</td> </tr> <tr class=\"row-odd\">\n<td><em>spacing</em></td> <td>[ ‘uniform’ | ‘proportional’ ] Uniform spacing gives each discrete color the same space; proportional makes the space proportional to the data interval.</td> </tr> <tr class=\"row-even\">\n<td><em>ticks</em></td> <td>[ None | list of ticks | Locator object ] If None, ticks are determined automatically from the input.</td> </tr> <tr class=\"row-odd\">\n<td><em>format</em></td> <td>[ None | format string | Formatter object ] If None, the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.ScalarFormatter\" title=\"matplotlib.ticker.ScalarFormatter\"><code>ScalarFormatter</code></a> is used. If a format string is given, e.g., ‘%.3f’, that is used. An alternative <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>Formatter</code></a> object may be given instead.</td> </tr> <tr class=\"row-even\">\n<td><em>drawedges</em></td> <td>[ False | True ] If true, draw lines at color boundaries.</td> </tr> </tbody> </table> <p>The following will probably be useful only in the context of indexed colors (that is, when the mappable has norm=NoNorm()), or other unusual circumstances.</p> <table class=\"docutils\"> <colgroup> <col width=\"19%\"> <col width=\"81%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>boundaries</em></td> <td>None or a sequence</td> </tr> <tr class=\"row-odd\">\n<td><em>values</em></td> <td>None or a sequence which must be of length 1 less than the sequence of <em>boundaries</em>. For each region delimited by adjacent entries in <em>boundaries</em>, the color mapped to the corresponding value in values will be used.</td> </tr> </tbody> </table> </div>\n</blockquote> </div>\n</blockquote> <p>If <em>mappable</em> is a <code>ContourSet</code>, its <em>extend</em> kwarg is included automatically.</p> <p>Note that the <em>shrink</em> kwarg provides a simple way to keep a vertical colorbar, for example, from being taller than the axes of the mappable to which the colorbar is attached; but it is a manual method requiring some trial and error. If the colorbar is too tall (or a horizontal colorbar is too wide) use a smaller value of <em>shrink</em>.</p> <p>For more precise control, you can manually specify the positions of the axes objects in which the mappable and the colorbar are drawn. In this case, do not use any of the axes properties kwargs.</p> <p>It is known that some vector graphics viewer (svg and pdf) renders white gaps between segments of the colorbar. This is due to bugs in the viewers not matplotlib. As a workaround the colorbar can be rendered with overlapping segments:</p> <pre data-language=\"python\">cbar = colorbar()\ncbar.solids.set_edgecolor(\"face\")\ndraw()\n</pre> <p>However this has negative consequences in other circumstances. Particularly with semi transparent images (alpha &lt; 1) and colorbar extensions and is not enabled by default see (issue #1188).</p> <dl class=\"docutils\"> <dt>returns:</dt> <dd>\n<a class=\"reference internal\" href=\"colorbar_api#matplotlib.colorbar.Colorbar\" title=\"matplotlib.colorbar.Colorbar\"><code>Colorbar</code></a> instance; see also its base class, <a class=\"reference internal\" href=\"colorbar_api#matplotlib.colorbar.ColorbarBase\" title=\"matplotlib.colorbar.ColorbarBase\"><code>ColorbarBase</code></a>. Call the <a class=\"reference internal\" href=\"colorbar_api#matplotlib.colorbar.ColorbarBase.set_label\" title=\"matplotlib.colorbar.ColorbarBase.set_label\"><code>set_label()</code></a> method to label the colorbar.</dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.colors\"><code>matplotlib.pyplot.colors()</code></dt> <dd>\n<p>This is a do-nothing function to provide you with help on how matplotlib handles colors.</p> <p>Commands which take color arguments can use several formats to specify the colors. For the basic built-in colors, you can use a single letter</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"42%\"> <col width=\"58%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Alias</th> <th class=\"head\">Color</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘b’</td> <td>blue</td> </tr> <tr class=\"row-odd\">\n<td>‘g’</td> <td>green</td> </tr> <tr class=\"row-even\">\n<td>‘r’</td> <td>red</td> </tr> <tr class=\"row-odd\">\n<td>‘c’</td> <td>cyan</td> </tr> <tr class=\"row-even\">\n<td>‘m’</td> <td>magenta</td> </tr> <tr class=\"row-odd\">\n<td>‘y’</td> <td>yellow</td> </tr> <tr class=\"row-even\">\n<td>‘k’</td> <td>black</td> </tr> <tr class=\"row-odd\">\n<td>‘w’</td> <td>white</td> </tr> </tbody> </table> </div>\n</blockquote> <p>For a greater range of colors, you have two options. You can specify the color using an html hex string, as in:</p> <pre data-language=\"python\">color = '#eeefff'\n</pre> <p>or you can pass an R,G,B tuple, where each of R,G,B are in the range [0,1].</p> <p>You can also use any legal html name for a color, for example:</p> <pre data-language=\"python\">color = 'red'\ncolor = 'burlywood'\ncolor = 'chartreuse'\n</pre> <p>The example below creates a subplot with a dark slate gray background:</p> <pre data-language=\"python\">subplot(111, axisbg=(0.1843, 0.3098, 0.3098))\n</pre> <p>Here is an example that creates a pale turquoise title:</p> <pre data-language=\"python\">title('Is this the best color?', color='#afeeee')\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.connect\"><code>matplotlib.pyplot.connect(s, func)</code></dt> <dd>\n<p>Connect event with string <em>s</em> to <em>func</em>. The signature of <em>func</em> is:</p> <pre data-language=\"python\">def func(event)\n</pre> <p>where event is a <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.Event\" title=\"matplotlib.backend_bases.Event\"><code>matplotlib.backend_bases.Event</code></a>. The following events are recognized</p> <ul class=\"simple\"> <li>‘button_press_event’</li> <li>‘button_release_event’</li> <li>‘draw_event’</li> <li>‘key_press_event’</li> <li>‘key_release_event’</li> <li>‘motion_notify_event’</li> <li>‘pick_event’</li> <li>‘resize_event’</li> <li>‘scroll_event’</li> <li>‘figure_enter_event’,</li> <li>‘figure_leave_event’,</li> <li>‘axes_enter_event’,</li> <li>‘axes_leave_event’</li> <li>‘close_event’</li> </ul> <p>For the location events (button and key press/release), if the mouse is over the axes, the variable <code>event.inaxes</code> will be set to the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> the event occurs is over, and additionally, the variables <code>event.xdata</code> and <code>event.ydata</code> will be defined. This is the mouse location in data coords. See <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.KeyEvent\" title=\"matplotlib.backend_bases.KeyEvent\"><code>KeyEvent</code></a> and <a class=\"reference internal\" href=\"backend_bases_api#matplotlib.backend_bases.MouseEvent\" title=\"matplotlib.backend_bases.MouseEvent\"><code>MouseEvent</code></a> for more info.</p> <p>Return value is a connection id that can be used with <code>mpl_disconnect()</code>.</p> <p>Example usage:</p> <pre data-language=\"python\">def on_press(event):\n    print('you pressed', event.button, event.xdata, event.ydata)\n\ncid = canvas.mpl_connect('button_press_event', on_press)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.contour\"><code>matplotlib.pyplot.contour(*args, **kwargs)</code></dt> <dd>\n<p>Plot contours.</p> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.</p> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> differs from the MATLAB version in that it does not draw the polygon edges. To draw edges, add line contours with calls to <a class=\"reference internal\" href=\"#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour()</code></a>.</p> <p>Call signatures:</p> <pre data-language=\"python\">contour(Z)\n</pre> <p>make a contour plot of an array <em>Z</em>. The level values are chosen automatically.</p> <pre data-language=\"python\">contour(X,Y,Z)\n</pre> <p><em>X</em>, <em>Y</em> specify the (x, y) coordinates of the surface</p> <pre data-language=\"python\">contour(Z,N)\ncontour(X,Y,Z,N)\n</pre> <p>contour up to <em>N</em> automatically-chosen levels.</p> <pre data-language=\"python\">contour(Z,V)\ncontour(X,Y,Z,V)\n</pre> <p>draw contour lines at the values specified in sequence <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">contourf(..., V)\n</pre> <p>fill the <code>len(V)-1</code> regions between the values in <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">contour(Z, **kwargs)\n</pre> <p>Use keyword args to control colors, linewidth, origin, cmap ... see below for more details.</p> <p><em>X</em> and <em>Y</em> must both be 2-D with the same shape as <em>Z</em>, or they must both be 1-D such that <code>len(X)</code> is the number of columns in <em>Z</em> and <code>len(Y)</code> is the number of rows in <em>Z</em>.</p> <p><code>C = contour(...)</code> returns a <code>QuadContourSet</code> object.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>corner_mask</em>: [ <em>True</em> | <em>False</em> | ‘legacy’ ]</dt> <dd>\n<p class=\"first\">Enable/disable corner masking, which only has an effect if <em>Z</em> is a masked array. If <em>False</em>, any quad touching a masked point is masked out. If <em>True</em>, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual. If ‘legacy’, the old contouring algorithm is used, which is equivalent to <em>False</em> and is deprecated, only remaining whilst the new algorithm is tested fully.</p> <p class=\"last\">If not specified, the default is taken from rcParams[‘contour.corner_mask’], which is True unless it has been modified.</p> </dd> <dt>\n<em>colors</em>: [ <em>None</em> | string | (mpl_colors) ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the colormap specified by cmap will be used.</p> <p>If a string, like ‘r’ or ‘red’, all levels will be plotted in this color.</p> <p class=\"last\">If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</p> </dd> <dt>\n<em>alpha</em>: float</dt> <dd>The alpha blending value</dd> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A cm <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or <em>None</em>. If <em>cmap</em> is <em>None</em> and <em>colors</em> is <em>None</em>, a default Colormap is used.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance for scaling data values to colors. If <em>norm</em> is <em>None</em> and <em>colors</em> is <em>None</em>, the default linear scaling is used.</dd> <dt>\n<em>vmin</em>, <em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>If not <em>None</em>, either or both of these values will be supplied to the <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance, overriding the default color scaling based on <em>levels</em>.</dd> <dt>\n<em>levels</em>: [level0, level1, ..., leveln]</dt> <dd>A list of floating point numbers indicating the level curves to draw, in increasing order; e.g., to draw just the zero contour pass <code>levels=[0]</code>\n</dd> <dt>\n<em>origin</em>: [ <em>None</em> | ‘upper’ | ‘lower’ | ‘image’ ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the first value of <em>Z</em> will correspond to the lower left corner, location (0,0). If ‘image’, the rc value for <code>image.origin</code> will be used.</p> <p class=\"last\">This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </dd> </dl> <p><em>extent</em>: [ <em>None</em> | (x0,x1,y0,y1) ]</p> <blockquote> <div>\n<p>If <em>origin</em> is not <em>None</em>, then <em>extent</em> is interpreted as in <a class=\"reference internal\" href=\"#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow()</code></a>: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If <em>origin</em> is <em>None</em>, then (<em>x0</em>, <em>y0</em>) is the position of Z[0,0], and (<em>x1</em>, <em>y1</em>) is the position of Z[-1,-1].</p> <p>This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>locator</em>: [ <em>None</em> | ticker.Locator subclass ]</dt> <dd>If <em>locator</em> is <em>None</em>, the default <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> is used. The locator is used to determine the contour levels if they are not given explicitly via the <em>V</em> argument.</dd> <dt>\n<em>extend</em>: [ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ]</dt> <dd>Unless this is ‘neither’, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range, but can be set via <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_under\" title=\"matplotlib.colors.Colormap.set_under\"><code>matplotlib.colors.Colormap.set_under()</code></a> and <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_over\" title=\"matplotlib.colors.Colormap.set_over\"><code>matplotlib.colors.Colormap.set_over()</code></a> methods.</dd> <dt>\n<em>xunits</em>, <em>yunits</em>: [ <em>None</em> | registered units ]</dt> <dd>Override axis units by specifying an instance of a <a class=\"reference internal\" href=\"units_api#matplotlib.units.ConversionInterface\" title=\"matplotlib.units.ConversionInterface\"><code>matplotlib.units.ConversionInterface</code></a>.</dd> <dt>\n<em>antialiased</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>enable antialiasing, overriding the defaults. For filled contours, the default is <em>True</em>. For line contours, it is taken from rcParams[‘lines.antialiased’].</dd> <dt>\n<em>nchunk</em>: [ 0 | integer ]</dt> <dd>If 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of <em>nchunk</em> by <em>nchunk</em> quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the <em>antialiased</em> flag and value of <em>alpha</em>.</dd> </dl> </div>\n</blockquote> <p>contour-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>linewidths</em>: [ <em>None</em> | number | tuple of numbers ]</dt> <dd>\n<p class=\"first\">If <em>linewidths</em> is <em>None</em>, the default width in <code>lines.linewidth</code> in <code>matplotlibrc</code> is used.</p> <p>If a number, all levels will be plotted with this linewidth.</p> <p class=\"last\">If a tuple, different levels will be plotted with different linewidths in the order specified.</p> </dd> <dt>\n<em>linestyles</em>: [ <em>None</em> | ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">If <em>linestyles</em> is <em>None</em>, the default is ‘solid’ unless the lines are monochrome. In that case, negative contours will take their linestyle from the <code>matplotlibrc</code> <code>contour.negative_linestyle</code> setting.</p> <p class=\"last\"><em>linestyles</em> can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.</p> </dd> </dl> </div>\n</blockquote> <p>contourf-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>hatches</em>:</dt> <dd>A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</dd> </dl> </div>\n</blockquote> <p>Note: contourf fills intervals that are closed at the top; that is, for boundaries <em>z1</em> and <em>z2</em>, the filled region is:</p> <pre data-language=\"python\">z1 &lt; z &lt;= z2\n</pre> <p>There is one exception: if the lowest boundary coincides with the minimum value of the <em>z</em> array, then that minimum value will be included in the lowest interval.</p> <p><strong>Examples:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id11\"> <img alt=\"../_images/contour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id12\"> <img alt=\"../_images/contour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id13\"> <img alt=\"../_images/contour_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id14\"> <img alt=\"../_images/contour_demo_03.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_03.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id15\"> <img alt=\"../_images/contour_demo_04.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_04.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id16\"> <img alt=\"../_images/contour_demo_05.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_05.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.pdf\">pdf</a>)</span></p> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id17\"> <img alt=\"../_images/contourf_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id18\"> <img alt=\"../_images/contourf_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id19\"> <img alt=\"../_images/contourf_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.pdf\">pdf</a>)</span></p> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/contour_corner_mask.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_corner_mask.png\"> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.contourf\"><code>matplotlib.pyplot.contourf(*args, **kwargs)</code></dt> <dd>\n<p>Plot contours.</p> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.</p> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.contourf\" title=\"matplotlib.pyplot.contourf\"><code>contourf()</code></a> differs from the MATLAB version in that it does not draw the polygon edges. To draw edges, add line contours with calls to <a class=\"reference internal\" href=\"#matplotlib.pyplot.contour\" title=\"matplotlib.pyplot.contour\"><code>contour()</code></a>.</p> <p>Call signatures:</p> <pre data-language=\"python\">contour(Z)\n</pre> <p>make a contour plot of an array <em>Z</em>. The level values are chosen automatically.</p> <pre data-language=\"python\">contour(X,Y,Z)\n</pre> <p><em>X</em>, <em>Y</em> specify the (x, y) coordinates of the surface</p> <pre data-language=\"python\">contour(Z,N)\ncontour(X,Y,Z,N)\n</pre> <p>contour up to <em>N</em> automatically-chosen levels.</p> <pre data-language=\"python\">contour(Z,V)\ncontour(X,Y,Z,V)\n</pre> <p>draw contour lines at the values specified in sequence <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">contourf(..., V)\n</pre> <p>fill the <code>len(V)-1</code> regions between the values in <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">contour(Z, **kwargs)\n</pre> <p>Use keyword args to control colors, linewidth, origin, cmap ... see below for more details.</p> <p><em>X</em> and <em>Y</em> must both be 2-D with the same shape as <em>Z</em>, or they must both be 1-D such that <code>len(X)</code> is the number of columns in <em>Z</em> and <code>len(Y)</code> is the number of rows in <em>Z</em>.</p> <p><code>C = contour(...)</code> returns a <code>QuadContourSet</code> object.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>corner_mask</em>: [ <em>True</em> | <em>False</em> | ‘legacy’ ]</dt> <dd>\n<p class=\"first\">Enable/disable corner masking, which only has an effect if <em>Z</em> is a masked array. If <em>False</em>, any quad touching a masked point is masked out. If <em>True</em>, only the triangular corners of quads nearest those points are always masked out, other triangular corners comprising three unmasked points are contoured as usual. If ‘legacy’, the old contouring algorithm is used, which is equivalent to <em>False</em> and is deprecated, only remaining whilst the new algorithm is tested fully.</p> <p class=\"last\">If not specified, the default is taken from rcParams[‘contour.corner_mask’], which is True unless it has been modified.</p> </dd> <dt>\n<em>colors</em>: [ <em>None</em> | string | (mpl_colors) ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the colormap specified by cmap will be used.</p> <p>If a string, like ‘r’ or ‘red’, all levels will be plotted in this color.</p> <p class=\"last\">If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</p> </dd> <dt>\n<em>alpha</em>: float</dt> <dd>The alpha blending value</dd> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A cm <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or <em>None</em>. If <em>cmap</em> is <em>None</em> and <em>colors</em> is <em>None</em>, a default Colormap is used.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance for scaling data values to colors. If <em>norm</em> is <em>None</em> and <em>colors</em> is <em>None</em>, the default linear scaling is used.</dd> <dt>\n<em>vmin</em>, <em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>If not <em>None</em>, either or both of these values will be supplied to the <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance, overriding the default color scaling based on <em>levels</em>.</dd> <dt>\n<em>levels</em>: [level0, level1, ..., leveln]</dt> <dd>A list of floating point numbers indicating the level curves to draw, in increasing order; e.g., to draw just the zero contour pass <code>levels=[0]</code>\n</dd> <dt>\n<em>origin</em>: [ <em>None</em> | ‘upper’ | ‘lower’ | ‘image’ ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the first value of <em>Z</em> will correspond to the lower left corner, location (0,0). If ‘image’, the rc value for <code>image.origin</code> will be used.</p> <p class=\"last\">This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </dd> </dl> <p><em>extent</em>: [ <em>None</em> | (x0,x1,y0,y1) ]</p> <blockquote> <div>\n<p>If <em>origin</em> is not <em>None</em>, then <em>extent</em> is interpreted as in <a class=\"reference internal\" href=\"#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow()</code></a>: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If <em>origin</em> is <em>None</em>, then (<em>x0</em>, <em>y0</em>) is the position of Z[0,0], and (<em>x1</em>, <em>y1</em>) is the position of Z[-1,-1].</p> <p>This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>locator</em>: [ <em>None</em> | ticker.Locator subclass ]</dt> <dd>If <em>locator</em> is <em>None</em>, the default <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> is used. The locator is used to determine the contour levels if they are not given explicitly via the <em>V</em> argument.</dd> <dt>\n<em>extend</em>: [ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ]</dt> <dd>Unless this is ‘neither’, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range, but can be set via <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_under\" title=\"matplotlib.colors.Colormap.set_under\"><code>matplotlib.colors.Colormap.set_under()</code></a> and <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_over\" title=\"matplotlib.colors.Colormap.set_over\"><code>matplotlib.colors.Colormap.set_over()</code></a> methods.</dd> <dt>\n<em>xunits</em>, <em>yunits</em>: [ <em>None</em> | registered units ]</dt> <dd>Override axis units by specifying an instance of a <a class=\"reference internal\" href=\"units_api#matplotlib.units.ConversionInterface\" title=\"matplotlib.units.ConversionInterface\"><code>matplotlib.units.ConversionInterface</code></a>.</dd> <dt>\n<em>antialiased</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>enable antialiasing, overriding the defaults. For filled contours, the default is <em>True</em>. For line contours, it is taken from rcParams[‘lines.antialiased’].</dd> <dt>\n<em>nchunk</em>: [ 0 | integer ]</dt> <dd>If 0, no subdivision of the domain. Specify a positive integer to divide the domain into subdomains of <em>nchunk</em> by <em>nchunk</em> quads. Chunking reduces the maximum length of polygons generated by the contouring algorithm which reduces the rendering workload passed on to the backend and also requires slightly less RAM. It can however introduce rendering artifacts at chunk boundaries depending on the backend, the <em>antialiased</em> flag and value of <em>alpha</em>.</dd> </dl> </div>\n</blockquote> <p>contour-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>linewidths</em>: [ <em>None</em> | number | tuple of numbers ]</dt> <dd>\n<p class=\"first\">If <em>linewidths</em> is <em>None</em>, the default width in <code>lines.linewidth</code> in <code>matplotlibrc</code> is used.</p> <p>If a number, all levels will be plotted with this linewidth.</p> <p class=\"last\">If a tuple, different levels will be plotted with different linewidths in the order specified.</p> </dd> <dt>\n<em>linestyles</em>: [ <em>None</em> | ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">If <em>linestyles</em> is <em>None</em>, the default is ‘solid’ unless the lines are monochrome. In that case, negative contours will take their linestyle from the <code>matplotlibrc</code> <code>contour.negative_linestyle</code> setting.</p> <p class=\"last\"><em>linestyles</em> can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.</p> </dd> </dl> </div>\n</blockquote> <p>contourf-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>hatches</em>:</dt> <dd>A list of cross hatch patterns to use on the filled areas. If None, no hatching will be added to the contour. Hatching is supported in the PostScript, PDF, SVG and Agg backends only.</dd> </dl> </div>\n</blockquote> <p>Note: contourf fills intervals that are closed at the top; that is, for boundaries <em>z1</em> and <em>z2</em>, the filled region is:</p> <pre data-language=\"python\">z1 &lt; z &lt;= z2\n</pre> <p>There is one exception: if the lowest boundary coincides with the minimum value of the <em>z</em> array, then that minimum value will be included in the lowest interval.</p> <p><strong>Examples:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id20\"> <img alt=\"../_images/contour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id21\"> <img alt=\"../_images/contour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id22\"> <img alt=\"../_images/contour_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_02.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id23\"> <img alt=\"../_images/contour_demo_03.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_03.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_03.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id24\"> <img alt=\"../_images/contour_demo_04.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_04.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_04.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id25\"> <img alt=\"../_images/contour_demo_05.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_demo_05.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_demo_05.pdf\">pdf</a>)</span></p> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id26\"> <img alt=\"../_images/contourf_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id27\"> <img alt=\"../_images/contourf_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id28\"> <img alt=\"../_images/contourf_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/contourf_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contourf_demo_02.pdf\">pdf</a>)</span></p> </div> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/contour_corner_mask.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/contour_corner_mask.png\" src=\"http://matplotlib.org/1.5.1/_images/contour_corner_mask.png\"> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.cool\"><code>matplotlib.pyplot.cool()</code></dt> <dd>\n<p>set the default colormap to cool and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.copper\"><code>matplotlib.pyplot.copper()</code></dt> <dd>\n<p>set the default colormap to copper and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.csd\"><code>matplotlib.pyplot.csd(x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot the cross-spectral density.</p> <p>Call signature:</p> <pre data-language=\"python\">csd(x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,\n    window=mlab.window_hanning, noverlap=0, pad_to=None,\n    sides='default', scale_by_freq=None, return_line=None, **kwargs)\n</pre> <p>The cross spectral density <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0005c3a5e5.png\" style=\"position: relative; bottom: -9px\"> by Welch’s average periodogram method. The vectors <em>x</em> and <em>y</em> are divided into <em>NFFT</em> length segments. Each segment is detrended by function <em>detrend</em> and windowed by function <em>window</em>. <em>noverlap</em> gives the length of the overlap between segments. The product of the direct FFTs of <em>x</em> and <em>y</em> are averaged over each segment to compute <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-0005c3a5e5.png\" style=\"position: relative; bottom: -9px\">, with a scaling to correct for power loss due to windowing.</p> <p>If len(<em>x</em>) &lt; <em>NFFT</em> or len(<em>y</em>) &lt; <em>NFFT</em>, they will be zero padded to <em>NFFT</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>, <em>y</em>: 1-D arrays or sequences</dt> <dd>Arrays or sequences containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between segments. The default value is 0 (no overlap).</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> <dt>\n<em>return_line</em>: bool</dt> <dd>Whether to include the line object plotted in the returned values. Default is False.</dd> </dl> </dd> </dl> <p>If <em>return_line</em> is False, returns the tuple (<em>Pxy</em>, <em>freqs</em>). If <em>return_line</em> is True, returns the tuple (<em>Pxy</em>, <em>freqs</em>. <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Pxy</em>: 1-D array</dt> <dd>The values for the cross spectrum <code>P_{xy}</code> before scaling (complex valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>Pxy</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function. Only returend if <em>return_line</em> is True.</dd> </dl> </div>\n</blockquote> <p>For plotting, the power is plotted as <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-6c04e9a88a.png\" style=\"position: relative; bottom: -9px\"> for decibels, though <code>P_{xy}</code> itself is returned.</p> <dl class=\"docutils\"> <dt>References:</dt> <dd>Bendat &amp; Piersol – Random Data: Analysis and Measurement Procedures, John Wiley &amp; Sons (1986)</dd> </dl> <p>kwargs control the Line2D properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/csd_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/csd_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/csd_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/csd_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/csd_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/csd_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.psd\" title=\"matplotlib.pyplot.psd\"><code>psd()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.psd\" title=\"matplotlib.pyplot.psd\"><code>psd()</code></a> is the equivalent to setting y=x.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.delaxes\"><code>matplotlib.pyplot.delaxes(*args)</code></dt> <dd>\n<p>Remove an axes from the current figure. If <em>ax</em> doesn’t exist, an error will be raised.</p> <p><code>delaxes()</code>: delete the current axes</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.disconnect\"><code>matplotlib.pyplot.disconnect(cid)</code></dt> <dd>\n<p>Disconnect callback id cid</p> <p>Example usage:</p> <pre data-language=\"python\">cid = canvas.mpl_connect('button_press_event', on_press)\n#...later\ncanvas.mpl_disconnect(cid)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.draw\"><code>matplotlib.pyplot.draw()</code></dt> <dd>\n<p>Redraw the current figure.</p> <p>This is used in interactive mode to update a figure that has been altered, but not automatically re-drawn. This should be only rarely needed, but there may be ways to modify the state of a figure with out marking it as <code>stale</code>. Please report these cases as bugs.</p> <p>A more object-oriented alternative, given any <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>Figure</code></a> instance, <code>fig</code>, that was created using a <a class=\"reference internal\" href=\"#module-matplotlib.pyplot\" title=\"matplotlib.pyplot\"><code>pyplot</code></a> function, is:</p> <pre data-language=\"python\">fig.canvas.draw_idle()\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.errorbar\"><code>matplotlib.pyplot.errorbar(x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot an errorbar graph.</p> <p>Call signature:</p> <pre data-language=\"python\">errorbar(x, y, yerr=None, xerr=None,\n         fmt='', ecolor=None, elinewidth=None, capsize=None,\n         barsabove=False, lolims=False, uplims=False,\n         xlolims=False, xuplims=False, errorevery=1,\n         capthick=None)\n</pre> <p>Plot <em>x</em> versus <em>y</em> with error deltas in <em>yerr</em> and <em>xerr</em>. Vertical errorbars are plotted if <em>yerr</em> is not <em>None</em>. Horizontal errorbars are plotted if <em>xerr</em> is not <em>None</em>.</p> <p><em>x</em>, <em>y</em>, <em>xerr</em>, and <em>yerr</em> can all be scalars, which plots a single error bar at <em>x</em>, <em>y</em>.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>xerr</em>/<em>yerr</em>: [ scalar | N, Nx1, or 2xN array-like ]</dt> <dd>\n<p class=\"first\">If a scalar number, len(N) array-like object, or an Nx1 array-like object, errorbars are drawn at +/-value relative to the data.</p> <p class=\"last\">If a sequence of shape 2xN, errorbars are drawn at -row1 and +row2 relative to the data.</p> </dd> <dt>\n<em>fmt</em>: [ ‘’ | ‘none’ | plot format string ]</dt> <dd>The plot format symbol. If <em>fmt</em> is ‘none’ (case-insensitive), only the errorbars are plotted. This is used for adding errorbars to a bar plot, for example. Default is ‘’, an empty plot format string; properties are then identical to the defaults for <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a>.</dd> <dt>\n<em>ecolor</em>: [ <em>None</em> | mpl color ]</dt> <dd>A matplotlib color arg which gives the color the errorbar lines; if <em>None</em>, use the color of the line connecting the markers.</dd> <dt>\n<em>elinewidth</em>: scalar</dt> <dd>The linewidth of the errorbar lines. If <em>None</em>, use the linewidth.</dd> <dt>\n<em>capsize</em>: scalar</dt> <dd>The length of the error bar caps in points; if <em>None</em>, it will take the value from <code>errorbar.capsize</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</dd> <dt>\n<em>capthick</em>: scalar</dt> <dd>An alias kwarg to <em>markeredgewidth</em> (a.k.a. - <em>mew</em>). This setting is a more sensible name for the property that controls the thickness of the error bar cap in points. For backwards compatibility, if <em>mew</em> or <em>markeredgewidth</em> are given, then they will over-ride <em>capthick</em>. This may change in future releases.</dd> <dt>\n<em>barsabove</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>if <em>True</em>, will plot the errorbars above the plot symbols. Default is below.</dd> <dt>\n<em>lolims</em> / <em>uplims</em> / <em>xlolims</em> / <em>xuplims</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>These arguments can be used to indicate that a value gives only upper/lower limits. In that case a caret symbol is used to indicate this. lims-arguments may be of the same type as <em>xerr</em> and <em>yerr</em>. To use limits with inverted axes, <code>set_xlim()</code> or <code>set_ylim()</code> must be called before <a class=\"reference internal\" href=\"#matplotlib.pyplot.errorbar\" title=\"matplotlib.pyplot.errorbar\"><code>errorbar()</code></a>.</dd> <dt>\n<em>errorevery</em>: positive integer</dt> <dd>subsamples the errorbars. e.g., if errorevery=5, errorbars for every 5-th datapoint will be plotted. The data plot itself still shows all data points.</dd> </dl> </div>\n</blockquote> <p>All other keyword arguments are passed on to the plot command for the markers. For example, this code makes big red squares with thick green edges:</p> <pre data-language=\"python\">x,y,yerr = rand(3,10)\nerrorbar(x, y, yerr, marker='s',\n         mfc='red', mec='green', ms=20, mew=4)\n</pre> <p>where <em>mfc</em>, <em>mec</em>, <em>ms</em> and <em>mew</em> are aliases for the longer property names, <em>markerfacecolor</em>, <em>markeredgecolor</em>, <em>markersize</em> and <em>markeredgewith</em>.</p> <p>valid kwargs for the marker properties are</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>Returns (<em>plotline</em>, <em>caplines</em>, <em>barlinecols</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>plotline</em>: <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>\n<em>x</em>, <em>y</em> plot markers and/or line</dd> <dt>\n<em>caplines</em>: list of error bar cap</dt> <dd>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instances</dd> <dt>\n<em>barlinecols</em>: list of</dt> <dd>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a> instances for the horizontal and vertical error ranges.</dd> </dl> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/errorbar_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/errorbar_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/errorbar_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/errorbar_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/errorbar_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/errorbar_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘yerr’, ‘xerr’, ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.eventplot\"><code>matplotlib.pyplot.eventplot(positions, orientation='horizontal', lineoffsets=1, linelengths=1, linewidths=None, colors=None, linestyles='solid', hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot identical parallel lines at specific positions.</p> <p>Call signature:</p> <pre data-language=\"python\">eventplot(positions, orientation='horizontal', lineoffsets=0,\n          linelengths=1, linewidths=None, color =None,\n          linestyles='solid'\n</pre> <p>Plot parallel lines at the given positions. positions should be a 1D or 2D array-like object, with each row corresponding to a row or column of lines.</p> <p>This type of plot is commonly used in neuroscience for representing neural events, where it is commonly called a spike raster, dot raster, or raster plot.</p> <p>However, it is useful in any situation where you wish to show the timing or position of multiple sets of discrete events, such as the arrival times of people to a business on each day of the month or the date of hurricanes each year of the last century.</p> <dl class=\"docutils\"> <dt>\n<em>orientation</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[ ‘horizonal’ | ‘vertical’ ]</span>\n</dt> <dd>‘horizonal’ : the lines will be vertical and arranged in rows “vertical’ : lines will be horizontal and arranged in columns</dd> <dt>\n<em>lineoffsets</em> :</dt> <dd>A float or array-like containing floats.</dd> <dt>\n<em>linelengths</em> :</dt> <dd>A float or array-like containing floats.</dd> <dt>\n<em>linewidths</em> :</dt> <dd>A float or array-like containing floats.</dd> <dt><em>colors</em></dt> <dd>must be a sequence of RGBA tuples (e.g., arbitrary color strings, etc, not allowed) or a list of such sequences</dd> <dt>\n<em>linestyles</em> :</dt> <dd>[ ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ] or an array of these values</dd> </dl> <p>For linelengths, linewidths, colors, and linestyles, if only a single value is given, that value is applied to all lines. If an array-like is given, it must have the same length as positions, and each value will be applied to the corresponding row or column in positions.</p> <p>Returns a list of <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.EventCollection\" title=\"matplotlib.collections.EventCollection\"><code>matplotlib.collections.EventCollection</code></a> objects that were added.</p> <p>kwargs are <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection.set_color\" title=\"matplotlib.collections.LineCollection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection.set_paths\" title=\"matplotlib.collections.LineCollection.set_paths\"><code>paths</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection.set_segments\" title=\"matplotlib.collections.LineCollection.set_segments\"><code>segments</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection.set_verts\" title=\"matplotlib.collections.LineCollection.set_verts\"><code>verts</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventplot_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventplot_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventplot_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/eventplot_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/eventplot_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/eventplot_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘colors’, ‘lineoffsets’, ‘linestyles’, ‘linewidths’, ‘linelengths’, ‘positions’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.figimage\"><code>matplotlib.pyplot.figimage(*args, **kwargs)</code></dt> <dd>\n<p>Adds a non-resampled image to the figure.</p> <p>call signatures:</p> <pre data-language=\"python\">figimage(X, **kwargs)\n</pre> <p>adds a non-resampled array <em>X</em> to the figure.</p> <pre data-language=\"python\">figimage(X, xo, yo)\n</pre> <p>with pixel offsets <em>xo</em>, <em>yo</em>,</p> <p><em>X</em> must be a float array:</p> <ul class=\"simple\"> <li>If <em>X</em> is MxN, assume luminance (grayscale)</li> <li>If <em>X</em> is MxNx3, assume RGB</li> <li>If <em>X</em> is MxNx4, assume RGBA</li> </ul> <p>Optional keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"14%\"> <col width=\"86%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Keyword</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>resize</td> <td>a boolean, True or False. If “True”, then re-size the Figure to match the given image size.</td> </tr> <tr class=\"row-odd\">\n<td>xo or yo</td> <td>An integer, the <em>x</em> and <em>y</em> image offset in pixels</td> </tr> <tr class=\"row-even\">\n<td>cmap</td> <td>a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance, e.g., cm.jet. If <em>None</em>, default to the rc <code>image.cmap</code> value</td> </tr> <tr class=\"row-odd\">\n<td>norm</td> <td>a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance. The default is normalization(). This scales luminance -&gt; 0-1</td> </tr> <tr class=\"row-even\">\n<td>vmin|vmax</td> <td>are used to scale a luminance image to 0-1. If either is <em>None</em>, the min and max of the luminance values will be used. Note if you pass a norm instance, the settings for <em>vmin</em> and <em>vmax</em> will be ignored.</td> </tr> <tr class=\"row-odd\">\n<td>alpha</td> <td>the alpha blending value, default is <em>None</em>\n</td> </tr> <tr class=\"row-even\">\n<td>origin</td> <td>[ ‘upper’ | ‘lower’ ] Indicates where the [0,0] index of the array is in the upper left or lower left corner of the axes. Defaults to the rc image.origin value</td> </tr> </tbody> </table> </div>\n</blockquote> <p>figimage complements the axes image (<a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.imshow\" title=\"matplotlib.axes.Axes.imshow\"><code>imshow()</code></a>) which will be resampled to fit the current axes. If you want a resampled image to fill the entire figure, you can define an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> with size [0,1,0,1].</p> <p>An <a class=\"reference internal\" href=\"image_api#matplotlib.image.FigureImage\" title=\"matplotlib.image.FigureImage\"><code>matplotlib.image.FigureImage</code></a> instance is returned.</p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figimage_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figimage_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figimage_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/figimage_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/figimage_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/figimage_demo.png\"> </div> <p>Additional kwargs are Artist kwargs passed on to <a class=\"reference internal\" href=\"image_api#matplotlib.image.FigureImage\" title=\"matplotlib.image.FigureImage\"><code>FigureImage</code></a> Addition kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.figlegend\"><code>matplotlib.pyplot.figlegend(handles, labels, loc, **kwargs)</code></dt> <dd>\n<p>Place a legend in the figure.</p> <dl class=\"docutils\"> <dt><em>labels</em></dt> <dd>a sequence of strings</dd> <dt><em>handles</em></dt> <dd>a sequence of <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> or <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> instances</dd> <dt><em>loc</em></dt> <dd>can be a string or an integer specifying the legend location</dd> </dl> <p>A <a class=\"reference internal\" href=\"legend_api#matplotlib.legend.Legend\" title=\"matplotlib.legend.Legend\"><code>matplotlib.legend.Legend</code></a> instance is returned.</p> <p>Example:</p> <pre data-language=\"python\">figlegend( (line1, line2, line3),\n           ('label1', 'label2', 'label3'),\n           'upper right' )\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\"><a class=\"reference internal\" href=\"#matplotlib.pyplot.legend\" title=\"matplotlib.pyplot.legend\"><code>legend()</code></a></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.fignum_exists\"><code>matplotlib.pyplot.fignum_exists(num)</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.figtext\"><code>matplotlib.pyplot.figtext(*args, **kwargs)</code></dt> <dd>\n<p>Add text to figure.</p> <p>Call signature:</p> <pre data-language=\"python\">text(x, y, s, fontdict=None, **kwargs)\n</pre> <p>Add text to figure at location <em>x</em>, <em>y</em> (relative 0-1 coords). See <a class=\"reference internal\" href=\"#matplotlib.pyplot.text\" title=\"matplotlib.pyplot.text\"><code>text()</code></a> for the meaning of the other arguments.</p> <p>kwargs control the <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"30%\"> <col width=\"70%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_backgroundcolor\" title=\"matplotlib.text.Text.set_backgroundcolor\"><code>backgroundcolor</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_bbox\" title=\"matplotlib.text.Text.set_bbox\"><code>bbox</code></a></td> <td>FancyBboxPatch prop dict</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_box\" title=\"matplotlib.text.Text.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_on\" title=\"matplotlib.text.Text.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_clip_path\" title=\"matplotlib.text.Text.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_color\" title=\"matplotlib.text.Text.set_color\"><code>color</code></a></td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_family\" title=\"matplotlib.text.Text.set_family\"><code>family</code></a> or name or fontname or fontfamily</td> <td>[FONTNAME | ‘serif’ | ‘sans-serif’ | ‘cursive’ | ‘fantasy’ | ‘monospace’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_fontproperties\" title=\"matplotlib.text.Text.set_fontproperties\"><code>fontproperties</code></a> or font_properties</td> <td>a <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_horizontalalignment\" title=\"matplotlib.text.Text.set_horizontalalignment\"><code>horizontalalignment</code></a> or ha</td> <td>[ ‘center’ | ‘right’ | ‘left’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_linespacing\" title=\"matplotlib.text.Text.set_linespacing\"><code>linespacing</code></a></td> <td>float (multiple of font size)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_multialignment\" title=\"matplotlib.text.Text.set_multialignment\"><code>multialignment</code></a></td> <td>[‘left’ | ‘right’ | ‘center’ ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_position\" title=\"matplotlib.text.Text.set_position\"><code>position</code></a></td> <td>(x,y)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation\" title=\"matplotlib.text.Text.set_rotation\"><code>rotation</code></a></td> <td>[ angle in degrees | ‘vertical’ | ‘horizontal’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_rotation_mode\" title=\"matplotlib.text.Text.set_rotation_mode\"><code>rotation_mode</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_size\" title=\"matplotlib.text.Text.set_size\"><code>size</code></a> or fontsize</td> <td>[size in points | ‘xx-small’ | ‘x-small’ | ‘small’ | ‘medium’ | ‘large’ | ‘x-large’ | ‘xx-large’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_stretch\" title=\"matplotlib.text.Text.set_stretch\"><code>stretch</code></a> or fontstretch</td> <td>[a numeric value in range 0-1000 | ‘ultra-condensed’ | ‘extra-condensed’ | ‘condensed’ | ‘semi-condensed’ | ‘normal’ | ‘semi-expanded’ | ‘expanded’ | ‘extra-expanded’ | ‘ultra-expanded’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_style\" title=\"matplotlib.text.Text.set_style\"><code>style</code></a> or fontstyle</td> <td>[ ‘normal’ | ‘italic’ | ‘oblique’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_text\" title=\"matplotlib.text.Text.set_text\"><code>text</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_usetex\" title=\"matplotlib.text.Text.set_usetex\"><code>usetex</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_variant\" title=\"matplotlib.text.Text.set_variant\"><code>variant</code></a> or fontvariant</td> <td>[ ‘normal’ | ‘small-caps’ ]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_verticalalignment\" title=\"matplotlib.text.Text.set_verticalalignment\"><code>verticalalignment</code></a> or va or ma</td> <td>[ ‘center’ | ‘top’ | ‘bottom’ | ‘baseline’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_weight\" title=\"matplotlib.text.Text.set_weight\"><code>weight</code></a> or fontweight</td> <td>[a numeric value in range 0-1000 | ‘ultralight’ | ‘light’ | ‘normal’ | ‘regular’ | ‘book’ | ‘medium’ | ‘roman’ | ‘semibold’ | ‘demibold’ | ‘demi’ | ‘bold’ | ‘heavy’ | ‘extra bold’ | ‘black’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_wrap\" title=\"matplotlib.text.Text.set_wrap\"><code>wrap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_x\" title=\"matplotlib.text.Text.set_x\"><code>x</code></a></td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"text_api#matplotlib.text.Text.set_y\" title=\"matplotlib.text.Text.set_y\"><code>y</code></a></td> <td>float</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.figure\"><code>matplotlib.pyplot.figure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=<class>, **kwargs)</class></code></dt> <dd>\n<p>Creates a new figure.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>num</strong> : integer or string, optional, default: none</p> <blockquote> <div>\n<p>If not provided, a new figure will be created, and the figure number will be incremented. The figure objects holds this number in a <code>number</code> attribute. If num is provided, and a figure with this id already exists, make it active, and returns a reference to it. If this figure does not exists, create it and returns it. If num is a string, the window title will be set to this figure’s <code>num</code>.</p> </div>\n</blockquote> <p><strong>figsize</strong> : tuple of integers, optional, default: None</p> <blockquote> <div>\n<p>width, height in inches. If not provided, defaults to rc figure.figsize.</p> </div>\n</blockquote> <p><strong>dpi</strong> : integer, optional, default: None</p> <blockquote> <div>\n<p>resolution of the figure. If not provided, defaults to rc figure.dpi.</p> </div>\n</blockquote> <p><strong>facecolor :</strong></p> <blockquote> <div>\n<p>the background color. If not provided, defaults to rc figure.facecolor</p> </div>\n</blockquote> <p><strong>edgecolor :</strong></p> <blockquote> <div>\n<p>the border color. If not provided, defaults to rc figure.edgecolor</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>figure</strong> : Figure</p> <blockquote class=\"last\"> <div>\n<p>The Figure instance returned will also be passed to new_figure_manager in the backends, which allows to hook custom Figure classes into the pylab interface. Additional kwargs will be passed to the figure init function.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>If you are creating many figures, make sure you explicitly call “close” on the figures you are not using, because this will enable pylab to properly clean up the memory.</p> <p>rcParams defines the default values, which can be modified in the matplotlibrc file</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.fill\"><code>matplotlib.pyplot.fill(*args, **kwargs)</code></dt> <dd>\n<p>Plot filled polygons.</p> <p>Call signature:</p> <pre data-language=\"python\">fill(*args, **kwargs)\n</pre> <p><em>args</em> is a variable length argument, allowing for multiple <em>x</em>, <em>y</em> pairs with an optional color format string; see <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> for details on the argument parsing. For example, to plot a polygon with vertices at <em>x</em>, <em>y</em> in blue.:</p> <pre data-language=\"python\">ax.fill(x,y, 'b' )\n</pre> <p>An arbitrary number of <em>x</em>, <em>y</em>, <em>color</em> groups can be specified:</p> <pre data-language=\"python\">ax.fill(x1, y1, 'g', x2, y2, 'r')\n</pre> <p>Return value is a list of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> instances that were added.</p> <p>The same color strings that <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> supports are supported by the fill format string.</p> <p>If you would like to fill below a curve, e.g., shade a region between 0 and <em>y</em> along <em>x</em>, use <a class=\"reference internal\" href=\"#matplotlib.pyplot.fill_between\" title=\"matplotlib.pyplot.fill_between\"><code>fill_between()</code></a></p> <p>The <em>closed</em> kwarg will close the polygon when <em>True</em> (default).</p> <p>kwargs control the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Polygon\" title=\"matplotlib.patches.Polygon\"><code>Polygon</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"32%\"> <col width=\"68%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_alpha\" title=\"matplotlib.patches.Patch.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_antialiased\" title=\"matplotlib.patches.Patch.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False] or None for default</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_capstyle\" title=\"matplotlib.patches.Patch.set_capstyle\"><code>capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_color\" title=\"matplotlib.patches.Patch.set_color\"><code>color</code></a></td> <td>matplotlib color spec</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_edgecolor\" title=\"matplotlib.patches.Patch.set_edgecolor\"><code>edgecolor</code></a> or ec</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_facecolor\" title=\"matplotlib.patches.Patch.set_facecolor\"><code>facecolor</code></a> or fc</td> <td>mpl color spec, or None for default, or ‘none’ for no color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_fill\" title=\"matplotlib.patches.Patch.set_fill\"><code>fill</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_hatch\" title=\"matplotlib.patches.Patch.set_hatch\"><code>hatch</code></a></td> <td>[‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_joinstyle\" title=\"matplotlib.patches.Patch.set_joinstyle\"><code>joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linestyle\" title=\"matplotlib.patches.Patch.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch.set_linewidth\" title=\"matplotlib.patches.Patch.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float or None for default</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/lines_bars_and_markers/fill_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/lines_bars_and_markers/fill_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/lines_bars_and_markers/fill_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/lines_bars_and_markers/fill_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/fill_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.fill_between\"><code>matplotlib.pyplot.fill_between(x, y1, y2=0, where=None, interpolate=False, step=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Make filled polygons between two curves.</p> <p>Create a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> filling the regions between <em>y1</em> and <em>y2</em> where <code>where==True</code></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : array</p> <blockquote> <div>\n<p>An N-length array of the x data</p> </div>\n</blockquote> <p><strong>y1</strong> : array</p> <blockquote> <div>\n<p>An N-length array (or scalar) of the y data</p> </div>\n</blockquote> <p><strong>y2</strong> : array</p> <blockquote> <div>\n<p>An N-length array (or scalar) of the y data</p> </div>\n</blockquote> <p><strong>where</strong> : array, optional</p> <blockquote> <div>\n<p>If <code>None</code>, default to fill between everywhere. If not <code>None</code>, it is an N-length numpy boolean array and the fill will only happen over the regions where <code>where==True</code>.</p> </div>\n</blockquote> <p><strong>interpolate</strong> : bool, optional</p> <blockquote> <div>\n<p>If <code>True</code>, interpolate between the two lines to find the precise point of intersection. Otherwise, the start and end points of the filled region will only occur on explicit values in the <em>x</em> array.</p> </div>\n</blockquote> <p><strong>step</strong> : {‘pre’, ‘post’, ‘mid’}, optional</p> <blockquote class=\"last\"> <div>\n<p>If not None, fill with step logic.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘y2’, ‘where’, ‘x’, ‘y1’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id29\"> <img alt=\"../_images/fill_between_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_between_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id30\"> <img alt=\"../_images/fill_between_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_between_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id31\"> <img alt=\"../_images/fill_between_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_between_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_between_demo_02.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.fill_betweenx\"><code>matplotlib.pyplot.fill_betweenx(y, x1, x2=0, where=None, step=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Make filled polygons between two horizontal curves.</p> <p>Call signature:</p> <pre data-language=\"python\">fill_betweenx(y, x1, x2=0, where=None, **kwargs)\n</pre> <p>Create a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> filling the regions between <em>x1</em> and <em>x2</em> where <code>where==True</code></p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>y</strong> : array</p> <blockquote> <div>\n<p>An N-length array of the y data</p> </div>\n</blockquote> <p><strong>x1</strong> : array</p> <blockquote> <div>\n<p>An N-length array (or scalar) of the x data</p> </div>\n</blockquote> <p><strong>x2</strong> : array, optional</p> <blockquote> <div>\n<p>An N-length array (or scalar) of the x data</p> </div>\n</blockquote> <p><strong>where</strong> : array, optional</p> <blockquote> <div>\n<p>If <em>None</em>, default to fill between everywhere. If not <em>None</em>, it is a N length numpy boolean array and the fill will only happen over the regions where <code>where==True</code></p> </div>\n</blockquote> <p><strong>step</strong> : {‘pre’, ‘post’, ‘mid’}, optional</p> <blockquote class=\"last\"> <div>\n<p>If not None, fill with step logic.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x2’, ‘where’, ‘x1’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id32\"> <img alt=\"../_images/fill_betweenx_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_betweenx_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id33\"> <img alt=\"../_images/fill_betweenx_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/fill_betweenx_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/fill_betweenx_demo_01.pdf\">pdf</a>)</span></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.findobj\"><code>matplotlib.pyplot.findobj(o=None, match=None, include_self=True)</code></dt> <dd>\n<p>Find artist objects.</p> <p>Recursively find all <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> instances contained in self.</p> <p><em>match</em> can be</p> <blockquote> <div>\n<ul class=\"simple\"> <li>None: return all objects contained in artist.</li> <li>function with signature <code>boolean = match(artist)</code> used to filter matches</li> <li>class instance: e.g., Line2D. Only return artists of class type.</li> </ul> </div>\n</blockquote> <p>If <em>include_self</em> is True (default), include self in the list to be checked for a match.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.flag\"><code>matplotlib.pyplot.flag()</code></dt> <dd>\n<p>set the default colormap to flag and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.gca\"><code>matplotlib.pyplot.gca(**kwargs)</code></dt> <dd>\n<p>Get the current <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance on the current figure matching the given keyword args, or create one.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.gca\" title=\"matplotlib.figure.Figure.gca\"><code>matplotlib.figure.Figure.gca</code></a></dt> <dd>The figure’s gca method.</dd> </dl> </div> <h4 class=\"rubric\">Examples</h4> <p>To get the current polar axes on the current figure:</p> <pre data-language=\"python\">plt.gca(projection='polar')\n</pre> <p>If the current axes doesn’t exist, or isn’t a polar one, the appropriate axes will be created and then returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.gcf\"><code>matplotlib.pyplot.gcf()</code></dt> <dd>\n<p>Get a reference to the current figure.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.gci\"><code>matplotlib.pyplot.gci()</code></dt> <dd>\n<p>Get the current colorable artist. Specifically, returns the current <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable\" title=\"matplotlib.cm.ScalarMappable\"><code>ScalarMappable</code></a> instance (image or patch collection), or <em>None</em> if no images or patch collections have been defined. The commands <a class=\"reference internal\" href=\"#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>imshow()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.pyplot.figimage\" title=\"matplotlib.pyplot.figimage\"><code>figimage()</code></a> create <code>Image</code> instances, and the commands <a class=\"reference internal\" href=\"#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.pyplot.scatter\" title=\"matplotlib.pyplot.scatter\"><code>scatter()</code></a> create <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a> instances. The current image is an attribute of the current axes, or the nearest earlier axes in the current figure that contains an image.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.get_current_fig_manager\"><code>matplotlib.pyplot.get_current_fig_manager()</code></dt> \n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.get_figlabels\"><code>matplotlib.pyplot.get_figlabels()</code></dt> <dd>\n<p>Return a list of existing figure labels.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.get_fignums\"><code>matplotlib.pyplot.get_fignums()</code></dt> <dd>\n<p>Return a list of existing figure numbers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.get_plot_commands\"><code>matplotlib.pyplot.get_plot_commands()</code></dt> <dd>\n<p>Get a sorted list of all of the plotting commands.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.ginput\"><code>matplotlib.pyplot.ginput(*args, **kwargs)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">ginput(self, n=1, timeout=30, show_clicks=True,\n       mouse_add=1, mouse_pop=3, mouse_stop=2)\n</pre> <p>Blocking call to interact with the figure.</p> <p>This will wait for <em>n</em> clicks from the user and return a list of the coordinates of each click.</p> <p>If <em>timeout</em> is zero or negative, does not timeout.</p> <p>If <em>n</em> is zero or negative, accumulate clicks until a middle click (or potentially both mouse buttons at once) terminates the input.</p> <p>Right clicking cancels last input.</p> <p>The buttons used for the various actions (adding points, removing points, terminating the inputs) can be overriden via the arguments <em>mouse_add</em>, <em>mouse_pop</em> and <em>mouse_stop</em>, that give the associated mouse button: 1 for left, 2 for middle, 3 for right.</p> <p>The keyboard can also be used to select points in case your mouse does not have one or more of the buttons. The delete and backspace keys act like right clicking (i.e., remove last point), the enter key terminates input and any other key (not already used by the window manager) selects a point.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.gray\"><code>matplotlib.pyplot.gray()</code></dt> <dd>\n<p>set the default colormap to gray and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.grid\"><code>matplotlib.pyplot.grid(b=None, which='major', axis='both', **kwargs)</code></dt> <dd>\n<p>Turn the axes grids on or off.</p> <p>Call signature:</p> <pre data-language=\"python\">grid(self, b=None, which='major', axis='both', **kwargs)\n</pre> <p>Set the axes grids on or off; <em>b</em> is a boolean. (For MATLAB compatibility, <em>b</em> may also be a string, ‘on’ or ‘off’.)</p> <p>If <em>b</em> is <em>None</em> and <code>len(kwargs)==0</code>, toggle the grid state. If <em>kwargs</em> are supplied, it is assumed that you want a grid and <em>b</em> is thus set to <em>True</em>.</p> <p><em>which</em> can be ‘major’ (default), ‘minor’, or ‘both’ to control whether major tick grids, minor tick grids, or both are affected.</p> <p><em>axis</em> can be ‘both’ (default), ‘x’, or ‘y’ to control which set of gridlines are drawn.</p> <p><em>kwargs</em> are used to set the grid line properties, e.g.,:</p> <pre data-language=\"python\">ax.grid(color='r', linestyle='-', linewidth=2)\n</pre> <p>Valid <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> kwargs are</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.hexbin\"><code>matplotlib.pyplot.hexbin(x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='none', reduce_C_function=<function mean>, mincnt=None, marginals=False, hold=None, data=None, **kwargs)</function></code></dt> <dd>\n<p>Make a hexagonal binning plot.</p> <p>Call signature:</p> <pre data-language=\"python\">hexbin(x, y, C = None, gridsize = 100, bins = None,\n       xscale = 'linear', yscale = 'linear',\n       cmap=None, norm=None, vmin=None, vmax=None,\n       alpha=None, linewidths=None, edgecolors='none'\n       reduce_C_function = np.mean, mincnt=None, marginals=True\n       **kwargs)\n</pre> <p>Make a hexagonal binning plot of <em>x</em> versus <em>y</em>, where <em>x</em>, <em>y</em> are 1-D sequences of the same length, <em>N</em>. If <em>C</em> is <em>None</em> (the default), this is a histogram of the number of occurences of the observations at (x[i],y[i]).</p> <p>If <em>C</em> is specified, it specifies values at the coordinate (x[i],y[i]). These values are accumulated for each hexagonal bin and then reduced according to <em>reduce_C_function</em>, which defaults to numpy’s mean function (np.mean). (If <em>C</em> is specified, it must also be a 1-D sequence of the same length as <em>x</em> and <em>y</em>.)</p> <p><em>x</em>, <em>y</em> and/or <em>C</em> may be masked arrays, in which case only unmasked points will be plotted.</p> <p>Optional keyword arguments:</p> <dl class=\"docutils\"> <dt>\n<em>gridsize</em>: [ 100 | integer ]</dt> <dd>The number of hexagons in the <em>x</em>-direction, default is 100. The corresponding number of hexagons in the <em>y</em>-direction is chosen such that the hexagons are approximately regular. Alternatively, gridsize can be a tuple with two elements specifying the number of hexagons in the <em>x</em>-direction and the <em>y</em>-direction.</dd> <dt>\n<em>bins</em>: [ <em>None</em> | ‘log’ | integer | sequence ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, no binning is applied; the color of each hexagon directly corresponds to its count value.</p> <p>If ‘log’, use a logarithmic scale for the color map. Internally, <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-56f328ad77.png\" style=\"position: relative; bottom: -8px\"> is used to determine the hexagon color.</p> <p>If an integer, divide the counts in the specified number of bins, and color the hexagons accordingly.</p> <p class=\"last\">If a sequence of values, the values of the lower bound of the bins to be used.</p> </dd> <dt>\n<em>xscale</em>: [ ‘linear’ | ‘log’ ]</dt> <dd>Use a linear or log10 scale on the horizontal axis.</dd> <dt>\n<em>scale</em>: [ ‘linear’ | ‘log’ ]</dt> <dd>Use a linear or log10 scale on the vertical axis.</dd> <dt>\n<em>mincnt</em>: [ <em>None</em> | a positive integer ]</dt> <dd>If not <em>None</em>, only display cells with more than <em>mincnt</em> number of points in the cell</dd> <dt>\n<em>marginals</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>if marginals is <em>True</em>, plot the marginal density as colormapped rectagles along the bottom of the x-axis and left of the y-axis</dd> <dt>\n<em>extent</em>: [ <em>None</em> | scalars (left, right, bottom, top) ]</dt> <dd>The limits of the bins. The default assigns the limits based on gridsize, x, y, xscale and yscale.</dd> </dl> <p>Other keyword arguments controlling color mapping and normalization arguments:</p> <dl class=\"docutils\"> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance. If <em>None</em>, defaults to rc <code>image.cmap</code>.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>\n<a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance is used to scale luminance data to 0,1.</dd> <dt>\n<em>vmin</em> / <em>vmax</em>: scalar</dt> <dd>\n<em>vmin</em> and <em>vmax</em> are used in conjunction with <em>norm</em> to normalize luminance data. If either are <em>None</em>, the min and max of the color array <em>C</em> is used. Note if you pass a norm instance, your settings for <em>vmin</em> and <em>vmax</em> will be ignored.</dd> <dt>\n<em>alpha</em>: scalar between 0 and 1, or <em>None</em>\n</dt> <dd>the alpha value for the patches</dd> <dt>\n<em>linewidths</em>: [ <em>None</em> | scalar ]</dt> <dd>If <em>None</em>, defaults to rc lines.linewidth. Note that this is a tuple, and if you set the linewidths argument you must set it as a sequence of floats, as required by <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.RegularPolyCollection\" title=\"matplotlib.collections.RegularPolyCollection\"><code>RegularPolyCollection</code></a>.</dd> </dl> <p>Other keyword arguments controlling the Collection properties:</p> <dl class=\"docutils\"> <dt>\n<em>edgecolors</em>: [ <em>None</em> | <code>'none'</code> | mpl color | color sequence ]</dt> <dd>\n<p class=\"first\">If <code>'none'</code>, draws the edges in the same color as the fill color. This is the default, as it avoids unsightly unpainted pixels between the hexagons.</p> <p>If <em>None</em>, draws the outlines in the default color.</p> <p class=\"last\">If a matplotlib color arg or sequence of rgba tuples, draws the outlines in the specified color.</p> </dd> </dl> <p>Here are the standard descriptions of all the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a> kwargs:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>The return value is a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> instance; use <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection.get_array\" title=\"matplotlib.collections.PolyCollection.get_array\"><code>get_array()</code></a> on this <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> to get the counts in each hexagon. If <em>marginals</em> is <em>True</em>, horizontal bar and vertical bar (both PolyCollections) will be attached to the return collection as attributes <em>hbar</em> and <em>vbar</em>.</p> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hexbin_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hexbin_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hexbin_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hexbin_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/hexbin_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/hexbin_demo.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.hist\"><code>matplotlib.pyplot.hist(x, bins=10, range=None, normed=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot a histogram.</p> <p>Compute and draw the histogram of <em>x</em>. The return value is a tuple (<em>n</em>, <em>bins</em>, <em>patches</em>) or ([<em>n0</em>, <em>n1</em>, ...], <em>bins</em>, [<em>patches0</em>, <em>patches1</em>,...]) if the input contains multiple data.</p> <p>Multiple data can be provided via <em>x</em> as a list of datasets of potentially different length ([<em>x0</em>, <em>x1</em>, ...]), or as a 2-D ndarray in which each column is a dataset. Note that the ndarray form is transposed relative to the list form.</p> <p>Masked arrays are not supported at present.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : (n,) array or sequence of (n,) arrays</p> <blockquote> <div>\n<p>Input values, this takes either a single array or a sequency of arrays which are not required to be of the same length</p> </div>\n</blockquote> <p><strong>bins</strong> : integer or array_like, optional</p> <blockquote> <div>\n<p>If an integer is given, <code>bins + 1</code> bin edges are returned, consistently with <code>numpy.histogram()</code> for numpy version &gt;= 1.3.</p> <p>Unequally spaced bins are supported if <code>bins</code> is a sequence.</p> <p>default is 10</p> </div>\n</blockquote> <p><strong>range</strong> : tuple or None, optional</p> <blockquote> <div>\n<p>The lower and upper range of the bins. Lower and upper outliers are ignored. If not provided, <code>range</code> is (x.min(), x.max()). Range has no effect if <code>bins</code> is a sequence.</p> <p>If <code>bins</code> is a sequence or <code>range</code> is specified, autoscaling is based on the specified bin range instead of the range of x.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>normed</strong> : boolean, optional</p> <blockquote> <div>\n<p>If <code>True</code>, the first element of the return tuple will be the counts normalized to form a probability density, i.e., <code>n/(len(x)`dbin)</code>, i.e., the integral of the histogram will sum to 1. If <em>stacked</em> is also <em>True</em>, the sum of the histograms is normalized to 1.</p> <p>Default is <code>False</code></p> </div>\n</blockquote> <p><strong>weights</strong> : (n, ) array_like or None, optional</p> <blockquote> <div>\n<p>An array of weights, of the same shape as <code>x</code>. Each value in <code>x</code> only contributes its associated weight towards the bin count (instead of 1). If <code>normed</code> is True, the weights are normalized, so that the integral of the density over the range remains 1.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>cumulative</strong> : boolean, optional</p> <blockquote> <div>\n<p>If <code>True</code>, then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values. The last bin gives the total number of datapoints. If <code>normed</code> is also <code>True</code> then the histogram is normalized such that the last bin equals 1. If <code>cumulative</code> evaluates to less than 0 (e.g., -1), the direction of accumulation is reversed. In this case, if <code>normed</code> is also <code>True</code>, then the histogram is normalized such that the first bin equals 1.</p> <p>Default is <code>False</code></p> </div>\n</blockquote> <p><strong>bottom</strong> : array_like, scalar, or None</p> <blockquote> <div>\n<p>Location of the bottom baseline of each bin. If a scalar, the base line for each bin is shifted by the same amount. If an array, each bin is shifted independently and the length of bottom must match the number of bins. If None, defaults to 0.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>histtype</strong> : {‘bar’, ‘barstacked’, ‘step’, ‘stepfilled’}, optional</p> <blockquote> <div>\n<p>The type of histogram to draw.</p> <ul class=\"simple\"> <li>‘bar’ is a traditional bar-type histogram. If multiple data are given the bars are aranged side by side.</li> <li>‘barstacked’ is a bar-type histogram where multiple data are stacked on top of each other.</li> <li>‘step’ generates a lineplot that is by default unfilled.</li> <li>‘stepfilled’ generates a lineplot that is by default filled.</li> </ul> <p>Default is ‘bar’</p> </div>\n</blockquote> <p><strong>align</strong> : {‘left’, ‘mid’, ‘right’}, optional</p> <blockquote> <div>\n<p>Controls how the histogram is plotted.</p> <blockquote> <div>\n<ul class=\"simple\"> <li>‘left’: bars are centered on the left bin edges.</li> <li>‘mid’: bars are centered between the bin edges.</li> <li>‘right’: bars are centered on the right bin edges.</li> </ul> </div>\n</blockquote> <p>Default is ‘mid’</p> </div>\n</blockquote> <p><strong>orientation</strong> : {‘horizontal’, ‘vertical’}, optional</p> <blockquote> <div>\n<p>If ‘horizontal’, <a class=\"reference internal\" href=\"#matplotlib.pyplot.barh\" title=\"matplotlib.pyplot.barh\"><code>barh</code></a> will be used for bar-type histograms and the <em>bottom</em> kwarg will be the left edges.</p> </div>\n</blockquote> <p><strong>rwidth</strong> : scalar or None, optional</p> <blockquote> <div>\n<p>The relative width of the bars as a fraction of the bin width. If <code>None</code>, automatically compute the width.</p> <p>Ignored if <code>histtype</code> is ‘step’ or ‘stepfilled’.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>log</strong> : boolean, optional</p> <blockquote> <div>\n<p>If <code>True</code>, the histogram axis will be set to a log scale. If <code>log</code> is <code>True</code> and <code>x</code> is a 1D array, empty bins will be filtered out and only the non-empty (<code>n</code>, <code>bins</code>, <code>patches</code>) will be returned.</p> <p>Default is <code>False</code></p> </div>\n</blockquote> <p><strong>color</strong> : color or array_like of colors or None, optional</p> <blockquote> <div>\n<p>Color spec or sequence of color specs, one per dataset. Default (<code>None</code>) uses the standard line color sequence.</p> <p>Default is <code>None</code></p> </div>\n</blockquote> <p><strong>label</strong> : string or None, optional</p> <blockquote> <div>\n<p>String, or sequence of strings to match multiple datasets. Bar charts yield multiple patches per dataset, but only the first gets the label, so that the legend command will work as expected.</p> <p>default is <code>None</code></p> </div>\n</blockquote> <p><strong>stacked</strong> : boolean, optional</p> <blockquote> <div>\n<p>If <code>True</code>, multiple data are stacked on top of each other If <code>False</code> multiple data are aranged side by side if histtype is ‘bar’ or on top of each other if histtype is ‘step’</p> <p>Default is <code>False</code></p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>n</strong> : array or list of arrays</p> <blockquote> <div>\n<p>The values of the histogram bins. See <strong>normed</strong> and <strong>weights</strong> for a description of the possible semantics. If input <strong>x</strong> is an array, then this is an array of length <strong>nbins</strong>. If input is a sequence arrays <code>[data1, data2,..]</code>, then this is a list of arrays with the values of the histograms for each of the arrays in the same order.</p> </div>\n</blockquote> <p><strong>bins</strong> : array</p> <blockquote> <div>\n<p>The edges of the bins. Length nbins + 1 (nbins left edges and right edge of last bin). Always a single array even when multiple data sets are passed in.</p> </div>\n</blockquote> <p><strong>patches</strong> : list or list of lists</p> <blockquote> <div>\n<p>Silent list of individual patches used to create the histogram or list of such list if multiple input datasets.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> properties</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.hist2d\" title=\"matplotlib.pyplot.hist2d\"><code>hist2d</code></a></dt> <dd>2D histograms</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘weights’, ‘x’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/histogram_demo_features.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/histogram_demo_features.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/histogram_demo_features.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/statistics/histogram_demo_features.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/histogram_demo_features.png\" src=\"http://matplotlib.org/1.5.1/_images/histogram_demo_features.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.hist2d\"><code>matplotlib.pyplot.hist2d(x, y, bins=10, range=None, normed=False, weights=None, cmin=None, cmax=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Make a 2D histogram plot.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y: array_like, shape (n, )</strong></p> <blockquote> <div>\n<p>Input values</p> </div>\n</blockquote> <p><strong>bins: [None | int | [int, int] | array_like | [array, array]]</strong></p> <blockquote> <div>\n<p>The bin specification:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>If int, the number of bins for the two dimensions (nx=ny=bins).</li> <li>If [int, int], the number of bins in each dimension (nx, ny = bins).</li> <li>If array_like, the bin edges for the two dimensions (x_edges=y_edges=bins).</li> <li>If [array, array], the bin edges in each dimension (x_edges, y_edges = bins).</li> </ul> </div>\n</blockquote> <p>The default value is 10.</p> </div>\n</blockquote> <p><strong>range</strong> : array_like shape(2, 2), optional, default: None</p> <blockquote> <div>\n<p>The leftmost and rightmost edges of the bins along each dimension (if not specified explicitly in the bins parameters): [[xmin, xmax], [ymin, ymax]]. All values outside of this range will be considered outliers and not tallied in the histogram.</p> </div>\n</blockquote> <p><strong>normed</strong> : boolean, optional, default: False</p> <blockquote> <div>\n<p>Normalize histogram.</p> </div>\n</blockquote> <p><strong>weights</strong> : array_like, shape (n, ), optional, default: None</p> <blockquote> <div>\n<p>An array of values w_i weighing each sample (x_i, y_i).</p> </div>\n</blockquote> <p><strong>cmin</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>All bins that has count less than cmin will not be displayed and these count values in the return value count histogram will also be set to nan upon return</p> </div>\n</blockquote> <p><strong>cmax</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>All bins that has count more than cmax will not be displayed (set to none before passing to imshow) and these count values in the return value count histogram will also be set to nan upon return</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The return value is <code>(counts, xedges, yedges, Image)</code>.</p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <code>pcolorfast()</code> properties.</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.hist\" title=\"matplotlib.pyplot.hist\"><code>hist</code></a></dt> <dd>1D histogram</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘weights’, ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hist2d_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hist2d_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hist2d_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/hist2d_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/hist2d_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/hist2d_demo.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.hlines\"><code>matplotlib.pyplot.hlines(y, xmin, xmax, colors='k', linestyles='solid', label='', hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot horizontal lines at each <code>y</code> from <code>xmin</code> to <code>xmax</code>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>y</strong> : scalar or sequence of scalar</p> <blockquote> <div>\n<p>y-indexes where to plot the lines.</p> </div>\n</blockquote> <p><strong>xmin, xmax</strong> : scalar or 1D array_like</p> <blockquote> <div>\n<p>Respective beginning and end of each line. If scalars are provided, all lines will have same length.</p> </div>\n</blockquote> <p><strong>colors</strong> : array_like of colors, optional, default: ‘k’</p> <p><strong>linestyles</strong> : [‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’], optional</p> <p><strong>label</strong> : string, optional, default: ‘’</p> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>lines</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a> properties.</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.vlines\" title=\"matplotlib.pyplot.vlines\"><code>vlines</code></a></dt> <dd>vertical lines</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘xmax’, ‘xmin’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/vline_hline_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/vline_hline_demo.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.hold\"><code>matplotlib.pyplot.hold(b=None)</code></dt> <dd>\n<p>Set the hold state. If <em>b</em> is None (default), toggle the hold state, else set the hold state to boolean value <em>b</em>:</p> <pre data-language=\"python\">hold()      # toggle hold\nhold(True)  # hold is on\nhold(False) # hold is off\n</pre> <p>When <em>hold</em> is <em>True</em>, subsequent plot commands will be added to the current axes. When <em>hold</em> is <em>False</em>, the current axes and figure will be cleared on the next plot command.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.hot\"><code>matplotlib.pyplot.hot()</code></dt> <dd>\n<p>set the default colormap to hot and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.hsv\"><code>matplotlib.pyplot.hsv()</code></dt> <dd>\n<p>set the default colormap to hsv and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.imread\"><code>matplotlib.pyplot.imread(*args, **kwargs)</code></dt> <dd>\n<p>Read an image from a file into an array.</p> <p><em>fname</em> may be a string path, a valid URL, or a Python file-like object. If using a file object, it must be opened in binary mode.</p> <p>If <em>format</em> is provided, will try to read file of that type, otherwise the format is deduced from the filename. If nothing can be deduced, PNG is tried.</p> <p>Return value is a <code>numpy.array</code>. For grayscale images, the return array is MxN. For RGB images, the return value is MxNx3. For RGBA images the return value is MxNx4.</p> <p>matplotlib can only read PNGs natively, but if <a class=\"reference external\" href=\"http://www.pythonware.com/products/pil/\">PIL</a> is installed, it will use it to load the image and return an array (if possible) which can be used with <a class=\"reference internal\" href=\"#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>imshow()</code></a>. Note, URL strings may not be compatible with PIL. Check the PIL documentation for more information.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.imsave\"><code>matplotlib.pyplot.imsave(*args, **kwargs)</code></dt> <dd>\n<p>Save an array as in image file.</p> <p>The output formats available depend on the backend being used.</p> <dl class=\"docutils\"> <dt>Arguments:</dt> <dd>\n<dl class=\"first last docutils\"> <dt>\n<em>fname</em>:</dt> <dd>A string containing a path to a filename, or a Python file-like object. If <em>format</em> is <em>None</em> and <em>fname</em> is a string, the output format is deduced from the extension of the filename.</dd> <dt>\n<em>arr</em>:</dt> <dd>An MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA) array.</dd> </dl> </dd> <dt>Keyword arguments:</dt> <dd>\n<dl class=\"first last docutils\"> <dt>\n<em>vmin</em>/<em>vmax</em>: [ None | scalar ]</dt> <dd>\n<em>vmin</em> and <em>vmax</em> set the color scaling for the image by fixing the values that map to the colormap color limits. If either <em>vmin</em> or <em>vmax</em> is None, that limit is determined from the <em>arr</em> min/max value.</dd> <dt>\n<em>cmap</em>:</dt> <dd>cmap is a colors.Colormap instance, e.g., cm.jet. If None, default to the rc image.cmap value.</dd> <dt>\n<em>format</em>:</dt> <dd>One of the file extensions supported by the active backend. Most backends support png, pdf, ps, eps and svg.</dd> <dt><em>origin</em></dt> <dd>[ ‘upper’ | ‘lower’ ] Indicates where the [0,0] index of the array is in the upper left or lower left corner of the axes. Defaults to the rc image.origin value.</dd> <dt><em>dpi</em></dt> <dd>The DPI to store in the metadata of the file. This does not affect the resolution of the output image.</dd> </dl> </dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow(X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, shape=None, filternorm=1, filterrad=4.0, imlim=None, resample=None, url=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Display an image on the axes.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>X</strong> : array_like, shape (n, m) or (n, m, 3) or (n, m, 4)</p> <blockquote> <div>\n<p>Display the image in <code>X</code> to current axes. <code>X</code> may be a float array, a uint8 array or a PIL image. If <code>X</code> is an array, it can have the following shapes:</p> <ul class=\"simple\"> <li>MxN – luminance (grayscale, float array only)</li> <li>MxNx3 – RGB (float or uint8 array)</li> <li>MxNx4 – RGBA (float or uint8 array)</li> </ul> <p>The value for each component of MxNx3 and MxNx4 float arrays should be in the range 0.0 to 1.0; MxN float arrays may be normalised.</p> </div>\n</blockquote> <p><strong>cmap</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a>, optional, default: None</p> <blockquote> <div>\n<p>If None, default to rc <code>image.cmap</code> value. <code>cmap</code> is ignored when <code>X</code> has RGB(A) information</p> </div>\n</blockquote> <p><strong>aspect</strong> : [‘auto’ | ‘equal’ | scalar], optional, default: None</p> <blockquote> <div>\n<p>If ‘auto’, changes the image aspect ratio to match that of the axes.</p> <p>If ‘equal’, and <code>extent</code> is None, changes the axes aspect ratio to match that of the image. If <code>extent</code> is not <code>None</code>, the axes aspect ratio is changed to match that of the extent.</p> <p>If None, default to rc <code>image.aspect</code> value.</p> </div>\n</blockquote> <p><strong>interpolation</strong> : string, optional, default: None</p> <blockquote> <div>\n<p>Acceptable values are ‘none’, ‘nearest’, ‘bilinear’, ‘bicubic’, ‘spline16’, ‘spline36’, ‘hanning’, ‘hamming’, ‘hermite’, ‘kaiser’, ‘quadric’, ‘catrom’, ‘gaussian’, ‘bessel’, ‘mitchell’, ‘sinc’, ‘lanczos’</p> <p>If <code>interpolation</code> is None, default to rc <code>image.interpolation</code>. See also the <code>filternorm</code> and <code>filterrad</code> parameters. If <code>interpolation</code> is ‘none’, then no interpolation is performed on the Agg, ps and pdf backends. Other backends will fall back to ‘nearest’.</p> </div>\n</blockquote> <p><strong>norm</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a>, optional, default: None</p> <blockquote> <div>\n<p>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a> instance is used to scale luminance data to 0, 1. If <code>None</code>, use the default func:<code>normalize</code>. <code>norm</code> is only used if <code>X</code> is an array of floats.</p> </div>\n</blockquote> <p><strong>vmin, vmax</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p><code>vmin</code> and <code>vmax</code> are used in conjunction with norm to normalize luminance data. Note if you pass a <code>norm</code> instance, your settings for <code>vmin</code> and <code>vmax</code> will be ignored.</p> </div>\n</blockquote> <p><strong>alpha</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>The alpha blending value, between 0 (transparent) and 1 (opaque)</p> </div>\n</blockquote> <p><strong>origin</strong> : [‘upper’ | ‘lower’], optional, default: None</p> <blockquote> <div>\n<p>Place the [0,0] index of the array in the upper left or lower left corner of the axes. If None, default to rc <code>image.origin</code>.</p> </div>\n</blockquote> <p><strong>extent</strong> : scalars (left, right, bottom, top), optional, default: None</p> <blockquote> <div>\n<p>The location, in data-coordinates, of the lower-left and upper-right corners. If <code>None</code>, the image is positioned such that the pixel centers fall on zero-based (row, column) indices.</p> </div>\n</blockquote> <p><strong>shape</strong> : scalars (columns, rows), optional, default: None</p> <blockquote> <div>\n<p>For raw buffer images</p> </div>\n</blockquote> <p><strong>filternorm</strong> : scalar, optional, default: 1</p> <blockquote> <div>\n<p>A parameter for the antigrain image resize filter. From the antigrain documentation, if <code>filternorm</code> = 1, the filter normalizes integer values and corrects the rounding errors. It doesn’t do anything with the source floating point values, it corrects only integers according to the rule of 1.0 which means that any sum of pixel weights must be equal to 1.0. So, the filter function must produce a graph of the proper shape.</p> </div>\n</blockquote> <p><strong>filterrad</strong> : scalar, optional, default: 4.0</p> <blockquote> <div>\n<p>The filter radius for filters that have a radius parameter, i.e. when interpolation is one of: ‘sinc’, ‘lanczos’ or ‘blackman’</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>image</strong> : <a class=\"reference internal\" href=\"image_api#matplotlib.image.AxesImage\" title=\"matplotlib.image.AxesImage\"><code>AxesImage</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist\" title=\"matplotlib.artist.Artist\"><code>Artist</code></a> properties.</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.matshow\" title=\"matplotlib.pyplot.matshow\"><code>matshow</code></a></dt> <dd>Plot a matrix or an array as an image.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/image_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/image_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/image_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/image_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/image_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/image_demo.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.inferno\"><code>matplotlib.pyplot.inferno()</code></dt> <dd>\n<p>set the default colormap to inferno and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.install_repl_displayhook\"><code>matplotlib.pyplot.install_repl_displayhook()</code></dt> <dd>\n<p>Install a repl display hook so that any stale figure are automatically redrawn when control is returned to the repl.</p> <p>This works with both IPython terminals and vanilla python shells.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.ioff\"><code>matplotlib.pyplot.ioff()</code></dt> <dd>\n<p>Turn interactive mode off.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.ion\"><code>matplotlib.pyplot.ion()</code></dt> <dd>\n<p>Turn interactive mode on.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.ishold\"><code>matplotlib.pyplot.ishold()</code></dt> <dd>\n<p>Return the hold status of the current axes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.isinteractive\"><code>matplotlib.pyplot.isinteractive()</code></dt> <dd>\n<p>Return status of interactive mode.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.jet\"><code>matplotlib.pyplot.jet()</code></dt> <dd>\n<p>set the default colormap to jet and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.legend\"><code>matplotlib.pyplot.legend(*args, **kwargs)</code></dt> <dd>\n<p>Places a legend on the axes.</p> <p>To make a legend for lines which already exist on the axes (via plot for instance), simply call this function with an iterable of strings, one for each legend item. For example:</p> <pre data-language=\"python\">ax.plot([1, 2, 3])\nax.legend(['A simple line'])\n</pre> <p>However, in order to keep the “label” and the legend element instance together, it is preferable to specify the label either at artist creation, or by calling the <a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>set_label()</code></a> method on the artist:</p> <pre data-language=\"python\">line, = ax.plot([1, 2, 3], label='Inline label')\n# Overwrite the label by calling the method.\nline.set_label('Label via method')\nax.legend()\n</pre> <p>Specific lines can be excluded from the automatic legend element selection by defining a label starting with an underscore. This is default for all artists, so calling <a class=\"reference internal\" href=\"#matplotlib.pyplot.legend\" title=\"matplotlib.pyplot.legend\"><code>legend()</code></a> without any arguments and without setting the labels manually will result in no legend being drawn.</p> <p>For full control of which artists have a legend entry, it is possible to pass an iterable of legend artists followed by an iterable of legend labels respectively:</p> <pre data-language=\"python\">legend((line1, line2, line3), ('label1', 'label2', 'label3'))\n</pre> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>loc</strong> : int or string or pair of floats, default: ‘upper right’</p> <blockquote> <div>\n<p>The location of the legend. Possible codes are:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"54%\"> <col width=\"46%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Location String</th> <th class=\"head\">Location Code</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘best’</td> <td>0</td> </tr> <tr class=\"row-odd\">\n<td>‘upper right’</td> <td>1</td> </tr> <tr class=\"row-even\">\n<td>‘upper left’</td> <td>2</td> </tr> <tr class=\"row-odd\">\n<td>‘lower left’</td> <td>3</td> </tr> <tr class=\"row-even\">\n<td>‘lower right’</td> <td>4</td> </tr> <tr class=\"row-odd\">\n<td>‘right’</td> <td>5</td> </tr> <tr class=\"row-even\">\n<td>‘center left’</td> <td>6</td> </tr> <tr class=\"row-odd\">\n<td>‘center right’</td> <td>7</td> </tr> <tr class=\"row-even\">\n<td>‘lower center’</td> <td>8</td> </tr> <tr class=\"row-odd\">\n<td>‘upper center’</td> <td>9</td> </tr> <tr class=\"row-even\">\n<td>‘center’</td> <td>10</td> </tr> </tbody> </table> </div>\n</blockquote> <p>Alternatively can be a 2-tuple giving <code>x, y</code> of the lower-left corner of the legend in axes coordinates (in which case <code>bbox_to_anchor</code> will be ignored).</p> </div>\n</blockquote> <p><strong>bbox_to_anchor</strong> : <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.BboxBase\" title=\"matplotlib.transforms.BboxBase\"><code>matplotlib.transforms.BboxBase</code></a> instance or tuple of floats</p> <blockquote> <div>\n<p>Specify any arbitrary location for the legend in <code>bbox_transform</code> coordinates (default Axes coordinates).</p> <p>For example, to put the legend’s upper right hand corner in the center of the axes the following keywords can be used:</p> <pre data-language=\"python\">loc='upper right', bbox_to_anchor=(0.5, 0.5)\n</pre> </div>\n</blockquote> <p><strong>ncol</strong> : integer</p> <blockquote> <div>\n<p>The number of columns that the legend has. Default is 1.</p> </div>\n</blockquote> <p><strong>prop</strong> : None or <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>matplotlib.font_manager.FontProperties</code></a> or dict</p> <blockquote> <div>\n<p>The font properties of the legend. If None (default), the current <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>matplotlib.rcParams</code></a> will be used.</p> </div>\n</blockquote> <p><strong>fontsize</strong> : int or float or {‘xx-small’, ‘x-small’, ‘small’, ‘medium’, ‘large’, ‘x-large’, ‘xx-large’}</p> <blockquote> <div>\n<p>Controls the font size of the legend. If the value is numeric the size will be the absolute font size in points. String values are relative to the current default font size. This argument is only used if <code>prop</code> is not specified.</p> </div>\n</blockquote> <p><strong>numpoints</strong> : None or int</p> <blockquote> <div>\n<p>The number of marker points in the legend when creating a legend entry for a line/<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>matplotlib.lines.Line2D</code></a>. Default is <code>None</code> which will take the value from the <code>legend.numpoints</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>scatterpoints</strong> : None or int</p> <blockquote> <div>\n<p>The number of marker points in the legend when creating a legend entry for a scatter plot/ <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PathCollection\" title=\"matplotlib.collections.PathCollection\"><code>matplotlib.collections.PathCollection</code></a>. Default is <code>None</code> which will take the value from the <code>legend.scatterpoints</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>scatteryoffsets</strong> : iterable of floats</p> <blockquote> <div>\n<p>The vertical offset (relative to the font size) for the markers created for a scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at the top. To draw all markers at the same height, set to <code>[0.5]</code>. Default <code>[0.375, 0.5, 0.3125]</code>.</p> </div>\n</blockquote> <p><strong>markerscale</strong> : None or int or float</p> <blockquote> <div>\n<p>The relative size of legend markers compared with the originally drawn ones. Default is <code>None</code> which will take the value from the <code>legend.markerscale</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>*markerfirst*: [ *True* | *False* ]</strong></p> <blockquote> <div>\n<p>if <em>True</em>, legend marker is placed to the left of the legend label if <em>False</em>, legend marker is placed to the right of the legend label</p> </div>\n</blockquote> <p><strong>frameon</strong> : None or bool</p> <blockquote> <div>\n<p>Control whether a frame should be drawn around the legend. Default is <code>None</code> which will take the value from the <code>legend.frameon</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>fancybox</strong> : None or bool</p> <blockquote> <div>\n<p>Control whether round edges should be enabled around the <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyBboxPatch\" title=\"matplotlib.patches.FancyBboxPatch\"><code>FancyBboxPatch</code></a> which makes up the legend’s background. Default is <code>None</code> which will take the value from the <code>legend.fancybox</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>shadow</strong> : None or bool</p> <blockquote> <div>\n<p>Control whether to draw a shadow behind the legend. Default is <code>None</code> which will take the value from the <code>legend.shadow</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>framealpha</strong> : None or float</p> <blockquote> <div>\n<p>Control the alpha transparency of the legend’s frame. Default is <code>None</code> which will take the value from the <code>legend.framealpha</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>mode</strong> : {“expand”, None}</p> <blockquote> <div>\n<p>If <code>mode</code> is set to <code>\"expand\"</code> the legend will be horizontally expanded to fill the axes area (or <code>bbox_to_anchor</code> if defines the legend’s size).</p> </div>\n</blockquote> <p><strong>bbox_transform</strong> : None or <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a></p> <blockquote> <div>\n<p>The transform for the bounding box (<code>bbox_to_anchor</code>). For a value of <code>None</code> (default) the Axes’ <code>transAxes</code> transform will be used.</p> </div>\n</blockquote> <p><strong>title</strong> : str or None</p> <blockquote> <div>\n<p>The legend’s title. Default is no title (<code>None</code>).</p> </div>\n</blockquote> <p><strong>borderpad</strong> : float or None</p> <blockquote> <div>\n<p>The fractional whitespace inside the legend border. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.borderpad</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>labelspacing</strong> : float or None</p> <blockquote> <div>\n<p>The vertical space between the legend entries. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.labelspacing</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>handlelength</strong> : float or None</p> <blockquote> <div>\n<p>The length of the legend handles. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.handlelength</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>handletextpad</strong> : float or None</p> <blockquote> <div>\n<p>The pad between the legend handle and text. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.handletextpad</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>borderaxespad</strong> : float or None</p> <blockquote> <div>\n<p>The pad between the axes and legend border. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.borderaxespad</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>columnspacing</strong> : float or None</p> <blockquote> <div>\n<p>The spacing between columns. Measured in font-size units. Default is <code>None</code> which will take the value from the <code>legend.columnspacing</code> <a class=\"reference internal\" href=\"matplotlib_configuration_api#matplotlib.rcParams\" title=\"matplotlib.rcParams\"><code>rcParam</code></a>.</p> </div>\n</blockquote> <p><strong>handler_map</strong> : dict or None</p> <blockquote class=\"last\"> <div>\n<p>The custom dictionary mapping instances or types to a legend handler. This <code>handler_map</code> updates the default handler map found at <a class=\"reference internal\" href=\"legend_api#matplotlib.legend.Legend.get_legend_handler_map\" title=\"matplotlib.legend.Legend.get_legend_handler_map\"><code>matplotlib.legend.Legend.get_legend_handler_map()</code></a>.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>Not all kinds of artist are supported by the legend command. See <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/users/legend_guide.html#plotting-guide-legend\"><span>Legend guide</span></a> for details.</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/legend_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/legend_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/legend_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/api/legend_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/legend_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/legend_demo.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.locator_params\"><code>matplotlib.pyplot.locator_params(axis='both', tight=None, **kwargs)</code></dt> <dd>\n<p>Control behavior of tick locators.</p> <p>Keyword arguments:</p> <dl class=\"docutils\"> <dt><em>axis</em></dt> <dd>[‘x’ | ‘y’ | ‘both’] Axis on which to operate; default is ‘both’.</dd> <dt><em>tight</em></dt> <dd>[True | False | None] Parameter passed to <code>autoscale_view()</code>. Default is None, for no change.</dd> </dl> <p>Remaining keyword arguments are passed to directly to the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator.set_params\" title=\"matplotlib.ticker.MaxNLocator.set_params\"><code>set_params()</code></a> method.</p> <p>Typically one might want to reduce the maximum number of ticks and use tight bounds when plotting small subplots, for example:</p> <pre data-language=\"python\">ax.locator_params(tight=True, nbins=4)\n</pre> <p>Because the locator is involved in autoscaling, <code>autoscale_view()</code> is called automatically after the parameters are changed.</p> <p>This presently works only for the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> used by default on linear axes, but it may be generalized.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.loglog\"><code>matplotlib.pyplot.loglog(*args, **kwargs)</code></dt> <dd>\n<p>Make a plot with log scaling on both the <em>x</em> and <em>y</em> axis.</p> <p>Call signature:</p> <pre data-language=\"python\">loglog(*args, **kwargs)\n</pre> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.loglog\" title=\"matplotlib.pyplot.loglog\"><code>loglog()</code></a> supports all the keyword arguments of <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> and <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_xscale\" title=\"matplotlib.axes.Axes.set_xscale\"><code>matplotlib.axes.Axes.set_xscale()</code></a> / <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_yscale\" title=\"matplotlib.axes.Axes.set_yscale\"><code>matplotlib.axes.Axes.set_yscale()</code></a>.</p> <p>Notable keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>: scalar &gt; 1</dt> <dd>Base of the <em>x</em>/<em>y</em> logarithm</dd> <dt>\n<em>subsx</em>/<em>subsy</em>: [ <em>None</em> | sequence ]</dt> <dd>The location of the minor <em>x</em>/<em>y</em> ticks; <em>None</em> defaults to autosubs, which depend on the number of decades in the plot; see <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_xscale\" title=\"matplotlib.axes.Axes.set_xscale\"><code>matplotlib.axes.Axes.set_xscale()</code></a> / <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_yscale\" title=\"matplotlib.axes.Axes.set_yscale\"><code>matplotlib.axes.Axes.set_yscale()</code></a> for details</dd> <dt>\n<em>nonposx</em>/<em>nonposy</em>: [‘mask’ | ‘clip’ ]</dt> <dd>Non-positive values in <em>x</em> or <em>y</em> can be masked as invalid, or clipped to a very small positive number</dd> </dl> </div>\n</blockquote> <p>The remaining valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/log_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/log_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/log_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/log_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/log_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/log_demo.png\"> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.magma\"><code>matplotlib.pyplot.magma()</code></dt> <dd>\n<p>set the default colormap to magma and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.magnitude_spectrum\"><code>matplotlib.pyplot.magnitude_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, scale=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot the magnitude spectrum.</p> <p>Call signature:</p> <pre data-language=\"python\">magnitude_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,\n                   pad_to=None, sides='default', **kwargs)\n</pre> <p>Compute the magnitude spectrum of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>\n<blockquote class=\"first\"> <div>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>scale</em>: [ ‘default’ | ‘linear’ | ‘dB’ ]</dt> <dd>The scaling of the values in the <em>spec</em>. ‘linear’ is no scaling. ‘dB’ returns the values in dB scale. When <em>mode</em> is ‘density’, this is dB power (10 * log10). Otherwise this is dB amplitude (20 * log10). ‘default’ is ‘linear’.</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> </dl> </dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the magnitude spectrum before scaling (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function</dd> </dl> </div>\n</blockquote> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/spectrum_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/spectrum_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.psd\" title=\"matplotlib.pyplot.psd\"><code>psd()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.psd\" title=\"matplotlib.pyplot.psd\"><code>psd()</code></a> plots the power spectral density.`.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.angle_spectrum\" title=\"matplotlib.pyplot.angle_spectrum\"><code>angle_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.angle_spectrum\" title=\"matplotlib.pyplot.angle_spectrum\"><code>angle_spectrum()</code></a> plots the angles of the corresponding frequencies.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.phase_spectrum\" title=\"matplotlib.pyplot.phase_spectrum\"><code>phase_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.phase_spectrum\" title=\"matplotlib.pyplot.phase_spectrum\"><code>phase_spectrum()</code></a> plots the phase (unwrapped angle) of the corresponding frequencies.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram()</code></a> can plot the magnitude spectrum of segments within the signal in a colormap.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.margins\"><code>matplotlib.pyplot.margins(*args, **kw)</code></dt> <dd>\n<p>Set or retrieve autoscaling margins.</p> <p>signatures:</p> <pre data-language=\"python\">margins()\n</pre> <p>returns xmargin, ymargin</p> <pre data-language=\"python\">margins(margin)\n\nmargins(xmargin, ymargin)\n\nmargins(x=xmargin, y=ymargin)\n\nmargins(..., tight=False)\n</pre> <p>All three forms above set the xmargin and ymargin parameters. All keyword parameters are optional. A single argument specifies both xmargin and ymargin. The <em>tight</em> parameter is passed to <code>autoscale_view()</code>, which is executed after a margin is changed; the default here is <em>True</em>, on the assumption that when margins are specified, no additional padding to match tick marks is usually desired. Setting <em>tight</em> to <em>None</em> will preserve the previous setting.</p> <p>Specifying any margin changes only the autoscaling; for example, if <em>xmargin</em> is not None, then <em>xmargin</em> times the X data interval will be added to each end of that interval before it is used in autoscaling.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.matshow\"><code>matplotlib.pyplot.matshow(A, fignum=None, **kw)</code></dt> <dd>\n<p>Display an array as a matrix in a new figure window.</p> <p>The origin is set at the upper left hand corner and rows (first dimension of the array) are displayed horizontally. The aspect ratio of the figure window is that of the array, unless this would make an excessively short or narrow figure.</p> <p>Tick labels for the xaxis are placed on top.</p> <p>With the exception of <em>fignum</em>, keyword arguments are passed to <a class=\"reference internal\" href=\"#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>imshow()</code></a>. You may set the <em>origin</em> kwarg to “lower” if you want the first row in the array to be at the bottom instead of the top.</p> <dl class=\"docutils\"> <dt>\n<em>fignum</em>: [ None | integer | False ]</dt> <dd>\n<p class=\"first\">By default, <a class=\"reference internal\" href=\"#matplotlib.pyplot.matshow\" title=\"matplotlib.pyplot.matshow\"><code>matshow()</code></a> creates a new figure window with automatic numbering. If <em>fignum</em> is given as an integer, the created figure will use this figure number. Because of how <a class=\"reference internal\" href=\"#matplotlib.pyplot.matshow\" title=\"matplotlib.pyplot.matshow\"><code>matshow()</code></a> tries to set the figure aspect ratio to be the one of the array, if you provide the number of an already existing figure, strange things may happen.</p> <p class=\"last\">If <em>fignum</em> is <em>False</em> or 0, a new figure window will <strong>NOT</strong> be created.</p> </dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.minorticks_off\"><code>matplotlib.pyplot.minorticks_off()</code></dt> <dd>\n<p>Remove minor ticks from the current plot.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.minorticks_on\"><code>matplotlib.pyplot.minorticks_on()</code></dt> <dd>\n<p>Display minor ticks on the current plot.</p> <p>Displaying minor ticks reduces performance; turn them off using minorticks_off() if drawing speed is a problem.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.over\"><code>matplotlib.pyplot.over(func, *args, **kwargs)</code></dt> <dd>\n<p>Call a function with hold(True).</p> <p>Calls:</p> <pre data-language=\"python\">func(*args, **kwargs)\n</pre> <p>with <code>hold(True)</code> and then restores the hold state.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.pause\"><code>matplotlib.pyplot.pause(interval)</code></dt> <dd>\n<p>Pause for <em>interval</em> seconds.</p> <p>If there is an active figure it will be updated and displayed, and the GUI event loop will run during the pause.</p> <p>If there is no active figure, or if a non-interactive backend is in use, this executes time.sleep(interval).</p> <p>This can be used for crude animation. For more complex animation, see <a class=\"reference internal\" href=\"animation_api#module-matplotlib.animation\" title=\"matplotlib.animation\"><code>matplotlib.animation</code></a>.</p> <p>This function is experimental; its behavior may be changed or extended in a future release.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.pcolor\"><code>matplotlib.pyplot.pcolor(*args, **kwargs)</code></dt> <dd>\n<p>Create a pseudocolor plot of a 2-D array.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">pcolor can be very slow for large arrays; consider using the similar but much faster <a class=\"reference internal\" href=\"#matplotlib.pyplot.pcolormesh\" title=\"matplotlib.pyplot.pcolormesh\"><code>pcolormesh()</code></a> instead.</p> </div> <p>Call signatures:</p> <pre data-language=\"python\">pcolor(C, **kwargs)\npcolor(X, Y, C, **kwargs)\n</pre> <p><em>C</em> is the array of color values.</p> <p><em>X</em> and <em>Y</em>, if given, specify the (<em>x</em>, <em>y</em>) coordinates of the colored quadrilaterals; the quadrilateral for C[i,j] has corners at:</p> <pre data-language=\"python\">(X[i,   j],   Y[i,   j]),\n(X[i,   j+1], Y[i,   j+1]),\n(X[i+1, j],   Y[i+1, j]),\n(X[i+1, j+1], Y[i+1, j+1]).\n</pre> <p>Ideally the dimensions of <em>X</em> and <em>Y</em> should be one greater than those of <em>C</em>; if the dimensions are the same, then the last row and column of <em>C</em> will be ignored.</p> <p>Note that the column index corresponds to the <em>x</em>-coordinate, and the row index corresponds to <em>y</em>; for details, see the <a class=\"reference internal\" href=\"#axes-pcolor-grid-orientation\"><span>Grid Orientation</span></a> section below.</p> <p>If either or both of <em>X</em> and <em>Y</em> are 1-D arrays or column vectors, they will be expanded as needed into the appropriate 2-D arrays, making a rectangular grid.</p> <p><em>X</em>, <em>Y</em> and <em>C</em> may be masked arrays. If either C[i, j], or one of the vertices surrounding C[i,j] (<em>X</em> or <em>Y</em> at [i, j], [i+1, j], [i, j+1],[i+1, j+1]) is masked, nothing is plotted.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance. If <em>None</em>, use rc settings.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>An <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance is used to scale luminance data to 0,1. If <em>None</em>, defaults to <code>normalize()</code>.</dd> <dt>\n<em>vmin</em>/<em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>\n<em>vmin</em> and <em>vmax</em> are used in conjunction with <em>norm</em> to normalize luminance data. If either is <em>None</em>, it is autoscaled to the respective min or max of the color array <em>C</em>. If not <em>None</em>, <em>vmin</em> or <em>vmax</em> passed in here override any pre-existing values supplied in the <em>norm</em> instance.</dd> <dt>\n<em>shading</em>: [ ‘flat’ | ‘faceted’ ]</dt> <dd>\n<p class=\"first\">If ‘faceted’, a black grid is drawn around each rectangle; if ‘flat’, edges are not drawn. Default is ‘flat’, contrary to MATLAB.</p> <dl class=\"last docutils\"> <dt>This kwarg is deprecated; please use ‘edgecolors’ instead:</dt> <dd>\n<ul class=\"first last simple\"> <li>shading=’flat’ – edgecolors=’none’</li> <li>shading=’faceted – edgecolors=’k’</li> </ul> </dd> </dl> </dd> <dt>\n<em>edgecolors</em>: [ <em>None</em> | <code>'none'</code> | color | color sequence]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the rc setting is used by default.</p> <p>If <code>'none'</code>, edges will not be visible.</p> <p class=\"last\">An mpl color or sequence of colors will set the edge color</p> </dd> <dt>\n<em>alpha</em>: <code>0 &lt;= scalar &lt;= 1</code> or <em>None</em>\n</dt> <dd>the alpha blending value</dd> <dt>\n<em>snap</em>: bool</dt> <dd>Whether to snap the mesh to pixel boundaries.</dd> </dl> </div>\n</blockquote> <p>Return value is a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>matplotlib.collections.Collection</code></a> instance.</p> <p id=\"axes-pcolor-grid-orientation\">The grid orientation follows the MATLAB convention: an array <em>C</em> with shape (<em>nrows</em>, <em>ncolumns</em>) is plotted with the column number as <em>X</em> and the row number as <em>Y</em>, increasing up; hence it is plotted the way the array would be printed, except that the <em>Y</em> axis is reversed. That is, <em>C</em> is taken as <em>C*(*y</em>, <em>x</em>).</p> <p>Similarly for <code>meshgrid()</code>:</p> <pre data-language=\"python\">x = np.arange(5)\ny = np.arange(3)\nX, Y = np.meshgrid(x, y)\n</pre> <p>is equivalent to:</p> <pre data-language=\"python\">X = array([[0, 1, 2, 3, 4],\n           [0, 1, 2, 3, 4],\n           [0, 1, 2, 3, 4]])\n\nY = array([[0, 0, 0, 0, 0],\n           [1, 1, 1, 1, 1],\n           [2, 2, 2, 2, 2]])\n</pre> <p>so if you have:</p> <pre data-language=\"python\">C = rand(len(x), len(y))\n</pre> <p>then you need to transpose C:</p> <pre data-language=\"python\">pcolor(X, Y, C.T)\n</pre> <p>or:</p> <pre data-language=\"python\">pcolor(C.T)\n</pre> <p>MATLAB <a class=\"reference internal\" href=\"#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor()</code></a> always discards the last row and column of <em>C</em>, but matplotlib displays the last row and column if <em>X</em> and <em>Y</em> are not specified, or if <em>X</em> and <em>Y</em> have one more row and column than <em>C</em>.</p> <p>kwargs can be used to control the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The default <em>antialiaseds</em> is False if the default <em>edgecolors*=”none” is used. This eliminates artificial lines at patch boundaries, and works regardless of the value of alpha. If *edgecolors</em> is not “none”, then the default <em>antialiaseds</em> is taken from rcParams[‘patch.antialiased’], which defaults to <em>True</em>. Stroking the edges may be preferred if <em>alpha</em> is 1, but will cause artifacts otherwise.</p> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.pcolormesh\" title=\"matplotlib.pyplot.pcolormesh\"><code>pcolormesh()</code></a></dt> <dd>For an explanation of the differences between pcolor and pcolormesh.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.pcolormesh\"><code>matplotlib.pyplot.pcolormesh(*args, **kwargs)</code></dt> <dd>\n<p>Plot a quadrilateral mesh.</p> <p>Call signatures:</p> <pre data-language=\"python\">pcolormesh(C)\npcolormesh(X, Y, C)\npcolormesh(C, **kwargs)\n</pre> <p>Create a pseudocolor plot of a 2-D array.</p> <p>pcolormesh is similar to <a class=\"reference internal\" href=\"#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor()</code></a>, but uses a different mechanism and returns a different object; pcolor returns a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> but pcolormesh returns a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.QuadMesh\" title=\"matplotlib.collections.QuadMesh\"><code>QuadMesh</code></a>. It is much faster, so it is almost always preferred for large arrays.</p> <p><em>C</em> may be a masked array, but <em>X</em> and <em>Y</em> may not. Masked array support is implemented via <em>cmap</em> and <em>norm</em>; in contrast, <a class=\"reference internal\" href=\"#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor()</code></a> simply does not draw quadrilaterals with masked colors or vertices.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance. If <em>None</em>, use rc settings.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance is used to scale luminance data to 0,1. If <em>None</em>, defaults to <code>normalize()</code>.</dd> <dt>\n<em>vmin</em>/<em>vmax</em>: [ <em>None</em> | scalar ]</dt> <dd>\n<em>vmin</em> and <em>vmax</em> are used in conjunction with <em>norm</em> to normalize luminance data. If either is <em>None</em>, it is autoscaled to the respective min or max of the color array <em>C</em>. If not <em>None</em>, <em>vmin</em> or <em>vmax</em> passed in here override any pre-existing values supplied in the <em>norm</em> instance.</dd> <dt>\n<em>shading</em>: [ ‘flat’ | ‘gouraud’ ]</dt> <dd>‘flat’ indicates a solid color for each quad. When ‘gouraud’, each quad will be Gouraud shaded. When gouraud shading, edgecolors is ignored.</dd> <dt>\n<em>edgecolors</em>: [<em>None</em> | <code>'None'</code> | <code>'face'</code> | color |</dt> <dd>\n<blockquote class=\"first\"> <div>color sequence]</div>\n</blockquote> <p>If <em>None</em>, the rc setting is used by default.</p> <p>If <code>'None'</code>, edges will not be visible.</p> <p>If <code>'face'</code>, edges will have the same color as the faces.</p> <p class=\"last\">An mpl color or sequence of colors will set the edge color</p> </dd> <dt>\n<em>alpha</em>: <code>0 &lt;= scalar &lt;= 1</code> or <em>None</em>\n</dt> <dd>the alpha blending value</dd> </dl> </div>\n</blockquote> <p>Return value is a <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.QuadMesh\" title=\"matplotlib.collections.QuadMesh\"><code>matplotlib.collections.QuadMesh</code></a> object.</p> <p>kwargs can be used to control the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.QuadMesh\" title=\"matplotlib.collections.QuadMesh\"><code>matplotlib.collections.QuadMesh</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.pcolor\" title=\"matplotlib.pyplot.pcolor\"><code>pcolor()</code></a></dt> <dd>For an explanation of the grid orientation and the expansion of 1-D <em>X</em> and/or <em>Y</em> to 2-D arrays.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.phase_spectrum\"><code>matplotlib.pyplot.phase_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot the phase spectrum.</p> <p>Call signature:</p> <pre data-language=\"python\">phase_spectrum(x, Fs=2, Fc=0,  window=mlab.window_hanning,\n               pad_to=None, sides='default', **kwargs)\n</pre> <p>Compute the phase spectrum (unwrapped angle spectrum) of <em>x</em>. Data is padded to a length of <em>pad_to</em> and the windowing function <em>window</em> is applied to the signal.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>\n<blockquote class=\"first\"> <div>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to the length of the input signal (i.e. no padding).</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> </dl> </dd> </dl> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 1-D array</dt> <dd>The values for the phase spectrum in radians (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>spectrum</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function</dd> </dl> </div>\n</blockquote> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/spectrum_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/spectrum_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/spectrum_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.magnitude_spectrum\" title=\"matplotlib.pyplot.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.magnitude_spectrum\" title=\"matplotlib.pyplot.magnitude_spectrum\"><code>magnitude_spectrum()</code></a> plots the magnitudes of the corresponding frequencies.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.angle_spectrum\" title=\"matplotlib.pyplot.angle_spectrum\"><code>angle_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.angle_spectrum\" title=\"matplotlib.pyplot.angle_spectrum\"><code>angle_spectrum()</code></a> plots the wrapped version of this function.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram()</code></a> can plot the phase spectrum of segments within the signal in a colormap.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.pie\"><code>matplotlib.pyplot.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None, radius=None, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, hold=None, data=None)</code></dt> <dd>\n<p>Plot a pie chart.</p> <p>Call signature:</p> <pre data-language=\"python\">pie(x, explode=None, labels=None,\n    colors=('b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'),\n    autopct=None, pctdistance=0.6, shadow=False,\n    labeldistance=1.1, startangle=None, radius=None,\n    counterclock=True, wedgeprops=None, textprops=None,\n    center = (0, 0), frame = False )\n</pre> <p>Make a pie chart of array <em>x</em>. The fractional area of each wedge is given by x/sum(x). If sum(x) &lt;= 1, then the values of x give the fractional area directly and the array will not be normalized. The wedges are plotted counterclockwise, by default starting from the x-axis.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>explode</em>: [ <em>None</em> | len(x) sequence ]</dt> <dd>If not <em>None</em>, is a <code>len(x)</code> array which specifies the fraction of the radius with which to offset each wedge.</dd> <dt>\n<em>colors</em>: [ <em>None</em> | color sequence ]</dt> <dd>A sequence of matplotlib color args through which the pie chart will cycle.</dd> <dt>\n<em>labels</em>: [ <em>None</em> | len(x) sequence of strings ]</dt> <dd>A sequence of strings providing the labels for each wedge</dd> <dt>\n<em>autopct</em>: [ <em>None</em> | format string | format function ]</dt> <dd>If not <em>None</em>, is a string or function used to label the wedges with their numeric value. The label will be placed inside the wedge. If it is a format string, the label will be <code>fmt%pct</code>. If it is a function, it will be called.</dd> <dt>\n<em>pctdistance</em>: scalar</dt> <dd>The ratio between the center of each pie slice and the start of the text generated by <em>autopct</em>. Ignored if <em>autopct</em> is <em>None</em>; default is 0.6.</dd> <dt>\n<em>labeldistance</em>: scalar</dt> <dd>The radial distance at which the pie labels are drawn</dd> <dt>\n<em>shadow</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>Draw a shadow beneath the pie.</dd> <dt>\n<em>startangle</em>: [ <em>None</em> | Offset angle ]</dt> <dd>If not <em>None</em>, rotates the start of the pie chart by <em>angle</em> degrees counterclockwise from the x-axis.</dd> </dl> <p><em>radius</em>: [ <em>None</em> | scalar ] The radius of the pie, if <em>radius</em> is <em>None</em> it will be set to 1.</p> <dl class=\"docutils\"> <dt>\n<em>counterclock</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>Specify fractions direction, clockwise or counterclockwise.</dd> <dt>\n<em>wedgeprops</em>: [ <em>None</em> | dict of key value pairs ]</dt> <dd>Dict of arguments passed to the wedge objects making the pie. For example, you can pass in wedgeprops = { ‘linewidth’ : 3 } to set the width of the wedge border lines equal to 3. For more details, look at the doc/arguments of the wedge object. By default <code>clip_on=False</code>.</dd> <dt>\n<em>textprops</em>: [ <em>None</em> | dict of key value pairs ]</dt> <dd>Dict of arguments to pass to the text objects.</dd> </dl> <p><em>center</em>: [ (0,0) | sequence of 2 scalars ] Center position of the chart.</p> <dl class=\"docutils\"> <dt>\n<em>frame</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>Plot axes frame with the chart.</dd> </dl> </div>\n</blockquote> <p>The pie chart will probably look best if the figure and axes are square, or the Axes aspect is equal. e.g.:</p> <pre data-language=\"python\">figure(figsize=(8,8))\nax = axes([0.1, 0.1, 0.8, 0.8])\n</pre> <p>or:</p> <pre data-language=\"python\">axes(aspect=1)\n</pre> <dl class=\"docutils\"> <dt>Return value:</dt> <dd>\n<p class=\"first\">If <em>autopct</em> is <em>None</em>, return the tuple (<em>patches</em>, <em>texts</em>):</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>patches</em> is a sequence of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Wedge\" title=\"matplotlib.patches.Wedge\"><code>matplotlib.patches.Wedge</code></a> instances</li> <li>\n<em>texts</em> is a list of the label <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instances.</li> </ul> </div>\n</blockquote> <p class=\"last\">If <em>autopct</em> is not <em>None</em>, return the tuple (<em>patches</em>, <em>texts</em>, <em>autotexts</em>), where <em>patches</em> and <em>texts</em> are as above, and <em>autotexts</em> is a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances for the numeric labels.</p> </dd> </dl> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘colors’, ‘x’, ‘explode’, ‘labels’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.pink\"><code>matplotlib.pyplot.pink()</code></dt> <dd>\n<p>set the default colormap to pink and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.plasma\"><code>matplotlib.pyplot.plasma()</code></dt> <dd>\n<p>set the default colormap to plasma and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.plot\"><code>matplotlib.pyplot.plot(*args, **kwargs)</code></dt> <dd>\n<p>Plot lines and/or markers to the <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a>. <em>args</em> is a variable length argument, allowing for multiple <em>x</em>, <em>y</em> pairs with an optional format string. For example, each of the following is legal:</p> <pre data-language=\"python\">plot(x, y)        # plot x and y using default line style and color\nplot(x, y, 'bo')  # plot x and y using blue circle markers\nplot(y)           # plot y using x as index array 0..N-1\nplot(y, 'r+')     # ditto, but with red plusses\n</pre> <p>If <em>x</em> and/or <em>y</em> is 2-dimensional, then the corresponding columns will be plotted.</p> <p>If used with labeled data, make sure that the color spec is not included as an element in data, as otherwise the last case <code>plot(\"v\",\"r\", data={\"v\":..., \"r\":...)</code> can be interpreted as the first case which would do <code>plot(v, r)</code> using the default line style and color.</p> <p>If not used with labeled data (i.e., without a data argument), an arbitrary number of <em>x</em>, <em>y</em>, <em>fmt</em> groups can be specified, as in:</p> <pre data-language=\"python\">a.plot(x1, y1, 'g^', x2, y2, 'g-')\n</pre> <p>Return value is a list of lines that were added.</p> <p>By default, each line is assigned a different style specified by a ‘style cycle’. To change this behavior, you can edit the axes.prop_cycle rcParam.</p> <p>The following format string characters are accepted to control the line style or marker:</p> <table class=\"docutils\"> <colgroup> <col width=\"34%\"> <col width=\"66%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">character</th> <th class=\"head\">description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><code>'-'</code></td> <td>solid line style</td> </tr> <tr class=\"row-odd\">\n<td><code>'--'</code></td> <td>dashed line style</td> </tr> <tr class=\"row-even\">\n<td><code>'-.'</code></td> <td>dash-dot line style</td> </tr> <tr class=\"row-odd\">\n<td><code>':'</code></td> <td>dotted line style</td> </tr> <tr class=\"row-even\">\n<td><code>'.'</code></td> <td>point marker</td> </tr> <tr class=\"row-odd\">\n<td><code>','</code></td> <td>pixel marker</td> </tr> <tr class=\"row-even\">\n<td><code>'o'</code></td> <td>circle marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'v'</code></td> <td>triangle_down marker</td> </tr> <tr class=\"row-even\">\n<td><code>'^'</code></td> <td>triangle_up marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'&lt;'</code></td> <td>triangle_left marker</td> </tr> <tr class=\"row-even\">\n<td><code>'&gt;'</code></td> <td>triangle_right marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'1'</code></td> <td>tri_down marker</td> </tr> <tr class=\"row-even\">\n<td><code>'2'</code></td> <td>tri_up marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'3'</code></td> <td>tri_left marker</td> </tr> <tr class=\"row-even\">\n<td><code>'4'</code></td> <td>tri_right marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'s'</code></td> <td>square marker</td> </tr> <tr class=\"row-even\">\n<td><code>'p'</code></td> <td>pentagon marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'*'</code></td> <td>star marker</td> </tr> <tr class=\"row-even\">\n<td><code>'h'</code></td> <td>hexagon1 marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'H'</code></td> <td>hexagon2 marker</td> </tr> <tr class=\"row-even\">\n<td><code>'+'</code></td> <td>plus marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'x'</code></td> <td>x marker</td> </tr> <tr class=\"row-even\">\n<td><code>'D'</code></td> <td>diamond marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'d'</code></td> <td>thin_diamond marker</td> </tr> <tr class=\"row-even\">\n<td><code>'|'</code></td> <td>vline marker</td> </tr> <tr class=\"row-odd\">\n<td><code>'_'</code></td> <td>hline marker</td> </tr> </tbody> </table> <p>The following color abbreviations are supported:</p> <table class=\"docutils\"> <colgroup> <col width=\"56%\"> <col width=\"44%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">character</th> <th class=\"head\">color</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘b’</td> <td>blue</td> </tr> <tr class=\"row-odd\">\n<td>‘g’</td> <td>green</td> </tr> <tr class=\"row-even\">\n<td>‘r’</td> <td>red</td> </tr> <tr class=\"row-odd\">\n<td>‘c’</td> <td>cyan</td> </tr> <tr class=\"row-even\">\n<td>‘m’</td> <td>magenta</td> </tr> <tr class=\"row-odd\">\n<td>‘y’</td> <td>yellow</td> </tr> <tr class=\"row-even\">\n<td>‘k’</td> <td>black</td> </tr> <tr class=\"row-odd\">\n<td>‘w’</td> <td>white</td> </tr> </tbody> </table> <p>In addition, you can specify colors in many weird and wonderful ways, including full names (<code>'green'</code>), hex strings (<code>'#008000'</code>), RGB or RGBA tuples (<code>(0,1,0,1)</code>) or grayscale intensities as a string (<code>'0.8'</code>). Of these, the string specifications can be used in place of a <code>fmt</code> group, but the tuple forms can be used only as <code>kwargs</code>.</p> <p>Line styles and colors are combined in a single format string, as in <code>'bo'</code> for blue circles.</p> <p>The <em>kwargs</em> can be used to set line properties (any property that has a <code>set_*</code> method). You can use this to set a line label (for auto legends), linewidth, anitialising, marker face color, etc. Here is an example:</p> <pre data-language=\"python\">plot([1,2,3], [1,2,3], 'go-', label='line 1', linewidth=2)\nplot([1,2,3], [1,4,9], 'rs',  label='line 2')\naxis([0, 4, 0, 10])\nlegend()\n</pre> <p>If you make multiple lines with one plot command, the kwargs apply to all those lines, e.g.:</p> <pre data-language=\"python\">plot(x1, y1, x2, y2, antialiased=False)\n</pre> <p>Neither line will be antialiased.</p> <p>You do not need to use format strings, which are just abbreviations. All of the line properties can be controlled by keyword arguments. For example, you can set the color, marker, linestyle, and markercolor with:</p> <pre data-language=\"python\">plot(x, y, color='green', linestyle='dashed', marker='o',\n     markerfacecolor='blue', markersize=12).\n</pre> <p>See <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> for details.</p> <p>The kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>kwargs <em>scalex</em> and <em>scaley</em>, if defined, are passed on to <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.autoscale_view\" title=\"matplotlib.axes.Axes.autoscale_view\"><code>autoscale_view()</code></a> to determine whether the <em>x</em> and <em>y</em> axes are autoscaled; the default is <em>True</em>.</p> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.plot_date\"><code>matplotlib.pyplot.plot_date(x, y, fmt='o', tz=None, xdate=True, ydate=False, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot with data with dates.</p> <p>Call signature:</p> <pre data-language=\"python\">plot_date(x, y, fmt='bo', tz=None, xdate=True,\n          ydate=False, **kwargs)\n</pre> <p>Similar to the <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> command, except the <em>x</em> or <em>y</em> (or both) data is considered to be dates, and the axis is labeled accordingly.</p> <p><em>x</em> and/or <em>y</em> can be a sequence of dates represented as float days since 0001-01-01 UTC.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>fmt</em>: string</dt> <dd>The plot format string.</dd> <dt>\n<em>tz</em>: [ <em>None</em> | timezone string | <code>tzinfo</code> instance]</dt> <dd>The time zone to use in labeling dates. If <em>None</em>, defaults to rc value.</dd> <dt>\n<em>xdate</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>If <em>True</em>, the <em>x</em>-axis will be labeled with dates.</dd> <dt>\n<em>ydate</em>: [ <em>False</em> | <em>True</em> ]</dt> <dd>If <em>True</em>, the <em>y</em>-axis will be labeled with dates.</dd> </dl> </div>\n</blockquote> <p>Note if you are using custom date tickers and formatters, it may be necessary to set the formatters/locators after the call to <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot_date\" title=\"matplotlib.pyplot.plot_date\"><code>plot_date()</code></a> since <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot_date\" title=\"matplotlib.pyplot.plot_date\"><code>plot_date()</code></a> will set the default tick locator to <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.AutoDateLocator\" title=\"matplotlib.dates.AutoDateLocator\"><code>matplotlib.dates.AutoDateLocator</code></a> (if the tick locator is not already set to a <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.DateLocator\" title=\"matplotlib.dates.DateLocator\"><code>matplotlib.dates.DateLocator</code></a> instance) and the default tick formatter to <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.AutoDateFormatter\" title=\"matplotlib.dates.AutoDateFormatter\"><code>matplotlib.dates.AutoDateFormatter</code></a> (if the tick formatter is not already set to a <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.DateFormatter\" title=\"matplotlib.dates.DateFormatter\"><code>matplotlib.dates.DateFormatter</code></a> instance).</p> <p>Valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p><a class=\"reference internal\" href=\"dates_api#module-matplotlib.dates\" title=\"matplotlib.dates\"><code>dates</code></a> for helper functions</p> <p class=\"last\"><a class=\"reference internal\" href=\"dates_api#matplotlib.dates.date2num\" title=\"matplotlib.dates.date2num\"><code>date2num()</code></a>, <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.num2date\" title=\"matplotlib.dates.num2date\"><code>num2date()</code></a> and <a class=\"reference internal\" href=\"dates_api#matplotlib.dates.drange\" title=\"matplotlib.dates.drange\"><code>drange()</code></a> for help on creating the required floating point dates.</p> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.plotfile\"><code>matplotlib.pyplot.plotfile(fname, cols=(0, ), plotfuncs=None, comments='#', skiprows=0, checkrows=5, delimiter=', ', names=None, subplots=True, newfig=True, **kwargs)</code></dt> <dd>\n<p>Plot the data in in a file.</p> <p><em>cols</em> is a sequence of column identifiers to plot. An identifier is either an int or a string. If it is an int, it indicates the column number. If it is a string, it indicates the column header. matplotlib will make column headers lower case, replace spaces with underscores, and remove all illegal characters; so <code>'Adj Close*'</code> will have name <code>'adj_close'</code>.</p> <ul class=\"simple\"> <li>If len(<em>cols</em>) == 1, only that column will be plotted on the <em>y</em> axis.</li> <li>If len(<em>cols</em>) &gt; 1, the first element will be an identifier for data for the <em>x</em> axis and the remaining elements will be the column indexes for multiple subplots if <em>subplots</em> is <em>True</em> (the default), or for lines in a single subplot if <em>subplots</em> is <em>False</em>.</li> </ul> <p><em>plotfuncs</em>, if not <em>None</em>, is a dictionary mapping identifier to an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> plotting function as a string. Default is ‘plot’, other choices are ‘semilogy’, ‘fill’, ‘bar’, etc. You must use the same type of identifier in the <em>cols</em> vector as you use in the <em>plotfuncs</em> dictionary, e.g., integer column numbers in both or column names in both. If <em>subplots</em> is <em>False</em>, then including any function such as ‘semilogy’ that changes the axis scaling will set the scaling for all columns.</p> <p><em>comments</em>, <em>skiprows</em>, <em>checkrows</em>, <em>delimiter</em>, and <em>names</em> are all passed on to <code>matplotlib.pylab.csv2rec()</code> to load the data into a record array.</p> <p>If <em>newfig</em> is <em>True</em>, the plot always will be made in a new figure; if <em>False</em>, it will be made in the current figure if one exists, else in a new figure.</p> <p>kwargs are passed on to plotting functions.</p> <p>Example usage:</p> <pre data-language=\"python\"># plot the 2nd and 4th column against the 1st in two subplots\nplotfile(fname, (0,1,3))\n\n# plot using column names; specify an alternate plot type for volume\nplotfile(fname, ('date', 'volume', 'adj_close'),\n                              plotfuncs={'volume': 'semilogy'})\n</pre> <p>Note: plotfile is intended as a convenience for quickly plotting data from flat files; it is not intended as an alternative interface to general plotting with pyplot or matplotlib.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.polar\"><code>matplotlib.pyplot.polar(*args, **kwargs)</code></dt> <dd>\n<p>Make a polar plot.</p> <p>call signature:</p> <pre data-language=\"python\">polar(theta, r, **kwargs)\n</pre> <p>Multiple <em>theta</em>, <em>r</em> arguments are supported, with format strings, as in <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.prism\"><code>matplotlib.pyplot.prism()</code></dt> <dd>\n<p>set the default colormap to prism and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.psd\"><code>matplotlib.pyplot.psd(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot the power spectral density.</p> <p>Call signature:</p> <pre data-language=\"python\">psd(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,\n    window=mlab.window_hanning, noverlap=0, pad_to=None,\n    sides='default', scale_by_freq=None, return_line=None, **kwargs)\n</pre> <p>The power spectral density <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-f6d65b7f49.png\" style=\"position: relative; bottom: -6px\"> by Welch’s average periodogram method. The vector <em>x</em> is divided into <em>NFFT</em> length segments. Each segment is detrended by function <em>detrend</em> and windowed by function <em>window</em>. <em>noverlap</em> gives the length of the overlap between segments. The <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-e29eb6062a.png\" style=\"position: relative; bottom: -8px\"> of each segment <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-387c1a8741.png\" style=\"position: relative; bottom: -3px\"> are averaged to compute <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-f6d65b7f49.png\" style=\"position: relative; bottom: -6px\">, with a scaling to correct for power loss due to windowing.</p> <p>If len(<em>x</em>) &lt; <em>NFFT</em>, it will be zero padded to <em>NFFT</em>.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between segments. The default value is 0 (no overlap).</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> <dt>\n<em>return_line</em>: bool</dt> <dd>Whether to include the line object plotted in the returned values. Default is False.</dd> </dl> </dd> </dl> <p>If <em>return_line</em> is False, returns the tuple (<em>Pxx</em>, <em>freqs</em>). If <em>return_line</em> is True, returns the tuple (<em>Pxx</em>, <em>freqs</em>. <em>line</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Pxx</em>: 1-D array</dt> <dd>The values for the power spectrum <code>P_{xx}</code> before scaling (real valued)</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the elements in <em>Pxx</em>\n</dd> <dt>\n<em>line</em>: a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance</dt> <dd>The line created by this function. Only returend if <em>return_line</em> is True.</dd> </dl> </div>\n</blockquote> <p>For plotting, the power is plotted as <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-c53255ce25.png\" style=\"position: relative; bottom: -8px\"> for decibels, though <em>Pxx</em> itself is returned.</p> <dl class=\"docutils\"> <dt>References:</dt> <dd>Bendat &amp; Piersol – Random Data: Analysis and Measurement Procedures, John Wiley &amp; Sons (1986)</dd> </dl> <p>kwargs control the <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/psd_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/psd_demo_00_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/psd_demo_00_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/psd_demo_00_00.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/psd_demo_00_00.png\" src=\"http://matplotlib.org/1.5.1/_images/psd_demo_00_00.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.specgram\" title=\"matplotlib.pyplot.specgram\"><code>specgram()</code></a> differs in the default overlap; in not returning the mean of the segment periodograms; in returning the times of the segments; and in plotting a colormap instead of a line.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.magnitude_spectrum\" title=\"matplotlib.pyplot.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.magnitude_spectrum\" title=\"matplotlib.pyplot.magnitude_spectrum\"><code>magnitude_spectrum()</code></a> plots the magnitude spectrum.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.csd\" title=\"matplotlib.pyplot.csd\"><code>csd()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.csd\" title=\"matplotlib.pyplot.csd\"><code>csd()</code></a> plots the spectral density between two signals.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.quiver\"><code>matplotlib.pyplot.quiver(*args, **kw)</code></dt> <dd>\n<p>Plot a 2-D field of arrows.</p> <p>call signatures:</p> <pre data-language=\"python\">quiver(U, V, **kw)\nquiver(U, V, C, **kw)\nquiver(X, Y, U, V, **kw)\nquiver(X, Y, U, V, C, **kw)\n</pre> <p>Arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>X</em>, <em>Y</em>:</dt> <dd>The x and y coordinates of the arrow locations (default is tail of arrow; see <em>pivot</em> kwarg)</dd> <dt>\n<em>U</em>, <em>V</em>:</dt> <dd>Give the x and y components of the arrow vectors</dd> <dt>\n<em>C</em>:</dt> <dd>An optional array used to map colors to the arrows</dd> </dl> </div>\n</blockquote> <p>All arguments may be 1-D or 2-D arrays or sequences. If <em>X</em> and <em>Y</em> are absent, they will be generated as a uniform grid. If <em>U</em> and <em>V</em> are 2-D arrays but <em>X</em> and <em>Y</em> are 1-D, and if <code>len(X)</code> and <code>len(Y)</code> match the column and row dimensions of <em>U</em>, then <em>X</em> and <em>Y</em> will be expanded with <code>numpy.meshgrid()</code>.</p> <p><em>U</em>, <em>V</em>, <em>C</em> may be masked arrays, but masked <em>X</em>, <em>Y</em> are not supported at present.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>units</em>: [ ‘width’ | ‘height’ | ‘dots’ | ‘inches’ | ‘x’ | ‘y’ | ‘xy’ ]</dt> <dd>\n<p class=\"first\">Arrow units; the arrow dimensions <em>except for length</em> are in multiples of this unit.</p> <ul class=\"simple\"> <li>‘width’ or ‘height’: the width or height of the axes</li> <li>‘dots’ or ‘inches’: pixels or inches, based on the figure dpi</li> <li>‘x’, ‘y’, or ‘xy’: <em>X</em>, <em>Y</em>, or sqrt(X^2+Y^2) data units</li> </ul> <p class=\"last\">The arrows scale differently depending on the units. For ‘x’ or ‘y’, the arrows get larger as one zooms in; for other units, the arrow size is independent of the zoom state. For ‘width or ‘height’, the arrow size increases with the width and height of the axes, respectively, when the window is resized; for ‘dots’ or ‘inches’, resizing does not change the arrows.</p> </dd> <dt>\n<em>angles</em>: [ ‘uv’ | ‘xy’ | array ]</dt> <dd>With the default ‘uv’, the arrow axis aspect ratio is 1, so that if <em>U*==*V</em> the orientation of the arrow on the plot is 45 degrees CCW from the horizontal axis (positive to the right). With ‘xy’, the arrow points from (x,y) to (x+u, y+v). Use this for plotting a gradient field, for example. Alternatively, arbitrary angles may be specified as an array of values in degrees, CCW from the horizontal axis. Note: inverting a data axis will correspondingly invert the arrows <em>only</em> with <code>angles='xy'</code>.</dd> <dt>\n<em>scale</em>: [ <em>None</em> | float ]</dt> <dd>Data units per arrow length unit, e.g., m/s per plot width; a smaller scale parameter makes the arrow longer. If <em>None</em>, a simple autoscaling algorithm is used, based on the average vector length and the number of vectors. The arrow length unit is given by the <em>scale_units</em> parameter</dd> <dt>\n<em>scale_units</em>: <em>None</em>, or any of the <em>units</em> options.</dt> <dd>\n<p class=\"first\">For example, if <em>scale_units</em> is ‘inches’, <em>scale</em> is 2.0, and <code>(u,v) = (1,0)</code>, then the vector will be 0.5 inches long. If <em>scale_units</em> is ‘width’, then the vector will be half the width of the axes.</p> <p class=\"last\">If <em>scale_units</em> is ‘x’ then the vector will be 0.5 x-axis units. To plot vectors in the x-y plane, with u and v having the same units as x and y, use “angles=’xy’, scale_units=’xy’, scale=1”.</p> </dd> <dt>\n<em>width</em>:</dt> <dd>Shaft width in arrow units; default depends on choice of units, above, and number of vectors; a typical starting value is about 0.005 times the width of the plot.</dd> <dt>\n<em>headwidth</em>: scalar</dt> <dd>Head width as multiple of shaft width, default is 3</dd> <dt>\n<em>headlength</em>: scalar</dt> <dd>Head length as multiple of shaft width, default is 5</dd> <dt>\n<em>headaxislength</em>: scalar</dt> <dd>Head length at shaft intersection, default is 4.5</dd> <dt>\n<em>minshaft</em>: scalar</dt> <dd>Length below which arrow scales, in units of head length. Do not set this to less than 1, or small arrows will look terrible! Default is 1</dd> <dt>\n<em>minlength</em>: scalar</dt> <dd>Minimum length as a multiple of shaft width; if an arrow length is less than this, plot a dot (hexagon) of this diameter instead. Default is 1.</dd> <dt>\n<em>pivot</em>: [ ‘tail’ | ‘mid’ | ‘middle’ | ‘tip’ ]</dt> <dd>The part of the arrow that is at the grid point; the arrow rotates about this point, hence the name <em>pivot</em>.</dd> <dt>\n<em>color</em>: [ color | color sequence ]</dt> <dd>This is a synonym for the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> facecolor kwarg. If <em>C</em> has been set, <em>color</em> has no effect.</dd> </dl> </div>\n</blockquote> <p>The defaults give a slightly swept-back arrow; to make the head a triangle, make <em>headaxislength</em> the same as <em>headlength</em>. To make the arrow more pointed, reduce <em>headwidth</em> or increase <em>headlength</em> and <em>headaxislength</em>. To make the head smaller relative to the shaft, scale down all the head parameters. You will probably do best to leave minshaft alone.</p> <p>linewidths and edgecolors can be used to customize the arrow outlines. Additional <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a> keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"39%\"> <col width=\"61%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_alpha\" title=\"matplotlib.collections.Collection.set_alpha\"><code>alpha</code></a></td> <td>float or None</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_antialiased\" title=\"matplotlib.collections.Collection.set_antialiased\"><code>antialiased</code></a> or antialiaseds</td> <td>Boolean or sequence of booleans</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_array\" title=\"matplotlib.cm.ScalarMappable.set_array\"><code>array</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_clim\" title=\"matplotlib.cm.ScalarMappable.set_clim\"><code>clim</code></a></td> <td>a length 2 sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_cmap\" title=\"matplotlib.cm.ScalarMappable.set_cmap\"><code>cmap</code></a></td> <td>a colormap or registered colormap name</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_color\" title=\"matplotlib.collections.Collection.set_color\"><code>color</code></a></td> <td>matplotlib color arg or sequence of rgba tuples</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_edgecolor\" title=\"matplotlib.collections.Collection.set_edgecolor\"><code>edgecolor</code></a> or edgecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_facecolor\" title=\"matplotlib.collections.Collection.set_facecolor\"><code>facecolor</code></a> or facecolors</td> <td>matplotlib color spec or sequence of specs</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_hatch\" title=\"matplotlib.collections.Collection.set_hatch\"><code>hatch</code></a></td> <td>[ ‘/’ | ‘\\’ | ‘|’ | ‘-‘ | ‘+’ | ‘x’ | ‘o’ | ‘O’ | ‘.’ | ‘*’ ]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linestyle\" title=\"matplotlib.collections.Collection.set_linestyle\"><code>linestyle</code></a> or linestyles or dashes</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_linewidth\" title=\"matplotlib.collections.Collection.set_linewidth\"><code>linewidth</code></a> or linewidths or lw</td> <td>float or sequence of floats</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"cm_api#matplotlib.cm.ScalarMappable.set_norm\" title=\"matplotlib.cm.ScalarMappable.set_norm\"><code>norm</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offset_position\" title=\"matplotlib.collections.Collection.set_offset_position\"><code>offset_position</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_offsets\" title=\"matplotlib.collections.Collection.set_offsets\"><code>offsets</code></a></td> <td>float or sequence of floats</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_pickradius\" title=\"matplotlib.collections.Collection.set_pickradius\"><code>pickradius</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection.set_urls\" title=\"matplotlib.collections.Collection.set_urls\"><code>urls</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.quiverkey\"><code>matplotlib.pyplot.quiverkey(*args, **kw)</code></dt> <dd>\n<p>Add a key to a quiver plot.</p> <p>Call signature:</p> <pre data-language=\"python\">quiverkey(Q, X, Y, U, label, **kw)\n</pre> <p>Arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Q</em>:</dt> <dd>The Quiver instance returned by a call to quiver.</dd> <dt>\n<em>X</em>, <em>Y</em>:</dt> <dd>The location of the key; additional explanation follows.</dd> <dt>\n<em>U</em>:</dt> <dd>The length of the key</dd> <dt>\n<em>label</em>:</dt> <dd>A string with the length and units of the key</dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>coordinates</em> = [ ‘axes’ | ‘figure’ | ‘data’ | ‘inches’ ]</dt> <dd>Coordinate system and units for <em>X</em>, <em>Y</em>: ‘axes’ and ‘figure’ are normalized coordinate systems with 0,0 in the lower left and 1,1 in the upper right; ‘data’ are the axes data coordinates (used for the locations of the vectors in the quiver plot itself); ‘inches’ is position in the figure in inches, with 0,0 at the lower left corner.</dd> <dt>\n<em>color</em>:</dt> <dd>overrides face and edge colors from <em>Q</em>.</dd> <dt>\n<em>labelpos</em> = [ ‘N’ | ‘S’ | ‘E’ | ‘W’ ]</dt> <dd>Position the label above, below, to the right, to the left of the arrow, respectively.</dd> <dt>\n<em>labelsep</em>:</dt> <dd>Distance in inches between the arrow and the label. Default is 0.1</dd> <dt>\n<em>labelcolor</em>:</dt> <dd>defaults to default <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> color.</dd> <dt>\n<em>fontproperties</em>:</dt> <dd>A dictionary with keyword arguments accepted by the <a class=\"reference internal\" href=\"font_manager_api#matplotlib.font_manager.FontProperties\" title=\"matplotlib.font_manager.FontProperties\"><code>FontProperties</code></a> initializer: <em>family</em>, <em>style</em>, <em>variant</em>, <em>size</em>, <em>weight</em>\n</dd> </dl> </div>\n</blockquote> <p>Any additional keyword arguments are used to override vector properties taken from <em>Q</em>.</p> <p>The positioning of the key depends on <em>X</em>, <em>Y</em>, <em>coordinates</em>, and <em>labelpos</em>. If <em>labelpos</em> is ‘N’ or ‘S’, <em>X</em>, <em>Y</em> give the position of the middle of the key arrow. If <em>labelpos</em> is ‘E’, <em>X</em>, <em>Y</em> positions the head, and if <em>labelpos</em> is ‘W’, <em>X</em>, <em>Y</em> positions the tail; in either of these two cases, <em>X</em>, <em>Y</em> is somewhere in the middle of the arrow+label key object.</p> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.rc\"><code>matplotlib.pyplot.rc(*args, **kwargs)</code></dt> <dd>\n<p>Set the current rc params. Group is the grouping for the rc, e.g., for <code>lines.linewidth</code> the group is <code>lines</code>, for <code>axes.facecolor</code>, the group is <code>axes</code>, and so on. Group may also be a list or tuple of group names, e.g., (<em>xtick</em>, <em>ytick</em>). <em>kwargs</em> is a dictionary attribute name/value pairs, e.g.,:</p> <pre data-language=\"python\">rc('lines', linewidth=2, color='r')\n</pre> <p>sets the current rc params and is equivalent to:</p> <pre data-language=\"python\">rcParams['lines.linewidth'] = 2\nrcParams['lines.color'] = 'r'\n</pre> <p>The following aliases are available to save typing for interactive users:</p> <table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Alias</th> <th class=\"head\">Property</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td>‘lw’</td> <td>‘linewidth’</td> </tr> <tr class=\"row-odd\">\n<td>‘ls’</td> <td>‘linestyle’</td> </tr> <tr class=\"row-even\">\n<td>‘c’</td> <td>‘color’</td> </tr> <tr class=\"row-odd\">\n<td>‘fc’</td> <td>‘facecolor’</td> </tr> <tr class=\"row-even\">\n<td>‘ec’</td> <td>‘edgecolor’</td> </tr> <tr class=\"row-odd\">\n<td>‘mew’</td> <td>‘markeredgewidth’</td> </tr> <tr class=\"row-even\">\n<td>‘aa’</td> <td>‘antialiased’</td> </tr> </tbody> </table> <p>Thus you could abbreviate the above rc command as:</p> <pre data-language=\"python\">rc('lines', lw=2, c='r')\n</pre> <p>Note you can use python’s kwargs dictionary facility to store dictionaries of default parameters. e.g., you can customize the font rc as follows:</p> <pre data-language=\"python\">font = {'family' : 'monospace',\n        'weight' : 'bold',\n        'size'   : 'larger'}\n\nrc('font', **font)  # pass in the font dict as kwargs\n</pre> <p>This enables you to easily switch between several configurations. Use <a class=\"reference internal\" href=\"#matplotlib.pyplot.rcdefaults\" title=\"matplotlib.pyplot.rcdefaults\"><code>rcdefaults()</code></a> to restore the default rc params after changes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.rc_context\"><code>matplotlib.pyplot.rc_context(rc=None, fname=None)</code></dt> <dd>\n<p>Return a context manager for managing rc settings.</p> <p>This allows one to do:</p> <pre data-language=\"python\">with mpl.rc_context(fname='screen.rc'):\n    plt.plot(x, a)\n    with mpl.rc_context(fname='print.rc'):\n        plt.plot(x, b)\n    plt.plot(x, c)\n</pre> <p>The ‘a’ vs ‘x’ and ‘c’ vs ‘x’ plots would have settings from ‘screen.rc’, while the ‘b’ vs ‘x’ plot would have settings from ‘print.rc’.</p> <p>A dictionary can also be passed to the context manager:</p> <pre data-language=\"python\">with mpl.rc_context(rc={'text.usetex': True}, fname='screen.rc'):\n    plt.plot(x, a)\n</pre> <p>The ‘rc’ dictionary takes precedence over the settings loaded from ‘fname’. Passing a dictionary only is also valid.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.rcdefaults\"><code>matplotlib.pyplot.rcdefaults()</code></dt> <dd>\n<p>Restore the default rc params. These are not the params loaded by the rc file, but mpl’s internal params. See rc_file_defaults for reloading the default params from the rc file</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.rgrids\"><code>matplotlib.pyplot.rgrids(*args, **kwargs)</code></dt> <dd>\n<p>Get or set the radial gridlines on a polar plot.</p> <p>call signatures:</p> <pre data-language=\"python\">lines, labels = rgrids()\nlines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs)\n</pre> <p>When called with no arguments, <code>rgrid()</code> simply returns the tuple (<em>lines</em>, <em>labels</em>), where <em>lines</em> is an array of radial gridlines (<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instances) and <em>labels</em> is an array of tick labels (<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances). When called with arguments, the labels will appear at the specified radial distances and angles.</p> <p><em>labels</em>, if not <em>None</em>, is a len(<em>radii</em>) list of strings of the labels to use at each angle.</p> <p>If <em>labels</em> is None, the rformatter will be used</p> <p>Examples:</p> <pre data-language=\"python\"># set the locations of the radial gridlines and labels\nlines, labels = rgrids( (0.25, 0.5, 1.0) )\n\n# set the locations and labels of the radial gridlines and labels\nlines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' )\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.savefig\"><code>matplotlib.pyplot.savefig(*args, **kwargs)</code></dt> <dd>\n<p>Save the current figure.</p> <p>Call signature:</p> <pre data-language=\"python\">savefig(fname, dpi=None, facecolor='w', edgecolor='w',\n        orientation='portrait', papertype=None, format=None,\n        transparent=False, bbox_inches=None, pad_inches=0.1,\n        frameon=None)\n</pre> <p>The output formats available depend on the backend being used.</p> <p>Arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>fname</em>:</dt> <dd>\n<p class=\"first\">A string containing a path to a filename, or a Python file-like object, or possibly some backend-dependent object such as <a class=\"reference internal\" href=\"backend_pdf_api#matplotlib.backends.backend_pdf.PdfPages\" title=\"matplotlib.backends.backend_pdf.PdfPages\"><code>PdfPages</code></a>.</p> <p>If <em>format</em> is <em>None</em> and <em>fname</em> is a string, the output format is deduced from the extension of the filename. If the filename has no extension, the value of the rc parameter <code>savefig.format</code> is used.</p> <p class=\"last\">If <em>fname</em> is not a string, remember to specify <em>format</em> to ensure that the correct backend is used.</p> </dd> </dl> </div>\n</blockquote> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>dpi</em>: [ <em>None</em> | <code>scalar &gt; 0</code> | ‘figure’]</dt> <dd>The resolution in dots per inch. If <em>None</em> it will default to the value <code>savefig.dpi</code> in the matplotlibrc file. If ‘figure’ it will set the dpi to be the value of the figure.</dd> <dt>\n<em>facecolor</em>, <em>edgecolor</em>:</dt> <dd>the colors of the figure rectangle</dd> <dt>\n<em>orientation</em>: [ ‘landscape’ | ‘portrait’ ]</dt> <dd>not supported on all backends; currently only on postscript output</dd> <dt>\n<em>papertype</em>:</dt> <dd>One of ‘letter’, ‘legal’, ‘executive’, ‘ledger’, ‘a0’ through ‘a10’, ‘b0’ through ‘b10’. Only supported for postscript output.</dd> <dt>\n<em>format</em>:</dt> <dd>One of the file extensions supported by the active backend. Most backends support png, pdf, ps, eps and svg.</dd> <dt>\n<em>transparent</em>:</dt> <dd>If <em>True</em>, the axes patches will all be transparent; the figure patch will also be transparent unless facecolor and/or edgecolor are specified via kwargs. This is useful, for example, for displaying a plot on top of a colored background on a web page. The transparency of these patches will be restored to their original values upon exit of this function.</dd> <dt>\n<em>frameon</em>:</dt> <dd>If <em>True</em>, the figure patch will be colored, if <em>False</em>, the figure background will be transparent. If not provided, the rcParam ‘savefig.frameon’ will be used.</dd> <dt>\n<em>bbox_inches</em>:</dt> <dd>Bbox in inches. Only the given portion of the figure is saved. If ‘tight’, try to figure out the tight bbox of the figure.</dd> <dt>\n<em>pad_inches</em>:</dt> <dd>Amount of padding around the figure when bbox_inches is ‘tight’.</dd> <dt>\n<em>bbox_extra_artists</em>:</dt> <dd>A list of extra artists that will be considered when the tight bbox is calculated.</dd> </dl> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.sca\"><code>matplotlib.pyplot.sca(ax)</code></dt> <dd>\n<p>Set the current Axes instance to <em>ax</em>.</p> <p>The current Figure is updated to the parent of <em>ax</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.scatter\"><code>matplotlib.pyplot.scatter(x, y, s=20, c=None, marker='o', cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Make a scatter plot of x vs y, where x and y are sequence like objects of the same lengths.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : array_like, shape (n, )</p> <blockquote> <div>\n<p>Input data</p> </div>\n</blockquote> <p><strong>s</strong> : scalar or array_like, shape (n, ), optional, default: 20</p> <blockquote> <div>\n<p>size in points^2.</p> </div>\n</blockquote> <p><strong>c</strong> : color or sequence of color, optional, default</p> <blockquote> <div>\n<p><code>c</code> can be a single color format string, or a sequence of color specifications of length <code>N</code>, or a sequence of <code>N</code> numbers to be mapped to colors using the <code>cmap</code> and <code>norm</code> specified via kwargs (see below). Note that <code>c</code> should not be a single numeric RGB or RGBA sequence because that is indistinguishable from an array of values to be colormapped. <code>c</code> can be a 2-D array in which the rows are RGB or RGBA, however, including the case of a single row to specify the same color for all points.</p> </div>\n</blockquote> <p><strong>marker</strong> : <a class=\"reference internal\" href=\"markers_api#matplotlib.markers.MarkerStyle\" title=\"matplotlib.markers.MarkerStyle\"><code>MarkerStyle</code></a>, optional, default: ‘o’</p> <blockquote> <div>\n<p>See <a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>markers</code></a> for more information on the different styles of markers scatter supports. <code>marker</code> can be either an instance of the class or the text shorthand for a particular marker.</p> </div>\n</blockquote> <p><strong>cmap</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a>, optional, default: None</p> <blockquote> <div>\n<p>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or registered name. <code>cmap</code> is only used if <code>c</code> is an array of floats. If None, defaults to rc <code>image.cmap</code>.</p> </div>\n</blockquote> <p><strong>norm</strong> : <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a>, optional, default: None</p> <blockquote> <div>\n<p>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a> instance is used to scale luminance data to 0, 1. <code>norm</code> is only used if <code>c</code> is an array of floats. If <code>None</code>, use the default <code>normalize()</code>.</p> </div>\n</blockquote> <p><strong>vmin, vmax</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p><code>vmin</code> and <code>vmax</code> are used in conjunction with <code>norm</code> to normalize luminance data. If either are <code>None</code>, the min and max of the color array is used. Note if you pass a <code>norm</code> instance, your settings for <code>vmin</code> and <code>vmax</code> will be ignored.</p> </div>\n</blockquote> <p><strong>alpha</strong> : scalar, optional, default: None</p> <blockquote> <div>\n<p>The alpha blending value, between 0 (transparent) and 1 (opaque)</p> </div>\n</blockquote> <p><strong>linewidths</strong> : scalar or array_like, optional, default: None</p> <blockquote> <div>\n<p>If None, defaults to (lines.linewidth,).</p> </div>\n</blockquote> <p><strong>edgecolors</strong> : color or sequence of color, optional, default: None</p> <blockquote> <div>\n<p>If None, defaults to (patch.edgecolor). If ‘face’, the edge color will always be the same as the face color. If it is ‘none’, the patch boundary will not be drawn. For non-filled markers, the <code>edgecolors</code> kwarg is ignored; color is determined by <code>c</code>.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>paths</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PathCollection\" title=\"matplotlib.collections.PathCollection\"><code>PathCollection</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.Collection\" title=\"matplotlib.collections.Collection\"><code>Collection</code></a> properties</p> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘facecolor’, ‘s’, ‘color’, ‘c’, ‘edgecolors’, ‘linewidths’, ‘x’, ‘facecolors’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/shapes_and_collections/scatter_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/shapes_and_collections/scatter_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/shapes_and_collections/scatter_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/shapes_and_collections/scatter_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/scatter_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/scatter_demo.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.sci\"><code>matplotlib.pyplot.sci(im)</code></dt> <dd>\n<p>Set the current image. This image will be the target of colormap commands like <a class=\"reference internal\" href=\"#matplotlib.pyplot.jet\" title=\"matplotlib.pyplot.jet\"><code>jet()</code></a>, <a class=\"reference internal\" href=\"#matplotlib.pyplot.hot\" title=\"matplotlib.pyplot.hot\"><code>hot()</code></a> or <a class=\"reference internal\" href=\"#matplotlib.pyplot.clim\" title=\"matplotlib.pyplot.clim\"><code>clim()</code></a>). The current image is an attribute of the current axes.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.semilogx\"><code>matplotlib.pyplot.semilogx(*args, **kwargs)</code></dt> <dd>\n<p>Make a plot with log scaling on the <em>x</em> axis.</p> <p>Call signature:</p> <pre data-language=\"python\">semilogx(*args, **kwargs)\n</pre> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.semilogx\" title=\"matplotlib.pyplot.semilogx\"><code>semilogx()</code></a> supports all the keyword arguments of <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a> and <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_xscale\" title=\"matplotlib.axes.Axes.set_xscale\"><code>matplotlib.axes.Axes.set_xscale()</code></a>.</p> <p>Notable keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>: scalar &gt; 1</dt> <dd>Base of the <em>x</em> logarithm</dd> <dt>\n<em>subsx</em>: [ <em>None</em> | sequence ]</dt> <dd>The location of the minor xticks; <em>None</em> defaults to autosubs, which depend on the number of decades in the plot; see <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_xscale\" title=\"matplotlib.axes.Axes.set_xscale\"><code>set_xscale()</code></a> for details.</dd> <dt>\n<em>nonposx</em>: [ ‘mask’ | ‘clip’ ]</dt> <dd>Non-positive values in <em>x</em> can be masked as invalid, or clipped to a very small positive number</dd> </dl> </div>\n</blockquote> <p>The remaining valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.loglog\" title=\"matplotlib.pyplot.loglog\"><code>loglog()</code></a></dt> <dd>For example code and figure</dd> </dl> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.semilogy\"><code>matplotlib.pyplot.semilogy(*args, **kwargs)</code></dt> <dd>\n<p>Make a plot with log scaling on the <em>y</em> axis.</p> <p>call signature:</p> <pre data-language=\"python\">semilogy(*args, **kwargs)\n</pre> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.semilogy\" title=\"matplotlib.pyplot.semilogy\"><code>semilogy()</code></a> supports all the keyword arguments of <code>plot()</code> and <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_yscale\" title=\"matplotlib.axes.Axes.set_yscale\"><code>matplotlib.axes.Axes.set_yscale()</code></a>.</p> <p>Notable keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basey</em>: scalar &gt; 1</dt> <dd>Base of the <em>y</em> logarithm</dd> <dt>\n<em>subsy</em>: [ <em>None</em> | sequence ]</dt> <dd>The location of the minor yticks; <em>None</em> defaults to autosubs, which depend on the number of decades in the plot; see <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.set_yscale\" title=\"matplotlib.axes.Axes.set_yscale\"><code>set_yscale()</code></a> for details.</dd> <dt>\n<em>nonposy</em>: [ ‘mask’ | ‘clip’ ]</dt> <dd>Non-positive values in <em>y</em> can be masked as invalid, or clipped to a very small positive number</dd> </dl> </div>\n</blockquote> <p>The remaining valid kwargs are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"37%\"> <col width=\"63%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_antialiased\" title=\"matplotlib.lines.Line2D.set_antialiased\"><code>antialiased</code></a> or aa</td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_color\" title=\"matplotlib.lines.Line2D.set_color\"><code>color</code></a> or c</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_capstyle\" title=\"matplotlib.lines.Line2D.set_dash_capstyle\"><code>dash_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dash_joinstyle\" title=\"matplotlib.lines.Line2D.set_dash_joinstyle\"><code>dash_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_dashes\" title=\"matplotlib.lines.Line2D.set_dashes\"><code>dashes</code></a></td> <td>sequence of on/off ink in points</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_drawstyle\" title=\"matplotlib.lines.Line2D.set_drawstyle\"><code>drawstyle</code></a></td> <td>[‘default’ | ‘steps’ | ‘steps-pre’ | ‘steps-mid’ | ‘steps-post’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_fillstyle\" title=\"matplotlib.lines.Line2D.set_fillstyle\"><code>fillstyle</code></a></td> <td>[‘full’ | ‘left’ | ‘right’ | ‘bottom’ | ‘top’ | ‘none’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linestyle\" title=\"matplotlib.lines.Line2D.set_linestyle\"><code>linestyle</code></a> or ls</td> <td>[‘solid’ | ‘dashed’, ‘dashdot’, ‘dotted’ | (offset, on-off-dash-seq) | <code>'-'</code> | <code>'--'</code> | <code>'-.'</code> | <code>':'</code> | <code>'None'</code> | <code>' '</code> | <code>''</code>]</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_linewidth\" title=\"matplotlib.lines.Line2D.set_linewidth\"><code>linewidth</code></a> or lw</td> <td>float value in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_marker\" title=\"matplotlib.lines.Line2D.set_marker\"><code>marker</code></a></td> <td><a class=\"reference internal\" href=\"markers_api#module-matplotlib.markers\" title=\"matplotlib.markers\"><code>A valid marker style</code></a></td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgecolor\" title=\"matplotlib.lines.Line2D.set_markeredgecolor\"><code>markeredgecolor</code></a> or mec</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markeredgewidth\" title=\"matplotlib.lines.Line2D.set_markeredgewidth\"><code>markeredgewidth</code></a> or mew</td> <td>float value in points</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecolor\" title=\"matplotlib.lines.Line2D.set_markerfacecolor\"><code>markerfacecolor</code></a> or mfc</td> <td>any matplotlib color</td> </tr> <tr class=\"row-even\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markerfacecoloralt\" title=\"matplotlib.lines.Line2D.set_markerfacecoloralt\"><code>markerfacecoloralt</code></a> or mfcalt</td> <td>any matplotlib color</td> </tr> <tr class=\"row-odd\">\n<td>\n<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markersize\" title=\"matplotlib.lines.Line2D.set_markersize\"><code>markersize</code></a> or ms</td> <td>float</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_markevery\" title=\"matplotlib.lines.Line2D.set_markevery\"><code>markevery</code></a></td> <td>[None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_picker\" title=\"matplotlib.lines.Line2D.set_picker\"><code>picker</code></a></td> <td>float distance in points or callable pick function <code>fn(artist, event)</code>\n</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_pickradius\" title=\"matplotlib.lines.Line2D.set_pickradius\"><code>pickradius</code></a></td> <td>float distance in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_capstyle\" title=\"matplotlib.lines.Line2D.set_solid_capstyle\"><code>solid_capstyle</code></a></td> <td>[‘butt’ | ‘round’ | ‘projecting’]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_solid_joinstyle\" title=\"matplotlib.lines.Line2D.set_solid_joinstyle\"><code>solid_joinstyle</code></a></td> <td>[‘miter’ | ‘round’ | ‘bevel’]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_transform\" title=\"matplotlib.lines.Line2D.set_transform\"><code>transform</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>matplotlib.transforms.Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_xdata\" title=\"matplotlib.lines.Line2D.set_xdata\"><code>xdata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D.set_ydata\" title=\"matplotlib.lines.Line2D.set_ydata\"><code>ydata</code></a></td> <td>1D array</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.loglog\" title=\"matplotlib.pyplot.loglog\"><code>loglog()</code></a></dt> <dd>For example code and figure</dd> </dl> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.set_cmap\"><code>matplotlib.pyplot.set_cmap(cmap)</code></dt> <dd>\n<p>Set the default colormap. Applies to the current image if any. See help(colormaps) for more information.</p> <p><em>cmap</em> must be a <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance, or the name of a registered colormap.</p> <p>See <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.register_cmap\" title=\"matplotlib.cm.register_cmap\"><code>matplotlib.cm.register_cmap()</code></a> and <a class=\"reference internal\" href=\"cm_api#matplotlib.cm.get_cmap\" title=\"matplotlib.cm.get_cmap\"><code>matplotlib.cm.get_cmap()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.setp\"><code>matplotlib.pyplot.setp(*args, **kwargs)</code></dt> <dd>\n<p>Set a property on an artist object.</p> <p>matplotlib supports the use of <a class=\"reference internal\" href=\"#matplotlib.pyplot.setp\" title=\"matplotlib.pyplot.setp\"><code>setp()</code></a> (“set property”) and <code>getp()</code> to set and get object properties, as well as to do introspection on the object. For example, to set the linestyle of a line to be dashed, you can do:</p> <pre data-language=\"python\">&gt;&gt;&gt; line, = plot([1,2,3])\n&gt;&gt;&gt; setp(line, linestyle='--')\n</pre> <p>If you want to know the valid types of arguments, you can provide the name of the property you want to set without a value:</p> <pre data-language=\"python\">&gt;&gt;&gt; setp(line, 'linestyle')\n    linestyle: [ '-' | '--' | '-.' | ':' | 'steps' | 'None' ]\n</pre> <p>If you want to see all the properties that can be set, and their possible values, you can do:</p> <pre data-language=\"python\">&gt;&gt;&gt; setp(line)\n    ... long output listing omitted\n</pre> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.setp\" title=\"matplotlib.pyplot.setp\"><code>setp()</code></a> operates on a single instance or a list of instances. If you are in query mode introspecting the possible values, only the first instance in the sequence is used. When actually setting values, all the instances will be set. e.g., suppose you have a list of two lines, the following will make both lines thicker and red:</p> <pre data-language=\"python\">&gt;&gt;&gt; x = arange(0,1.0,0.01)\n&gt;&gt;&gt; y1 = sin(2*pi*x)\n&gt;&gt;&gt; y2 = sin(4*pi*x)\n&gt;&gt;&gt; lines = plot(x, y1, x, y2)\n&gt;&gt;&gt; setp(lines, linewidth=2, color='r')\n</pre> <p><a class=\"reference internal\" href=\"#matplotlib.pyplot.setp\" title=\"matplotlib.pyplot.setp\"><code>setp()</code></a> works with the MATLAB style string/value pairs or with python kwargs. For example, the following are equivalent:</p> <pre data-language=\"python\">&gt;&gt;&gt; setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style\n&gt;&gt;&gt; setp(lines, linewidth=2, color='r')        # python style\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.show\"><code>matplotlib.pyplot.show(*args, **kw)</code></dt> <dd>\n<p>Display a figure. When running in ipython with its pylab mode, display all figures and return to the ipython prompt.</p> <p>In non-interactive mode, display all figures and block until the figures have been closed; in interactive mode it has no effect unless figures were created prior to a change from non-interactive to interactive mode (not recommended). In that case it displays the figures but does not block.</p> <p>A single experimental keyword argument, <em>block</em>, may be set to True or False to override the blocking behavior described above.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.specgram\"><code>matplotlib.pyplot.specgram(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot a spectrogram.</p> <p>Call signature:</p> <pre data-language=\"python\">specgram(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,\n         window=mlab.window_hanning, noverlap=128,\n         cmap=None, xextent=None, pad_to=None, sides='default',\n         scale_by_freq=None, mode='default', scale='default',\n         **kwargs)\n</pre> <p>Compute and plot a spectrogram of data in <em>x</em>. Data are split into <em>NFFT</em> length segments and the spectrum of each section is computed. The windowing function <em>window</em> is applied to each segment, and the amount of overlap of each segment is specified with <em>noverlap</em>. The spectrogram is plotted as a colormap (using imshow).</p> <dl class=\"docutils\"> <dt>\n<em>x</em>: 1-D array or sequence</dt> <dd>Array or sequence containing the data</dd> </dl> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>Fs</em>: scalar</dt> <dd>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</dd> <dt>\n<em>window</em>: callable or ndarray</dt> <dd>A function or a vector of length <em>NFFT</em>. To create window vectors see <code>window_hanning()</code>, <code>window_none()</code>, <code>numpy.blackman()</code>, <code>numpy.hamming()</code>, <code>numpy.bartlett()</code>, <code>scipy.signal()</code>, <code>scipy.signal.get_window()</code>, etc. The default is <code>window_hanning()</code>. If a function is passed as the argument, it must take a data segment as an argument and return the windowed version of the segment.</dd> <dt>\n<em>sides</em>: [ ‘default’ | ‘onesided’ | ‘twosided’ ]</dt> <dd>Specifies which sides of the spectrum to return. Default gives the default behavior, which returns one-sided for real data and both for complex data. ‘onesided’ forces the return of a one-sided spectrum, while ‘twosided’ forces two-sided.</dd> </dl> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>pad_to</em>: integer</dt> <dd>The number of points to which the data segment is padded when performing the FFT. This can be different from <em>NFFT</em>, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the <em>n</em> parameter in the call to fft(). The default is None, which sets <em>pad_to</em> equal to <em>NFFT</em>\n</dd> <dt>\n<em>NFFT</em>: integer</dt> <dd>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should <em>NOT</em> be used to get zero padding, or the scaling of the result will be incorrect. Use <em>pad_to</em> for this instead.</dd> <dt>\n<em>detrend</em>: [ ‘default’ | ‘constant’ | ‘mean’ | ‘linear’ | ‘none’] or</dt> <dd>\n<blockquote class=\"first\"> <div>callable</div>\n</blockquote> <p class=\"last\">The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the <em>detrend</em> parameter is a vector, in matplotlib is it a function. The <code>pylab</code> module defines <code>detrend_none()</code>, <code>detrend_mean()</code>, and <code>detrend_linear()</code>, but you can use a custom function as well. You can also use a string to choose one of the functions. ‘default’, ‘constant’, and ‘mean’ call <code>detrend_mean()</code>. ‘linear’ calls <code>detrend_linear()</code>. ‘none’ calls <code>detrend_none()</code>.</p> </dd> <dt>\n<em>scale_by_freq</em>: boolean</dt> <dd>\n<blockquote class=\"first\"> <div>Specifies whether the resulting density values should be scaled by the scaling frequency, which gives density in units of Hz^-1. This allows for integration over the returned frequency values. The default is True for MATLAB compatibility.</div>\n</blockquote> <dl class=\"last docutils\"> <dt>\n<em>mode</em>: [ ‘default’ | ‘psd’ | ‘magnitude’ | ‘angle’ | ‘phase’ ]</dt> <dd>What sort of spectrum to use. Default is ‘psd’. which takes the power spectral density. ‘complex’ returns the complex-valued frequency spectrum. ‘magnitude’ returns the magnitude spectrum. ‘angle’ returns the phase spectrum without unwrapping. ‘phase’ returns the phase spectrum with unwrapping.</dd> <dt>\n<em>noverlap</em>: integer</dt> <dd>The number of points of overlap between blocks. The default value is 128.</dd> <dt>\n<em>scale</em>: [ ‘default’ | ‘linear’ | ‘dB’ ]</dt> <dd>The scaling of the values in the <em>spec</em>. ‘linear’ is no scaling. ‘dB’ returns the values in dB scale. When <em>mode</em> is ‘psd’, this is dB power (10 * log10). Otherwise this is dB amplitude (20 * log10). ‘default’ is ‘dB’ if <em>mode</em> is ‘psd’ or ‘magnitude’ and ‘linear’ otherwise. This must be ‘linear’ if <em>mode</em> is ‘angle’ or ‘phase’.</dd> <dt>\n<em>Fc</em>: integer</dt> <dd>The center frequency of <em>x</em> (defaults to 0), which offsets the x extents of the plot to reflect the frequency range used when a signal is acquired and then filtered and downsampled to baseband.</dd> <dt>\n<em>cmap</em>:</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>matplotlib.colors.Colormap</code></a> instance; if <em>None</em>, use default determined by rc</dd> <dt>\n<em>xextent</em>:</dt> <dd>The image extent along the x-axis. xextent = (xmin,xmax) The default is (0,max(bins)), where bins is the return value from <a class=\"reference internal\" href=\"mlab_api#matplotlib.mlab.specgram\" title=\"matplotlib.mlab.specgram\"><code>specgram()</code></a>\n</dd> <dt>\n<em>kwargs</em>:</dt> <dd>Additional kwargs are passed on to imshow which makes the specgram image</dd> </dl> </dd> </dl> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><em>detrend</em> and <em>scale_by_freq</em> only apply when <em>mode</em> is set to ‘psd’</p> </div> <p>Returns the tuple (<em>spectrum</em>, <em>freqs</em>, <em>t</em>, <em>im</em>):</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>spectrum</em>: 2-D array</dt> <dd>columns are the periodograms of successive segments</dd> <dt>\n<em>freqs</em>: 1-D array</dt> <dd>The frequencies corresponding to the rows in <em>spectrum</em>\n</dd> <dt>\n<em>t</em>: 1-D array</dt> <dd>The times corresponding to midpoints of segments (i.e the columns in <em>spectrum</em>)</dd> <dt>\n<em>im</em>: instance of class <a class=\"reference internal\" href=\"image_api#matplotlib.image.AxesImage\" title=\"matplotlib.image.AxesImage\"><code>AxesImage</code></a>\n</dt> <dd>The image created by imshow containing the spectrogram</dd> </dl> </div>\n</blockquote> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/specgram_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/specgram_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/specgram_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/specgram_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/specgram_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/specgram_demo.png\"> </div> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.psd\" title=\"matplotlib.pyplot.psd\"><code>psd()</code></a></dt> <dd>\n<a class=\"reference internal\" href=\"#matplotlib.pyplot.psd\" title=\"matplotlib.pyplot.psd\"><code>psd()</code></a> differs in the default overlap; in returning the mean of the segment periodograms; in not returning times; and in generating a line plot instead of colormap.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.magnitude_spectrum\" title=\"matplotlib.pyplot.magnitude_spectrum\"><code>magnitude_spectrum()</code></a></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘magnitude’. Plots a line instead of a colormap.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.angle_spectrum\" title=\"matplotlib.pyplot.angle_spectrum\"><code>angle_spectrum()</code></a></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘angle’. Plots a line instead of a colormap.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.phase_spectrum\" title=\"matplotlib.pyplot.phase_spectrum\"><code>phase_spectrum()</code></a></dt> <dd>A single spectrum, similar to having a single segment when <em>mode</em> is ‘phase’. Plots a line instead of a colormap.</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.spectral\"><code>matplotlib.pyplot.spectral()</code></dt> <dd>\n<p>set the default colormap to spectral and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.spring\"><code>matplotlib.pyplot.spring()</code></dt> <dd>\n<p>set the default colormap to spring and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.spy\"><code>matplotlib.pyplot.spy(Z, precision=0, marker=None, markersize=None, aspect='equal', hold=None, **kwargs)</code></dt> <dd>\n<p>Plot the sparsity pattern on a 2-D array.</p> <p><code>spy(Z)</code> plots the sparsity pattern of the 2-D array <em>Z</em>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>Z</strong> : sparse array (n, m)</p> <blockquote> <div>\n<p>The array to be plotted.</p> </div>\n</blockquote> <p><strong>precision</strong> : float, optional, default: 0</p> <blockquote> <div>\n<p>If <em>precision</em> is 0, any non-zero value will be plotted; else, values of <img src=\"http://matplotlib.org/1.5.1/_images/mathmpl/math-102fd18c41.png\" style=\"position: relative; bottom: -7px\"> will be plotted.</p> <p>For <code>scipy.sparse.spmatrix</code> instances, there is a special case: if <em>precision</em> is ‘present’, any value present in the array will be plotted, even if it is identically zero.</p> </div>\n</blockquote> <p><strong>origin</strong> : [“upper”, “lower”], optional, default: “upper”</p> <blockquote> <div>\n<p>Place the [0,0] index of the array in the upper left or lower left corner of the axes.</p> </div>\n</blockquote> <p><strong>aspect</strong> : [‘auto’ | ‘equal’ | scalar], optional, default: “equal”</p> <blockquote> <div>\n<p>If ‘equal’, and <code>extent</code> is None, changes the axes aspect ratio to match that of the image. If <code>extent</code> is not <code>None</code>, the axes aspect ratio is changed to match that of the extent.</p> <p>If ‘auto’, changes the image aspect ratio to match that of the axes.</p> <p>If None, default to rc <code>image.aspect</code> value.</p> </div>\n</blockquote> <p><strong>Two plotting styles are available: image or marker. Both</strong></p> <p><strong>are available for full arrays, but only the marker style</strong></p> <p><strong>works for :class:`scipy.sparse.spmatrix` instances.</strong></p> <p><strong>If *marker* and *markersize* are *None*, an image will be</strong></p> <p><strong>returned and any remaining kwargs are passed to</strong></p> <p><strong>:func:`~matplotlib.pyplot.imshow`; else, a</strong></p> <p><strong>:class:`~matplotlib.lines.Line2D` object will be returned with</strong></p> <p><strong>the value of marker determining the marker type, and any</strong></p> <p><strong>remaining kwargs passed to the</strong></p> <p><strong>:meth:`~matplotlib.axes.Axes.plot` method.</strong></p> <p><strong>If *marker* and *markersize* are *None*, useful kwargs include:</strong></p> <p><strong>* *cmap*</strong></p> <p class=\"last\"><strong>* *alpha*</strong></p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>imshow</code></a></dt> <dd>for image options.</dd> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot</code></a></dt> <dd>for plotting options</dd> </dl> <p class=\"last\"><code>Additional</code></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.stackplot\"><code>matplotlib.pyplot.stackplot(x, *args, **kwargs)</code></dt> <dd>\n<p>Draws a stacked area plot.</p> <blockquote> <div>\n<p><em>x</em> : 1d array of dimension N</p> <dl class=\"docutils\"> <dt>\n<em>y</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2d array of dimension MxN, OR any number 1d arrays each of dimension</span>\n</dt> <dd>\n<p class=\"first\">1xN. The data is assumed to be unstacked. Each of the following calls is legal:</p> <pre data-language=\"python\">stackplot(x, y)               # where y is MxN\nstackplot(x, y1, y2, y3, y4)  # where y1, y2, y3, y4, are all 1xNm\n</pre> </dd> </dl> <p>Keyword arguments:</p> <dl class=\"docutils\"> <dt>\n<em>baseline</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[‘zero’, ‘sym’, ‘wiggle’, ‘weighted_wiggle’]</span>\n</dt> <dd>Method used to calculate the baseline. ‘zero’ is just a simple stacked plot. ‘sym’ is symmetric around zero and is sometimes called <code>ThemeRiver</code>. ‘wiggle’ minimizes the sum of the squared slopes. ‘weighted_wiggle’ does the same but weights to account for size of each layer. It is also called <code>Streamgraph</code>-layout. More details can be found at <a class=\"reference external\" href=\"http://www.leebyron.com/else/streamgraph/\">http://www.leebyron.com/else/streamgraph/</a>.</dd> </dl> <p><em>labels</em> : A list or tuple of labels to assign to each data series.</p> <dl class=\"docutils\"> <dt>\n<em>colors</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">A list or tuple of colors. These will be cycled through and</span>\n</dt> <dd>used to colour the stacked areas. All other keyword arguments are passed to <code>fill_between()</code>\n</dd> </dl> <p>Returns <em>r</em> : A list of <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>PolyCollection</code></a>, one for each element in the stacked area plot.</p> </div>\n</blockquote> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.stem\"><code>matplotlib.pyplot.stem(*args, **kwargs)</code></dt> <dd>\n<p>Create a stem plot.</p> <p>Call signatures:</p> <pre data-language=\"python\">stem(y, linefmt='b-', markerfmt='bo', basefmt='r-')\nstem(x, y, linefmt='b-', markerfmt='bo', basefmt='r-')\n</pre> <p>A stem plot plots vertical lines (using <em>linefmt</em>) at each <em>x</em> location from the baseline to <em>y</em>, and places a marker there using <em>markerfmt</em>. A horizontal line at 0 is is plotted using <em>basefmt</em>.</p> <p>If no <em>x</em> values are provided, the default is (0, 1, ..., len(y) - 1)</p> <p>Return value is a tuple (<em>markerline</em>, <em>stemlines</em>, <em>baseline</em>).</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\">This <a class=\"reference external\" href=\"http://www.mathworks.com/help/techdoc/ref/stem.html\">document</a> for details.</p> </div> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/stem_plot.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/stem_plot.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/stem_plot.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/stem_plot.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/stem_plot.png\" src=\"http://matplotlib.org/1.5.1/_images/stem_plot.png\"> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All positional and all keyword arguments.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.step\"><code>matplotlib.pyplot.step(x, y, *args, **kwargs)</code></dt> <dd>\n<p>Make a step plot.</p> <p>Call signature:</p> <pre data-language=\"python\">step(x, y, *args, **kwargs)\n</pre> <p>Additional keyword args to <a class=\"reference internal\" href=\"#matplotlib.pyplot.step\" title=\"matplotlib.pyplot.step\"><code>step()</code></a> are the same as those for <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot()</code></a>.</p> <p><em>x</em> and <em>y</em> must be 1-D sequences, and it is assumed, but not checked, that <em>x</em> is uniformly increasing.</p> <p>Keyword arguments:</p> <dl class=\"docutils\"> <dt>\n<em>where</em>: [ ‘pre’ | ‘post’ | ‘mid’ ]</dt> <dd>\n<p class=\"first\">If ‘pre’ (the default), the interval from x[i] to x[i+1] has level y[i+1].</p> <p>If ‘post’, that interval has level y[i].</p> <p class=\"last\">If ‘mid’, the jumps in <em>y</em> occur half-way between the <em>x</em>-values.</p> </dd> </dl> <p>Return value is a list of lines that were added.</p> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.streamplot\"><code>matplotlib.pyplot.streamplot(x, y, u, v, density=1, linewidth=None, color=None, cmap=None, norm=None, arrowsize=1, arrowstyle='-|&gt;', minlength=0.1, transform=None, zorder=1, start_points=None, hold=None, data=None)</code></dt> <dd>\n<p>Draws streamlines of a vector flow.</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em>, <em>y</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1d arrays</span>\n</dt> <dd>an <em>evenly spaced</em> grid.</dd> <dt>\n<em>u</em>, <em>v</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2d arrays</span>\n</dt> <dd>x and y-velocities. Number of rows should match length of y, and the number of columns should match x.</dd> <dt>\n<em>density</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or 2-tuple</span>\n</dt> <dd>Controls the closeness of streamlines. When <code>density = 1</code>, the domain is divided into a 30x30 grid—<em>density</em> linearly scales this grid. Each cell in the grid can have, at most, one traversing streamline. For different densities in each direction, use [density_x, density_y].</dd> <dt>\n<em>linewidth</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">numeric or 2d array</span>\n</dt> <dd>vary linewidth when given a 2d array with the same shape as velocities.</dd> <dt>\n<em>color</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">matplotlib color code, or 2d array</span>\n</dt> <dd>Streamline color. When given an array with the same shape as velocities, <em>color</em> values are converted to colors using <em>cmap</em>.</dd> <dt>\n<em>cmap</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a></span>\n</dt> <dd>Colormap used to plot streamlines and arrows. Only necessary when using an array input for <em>color</em>.</dd> <dt>\n<em>norm</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>Normalize</code></a></span>\n</dt> <dd>Normalize object used to scale luminance data to 0, 1. If None, stretch (min, max) to (0, 1). Only necessary when <em>color</em> is an array.</dd> <dt>\n<em>arrowsize</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>Factor scale arrow size.</dd> <dt>\n<em>arrowstyle</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span>\n</dt> <dd>Arrow style specification. See <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>FancyArrowPatch</code></a>.</dd> <dt>\n<em>minlength</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>Minimum length of streamline in axes coordinates.</dd> <dt>\n<em>start_points</em>: Nx2 array</dt> <dd>Coordinates of starting points for the streamlines. In data coordinates, the same as the <code>x</code> and <code>y</code> arrays.</dd> <dt>\n<em>zorder</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span>\n</dt> <dd>any number</dd> </dl> <p>Returns:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>stream_container</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">StreamplotSet</span>\n</dt> <dd>\n<p class=\"first\">Container object with attributes</p> <blockquote> <div>\n<ul class=\"simple\"> <li>lines: <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> of streamlines</li> <li>arrows: collection of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.FancyArrowPatch\" title=\"matplotlib.patches.FancyArrowPatch\"><code>matplotlib.patches.FancyArrowPatch</code></a> objects representing arrows half-way along stream lines.</li> </ul> </div>\n</blockquote> <p class=\"last\">This container will probably change in the future to allow changes to the colormap, alpha, etc. for both lines and arrows, but these changes should be backward compatible.</p> </dd> </dl> </div>\n</blockquote> </div>\n</blockquote> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.subplot\"><code>matplotlib.pyplot.subplot(*args, **kwargs)</code></dt> <dd>\n<p>Return a subplot axes positioned by the given grid definition.</p> <p>Typical call signature:</p> <pre data-language=\"python\">subplot(nrows, ncols, plot_number)\n</pre> <p>Where <em>nrows</em> and <em>ncols</em> are used to notionally split the figure into <code>nrows * ncols</code> sub-axes, and <em>plot_number</em> is used to identify the particular subplot that this function is to create within the notional grid. <em>plot_number</em> starts at 1, increments across rows first and has a maximum of <code>nrows * ncols</code>.</p> <p>In the case when <em>nrows</em>, <em>ncols</em> and <em>plot_number</em> are all less than 10, a convenience exists, such that the a 3 digit number can be given instead, where the hundreds represent <em>nrows</em>, the tens represent <em>ncols</em> and the units represent <em>plot_number</em>. For instance:</p> <pre data-language=\"python\">subplot(211)\n</pre> <p>produces a subaxes in a figure which represents the top plot (i.e. the first) in a 2 row by 1 column notional grid (no grid actually exists, but conceptually this is how the returned subplot has been positioned).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>Creating a new subplot with a position which is entirely inside a pre-existing axes will trigger the larger axes to be deleted:</p> <pre data-language=\"python\">import matplotlib.pyplot as plt\n# plot a line, implicitly creating a subplot(111)\nplt.plot([1,2,3])\n# now create a subplot which represents the top plot of a grid\n# with 2 rows and 1 column. Since this subplot will overlap the\n# first, the plot (and its axes) previously created, will be removed\nplt.subplot(211)\nplt.plot(range(12))\nplt.subplot(212, axisbg='y') # creates 2nd subplot with yellow background\n</pre> <p class=\"last\">If you do not want this behavior, use the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.add_subplot\" title=\"matplotlib.figure.Figure.add_subplot\"><code>add_subplot()</code></a> method or the <a class=\"reference internal\" href=\"#matplotlib.pyplot.axes\" title=\"matplotlib.pyplot.axes\"><code>axes()</code></a> function instead.</p> </div> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>axisbg</em>:</dt> <dd>The background color of the subplot, which can be any valid color specifier. See <a class=\"reference internal\" href=\"colors_api#module-matplotlib.colors\" title=\"matplotlib.colors\"><code>matplotlib.colors</code></a> for more information.</dd> <dt>\n<em>polar</em>:</dt> <dd>A boolean flag indicating whether the subplot plot should be a polar projection. Defaults to <em>False</em>.</dd> <dt>\n<em>projection</em>:</dt> <dd>A string giving the name of a custom projection to be used for the subplot. This projection must have been previously registered. See <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/add_new_projection.html#module-matplotlib.projections\" title=\"matplotlib.projections\"><code>matplotlib.projections</code></a>.</dd> </dl> </div>\n</blockquote> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.axes\" title=\"matplotlib.pyplot.axes\"><code>axes()</code></a></dt> <dd>For additional information on <a class=\"reference internal\" href=\"#matplotlib.pyplot.axes\" title=\"matplotlib.pyplot.axes\"><code>axes()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.pyplot.subplot\" title=\"matplotlib.pyplot.subplot\"><code>subplot()</code></a> keyword arguments.</dd> <dt><code>examples/pie_and_polar_charts/polar_scatter_demo.py</code></dt> <dd>For an example</dd> </dl> </div> <p><strong>Example:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/subplots_axes_and_figures/subplot_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/subplots_axes_and_figures/subplot_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/subplots_axes_and_figures/subplot_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/subplots_axes_and_figures/subplot_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/subplot_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/subplot_demo.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.subplot2grid\"><code>matplotlib.pyplot.subplot2grid(shape, loc, rowspan=1, colspan=1, **kwargs)</code></dt> <dd>\n<p>Create a subplot in a grid. The grid is specified by <em>shape</em>, at location of <em>loc</em>, spanning <em>rowspan</em>, <em>colspan</em> cells in each direction. The index for loc is 0-based.</p> <pre data-language=\"python\">subplot2grid(shape, loc, rowspan=1, colspan=1)\n</pre> <p>is identical to</p> <pre data-language=\"python\">gridspec=GridSpec(shape[0], shape[1])\nsubplotspec=gridspec.new_subplotspec(loc, rowspan, colspan)\nsubplot(subplotspec)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.subplot_tool\"><code>matplotlib.pyplot.subplot_tool(targetfig=None)</code></dt> <dd>\n<p>Launch a subplot tool window for a figure.</p> <p>A <a class=\"reference internal\" href=\"widgets_api#matplotlib.widgets.SubplotTool\" title=\"matplotlib.widgets.SubplotTool\"><code>matplotlib.widgets.SubplotTool</code></a> instance is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.subplots\"><code>matplotlib.pyplot.subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True, subplot_kw=None, gridspec_kw=None, **fig_kw)</code></dt> <dd>\n<p>Create a figure with a set of subplots already made.</p> <p>This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.</p> <p>Keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>nrows</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span>\n</dt> <dd>Number of rows of the subplot grid. Defaults to 1.</dd> <dt>\n<em>ncols</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span>\n</dt> <dd>Number of columns of the subplot grid. Defaults to 1.</dd> <dt>\n<em>sharex</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or bool</span>\n</dt> <dd>If <em>True</em>, the X axis will be shared amongst all subplots. If <em>True</em> and you have multiple rows, the x tick labels on all but the last row of plots will have visible set to <em>False</em> If a string must be one of “row”, “col”, “all”, or “none”. “all” has the same effect as <em>True</em>, “none” has the same effect as <em>False</em>. If “row”, each subplot row will share a X axis. If “col”, each subplot column will share a X axis and the x tick labels on all but the last row will have visible set to <em>False</em>.</dd> <dt>\n<em>sharey</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or bool</span>\n</dt> <dd>If <em>True</em>, the Y axis will be shared amongst all subplots. If <em>True</em> and you have multiple columns, the y tick labels on all but the first column of plots will have visible set to <em>False</em> If a string must be one of “row”, “col”, “all”, or “none”. “all” has the same effect as <em>True</em>, “none” has the same effect as <em>False</em>. If “row”, each subplot row will share a Y axis and the y tick labels on all but the first column will have visible set to <em>False</em>. If “col”, each subplot column will share a Y axis.</dd> <dt>\n<em>squeeze</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span>\n</dt> <dd>\n<p class=\"first\">If <em>True</em>, extra dimensions are squeezed out from the returned axis object:</p> <ul class=\"simple\"> <li>if only one subplot is constructed (nrows=ncols=1), the resulting single Axis object is returned as a scalar.</li> <li>for Nx1 or 1xN subplots, the returned object is a 1-d numpy object array of Axis objects are returned as numpy 1-d arrays.</li> <li>for NxM subplots with N&gt;1 and M&gt;1 are returned as a 2d array.</li> </ul> <p class=\"last\">If <em>False</em>, no squeezing at all is done: the returned axis object is always a 2-d array containing Axis instances, even if it ends up being 1x1.</p> </dd> <dt>\n<em>subplot_kw</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span>\n</dt> <dd>Dict with keywords passed to the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure.add_subplot\" title=\"matplotlib.figure.Figure.add_subplot\"><code>add_subplot()</code></a> call used to create each subplots.</dd> <dt>\n<em>gridspec_kw</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span>\n</dt> <dd>Dict with keywords passed to the <a class=\"reference internal\" href=\"gridspec_api#matplotlib.gridspec.GridSpec\" title=\"matplotlib.gridspec.GridSpec\"><code>GridSpec</code></a> constructor used to create the grid the subplots are placed on.</dd> <dt>\n<em>fig_kw</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span>\n</dt> <dd>Dict with keywords passed to the <a class=\"reference internal\" href=\"#matplotlib.pyplot.figure\" title=\"matplotlib.pyplot.figure\"><code>figure()</code></a> call. Note that all keywords not recognized above will be automatically included here.</dd> </dl> </div>\n</blockquote> <p>Returns:</p> <p>fig, ax : tuple</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>fig</em> is the <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> object</li> <li>\n<em>ax</em> can be either a single axis object or an array of axis objects if more than one subplot was created. The dimensions of the resulting array can be controlled with the squeeze keyword, see above.</li> </ul> </div>\n</blockquote> <p>Examples:</p> <pre data-language=\"python\">x = np.linspace(0, 2*np.pi, 400)\ny = np.sin(x**2)\n\n# Just a figure and one subplot\nf, ax = plt.subplots()\nax.plot(x, y)\nax.set_title('Simple plot')\n\n# Two subplots, unpack the output array immediately\nf, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\nax1.plot(x, y)\nax1.set_title('Sharing Y axis')\nax2.scatter(x, y)\n\n# Four polar axes\nplt.subplots(2, 2, subplot_kw=dict(polar=True))\n\n# Share a X axis with each column of subplots\nplt.subplots(2, 2, sharex='col')\n\n# Share a Y axis with each row of subplots\nplt.subplots(2, 2, sharey='row')\n\n# Share a X and Y axis with all subplots\nplt.subplots(2, 2, sharex='all', sharey='all')\n# same as\nplt.subplots(2, 2, sharex=True, sharey=True)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.subplots_adjust\"><code>matplotlib.pyplot.subplots_adjust(*args, **kwargs)</code></dt> <dd>\n<p>Tune the subplot layout.</p> <p>call signature:</p> <pre data-language=\"python\">subplots_adjust(left=None, bottom=None, right=None, top=None,\n                wspace=None, hspace=None)\n</pre> <p>The parameter meanings (and suggested defaults) are:</p> <pre data-language=\"python\">left  = 0.125  # the left side of the subplots of the figure\nright = 0.9    # the right side of the subplots of the figure\nbottom = 0.1   # the bottom of the subplots of the figure\ntop = 0.9      # the top of the subplots of the figure\nwspace = 0.2   # the amount of width reserved for blank space between subplots\nhspace = 0.2   # the amount of height reserved for white space between subplots\n</pre> <p>The actual defaults are controlled by the rc file</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.summer\"><code>matplotlib.pyplot.summer()</code></dt> <dd>\n<p>set the default colormap to summer and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.suptitle\"><code>matplotlib.pyplot.suptitle(*args, **kwargs)</code></dt> <dd>\n<p>Add a centered title to the figure.</p> <p>kwargs are <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> properties. Using figure coordinates, the defaults are:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>x</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.5</span>\n</dt> <dd>The x location of the text in figure coords</dd> <dt>\n<em>y</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0.98</span>\n</dt> <dd>The y location of the text in figure coords</dd> <dt>\n<em>horizontalalignment</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">‘center’</span>\n</dt> <dd>The horizontal alignment of the text</dd> <dt>\n<em>verticalalignment</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">‘top’</span>\n</dt> <dd>The vertical alignment of the text</dd> </dl> </div>\n</blockquote> <p>A <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>matplotlib.text.Text</code></a> instance is returned.</p> <p>Example:</p> <pre data-language=\"python\">fig.suptitle('this is the figure title', fontsize=12)\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.switch_backend\"><code>matplotlib.pyplot.switch_backend(newbackend)</code></dt> <dd>\n<p>Switch the default backend. This feature is <strong>experimental</strong>, and is only expected to work switching to an image backend. e.g., if you have a bunch of PostScript scripts that you want to run from an interactive ipython session, you may want to switch to the PS backend before running them to avoid having a bunch of GUI windows popup. If you try to interactively switch from one GUI backend to another, you will explode.</p> <p>Calling this command will close all open windows.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.table\"><code>matplotlib.pyplot.table(**kwargs)</code></dt> <dd>\n<p>Add a table to the current axes.</p> <p>Call signature:</p> <pre data-language=\"python\">table(cellText=None, cellColours=None,\n      cellLoc='right', colWidths=None,\n      rowLabels=None, rowColours=None, rowLoc='left',\n      colLabels=None, colColours=None, colLoc='center',\n      loc='bottom', bbox=None):\n</pre> <p>Returns a <code>matplotlib.table.Table</code> instance. For finer grained control over tables, use the <code>Table</code> class and add it to the axes with <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.add_table\" title=\"matplotlib.axes.Axes.add_table\"><code>add_table()</code></a>.</p> <p>Thanks to John Gill for providing the class and table.</p> <p>kwargs control the <code>Table</code> properties:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"35%\"> <col width=\"65%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Property</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_agg_filter\" title=\"matplotlib.artist.Artist.set_agg_filter\"><code>agg_filter</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_alpha\" title=\"matplotlib.artist.Artist.set_alpha\"><code>alpha</code></a></td> <td>float (0.0 transparent through 1.0 opaque)</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_animated\" title=\"matplotlib.artist.Artist.set_animated\"><code>animated</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_axes\" title=\"matplotlib.artist.Artist.set_axes\"><code>axes</code></a></td> <td>an <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes\" title=\"matplotlib.axes.Axes\"><code>Axes</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_box\" title=\"matplotlib.artist.Artist.set_clip_box\"><code>clip_box</code></a></td> <td>a <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Bbox\" title=\"matplotlib.transforms.Bbox\"><code>matplotlib.transforms.Bbox</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_on\" title=\"matplotlib.artist.Artist.set_clip_on\"><code>clip_on</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_clip_path\" title=\"matplotlib.artist.Artist.set_clip_path\"><code>clip_path</code></a></td> <td>[ (<a class=\"reference internal\" href=\"path_api#matplotlib.path.Path\" title=\"matplotlib.path.Path\"><code>Path</code></a>, <a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a>) | <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Patch\" title=\"matplotlib.patches.Patch\"><code>Patch</code></a> | None ]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_contains\" title=\"matplotlib.artist.Artist.set_contains\"><code>contains</code></a></td> <td>a callable function</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_figure\" title=\"matplotlib.artist.Artist.set_figure\"><code>figure</code></a></td> <td>a <a class=\"reference internal\" href=\"figure_api#matplotlib.figure.Figure\" title=\"matplotlib.figure.Figure\"><code>matplotlib.figure.Figure</code></a> instance</td> </tr> <tr class=\"row-odd\">\n<td><code>fontsize</code></td> <td>a float in points</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_gid\" title=\"matplotlib.artist.Artist.set_gid\"><code>gid</code></a></td> <td>an id string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_label\" title=\"matplotlib.artist.Artist.set_label\"><code>label</code></a></td> <td>string or anything printable with ‘%s’ conversion.</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_path_effects\" title=\"matplotlib.artist.Artist.set_path_effects\"><code>path_effects</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_picker\" title=\"matplotlib.artist.Artist.set_picker\"><code>picker</code></a></td> <td>[None|float|boolean|callable]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_rasterized\" title=\"matplotlib.artist.Artist.set_rasterized\"><code>rasterized</code></a></td> <td>[True | False | None]</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_sketch_params\" title=\"matplotlib.artist.Artist.set_sketch_params\"><code>sketch_params</code></a></td> <td>unknown</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_snap\" title=\"matplotlib.artist.Artist.set_snap\"><code>snap</code></a></td> <td>unknown</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_transform\" title=\"matplotlib.artist.Artist.set_transform\"><code>transform</code></a></td> <td>\n<a class=\"reference internal\" href=\"http://matplotlib.org/1.5.1/devel/transformations.html#matplotlib.transforms.Transform\" title=\"matplotlib.transforms.Transform\"><code>Transform</code></a> instance</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_url\" title=\"matplotlib.artist.Artist.set_url\"><code>url</code></a></td> <td>a url string</td> </tr> <tr class=\"row-odd\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_visible\" title=\"matplotlib.artist.Artist.set_visible\"><code>visible</code></a></td> <td>[True | False]</td> </tr> <tr class=\"row-even\">\n<td><a class=\"reference internal\" href=\"artist_api#matplotlib.artist.Artist.set_zorder\" title=\"matplotlib.artist.Artist.set_zorder\"><code>zorder</code></a></td> <td>any number</td> </tr> </tbody> </table> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.text\"><code>matplotlib.pyplot.text(x, y, s, fontdict=None, withdash=False, **kwargs)</code></dt> <dd>\n<p>Add text to the axes.</p> <p>Add text in string <code>s</code> to axis at location <code>x</code>, <code>y</code>, data coordinates.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x, y</strong> : scalars</p> <blockquote> <div>\n<p>data coordinates</p> </div>\n</blockquote> <p><strong>s</strong> : string</p> <blockquote> <div>\n<p>text</p> </div>\n</blockquote> <p><strong>fontdict</strong> : dictionary, optional, default: None</p> <blockquote> <div>\n<p>A dictionary to override the default text properties. If fontdict is None, the defaults are determined by your rc parameters.</p> </div>\n</blockquote> <p><strong>withdash</strong> : boolean, optional, default: False</p> <blockquote> <div>\n<p>Creates a <a class=\"reference internal\" href=\"text_api#matplotlib.text.TextWithDash\" title=\"matplotlib.text.TextWithDash\"><code>TextWithDash</code></a> instance instead of a <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instance.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-even field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties.</p> <blockquote class=\"last\"> <div>\n<p>Other miscellaneous text parameters.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Examples</h4> <p>Individual keyword arguments can be used to override any given parameter:</p> <pre data-language=\"python\">&gt;&gt;&gt; text(x, y, s, fontsize=12)\n</pre> <p>The default transform specifies that text is in data coords, alternatively, you can specify text in axis coords (0,0 is lower-left and 1,1 is upper-right). The example below places text in the center of the axes:</p> <pre data-language=\"python\">&gt;&gt;&gt; text(0.5, 0.5,'matplotlib', horizontalalignment='center',\n...      verticalalignment='center',\n...      transform=ax.transAxes)\n</pre> <p>You can put a rectangular box around the text instance (e.g., to set a background color) by using the keyword <code>bbox</code>. <code>bbox</code> is a dictionary of <a class=\"reference internal\" href=\"patches_api#matplotlib.patches.Rectangle\" title=\"matplotlib.patches.Rectangle\"><code>Rectangle</code></a> properties. For example:</p> <pre data-language=\"python\">&gt;&gt;&gt; text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.thetagrids\"><code>matplotlib.pyplot.thetagrids(*args, **kwargs)</code></dt> <dd>\n<p>Get or set the theta locations of the gridlines in a polar plot.</p> <p>If no arguments are passed, return a tuple (<em>lines</em>, <em>labels</em>) where <em>lines</em> is an array of radial gridlines (<a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instances) and <em>labels</em> is an array of tick labels (<a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances):</p> <pre data-language=\"python\">lines, labels = thetagrids()\n</pre> <p>Otherwise the syntax is:</p> <pre data-language=\"python\">lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1)\n</pre> <p>set the angles at which to place the theta grids (these gridlines are equal along the theta dimension).</p> <p><em>angles</em> is in degrees.</p> <p><em>labels</em>, if not <em>None</em>, is a len(angles) list of strings of the labels to use at each angle.</p> <p>If <em>labels</em> is <em>None</em>, the labels will be <code>fmt%angle</code>.</p> <p><em>frac</em> is the fraction of the polar axes radius at which to place the label (1 is the edge). e.g., 1.05 is outside the axes and 0.95 is inside the axes.</p> <p>Return value is a list of tuples (<em>lines</em>, <em>labels</em>):</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<em>lines</em> are <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instances</li> <li>\n<em>labels</em> are <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</li> </ul> </div>\n</blockquote> <p>Note that on input, the <em>labels</em> argument is a list of strings, and on output it is a list of <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> instances.</p> <p>Examples:</p> <pre data-language=\"python\"># set the locations of the radial gridlines and labels\nlines, labels = thetagrids( range(45,360,90) )\n\n# set the locations and labels of the radial gridlines and labels\nlines, labels = thetagrids( range(45,360,90), ('NE', 'NW', 'SW','SE') )\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.tick_params\"><code>matplotlib.pyplot.tick_params(axis='both', **kwargs)</code></dt> <dd>\n<p>Change the appearance of ticks and tick labels.</p> <p>Keyword arguments:</p> <dl class=\"docutils\"> <dt>\n<em>axis</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[‘x’ | ‘y’ | ‘both’]</span>\n</dt> <dd>Axis on which to operate; default is ‘both’.</dd> <dt>\n<em>reset</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[True | False]</span>\n</dt> <dd>If <em>True</em>, set all parameters to defaults before processing other keyword arguments. Default is <em>False</em>.</dd> <dt>\n<em>which</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[‘major’ | ‘minor’ | ‘both’]</span>\n</dt> <dd>Default is ‘major’; apply arguments to <em>which</em> ticks.</dd> <dt>\n<em>direction</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[‘in’ | ‘out’ | ‘inout’]</span>\n</dt> <dd>Puts ticks inside the axes, outside the axes, or both.</dd> <dt><em>length</em></dt> <dd>Tick length in points.</dd> <dt><em>width</em></dt> <dd>Tick width in points.</dd> <dt><em>color</em></dt> <dd>Tick color; accepts any mpl color spec.</dd> <dt><em>pad</em></dt> <dd>Distance in points between tick and label.</dd> <dt><em>labelsize</em></dt> <dd>Tick label font size in points or as a string (e.g., ‘large’).</dd> <dt><em>labelcolor</em></dt> <dd>Tick label color; mpl color spec.</dd> <dt><em>colors</em></dt> <dd>Changes the tick color and the label color to the same value: mpl color spec.</dd> <dt><em>zorder</em></dt> <dd>Tick and label zorder.</dd> <dt>\n<em>bottom</em>, <em>top</em>, <em>left</em>, <em>right</em> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">[bool | ‘on’ | ‘off’]</span>\n</dt> <dd>controls whether to draw the respective ticks.</dd> <dt>\n<em>labelbottom</em>, <em>labeltop</em>, <em>labelleft</em>, <em>labelright</em>\n</dt> <dd>Boolean or [‘on’ | ‘off’], controls whether to draw the respective tick labels.</dd> </dl> <p>Example:</p> <pre data-language=\"python\">ax.tick_params(direction='out', length=6, width=2, colors='r')\n</pre> <p>This will make all major ticks be red, pointing out of the box, and with dimensions 6 points by 2 points. Tick labels will also be red.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.ticklabel_format\"><code>matplotlib.pyplot.ticklabel_format(**kwargs)</code></dt> <dd>\n<p>Change the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.ScalarFormatter\" title=\"matplotlib.ticker.ScalarFormatter\"><code>ScalarFormatter</code></a> used by default for linear axes.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<table class=\"docutils\"> <colgroup> <col width=\"23%\"> <col width=\"77%\"> </colgroup> <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Keyword</th> <th class=\"head\">Description</th> </tr> </thead> <tbody valign=\"top\"> <tr class=\"row-even\">\n<td><em>style</em></td> <td>[ ‘sci’ (or ‘scientific’) | ‘plain’ ] plain turns off scientific notation</td> </tr> <tr class=\"row-odd\">\n<td><em>scilimits</em></td> <td>(m, n), pair of integers; if <em>style</em> is ‘sci’, scientific notation will be used for numbers outside the range 10`m`:sup: to 10`n`:sup:. Use (0,0) to include all numbers.</td> </tr> <tr class=\"row-even\">\n<td><em>useOffset</em></td> <td>[True | False | offset]; if True, the offset will be calculated as needed; if False, no offset will be used; if a numeric offset is specified, it will be used.</td> </tr> <tr class=\"row-odd\">\n<td><em>axis</em></td> <td>[ ‘x’ | ‘y’ | ‘both’ ]</td> </tr> <tr class=\"row-even\">\n<td><em>useLocale</em></td> <td>If True, format the number according to the current locale. This affects things such as the character used for the decimal separator. If False, use C-style (English) formatting. The default setting is controlled by the axes.formatter.use_locale rcparam.</td> </tr> </tbody> </table> </div>\n</blockquote> <p>Only the major ticks are affected. If the method is called when the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.ScalarFormatter\" title=\"matplotlib.ticker.ScalarFormatter\"><code>ScalarFormatter</code></a> is not the <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.Formatter\" title=\"matplotlib.ticker.Formatter\"><code>Formatter</code></a> being used, an <code>AttributeError</code> will be raised.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.tight_layout\"><code>matplotlib.pyplot.tight_layout(pad=1.08, h_pad=None, w_pad=None, rect=None)</code></dt> <dd>\n<p>Automatically adjust subplot parameters to give specified padding.</p> <p>Parameters:</p> <dl class=\"docutils\"> <dt>pad <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding between the figure edge and the edges of subplots, as a fraction of the font-size.</dd> <dt>h_pad, w_pad <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span>\n</dt> <dd>padding (height/width) between edges of adjacent subplots. Defaults to <code>pad_inches</code>.</dd> <dt>rect <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">if rect is given, it is interpreted as a rectangle</span>\n</dt> <dd>(left, bottom, right, top) in the normalized figure coordinate that the whole subplots area (including labels) will fit into. Default is (0, 0, 1, 1).</dd> </dl> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.title\"><code>matplotlib.pyplot.title(s, *args, **kwargs)</code></dt> <dd>\n<p>Set a title of the current axes.</p> <p>Set one of the three available axes titles. The available titles are positioned above the axes in the center, flush with the left edge, and flush with the right edge.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <p class=\"last\">See <a class=\"reference internal\" href=\"#matplotlib.pyplot.text\" title=\"matplotlib.pyplot.text\"><code>text()</code></a> for adding text to the current axes</p> </div> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>label</strong> : str</p> <blockquote> <div>\n<p>Text to use for the title</p> </div>\n</blockquote> <p><strong>fontdict</strong> : dict</p> <blockquote> <div>\n<p>A dictionary controlling the appearance of the title text, the default <code>fontdict</code> is:</p> <blockquote> <div>\n<p>{‘fontsize’: rcParams[‘axes.titlesize’], ‘fontweight’ : rcParams[‘axes.titleweight’], ‘verticalalignment’: ‘baseline’, ‘horizontalalignment’: loc}</p> </div>\n</blockquote> </div>\n</blockquote> <p><strong>loc</strong> : {‘center’, ‘left’, ‘right’}, str, optional</p> <blockquote> <div>\n<p>Which title to set, defaults to ‘center’</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>text</strong> : <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a></p> <blockquote> <div>\n<p>The matplotlib text instance representing the title</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>kwargs</strong> : text properties</p> <blockquote class=\"last\"> <div>\n<p>Other keyword arguments are text properties, see <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> for a list of valid text properties.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.tricontour\"><code>matplotlib.pyplot.tricontour(*args, **kwargs)</code></dt> <dd>\n<p>Draw contours on an unstructured triangular grid. <a class=\"reference internal\" href=\"#matplotlib.pyplot.tricontour\" title=\"matplotlib.pyplot.tricontour\"><code>tricontour()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.pyplot.tricontourf\" title=\"matplotlib.pyplot.tricontourf\"><code>tricontourf()</code></a> draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.</p> <p>The triangulation can be specified in one of two ways; either:</p> <pre data-language=\"python\">tricontour(triangulation, ...)\n</pre> <p>where triangulation is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>matplotlib.tri.Triangulation</code></a> object, or</p> <pre data-language=\"python\">tricontour(x, y, ...)\ntricontour(x, y, triangles, ...)\ntricontour(x, y, triangles=triangles, ...)\ntricontour(x, y, mask=mask, ...)\ntricontour(x, y, triangles, mask=mask, ...)\n</pre> <p>in which case a Triangulation object will be created. See <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> for a explanation of these possibilities.</p> <p>The remaining arguments may be:</p> <pre data-language=\"python\">tricontour(..., Z)\n</pre> <p>where <em>Z</em> is the array of values to contour, one per point in the triangulation. The level values are chosen automatically.</p> <pre data-language=\"python\">tricontour(..., Z, N)\n</pre> <p>contour <em>N</em> automatically-chosen levels.</p> <pre data-language=\"python\">tricontour(..., Z, V)\n</pre> <p>draw contour lines at the values specified in sequence <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">tricontourf(..., Z, V)\n</pre> <p>fill the (len(<em>V</em>)-1) regions between the values in <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">tricontour(Z, **kwargs)\n</pre> <p>Use keyword args to control colors, linewidth, origin, cmap ... see below for more details.</p> <p><code>C = tricontour(...)</code> returns a <code>TriContourSet</code> object.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>colors</em>: [ <em>None</em> | string | (mpl_colors) ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the colormap specified by cmap will be used.</p> <p>If a string, like ‘r’ or ‘red’, all levels will be plotted in this color.</p> <p class=\"last\">If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</p> </dd> <dt>\n<em>alpha</em>: float</dt> <dd>The alpha blending value</dd> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A cm <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or <em>None</em>. If <em>cmap</em> is <em>None</em> and <em>colors</em> is <em>None</em>, a default Colormap is used.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance for scaling data values to colors. If <em>norm</em> is <em>None</em> and <em>colors</em> is <em>None</em>, the default linear scaling is used.</dd> <dt>\n<em>levels</em> [level0, level1, ..., leveln]</dt> <dd>A list of floating point numbers indicating the level curves to draw, in increasing order; e.g., to draw just the zero contour pass <code>levels=[0]</code>\n</dd> <dt>\n<em>origin</em>: [ <em>None</em> | ‘upper’ | ‘lower’ | ‘image’ ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the first value of <em>Z</em> will correspond to the lower left corner, location (0,0). If ‘image’, the rc value for <code>image.origin</code> will be used.</p> <p class=\"last\">This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </dd> </dl> <p><em>extent</em>: [ <em>None</em> | (x0,x1,y0,y1) ]</p> <blockquote> <div>\n<p>If <em>origin</em> is not <em>None</em>, then <em>extent</em> is interpreted as in <a class=\"reference internal\" href=\"#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow()</code></a>: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If <em>origin</em> is <em>None</em>, then (<em>x0</em>, <em>y0</em>) is the position of Z[0,0], and (<em>x1</em>, <em>y1</em>) is the position of Z[-1,-1].</p> <p>This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>locator</em>: [ <em>None</em> | ticker.Locator subclass ]</dt> <dd>If <em>locator</em> is None, the default <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> is used. The locator is used to determine the contour levels if they are not given explicitly via the <em>V</em> argument.</dd> <dt>\n<em>extend</em>: [ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ]</dt> <dd>Unless this is ‘neither’, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range, but can be set via <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_under\" title=\"matplotlib.colors.Colormap.set_under\"><code>matplotlib.colors.Colormap.set_under()</code></a> and <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_over\" title=\"matplotlib.colors.Colormap.set_over\"><code>matplotlib.colors.Colormap.set_over()</code></a> methods.</dd> <dt>\n<em>xunits</em>, <em>yunits</em>: [ <em>None</em> | registered units ]</dt> <dd>Override axis units by specifying an instance of a <a class=\"reference internal\" href=\"units_api#matplotlib.units.ConversionInterface\" title=\"matplotlib.units.ConversionInterface\"><code>matplotlib.units.ConversionInterface</code></a>.</dd> </dl> </div>\n</blockquote> <p>tricontour-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>linewidths</em>: [ <em>None</em> | number | tuple of numbers ]</dt> <dd>\n<p class=\"first\">If <em>linewidths</em> is <em>None</em>, the default width in <code>lines.linewidth</code> in <code>matplotlibrc</code> is used.</p> <p>If a number, all levels will be plotted with this linewidth.</p> <p class=\"last\">If a tuple, different levels will be plotted with different linewidths in the order specified</p> </dd> <dt>\n<em>linestyles</em>: [ <em>None</em> | ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">If <em>linestyles</em> is <em>None</em>, the ‘solid’ is used.</p> <p><em>linestyles</em> can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.</p> <p class=\"last\">If contour is using a monochrome colormap and the contour level is less than 0, then the linestyle specified in <code>contour.negative_linestyle</code> in <code>matplotlibrc</code> will be used.</p> </dd> </dl> </div>\n</blockquote> <p>tricontourf-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>antialiased</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>enable antialiasing</dd> </dl> </div>\n</blockquote> <p>Note: tricontourf fills intervals that are closed at the top; that is, for boundaries <em>z1</em> and <em>z2</em>, the filled region is:</p> <pre data-language=\"python\">z1 &lt; z &lt;= z2\n</pre> <p>There is one exception: if the lowest boundary coincides with the minimum value of the <em>z</em> array, then that minimum value will be included in the lowest interval.</p> <p><strong>Examples:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id34\"> <img alt=\"../_images/tricontour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id35\"> <img alt=\"../_images/tricontour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.pdf\">pdf</a>)</span></p> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.tricontourf\"><code>matplotlib.pyplot.tricontourf(*args, **kwargs)</code></dt> <dd>\n<p>Draw contours on an unstructured triangular grid. <a class=\"reference internal\" href=\"#matplotlib.pyplot.tricontour\" title=\"matplotlib.pyplot.tricontour\"><code>tricontour()</code></a> and <a class=\"reference internal\" href=\"#matplotlib.pyplot.tricontourf\" title=\"matplotlib.pyplot.tricontourf\"><code>tricontourf()</code></a> draw contour lines and filled contours, respectively. Except as noted, function signatures and return values are the same for both versions.</p> <p>The triangulation can be specified in one of two ways; either:</p> <pre data-language=\"python\">tricontour(triangulation, ...)\n</pre> <p>where triangulation is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>matplotlib.tri.Triangulation</code></a> object, or</p> <pre data-language=\"python\">tricontour(x, y, ...)\ntricontour(x, y, triangles, ...)\ntricontour(x, y, triangles=triangles, ...)\ntricontour(x, y, mask=mask, ...)\ntricontour(x, y, triangles, mask=mask, ...)\n</pre> <p>in which case a Triangulation object will be created. See <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> for a explanation of these possibilities.</p> <p>The remaining arguments may be:</p> <pre data-language=\"python\">tricontour(..., Z)\n</pre> <p>where <em>Z</em> is the array of values to contour, one per point in the triangulation. The level values are chosen automatically.</p> <pre data-language=\"python\">tricontour(..., Z, N)\n</pre> <p>contour <em>N</em> automatically-chosen levels.</p> <pre data-language=\"python\">tricontour(..., Z, V)\n</pre> <p>draw contour lines at the values specified in sequence <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">tricontourf(..., Z, V)\n</pre> <p>fill the (len(<em>V</em>)-1) regions between the values in <em>V</em>, which must be in increasing order.</p> <pre data-language=\"python\">tricontour(Z, **kwargs)\n</pre> <p>Use keyword args to control colors, linewidth, origin, cmap ... see below for more details.</p> <p><code>C = tricontour(...)</code> returns a <code>TriContourSet</code> object.</p> <p>Optional keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>colors</em>: [ <em>None</em> | string | (mpl_colors) ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the colormap specified by cmap will be used.</p> <p>If a string, like ‘r’ or ‘red’, all levels will be plotted in this color.</p> <p class=\"last\">If a tuple of matplotlib color args (string, float, rgb, etc), different levels will be plotted in different colors in the order specified.</p> </dd> <dt>\n<em>alpha</em>: float</dt> <dd>The alpha blending value</dd> <dt>\n<em>cmap</em>: [ <em>None</em> | Colormap ]</dt> <dd>A cm <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap\" title=\"matplotlib.colors.Colormap\"><code>Colormap</code></a> instance or <em>None</em>. If <em>cmap</em> is <em>None</em> and <em>colors</em> is <em>None</em>, a default Colormap is used.</dd> <dt>\n<em>norm</em>: [ <em>None</em> | Normalize ]</dt> <dd>A <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Normalize\" title=\"matplotlib.colors.Normalize\"><code>matplotlib.colors.Normalize</code></a> instance for scaling data values to colors. If <em>norm</em> is <em>None</em> and <em>colors</em> is <em>None</em>, the default linear scaling is used.</dd> <dt>\n<em>levels</em> [level0, level1, ..., leveln]</dt> <dd>A list of floating point numbers indicating the level curves to draw, in increasing order; e.g., to draw just the zero contour pass <code>levels=[0]</code>\n</dd> <dt>\n<em>origin</em>: [ <em>None</em> | ‘upper’ | ‘lower’ | ‘image’ ]</dt> <dd>\n<p class=\"first\">If <em>None</em>, the first value of <em>Z</em> will correspond to the lower left corner, location (0,0). If ‘image’, the rc value for <code>image.origin</code> will be used.</p> <p class=\"last\">This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </dd> </dl> <p><em>extent</em>: [ <em>None</em> | (x0,x1,y0,y1) ]</p> <blockquote> <div>\n<p>If <em>origin</em> is not <em>None</em>, then <em>extent</em> is interpreted as in <a class=\"reference internal\" href=\"#matplotlib.pyplot.imshow\" title=\"matplotlib.pyplot.imshow\"><code>matplotlib.pyplot.imshow()</code></a>: it gives the outer pixel boundaries. In this case, the position of Z[0,0] is the center of the pixel, not a corner. If <em>origin</em> is <em>None</em>, then (<em>x0</em>, <em>y0</em>) is the position of Z[0,0], and (<em>x1</em>, <em>y1</em>) is the position of Z[-1,-1].</p> <p>This keyword is not active if <em>X</em> and <em>Y</em> are specified in the call to contour.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>\n<em>locator</em>: [ <em>None</em> | ticker.Locator subclass ]</dt> <dd>If <em>locator</em> is None, the default <a class=\"reference internal\" href=\"ticker_api#matplotlib.ticker.MaxNLocator\" title=\"matplotlib.ticker.MaxNLocator\"><code>MaxNLocator</code></a> is used. The locator is used to determine the contour levels if they are not given explicitly via the <em>V</em> argument.</dd> <dt>\n<em>extend</em>: [ ‘neither’ | ‘both’ | ‘min’ | ‘max’ ]</dt> <dd>Unless this is ‘neither’, contour levels are automatically added to one or both ends of the range so that all data are included. These added ranges are then mapped to the special colormap values which default to the ends of the colormap range, but can be set via <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_under\" title=\"matplotlib.colors.Colormap.set_under\"><code>matplotlib.colors.Colormap.set_under()</code></a> and <a class=\"reference internal\" href=\"colors_api#matplotlib.colors.Colormap.set_over\" title=\"matplotlib.colors.Colormap.set_over\"><code>matplotlib.colors.Colormap.set_over()</code></a> methods.</dd> <dt>\n<em>xunits</em>, <em>yunits</em>: [ <em>None</em> | registered units ]</dt> <dd>Override axis units by specifying an instance of a <a class=\"reference internal\" href=\"units_api#matplotlib.units.ConversionInterface\" title=\"matplotlib.units.ConversionInterface\"><code>matplotlib.units.ConversionInterface</code></a>.</dd> </dl> </div>\n</blockquote> <p>tricontour-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>linewidths</em>: [ <em>None</em> | number | tuple of numbers ]</dt> <dd>\n<p class=\"first\">If <em>linewidths</em> is <em>None</em>, the default width in <code>lines.linewidth</code> in <code>matplotlibrc</code> is used.</p> <p>If a number, all levels will be plotted with this linewidth.</p> <p class=\"last\">If a tuple, different levels will be plotted with different linewidths in the order specified</p> </dd> <dt>\n<em>linestyles</em>: [ <em>None</em> | ‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’ ]</dt> <dd>\n<p class=\"first\">If <em>linestyles</em> is <em>None</em>, the ‘solid’ is used.</p> <p><em>linestyles</em> can also be an iterable of the above strings specifying a set of linestyles to be used. If this iterable is shorter than the number of contour levels it will be repeated as necessary.</p> <p class=\"last\">If contour is using a monochrome colormap and the contour level is less than 0, then the linestyle specified in <code>contour.negative_linestyle</code> in <code>matplotlibrc</code> will be used.</p> </dd> </dl> </div>\n</blockquote> <p>tricontourf-only keyword arguments:</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>antialiased</em>: [ <em>True</em> | <em>False</em> ]</dt> <dd>enable antialiasing</dd> </dl> </div>\n</blockquote> <p>Note: tricontourf fills intervals that are closed at the top; that is, for boundaries <em>z1</em> and <em>z2</em>, the filled region is:</p> <pre data-language=\"python\">z1 &lt; z &lt;= z2\n</pre> <p>There is one exception: if the lowest boundary coincides with the minimum value of the <em>z</em> array, then that minimum value will be included in the lowest interval.</p> <p><strong>Examples:</strong></p> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id36\"> <img alt=\"../_images/tricontour_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id37\"> <img alt=\"../_images/tricontour_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/tricontour_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tricontour_demo_01.pdf\">pdf</a>)</span></p> </div> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.tripcolor\"><code>matplotlib.pyplot.tripcolor(*args, **kwargs)</code></dt> <dd>\n<p>Create a pseudocolor plot of an unstructured triangular grid.</p> <p>The triangulation can be specified in one of two ways; either:</p> <pre data-language=\"python\">tripcolor(triangulation, ...)\n</pre> <p>where triangulation is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>matplotlib.tri.Triangulation</code></a> object, or</p> <pre data-language=\"python\">tripcolor(x, y, ...)\ntripcolor(x, y, triangles, ...)\ntripcolor(x, y, triangles=triangles, ...)\ntripcolor(x, y, mask=mask, ...)\ntripcolor(x, y, triangles, mask=mask, ...)\n</pre> <p>in which case a Triangulation object will be created. See <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> for a explanation of these possibilities.</p> <p>The next argument must be <em>C</em>, the array of color values, either one per point in the triangulation if color values are defined at points, or one per triangle in the triangulation if color values are defined at triangles. If there are the same number of points and triangles in the triangulation it is assumed that color values are defined at points; to force the use of color values at triangles use the kwarg <em>facecolors*=C instead of just *C</em>.</p> <p><em>shading</em> may be ‘flat’ (the default) or ‘gouraud’. If <em>shading</em> is ‘flat’ and C values are defined at points, the color values used for each triangle are from the mean C of the triangle’s three points. If <em>shading</em> is ‘gouraud’ then color values must be defined at points.</p> <p>The remaining kwargs are the same as for <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.pcolor\" title=\"matplotlib.axes.Axes.pcolor\"><code>pcolor()</code></a>.</p> <p><strong>Example:</strong></p> <blockquote> <div>\n<p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id38\"> <img alt=\"../_images/tripcolor_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/tripcolor_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id39\"> <img alt=\"../_images/tripcolor_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/tripcolor_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_01.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id40\"> <img alt=\"../_images/tripcolor_demo_02.png\" src=\"http://matplotlib.org/1.5.1/_images/tripcolor_demo_02.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_02.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_02.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/tripcolor_demo_02.pdf\">pdf</a>)</span></p> </div> </div>\n</blockquote> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.triplot\"><code>matplotlib.pyplot.triplot(*args, **kwargs)</code></dt> <dd>\n<p>Draw a unstructured triangular grid as lines and/or markers.</p> <p>The triangulation to plot can be specified in one of two ways; either:</p> <pre data-language=\"python\">triplot(triangulation, ...)\n</pre> <p>where triangulation is a <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>matplotlib.tri.Triangulation</code></a> object, or</p> <pre data-language=\"python\">triplot(x, y, ...)\ntriplot(x, y, triangles, ...)\ntriplot(x, y, triangles=triangles, ...)\ntriplot(x, y, mask=mask, ...)\ntriplot(x, y, triangles, mask=mask, ...)\n</pre> <p>in which case a Triangulation object will be created. See <a class=\"reference internal\" href=\"tri_api#matplotlib.tri.Triangulation\" title=\"matplotlib.tri.Triangulation\"><code>Triangulation</code></a> for a explanation of these possibilities.</p> <p>The remaining args and kwargs are the same as for <a class=\"reference internal\" href=\"axes_api#matplotlib.axes.Axes.plot\" title=\"matplotlib.axes.Axes.plot\"><code>plot()</code></a>.</p> <p>Return a list of 2 <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> containing respectively:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>the lines plotted for triangles edges</li> <li>the markers plotted for triangles nodes</li> </ul> </div>\n</blockquote> <p><strong>Example:</strong></p> <blockquote> <div>\n<p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo.py\">Source code</a>)</p> <div class=\"figure\" id=\"id41\"> <img alt=\"../_images/triplot_demo_00.png\" src=\"http://matplotlib.org/1.5.1/_images/triplot_demo_00.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_00.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_00.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_00.pdf\">pdf</a>)</span></p> </div> <div class=\"figure\" id=\"id42\"> <img alt=\"../_images/triplot_demo_01.png\" src=\"http://matplotlib.org/1.5.1/_images/triplot_demo_01.png\"> <p class=\"caption\"><span class=\"caption-text\">(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_01.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_01.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/triplot_demo_01.pdf\">pdf</a>)</span></p> </div> </div>\n</blockquote> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.twinx\"><code>matplotlib.pyplot.twinx(ax=None)</code></dt> <dd>\n<p>Make a second axes that shares the <em>x</em>-axis. The new axes will overlay <em>ax</em> (or the current axes if <em>ax</em> is <em>None</em>). The ticks for <em>ax2</em> will be placed on the right, and the <em>ax2</em> instance is returned.</p> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><code>examples/api_examples/two_scales.py</code></dt> <dd>For an example</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.twiny\"><code>matplotlib.pyplot.twiny(ax=None)</code></dt> <dd>\n<p>Make a second axes that shares the <em>y</em>-axis. The new axis will overlay <em>ax</em> (or the current axes if <em>ax</em> is <em>None</em>). The ticks for <em>ax2</em> will be placed on the top, and the <em>ax2</em> instance is returned.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.uninstall_repl_displayhook\"><code>matplotlib.pyplot.uninstall_repl_displayhook()</code></dt> <dd>\n<p>Uninstalls the matplotlib display hook.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.violinplot\"><code>matplotlib.pyplot.violinplot(dataset, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False, points=100, bw_method=None, hold=None, data=None)</code></dt> <dd>\n<p>Make a violin plot.</p> <blockquote> <div>\n<p>Call signature:</p> <pre data-language=\"python\">violinplot(dataset, positions=None, vert=True, widths=0.5,\n           showmeans=False, showextrema=True, showmedians=False,\n           points=100, bw_method=None):\n</pre> <p>Make a violin plot for each column of <em>dataset</em> or each vector in sequence <em>dataset</em>. Each filled area extends to represent the entire data range, with optional lines at the mean, the median, the minimum, and the maximum.</p> </div>\n</blockquote> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>dataset</strong> : Array or a sequence of vectors.</p> <blockquote> <div>\n<blockquote> <div>\n<p>The input data.</p> </div>\n</blockquote> <dl class=\"docutils\"> <dt>positions <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like, default = [1, 2, ..., n]</span>\n</dt> <dd>\n<p class=\"first last\">Sets the positions of the violins. The ticks and limits are automatically set to match the positions.</p> </dd> <dt>vert <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default = True.</span>\n</dt> <dd>\n<p class=\"first last\">If true, creates a vertical violin plot. Otherwise, creates a horizontal violin plot.</p> </dd> <dt>widths <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like, default = 0.5</span>\n</dt> <dd>\n<p class=\"first last\">Either a scalar or a vector that sets the maximal width of each violin. The default is 0.5, which uses about half of the available horizontal space.</p> </dd> <dt>showmeans <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default = False</span>\n</dt> <dd>\n<p class=\"first last\">If <code>True</code>, will toggle rendering of the means.</p> </dd> <dt>showextrema <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default = True</span>\n</dt> <dd>\n<p class=\"first last\">If <code>True</code>, will toggle rendering of the extrema.</p> </dd> <dt>showmedians <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default = False</span>\n</dt> <dd>\n<p class=\"first last\">If <code>True</code>, will toggle rendering of the medians.</p> </dd> <dt>points <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">scalar, default = 100</span>\n</dt> <dd>\n<p class=\"first last\">Defines the number of points to evaluate each of the gaussian kernel density estimations at.</p> </dd> <dt>bw_method <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str, scalar or callable, optional</span>\n</dt> <dd>\n<p class=\"first last\">The method used to calculate the estimator bandwidth. This can be ‘scott’, ‘silverman’, a scalar constant or a callable. If a scalar, this will be used directly as <code>kde.factor</code>. If a callable, it should take a <code>GaussianKDE</code> instance as its only parameter and return a scalar. If None (default), ‘scott’ is used.</p> </dd> </dl> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>result</strong> : dict</p> <blockquote class=\"last\"> <div>\n<p>A dictionary mapping each component of the violinplot to a list of the corresponding collection instances created. The dictionary has the following keys:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>bodies</code>: A list of the <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.PolyCollection\" title=\"matplotlib.collections.PolyCollection\"><code>matplotlib.collections.PolyCollection</code></a> instances containing the filled area of each violin.</li> <li>\n<code>cmeans</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the mean values of each of the violin’s distribution.</li> <li>\n<code>cmins</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the bottom of each violin’s distribution.</li> <li>\n<code>cmaxes</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the top of each violin’s distribution.</li> <li>\n<code>cbars</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the centers of each violin’s distribution.</li> <li>\n<code>cmedians</code>: A <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>matplotlib.collections.LineCollection</code></a> instance created to identify the median values of each of the violin’s distribution.</li> </ul> </div>\n</blockquote> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘dataset’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.viridis\"><code>matplotlib.pyplot.viridis()</code></dt> <dd>\n<p>set the default colormap to viridis and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.vlines\"><code>matplotlib.pyplot.vlines(x, ymin, ymax, colors='k', linestyles='solid', label='', hold=None, data=None, **kwargs)</code></dt> <dd>\n<p>Plot vertical lines.</p> <p>Plot vertical lines at each <code>x</code> from <code>ymin</code> to <code>ymax</code>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : scalar or 1D array_like</p> <blockquote> <div>\n<p>x-indexes where to plot the lines.</p> </div>\n</blockquote> <p><strong>ymin, ymax</strong> : scalar or 1D array_like</p> <blockquote> <div>\n<p>Respective beginning and end of each line. If scalars are provided, all lines will have same length.</p> </div>\n</blockquote> <p><strong>colors</strong> : array_like of colors, optional, default: ‘k’</p> <p><strong>linestyles</strong> : [‘solid’ | ‘dashed’ | ‘dashdot’ | ‘dotted’], optional</p> <p><strong>label</strong> : string, optional, default: ‘’</p> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>lines</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a></p> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first last\"><strong>kwargs</strong> : <a class=\"reference internal\" href=\"collections_api#matplotlib.collections.LineCollection\" title=\"matplotlib.collections.LineCollection\"><code>LineCollection</code></a> properties.</p> </td> </tr> </tbody> </table> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.hlines\" title=\"matplotlib.pyplot.hlines\"><code>hlines</code></a></dt> <dd>horizontal lines</dd> </dl> </div> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘ymax’, ‘x’, ‘colors’, ‘ymin’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> <h4 class=\"rubric\">Examples</h4> <p>(<a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.py\">Source code</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.png\">png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.hires.png\">hires.png</a>, <a class=\"reference external\" href=\"http://matplotlib.org/1.5.1/mpl_examples/pylab_examples/vline_hline_demo.pdf\">pdf</a>)</p> <div class=\"figure\"> <img alt=\"../_images/vline_hline_demo.png\" src=\"http://matplotlib.org/1.5.1/_images/vline_hline_demo.png\"> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.waitforbuttonpress\"><code>matplotlib.pyplot.waitforbuttonpress(*args, **kwargs)</code></dt> <dd>\n<p>Call signature:</p> <pre data-language=\"python\">waitforbuttonpress(self, timeout=-1)\n</pre> <p>Blocking call to interact with the figure.</p> <p>This will return True is a key was pressed, False if a mouse button was pressed and None if <em>timeout</em> was reached without either being pressed.</p> <p>If <em>timeout</em> is negative, does not timeout.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.winter\"><code>matplotlib.pyplot.winter()</code></dt> <dd>\n<p>set the default colormap to winter and apply to current image if any. See help(colormaps) for more information</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.xcorr\"><code>matplotlib.pyplot.xcorr(x, y, normed=True, detrend=<function detrend_none>, usevlines=True, maxlags=10, hold=None, data=None, **kwargs)</function></code></dt> <dd>\n<p>Plot the cross correlation between <em>x</em> and <em>y</em>.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>x</strong> : sequence of scalars of length n</p> <p><strong>y</strong> : sequence of scalars of length n</p> <p><strong>hold</strong> : boolean, optional, default: True</p> <p><strong>detrend</strong> : callable, optional, default: <code>mlab.detrend_none</code></p> <blockquote> <div>\n<p>x is detrended by the <code>detrend</code> callable. Default is no normalization.</p> </div>\n</blockquote> <p><strong>normed</strong> : boolean, optional, default: True</p> <blockquote> <div>\n<p>if True, normalize the data by the autocorrelation at the 0-th lag.</p> </div>\n</blockquote> <p><strong>usevlines</strong> : boolean, optional, default: True</p> <blockquote> <div>\n<p>if True, Axes.vlines is used to plot the vertical lines from the origin to the acorr. Otherwise, Axes.plot is used.</p> </div>\n</blockquote> <p><strong>maxlags</strong> : integer, optional, default: 10</p> <blockquote> <div>\n<p>number of lags to show. If None, will return all 2 * len(x) - 1 lags.</p> </div>\n</blockquote> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>(lags, c, line, b)</strong> : where:</p> <blockquote> <div>\n<ul class=\"simple\"> <li>\n<code>lags</code> are a length 2`maxlags+1 lag vector.</li> <li>\n<code>c</code> is the 2`maxlags+1 auto correlation vectorI</li> <li>\n<code>line</code> is a <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> instance returned by <a class=\"reference internal\" href=\"#matplotlib.pyplot.plot\" title=\"matplotlib.pyplot.plot\"><code>plot</code></a>.</li> <li>\n<code>b</code> is the x-axis (none, if plot is used).</li> </ul> </div>\n</blockquote> </td> </tr> <tr class=\"field-odd field\"><th class=\"field-name\" colspan=\"2\">Other Parameters:</th></tr> <tr class=\"field-odd field\">\n<td> </td>\n<td class=\"field-body\">\n<p class=\"first\"><strong>linestyle</strong> : <a class=\"reference internal\" href=\"lines_api#matplotlib.lines.Line2D\" title=\"matplotlib.lines.Line2D\"><code>Line2D</code></a> prop, optional, default: None</p> <blockquote> <div>\n<p>Only used if usevlines is False.</p> </div>\n</blockquote> <p class=\"last\"><strong>marker</strong> : string, optional, default: ‘o’</p> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>In addition to the above described arguments, this function can take a <strong>data</strong> keyword argument. If such a <strong>data</strong> argument is given, the following arguments are replaced by <strong>data[&lt;arg&gt;]</strong>:</p> <ul class=\"simple\"> <li>All arguments with the following names: ‘x’, ‘y’.</li> </ul> <p>Additional kwargs: hold = [True|False] overrides default hold state</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.xkcd\"><code>matplotlib.pyplot.xkcd(scale=1, length=100, randomness=2)</code></dt> <dd>\n<p>Turns on <a class=\"reference external\" href=\"http://xkcd.com/\">xkcd</a> sketch-style drawing mode. This will only have effect on things drawn after this function is called.</p> <p>For best results, the “Humor Sans” font should be installed: it is not included with matplotlib.</p> <table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\"> <tbody valign=\"top\"> <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<p class=\"first\"><strong>scale</strong> : float, optional</p> <blockquote> <div>\n<p>The amplitude of the wiggle perpendicular to the source line.</p> </div>\n</blockquote> <p><strong>length</strong> : float, optional</p> <blockquote> <div>\n<p>The length of the wiggle along the line.</p> </div>\n</blockquote> <p><strong>randomness</strong> : float, optional</p> <blockquote class=\"last\"> <div>\n<p>The scale factor by which the length is shrunken or expanded.</p> </div>\n</blockquote> </td> </tr> </tbody> </table> <h4 class=\"rubric\">Notes</h4> <p>This function works by a number of rcParams, so it will probably override others you have set before.</p> <p>If you want the effects of this function to be temporary, it can be used as a context manager, for example:</p> <pre data-language=\"python\">with plt.xkcd():\n    # This figure will be in XKCD-style\n    fig1 = plt.figure()\n    # ...\n\n# This figure will be in regular style\nfig2 = plt.figure()\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.xlabel\"><code>matplotlib.pyplot.xlabel(s, *args, **kwargs)</code></dt> <dd>\n<p>Set the <em>x</em> axis label of the current axis.</p> <p>Default override is:</p> <pre data-language=\"python\">override = {\n    'fontsize'            : 'small',\n    'verticalalignment'   : 'top',\n    'horizontalalignment' : 'center'\n    }\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.text\" title=\"matplotlib.pyplot.text\"><code>text()</code></a></dt> <dd>For information on how override and the optional args work</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.xlim\"><code>matplotlib.pyplot.xlim(*args, **kwargs)</code></dt> <dd>\n<p>Get or set the <em>x</em> limits of the current axes.</p> <pre data-language=\"python\">xmin, xmax = xlim()   # return the current xlim\nxlim( (xmin, xmax) )  # set the xlim to xmin, xmax\nxlim( xmin, xmax )    # set the xlim to xmin, xmax\n</pre> <p>If you do not specify args, you can pass the xmin and xmax as kwargs, e.g.:</p> <pre data-language=\"python\">xlim(xmax=3) # adjust the max leaving min unchanged\nxlim(xmin=1) # adjust the min leaving max unchanged\n</pre> <p>Setting limits turns autoscaling off for the x-axis.</p> <p>The new axis limits are returned as a length 2 tuple.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.xscale\"><code>matplotlib.pyplot.xscale(*args, **kwargs)</code></dt> <dd>\n<p>Set the scaling of the <em>x</em>-axis.</p> <p>call signature:</p> <pre data-language=\"python\">xscale(scale, **kwargs)\n</pre> <p>The available scales are: ‘linear’ | ‘log’ | ‘logit’ | ‘symlog’</p> <p>Different keywords may be accepted, depending on the scale:</p> <blockquote> <div>\n<p>‘linear’</p> <p>‘log’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>:</dt> <dd>The base of the logarithm</dd> <dt>\n<em>nonposx</em>/<em>nonposy</em>: [‘mask’ | ‘clip’ ]</dt> <dd>non-positive values in <em>x</em> or <em>y</em> can be masked as invalid, or clipped to a very small positive number</dd> <dt>\n<em>subsx</em>/<em>subsy</em>:</dt> <dd>\n<p class=\"first\">Where to place the subticks between each major tick. Should be a sequence of integers. For example, in a log10 scale: <code>[2, 3, 4, 5, 6, 7, 8, 9]</code></p> <p class=\"last\">will place 8 logarithmically spaced minor ticks between each major tick.</p> </dd> </dl> </div>\n</blockquote> <p>‘logit’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>nonpos</em>: [‘mask’ | ‘clip’ ]</dt> <dd>values beyond ]0, 1[ can be masked as invalid, or clipped to a number very close to 0 or 1</dd> </dl> </div>\n</blockquote> <p>‘symlog’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>:</dt> <dd>The base of the logarithm</dd> <dt>\n<em>linthreshx</em>/<em>linthreshy</em>:</dt> <dd>The range (-<em>x</em>, <em>x</em>) within which the plot is linear (to avoid having the plot go to infinity around zero).</dd> <dt>\n<em>subsx</em>/<em>subsy</em>:</dt> <dd>\n<p class=\"first\">Where to place the subticks between each major tick. Should be a sequence of integers. For example, in a log10 scale: <code>[2, 3, 4, 5, 6, 7, 8, 9]</code></p> <p class=\"last\">will place 8 logarithmically spaced minor ticks between each major tick.</p> </dd> <dt>\n<em>linscalex</em>/<em>linscaley</em>:</dt> <dd>This allows the linear range (-<em>linthresh</em> to <em>linthresh</em>) to be stretched relative to the logarithmic range. Its value is the number of decades to use for each half of the linear range. For example, when <em>linscale</em> == 1.0 (the default), the space used for the positive and negative halves of the linear range will be equal to one decade in the logarithmic range.</dd> </dl> </div>\n</blockquote> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.xticks\"><code>matplotlib.pyplot.xticks(*args, **kwargs)</code></dt> <dd>\n<p>Get or set the <em>x</em>-limits of the current tick locations and labels.</p> <pre data-language=\"python\"># return locs, labels where locs is an array of tick locations and\n# labels is an array of tick labels.\nlocs, labels = xticks()\n\n# set the locations of the xticks\nxticks( arange(6) )\n\n# set the locations and labels of the xticks\nxticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )\n</pre> <p>The keyword args, if any, are <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties. For example, to rotate long labels:</p> <pre data-language=\"python\">xticks( arange(12), calendar.month_name[1:13], rotation=17 )\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.ylabel\"><code>matplotlib.pyplot.ylabel(s, *args, **kwargs)</code></dt> <dd>\n<p>Set the <em>y</em> axis label of the current axis.</p> <p>Defaults override is:</p> <pre data-language=\"python\">override = {\n   'fontsize'            : 'small',\n   'verticalalignment'   : 'center',\n   'horizontalalignment' : 'right',\n   'rotation'='vertical' : }\n</pre> <div class=\"admonition seealso\"> <p class=\"first admonition-title\">See also</p> <dl class=\"last docutils\"> <dt><a class=\"reference internal\" href=\"#matplotlib.pyplot.text\" title=\"matplotlib.pyplot.text\"><code>text()</code></a></dt> <dd>For information on how override and the optional args work.</dd> </dl> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.ylim\"><code>matplotlib.pyplot.ylim(*args, **kwargs)</code></dt> <dd>\n<p>Get or set the <em>y</em>-limits of the current axes.</p> <pre data-language=\"python\">ymin, ymax = ylim()   # return the current ylim\nylim( (ymin, ymax) )  # set the ylim to ymin, ymax\nylim( ymin, ymax )    # set the ylim to ymin, ymax\n</pre> <p>If you do not specify args, you can pass the <em>ymin</em> and <em>ymax</em> as kwargs, e.g.:</p> <pre data-language=\"python\">ylim(ymax=3) # adjust the max leaving min unchanged\nylim(ymin=1) # adjust the min leaving max unchanged\n</pre> <p>Setting limits turns autoscaling off for the y-axis.</p> <p>The new axis limits are returned as a length 2 tuple.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.yscale\"><code>matplotlib.pyplot.yscale(*args, **kwargs)</code></dt> <dd>\n<p>Set the scaling of the <em>y</em>-axis.</p> <p>call signature:</p> <pre data-language=\"python\">yscale(scale, **kwargs)\n</pre> <p>The available scales are: ‘linear’ | ‘log’ | ‘logit’ | ‘symlog’</p> <p>Different keywords may be accepted, depending on the scale:</p> <blockquote> <div>\n<p>‘linear’</p> <p>‘log’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>:</dt> <dd>The base of the logarithm</dd> <dt>\n<em>nonposx</em>/<em>nonposy</em>: [‘mask’ | ‘clip’ ]</dt> <dd>non-positive values in <em>x</em> or <em>y</em> can be masked as invalid, or clipped to a very small positive number</dd> <dt>\n<em>subsx</em>/<em>subsy</em>:</dt> <dd>\n<p class=\"first\">Where to place the subticks between each major tick. Should be a sequence of integers. For example, in a log10 scale: <code>[2, 3, 4, 5, 6, 7, 8, 9]</code></p> <p class=\"last\">will place 8 logarithmically spaced minor ticks between each major tick.</p> </dd> </dl> </div>\n</blockquote> <p>‘logit’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>nonpos</em>: [‘mask’ | ‘clip’ ]</dt> <dd>values beyond ]0, 1[ can be masked as invalid, or clipped to a number very close to 0 or 1</dd> </dl> </div>\n</blockquote> <p>‘symlog’</p> <blockquote> <div>\n<dl class=\"docutils\"> <dt>\n<em>basex</em>/<em>basey</em>:</dt> <dd>The base of the logarithm</dd> <dt>\n<em>linthreshx</em>/<em>linthreshy</em>:</dt> <dd>The range (-<em>x</em>, <em>x</em>) within which the plot is linear (to avoid having the plot go to infinity around zero).</dd> <dt>\n<em>subsx</em>/<em>subsy</em>:</dt> <dd>\n<p class=\"first\">Where to place the subticks between each major tick. Should be a sequence of integers. For example, in a log10 scale: <code>[2, 3, 4, 5, 6, 7, 8, 9]</code></p> <p class=\"last\">will place 8 logarithmically spaced minor ticks between each major tick.</p> </dd> <dt>\n<em>linscalex</em>/<em>linscaley</em>:</dt> <dd>This allows the linear range (-<em>linthresh</em> to <em>linthresh</em>) to be stretched relative to the logarithmic range. Its value is the number of decades to use for each half of the linear range. For example, when <em>linscale</em> == 1.0 (the default), the space used for the positive and negative halves of the linear range will be equal to one decade in the logarithmic range.</dd> </dl> </div>\n</blockquote> </div>\n</blockquote> </dd>\n</dl> <dl class=\"function\"> <dt id=\"matplotlib.pyplot.yticks\"><code>matplotlib.pyplot.yticks(*args, **kwargs)</code></dt> <dd>\n<p>Get or set the <em>y</em>-limits of the current tick locations and labels.</p> <pre data-language=\"python\"># return locs, labels where locs is an array of tick locations and\n# labels is an array of tick labels.\nlocs, labels = yticks()\n\n# set the locations of the yticks\nyticks( arange(6) )\n\n# set the locations and labels of the yticks\nyticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )\n</pre> <p>The keyword args, if any, are <a class=\"reference internal\" href=\"text_api#matplotlib.text.Text\" title=\"matplotlib.text.Text\"><code>Text</code></a> properties. For example, to rotate long labels:</p> <pre data-language=\"python\">yticks( arange(12), calendar.month_name[1:13], rotation=45 )\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2012&ndash;2016 Matplotlib Development Team. All rights reserved.<br>Licensed under the Matplotlib License Agreement.<br>\n    <a href=\"http://matplotlib.org/1.5.1/api/pyplot_api.html\" class=\"_attribution-link\">http://matplotlib.org/1.5.1/api/pyplot_api.html</a>\n  </p>\n</div>\n"}