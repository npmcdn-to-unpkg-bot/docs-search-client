{"index":"<h1>mocha</h1>\n<h2 id=\"installation\">Installation</h2> <p>Install with <a href=\"https://npmjs.org\">npm</a> globally:</p> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">$ npm install --global mocha\n</pre> </div> <p>or as a development dependency for your project:</p> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">$ npm install --save-dev mocha\n</pre> </div> <blockquote> <p>To install Mocha v3.0.0 or newer with <code class=\"highlighter-rouge\">npm</code>, you will need <code class=\"highlighter-rouge\">npm</code> v1.4.0 or newer. Additionally, to run Mocha, you will need Node.js v0.10 or newer.</p> </blockquote> <p>Mocha can also be installed via <a href=\"http://bower.io\">Bower</a> (<code class=\"highlighter-rouge\">bower install mocha</code>), and is available at <a href=\"https://cdnjs.com/libraries/mocha\">cdnjs</a>.</p> <h2 id=\"getting-started\">Getting Started</h2> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">$ npm install mocha\n$ mkdir test\n$ $EDITOR test/test.js # or open with your favorite editor\n</pre> </div> <p>In your editor:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var assert = require('assert');\ndescribe('Array', function() {\n  describe('#indexOf()', function() {\n    it('should return -1 when the value is not present', function() {\n      assert.equal(-1, [1,2,3].indexOf(4));\n    });\n  });\n});\n</pre> </div> <p>Back in the terminal:</p> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">  Array\n    #indexOf()\n      ✓ should return -1 when the value is not present\n\n\n  1 passing (9ms)\n</pre> </div> <h2 id=\"assertions\">Assertions</h2> <p>Mocha allows you to use any assertion library you wish. In the above example, we’re using Node.js’ built-in <a href=\"https://nodejs.org/api/assert.html\">assert</a> module–but generally, if it throws an <code class=\"highlighter-rouge\">Error</code>, it will work! This means you can use libraries such as:</p> <ul> <li>\n<a href=\"https://github.com/shouldjs/should.js\">should.js</a> - BDD style shown throughout these docs</li> <li>\n<a href=\"https://github.com/LearnBoost/expect.js\">expect.js</a> - <code class=\"highlighter-rouge\">expect()</code> style assertions</li> <li>\n<a href=\"http://chaijs.com/\">chai</a> - <code class=\"highlighter-rouge\">expect()</code>, <code class=\"highlighter-rouge\">assert()</code> and <code class=\"highlighter-rouge\">should</code>-style assertions</li> <li>\n<a href=\"https://github.com/visionmedia/better-assert\">better-assert</a> - C-style self-documenting <code class=\"highlighter-rouge\">assert()</code>\n</li> <li>\n<a href=\"http://unexpected.js.org\">unexpected</a> - “the extensible BDD assertion toolkit”</li> </ul> <h2 id=\"asynchronous-code\">Asynchronous Code</h2> <p>Testing asynchronous code with Mocha could not be simpler! Simply invoke the callback when your test is complete. By adding a callback (usually named <code class=\"highlighter-rouge\">done</code>) to <code class=\"highlighter-rouge\">it()</code>, Mocha will know that it should wait for this function to be called to complete the test.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('User', function() {\n  describe('#save()', function() {\n    it('should save without error', function(done) {\n      var user = new User('Luna');\n      user.save(function(err) {\n        if (err) done(err);\n        else done();\n      });\n    });\n  });\n});\n</pre> </div> <p>To make things even easier, the <code class=\"highlighter-rouge\">done()</code> callback accepts an error, so we may use this directly:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('User', function() {\n  describe('#save()', function() {\n    it('should save without error', function(done) {\n      var user = new User('Luna');\n      user.save(done);\n    });\n  });\n});\n</pre> </div> <h3 id=\"working-with-promises\">Working with Promises</h3> <p>Alternately, instead of using the <code class=\"highlighter-rouge\">done()</code> callback, you may return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>. This is useful if the APIs you are testing return promises instead of taking callbacks:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">beforeEach(function() {\n  return db.clear()\n    .then(function() {\n      return db.save([tobi, loki, jane]);\n    });\n});\n\ndescribe('#find()', function() {\n  it('respond with matching records', function() {\n    return db.find({ type: 'User' }).should.eventually.have.length(3);\n  });\n});\n</pre> </div> <blockquote> <p>The latter example uses <a href=\"https://www.npmjs.com/package/chai-as-promised\">Chai as Promised</a> for fluent promise assertions.</p> </blockquote> <p>In Mocha v3.0.0 and newer, returning a <code class=\"highlighter-rouge\">Promise</code> <em>and</em> calling <code class=\"highlighter-rouge\">done()</code> will result in an exception, as this is generally a mistake:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">const assert = require('assert');\n\nit('should complete this test', function (done) {\n  return new Promise(function (resolve) {\n    assert.ok(true);\n    resolve();\n  })\n    .then(done);\n});\n</pre> </div> <p>The above test will fail with <code class=\"highlighter-rouge\">Error: Resolution method is overspecified. Specify a callback *or* return a Promise; not both.</code>. In versions older than v3.0.0, the call to <code class=\"highlighter-rouge\">done()</code> is effectively ignored.</p> <h2 id=\"synchronous-code\">Synchronous Code</h2> <p>When testing synchronous code, omit the callback and Mocha will automatically continue on to the next test.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe('#indexOf()', function() {\n    it('should return -1 when the value is not present', function() {\n      [1,2,3].indexOf(5).should.equal(-1);\n      [1,2,3].indexOf(0).should.equal(-1);\n    });\n  });\n});\n</pre> </div> <h2 id=\"arrow-functions\">Arrow Functions</h2> <p>Passing <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a> (“lambdas”) to Mocha is discouraged. Due to the lexical binding of <code class=\"highlighter-rouge\">this</code>, such functions are unable to access the Mocha context. For example, the following code will fail due to the nature of lambdas:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('my suite', () =&gt; {\n  it('my test', () =&gt; {\n    // should set the timeout of this test to 1000 ms; instead will fail\n    this.timeout(1000);\n    assert.ok(true);\n  });\n});\n</pre> </div> <p><em>If you do not need to use</em> Mocha’s context, lambdas should work. However, the result will be more difficult to refactor if the need eventually arises.</p> <h2 id=\"hooks\">Hooks</h2> <p>With its default “BDD”-style interface, Mocha provides the hooks <code class=\"highlighter-rouge\">before()</code>, <code class=\"highlighter-rouge\">after()</code>, <code class=\"highlighter-rouge\">beforeEach()</code>, and <code class=\"highlighter-rouge\">afterEach()</code>. These should be used to set up preconditions and clean up after your tests.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('hooks', function() {\n\n  before(function() {\n    // runs before all tests in this block\n  });\n\n  after(function() {\n    // runs after all tests in this block\n  });\n\n  beforeEach(function() {\n    // runs before each test in this block\n  });\n\n  afterEach(function() {\n    // runs after each test in this block\n  });\n\n  // test cases\n});\n</pre> </div> <blockquote> <p>Tests can appear before, after, or interspersed with your hooks. Hooks will run in the order they are defined, as appropriate; all <code class=\"highlighter-rouge\">before()</code> hooks run (once), then any <code class=\"highlighter-rouge\">beforeEach()</code> hooks, tests, any <code class=\"highlighter-rouge\">afterEach()</code> hooks, and finally <code class=\"highlighter-rouge\">after()</code> hooks (once).</p> </blockquote> <h3 id=\"describing-hooks\">Describing Hooks</h3> <p>Any hook can be invoked with an optional description, making it easier to pinpoint errors in your tests. If a hook is given a named function, that name will be used if no description is supplied.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">beforeEach(function() {\n  // beforeEach hook\n});\n\nbeforeEach(function namedFun() {\n  // beforeEach:namedFun\n});\n\nbeforeEach('some description', function() {\n  // beforeEach:some description\n});\n</pre> </div> <h3 id=\"asynchronous-hooks\">Asynchronous Hooks</h3> <p>All hooks (<code class=\"highlighter-rouge\">before()</code>, <code class=\"highlighter-rouge\">after()</code>, <code class=\"highlighter-rouge\">beforeEach()</code>, <code class=\"highlighter-rouge\">afterEach()</code>) may be sync or async as well, behaving much like a regular test-case. For example, you may wish to populate database with dummy content before each test:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Connection', function() {\n  var db = new Connection,\n    tobi = new User('tobi'),\n    loki = new User('loki'),\n    jane = new User('jane');\n\n  beforeEach(function(done) {\n    db.clear(function(err) {\n      if (err) return done(err);\n      db.save([tobi, loki, jane], done);\n    });\n  });\n\n  describe('#find()', function() {\n    it('respond with matching records', function(done) {\n      db.find({type: 'User'}, function(err, res) {\n        if (err) return done(err);\n        res.should.have.length(3);\n        done();\n      });\n    });\n  });\n});\n</pre> </div> <h3 id=\"root-level-hooks\">Root-Level Hooks</h3> <p>You may also pick any file and add “root”-level hooks. For example, add <code class=\"highlighter-rouge\">beforeEach()</code> outside of all <code class=\"highlighter-rouge\">describe()</code> blocks. This will cause the callback to <code class=\"highlighter-rouge\">beforeEach()</code> to run before any test case, regardless of the file it lives in (this is because Mocha has an <em>implied</em> <code class=\"highlighter-rouge\">describe()</code> block, called the “root suite”).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">beforeEach(function() {\n  console.log('before every test in every file');\n});\n</pre> </div> <blockquote> <p>This is typically done in Node by placing your hook(s) in a <code class=\"highlighter-rouge\">.js</code> module, and using the <code class=\"highlighter-rouge\">--require /path/to/module</code> option on the command-line.</p> </blockquote> <h3 id=\"delayed-root-suite\">Delayed Root Suite</h3> <p>If you need to perform asynchronous operations before any of your suites are run, you may delay the root suite. Run <code class=\"highlighter-rouge\">mocha</code> with the <code class=\"highlighter-rouge\">--delay</code> flag. This will attach a special callback function, <code class=\"highlighter-rouge\">run()</code>, to the global context:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">setTimeout(function() {\n  // do some setup\n\n  describe('my suite', function() {\n    // ...\n  });\n\n  run();\n}, 5000);\n</pre> </div> <h2 id=\"pending-tests\">Pending Tests</h2> <p>“Pending”–as in “someone should write these test cases eventually”–test-cases are simply those <em>without</em> a callback:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe('#indexOf()', function() {\n    // pending test below\n    it('should return -1 when the value is not present');\n  });\n});\n</pre> </div> <p>Pending tests will be reported as such.</p> <h2 id=\"exclusive-tests\">Exclusive Tests</h2> <p>The exclusivity feature allows you to run <em>only</em> the specified suite or test-case by appending <code class=\"highlighter-rouge\">.only()</code> to the function. Here’s an example of executing only a particular suite:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe.only('#indexOf()', function() {\n    // ...\n  });\n});\n</pre> </div> <p><em>Note</em>: All nested suites will still be executed.</p> <p>Here’s an example of executing an individual test case:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe('#indexOf()', function() {\n    it.only('should return -1 unless present', function() {\n      // ...\n    });\n\n    it('should return the index when present', function() {\n      // ...\n    });\n  });\n});\n</pre> </div> <p>Previous to v3.0.0, <code class=\"highlighter-rouge\">.only()</code> used string matching to decide which tests to execute. As of v3.0.0, this is no longer the case. In v3.0.0 or newer, <code class=\"highlighter-rouge\">.only()</code> can be used multiple times to define a subset of tests to run:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe('#indexOf()', function() {\n    it.only('should return -1 unless present', function() {\n      // this test will be run\n    });\n\n    it.only('should return the index when present', function() {\n      // this test will also be run\n    });\n    \n    it('should return -1 if called with a non-Array context', function() {\n      // this test will not be run\n    });\n  });\n});\n</pre> </div> <p>You may also choose multiple suites:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe.only('#indexOf()', function() {\n    it('should return -1 unless present', function() {\n      // this test will be run\n    });\n\n    it('should return the index when present', function() {\n      // this test will also be run\n    });\n  });\n  \n  describe.only('#concat()', function () {\n    it('should return a new Array', function () {\n      // this test will also be run\n    });\n  });\n  \n  describe('#slice()', function () {\n    it('should return a new Array', function () {\n      // this test will not be run\n    });\n  });\n});\n</pre> </div> <p>But <em>tests will have precedence</em>:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe.only('#indexOf()', function() {\n    it.only('should return -1 unless present', function() {\n      // this test will be run\n    });\n\n    it('should return the index when present', function() {\n      // this test will not be run\n    });\n  });\n});\n</pre> </div> <p><em>Note</em>: Hooks, if present, will still be executed.</p> <blockquote> <p>Be mindful not to commit usages of <code class=\"highlighter-rouge\">.only()</code> to version control, unless you really mean it!</p> </blockquote> <h2 id=\"inclusive-tests\">Inclusive Tests</h2> <p>This feature is the inverse of <code class=\"highlighter-rouge\">.only()</code>. By appending <code class=\"highlighter-rouge\">.skip()</code>, you may tell Mocha to simply ignore these suite(s) and test case(s). Anything skipped will be marked as <a href=\"#pending-tests\">pending</a>, and reported as such. Here’s an example of skipping an entire suite:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe.skip('#indexOf()', function() {\n    // ...\n  });\n});\n</pre> </div> <p>Or a specific test-case:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe('#indexOf()', function() {\n    it.skip('should return -1 unless present', function() {\n      // this test will not be run\n    });\n\n    it('should return the index when present', function() {\n      // this test will be run\n    });\n  });\n});\n</pre> </div> <blockquote> <p><em>Best practice</em>: Use <code class=\"highlighter-rouge\">.skip()</code> instead of commenting tests out.</p> </blockquote> <p>You may also skip <em>at runtime</em> using <code class=\"highlighter-rouge\">this.skip()</code>. If a test needs an environment or configuration which cannot be detected beforehand, a runtime skip is appropriate. For example:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">it('should only test in the correct environment', function() {\n  if (/* check test environment */) {\n    // make assertions\n  } else {\n    this.skip();\n  }\n});\n</pre> </div> <p>The above test will be reported as <a href=\"#pending-tests\">pending</a>. It’s also important to note that calling <code class=\"highlighter-rouge\">this.skip()</code> will effectively <em>abort</em> the test.</p> <blockquote> <p><em>Best practice</em>: To avoid confusion, do not execute further instructions in a test or hook after calling <code class=\"highlighter-rouge\">this.skip()</code>.</p> </blockquote> <p>Contrast the above test with the following code:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">it('should only test in the correct environment', function() {\n  if (/* check test environment */) {\n    // make assertions\n  } else {\n    // do nothing\n  }\n});\n</pre> </div> <p>Because this test <em>does nothing</em>, it will be reported as <em>passing</em>.</p> <blockquote> <p><em>Best practice</em>: Don’t do nothing! A test should make an assertion or use <code class=\"highlighter-rouge\">this.skip()</code>.</p> </blockquote> <p>To skip <em>multiple</em> tests in this manner, use <code class=\"highlighter-rouge\">this.skip()</code> in a “before” hook:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">before(function() {\n  if (/* check test environment */) {\n    // setup code\n  } else {\n    this.skip();\n  }\n});\n</pre> </div> <blockquote> <p>Before Mocha v3.0.0, <code class=\"highlighter-rouge\">this.skip()</code> was not supported in asynchronous tests and hooks.</p> </blockquote> <h2 id=\"retry-tests\">Retry Tests</h2> <p>You can choose to retry failed tests up to a certain number of times. This feature is designed to handle end-to-end tests (functional tests/Selenium…) where resources cannot be easily mocked/stubbed. <strong>It’s not recommended to use this feature for unit tests</strong>.</p> <p>This feature does re-run <code class=\"highlighter-rouge\">beforeEach/afterEach</code> hooks but not <code class=\"highlighter-rouge\">before/after</code> hooks.</p> <p><strong>NOTE</strong>: Example below was written using Selenium webdriver (which <a href=\"https://github.com/SeleniumHQ/selenium/blob/c10e8a955883f004452cdde18096d70738397788/javascript/node/selenium-webdriver/testing/index.js\">overwrites global Mocha hooks</a> for <code class=\"highlighter-rouge\">Promise</code> chain).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('retries', function() {\n  // Retry all tests in this suite up to 4 times\n  this.retries(4);\n  \n  beforeEach(function () {\n    browser.get('http://www.yahoo.com');\n  });\n  \n  it('should succeed on the 3rd try', function () {\n    // Specify this test to only retry up to 2 times\n    this.retries(2);\n    expect($('.foo').isDisplayed()).to.eventually.be.true;\n  });\n});\n\n</pre> </div> <h2 id=\"dynamically-generating-tests\">Dynamically Generating Tests</h2> <p>Given Mocha’s use of <code class=\"highlighter-rouge\">Function.prototype.call</code> and function expressions to define suites and test cases, it’s straightforward to generate your tests dynamically. No special syntax is required — plain ol’ JavaScript can be used to achieve functionality similar to “parameterized” tests, which you may have seen in other frameworks.</p> <p>Take the following example:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var assert = require('chai').assert;\n\nfunction add() {\n  return Array.prototype.slice.call(arguments).reduce(function(prev, curr) {\n    return prev + curr;\n  }, 0);\n}\n\ndescribe('add()', function() {\n  var tests = [\n    {args: [1, 2],       expected: 3},\n    {args: [1, 2, 3],    expected: 6},\n    {args: [1, 2, 3, 4], expected: 10}\n  ];\n\n  tests.forEach(function(test) {\n    it('correctly adds ' + test.args.length + ' args', function() {\n      var res = add.apply(null, test.args);\n      assert.equal(res, test.expected);\n    });\n  });\n});\n</pre> </div> <p>The above code will produce a suite with three specs:</p> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">$ mocha\n\n  add()\n    ✓ correctly adds 2 args\n    ✓ correctly adds 3 args\n    ✓ correctly adds 4 args\n</pre> </div> <h2 id=\"test-duration\">Test duration</h2> <p>Many reporters will display test duration, as well as flagging tests that are slow, as shown here with the “spec” reporter:</p> <p><img src=\"https://mochajs.org/images/reporter-spec-duration.png\" alt=\"test duration\"></p> <p>To tweak what’s considered “slow”, you can use the <code class=\"highlighter-rouge\">slow()</code> method:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('something slow', function() {\n  this.slow(10000);\n\n  it('should take long enough for me to go make a sandwich', function() {\n    // ...\n  });\n});\n</pre> </div> <h2 id=\"timeouts\">Timeouts</h2> <h3 id=\"suite-level\">Suite-level</h3> <p>Suite-level timeouts may be applied to entire test “suites”, or disabled via <code class=\"highlighter-rouge\">this.timeout(0)</code>. This will be inherited by all nested suites and test-cases that do not override the value.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('a suite of tests', function() {\n  this.timeout(500);\n\n  it('should take less than 500ms', function(done){\n    setTimeout(done, 300);\n  });\n\n  it('should take less than 500ms as well', function(done){\n    setTimeout(done, 250);\n  });\n})\n</pre> </div> <h3 id=\"test-level\">Test-level</h3> <p>Test-specific timeouts may also be applied, or the use of <code class=\"highlighter-rouge\">this.timeout(0)</code> to disable timeouts all together:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">it('should take less than 500ms', function(done){\n  this.timeout(500);\n  setTimeout(done, 300);\n});\n</pre> </div> <h3 id=\"hook-level\">Hook-level</h3> <p>Hook-level timeouts may also be applied:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('a suite of tests', function() {\n  beforeEach(function(done) {\n    this.timeout(3000); // A very long environment setup.\n    setTimeout(done, 2500);\n  });\n});\n</pre> </div> <p>Again, use <code class=\"highlighter-rouge\">this.timeout(0)</code> to disable the timeout for a hook.</p> <blockquote> <p>In v3.0.0 or newer, a parameter passed to <code class=\"highlighter-rouge\">this.timeout()</code> greater than the <a href=\"https://developer.mozilla.org/docs/Web/API/WindowTimers/setTimeout#Maximum_delay_value\">maximum delay value</a> will cause the timeout to be disabled.</p> </blockquote> <h2 id=\"diffs\">Diffs</h2> <p>Mocha supports the <code class=\"highlighter-rouge\">err.expected</code> and <code class=\"highlighter-rouge\">err.actual</code> properties of any thrown <code class=\"highlighter-rouge\">AssertionError</code>s from an assertion library. Mocha will attempt to display the difference between what was expected, and what the assertion actually saw. Here’s an example of a “string” diff:</p> <p><img src=\"https://mochajs.org/images/reporter-string-diffs.png\" alt=\"string diffs\"></p> <h2 id=\"usage\">Usage</h2> <div class=\"highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">Usage: mocha [debug] [options] [files]\n\n\nCommands:\n\n  init &lt;path&gt;  initialize a client-side mocha setup at &lt;path&gt;\n\nOptions:\n\n  -h, --help                              output usage information\n  -V, --version                           output the version number\n  -A, --async-only                        force all tests to take a callback (async) or return a promise\n  -c, --colors                            force enabling of colors\n  -C, --no-colors                         force disabling of colors\n  -G, --growl                             enable growl notification support\n  -O, --reporter-options &lt;k=v,k2=v2,...&gt;  reporter-specific options\n  -R, --reporter &lt;name&gt;                   specify the reporter to use\n  -S, --sort                              sort test files\n  -b, --bail                              bail after first test failure\n  -d, --debug                             enable node's debugger, synonym for node --debug\n  -g, --grep &lt;pattern&gt;                    only run tests matching &lt;pattern&gt;\n  -f, --fgrep &lt;string&gt;                    only run tests containing &lt;string&gt;\n  -gc, --expose-gc                        expose gc extension\n  -i, --invert                            inverts --grep and --fgrep matches\n  -r, --require &lt;name&gt;                    require the given module\n  -s, --slow &lt;ms&gt;                         \"slow\" test threshold in milliseconds [75]\n  -t, --timeout &lt;ms&gt;                      set test-case timeout in milliseconds [2000]\n  -u, --ui &lt;name&gt;                         specify user-interface (bdd|tdd|qunit|exports)\n  -w, --watch                             watch files for changes\n  --check-leaks                           check for global variable leaks\n  --full-trace                            display the full stack trace\n  --compilers &lt;ext&gt;:&lt;module&gt;,...          use the given module(s) to compile files\n  --debug-brk                             enable node's debugger breaking on the first line\n  --globals &lt;names&gt;                       allow the given comma-delimited global [names]\n  --es_staging                            enable all staged features\n  --harmony&lt;_classes,_generators,...&gt;     all node --harmony* flags are available\n  --preserve-symlinks                     Instructs the module loader to preserve symbolic links when resolving and caching modules\n  --icu-data-dir                          include ICU data\n  --inline-diffs                          display actual/expected differences inline within each string\n  --interfaces                            display available interfaces\n  --no-deprecation                        silence deprecation warnings\n  --no-exit                               require a clean shutdown of the event loop: mocha will not call process.exit\n  --no-timeouts                           disables timeouts, given implicitly with --debug\n  --opts &lt;path&gt;                           specify opts path\n  --perf-basic-prof                       enable perf linux profiler (basic support)\n  --prof                                  log statistical profiling information\n  --log-timer-events                      Time events including external callbacks\n  --recursive                             include sub directories\n  --reporters                             display available reporters\n  --retries &lt;times&gt;                       set numbers of time to retry a failed test case\n  --throw-deprecation                     throw an exception anytime a deprecated function is used\n  --trace                                 trace function calls\n  --trace-deprecation                     show stack traces on deprecations\n  --use_strict                            enforce strict mode\n  --watch-extensions &lt;ext&gt;,...            additional extensions to monitor with --watch\n  --delay                                 wait for async suite definition\n</pre> </div> <h3 id=\"w---watch\"><code class=\"highlighter-rouge\">-w, --watch</code></h3> <p>Executes tests on changes to JavaScript in the CWD, and once initially.</p> <h3 id=\"compilers\"><code class=\"highlighter-rouge\">--compilers</code></h3> <p>CoffeeScript is no longer supported out of the box. CS and similar transpilers may be used by mapping the file extensions (for use with <code class=\"highlighter-rouge\">--watch</code>) and the module name. For example <code class=\"highlighter-rouge\">--compilers coffee:coffee-script</code> with CoffeeScript 1.6- or <code class=\"highlighter-rouge\">--compilers coffee:coffee-script/register</code> with CoffeeScript 1.7+.</p> <h4 id=\"about-babel\">About Babel</h4> <p>If your ES6 modules have extension <code class=\"highlighter-rouge\">.js</code>, you can <code class=\"highlighter-rouge\">npm install --save-dev babel-register</code> and use <code class=\"highlighter-rouge\">mocha --require babel-register</code>; <code class=\"highlighter-rouge\">--compilers</code> is only necessary if you need to specify a file extension.</p> <h3 id=\"b---bail\"><code class=\"highlighter-rouge\">-b, --bail</code></h3> <p>Only interested in the first exception? use <code class=\"highlighter-rouge\">--bail</code>!</p> <h3 id=\"d---debug\"><code class=\"highlighter-rouge\">-d, --debug</code></h3> <p>Enables node’s debugger support, this executes your script(s) with <code class=\"highlighter-rouge\">node debug &lt;file ...&gt;</code> allowing you to step through code and break with the <code class=\"highlighter-rouge\">debugger</code> statement. Note the difference between <code class=\"highlighter-rouge\">mocha debug</code> and <code class=\"highlighter-rouge\">mocha --debug</code>: <code class=\"highlighter-rouge\">mocha debug</code> will fire up node’s built-in debug client, <code class=\"highlighter-rouge\">mocha --debug</code> will allow you to use a different interface — such as the Blink Developer Tools.</p> <h3 id=\"globals-names\"><code class=\"highlighter-rouge\">--globals &lt;names&gt;</code></h3> <p>Accepts a comma-delimited list of accepted global variable names. For example, suppose your app deliberately exposes a global named <code class=\"highlighter-rouge\">app</code> and <code class=\"highlighter-rouge\">YUI</code>, you may want to add <code class=\"highlighter-rouge\">--globals app,YUI</code>. It also accepts wildcards. You could do <code class=\"highlighter-rouge\">--globals '*bar'</code> and it would match <code class=\"highlighter-rouge\">foobar</code>, <code class=\"highlighter-rouge\">barbar</code>, etc. You can also simply pass in <code class=\"highlighter-rouge\">'*'</code> to ignore all globals.</p> <h3 id=\"check-leaks\"><code class=\"highlighter-rouge\">--check-leaks</code></h3> <p>By default, Mocha will not check for global variables leaked while running tests, to enable this pass <code class=\"highlighter-rouge\">--check-leaks</code>, to specify globals that are acceptable use <code class=\"highlighter-rouge\">--globals</code>, for example <code class=\"highlighter-rouge\">--globals jQuery,MyLib</code>.</p> <h3 id=\"r---require-module-name\"><code class=\"highlighter-rouge\">-r, --require &lt;module-name&gt;</code></h3> <p>The <code class=\"highlighter-rouge\">--require</code> option is useful for libraries such as <a href=\"https://github.com/shouldjs/should.js\">should.js</a>, so you may simply <code class=\"highlighter-rouge\">--require should</code> instead of manually invoking <code class=\"highlighter-rouge\">require('should')</code> within each test file. Note that this works well for <code class=\"highlighter-rouge\">should</code> as it augments <code class=\"highlighter-rouge\">Object.prototype</code>, however if you wish to access a module’s exports you will have to require them, for example <code class=\"highlighter-rouge\">var should = require('should')</code>. Furthermore, it can be used with relative paths, e.g. <code class=\"highlighter-rouge\">--require ./test/helper.js</code></p> <h3 id=\"u---ui-name\"><code class=\"highlighter-rouge\">-u, --ui &lt;name&gt;</code></h3> <p>The <code class=\"highlighter-rouge\">--ui</code> option lets you specify the interface to use, defaulting to “bdd”.</p> <h3 id=\"r---reporter-name\"><code class=\"highlighter-rouge\">-R, --reporter &lt;name&gt;</code></h3> <p>The <code class=\"highlighter-rouge\">--reporter</code> option allows you to specify the reporter that will be used, defaulting to “spec”. This flag may also be used to utilize third-party reporters. For example if you <code class=\"highlighter-rouge\">npm install mocha-lcov-reporter</code> you may then do <code class=\"highlighter-rouge\">--reporter mocha-lcov-reporter</code>.</p> <h3 id=\"t---timeout-ms\"><code class=\"highlighter-rouge\">-t, --timeout &lt;ms&gt;</code></h3> <p>Specifies the test-case timeout, defaulting to 2 seconds. To override you may pass the timeout in milliseconds, or a value with the <code class=\"highlighter-rouge\">s</code> suffix, ex: <code class=\"highlighter-rouge\">--timeout 2s</code> or <code class=\"highlighter-rouge\">--timeout 2000</code> would be equivalent.</p> <h3 id=\"s---slow-ms\"><code class=\"highlighter-rouge\">-s, --slow &lt;ms&gt;</code></h3> <p>Specify the “slow” test threshold, defaulting to 75ms. Mocha uses this to highlight test-cases that are taking too long.</p> <h3 id=\"g---grep-pattern\"><code class=\"highlighter-rouge\">-g, --grep &lt;pattern&gt;</code></h3> <p>The <code class=\"highlighter-rouge\">--grep</code> option when specified will trigger mocha to only run tests matching the given <code class=\"highlighter-rouge\">pattern</code> which is internally compiled to a <code class=\"highlighter-rouge\">RegExp</code>.</p> <p>Suppose, for example, you have “api” related tests, as well as “app” related tests, as shown in the following snippet; One could use <code class=\"highlighter-rouge\">--grep api</code> or <code class=\"highlighter-rouge\">--grep app</code> to run one or the other. The same goes for any other part of a suite or test-case title, <code class=\"highlighter-rouge\">--grep users</code> would be valid as well, or even <code class=\"highlighter-rouge\">--grep GET</code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('api', function() {\n  describe('GET /api/users', function() {\n    it('respond with an array of users', function() {\n      // ...\n    });\n  });\n});\n\ndescribe('app', function() {\n  describe('GET /users', function() {\n    it('respond with an array of users', function() {\n      // ...\n    });\n  });\n});\n</pre> </div> <h2 id=\"interfaces\">Interfaces</h2> <p>Mocha’s “interface” system allows developers to choose their style of DSL. Mocha has <strong>BDD</strong>, <strong>TDD</strong>, <strong>Exports</strong>, <strong>QUnit</strong> and <strong>Require</strong>-style interfaces.</p> <h3 id=\"bdd\">BDD</h3> <p>The <strong>BDD</strong> interface provides <code class=\"highlighter-rouge\">describe()</code>, <code class=\"highlighter-rouge\">context()</code>, <code class=\"highlighter-rouge\">it()</code>, <code class=\"highlighter-rouge\">specify()</code>, <code class=\"highlighter-rouge\">before()</code>, <code class=\"highlighter-rouge\">after()</code>, <code class=\"highlighter-rouge\">beforeEach()</code>, and <code class=\"highlighter-rouge\">afterEach()</code>.</p> <p><code class=\"highlighter-rouge\">context()</code> is just an alias for <code class=\"highlighter-rouge\">describe()</code>, and behaves the same way; it just provides a way to keep tests easier to read and organized. Similarly, <code class=\"highlighter-rouge\">specify()</code> is an alias for <code class=\"highlighter-rouge\">it()</code>.</p> <blockquote> <p>All of the previous examples were written using the <strong>BDD</strong> interface.</p> </blockquote> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">  describe('Array', function() {\n    before(function() {\n      // ...\n    });\n\n    describe('#indexOf()', function() {\n      context('when not present', function() {\n        it('should not throw an error', function() {\n          (function() {\n            [1,2,3].indexOf(4);\n          }).should.not.throw();\n        });\n        it('should return -1', function() {\n          [1,2,3].indexOf(4).should.equal(-1);\n        });\n      });\n      context('when present', function() {\n        it('should return the index where the element first appears in the array', function() {\n          [1,2,3].indexOf(3).should.equal(2);\n        });\n      });\n    });\n  });\n</pre> </div> <h3 id=\"tdd\">TDD</h3> <p>The <strong>TDD</strong> interface provides <code class=\"highlighter-rouge\">suite()</code>, <code class=\"highlighter-rouge\">test()</code>, <code class=\"highlighter-rouge\">suiteSetup()</code>, <code class=\"highlighter-rouge\">suiteTeardown()</code>, <code class=\"highlighter-rouge\">setup()</code>, and <code class=\"highlighter-rouge\">teardown()</code>:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">suite('Array', function() {\n  setup(function() {\n    // ...\n  });\n\n  suite('#indexOf()', function() {\n    test('should return -1 when not present', function() {\n      assert.equal(-1, [1,2,3].indexOf(4));\n    });\n  });\n});\n</pre> </div> <h3 id=\"exports\">Exports</h3> <p>The <strong>Exports</strong> interface is much like Mocha’s predecessor <a href=\"https://github.com/tj/expresso\">expresso</a>. The keys <code class=\"highlighter-rouge\">before</code>, <code class=\"highlighter-rouge\">after</code>, <code class=\"highlighter-rouge\">beforeEach</code>, and <code class=\"highlighter-rouge\">afterEach</code> are special-cased, object values are suites, and function values are test-cases:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">module.exports = {\n  before: function() {\n    // ...\n  },\n\n  'Array': {\n    '#indexOf()': {\n      'should return -1 when not present': function() {\n        [1,2,3].indexOf(4).should.equal(-1);\n      }\n    }\n  }\n};\n</pre> </div> <h3 id=\"qunit\">QUnit</h3> <p>The <a href=\"http://qunitjs.com\">QUnit</a>-inspired interface matches the “flat” look of QUnit, where the test suite title is simply defined before the test-cases. Like TDD, it uses <code class=\"highlighter-rouge\">suite()</code> and <code class=\"highlighter-rouge\">test()</code>, but resembling BDD, it also contains <code class=\"highlighter-rouge\">before()</code>, <code class=\"highlighter-rouge\">after()</code>, <code class=\"highlighter-rouge\">beforeEach()</code>, and <code class=\"highlighter-rouge\">afterEach()</code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">function ok(expr, msg) {\n  if (!expr) throw new Error(msg);\n}\n\nsuite('Array');\n\ntest('#length', function() {\n  var arr = [1,2,3];\n  ok(arr.length == 3);\n});\n\ntest('#indexOf()', function() {\n  var arr = [1,2,3];\n  ok(arr.indexOf(1) == 0);\n  ok(arr.indexOf(2) == 1);\n  ok(arr.indexOf(3) == 2);\n});\n\nsuite('String');\n\ntest('#length', function() {\n  ok('foo'.length == 3);\n});\n</pre> </div> <h3 id=\"require\">Require</h3> <p>The <code class=\"highlighter-rouge\">require</code> interface allows you to require the <code class=\"highlighter-rouge\">describe</code> and friend words directly using <code class=\"highlighter-rouge\">require</code> and call them whatever you want. This interface is also useful if you want to avoid global variables in your tests.</p> <p><em>Note</em>: The <code class=\"highlighter-rouge\">require</code> interface cannot be run via the <code class=\"highlighter-rouge\">node</code> executable, and must be run via <code class=\"highlighter-rouge\">mocha</code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var testCase = require('mocha').describe;\nvar pre = require('mocha').before;\nvar assertions = require('mocha').it;\nvar assert = require('chai').assert;\n\ntestCase('Array', function() {\n  pre(function() {\n    // ...\n  });\n\n  testCase('#indexOf()', function() {\n    assertions('should return -1 when not present', function() {\n      assert.equal([1,2,3].indexOf(4), -1);\n    });\n  });\n});\n</pre> </div> <h2 id=\"reporters\">Reporters</h2> <p>Mocha reporters adjust to the terminal window, and always disable ANSI-escape coloring when the stdio streams are not associated with a TTY.</p> <h3 id=\"spec\">Spec</h3> <p>This is the default reporter. The “spec” reporter outputs a hierarchical view nested just as the test cases are.</p> <p><img src=\"https://mochajs.org/images/reporter-spec.png\" alt=\"spec reporter\"> <img src=\"https://mochajs.org/images/reporter-spec-fail.png\" alt=\"spec reporter with failure\"></p> <h3 id=\"dot-matrix\">Dot Matrix</h3> <p>The dot matrix (or “dot”) reporter is simply a series of characters which represent test cases. Failures highlight in red exclamation marks (<code class=\"highlighter-rouge\">!</code>), pending tests with a blue comma (<code class=\"highlighter-rouge\">,</code>), and slow tests as yellow. Good if you prefer minimal output.</p> <p><img src=\"https://mochajs.org/images/reporter-dot.png\" alt=\"dot matrix reporter\"></p> <h3 id=\"nyan\">Nyan</h3> <p>The “nyan” reporter is exactly what you might expect:</p> <p><img src=\"https://mochajs.org/images/reporter-nyan.png\" alt=\"js nyan cat reporter\"></p> <h3 id=\"tap\">TAP</h3> <p>The TAP reporter emits lines for a <a href=\"http://en.wikipedia.org/wiki/Test_Anything_Protocol\">Test-Anything-Protocol</a> consumer.</p> <p><img src=\"https://mochajs.org/images/reporter-tap.png\" alt=\"test anything protocol\"></p> <h3 id=\"landing-strip\">Landing Strip</h3> <p>The Landing Strip (<code class=\"highlighter-rouge\">landing</code>) reporter is a gimmicky test reporter simulating a plane landing :) unicode ftw</p> <p><img src=\"https://mochajs.org/images/reporter-landing.png\" alt=\"landing strip plane reporter\"> <img src=\"https://mochajs.org/images/reporter-landing-fail.png\" alt=\"landing strip with failure\"></p> <h3 id=\"list\">List</h3> <p>The “list” reporter outputs a simple specifications list as test cases pass or fail, outputting the failure details at the bottom of the output.</p> <p><img src=\"https://mochajs.org/images/reporter-list.png\" alt=\"list reporter\"></p> <h3 id=\"progress\">Progress</h3> <p>The “progress” reporter implements a simple progress-bar:</p> <p><img src=\"https://mochajs.org/images/reporter-progress.png\" alt=\"progress bar\"></p> <h3 id=\"json\">JSON</h3> <p>The “JSON” reporter outputs a single large JSON object when the tests have completed (failures or not).</p> <p><img src=\"https://mochajs.org/images/reporter-json.png\" alt=\"json reporter\"></p> <h3 id=\"json-stream\">JSON Stream</h3> <p>The “JSON stream” reporter outputs newline-delimited JSON “events” as they occur, beginning with a “start” event, followed by test passes or failures, and then the final “end” event.</p> <p><img src=\"https://mochajs.org/images/reporter-json-stream.png\" alt=\"json stream reporter\"></p> <h3 id=\"min\">Min</h3> <p>The “min” reporter displays the summary only, while still outputting errors on failure. This reporter works great with <code class=\"highlighter-rouge\">--watch</code> as it clears the terminal in order to keep your test summary at the top.</p> <p><img src=\"https://mochajs.org/images/reporter-min.png\" alt=\"min reporter\"></p> <h3 id=\"doc\">Doc</h3> <p>The “doc” reporter outputs a hierarchical HTML body representation of your tests. Wrap it with a header, footer, and some styling, then you have some fantastic documentation!</p> <p><img src=\"https://mochajs.org/images/reporter-doc.png\" alt=\"doc reporter\"></p> <p>For example, suppose you have the following JavaScript:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">describe('Array', function() {\n  describe('#indexOf()', function() {\n    it('should return -1 when the value is not present', function() {\n      [1,2,3].indexOf(5).should.equal(-1);\n      [1,2,3].indexOf(0).should.equal(-1);\n    });\n  });\n});\n</pre> </div> <p>The command <code class=\"highlighter-rouge\">mocha --reporter doc array</code> would yield:</p> <div class=\"language-html highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">&lt;section class=\"suite\"&gt;\n  &lt;h1&gt;Array&lt;/h1&gt;\n  &lt;dl&gt;\n    &lt;section class=\"suite\"&gt;\n      &lt;h1&gt;#indexOf()&lt;/h1&gt;\n      &lt;dl&gt;\n      &lt;dt&gt;should return -1 when the value is not present&lt;/dt&gt;\n      &lt;dd&gt;&lt;pre&gt;&lt;code&gt;[1,2,3].indexOf(5).should.equal(-1);\n[1,2,3].indexOf(0).should.equal(-1);&lt;/code&gt;&lt;/pre&gt;&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/section&gt;\n  &lt;/dl&gt;\n&lt;/section&gt;\n</pre> </div> <p>The SuperAgent request library <a href=\"http://visionmedia.github.io/superagent/docs/test.html\">test documentation</a> was generated with Mocha’s doc reporter using this simple make target:</p> <div class=\"language-makefile highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">test-docs:\n\t$(MAKE) test REPORTER=doc \\\n\t\t| cat docs/head.html - docs/tail.html \\\n\t\t&gt; docs/test.html\n</pre> </div> <p>View the entire <a href=\"https://github.com/visionmedia/superagent/blob/master/Makefile\">Makefile</a> for reference.</p> <h3 id=\"markdown\">Markdown</h3> <p>The “markdown” reporter generates a markdown TOC and body for your test suite. This is great if you want to use the tests as documentation within a Github wiki page, or a markdown file in the repository that Github can render. For example here is the Connect <a href=\"https://github.com/senchalabs/connect/blob/90a725343c2945aaee637e799b1cd11e065b2bff/tests.md\">test output</a>.</p> <h3 id=\"html\">HTML</h3> <p>The “HTML” reporter is currently the only browser reporter supported by Mocha, and it looks like this:</p> <p><img src=\"https://mochajs.org/images/reporter-html.png\" alt=\"HTML test reporter\"></p> <h3 id=\"undocumented-reporters\">Undocumented Reporters</h3> <p>The “XUnit” reporter is also available. By default, it will output to the console. To write directly to a file, use <code class=\"highlighter-rouge\">--reporter-options output=filename.xml</code>.</p> <h3 id=\"third-party-reporters\">Third party reporters</h3> <p>Mocha allows you to define custom third-party reporters. For more information see the <a href=\"https://github.com/mochajs/mocha/wiki/Third-party-reporters\">wiki</a>. An example is the <a href=\"https://github.com/travisjeffery/mocha-teamcity-reporter\">TeamCity reporter</a>.</p> <h2 id=\"running-mocha-in-the-browser\">Running Mocha in the Browser</h2> <p>Mocha runs in the browser. Every release of Mocha will have new builds of <code class=\"highlighter-rouge\">./mocha.js</code> and <code class=\"highlighter-rouge\">./mocha.css</code> for use in the browser.</p> <h3 id=\"browser-specific-methods\">Browser-specific methods</h3> <p>The following method(s) <em>only</em> function in a browser context:</p> <p><code class=\"highlighter-rouge\">mocha.allowUncaught()</code> : If called, uncaught errors will not be absorbed by the error handler.</p> <p>A typical setup might look something like the following, where we call <code class=\"highlighter-rouge\">mocha.setup('bdd')</code> to use the <strong>BDD</strong> interface before loading the test scripts, running them <code class=\"highlighter-rouge\">onload</code> with <code class=\"highlighter-rouge\">mocha.run()</code>.</p> <div class=\"language-html highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;Mocha Tests&lt;/title&gt;\n  &lt;link href=\"https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.css\" rel=\"stylesheet\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"mocha\"&gt;&lt;/div&gt;\n\n  &lt;script src=\"https://cdn.rawgit.com/jquery/jquery/2.1.4/dist/jquery.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.rawgit.com/Automattic/expect.js/0.3.1/index.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.rawgit.com/mochajs/mocha/2.2.5/mocha.js\"&gt;&lt;/script&gt;\n\n  &lt;script&gt;mocha.setup('bdd')&lt;/script&gt;\n  &lt;script src=\"test.array.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"test.object.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"test.xhr.js\"&gt;&lt;/script&gt;\n  &lt;script&gt;\n    mocha.checkLeaks();\n    mocha.globals(['jQuery']);\n    mocha.run();\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> </div> <h3 id=\"grep\">Grep</h3> <p>The browser may use the <code class=\"highlighter-rouge\">--grep</code> as functionality. Append a query-string to your URL: <code class=\"highlighter-rouge\">?grep=api</code>.</p> <h3 id=\"browser-configuration\">Browser Configuration</h3> <p>Mocha options can be set via <code class=\"highlighter-rouge\">mocha.setup()</code>. Examples:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">// Use \"tdd\" interface.  This is a shortcut to setting the interface;\n// any other options must be passed via an object.\nmocha.setup('tdd');\n\n// This is equivalent to the above.\nmocha.setup({\n  ui: 'tdd'\n});\n\n// Use \"tdd\" interface, ignore leaks, and force all tests to be asynchronous\nmocha.setup({\n  ui: 'tdd',\n  ignoreLeaks: true,\n  asyncOnly: true\n});\n</pre> </div> <h3 id=\"browser-specific-options\">Browser-specific Option(s)</h3> <p>The following option(s) <em>only</em> function in a browser context:</p> <p><code class=\"highlighter-rouge\">noHighlighting</code>: If set to <code class=\"highlighter-rouge\">true</code>, do not attempt to use syntax highlighting on output test code.</p> <h2 id=\"mochaopts\"><code class=\"highlighter-rouge\">mocha.opts</code></h2> <p>Back on the server, Mocha will attempt to load <code class=\"highlighter-rouge\">./test/mocha.opts</code> as a configuration file of sorts. The lines in this file are combined with any command-line arguments. The command-line arguments take precedence. For example, suppose you have the following <code class=\"highlighter-rouge\">mocha.opts</code> file:</p> <div class=\"highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">  --require should\n  --reporter dot\n  --ui bdd\n</pre> </div> <p>This will default the reporter to <code class=\"highlighter-rouge\">dot</code>, require the <code class=\"highlighter-rouge\">should</code> library, and use <code class=\"highlighter-rouge\">bdd</code> as the interface. With this, you may then invoke <code class=\"highlighter-rouge\">mocha</code> with additional arguments, here enabling <a href=\"http://growl.info\">Growl</a> support, and changing the reporter to <code class=\"highlighter-rouge\">list</code>:</p> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">$ mocha --reporter list --growl\n</pre> </div> <h2 id=\"the-test-directory\">The <code class=\"highlighter-rouge\">test/</code> Directory</h2> <p>By default, <code class=\"highlighter-rouge\">mocha</code> looks for the glob <code class=\"highlighter-rouge\">./test/*.js</code> and <code class=\"highlighter-rouge\">./test/*.coffee</code>, so you may want to put your tests in <code class=\"highlighter-rouge\">test/</code> folder.</p> <h2 id=\"editor-plugins\">Editor Plugins</h2> <p>The following editor-related packages are available:</p> <h3 id=\"textmate\">TextMate</h3> <p>The Mocha TextMate bundle includes snippets to make writing tests quicker and more enjoyable. To install the bundle, clone a copy of the <a href=\"https://github.com/mochajs/mocha\">Mocha repo</a>, and run:</p> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">$ make tm\n</pre> </div> <h3 id=\"jetbrains\">JetBrains</h3> <p><a href=\"http://jetbrains.com\">JetBrains</a> provides a <a href=\"http://www.jetbrains.com/idea/features/nodejs.html\">NodeJS plugin</a> for its suite of IDEs (IntelliJ IDEA, WebStorm, etc.), which contains a Mocha test runner, among other things.</p> <p><img src=\"https://mochajs.org/images/jetbrains-plugin.png\" alt=\"JetBrains Mocha Runner Plugin in Action\"></p> <p>The plugin is titled <strong>NodeJS</strong>, and can be installed via <strong>Preferences</strong> &gt; <strong>Plugins</strong>, assuming your license allows it.</p> <h3 id=\"wallabyjs\">Wallaby.js</h3> <p><a href=\"http://wallabyjs.com\">Wallaby.js</a> is a continuous testing tool that enables real-time code coverage for Mocha with any assertion library in JetBrains IDEs (IntelliJ IDEA, WebStorm, etc.) and Visual Studio for both browser and node.js projects.</p> <p><img src=\"https://mochajs.org/images/wallaby.png\" alt=\"Wallaby.js in Action\"></p> <h3 id=\"emacs\">Emacs</h3> <p><a href=\"https://www.gnu.org/software/emacs/\">Emacs</a> support for running Mocha tests is available via a 3rd party package <a href=\"https://github.com/scottaj/mocha.el\">mocha.el</a>. The package is available on MELPA, and can be installed via <code class=\"highlighter-rouge\">M-x package-install mocha</code>.</p> <p><img src=\"https://mochajs.org/images/emacs.png\" alt=\"Emacs Mocha Runner in Action\"></p> <h2 id=\"examples\">Examples</h2> <p>Real live example code:</p> <ul> <li><a href=\"https://github.com/visionmedia/express/tree/master/test\">Express</a></li> <li><a href=\"https://github.com/senchalabs/connect/tree/master/test\">Connect</a></li> <li><a href=\"https://github.com/visionmedia/superagent/tree/master/test/node\">SuperAgent</a></li> <li><a href=\"https://github.com/LearnBoost/websocket.io/tree/master/test\">WebSocket.io</a></li> <li><a href=\"https://github.com/mochajs/mocha/tree/master/test\">Mocha</a></li> </ul> <h2 id=\"testing-mocha\">Testing Mocha</h2> <p>To run Mocha’s tests, you will need GNU Make or compatible; Cygwin should work.</p> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">$ cd /path/to/mocha\n$ npm install\n$ npm test\n</pre> </div> <p>To use a different reporter:</p> <div class=\"language-sh highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">$ REPORTER=nyan npm test\n</pre> </div> <h2 id=\"more-information\">More Information</h2> <p>In addition to chatting with us on <a href=\"https://gitter.im/mochajs/mocha\">Gitter</a>, for additional information such as using spies, mocking, and shared behaviours be sure to check out the <a href=\"https://github.com/mochajs/mocha/wiki\">Mocha Wiki</a> on GitHub. For discussions join the <a href=\"http://groups.google.com/group/mochajs\">Google Group</a>. For a running example of Mocha, view <a href=\"https://mochajs.org/example/tests.html\">example/tests.html</a>. For the JavaScript API, view the <a href=\"https://github.com/mochajs/mocha/blob/master/lib/mocha.js#L51\">source</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Mocha contributors<br>Licensed under the Creative Commons Attribution 4.0 International License.<br>\n    <a href=\"https://mochajs.org/\" class=\"_attribution-link\">https://mochajs.org/</a>\n  </p>\n</div>\n"}