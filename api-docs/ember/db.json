{"index":"<h1>Ember.js</h1>   <h2>Modules</h2>\n<ul class=\"\"> <li class=\"level-3 \"> <a href=\"modules/ember\">ember</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-application\">ember-application</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-debug\">ember-debug</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-extension-support\">ember-extension-support</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-htmlbars\">ember-htmlbars</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-metal\">ember-metal</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-routing\">ember-routing</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-runtime\">ember-runtime</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-templates\">ember-templates</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-testing\">ember-testing</a> </li> <li class=\"level-3 \"> <a href=\"modules/ember-views\">ember-views</a> </li> </ul> <h2>Namespaces</h2>\n<ul class=\"\"> <li class=\"level-3 \"> <a href=\"classes/ember\">Ember</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.autolocation\">Ember.AutoLocation</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.features\">Ember.FEATURES</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.instrumentation\">Ember.Instrumentation</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.location\">Ember.Location</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.string\">Ember.String</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.computed\">Ember.computed</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.inject\">Ember.inject</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.run\">Ember.run</a> </li> </ul> <h2>Classes</h2>\n<ul class=\"\"> <li class=\"level-3 \"> <a href=\"classes/backburner\">Backburner</a> </li> <li class=\"level-3 \"> <a href=\"classes/containerproxymixin\">ContainerProxyMixin</a> </li> <li class=\"level-3 \"> <a href=\"classes/descriptor\">Descriptor</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.actionhandler\">Ember.ActionHandler</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.application\">Ember.Application</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.applicationinstance\">Ember.ApplicationInstance</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.applicationinstance.bootoptions\">Ember.ApplicationInstance.BootOptions</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.ariarolesupport\">Ember.AriaRoleSupport</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.array\">Ember.Array</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.arrayproxy\">Ember.ArrayProxy</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.binding\">Ember.Binding</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.checkbox\">Ember.Checkbox</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.classnamessupport\">Ember.ClassNamesSupport</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.comparable\">Ember.Comparable</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.component\">Ember.Component</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.computedproperty\">Ember.ComputedProperty</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.containerdebugadapter\">Ember.ContainerDebugAdapter</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.controller\">Ember.Controller</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.controllermixin\">Ember.ControllerMixin</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.copyable\">Ember.Copyable</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.coreobject\">Ember.CoreObject</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.coreview\">Ember.CoreView</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.dataadapter\">Ember.DataAdapter</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.debug\">Ember.Debug</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.defaultresolver\">Ember.DefaultResolver</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.eachproxy\">Ember.EachProxy</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.enumerable\">Ember.Enumerable</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.error\">Ember.Error</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.eventdispatcher\">Ember.EventDispatcher</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.evented\">Ember.Evented</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.freezable\">Ember.Freezable</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.htmlbars\">Ember.HTMLBars</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.hashlocation\">Ember.HashLocation</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.helper\">Ember.Helper</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.historylocation\">Ember.HistoryLocation</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.injectedproperty\">Ember.InjectedProperty</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.instrumentationsupport\">Ember.InstrumentationSupport</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.legacyviewsupport\">Ember.LegacyViewSupport</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.linkcomponent\">Ember.LinkComponent</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.map\">Ember.Map</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.mapwithdefault\">Ember.MapWithDefault</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.mixin\">Ember.Mixin</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.mutablearray\">Ember.MutableArray</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.mutableenumerable\">Ember.MutableEnumerable</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.namespace\">Ember.Namespace</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.nativearray\">Ember.NativeArray</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.nonelocation\">Ember.NoneLocation</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.object\">Ember.Object</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.objectproxy\">Ember.ObjectProxy</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.observable\">Ember.Observable</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.orderedset\">Ember.OrderedSet</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.promiseproxymixin\">Ember.PromiseProxyMixin</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.proxymixin\">Ember.ProxyMixin</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.route\">Ember.Route</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.router\">Ember.Router</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.service\">Ember.Service</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.targetactionsupport\">Ember.TargetActionSupport</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.templates.helpers\">Ember.Templates.helpers</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.test\">Ember.Test</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.test.adapter\">Ember.Test.Adapter</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.test.ember.test\">Ember.Test.Ember.Test</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.test.qunitadapter\">Ember.Test.QUnitAdapter</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.textarea\">Ember.TextArea</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.textfield\">Ember.TextField</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.textsupport\">Ember.TextSupport</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.view\">Ember.View</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.viewtargetactionsupport\">Ember.ViewTargetActionSupport</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.visibilitysupport\">Ember.VisibilitySupport</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.stream.stream\">Ember.stream.Stream</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.streams.dependency\">Ember.streams.Dependency</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.streams.ember.stream\">Ember.streams.Ember.stream</a> </li> <li class=\"level-3 \"> <a href=\"classes/ember.streams.subscriber\">Ember.streams.Subscriber</a> </li> <li class=\"level-3 \"> <a href=\"classes/function\">Function</a> </li> <li class=\"level-3 \"> <a href=\"classes/libraries\">Libraries</a> </li> <li class=\"level-3 \"> <a href=\"classes/rsvp\">RSVP</a> </li> <li class=\"level-3 \"> <a href=\"classes/rsvp.eventtarget\">RSVP.EventTarget</a> </li> <li class=\"level-3 \"> <a href=\"classes/rsvp.promise\">RSVP.Promise</a> </li> <li class=\"level-3 \"> <a href=\"classes/registryproxymixin\">RegistryProxyMixin</a> </li> <li class=\"level-3 \"> <a href=\"classes/routingservice\">RoutingService</a> </li> <li class=\"level-3 \"> <a href=\"http://emberjs.com/api/classes/String.html\">String</a> </li> <li class=\"level-3 \"> <a href=\"classes/transition\">Transition</a> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/\" class=\"_attribution-link\">http://emberjs.com/api/</a>\n  </p>\n</div>\n","data":"<h1 class=\"api-header\"> DS Namespace  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/core.js#L8\">addon/-private/core.js:8</a></p> <p>Module: <a href=\"data/modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>All Ember Data methods and functions are defined inside of this namespace.</p> </div> <div class=\"pane\" id=\"methods\">   <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_attr\">attr</h2>\n<span class=\"args\"> (type, options) </span><span class=\"type\">Attribute</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/attr.js#L38\">addon/attr.js:38</a> </div> <div class=\"description\"> <p><code>DS.attr</code> defines an attribute on a <a href=\"data/classes/ds.model\">DS.Model</a>. By default, attributes are passed through as-is, however you can specify an optional type to have the value automatically transformed. Ember Data ships with four basic transform types: <code>string</code>, <code>number</code>, <code>boolean</code> and <code>date</code>. You can define your own transforms by subclassing <a href=\"data/classes/ds.transform\">DS.Transform</a>.</p> <p>Note that you cannot use <code>attr</code> to define an attribute of <code>id</code>.</p> <p><code>DS.attr</code> takes an optional hash as a second parameter, currently supported options are:</p> <ul> <li>\n<code>defaultValue</code>: Pass a string or a function to be called to set the attribute to a default value if none is supplied.</li> </ul> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  username: DS.attr('string'),\n  email: DS.attr('string'),\n  verified: DS.attr('boolean', { defaultValue: false })\n});\n</pre> <p>Default value can also be a function. This is useful it you want to return a new object for each attribute.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  settings: attr({defaultValue: function() {\n    return {};\n  }})\n});\n</pre> <p>The <code>options</code> hash is passed as second argument to a transforms' <code>serialize</code> and <code>deserialize</code> method. This allows to configure a transformation and adapt the corresponding value, based on the config:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">export default DS.Model.extend({\n  text: DS.attr('text', {\n    uppercase: true\n  })\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">export default DS.Transform.extend({\n  serialize: function(value, options) {\n    if (options.uppercase) {\n      return value.toUpperCase();\n    }\n\n    return value;\n  },\n\n  deserialize: function(value) {\n    return value;\n  }\n})\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>type</strong> <span class=\"type\">String</span>\n</dt> <dd> the attribute type </dd> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt> <dd> a hash of options </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Attribute</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_belongsTo\">belongsTo</h2>\n<span class=\"args\"> (modelName, options) </span><span class=\"type\">Ember.computed</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/belongs-to.js#L5\">addon/-private/system/relationships/belongs-to.js:5</a> </div> <div class=\"description\"> <p><code>DS.belongsTo</code> is used to define One-To-One and One-To-Many relationships on a <a href=\"data/classes/ds.model\">DS.Model</a>.</p> <p><code>DS.belongsTo</code> takes an optional hash as a second parameter, currently supported options are:</p> <ul> <li>\n<code>async</code>: A boolean value used to explicitly declare this to be an async relationship.</li> <li>\n<code>inverse</code>: A string used to identify the inverse property on a related model in a One-To-Many relationship. See <a href=\"#toc_explicit-inverses\">Explicit Inverses</a>\n</li> </ul> <h4 class=\"anchorable-toc\" id=\"toc_one-to-one\">One-To-One</h4> <p>To declare a one-to-one relationship between two models, use <code>DS.belongsTo</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  profile: DS.belongsTo('profile')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  user: DS.belongsTo('user')\n});\n</pre>\n<h4 class=\"anchorable-toc\" id=\"toc_one-to-many\">One-To-Many</h4> <p>To declare a one-to-many relationship between two models, use <code>DS.belongsTo</code> in combination with <code>DS.hasMany</code>, like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n</pre> <p>You can avoid passing a string as the first parameter. In that case Ember Data will infer the type from the key name.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  post: DS.belongsTo()\n});\n</pre> <p>will lookup for a Post type.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt> <dd> (optional) type of the relationship </dd> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt> <dd> (optional) a hash of options </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Ember.computed</span> </dt>\n<dd> relationship</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_hasMany\">hasMany</h2>\n<span class=\"args\"> (type, options) </span><span class=\"type\">Ember.computed</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/has-many.js#L11\">addon/-private/system/relationships/has-many.js:11</a> </div> <div class=\"description\"> <p><code>DS.hasMany</code> is used to define One-To-Many and Many-To-Many relationships on a <a href=\"data/classes/ds.model\">DS.Model</a>.</p> <p><code>DS.hasMany</code> takes an optional hash as a second parameter, currently supported options are:</p> <ul> <li>\n<code>async</code>: A boolean value used to explicitly declare this to be an async relationship.</li> <li>\n<code>inverse</code>: A string used to identify the inverse property on a related model.</li> </ul> <h4 class=\"anchorable-toc\" id=\"toc_one-to-many\">One-To-Many</h4> <p>To declare a one-to-many relationship between two models, use <code>DS.belongsTo</code> in combination with <code>DS.hasMany</code>, like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n</pre>\n<h4 class=\"anchorable-toc\" id=\"toc_many-to-many\">Many-To-Many</h4> <p>To declare a many-to-many relationship between two models, use <code>DS.hasMany</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  tags: DS.hasMany('tag')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  posts: DS.hasMany('post')\n});\n</pre> <p>You can avoid passing a string as the first parameter. In that case Ember Data will infer the type from the singularized key name.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  tags: DS.hasMany()\n});\n</pre> <p>will lookup for a Tag type.</p> <h4 class=\"anchorable-toc\" id=\"toc_explicit-inverses\">Explicit Inverses</h4> <p>Ember Data will do its best to discover which relationships map to one another. In the one-to-many code above, for example, Ember Data can figure out that changing the <code>comments</code> relationship should update the <code>post</code> relationship on the inverse because post is the only relationship to that model.</p> <p>However, sometimes you may have multiple <code>belongsTo</code>/<code>hasManys</code> for the same type. You can specify which property on the related model is the inverse using <code>DS.hasMany</code>'s <code>inverse</code> option:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  onePost: DS.belongsTo('post'),\n  twoPost: DS.belongsTo('post'),\n  redPost: DS.belongsTo('post'),\n  bluePost: DS.belongsTo('post')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment', {\n    inverse: 'redPost'\n  })\n});\n</pre> <p>You can also specify an inverse on a <code>belongsTo</code>, which works how you'd expect.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>type</strong> <span class=\"type\">String</span>\n</dt> <dd> (optional) type of the relationship </dd> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt> <dd> (optional) a hash of options </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Ember.computed</span> </dt>\n<dd> relationship</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeModelName\">normalizeModelName</h2>\n<span class=\"args\"> (modelName) </span><span class=\"type\">String</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/normalize-model-name.js#L3\">addon/-private/system/normalize-model-name.js:3</a> </div> <div class=\"description\"> <p>All modelNames are dasherized internally. Changing this function may require changes to other normalization hooks (such as typeForRoot).</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> if the adapter can generate one, an ID</dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_VERSION\">VERSION</h2>\n<span class=\"type\">String</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/core.js#L15\">addon/-private/core.js:15</a> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data\" class=\"_attribution-link\">http://emberjs.com/api/data</a>\n  </p>\n</div>\n","modules/ember":"<h1 class=\"api-header\">ember Module</h1>   <h2>Submodules</h2> <ul> <li><a href=\"ember-application\">ember-application</a></li> <li><a href=\"ember-debug\">ember-debug</a></li> <li><a href=\"ember-extension-support\">ember-extension-support</a></li> <li><a href=\"ember-views\">ember-views</a></li> <li><a href=\"ember-templates\">ember-templates</a></li> <li><a href=\"ember-htmlbars\">ember-htmlbars</a></li> <li><a href=\"ember-routing\">ember-routing</a></li> <li><a href=\"ember-runtime\">ember-runtime</a></li> <li><a href=\"ember-testing\">ember-testing</a></li> </ul> <h2>Classes and Namespaces</h2> <ul>  <li class=\"\"><a href=\"../classes/rsvp\">RSVP</a></li> <li class=\"\"><a href=\"../classes/rsvp.eventtarget\">RSVP.EventTarget</a></li> <li class=\"\"><a href=\"../classes/rsvp.promise\">RSVP.Promise</a></li> <li class=\"public\"><a href=\"../classes/ember.applicationinstance\">Ember.ApplicationInstance</a></li> <li class=\"public\"><a href=\"../classes/ember.applicationinstance.bootoptions\">Ember.ApplicationInstance.BootOptions</a></li> <li class=\"public\"><a href=\"../classes/ember.application\">Ember.Application</a></li> <li class=\"public\"><a href=\"../classes/ember\">Ember</a></li> <li class=\"public\"><a href=\"../classes/ember.defaultresolver\">Ember.DefaultResolver</a></li> <li class=\"public\"><a href=\"../classes/ember.debug\">Ember.Debug</a></li> <li class=\"public\"><a href=\"../classes/ember.containerdebugadapter\">Ember.ContainerDebugAdapter</a></li> <li class=\"public\"><a href=\"../classes/ember.dataadapter\">Ember.DataAdapter</a></li> <li class=\"public\"><a href=\"../classes/ember.checkbox\">Ember.Checkbox</a></li> <li class=\"\"><a href=\"../classes/ember.templates.helpers\">Ember.Templates.helpers</a></li>  <li class=\"public\"><a href=\"../classes/ember.textarea\">Ember.TextArea</a></li> <li class=\"public\"><a href=\"../classes/ember.textfield\">Ember.TextField</a></li> <li class=\"\"><a href=\"../classes/ember.htmlbars\">Ember.HTMLBars</a></li> <li class=\"public\"><a href=\"../classes/ember.string\">Ember.String</a></li> <li class=\"public\"><a href=\"../classes/ember.component\">Ember.Component</a></li> <li class=\"public\"><a href=\"../classes/ember.helper\">Ember.Helper</a></li>  <li class=\"public\"><a href=\"../classes/ember.computedproperty\">Ember.ComputedProperty</a></li> <li class=\"public\"><a href=\"../classes/ember.computed\">Ember.computed</a></li> <li class=\"public\"><a href=\"../classes/ember.error\">Ember.Error</a></li> <li class=\"public\"><a href=\"../classes/ember.features\">Ember.FEATURES</a></li>        <li class=\"public\"><a href=\"../classes/ember.mixin\">Ember.Mixin</a></li>        <li class=\"public\"><a href=\"../classes/ember.route\">Ember.Route</a></li> <li class=\"public\"><a href=\"../classes/ember.router\">Ember.Router</a></li> <li class=\"public\"><a href=\"../classes/ember.controller\">Ember.Controller</a></li> <li class=\"public\"><a href=\"../classes/ember.inject\">Ember.inject</a></li> <li class=\"\"><a href=\"../classes/function\">Function</a></li> <li class=\"\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></li>   <li class=\"public\"><a href=\"../classes/ember.array\">Ember.Array</a></li>     <li class=\"public\"><a href=\"../classes/ember.evented\">Ember.Evented</a></li>  <li class=\"public\"><a href=\"../classes/ember.mutablearray\">Ember.MutableArray</a></li> <li class=\"public\"><a href=\"../classes/ember.mutableenumerable\">Ember.MutableEnumerable</a></li> <li class=\"public\"><a href=\"../classes/ember.observable\">Ember.Observable</a></li> <li class=\"public\"><a href=\"../classes/ember.promiseproxymixin\">Ember.PromiseProxyMixin</a></li>   <li class=\"public\"><a href=\"../classes/ember.arrayproxy\">Ember.ArrayProxy</a></li> <li class=\"public\"><a href=\"../classes/ember.coreobject\">Ember.CoreObject</a></li>  <li class=\"public\"><a href=\"../classes/ember.namespace\">Ember.Namespace</a></li> <li class=\"public\"><a href=\"../classes/ember.nativearray\">Ember.NativeArray</a></li> <li class=\"public\"><a href=\"../classes/ember.object\">Ember.Object</a></li> <li class=\"public\"><a href=\"../classes/ember.objectproxy\">Ember.ObjectProxy</a></li> <li class=\"public\"><a href=\"../classes/ember.service\">Ember.Service</a></li> <li class=\"public\"><a href=\"../classes/ember.test.adapter\">Ember.Test.Adapter</a></li> <li class=\"public\"><a href=\"../classes/ember.test.qunitadapter\">Ember.Test.QUnitAdapter</a></li> <li class=\"\"><a href=\"../classes/ember.test.ember.test\">Ember.Test.Ember.Test</a></li> <li class=\"public\"><a href=\"../classes/ember.test\">Ember.Test</a></li>   <li class=\"public\"><a href=\"../classes/ember.instrumentationsupport\">Ember.InstrumentationSupport</a></li>    <li class=\"public\"><a href=\"../classes/ember.visibilitysupport\">Ember.VisibilitySupport</a></li>    </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember.html</a>\n  </p>\n</div>\n","modules/ember-application":"<h1 class=\"api-header\">ember-application Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p>The <code>ApplicationInstance</code> encapsulates all of the stateful aspects of a running <code>Application</code>.</p> <p>At a high-level, we break application boot into two distinct phases:</p> <ul> <li>Definition time, where all of the classes, templates, and other dependencies are loaded (typically in the browser).</li> <li>Run time, where we begin executing the application once everything has loaded.</li> </ul> <p>Definition time can be expensive and only needs to happen once since it is an idempotent operation. For example, between test runs and FastBoot requests, the application stays the same. It is only the state that we want to reset.</p> <p>That state is what the <code>ApplicationInstance</code> manages: it is responsible for creating the container that contains all application state, and disposing of it once the particular test run or FastBoot request has finished.</p> <h2>Classes and Namespaces</h2> <ul> <li class=\"public\"><a href=\"../classes/ember.applicationinstance\">Ember.ApplicationInstance</a></li> <li class=\"public\"><a href=\"../classes/ember.applicationinstance.bootoptions\">Ember.ApplicationInstance.BootOptions</a></li> <li class=\"public\"><a href=\"../classes/ember.application\">Ember.Application</a></li> <li class=\"public\"><a href=\"../classes/ember.defaultresolver\">Ember.DefaultResolver</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-application.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-application.html</a>\n  </p>\n</div>\n","modules/ember-debug":"<h1 class=\"api-header\">ember-debug Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p>  <h2>Classes and Namespaces</h2> <ul> <li class=\"public\"><a href=\"../classes/ember.debug\">Ember.Debug</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-debug.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-debug.html</a>\n  </p>\n</div>\n","modules/ember-extension-support":"<h1 class=\"api-header\">ember-extension-support Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p>The <code>ContainerDebugAdapter</code> helps the container and resolver interface with tools that debug Ember such as the <a href=\"https://github.com/tildeio/ember-extension\">Ember Extension</a> for Chrome and Firefox.</p> <p>This class can be extended by a custom resolver implementer to override some of the methods with library-specific code.</p> <p>The methods likely to be overridden are:</p> <ul> <li><code>canCatalogEntriesByType</code></li> <li><code>catalogEntriesByType</code></li> </ul> <p>The adapter will need to be registered in the application's container as <code>container-debug-adapter:main</code>.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Application.initializer({\n  name: \"containerDebugAdapter\",\n\n  initialize: function(application) {\n    application.register('container-debug-adapter:main', require('app/container-debug-adapter'));\n  }\n});\n</pre> <h2>Classes and Namespaces</h2> <ul> <li class=\"public\"><a href=\"../classes/ember.containerdebugadapter\">Ember.ContainerDebugAdapter</a></li> <li class=\"public\"><a href=\"../classes/ember.dataadapter\">Ember.DataAdapter</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-extension-support.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-extension-support.html</a>\n  </p>\n</div>\n","modules/ember-htmlbars":"<h1 class=\"api-header\">ember-htmlbars Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p><a href=\"https://github.com/tildeio/htmlbars\">HTMLBars</a> is a <a href=\"http://handlebarsjs.com/\">Handlebars</a> compatible templating engine used by Ember.js. The classes and namespaces covered by this documentation attempt to focus on APIs for interacting with HTMLBars itself. For more general guidance on Ember.js templates and helpers, please see the <a href=\"ember-templates\">ember-templates</a> package.</p> <h2>Classes and Namespaces</h2> <ul> <li class=\"\"><a href=\"../classes/ember.htmlbars\">Ember.HTMLBars</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-htmlbars.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-htmlbars.html</a>\n  </p>\n</div>\n","modules/ember-metal":"<h1 class=\"api-header\">ember-metal Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p>This namespace contains all Ember methods and functions. Future versions of Ember may overwrite this namespace and therefore, you should avoid adding any new properties.</p> <p>At the heart of Ember is Ember-Runtime, a set of core functions that provide cross-platform compatibility and object property observing. Ember-Runtime is small and performance-focused so you can use it alongside other cross-platform libraries such as jQuery. For more details, see <a href=\"ember-runtime\">Ember-Runtime</a>.</p> <h2>Classes and Namespaces</h2> <ul> <li class=\"public\"><a href=\"../classes/ember\">Ember</a></li>    <li class=\"\"><a href=\"../classes/ember.streams.ember.stream\">Ember.streams.Ember.stream</a></li>  <li class=\"public\"><a href=\"../classes/ember.computedproperty\">Ember.ComputedProperty</a></li> <li class=\"public\"><a href=\"../classes/ember.computed\">Ember.computed</a></li>     <li class=\"public\"><a href=\"../classes/ember.mixin\">Ember.Mixin</a></li>  <li class=\"public\"><a href=\"../classes/ember.run\">Ember.run</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-metal.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-metal.html</a>\n  </p>\n</div>\n","modules/ember-routing":"<h1 class=\"api-header\">ember-routing Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p>Ember.Location returns an instance of the correct implementation of the <code>location</code> API.</p> <h2 class=\"anchorable-toc\" id=\"toc_implementations\">Implementations</h2> <p>You can pass an implementation name (<code>hash</code>, <code>history</code>, <code>none</code>) to force a particular implementation to be used in your application.</p> <h3 class=\"anchorable-toc\" id=\"toc_hashlocation\">HashLocation</h3> <p>Using <code>HashLocation</code> results in URLs with a <code>#</code> (hash sign) separating the server side URL portion of the URL from the portion that is used by Ember. This relies upon the <code>hashchange</code> event existing in the browser.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'hash'\n});\n</pre> <p>This will result in a posts.new url of <code>/#/posts/new</code>.</p> <h3 class=\"anchorable-toc\" id=\"toc_historylocation\">HistoryLocation</h3> <p>Using <code>HistoryLocation</code> results in URLs that are indistinguishable from a standard URL. This relies upon the browser's <code>history</code> API.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'history'\n});\n</pre> <p>This will result in a posts.new url of <code>/posts/new</code>.</p> <p>Keep in mind that your server must serve the Ember app at all the routes you define.</p> <h3 class=\"anchorable-toc\" id=\"toc_autolocation\">AutoLocation</h3> <p>Using <code>AutoLocation</code>, the router will use the best Location class supported by the browser it is running in.</p> <p>Browsers that support the <code>history</code> API will use <code>HistoryLocation</code>, those that do not, but still support the <code>hashchange</code> event will use <code>HashLocation</code>, and in the rare case neither is supported will use <code>NoneLocation</code>.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'auto'\n});\n</pre> <p>This will result in a posts.new url of <code>/posts/new</code> for modern browsers that support the <code>history</code> api or <code>/#/posts/new</code> for older ones, like Internet Explorer 9 and below.</p> <p>When a user visits a link to your application, they will be automatically upgraded or downgraded to the appropriate <code>Location</code> class, with the URL transformed accordingly, if needed.</p> <p>Keep in mind that since some of your users will use <code>HistoryLocation</code>, your server must serve the Ember app at all the routes you define.</p> <h3 class=\"anchorable-toc\" id=\"toc_nonelocation\">NoneLocation</h3> <p>Using <code>NoneLocation</code> causes Ember to not store the applications URL state in the actual URL. This is generally used for testing purposes, and is one of the changes made when calling <code>App.setupForTesting()</code>.</p> <h2 class=\"anchorable-toc\" id=\"toc_location-api\">Location API</h2> <p>Each location implementation must provide the following methods:</p> <ul> <li>implementation: returns the string name used to reference the implementation.</li> <li>getURL: returns the current URL.</li> <li>setURL(path): sets the current URL.</li> <li>replaceURL(path): replace the current URL (optional).</li> <li>onUpdateURL(callback): triggers the callback when the URL changes.</li> <li>formatURL(url): formats <code>url</code> to be placed into <code>href</code> attribute.</li> <li>detect() (optional): instructs the location to do any feature detection necessary. If the location needs to redirect to a different URL, it can cancel routing by setting the <code>cancelRouterSetup</code> property on itself to <code>false</code>.</li> </ul> <p>Calling setURL or replaceURL will not trigger onUpdateURL callbacks.</p> <h2 class=\"anchorable-toc\" id=\"toc_custom-implementation\">Custom implementation</h2> <p>Ember scans <code>app/locations/*</code> for extending the Location API.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.HistoryLocation.extend({\n  implementation: 'history-url-logging',\n\n  pushState: function (path) {\n    console.log(path);\n    this._super.apply(this, arguments);\n  }\n});\n</pre> <h2>Classes and Namespaces</h2> <ul>        <li class=\"public\"><a href=\"../classes/ember.route\">Ember.Route</a></li> <li class=\"public\"><a href=\"../classes/ember.router\">Ember.Router</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-routing.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-routing.html</a>\n  </p>\n</div>\n","modules/ember-runtime":"<h1 class=\"api-header\">ember-runtime Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p>Defines string helper methods including string formatting and localization. Unless <code>EmberENV.EXTEND_PROTOTYPES.String</code> is <code>false</code> these methods will also be added to the <code>String.prototype</code> as well.</p> <h2>Classes and Namespaces</h2> <ul> <li class=\"public\"><a href=\"../classes/ember.string\">Ember.String</a></li> <li class=\"public\"><a href=\"../classes/ember.controller\">Ember.Controller</a></li> <li class=\"public\"><a href=\"../classes/ember.inject\">Ember.inject</a></li> <li class=\"\"><a href=\"../classes/function\">Function</a></li> <li class=\"\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></li>   <li class=\"public\"><a href=\"../classes/ember.array\">Ember.Array</a></li>     <li class=\"public\"><a href=\"../classes/ember.evented\">Ember.Evented</a></li>  <li class=\"public\"><a href=\"../classes/ember.mutablearray\">Ember.MutableArray</a></li> <li class=\"public\"><a href=\"../classes/ember.mutableenumerable\">Ember.MutableEnumerable</a></li> <li class=\"public\"><a href=\"../classes/ember.observable\">Ember.Observable</a></li> <li class=\"public\"><a href=\"../classes/ember.promiseproxymixin\">Ember.PromiseProxyMixin</a></li>   <li class=\"public\"><a href=\"../classes/ember.arrayproxy\">Ember.ArrayProxy</a></li> <li class=\"public\"><a href=\"../classes/ember.coreobject\">Ember.CoreObject</a></li> <li class=\"public\"><a href=\"../classes/ember.namespace\">Ember.Namespace</a></li> <li class=\"public\"><a href=\"../classes/ember.nativearray\">Ember.NativeArray</a></li> <li class=\"public\"><a href=\"../classes/ember.object\">Ember.Object</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-runtime.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-runtime.html</a>\n  </p>\n</div>\n","modules/ember-templates":"<h1 class=\"api-header\">ember-templates Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p>Ember templates are executed by <a href=\"https://github.com/tildeio/htmlbars\">HTMLBars</a>, an HTML-friendly version of <a href=\"http://handlebarsjs.com/\">Handlebars</a>. Any valid Handlebars syntax is valid in an Ember template.</p> <h3 class=\"anchorable-toc\" id=\"toc_showing-a-property\">Showing a property</h3> <p>Templates manage the flow of an application's UI, and display state (through the DOM) to a user. For example, given a component with the property \"name\", that component's template can use the name in several ways:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// app/components/person.js\nexport default Ember.Component.extend({\n  name: 'Jill'\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{! app/components/person.hbs }}\n{{name}}\n&lt;div&gt;{{name}}&lt;/div&gt;\n&lt;span data-name={{name}}&gt;&lt;/span&gt;\n</pre> <p>Any time the \"name\" property on the component changes, the DOM will be updated.</p> <p>Properties can be chained as well:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{aUserModel.name}}\n&lt;div&gt;{{listOfUsers.firstObject.name}}&lt;/div&gt;\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_using-ember-helpers\">Using Ember helpers</h3> <p>When content is passed in mustaches <code>{{}}</code>, Ember will first try to find a helper or component with that name. For example, the <code>if</code> helper:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{if name \"I have a name\" \"I have no name\"}}\n&lt;span data-has-name={{if name true}}&gt;&lt;/span&gt;\n</pre> <p>The returned value is placed where the <code>{{}}</code> is called. The above style is called \"inline\". A second style of helper usage is called \"block\". For example:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#if name}}\n  I have a name\n{{else}}\n  I have no name\n{{/if}}\n</pre> <p>The block form of helpers allows you to control how the UI is created based on the values of properties.</p> <p>A third form of helper is called \"nested\". For example here the concat helper will add \" Doe\" to a displayed name if the person has no last name:</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;span data-name={{concat firstName (\n if lastName (concat \" \" lastName) \"Doe\"\n)}}&gt;&lt;/span&gt;\n</pre> <p>Ember's built-in helpers are described under the <a href=\"../classes/ember.templates.helpers\">Ember.Templates.helpers</a> namespace. Documentation on creating custom helpers can be found under <a href=\"../classes/ember.helper\">Ember.Helper</a>.</p> <h3 class=\"anchorable-toc\" id=\"toc_invoking-a-component\">Invoking a Component</h3> <p>Ember components represent state to the UI of an application. Further reading on components can be found under <a href=\"../classes/ember.component\">Ember.Component</a>.</p> <h2>Classes and Namespaces</h2> <ul> <li class=\"\"><a href=\"../classes/ember.templates.helpers\">Ember.Templates.helpers</a></li>  <li class=\"public\"><a href=\"../classes/ember.helper\">Ember.Helper</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-templates.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-templates.html</a>\n  </p>\n</div>\n","modules/ember-testing":"<h1 class=\"api-header\">ember-testing Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p>The primary purpose of this class is to create hooks that can be implemented by an adapter for various test frameworks.</p> <h2>Classes and Namespaces</h2> <ul> <li class=\"public\"><a href=\"../classes/ember.test.adapter\">Ember.Test.Adapter</a></li> <li class=\"public\"><a href=\"../classes/ember.test\">Ember.Test</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-testing.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-testing.html</a>\n  </p>\n</div>\n","classes/ember.autolocation":"<h1 class=\"api-header\"> Ember.AutoLocation Namespace  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/location/auto_location.js#L25\">packages/ember-routing/lib/location/auto_location.js:25</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"description\"> <p>Ember.AutoLocation will select the best location option based off browser support with the priority order: history, hash, none.</p> <p>Clean pushState paths accessed by hashchange-only browsers will be redirected to the hash-equivalent and vice versa so future transitions are consistent.</p> <p>Keep in mind that since some of your users will use <code>HistoryLocation</code>, your server must serve the Ember app at all the routes you define.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.AutoLocation.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.AutoLocation.html</a>\n  </p>\n</div>\n","classes/ember.instrumentation":"<h1 class=\"api-header\"> Ember.Instrumentation Namespace  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/instrumentation.js#L4\">packages/ember-metal/lib/instrumentation.js:4</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>The purpose of the Ember Instrumentation module is to provide efficient, general-purpose instrumentation for Ember.</p> <p>Subscribe to a listener by using <code>Ember.subscribe</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.subscribe(\"render\", {\n  before: function(name, timestamp, payload) {\n\n  },\n\n  after: function(name, timestamp, payload) {\n\n  }\n});\n</pre> <p>If you return a value from the <code>before</code> callback, that same value will be passed as a fourth parameter to the <code>after</code> callback.</p> <p>Instrument a block of code by using <code>Ember.instrument</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.instrument(\"render.handlebars\", payload, function() {\n  // rendering logic\n}, binding);\n</pre> <p>Event names passed to <code>Ember.instrument</code> are namespaced by periods, from more general to more specific. Subscribers can listen for events by whatever level of granularity they are interested in.</p> <p>In the above example, the event is <code>render.handlebars</code>, and the subscriber listened for all events beginning with <code>render</code>. It would receive callbacks for events named <code>render</code>, <code>render.handlebars</code>, <code>render.container</code>, or even <code>render.handlebars.layout</code>.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Instrumentation.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Instrumentation.html</a>\n  </p>\n</div>\n","classes/ember.features":"<h1 class=\"api-header\"> Ember.FEATURES Namespace  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/features.js#L5\">packages/ember-metal/lib/features.js:5</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>The hash of enabled Canary features. Add to this, any canary features before creating your application.</p> <p>Alternatively (and recommended), you can also define <code>EmberENV.FEATURES</code> if you need to enable features flagged at runtime.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isEnabled\">isEnabled</h2>\n<span class=\"args\"> (feature) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/features.js#L20\">packages/ember-metal/lib/features.js:20</a> <br>Available since 1.1.0 </div> <div class=\"description\"> <p>Determine whether the specified <code>feature</code> is enabled. Used by Ember's build tools to exclude experimental features from beta/stable builds.</p> <p>You can define the following configuration options:</p> <ul> <li>\n<code>EmberENV.ENABLE_OPTIONAL_FEATURES</code> - enable any features that have not been explicitly enabled/disabled.</li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>feature</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The feature to check </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.FEATURES.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.FEATURES.html</a>\n  </p>\n</div>\n","classes/ember.location":"<h1 class=\"api-header\"> Ember.Location Namespace  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/location/api.js#L10\">packages/ember-routing/lib/location/api.js:10</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"description\"> <p>Ember.Location returns an instance of the correct implementation of the <code>location</code> API.</p> <h2 class=\"anchorable-toc\" id=\"toc_implementations\">Implementations</h2> <p>You can pass an implementation name (<code>hash</code>, <code>history</code>, <code>none</code>) to force a particular implementation to be used in your application.</p> <h3 class=\"anchorable-toc\" id=\"toc_hashlocation\">HashLocation</h3> <p>Using <code>HashLocation</code> results in URLs with a <code>#</code> (hash sign) separating the server side URL portion of the URL from the portion that is used by Ember. This relies upon the <code>hashchange</code> event existing in the browser.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'hash'\n});\n</pre> <p>This will result in a posts.new url of <code>/#/posts/new</code>.</p> <h3 class=\"anchorable-toc\" id=\"toc_historylocation\">HistoryLocation</h3> <p>Using <code>HistoryLocation</code> results in URLs that are indistinguishable from a standard URL. This relies upon the browser's <code>history</code> API.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'history'\n});\n</pre> <p>This will result in a posts.new url of <code>/posts/new</code>.</p> <p>Keep in mind that your server must serve the Ember app at all the routes you define.</p> <h3 class=\"anchorable-toc\" id=\"toc_autolocation\">AutoLocation</h3> <p>Using <code>AutoLocation</code>, the router will use the best Location class supported by the browser it is running in.</p> <p>Browsers that support the <code>history</code> API will use <code>HistoryLocation</code>, those that do not, but still support the <code>hashchange</code> event will use <code>HashLocation</code>, and in the rare case neither is supported will use <code>NoneLocation</code>.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'auto'\n});\n</pre> <p>This will result in a posts.new url of <code>/posts/new</code> for modern browsers that support the <code>history</code> api or <code>/#/posts/new</code> for older ones, like Internet Explorer 9 and below.</p> <p>When a user visits a link to your application, they will be automatically upgraded or downgraded to the appropriate <code>Location</code> class, with the URL transformed accordingly, if needed.</p> <p>Keep in mind that since some of your users will use <code>HistoryLocation</code>, your server must serve the Ember app at all the routes you define.</p> <h3 class=\"anchorable-toc\" id=\"toc_nonelocation\">NoneLocation</h3> <p>Using <code>NoneLocation</code> causes Ember to not store the applications URL state in the actual URL. This is generally used for testing purposes, and is one of the changes made when calling <code>App.setupForTesting()</code>.</p> <h2 class=\"anchorable-toc\" id=\"toc_location-api\">Location API</h2> <p>Each location implementation must provide the following methods:</p> <ul> <li>implementation: returns the string name used to reference the implementation.</li> <li>getURL: returns the current URL.</li> <li>setURL(path): sets the current URL.</li> <li>replaceURL(path): replace the current URL (optional).</li> <li>onUpdateURL(callback): triggers the callback when the URL changes.</li> <li>formatURL(url): formats <code>url</code> to be placed into <code>href</code> attribute.</li> <li>detect() (optional): instructs the location to do any feature detection necessary. If the location needs to redirect to a different URL, it can cancel routing by setting the <code>cancelRouterSetup</code> property on itself to <code>false</code>.</li> </ul> <p>Calling setURL or replaceURL will not trigger onUpdateURL callbacks.</p> <h2 class=\"anchorable-toc\" id=\"toc_custom-implementation\">Custom implementation</h2> <p>Ember scans <code>app/locations/*</code> for extending the Location API.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.HistoryLocation.extend({\n  implementation: 'history-url-logging',\n\n  pushState: function (path) {\n    console.log(path);\n    this._super.apply(this, arguments);\n  }\n});\n</pre> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Location.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Location.html</a>\n  </p>\n</div>\n","classes/ember.inject":"<h1 class=\"api-header\"> Ember.inject Namespace  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/inject.js#L4\">packages/ember-runtime/lib/inject.js:4</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>Namespace for injection helper methods.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_controller\">controller</h2>\n<span class=\"args\"> (name) </span><span class=\"type\"><a href=\"ember.injectedproperty\">Ember.InjectedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/controllers/controller.js#L31\">packages/ember-runtime/lib/controllers/controller.js:31</a> <br>Available since 1.10.0 </div> <div class=\"description\"> <p>Creates a property that lazily looks up another controller in the container. Can only be used when defining another controller.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostController = Ember.Controller.extend({\n  posts: Ember.inject.controller()\n});\n</pre> <p>This example will create a <code>posts</code> property on the <code>post</code> controller that looks up the <code>posts</code> controller in the container, making it easy to reference other controllers. This is functionally equivalent to:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostController = Ember.Controller.extend({\n  needs: 'posts',\n  posts: Ember.computed.alias('controllers.posts')\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> (optional) name of the controller to inject, defaults to the property's name </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.injectedproperty\">Ember.InjectedProperty</a></span> </dt>\n<dd> injection descriptor instance</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_service\">service</h2>\n<span class=\"args\"> (name) </span><span class=\"type\"><a href=\"ember.injectedproperty\">Ember.InjectedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/service.js#L5\">packages/ember-runtime/lib/system/service.js:5</a> <br>Available since 1.10.0 </div> <div class=\"description\"> <p>Creates a property that lazily looks up a service in the container. There are no restrictions as to what objects a service can be injected into.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ApplicationRoute = Ember.Route.extend({\n  authManager: Ember.inject.service('auth'),\n\n  model: function() {\n    return this.get('authManager').findCurrentUser();\n  }\n});\n</pre> <p>This example will create an <code>authManager</code> property on the application route that looks up the <code>auth</code> service in the container, making it easily accessible in the <code>model</code> hook.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> (optional) name of the service to inject, defaults to the property's name </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.injectedproperty\">Ember.InjectedProperty</a></span> </dt>\n<dd> injection descriptor instance</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.inject.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.inject.html</a>\n  </p>\n</div>\n","classes/ember.string":"<h1 class=\"api-header\"> Ember.String Namespace  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L144\">packages/ember-runtime/lib/system/string.js:144</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>Defines string helper methods including string formatting and localization. Unless <code>EmberENV.EXTEND_PROTOTYPES.String</code> is <code>false</code> these methods will also be added to the <code>String.prototype</code> as well.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_camelize\">camelize</h2>\n<span class=\"args\"> (str) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L263\">packages/ember-runtime/lib/system/string.js:263</a> </div> <div class=\"description\"> <p>Returns the lowerCamelCase form of a string.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">'innerHTML'.camelize();          // 'innerHTML'\n'action_name'.camelize();        // 'actionName'\n'css-class-name'.camelize();     // 'cssClassName'\n'my favorite items'.camelize();  // 'myFavoriteItems'\n'My Favorite Items'.camelize();  // 'myFavoriteItems'\n'private-docs/owner-invoice'.camelize(); // 'privateDocs/ownerInvoice'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The string to camelize. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> the camelized string.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_capitalize\">capitalize</h2>\n<span class=\"args\"> (str) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L319\">packages/ember-runtime/lib/system/string.js:319</a> </div> <div class=\"description\"> <p>Returns the Capitalized form of a string</p> <pre class=\"highlight javascript \" data-language=\"javascript\">'innerHTML'.capitalize()         // 'InnerHTML'\n'action_name'.capitalize()       // 'Action_name'\n'css-class-name'.capitalize()    // 'Css-class-name'\n'my favorite items'.capitalize() // 'My favorite items'\n'privateDocs/ownerInvoice'.capitalize(); // 'PrivateDocs/ownerInvoice'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The string to capitalize. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> The capitalized string.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_classify\">classify</h2>\n<span class=\"args\"> (str) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L282\">packages/ember-runtime/lib/system/string.js:282</a> </div> <div class=\"description\"> <p>Returns the UpperCamelCase form of a string.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">'innerHTML'.classify();          // 'InnerHTML'\n'action_name'.classify();        // 'ActionName'\n'css-class-name'.classify();     // 'CssClassName'\n'my favorite items'.classify();  // 'MyFavoriteItems'\n'private-docs/owner-invoice'.classify(); // 'PrivateDocs/OwnerInvoice'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the string to classify </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> the classified string</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_dasherize\">dasherize</h2>\n<span class=\"args\"> (str) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L245\">packages/ember-runtime/lib/system/string.js:245</a> </div> <div class=\"description\"> <p>Replaces underscores, spaces, or camelCase with dashes.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">'innerHTML'.dasherize();          // 'inner-html'\n'action_name'.dasherize();        // 'action-name'\n'css-class-name'.dasherize();     // 'css-class-name'\n'my favorite items'.dasherize();  // 'my-favorite-items'\n'privateDocs/ownerInvoice'.dasherize(); // 'private-docs/owner-invoice'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The string to dasherize. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> the dasherized string.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_decamelize\">decamelize</h2>\n<span class=\"args\"> (str) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L228\">packages/ember-runtime/lib/system/string.js:228</a> </div> <div class=\"description\"> <p>Converts a camelized string into all lower case separated by underscores.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">'innerHTML'.decamelize();           // 'inner_html'\n'action_name'.decamelize();        // 'action_name'\n'css-class-name'.decamelize();     // 'css-class-name'\n'my favorite items'.decamelize();  // 'my favorite items'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The string to decamelize. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> the decamelized string.</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_htmlSafe\">htmlSafe</h2>\n<span class=\"type\">Handlebars.SafeString</span><span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/utils/string.js#L10\">packages/ember-htmlbars/lib/utils/string.js:10</a> </div> <div class=\"description\"> <p>Mark a string as safe for unescaped output with Ember templates. If you return HTML from a helper, use this function to ensure Ember's rendering layer does not escape the HTML.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.String.htmlSafe('&lt;div&gt;someString&lt;/div&gt;')\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Handlebars.SafeString</span> </dt>\n<dd> A string that will not be HTML escaped by Handlebars.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_loc\">loc</h2>\n<span class=\"args\"> (str, formats) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L179\">packages/ember-runtime/lib/system/string.js:179</a> </div> <div class=\"description\"> <p>Formats the passed string, but first looks up the string in the localized strings hash. This is a convenient way to localize text. See <code>Ember.String.fmt()</code> for more information on formatting.</p> <p>Note that it is traditional but not required to prefix localized string keys with an underscore or other character so you can easily identify localized strings.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.STRINGS = {\n  '_Hello World': 'Bonjour le monde',\n  '_Hello %@ %@': 'Bonjour %@ %@'\n};\n\nEmber.String.loc(\"_Hello World\");  // 'Bonjour le monde';\nEmber.String.loc(\"_Hello %@ %@\", [\"John\", \"Smith\"]);  // \"Bonjour John Smith\";\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The string to format </dd> <dt>\n<strong>formats</strong> <span class=\"type\">Array</span>\n</dt> <dd> Optional array of parameters to interpolate into string. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> formatted string</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_underscore\">underscore</h2>\n<span class=\"args\"> (str) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L300\">packages/ember-runtime/lib/system/string.js:300</a> </div> <div class=\"description\"> <p>More general than decamelize. Returns the lower_case_and_underscored form of a string.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">'innerHTML'.underscore();          // 'inner_html'\n'action_name'.underscore();        // 'action_name'\n'css-class-name'.underscore();     // 'css_class_name'\n'my favorite items'.underscore();  // 'my_favorite_items'\n'privateDocs/ownerInvoice'.underscore(); // 'private_docs/owner_invoice'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The string to underscore. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> the underscored string.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_w\">w</h2>\n<span class=\"args\"> (str) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/string.js#L206\">packages/ember-runtime/lib/system/string.js:206</a> </div> <div class=\"description\"> <p>Splits a string into separate units separated by spaces, eliminating any empty strings in the process. This is a convenience method for split that is mostly useful when applied to the <code>String.prototype</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.String.w(\"alpha beta gamma\").forEach(function(key) {\n  console.log(key);\n});\n\n// &gt; alpha\n// &gt; beta\n// &gt; gamma\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The string to split </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> array containing the split strings</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.String.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.String.html</a>\n  </p>\n</div>\n","classes/backburner":"<h1 class=\"api-header\"> Backburner Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/index.js#L278\">packages/ember-metal/lib/index.js:278</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Backburner.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Backburner.html</a>\n  </p>\n</div>\n","classes/containerproxymixin":"<h1 class=\"api-header\"> ContainerProxyMixin Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/container_proxy.js#L10\">packages/ember-runtime/lib/mixins/container_proxy.js:10</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>ContainerProxyMixin is used to provide public access to specific container functionality.</p> </div> <div class=\"pane\" id=\"methods\">   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_lookup\">lookup</h2>\n<span class=\"args\"> (fullName, options) </span><span class=\"type\">Any</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/container_proxy.js#L49\">packages/ember-runtime/lib/mixins/container_proxy.js:49</a> </div> <div class=\"description\"> <p>Given a fullName return a corresponding instance.</p> <p>The default behaviour is for lookup to return a singleton instance. The singleton is scoped to the container, allowing multiple containers to all have their own locally scoped singletons.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var registry = new Registry();\nvar container = registry.container();\n\nregistry.register('api:twitter', Twitter);\n\nvar twitter = container.lookup('api:twitter');\n\ntwitter instanceof Twitter; // =&gt; true\n\n// by default the container will return singletons\nvar twitter2 = container.lookup('api:twitter');\ntwitter2 instanceof Twitter; // =&gt; true\n\ntwitter === twitter2; //=&gt; true\n</pre> <p>If singletons are not wanted an optional flag can be provided at lookup.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var registry = new Registry();\nvar container = registry.container();\n\nregistry.register('api:twitter', Twitter);\n\nvar twitter = container.lookup('api:twitter', { singleton: false });\nvar twitter2 = container.lookup('api:twitter', { singleton: false });\n\ntwitter === twitter2; //=&gt; false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Any</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_ownerInjection\">ownerInjection</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/container_proxy.js#L26\">packages/ember-runtime/lib/mixins/container_proxy.js:26</a> </div> <div class=\"description\"> <p>Returns an object that can be used to provide an owner to a manually created instance.</p> <p>Example:</p> <pre class=\"highlight text \" data-language=\"\">let owner = Ember.getOwner(this);\n\nUser.create(\n  owner.ownerInjection(),\n  { username: 'rwjblue' }\n)\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> </div>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/ContainerProxyMixin.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/ContainerProxyMixin.html</a>\n  </p>\n</div>\n","classes/descriptor":"<h1 class=\"api-header\"> Descriptor Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/properties.js#L13\">packages/ember-metal/lib/properties.js:13</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>Objects of this type can implement an interface to respond to requests to get and set. The default implementation handles simple properties.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Descriptor.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Descriptor.html</a>\n  </p>\n</div>\n","classes/ember.actionhandler":"<h1 class=\"api-header\"> Ember.ActionHandler Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/action_handler.js#L10\">packages/ember-runtime/lib/mixins/action_handler.js:10</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p><code>Ember.ActionHandler</code> is available on some familiar classes including <code>Ember.Route</code>, <code>Ember.View</code>, <code>Ember.Component</code>, and <code>Ember.Controller</code>. (Internally the mixin is used by <code>Ember.CoreView</code>, <code>Ember.ControllerMixin</code>, and <code>Ember.Route</code> and available to the above classes through inheritance.)</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_send\">send</h2>\n<span class=\"args\"> (actionName, context) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/action_handler.js#L145\">packages/ember-runtime/lib/mixins/action_handler.js:145</a> </div> <div class=\"description\"> <p>Triggers a named action on the <code>ActionHandler</code>. Any parameters supplied after the <code>actionName</code> string will be passed as arguments to the action target function.</p> <p>If the <code>ActionHandler</code> has its <code>target</code> property set, actions may bubble to the <code>target</code>. Bubbling happens when an <code>actionName</code> can not be found in the <code>ActionHandler</code>'s <code>actions</code> hash or if the action target function returns <code>true</code>.</p> <p>Example</p> <pre class=\"highlight js \" data-language=\"js\">App.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: function() {\n       this.send('playMusic', 'theme.mp3');\n    },\n    playMusic: function(track) {\n      // ...\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>actionName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The action to trigger </dd> <dt>\n<strong>context</strong> <span class=\"type\">*</span>\n</dt> <dd> a context to send with the action </dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_actions\">actions</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/action_handler.js#L24\">packages/ember-runtime/lib/mixins/action_handler.js:24</a> </div> <div class=\"description\"> <p>The collection of functions, keyed by name, available on this <code>ActionHandler</code> as action targets.</p> <p>These functions will be invoked when a matching <code>{{action}}</code> is triggered from within a template and the application's current route is this route.</p> <p>Actions can also be invoked from other parts of your application via <code>ActionHandler#send</code>.</p> <p>The <code>actions</code> hash will inherit action handlers from the <code>actions</code> hash defined on extended parent classes or mixins rather than just replace the entire hash, e.g.:</p> <pre class=\"highlight js \" data-language=\"js\">App.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: function(msg) {\n      // ...\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: function() {\n      // ...\n    }\n  }\n});\n\n// `WelcomeRoute`, when active, will be able to respond\n// to both actions, since the actions hash is merged rather\n// then replaced when extending mixins / parent classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n</pre> <p>Within a Controller, Route, View or Component's action handler, the value of the <code>this</code> context is the Controller, Route, View or Component object:</p> <pre class=\"highlight js \" data-language=\"js\">App.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: function() {\n      this.controllerFor(\"song\");\n      this.transitionTo(\"other.route\");\n      ...\n    }\n  }\n});\n</pre> <p>It is also possible to call <code>this._super(...arguments)</code> from within an action handler if it overrides a handler defined on a parent class or mixin:</p> <p>Take for example the following routes:</p> <pre class=\"highlight js \" data-language=\"js\">App.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: function() {\n      console.debug(\"trololo\");\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: function() {\n      // also call the debugRouteInformation of mixed in App.DebugRoute\n      this._super(...arguments);\n\n      // show additional annoyance\n      window.alert(...);\n    }\n  }\n});\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_bubbling\">Bubbling</h2> <p>By default, an action will stop bubbling once a handler defined on the <code>actions</code> hash handles it. To continue bubbling the action, you must return <code>true</code> from the handler:</p> <pre class=\"highlight js \" data-language=\"js\">App.Router.map(function() {\n  this.route(\"album\", function() {\n    this.route(\"song\");\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n      // ...\n\n      if (actionShouldAlsoBeTriggeredOnParentRoute) {\n        return true;\n      }\n    }\n  }\n});\n</pre> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ActionHandler.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ActionHandler.html</a>\n  </p>\n</div>\n","classes/ember.applicationinstance":"<h1 class=\"api-header\"> Ember.ApplicationInstance Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: Ember.EngineInstance</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application-instance.js#L20\">packages/ember-application/lib/system/application-instance.js:20</a></p> <p>Module: <a href=\"../modules/ember-application\">ember-application</a></p> </div> <div class=\"description\"> <p>The <code>ApplicationInstance</code> encapsulates all of the stateful aspects of a running <code>Application</code>.</p> <p>At a high-level, we break application boot into two distinct phases:</p> <ul> <li>Definition time, where all of the classes, templates, and other dependencies are loaded (typically in the browser).</li> <li>Run time, where we begin executing the application once everything has loaded.</li> </ul> <p>Definition time can be expensive and only needs to happen once since it is an idempotent operation. For example, between test runs and FastBoot requests, the application stays the same. It is only the state that we want to reset.</p> <p>That state is what the <code>ApplicationInstance</code> manages: it is responsible for creating the container that contains all application state, and disposing of it once the particular test run or FastBoot request has finished.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ApplicationInstance.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ApplicationInstance.html</a>\n  </p>\n</div>\n","classes/ember.applicationinstance.bootoptions":"<h1 class=\"api-header\"> Ember.ApplicationInstance.BootOptions Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application-instance.js#L291\">packages/ember-application/lib/system/application-instance.js:291</a></p> <p>Module: <a href=\"../modules/ember-application\">ember-application</a></p> </div> <div class=\"description\"> <p>A list of boot-time configuration options for customizing the behavior of an <code>Ember.ApplicationInstance</code>.</p> <p>This is an interface class that exists purely to document the available options; you do not need to construct it manually. Simply pass a regular JavaScript object containing the desired options into methods that require one of these options object:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyApp.visit(\"/\", { location: \"none\", rootElement: \"#container\" });\n</pre> <p>Not all combinations of the supported options are valid. See the documentation on <code>Ember.Application#visit</code> for the supported configurations.</p> <p>Internal, experimental or otherwise unstable flags are marked as private.</p> </div> <div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_document\">document</h2>\n<span class=\"type\">Document</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application-instance.js#L398\">packages/ember-application/lib/system/application-instance.js:398</a> </div> <div class=\"description\"> <p>If present, render into the given <code>Document</code> object instead of the global <code>window.document</code> object.</p> <p>In practice, this is only useful in non-browser environment or in non-interactive mode, because Ember's <code>jQuery</code> dependency is implicitly bound to the current document, causing event delegation to not work properly when the app is rendered into a foreign document object (such as an iframe's <code>contentDocument</code>).</p> <p>In non-browser mode, this could be a \"<code>Document</code>-like\" object as Ember only interact with a small subset of the DOM API in non- interactive mode. While the exact requirements have not yet been formalized, the <code>SimpleDOM</code> library's implementation is known to work.</p> </div> <p> <strong>Default:</strong> <code>the global `document` object</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isBrowser\">isBrowser</h2>\n<span class=\"type\">boolean</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application-instance.js#L339\">packages/ember-application/lib/system/application-instance.js:339</a> </div> <div class=\"description\"> <p>Run in a full browser environment.</p> <p>When this flag is set to <code>false</code>, it will disable most browser-specific and interactive features. Specifically:</p> <ul> <li><p>It does not use <code>jQuery</code> to append the root view; the <code>rootElement</code> (either specified as a subsequent option or on the application itself) must already be an <code>Element</code> in the given <code>document</code> (as opposed to a string selector).</p></li> <li><p>It does not set up an <code>EventDispatcher</code>.</p></li> <li><p>It does not run any <code>Component</code> lifecycle hooks (such as <code>didInsertElement</code>).</p></li> <li><p>It sets the <code>location</code> option to <code>\"none\"</code>. (If you would like to use the location adapter specified in the app's router instead, you can also specify <code>{ location: null }</code> to specifically opt-out.)</p></li> </ul> </div> <p> <strong>Default:</strong> <code>auto-detected</code> </p> </div>   <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_location\">location</h2>\n<span class=\"type\">string</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application-instance.js#L450\">packages/ember-application/lib/system/application-instance.js:450</a> </div> <div class=\"description\"> <p>If present, overrides the router's <code>location</code> property with this value. This is useful for environments where trying to modify the URL would be inappropriate.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_rootElement\">rootElement</h2>\n<span class=\"type\">String|Element</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application-instance.js#L425\">packages/ember-application/lib/system/application-instance.js:425</a> </div> <div class=\"description\"> <p>If present, overrides the application's <code>rootElement</code> property on the instance. This is useful for testing environment, where you might want to append the root view to a fixture area.</p> <p>In non-browser mode, because Ember does not have access to jQuery, this options must be specified as a DOM <code>Element</code> object instead of a selector string.</p> <p>See the documentation on <code>Ember.Applications</code>'s <code>rootElement</code> for details.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_shouldRender\">shouldRender</h2>\n<span class=\"type\">boolean</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application-instance.js#L375\">packages/ember-application/lib/system/application-instance.js:375</a> </div> <div class=\"description\"> <p>Disable rendering completely.</p> <p>When this flag is set to <code>true</code>, it will disable the entire rendering pipeline. Essentially, this puts the app into \"routing-only\" mode. No templates will be rendered, and no Components will be created.</p> </div> <p> <strong>Default:</strong> <code>true</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ApplicationInstance.BootOptions.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ApplicationInstance.BootOptions.html</a>\n  </p>\n</div>\n","classes/ember.ariarolesupport":"<h1 class=\"api-header\"> Ember.AriaRoleSupport Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/aria_role_support.js#L8\">packages/ember-views/lib/mixins/aria_role_support.js:8</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_ariaRole\">ariaRole</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/aria_role_support.js#L16\">packages/ember-views/lib/mixins/aria_role_support.js:16</a> </div> <div class=\"description\"> <p>The WAI-ARIA role of the control represented by this view. For example, a button may have a role of type 'button', or a pane may have a role of type 'alertdialog'. This property is used by assistive software to help visually challenged users navigate rich web applications.</p> <p>The full list of valid WAI-ARIA roles is available at: <a href=\"http://www.w3.org/TR/wai-aria/roles#roles_categorization\">http://www.w3.org/TR/wai-aria/roles#roles_categorization</a></p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.AriaRoleSupport.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.AriaRoleSupport.html</a>\n  </p>\n</div>\n","classes/ember.binding":"<h1 class=\"api-header\"> Ember.Binding Class  </h1>  <p>DEPRECATED</p> <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L347\">packages/ember-metal/lib/binding.js:347</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>An <code>Ember.Binding</code> connects the properties of two objects so that whenever the value of one property changes, the other property will be changed also.</p> <h2 class=\"anchorable-toc\" id=\"toc_automatic-creation-of-bindings-with-code-binding-code-named-properties\">Automatic Creation of Bindings with <code>/^*Binding/</code>-named Properties.</h2> <p>You do not usually create Binding objects directly but instead describe bindings in your class or object definition using automatic binding detection.</p> <p>Properties ending in a <code>Binding</code> suffix will be converted to <code>Ember.Binding</code> instances. The value of this property should be a string representing a path to another object or a custom binding instance created using Binding helpers (see \"One Way Bindings\"):</p> <pre class=\"highlight text \" data-language=\"\">valueBinding: \"MyApp.someController.title\"\n</pre> <p>This will create a binding from <code>MyApp.someController.title</code> to the <code>value</code> property of your object instance automatically. Now the two values will be kept in sync.</p> <h2 class=\"anchorable-toc\" id=\"toc_one-way-bindings\">One Way Bindings</h2> <p>One especially useful binding customization you can use is the <code>oneWay()</code> helper. This helper tells Ember that you are only interested in receiving changes on the object you are binding from. For example, if you are binding to a preference and you want to be notified if the preference has changed, but your object will not be changing the preference itself, you could do:</p> <pre class=\"highlight text \" data-language=\"\">bigTitlesBinding: Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n</pre> <p>This way if the value of <code>MyApp.preferencesController.bigTitles</code> changes the <code>bigTitles</code> property of your object will change also. However, if you change the value of your <code>bigTitles</code> property, it will not update the <code>preferencesController</code>.</p> <p>One way bindings are almost twice as fast to setup and twice as fast to execute because the binding only has to worry about changes to one side.</p> <p>You should consider using one way bindings anytime you have an object that may be created frequently and you do not intend to change a property; only to monitor it for changes (such as in the example above).</p> <h2 class=\"anchorable-toc\" id=\"toc_adding-bindings-manually\">Adding Bindings Manually</h2> <p>All of the examples above show you how to configure a custom binding, but the result of these customizations will be a binding template, not a fully active Binding instance. The binding will actually become active only when you instantiate the object the binding belongs to. It is useful, however, to understand what actually happens when the binding is activated.</p> <p>For a binding to function it must have at least a <code>from</code> property and a <code>to</code> property. The <code>from</code> property path points to the object/key that you want to bind from while the <code>to</code> path points to the object/key you want to bind to.</p> <p>When you define a custom binding, you are usually describing the property you want to bind from (such as <code>MyApp.someController.value</code> in the examples above). When your object is created, it will automatically assign the value you want to bind <code>to</code> based on the name of your binding key. In the examples above, during init, Ember objects will effectively call something like this on your binding:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">binding = Ember.Binding.from(\"valueBinding\").to(\"value\");\n</pre> <p>This creates a new binding instance based on the template you provide, and sets the to path to the <code>value</code> property of the new object. Now that the binding is fully configured with a <code>from</code> and a <code>to</code>, it simply needs to be connected to become active. This is done through the <code>connect()</code> method:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">binding.connect(this);\n</pre> <p>Note that when you connect a binding you pass the object you want it to be connected to. This object will be used as the root for both the from and to side of the binding when inspecting relative paths. This allows the binding to be automatically inherited by subclassed objects as well.</p> <p>This also allows you to bind between objects using the paths you declare in <code>from</code> and <code>to</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// Example 1\nbinding = Ember.Binding.from(\"App.someObject.value\").to(\"value\");\nbinding.connect(this);\n\n// Example 2\nbinding = Ember.Binding.from(\"parentView.value\").to(\"App.someObject.value\");\nbinding.connect(this);\n</pre> <p>Now that the binding is connected, it will observe both the from and to side and relay changes.</p> <p>If you ever needed to do so (you almost never will, but it is useful to understand this anyway), you could manually create an active binding by using the <code>Ember.bind()</code> helper method. (This is the same method used by to setup your bindings on objects):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.bind(MyApp.anotherObject, \"value\", \"MyApp.someController.value\");\n</pre> <p>Both of these code fragments have the same effect as doing the most friendly form of binding creation like so:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyApp.anotherObject = Ember.Object.create({\n  valueBinding: \"MyApp.someController.value\",\n\n  // OTHER CODE FOR THIS OBJECT...\n});\n</pre> <p>Ember's built in binding creation method makes it easy to automatically create bindings for you. You should always use the highest-level APIs available, even if you understand how it works underneath.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_connect\">connect</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L135\">packages/ember-metal/lib/binding.js:135</a> </div> <div class=\"description\"> <p>Attempts to connect this binding instance so that it can receive and relay changes. This method will raise an exception if you have not set the from/to properties yet.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The root object for this binding. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span> </dt>\n<dd> `this`</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_copy\">copy</h2>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L51\">packages/ember-metal/lib/binding.js:51</a> </div> <div class=\"description\"> <p>This copies the Binding so it can be connected to another object.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span> </dt>\n<dd> `this`</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_disconnect\">disconnect</h2>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L191\">packages/ember-metal/lib/binding.js:191</a> </div> <div class=\"description\"> <p>Disconnects the binding instance. Changes will no longer be relayed. You will not usually need to call this method.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span> </dt>\n<dd> `this`</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_from\">from</h2>\n<span class=\"args\"> (path) </span><span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L68\">packages/ember-metal/lib/binding.js:68</a> </div> <div class=\"description\"> <p>This will set <code>from</code> property path to the specified value. It will not attempt to resolve this property path to an actual object until you connect the binding.</p> <p>The binding will search for the property path starting at the root object you pass when you <code>connect()</code> the binding. It follows the same rules as <code>get()</code> - see that method for more information.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>path</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The property path to connect to. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span> </dt>\n<dd> `this`</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_oneWay\">oneWay</h2>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L106\">packages/ember-metal/lib/binding.js:106</a> </div> <div class=\"description\"> <p>Configures the binding as one way. A one-way binding will relay changes on the <code>from</code> side to the <code>to</code> side, but not the other way around. This means that if you change the <code>to</code> side directly, the <code>from</code> side may have a different value.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span> </dt>\n<dd> `this`</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_to\">to</h2>\n<span class=\"args\"> (path) </span><span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L87\">packages/ember-metal/lib/binding.js:87</a> </div> <div class=\"description\"> <p>This will set the <code>to</code> property path to the specified value. It will not attempt to resolve this property path to an actual object until you connect the binding.</p> <p>The binding will search for the property path starting at the root object you pass when you <code>connect()</code> the binding. It follows the same rules as <code>get()</code> - see that method for more information.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>path</strong> <span class=\"type\">String|Tuple</span>\n</dt> <dd> A property path or tuple. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span> </dt>\n<dd> `this`</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_toString\">toString</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L121\">packages/ember-metal/lib/binding.js:121</a> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> string representation of binding</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Binding.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Binding.html</a>\n  </p>\n</div>\n","classes/ember.classnamessupport":"<h1 class=\"api-header\"> Ember.ClassNamesSupport Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/class_names_support.js#L11\">packages/ember-views/lib/mixins/class_names_support.js:11</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_classNameBindings\">classNameBindings</h2>\n<span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/class_names_support.js#L41\">packages/ember-views/lib/mixins/class_names_support.js:41</a> </div> <div class=\"description\"> <p>A list of properties of the view to apply as class names. If the property is a string value, the value of that string will be applied as a class name.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// Applies the 'high' class to the view element\nEmber.View.extend({\n  classNameBindings: ['priority'],\n  priority: 'high'\n});\n</pre> <p>If the value of the property is a Boolean, the name of that property is added as a dasherized class name.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// Applies the 'is-urgent' class to the view element\nEmber.View.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n</pre> <p>If you would prefer to use a custom value instead of the dasherized property name, you can pass a binding like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// Applies the 'urgent' class to the view element\nEmber.View.extend({\n  classNameBindings: ['isUrgent:urgent'],\n  isUrgent: true\n});\n</pre> <p>This list of properties is inherited from the view's superclasses as well.</p> </div> <p> <strong>Default:</strong> <code>[]</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_classNames\">classNames</h2>\n<span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/class_names_support.js#L29\">packages/ember-views/lib/mixins/class_names_support.js:29</a> </div> <div class=\"description\"> <p>Standard CSS class names to apply to the view's outer element. This property automatically inherits any class names defined by the view's superclasses as well.</p> </div> <p> <strong>Default:</strong> <code>['ember-view']</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ClassNamesSupport.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ClassNamesSupport.html</a>\n  </p>\n</div>\n","classes/ember.comparable":"<h1 class=\"api-header\"> Ember.Comparable Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/comparable.js#L8\">packages/ember-runtime/lib/mixins/comparable.js:8</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>Implements some standard methods for comparing objects. Add this mixin to any class you create that can compare its instances.</p> <p>You should implement the <code>compare()</code> method.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Comparable.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Comparable.html</a>\n  </p>\n</div>\n","classes/ember.run":"<h1 class=\"api-header\"> Ember.run Namespace  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L50\">packages/ember-metal/lib/run_loop.js:50</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>Runs the passed target and method inside of a RunLoop, ensuring any deferred actions including bindings and views updates are flushed at the end.</p> <p>Normally you should not need to invoke this method yourself. However if you are implementing raw event handlers when interfacing with other libraries or plugins, you should probably wrap all of your code inside this call.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">run(function() {\n  // code to be executed within a RunLoop\n});\n</pre> </div> <div class=\"pane\" id=\"methods\">   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_begin\">begin</h2>\n<span class=\"type\">Void</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L184\">packages/ember-metal/lib/run_loop.js:184</a> </div> <div class=\"description\"> <p>Begins a new RunLoop. Any deferred actions invoked after the begin will be buffered until you invoke a matching call to <code>run.end()</code>. This is a lower-level way to use a RunLoop instead of using <code>run()</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">run.begin();\n// code to be executed within a RunLoop\nrun.end();\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Void</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_bind\">bind</h2>\n<span class=\"args\"> (target, method, args*) </span><span class=\"type\"><a href=\"function\">Function</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L124\">packages/ember-metal/lib/run_loop.js:124</a> <br>Available since 1.4.0 </div> <div class=\"description\"> <p>Allows you to specify which context to call the specified function in while adding the execution of that function to the Ember run loop. This ability makes this method a great way to asynchronously integrate third-party libraries into your Ember application.</p> <p><code>run.bind</code> takes two main arguments, the desired context and the function to invoke in that context. Any additional arguments will be supplied as arguments to the function that is passed in.</p> <p>Let's use the creation of a TinyMCE component as an example. Currently, TinyMCE provides a setup configuration option we can use to do some processing after the TinyMCE instance is initialized but before it is actually rendered. We can use that setup option to do some additional setup for our component. The component itself could look something like the following:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.RichTextEditorComponent = Ember.Component.extend({\n  initializeTinyMCE: Ember.on('didInsertElement', function() {\n    tinymce.init({\n      selector: '#' + this.$().prop('id'),\n      setup: Ember.run.bind(this, this.setupEditor)\n    });\n  }),\n\n  setupEditor: function(editor) {\n    this.set('editor', editor);\n\n    editor.on('change', function() {\n      console.log('content changed!');\n    });\n  }\n});\n</pre> <p>In this example, we use Ember.run.bind to bind the setupEditor method to the context of the App.RichTextEditorComponent and to have the invocation of that method be safely handled and executed by the Ember run loop.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> target of method to call </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> Method to invoke. May be a function or a string. If you pass a string then it will be looked up on the passed target. </dd> <dt>\n<strong>args*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Any additional arguments you wish to pass to the method. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"function\">Function</a></span> </dt>\n<dd> returns a new function that will always have a particular context</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_cancel\">cancel</h2>\n<span class=\"args\"> (timer) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L496\">packages/ember-metal/lib/run_loop.js:496</a> </div> <div class=\"description\"> <p>Cancels a scheduled item. Must be a value returned by <code>run.later()</code>, <code>run.once()</code>, <code>run.scheduleOnce()</code>, <code>run.next()</code>, <code>run.debounce()</code>, or <code>run.throttle()</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var runNext = run.next(myContext, function() {\n  // will not be executed\n});\n\nrun.cancel(runNext);\n\nvar runLater = run.later(myContext, function() {\n  // will not be executed\n}, 500);\n\nrun.cancel(runLater);\n\nvar runScheduleOnce = run.scheduleOnce('afterRender', myContext, function() {\n  // will not be executed\n});\n\nrun.cancel(runScheduleOnce);\n\nvar runOnce = run.once(myContext, function() {\n  // will not be executed\n});\n\nrun.cancel(runOnce);\n\nvar throttle = run.throttle(myContext, function() {\n  // will not be executed\n}, 1, false);\n\nrun.cancel(throttle);\n\nvar debounce = run.debounce(myContext, function() {\n  // will not be executed\n}, 1);\n\nrun.cancel(debounce);\n\nvar debounceImmediate = run.debounce(myContext, function() {\n  // will be executed since we passed in true (immediate)\n}, 100, true);\n\n// the 100ms delay until this method can be called again will be cancelled\nrun.cancel(debounceImmediate);\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>timer</strong> <span class=\"type\">Object</span>\n</dt> <dd> Timer object to cancel </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> true if cancelled or false/undefined if it wasn't found</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_debounce\">debounce</h2>\n<span class=\"args\"> (target, method, args*, wait, immediate) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L555\">packages/ember-metal/lib/run_loop.js:555</a> </div> <div class=\"description\"> <p>Delay calling the target method until the debounce period has elapsed with no additional debounce calls. If <code>debounce</code> is called again before the specified time has elapsed, the timer is reset and the entire period must pass again before the target method is called.</p> <p>This method should be used when an event may be called multiple times but the action should only be called once when the event is done firing. A common example is for scroll events where you only want updates to happen once scrolling has ceased.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nvar myContext = { name: 'debounce' };\n\nrun.debounce(myContext, whoRan, 150);\n\n// less than 150ms passes\nrun.debounce(myContext, whoRan, 150);\n\n// 150ms passes\n// whoRan is invoked with context myContext\n// console logs 'debounce ran.' one time.\n</pre> <p>Immediate allows you to run the function immediately, but debounce other calls for this function until the wait time has elapsed. If <code>debounce</code> is called again before the specified time has elapsed, the timer is reset and the entire period must pass again before the method can be called again.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nvar myContext = { name: 'debounce' };\n\nrun.debounce(myContext, whoRan, 150, true);\n\n// console logs 'debounce ran.' one time immediately.\n// 100ms passes\nrun.debounce(myContext, whoRan, 150, true);\n\n// 150ms passes and nothing else is logged to the console and\n// the debouncee is no longer being watched\nrun.debounce(myContext, whoRan, 150, true);\n\n// console logs 'debounce ran.' one time immediately.\n// 150ms passes and nothing else is logged to the console and\n// the debouncee is no longer being watched\n\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> target of method to invoke </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> The method to invoke. May be a function or a string. If you pass a string then it will be looked up on the passed target. </dd> <dt>\n<strong>args*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Optional arguments to pass to the timeout. </dd> <dt>\n<strong>wait</strong> <span class=\"type\">Number</span>\n</dt> <dd> Number of milliseconds to wait. </dd> <dt>\n<strong>immediate</strong> <span class=\"type\">Boolean</span>\n</dt> <dd> Trigger the function on the leading instead of the trailing edge of the wait interval. Defaults to false. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> Timer information for use in cancelling, see `run.cancel`.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_end\">end</h2>\n<span class=\"type\">Void</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L203\">packages/ember-metal/lib/run_loop.js:203</a> </div> <div class=\"description\"> <p>Ends a RunLoop. This must be called sometime after you call <code>run.begin()</code> to flush any deferred actions. This is a lower-level way to use a RunLoop instead of using <code>run()</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">run.begin();\n// code to be executed within a RunLoop\nrun.end();\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Void</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_join\">join</h2>\n<span class=\"args\"> (target, method, args*) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L82\">packages/ember-metal/lib/run_loop.js:82</a> </div> <div class=\"description\"> <p>If no run-loop is present, it creates a new one. If a run loop is present it will queue itself to run on the existing run-loops action queue.</p> <p>Please note: This is not for normal usage, and should be used sparingly.</p> <p>If invoked when not within a run loop:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">run.join(function() {\n  // creates a new run-loop\n});\n</pre> <p>Alternatively, if called within an existing run loop:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">run(function() {\n  // creates a new run-loop\n  run.join(function() {\n    // joins with the existing run-loop, and queues for invocation on\n    // the existing run-loops action queue.\n  });\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> target of method to call </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> Method to invoke. May be a function or a string. If you pass a string then it will be looked up on the passed target. </dd> <dt>\n<strong>args*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Any additional arguments you wish to pass to the method. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> Return value from invoking the passed function. Please note, when called within an existing loop, no return value is possible.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_later\">later</h2>\n<span class=\"args\"> (target, method, args*, wait) </span><span class=\"type\">*</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L314\">packages/ember-metal/lib/run_loop.js:314</a> </div> <div class=\"description\"> <p>Invokes the passed target/method and optional arguments after a specified period of time. The last parameter of this method must always be a number of milliseconds.</p> <p>You should use this method whenever you need to run some action after a period of time instead of using <code>setTimeout()</code>. This method will ensure that items that expire during the same script execution cycle all execute together, which is often more efficient than using a real setTimeout.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">run.later(myContext, function() {\n  // code here will execute within a RunLoop in about 500ms with this == myContext\n}, 500);\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> target of method to invoke </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> The method to invoke. If you pass a string it will be resolved on the target at the time the method is invoked. </dd> <dt>\n<strong>args*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Optional arguments to pass to the timeout. </dd> <dt>\n<strong>wait</strong> <span class=\"type\">Number</span>\n</dt> <dd> Number of milliseconds to wait. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">*</span> </dt>\n<dd> Timer information for use in cancelling, see `run.cancel`.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_next\">next</h2>\n<span class=\"args\"> (target, method, args*) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L428\">packages/ember-metal/lib/run_loop.js:428</a> </div> <div class=\"description\"> <p>Schedules an item to run from within a separate run loop, after control has been returned to the system. This is equivalent to calling <code>run.later</code> with a wait time of 1ms.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">run.next(myContext, function() {\n  // code to be executed in the next run loop,\n  // which will be scheduled after the current one\n});\n</pre> <p>Multiple operations scheduled with <code>run.next</code> will coalesce into the same later run loop, along with any other operations scheduled by <code>run.later</code> that expire right around the same time that <code>run.next</code> operations will fire.</p> <p>Note that there are often alternatives to using <code>run.next</code>. For instance, if you'd like to schedule an operation to happen after all DOM element operations have completed within the current run loop, you can make use of the <code>afterRender</code> run loop queue (added by the <code>ember-views</code> package, along with the preceding <code>render</code> queue where all the DOM element operations happen).</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">export default Ember.Component.extend({\n  didInsertElement() {\n    this._super(...arguments);\n    run.scheduleOnce('afterRender', this, 'processChildElements');\n  },\n\n  processChildElements() {\n    // ... do something with component's child component\n    // elements after they've finished rendering, which\n    // can't be done within this component's\n    // `didInsertElement` hook because that gets run\n    // before the child elements have been added to the DOM.\n  }\n});\n</pre> <p>One benefit of the above approach compared to using <code>run.next</code> is that you will be able to perform DOM/CSS operations before unprocessed elements are rendered to the screen, which may prevent flickering or other artifacts caused by delaying processing until after rendering.</p> <p>The other major benefit to the above approach is that <code>run.next</code> introduces an element of non-determinism, which can make things much harder to test, due to its reliance on <code>setTimeout</code>; it's much harder to guarantee the order of scheduled operations when they are scheduled outside of the current run loop, i.e. with <code>run.next</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> target of method to invoke </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> The method to invoke. If you pass a string it will be resolved on the target at the time the method is invoked. </dd> <dt>\n<strong>args*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Optional arguments to pass to the timeout. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> Timer information for use in cancelling, see `run.cancel`.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_once\">once</h2>\n<span class=\"args\"> (target, method, args*) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L344\">packages/ember-metal/lib/run_loop.js:344</a> </div> <div class=\"description\"> <p>Schedule a function to run one time during the current RunLoop. This is equivalent to calling <code>scheduleOnce</code> with the \"actions\" queue.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target of the method to invoke. </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> The method to invoke. If you pass a string it will be resolved on the target at the time the method is invoked. </dd> <dt>\n<strong>args*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Optional arguments to pass to the timeout. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> Timer information for use in cancelling, see `run.cancel`.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_schedule\">schedule</h2>\n<span class=\"args\"> (queue, target, method, arguments*) </span><span class=\"type\">Void</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L234\">packages/ember-metal/lib/run_loop.js:234</a> </div> <div class=\"description\"> <p>Adds the passed target/method and any optional arguments to the named queue to be executed at the end of the RunLoop. If you have not already started a RunLoop when calling this method one will be started for you automatically.</p> <p>At the end of a RunLoop, any methods scheduled in this way will be invoked. Methods will be invoked in an order matching the named queues defined in the <code>run.queues</code> property.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">run.schedule('sync', this, function() {\n  // this will be executed in the first RunLoop queue, when bindings are synced\n  console.log('scheduled on sync queue');\n});\n\nrun.schedule('actions', this, function() {\n  // this will be executed in the 'actions' queue, after bindings have synced.\n  console.log('scheduled on actions queue');\n});\n\n// Note the functions will be run in order based on the run queues order.\n// Output would be:\n//   scheduled on sync queue\n//   scheduled on actions queue\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>queue</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the queue to schedule against. Default queues are 'sync' and 'actions' </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> target object to use as the context when invoking a method. </dd> <dt>\n<strong>method</strong> <span class=\"type\">String|Function</span>\n</dt> <dd> The method to invoke. If you pass a string it will be resolved on the target object at the time the scheduled item is invoked allowing you to change the target function. </dd> <dt>\n<strong>arguments*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Optional arguments to be passed to the queued method. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Void</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_scheduleOnce\">scheduleOnce</h2>\n<span class=\"args\"> (queue, target, method, args*) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L367\">packages/ember-metal/lib/run_loop.js:367</a> </div> <div class=\"description\"> <p>Schedules a function to run one time in a given queue of the current RunLoop. Calling this method with the same queue/target/method combination will have no effect (past the initial call).</p> <p>Note that although you can pass optional arguments these will not be considered when looking for duplicates. New arguments will replace previous calls.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function sayHi() {\n  console.log('hi');\n}\n\nrun(function() {\n  run.scheduleOnce('afterRender', myContext, sayHi);\n  run.scheduleOnce('afterRender', myContext, sayHi);\n  // sayHi will only be executed once, in the afterRender queue of the RunLoop\n});\n</pre> <p>Also note that passing an anonymous function to <code>run.scheduleOnce</code> will not prevent additional calls with an identical anonymous function from scheduling the items multiple times, e.g.:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function scheduleIt() {\n  run.scheduleOnce('actions', myContext, function() {\n    console.log('Closure');\n  });\n}\n\nscheduleIt();\nscheduleIt();\n\n// \"Closure\" will print twice, even though we're using `run.scheduleOnce`,\n// because the function we pass to it is anonymous and won't match the\n// previously scheduled operation.\n</pre> <p>Available queues, and their order, can be found at <code>run.queues</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>queue</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd> The name of the queue to schedule against. Default queues are 'sync' and 'actions'. </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target of the method to invoke. </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> The method to invoke. If you pass a string it will be resolved on the target at the time the method is invoked. </dd> <dt>\n<strong>args*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Optional arguments to pass to the timeout. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> Timer information for use in cancelling, see `run.cancel`.</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_throttle\">throttle</h2>\n<span class=\"args\"> (target, method, args*, spacing, immediate) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/run_loop.js#L628\">packages/ember-metal/lib/run_loop.js:628</a> </div> <div class=\"description\"> <p>Ensure that the target method is never called more frequently than the specified spacing period. The target method is called immediately.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nvar myContext = { name: 'throttle' };\n\nrun.throttle(myContext, whoRan, 150);\n// whoRan is invoked with context myContext\n// console logs 'throttle ran.'\n\n// 50ms passes\nrun.throttle(myContext, whoRan, 150);\n\n// 50ms passes\nrun.throttle(myContext, whoRan, 150);\n\n// 150ms passes\nrun.throttle(myContext, whoRan, 150);\n// whoRan is invoked with context myContext\n// console logs 'throttle ran.'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> target of method to invoke </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> The method to invoke. May be a function or a string. If you pass a string then it will be looked up on the passed target. </dd> <dt>\n<strong>args*</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Optional arguments to pass to the timeout. </dd> <dt>\n<strong>spacing</strong> <span class=\"type\">Number</span>\n</dt> <dd> Number of milliseconds to space out requests. </dd> <dt>\n<strong>immediate</strong> <span class=\"type\">Boolean</span>\n</dt> <dd> Trigger the function on the leading instead of the trailing edge of the wait interval. Defaults to true. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> Timer information for use in cancelling, see `run.cancel`.</dd> </dl> </div> </div> </div>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.run.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.run.html</a>\n  </p>\n</div>\n","classes/ember.computedproperty":"<h1 class=\"api-header\"> Ember.ComputedProperty Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/computed.js#L30\">packages/ember-metal/lib/computed.js:30</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>A computed property transforms an object literal with object's accessor function(s) into a property.</p> <p>By default the function backing the computed property will only be called once and the result will be cached. You can specify various properties that your computed property depends on. This will force the cached result to be recomputed if the dependencies are modified.</p> <p>In the following example we declare a computed property - <code>fullName</code> - by calling <code>.Ember.computed()</code> with property dependencies (<code>firstName</code> and <code>lastName</code>) as leading arguments and getter accessor function. The <code>fullName</code> getter function will be called once (regardless of how many times it is accessed) as long as its dependencies have not changed. Once <code>firstName</code> or <code>lastName</code> are updated any future calls (or anything bound) to <code>fullName</code> will incorporate the new values.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: Ember.computed('firstName', 'lastName', function() {\n    let firstName = this.get('firstName'),\n        lastName  = this.get('lastName');\n\n    return firstName + ' ' + lastName;\n  })\n});\n\nlet tom = Person.create({\n  firstName: 'Tom',\n  lastName: 'Dale'\n});\n\ntom.get('fullName') // 'Tom Dale'\n</pre> <p>You can also define what Ember should do when setting a computed property by providing additional function (<code>set</code>) in hash argument. If you try to set a computed property, it will try to invoke setter accessor function with the key and value you want to set it to as arguments.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: Ember.computed('firstName', 'lastName', {\n    get(key) {\n      let firstName = this.get('firstName'),\n          lastName  = this.get('lastName');\n\n      return firstName + ' ' + lastName;\n    },\n    set(key, value) {\n      let [firstName, lastName] = value.split(' ');\n\n      this.set('firstName', firstName);\n      this.set('lastName', lastName);\n\n      return value;\n    }\n  })\n});\n\nlet person = Person.create();\n\nperson.set('fullName', 'Peter Wagenet');\nperson.get('firstName'); // 'Peter'\nperson.get('lastName');  // 'Wagenet'\n</pre> <p>You can overwrite computed property with normal property (no longer computed), that won't change if dependencies change, if you set computed property and it won't have setter accessor function defined.</p> <p>You can also mark computed property as <code>.readOnly()</code> and block all attempts to set it.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: Ember.computed('firstName', 'lastName', {\n    get(key) {\n      let firstName = this.get('firstName');\n      let lastName  = this.get('lastName');\n\n      return firstName + ' ' + lastName;\n    }\n  }).readOnly()\n});\n\nlet person = Person.create();\nperson.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property \"fullName\" on object: &lt;(...):emberXXX&gt;\n</pre> <p>Additional resources: - <a href=\"https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md\">New CP syntax RFC</a> - <a href=\"http://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax\">New computed syntax explained in \"Ember 1.12 released\" </a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_meta\">meta</h2>\n<span class=\"args\"> (meta) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/computed.js#L271\">packages/ember-metal/lib/computed.js:271</a> </div> <div class=\"description\"> <p>In some cases, you may want to annotate computed properties with additional metadata about how they function or what values they operate on. For example, computed property functions may close over variables that are then no longer available for introspection.</p> <p>You can pass a hash of these values to a computed property like this:</p> <pre class=\"highlight text \" data-language=\"\">person: Ember.computed(function() {\n  let personId = this.get('personId');\n  return App.Person.create({ id: personId });\n}).meta({ type: App.Person })\n</pre> <p>The hash that you pass to the <code>meta()</code> function will be saved on the computed property descriptor under the <code>_meta</code> key. Ember runtime exposes a public API for retrieving these values from classes, via the <code>metaForProperty()</code> function.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>meta</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_property\">property</h2>\n<span class=\"args\"> (path) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/computed.js#L220\">packages/ember-metal/lib/computed.js:220</a> </div> <div class=\"description\"> <p>Sets the dependent keys on this computed property. Pass any number of arguments containing key paths that this computed property depends on.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let President = Ember.Object.extend({\n  fullName: Ember.computed(function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Tell Ember that this computed property depends on firstName\n    // and lastName\n  }).property('firstName', 'lastName')\n});\n\nlet president = President.create({\n  firstName: 'Barack',\n  lastName: 'Obama'\n});\n\npresident.get('fullName'); // 'Barack Obama'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>path</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> zero or more property paths </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> this</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_readOnly\">readOnly</h2>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/computed.js#L193\">packages/ember-metal/lib/computed.js:193</a> </div> <div class=\"description\"> <p>Call on a computed property to set it into read-only mode. When in this mode the computed property will throw an error when set.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let Person = Ember.Object.extend({\n  guid: Ember.computed(function() {\n    return 'guid-guid-guid';\n  }).readOnly()\n});\n\nlet person = Person.create();\n\nperson.set('guid', 'new-guid'); // will throw an exception\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> this</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_volatile\">volatile</h2>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/computed.js#L165\">packages/ember-metal/lib/computed.js:165</a> </div> <div class=\"description\"> <p>Call on a computed property to set it into non-cached mode. When in this mode the computed property will not automatically cache the return value.</p> <p>It also does not automatically fire any change events. You must manually notify any changes if you want to observe this property.</p> <p>Dependency keys have no effect on volatile properties as they are for cache invalidation and notification when cached value is invalidated.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let outsideService = Ember.Object.extend({\n  value: Ember.computed(function() {\n    return OutsideService.getValue();\n  }).volatile()\n}).create();\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> this</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ComputedProperty.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ComputedProperty.html</a>\n  </p>\n</div>\n","modules/ember-views":"<h1 class=\"api-header\">ember-views Module</h1>  <p>Parent: <a href=\"ember\">ember</a></p> \n<p>The internal class used to create text inputs when the <code>{{input}}</code> helper is used with <code>type</code> of <code>checkbox</code>.</p> <p>See <a href=\"../classes/ember.templates.helpers#method_input\">Ember.Templates.helpers.input</a> for usage details.</p> <h2 class=\"anchorable-toc\" id=\"toc_direct-manipulation-of-code-checked-code\">Direct manipulation of <code>checked</code>\n</h2> <p>The <code>checked</code> attribute of an <code>Ember.Checkbox</code> object should always be set through the Ember object or by interacting with its rendered element representation via the mouse, keyboard, or touch. Updating the value of the checkbox via jQuery will result in the checked value of the object and its element losing synchronization.</p> <h2 class=\"anchorable-toc\" id=\"toc_layout-and-layoutname-properties\">Layout and LayoutName properties</h2> <p>Because HTML <code>input</code> elements are self closing <code>layout</code> and <code>layoutName</code> properties will not be applied. See <a href=\"../classes/ember.view\">Ember.View</a>'s layout section for more information.</p> <h2>Classes and Namespaces</h2> <ul> <li class=\"public\"><a href=\"../classes/ember.checkbox\">Ember.Checkbox</a></li> <li class=\"public\"><a href=\"../classes/ember.textarea\">Ember.TextArea</a></li> <li class=\"public\"><a href=\"../classes/ember.textfield\">Ember.TextField</a></li> <li class=\"public\"><a href=\"../classes/ember.component\">Ember.Component</a></li>   <li class=\"public\"><a href=\"../classes/ember.instrumentationsupport\">Ember.InstrumentationSupport</a></li>   <li class=\"public\"><a href=\"../classes/ember.visibilitysupport\">Ember.VisibilitySupport</a></li>   </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/modules/ember-views.html\" class=\"_attribution-link\">http://emberjs.com/api/modules/ember-views.html</a>\n  </p>\n</div>\n","classes/ember.copyable":"<h1 class=\"api-header\"> Ember.Copyable Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/copyable.js#L12\">packages/ember-runtime/lib/mixins/copyable.js:12</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>Implements some standard methods for copying an object. Add this mixin to any object you create that can create a copy of itself. This mixin is added automatically to the built-in array.</p> <p>You should generally implement the <code>copy()</code> method to return a copy of the receiver.</p> <p>Note that <code>frozenCopy()</code> will only work if you also implement <code>Ember.Freezable</code>.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Copyable.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Copyable.html</a>\n  </p>\n</div>\n","classes/ember.debug":"<h1 class=\"api-header\"> Ember.Debug Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-debug/lib/index.js#L218\">packages/ember-debug/lib/index.js:218</a></p> <p>Module: <a href=\"../modules/ember-debug\">ember-debug</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerDeprecationHandler\">registerDeprecationHandler</h2>\n<span class=\"args\"> (handler) </span><span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-debug/lib/index.js#L224\">packages/ember-debug/lib/index.js:224</a> <br>Available since 2.1.0 </div> <div class=\"description\"> <p>Allows for runtime registration of handler functions that override the default deprecation behavior. Deprecations are invoked by calls to <a href=\"ember#method_deprecate\">Ember.deprecate</a>. The following example demonstrates its usage by registering a handler that throws an error if the message contains the word \"should\", otherwise defers to the default handler.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Debug.registerDeprecationHandler((message, options, next) =&gt; {\n  if (message.indexOf('should') !== -1) {\n    throw new Error(`Deprecation message with should: ${message}`);\n  } else {\n    // defer to whatever handler was registered before this one\n    next(message, options);\n  }\n}\n</pre> <p>The handler function takes the following arguments:</p> <ul> <li> <code>message</code> - The message received from the deprecation call.</li> <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li> <ul> <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li> <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li> </ul> <li> <code>next</code> - A function that calls into the previously registered handler.</li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>handler</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> A function to handle deprecation calls. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerWarnHandler\">registerWarnHandler</h2>\n<span class=\"args\"> (handler) </span><span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-debug/lib/index.js#L260\">packages/ember-debug/lib/index.js:260</a> <br>Available since 2.1.0 </div> <div class=\"description\"> <p>Allows for runtime registration of handler functions that override the default warning behavior. Warnings are invoked by calls made to <a href=\"ember#method_warn\">Ember.warn</a>. The following example demonstrates its usage by registering a handler that does nothing overriding Ember's default warning behavior.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// next is not called, so no warnings get the default behavior\nEmber.Debug.registerWarnHandler(() =&gt; {});\n</pre> <p>The handler function takes the following arguments:</p> <ul> <li> <code>message</code> - The message received from the warn call. </li> <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li> <ul> <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li> </ul> <li> <code>next</code> - A function that calls into the previously registered handler.</li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>handler</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> A function to handle warnings. </dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Debug.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Debug.html</a>\n  </p>\n</div>\n","classes/ember.eachproxy":"<h1 class=\"api-header\"> Ember.EachProxy Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/each_proxy.js#L16\">packages/ember-runtime/lib/system/each_proxy.js:16</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>This is the object instance returned when you get the <code>@each</code> property on an array. It uses the unknownProperty handler to automatically create EachArray instances for property names.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.EachProxy.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.EachProxy.html</a>\n  </p>\n</div>\n","classes/ember.application":"<h1 class=\"api-header\"> Ember.Application Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: Ember.Engine</p> <p>Uses: <a href=\"registryproxymixin\">RegistryProxyMixin</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L45\">packages/ember-application/lib/system/application.js:45</a></p> <p>Module: <a href=\"../modules/ember-application\">ember-application</a></p> </div> <div class=\"description\"> <p>An instance of <code>Ember.Application</code> is the starting point for every Ember application. It helps to instantiate, initialize and coordinate the many objects that make up your app.</p> <p>Each Ember app has one and only one <code>Ember.Application</code> object. In fact, the very first thing you should do in your application is create the instance:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">window.App = Ember.Application.create();\n</pre> <p>Typically, the application object is the only global variable. All other classes in your app should be properties on the <code>Ember.Application</code> instance, which highlights its first role: a global namespace.</p> <p>For example, if you define a view class, it might look like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.MyView = Ember.View.extend();\n</pre> <p>By default, calling <code>Ember.Application.create()</code> will automatically initialize your application by calling the <code>Ember.Application.initialize()</code> method. If you need to delay initialization, you can call your app's <code>deferReadiness()</code> method. When you are ready for your app to be initialized, call its <code>advanceReadiness()</code> method.</p> <p>You can define a <code>ready</code> method on the <code>Ember.Application</code> instance, which will be run by Ember when the application is initialized.</p> <p>Because <code>Ember.Application</code> inherits from <code>Ember.Namespace</code>, any classes you create will have useful string representations when calling <code>toString()</code>. See the <code>Ember.Namespace</code> documentation for more information.</p> <p>While you can think of your <code>Ember.Application</code> as a container that holds the other classes in your application, there are several other responsibilities going on under-the-hood that you may want to understand.</p> <h3 class=\"anchorable-toc\" id=\"toc_event-delegation\">Event Delegation</h3> <p>Ember uses a technique called <em>event delegation</em>. This allows the framework to set up a global, shared event listener instead of requiring each view to do it manually. For example, instead of each view registering its own <code>mousedown</code> listener on its associated element, Ember sets up a <code>mousedown</code> listener on the <code>body</code>.</p> <p>If a <code>mousedown</code> event occurs, Ember will look at the target of the event and start walking up the DOM node tree, finding corresponding views and invoking their <code>mouseDown</code> method as it goes.</p> <p><code>Ember.Application</code> has a number of default events that it listens for, as well as a mapping from lowercase events to camel-cased view method names. For example, the <code>keypress</code> event causes the <code>keyPress</code> method on the view to be called, the <code>dblclick</code> event causes <code>doubleClick</code> to be called, and so on.</p> <p>If there is a bubbling browser event that Ember does not listen for by default, you can specify custom events and their corresponding view method names by setting the application's <code>customEvents</code> property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create({\n  customEvents: {\n    // add support for the paste event\n    paste: 'paste'\n  }\n});\n</pre> <p>To prevent Ember from setting up a listener for a default event, specify the event name with a <code>null</code> value in the <code>customEvents</code> property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create({\n  customEvents: {\n    // prevent listeners for mouseenter/mouseleave events\n    mouseenter: null,\n    mouseleave: null\n  }\n});\n</pre> <p>By default, the application sets up these event listeners on the document body. However, in cases where you are embedding an Ember application inside an existing page, you may want it to set up the listeners on an element inside the body.</p> <p>For example, if only events inside a DOM element with the ID of <code>ember-app</code> should be delegated, set your application's <code>rootElement</code> property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create({\n  rootElement: '#ember-app'\n});\n</pre> <p>The <code>rootElement</code> can be either a DOM element or a jQuery-compatible selector string. Note that <em>views appended to the DOM outside the root element will not receive events.</em> If you specify a custom root element, make sure you only append views inside it!</p> <p>To learn more about the events Ember components use, see <a href=\"https://guides.emberjs.com/v2.6.0/components/handling-events/#toc_event-names\">components/handling-events</a>.</p> <h3 class=\"anchorable-toc\" id=\"toc_initializers\">Initializers</h3> <p>Libraries on top of Ember can add initializers, like so:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Application.initializer({\n  name: 'api-adapter',\n\n  initialize: function(application) {\n    application.register('api-adapter:main', ApiAdapter);\n  }\n});\n</pre> <p>Initializers provide an opportunity to access the internal registry, which organizes the different components of an Ember application. Additionally they provide a chance to access the instantiated application. Beyond being used for libraries, initializers are also a great way to organize dependency injection or setup in your own application.</p> <h3 class=\"anchorable-toc\" id=\"toc_routing\">Routing</h3> <p>In addition to creating your application's router, <code>Ember.Application</code> is also responsible for telling the router when to start routing. Transitions between routes can be logged with the <code>LOG_TRANSITIONS</code> flag, and more detailed intra-transition logging can be logged with the <code>LOG_TRANSITIONS_INTERNAL</code> flag:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create({\n  LOG_TRANSITIONS: true, // basic logging of successful transitions\n  LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps\n});\n</pre> <p>By default, the router will begin trying to translate the current URL into application state once the browser emits the <code>DOMContentReady</code> event. If you need to defer routing, you can call the application's <code>deferReadiness()</code> method. Once routing can begin, call the <code>advanceReadiness()</code> method.</p> <p>If there is any setup required before routing begins, you can implement a <code>ready()</code> method on your app that will be invoked immediately before routing begins.</p> </div> <div class=\"pane\" id=\"methods\">   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_advanceReadiness\">advanceReadiness</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L527\">packages/ember-application/lib/system/application.js:527</a> </div> <div class=\"description\"> <p>Call <code>advanceReadiness</code> after any asynchronous setup logic has completed. Each call to <code>deferReadiness</code> must be matched by a call to <code>advanceReadiness</code> or the application will never become ready and routing will not begin.</p> </div>  </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_deferReadiness\">deferReadiness</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L495\">packages/ember-application/lib/system/application.js:495</a> </div> <div class=\"description\"> <p>Use this to defer readiness until some condition is true.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create();\n\nApp.deferReadiness();\n\n// Ember.$ is a reference to the jQuery object/function\nEmber.$.getJSON('/auth-token', function(token) {\n  App.token = token;\n  App.advanceReadiness();\n});\n</pre> <p>This allows you to perform asynchronous setup logic and defer booting your application until the setup has finished.</p> <p>However, if the setup requires a loading UI, it might be better to use the router for this purpose.</p> </div>  </div>            <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reset\">reset</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L631\">packages/ember-application/lib/system/application.js:631</a> </div> <div class=\"description\"> <p>Reset the application. This is typically used only in tests. It cleans up the application in the following order:</p> <ol> <li>Deactivate existing routes</li> <li>Destroy all objects in the container</li> <li>Create a new application container</li> <li>Re-route to the existing url</li> </ol> <p>Typical Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App;\n\nrun(function() {\n  App = Ember.Application.create();\n});\n\nmodule('acceptance test', {\n  setup: function() {\n    App.reset();\n  }\n});\n\ntest('first test', function() {\n  // App is freshly reset\n});\n\ntest('second test', function() {\n  // App is again freshly reset\n});\n</pre> <p>Advanced Example:</p> <p>Occasionally you may want to prevent the app from initializing during setup. This could enable extra configuration, or enable asserting prior to the app becoming ready.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App;\n\nrun(function() {\n  App = Ember.Application.create();\n});\n\nmodule('acceptance test', {\n  setup: function() {\n    run(function() {\n      App.reset();\n      App.deferReadiness();\n    });\n  }\n});\n\ntest('first test', function() {\n  ok(true, 'something before app is initialized');\n\n  run(function() {\n    App.advanceReadiness();\n  });\n\n  ok(true, 'something after app is initialized');\n});\n</pre> </div>  </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_visit\">visit</h2>\n<span class=\"args\"> (url, options) </span><span class=\"type\">Promise<ember.applicationinstance error></ember.applicationinstance></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L799\">packages/ember-application/lib/system/application.js:799</a> </div> <div class=\"description\"> <p>Boot a new instance of <code>Ember.ApplicationInstance</code> for the current application and navigate it to the given <code>url</code>. Returns a <code>Promise</code> that resolves with the instance when the initial routing and rendering is complete, or rejects with any error that occured during the boot process.</p> <p>When <code>autoboot</code> is disabled, calling <code>visit</code> would first cause the application to boot, which runs the application initializers.</p> <p>This method also takes a hash of boot-time configuration options for customizing the instance's behavior. See the documentation on <code>Ember.ApplicationInstance.BootOptions</code> for details.</p> <p><code>Ember.ApplicationInstance.BootOptions</code> is an interface class that exists purely to document the available options; you do not need to construct it manually. Simply pass a regular JavaScript object containing of the desired options:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyApp.visit(\"/\", { location: \"none\", rootElement: \"#container\" });\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_supported-scenarios\">Supported Scenarios</h3> <p>While the <code>BootOptions</code> class exposes a large number of knobs, not all combinations of them are valid; certain incompatible combinations might result in unexpected behavior.</p> <p>For example, booting the instance in the full browser environment while specifying a foriegn <code>document</code> object (e.g. <code>{ isBrowser: true,\ndocument: iframe.contentDocument }</code>) does not work correctly today, largely due to Ember's jQuery dependency.</p> <p>Currently, there are three officially supported scenarios/configurations. Usages outside of these scenarios are not guaranteed to work, but please feel free to file bug reports documenting your experience and any issues you encountered to help expand support.</p> <h4 class=\"anchorable-toc\" id=\"toc_browser-applications-manual-boot\">Browser Applications (Manual Boot)</h4> <p>The setup is largely similar to how Ember works out-of-the-box. Normally, Ember will boot a default instance for your Application on \"DOM ready\". However, you can customize this behavior by disabling <code>autoboot</code>.</p> <p>For example, this allows you to render a miniture demo of your application into a specific area on your marketing website:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import MyApp from 'my-app';\n\n$(function() {\n  let App = MyApp.create({ autoboot: false });\n\n  let options = {\n    // Override the router's location adapter to prevent it from updating\n    // the URL in the address bar\n    location: 'none',\n\n    // Override the default `rootElement` on the app to render into a\n    // specific `div` on the page\n    rootElement: '#demo'\n  };\n\n  // Start the app at the special demo URL\n  App.visit('/demo', options);\n});\n</pre> <p>Or perhaps you might want to boot two instances of your app on the same page for a split-screen multiplayer experience:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import MyApp from 'my-app';\n\n$(function() {\n  let App = MyApp.create({ autoboot: false });\n\n  let sessionId = MyApp.generateSessionID();\n\n  let player1 = App.visit(`/matches/join?name=Player+1&amp;session=${sessionId}`, { rootElement: '#left', location: 'none' });\n  let player2 = App.visit(`/matches/join?name=Player+2&amp;session=${sessionId}`, { rootElement: '#right', location: 'none' });\n\n  Promise.all([player1, player2]).then(() =&gt; {\n    // Both apps have completed the initial render\n    $('#loading').fadeOut();\n  });\n});\n</pre> <p>Do note that each app instance maintains their own registry/container, so they will run in complete isolation by default.</p> <h4 class=\"anchorable-toc\" id=\"toc_server-side-rendering-also-known-as-fastboot\">Server-Side Rendering (also known as FastBoot)</h4> <p>This setup allows you to run your Ember app in a server environment using Node.js and render its content into static HTML for SEO purposes.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">const HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);\n\nfunction renderURL(url) {\n  let dom = new SimpleDOM.Document();\n  let rootElement = dom.body;\n  let options = { isBrowser: false, document: dom, rootElement: rootElement };\n\n  return MyApp.visit(options).then(instance =&gt; {\n    try {\n      return HTMLSerializer.serialize(rootElement.firstChild);\n    } finally {\n      instance.destroy();\n    }\n  });\n}\n</pre> <p>In this scenario, because Ember does not have access to a global <code>document</code> object in the Node.js environment, you must provide one explicitly. In practice, in the non-browser environment, the stand-in <code>document</code> object only need to implement a limited subset of the full DOM API. The <code>SimpleDOM</code> library is known to work.</p> <p>Since there is no access to jQuery in the non-browser environment, you must also specify a DOM <code>Element</code> object in the same <code>document</code> for the <code>rootElement</code> option (as opposed to a selector string like <code>\"body\"</code>).</p> <p>See the documentation on the <code>isBrowser</code>, <code>document</code> and <code>rootElement</code> properties on <code>Ember.ApplicationInstance.BootOptions</code> for details.</p> <h4 class=\"anchorable-toc\" id=\"toc_server-side-resource-discovery\">Server-Side Resource Discovery</h4> <p>This setup allows you to run the routing layer of your Ember app in a server environment using Node.js and completely disable rendering. This allows you to simulate and discover the resources (i.e. AJAX requests) needed to fufill a given request and eagerly \"push\" these resources to the client.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import BrowserNetworkService from 'app/services/network/browser';\nimport NodeNetworkService from 'app/services/network/node';\n\n// Inject a (hypothetical) service for abstracting all AJAX calls and use\n// the appropiate implementaion on the client/server. This also allows the\n// server to log all the AJAX calls made during a particular request and use\n// that for resource-discovery purpose.\n\nexport function initialize(application) {\n  if (window) { // browser\n    application.register('service:network', BrowserNetworkService);\n  } else { // node\n    application.register('service:network', NodeNetworkService);\n  }\n\n  application.inject('route', 'network', 'service:network');\n};\n\nexport default {\n  name: 'network-service',\n  initialize: initialize\n};\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\n// An example of how the (hypothetical) service is used in routes.\n\nexport default Ember.Route.extend({\n  model(params) {\n    return this.network.fetch(`/api/posts/${params.post_id}.json`);\n  },\n\n  afterModel(post) {\n    if (post.isExternalContent) {\n      return this.network.fetch(`/api/external/?url=${post.externalURL}`);\n    } else {\n      return post;\n    }\n  }\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">// Finally, put all the pieces together\n\nfunction discoverResourcesFor(url) {\n  return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance =&gt; {\n    let networkService = instance.lookup('service:network');\n    return networkService.requests; // =&gt; { \"/api/posts/123.json\": \"...\" }\n  });\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>url</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The initial URL to navigate to </dd> <dt>\n<strong>options</strong> <span class=\"type\"><a href=\"ember.applicationinstance.bootoptions\">Ember.ApplicationInstance.BootOptions</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise<ember.applicationinstance error></ember.applicationinstance></span> </dt>\n </dl> </div> </div>  </div>\n<div class=\"pane\" id=\"events\">  <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_ready\">ready</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L773\">packages/ember-application/lib/system/application.js:773</a> </div> <div class=\"description\"> <p>Called when the Application has become ready, immediately before routing begins. The call will be delayed until the DOM has become ready.</p> </div>  </div> </div>\n<div class=\"pane\" id=\"properties\">    <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_customEvents\">customEvents</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L237\">packages/ember-application/lib/system/application.js:237</a> </div> <div class=\"description\"> <p>The DOM events for which the event dispatcher should listen.</p> <p>By default, the application's <code>Ember.EventDispatcher</code> listens for a set of standard DOM events, such as <code>mousedown</code> and <code>keyup</code>, and delegates them to your application's <code>Ember.View</code> instances.</p> <p>If you would like additional bubbling events to be delegated to your views, set your <code>Ember.Application</code>'s <code>customEvents</code> property to a hash containing the DOM event name as the key and the corresponding view method name as the value. Setting an event to a value of <code>null</code> will prevent a default event listener from being added for that event.</p> <p>To add new events to be listened to:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create({\n  customEvents: {\n    // add support for the paste event\n    paste: 'paste'\n  }\n});\n</pre> <p>To prevent default events from being listened to:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create({\n  customEvents: {\n    // remove support for mouseenter / mouseleave events\n    mouseenter: null,\n    mouseleave: null\n  }\n});\n</pre> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_eventDispatcher\">eventDispatcher</h2>\n<span class=\"type\"><a href=\"ember.eventdispatcher\">Ember.EventDispatcher</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L220\">packages/ember-application/lib/system/application.js:220</a> </div> <div class=\"description\"> <p>The <code>Ember.EventDispatcher</code> responsible for delegating events to this application's views.</p> <p>The event dispatcher is created by the application at initialization time and sets up event listeners on the DOM element described by the application's <code>rootElement</code> property.</p> <p>See the documentation for <code>Ember.EventDispatcher</code> for more information.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_rootElement\">rootElement</h2>\n<span class=\"type\">DOMElement</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/application.js#L204\">packages/ember-application/lib/system/application.js:204</a> </div> <div class=\"description\"> <p>The root DOM element of the Application. This can be specified as an element or a <a href=\"http://api.jquery.com/category/selectors/\">jQuery-compatible selector string</a>.</p> <p>This is the element that will be passed to the Application's, <code>eventDispatcher</code>, which sets up the listeners for event delegation. Every view in your application should be a child of the element you specify here.</p> </div> <p> <strong>Default:</strong> <code>'body'</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Application.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Application.html</a>\n  </p>\n</div>\n","classes/ember.controllermixin":"<h1 class=\"api-header\"> Ember.ControllerMixin Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Uses: <a href=\"ember.actionhandler\">Ember.ActionHandler</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/controller.js#L6\">packages/ember-runtime/lib/mixins/controller.js:6</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"pane\" id=\"methods\">     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_transitionToRoute\">transitionToRoute</h2>\n<span class=\"args\"> (name, models, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/ext/controller.js#L41\">packages/ember-routing/lib/ext/controller.js:41</a> </div> <div class=\"description\"> <p>Transition the application into another route. The route may be either a single route or route path:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">aController.transitionToRoute('blogPosts');\naController.transitionToRoute('blogPosts.recentEntries');\n</pre> <p>Optionally supply a model for the route in question. The model will be serialized into the URL using the <code>serialize</code> hook of the route:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">aController.transitionToRoute('blogPost', aPost);\n</pre> <p>If a literal is passed (such as a number or a string), it will be treated as an identifier instead. In this case, the <code>model</code> hook of the route will be triggered:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">aController.transitionToRoute('blogPost', 1);\n</pre> <p>Multiple models will be applied last to first recursively up the route tree.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('blogPost', { path: ':blogPostId' }, function() {\n    this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });\n  });\n});\n\naController.transitionToRoute('blogComment', aPost, aComment);\naController.transitionToRoute('blogComment', 1, 13);\n</pre> <p>It is also possible to pass a URL (a string that starts with a <code>/</code>). This is intended for testing and debugging purposes and should rarely be used in production code.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">aController.transitionToRoute('/');\naController.transitionToRoute('/blog/post/1/comment/13');\naController.transitionToRoute('/blog/posts?sort=title');\n</pre> <p>An options hash with a <code>queryParams</code> property may be provided as the final argument to add query parameters to the destination URL.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">aController.transitionToRoute('blogPost', 1, {\n  queryParams: {showComments: 'true'}\n});\n\n// if you just want to transition the query parameters without changing the route\naController.transitionToRoute({queryParams: {sort: 'date'}});\n</pre> <p>See also <a href=\"ember.controllermixin#method_replaceRoute\">replaceRoute</a>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the route or a URL </dd> <dt>\n<strong>models</strong> <span class=\"type\">...Object</span>\n</dt> <dd> the model(s) or identifier(s) to be used while transitioning to the route. </dd> <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> optional hash with a queryParams property containing a mapping of query parameters </dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">    <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_model\">model</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/controller.js#L38\">packages/ember-runtime/lib/mixins/controller.js:38</a> </div> <div class=\"description\"> <p>The controller's current model. When retrieving or modifying a controller's model, this property should be used instead of the <code>content</code> property.</p> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_queryParams\">queryParams</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/ext/controller.js#L12\">packages/ember-routing/lib/ext/controller.js:12</a> </div> <div class=\"description\"> <p>Defines which query parameters the controller accepts. If you give the names <code>['category','page']</code> it will bind the values of these query parameters to the variables <code>this.category</code> and <code>this.page</code></p> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_target\">target</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/controller.js#L16\">packages/ember-runtime/lib/mixins/controller.js:16</a> </div> <div class=\"description\"> <p>The object to which actions from the view should be sent.</p> <p>For example, when a Handlebars template uses the <code>{{action}}</code> helper, it will attempt to send the action to the view's controller's <code>target</code>.</p> <p>By default, the value of the target property is set to the router, and is injected when a controller is instantiated. This injection is applied as part of the application's initialization process. In most cases the <code>target</code> property will automatically be set to the logical consumer of actions for the controller.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ControllerMixin.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ControllerMixin.html</a>\n  </p>\n</div>\n","classes/ember.array":"<h1 class=\"api-header\"> Ember.Array Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Uses: <a href=\"ember.enumerable\">Ember.Enumerable</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L80\">packages/ember-runtime/lib/mixins/array.js:80</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>This mixin implements Observer-friendly Array-like behavior. It is not a concrete implementation, but it can be used up by other classes that want to appear like arrays.</p> <p>For example, ArrayProxy is a concrete classes that can be instantiated to implement array-like behavior. Both of these classes use the Array Mixin by way of the MutableArray mixin, which allows observable changes to be made to the underlying array.</p> <p>Unlike <code>Ember.Enumerable,</code> this mixin defines methods specifically for collections that provide index-ordered access to their contents. When you are designing code that needs to accept any kind of Array-like object, you should use these methods instead of Array primitives because these will properly notify observers of changes to the array.</p> <p>Although these methods are efficient, they do add a layer of indirection to your application so it is a good idea to use them only when you need the flexibility of using both true JavaScript arrays and \"virtual\" arrays such as controllers and collections.</p> <p>You can use the methods defined in this module to access and modify array contents in a KVO-friendly way. You can also be notified whenever the membership of an array changes by using <code>.observes('myArray.[]')</code>.</p> <p>To support <code>Ember.Array</code> in your own class, you must override two primitives to use it: <code>length()</code> and <code>objectAt()</code>.</p> <p>Note that the Ember.Array mixin also incorporates the <code>Ember.Enumerable</code> mixin. All <code>Ember.Array</code>-like objects are also enumerable.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_addArrayObserver\">addArrayObserver</h2>\n<span class=\"args\"> (target, opts) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L369\">packages/ember-runtime/lib/mixins/array.js:369</a> </div> <div class=\"description\"> <p>Adds an array observer to the receiving array. The array observer object normally must implement two methods:</p> <ul> <li>\n<code>arrayWillChange(observedObj, start, removeCount, addCount)</code> - This method will be called just before the array is modified.</li> <li>\n<code>arrayDidChange(observedObj, start, removeCount, addCount)</code> - This method will be called just after the array is modified.</li> </ul> <p>Both callbacks will be passed the observed object, starting index of the change as well as a count of the items to be removed and added. You can use these callbacks to optionally inspect the array during the change, clear caches, or do any other bookkeeping necessary.</p> <p>In addition to passing a target, you can also include an options hash which you can use to override the method names that will be invoked on the target.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">Object</span>\n</dt> <dd> The observer object. </dd> <dt>\n<strong>opts</strong> <span class=\"type\">Object</span>\n</dt> <dd> Optional hash of configuration options including `willChange` and `didChange` option. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_arrayContentDidChange\">arrayContentDidChange</h2>\n<span class=\"args\"> (startIdx, removeAmt, addAmt) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L481\">packages/ember-runtime/lib/mixins/array.js:481</a> </div> <div class=\"description\"> <p>If you are implementing an object that supports <code>Ember.Array</code>, call this method just after the array content changes to notify any observers and invalidate any related properties. Pass the starting index of the change as well as a delta of the amounts to change.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>startIdx</strong> <span class=\"type\">Number</span>\n</dt> <dd> The starting index in the array that did change. </dd> <dt>\n<strong>removeAmt</strong> <span class=\"type\">Number</span>\n</dt> <dd> The number of items that were removed. If you pass `null` assumes 0 </dd> <dt>\n<strong>addAmt</strong> <span class=\"type\">Number</span>\n</dt> <dd> The number of items that were added. If you pass `null` assumes 0. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_arrayContentWillChange\">arrayContentWillChange</h2>\n<span class=\"args\"> (startIdx, removeAmt, addAmt) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L426\">packages/ember-runtime/lib/mixins/array.js:426</a> </div> <div class=\"description\"> <p>If you are implementing an object that supports <code>Ember.Array</code>, call this method just before the array content changes to notify any observers and invalidate any related properties. Pass the starting index of the change as well as a delta of the amounts to change.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>startIdx</strong> <span class=\"type\">Number</span>\n</dt> <dd> The starting index in the array that will change. </dd> <dt>\n<strong>removeAmt</strong> <span class=\"type\">Number</span>\n</dt> <dd> The number of items that will be removed. If you pass `null` assumes 0 </dd> <dt>\n<strong>addAmt</strong> <span class=\"type\">Number</span>\n</dt> <dd> The number of items that will be added. If you pass `null` assumes 0. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>            <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_includes\">includes</h2>\n<span class=\"args\"> (obj, startAt) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Inherited from <a href=\"ember.enumerable#method_includes\">Ember.Enumerable</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L589\">packages/ember-runtime/lib/mixins/array.js:589</a> </div> <div class=\"description\"> <p>Returns <code>true</code> if the passed object can be found in the array. This method is a Polyfill for ES 2016 Array.includes. If no <code>startAt</code> argument is given, the starting location to search is 0. If it's negative, searches from the index of <code>this.length + startAt</code> by asc. <code>javascript\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 2);  // true\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, 3].includes(1, -1); // false\n[1, 2, 3].includes(1, -4); // true\n[1, 2, NaN].includes(NaN); // true\n</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to search for. </dd> <dt>\n<strong>startAt</strong> <span class=\"type\">Number</span>\n</dt> <dd> optional starting location to search, default 0 </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> `true` if object is found in the array.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_indexOf\">indexOf</h2>\n<span class=\"args\"> (object, startAt) </span><span class=\"type\">Number</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L277\">packages/ember-runtime/lib/mixins/array.js:277</a> </div> <div class=\"description\"> <p>Returns the index of the given object's first occurrence. If no <code>startAt</code> argument is given, the starting location to search is 0. If it's negative, will count backward from the end of the array. Returns -1 if no match is found.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'b', 'c', 'd', 'a'];\n\narr.indexOf('a');       //  0\narr.indexOf('z');       // -1\narr.indexOf('a', 2);    //  4\narr.indexOf('a', -1);   //  4\narr.indexOf('b', 3);    // -1\narr.indexOf('a', 100);  // -1\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>object</strong> <span class=\"type\">Object</span>\n</dt> <dd> the item to search for </dd> <dt>\n<strong>startAt</strong> <span class=\"type\">Number</span>\n</dt> <dd> optional starting location to search, default 0 </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Number</span> </dt>\n<dd> index or -1 if not found</dd> </dl> </div> </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_lastIndexOf\">lastIndexOf</h2>\n<span class=\"args\"> (object, startAt) </span><span class=\"type\">Number</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L321\">packages/ember-runtime/lib/mixins/array.js:321</a> </div> <div class=\"description\"> <p>Returns the index of the given object's last occurrence. If no <code>startAt</code> argument is given, the search starts from the last position. If it's negative, will count backward from the end of the array. Returns -1 if no match is found.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'b', 'c', 'd', 'a'];\n\narr.lastIndexOf('a');       //  4\narr.lastIndexOf('z');       // -1\narr.lastIndexOf('a', 2);    //  0\narr.lastIndexOf('a', -1);   //  4\narr.lastIndexOf('b', 3);    //  1\narr.lastIndexOf('a', 100);  //  4\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>object</strong> <span class=\"type\">Object</span>\n</dt> <dd> the item to search for </dd> <dt>\n<strong>startAt</strong> <span class=\"type\">Number</span>\n</dt> <dd> optional starting location to search, default 0 </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Number</span> </dt>\n<dd> index or -1 if not found</dd> </dl> </div> </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_objectAt\">objectAt</h2>\n<span class=\"args\"> (idx) </span><span class=\"type\">*</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L132\">packages/ember-runtime/lib/mixins/array.js:132</a> </div> <div class=\"description\"> <p>Returns the object at the given <code>index</code>. If the given <code>index</code> is negative or is greater or equal than the array length, returns <code>undefined</code>.</p> <p>This is one of the primitives you must implement to support <code>Ember.Array</code>. If your object supports retrieving the value of an array item using <code>get()</code> (i.e. <code>myArray.get(0)</code>), then you do not need to implement this method yourself.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'b', 'c', 'd'];\n\narr.objectAt(0);   // 'a'\narr.objectAt(3);   // 'd'\narr.objectAt(-1);  // undefined\narr.objectAt(4);   // undefined\narr.objectAt(5);   // undefined\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>idx</strong> <span class=\"type\">Number</span>\n</dt> <dd> The index of the item to return. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">*</span> </dt>\n<dd> item at index or undefined</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_objectsAt\">objectsAt</h2>\n<span class=\"args\"> (indexes) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L164\">packages/ember-runtime/lib/mixins/array.js:164</a> </div> <div class=\"description\"> <p>This returns the objects at the specified indexes, using <code>objectAt</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'b', 'c', 'd'];\n\narr.objectsAt([0, 1, 2]);  // ['a', 'b', 'c']\narr.objectsAt([2, 3, 4]);  // ['c', 'd', undefined]\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>indexes</strong> <span class=\"type\">Array</span>\n</dt> <dd> An array of indexes of items to return. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n </dl> </div> </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeArrayObserver\">removeArrayObserver</h2>\n<span class=\"args\"> (target, opts) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L399\">packages/ember-runtime/lib/mixins/array.js:399</a> </div> <div class=\"description\"> <p>Removes an array observer from the object if the observer is current registered. Calling this method multiple times with the same object will have no effect.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>target</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object observing the array. </dd> <dt>\n<strong>opts</strong> <span class=\"type\">Object</span>\n</dt> <dd> Optional hash of configuration options including `willChange` and `didChange` option. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_slice\">slice</h2>\n<span class=\"args\"> (beginIndex, endIndex) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L231\">packages/ember-runtime/lib/mixins/array.js:231</a> </div> <div class=\"description\"> <p>Returns a new array that is a slice of the receiver. This implementation uses the observable array methods to retrieve the objects for the new slice.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['red', 'green', 'blue'];\n\narr.slice(0);       // ['red', 'green', 'blue']\narr.slice(0, 2);    // ['red', 'green']\narr.slice(1, 100);  // ['green', 'blue']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>beginIndex</strong> <span class=\"type\">Number</span>\n</dt> <dd> (Optional) index to begin slicing from. </dd> <dt>\n<strong>endIndex</strong> <span class=\"type\">Number</span>\n</dt> <dd> (Optional) index to end the slice at (but not included). </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> New array with specified slice</dd> </dl> </div> </div>      </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property__each\">@each</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L551\">packages/ember-runtime/lib/mixins/array.js:551</a> </div> <div class=\"description\"> <p>Returns a special object that can be used to observe individual properties on the array. Just get an equivalent property on this object and it will return an enumerable that maps automatically to the named key on the member objects.</p> <p><code>@each</code> should only be used in a non-terminal context. Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">myMethod: computed('posts.@each.author', function(){\n  ...\n});\n</pre> <p>If you merely want to watch for the array being changed, like an object being replaced, added or removed, use <code>[]</code> instead of <code>@each</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">myMethod: computed('posts.[]', function(){\n  ...\n});\n</pre> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property__\">[]</h2>\n<span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ember.enumerable#method_%5B%5D\">Ember.Enumerable</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L188\">packages/ember-runtime/lib/mixins/array.js:188</a> </div> <div class=\"description\"> <p>This is the handler for the special array content property. If you get this property, it will return this. If you set this property to a new array, it will replace the current content.</p> <p>This property overrides the default property defined in <code>Ember.Enumerable</code>.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> this</dd> </dl> </div> </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_hasArrayObservers\">hasArrayObservers</h2>\n<span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L415\">packages/ember-runtime/lib/mixins/array.js:415</a> </div> <div class=\"description\"> <p>Becomes true whenever the array currently has observers watching changes on the array.</p> </div>  </div>   <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_length\">length</h2>\n<span class=\"type\">Number</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L121\">packages/ember-runtime/lib/mixins/array.js:121</a> </div> <div class=\"description\"> <p><strong>Required.</strong> You must implement this method to apply this mixin.</p> <p>Your array must support the <code>length</code> property. Your replace methods should set this property whenever it changes.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Array.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Array.html</a>\n  </p>\n</div>\n","classes/ember.coreobject":"<h1 class=\"api-header\"> Ember.CoreObject Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L216\">packages/ember-runtime/lib/system/core_object.js:216</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"pane\" id=\"methods\">     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_create\">create</h2>\n<span class=\"args\"> (arguments) </span><span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L647\">packages/ember-runtime/lib/system/core_object.js:647</a> </div> <div class=\"description\"> <p>Creates an instance of a class. Accepts either no arguments, or an object containing values to initialize the newly instantiated object with.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Ember.Object.extend({\n  helloWorld: function() {\n    alert(\"Hi, my name is \" + this.get('name'));\n  }\n});\n\nvar tom = App.Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n</pre> <p><code>create</code> will call the <code>init</code> function if defined during <code>Ember.AnyObject.extend</code></p> <p>If no arguments are passed to <code>create</code>, it will not set values to the new instance during initialization:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var noName = App.Person.create();\nnoName.helloWorld(); // alerts undefined\n</pre> <p>NOTE: For performance reasons, you cannot declare methods or computed properties during <code>create</code>. You should instead declare methods and computed properties when using <code>extend</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>arguments</strong> <span class=\"type\">[]</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_destroy\">destroy</h2>\n<span class=\"type\"><a href=\"ember.object\">Ember.Object</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L429\">packages/ember-runtime/lib/system/core_object.js:429</a> </div> <div class=\"description\"> <p>Destroys an object by setting the <code>isDestroyed</code> flag and removing its metadata, which effectively destroys observers and bindings.</p> <p>If you try to set a property on a destroyed object, an exception will be raised.</p> <p>Note that destruction is scheduled for the end of the run loop and does not happen immediately. It will set an isDestroying flag immediately.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.object\">Ember.Object</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extend\">extend</h2>\n<span class=\"args\"> (mixins, arguments) </span><span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L539\">packages/ember-runtime/lib/system/core_object.js:539</a> </div> <div class=\"description\"> <p>Creates a new subclass.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(thing);\n   }\n});\n</pre> <p>This defines a new subclass of Ember.Object: <code>App.Person</code>. It contains one method: <code>say()</code>.</p> <p>You can also create a subclass from any existing class by calling its <code>extend()</code> method. For example, you might want to create a subclass of Ember's built-in <code>Ember.View</code> class:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PersonView = Ember.View.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n</pre> <p>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special <code>_super()</code> method:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Ember.Object.extend({\n  say: function(thing) {\n    var name = this.get('name');\n    alert(name + ' says: ' + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: function(thing) {\n    this._super(thing + \", sir!\");\n  },\n  march: function(numberOfHours) {\n    alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.');\n  }\n});\n\nvar yehuda = App.Soldier.create({\n  name: \"Yehuda Katz\"\n});\n\nyehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n</pre> <p>The <code>create()</code> on line #17 creates an <em>instance</em> of the <code>App.Soldier</code> class. The <code>extend()</code> on line #8 creates a <em>subclass</em> of <code>App.Person</code>. Any instance of the <code>App.Person</code> class will <em>not</em> have the <code>march()</code> method.</p> <p>You can also pass <code>Mixin</code> classes to add additional properties to the subclass.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(this.get('name') + ' says: ' + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: function(thing){\n    alert(this.get('name') + ' sings: la la la ' + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: function() {\n    alert(this.get('name') + ' dances: tap tap tap tap ');\n  }\n});\n</pre> <p>The <code>App.BroadwayStar</code> class contains three methods: <code>say()</code>, <code>sing()</code>, and <code>dance()</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>mixins</strong> <span class=\"type\">[Mixin]</span>\n</dt> <dd> One or more Mixin classes </dd> <dt>\n<strong>arguments</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Object containing values to use within the new class </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_init\">init</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L229\">packages/ember-runtime/lib/system/core_object.js:229</a> </div> <div class=\"description\"> <p>An overridable method called when objects are instantiated. By default, does nothing unless it is overridden during class definition.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Ember.Object.extend({\n  init: function() {\n    alert('Name is ' + this.get('name'));\n  }\n});\n\nvar steve = App.Person.create({\n  name: \"Steve\"\n});\n\n// alerts 'Name is Steve'.\n</pre> <p>NOTE: If you do override <code>init</code> for a framework class like <code>Ember.View</code>, be sure to call <code>this._super(...arguments)</code> in your <code>init</code> declaration! If you don't, Ember may not have an opportunity to do important setup work, and you'll see strange behavior in your application.</p> </div>  </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reopen\">reopen</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L693\">packages/ember-runtime/lib/system/core_object.js:693</a> </div> <div class=\"description\"> <p>Augments a constructor's prototype with additional properties and functions:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\no = MyObject.create();\no.get('name'); // 'an object'\n\nMyObject.reopen({\n  say: function(msg){\n    console.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(\"hello\"); // logs \"hello\"\n\no.say(\"goodbye\"); // logs \"goodbye\"\n</pre> <p>To add functions and properties to the constructor itself, see <code>reopenClass</code></p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reopenClass\">reopenClass</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L729\">packages/ember-runtime/lib/system/core_object.js:729</a> </div> <div class=\"description\"> <p>Augments a constructor's own properties and functions:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\nMyObject.reopenClass({\n  canBuild: false\n});\n\nMyObject.canBuild; // false\no = MyObject.create();\n</pre> <p>In other words, this creates static properties and functions for the class. These are only available on the class and not on any instance of that class.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Ember.Object.extend({\n  name : \"\",\n  sayHello : function() {\n    alert(\"Hello. My name is \" + this.get('name'));\n  }\n});\n\nApp.Person.reopenClass({\n  species : \"Homo sapiens\",\n  createPerson: function(newPersonsName){\n    return App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\nvar tom = App.Person.create({\n  name : \"Tom Dale\"\n});\nvar yehuda = App.Person.createPerson(\"Yehuda Katz\");\n\ntom.sayHello(); // \"Hello. My name is Tom Dale\"\nyehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\nalert(App.Person.species); // \"Homo sapiens\"\n</pre> <p>Note that <code>species</code> and <code>createPerson</code> are <em>not</em> valid on the <code>tom</code> and <code>yehuda</code> variables. They are only valid on <code>App.Person</code>.</p> <p>To add functions and properties to instances of a constructor by extending the constructor's prototype see <code>reopen</code></p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_toString\">toString</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L479\">packages/ember-runtime/lib/system/core_object.js:479</a> </div> <div class=\"description\"> <p>Returns a string representation which attempts to provide more information than Javascript's <code>toString</code> typically does, in a generic way for all Ember objects.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() //=&gt; \"&lt;App.Person:ember1024&gt;\"\n</pre> <p>If the object's class is not defined on an Ember namespace, it will indicate it is a subclass of the registered superclass:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Student = App.Person.extend()\nstudent = Student.create()\nstudent.toString() //=&gt; \"&lt;(subclass of App.Person):ember1025&gt;\"\n</pre> <p>If the method <code>toStringExtension</code> is defined, its return value will be included in the output.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Teacher = App.Person.extend({\n  toStringExtension: function() {\n    return this.get('fullName');\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); //=&gt; \"&lt;App.Teacher:ember1026:Tom Dale&gt;\"\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> string representation</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_willDestroy\">willDestroy</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L452\">packages/ember-runtime/lib/system/core_object.js:452</a> </div> <div class=\"description\"> <p>Override to implement teardown.</p> </div>  </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_concatenatedProperties\">concatenatedProperties</h2>\n<span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L267\">packages/ember-runtime/lib/system/core_object.js:267</a> </div> <div class=\"description\"> <p>Defines the properties that will be concatenated from the superclass (instead of overridden).</p> <p>By default, when you extend an Ember class a property defined in the subclass overrides a property with the same name that is defined in the superclass. However, there are some cases where it is preferable to build up a property's value by combining the superclass' property value with the subclass' value. An example of this in use within Ember is the <code>classNames</code> property of <code>Ember.View</code>.</p> <p>Here is some sample code showing the difference between a concatenated property and a normal one:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: ['bar'],\n  classNames: ['bar']\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: ['foo'],\n  classNames: ['foo']\n});\n\nvar fooBarView = App.FooBarView.create();\nfooBarView.get('someNonConcatenatedProperty'); // ['foo']\nfooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n</pre> <p>This behavior extends to object creation as well. Continuing the above example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var view = App.FooBarView.create({\n  someNonConcatenatedProperty: ['baz'],\n  classNames: ['baz']\n})\nview.get('someNonConcatenatedProperty'); // ['baz']\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n</pre> <p>Adding a single property that is not an array will just add it in the array:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var view = App.FooBarView.create({\n  classNames: 'baz'\n})\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n</pre> <p>Using the <code>concatenatedProperties</code> property, we can tell Ember to mix the content of the properties.</p> <p>In <code>Ember.View</code> the <code>classNameBindings</code> and <code>attributeBindings</code> properties are also concatenated, in addition to <code>classNames</code>.</p> <p>This feature is available for you to use throughout the Ember object model, although typical app developers are likely to use it infrequently. Since it changes expectations about behavior of properties, you should properly document its usage in each individual concatenated property (to not mislead your users to think they can override the property in a subclass).</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isDestroyed\">isDestroyed</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L405\">packages/ember-runtime/lib/system/core_object.js:405</a> </div> <div class=\"description\"> <p>Destroyed object property flag.</p> <p>if this property is <code>true</code> the observers and bindings were already removed by the effect of calling the <code>destroy()</code> method.</p> </div> <p> <strong>Default:</strong> <code>false</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isDestroying\">isDestroying</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L417\">packages/ember-runtime/lib/system/core_object.js:417</a> </div> <div class=\"description\"> <p>Destruction scheduled flag. The <code>destroy()</code> method has been called.</p> <p>The object stays intact until the end of the run loop at which point the <code>isDestroyed</code> flag is set.</p> </div> <p> <strong>Default:</strong> <code>false</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_mergedProperties\">mergedProperties</h2>\n<span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/core_object.js#L336\">packages/ember-runtime/lib/system/core_object.js:336</a> </div> <div class=\"description\"> <p>Defines the properties that will be merged from the superclass (instead of overridden).</p> <p>By default, when you extend an Ember class a property defined in the subclass overrides a property with the same name that is defined in the superclass. However, there are some cases where it is preferable to build up a property's value by merging the superclass property value with the subclass property's value. An example of this in use within Ember is the <code>queryParams</code> property of routes.</p> <p>Here is some sample code showing the difference between a merged property and a normal one:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.BarRoute = Ember.Route.extend({\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  queryParams: {\n    page: {replace: false},\n    limit: {replace: true}\n  }\n});\n\nApp.FooBarRoute = App.BarRoute.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  queryParams: {\n    limit: {replace: false}\n  }\n});\n\nvar fooBarRoute = App.FooBarRoute.create();\n\nfooBarRoute.get('someNonMergedProperty');\n// =&gt; { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBarRoute.get('queryParams');\n// =&gt; {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n</pre> <p>This behavior is not available during object <code>create</code> calls. It is only available at <code>extend</code> time.</p> <p>This feature is available for you to use throughout the Ember object model, although typical app developers are likely to use it infrequently. Since it changes expectations about behavior of properties, you should properly document its usage in each individual merged property (to not mislead your users to think they can override the property in a subclass).</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.CoreObject.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.CoreObject.html</a>\n  </p>\n</div>\n","classes/ember.dataadapter":"<h1 class=\"api-header\"> Ember.DataAdapter Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: EmberObject</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/data_adapter.js#L20\">packages/ember-extension-support/lib/data_adapter.js:20</a></p> <p>Module: <a href=\"../modules/ember-extension-support\">ember-extension-support</a></p> </div> <div class=\"description\"> <p>The <code>DataAdapter</code> helps a data persistence library interface with tools that debug Ember such as the <a href=\"https://github.com/tildeio/ember-extension\">Ember Extension</a> for Chrome and Firefox.</p> <p>This class will be extended by a persistence library which will override some of the methods with library-specific code.</p> <p>The methods likely to be overridden are:</p> <ul> <li><code>getFilters</code></li> <li><code>detect</code></li> <li><code>columnsForType</code></li> <li><code>getRecords</code></li> <li><code>getRecordColumnValues</code></li> <li><code>getRecordKeywords</code></li> <li><code>getRecordFilterValues</code></li> <li><code>getRecordColor</code></li> <li><code>observeRecord</code></li> </ul> <p>The adapter will need to be registered in the application's container as <code>dataAdapter:main</code>.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Application.initializer({\n  name: \"data-adapter\",\n\n  initialize: function(application) {\n    application.register('data-adapter:main', DS.DataAdapter);\n  }\n});\n</pre> </div> <div class=\"pane\" id=\"methods\">     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_getFilters\">getFilters</h2>\n<span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/data_adapter.js#L115\">packages/ember-extension-support/lib/data_adapter.js:115</a> </div> <div class=\"description\"> <p>Specifies how records can be filtered. Records returned will need to have a <code>filterValues</code> property with a key for every name in the returned array.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> List of objects defining filters. The object should have a `name` and `desc` property.</dd> </dl> </div> </div>         <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_watchModelTypes\">watchModelTypes</h2>\n<span class=\"args\"> (typesAdded, typesUpdated) </span><span class=\"type\"><a href=\"function\">Function</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/data_adapter.js#L129\">packages/ember-extension-support/lib/data_adapter.js:129</a> </div> <div class=\"description\"> <p>Fetch the model types and observe them for changes.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>typesAdded</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> Callback to call to add types. Takes an array of objects containing wrapped types (returned from `wrapModelType`). </dd> <dt>\n<strong>typesUpdated</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> Callback to call when a type has changed. Takes an array of objects containing wrapped types. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"function\">Function</a></span> </dt>\n<dd> Method to call to remove all observers</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_watchRecords\">watchRecords</h2>\n<span class=\"args\"> (modelName, recordsAdded, recordsUpdated, recordsRemoved) </span><span class=\"type\"><a href=\"function\">Function</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/data_adapter.js#L172\">packages/ember-extension-support/lib/data_adapter.js:172</a> </div> <div class=\"description\"> <p>Fetch the records of a given type and observe them for changes.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The model name. </dd> <dt>\n<strong>recordsAdded</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> Callback to call to add records. Takes an array of objects containing wrapped records. The object should have the following properties: columnValues: {Object} The key and value of a table cell. object: {Object} The actual record object. </dd> <dt>\n<strong>recordsUpdated</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> Callback to call when a record has changed. Takes an array of objects containing wrapped records. </dd> <dt>\n<strong>recordsRemoved</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> Callback to call when a record has removed. Takes the following parameters: index: The array index where the records were removed. count: The number of records removed. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"function\">Function</a></span> </dt>\n<dd> Method to call to remove all observers.</dd> </dl> </div> </div>    </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_acceptsModelName\">acceptsModelName</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/data_adapter.js#L91\">packages/ember-extension-support/lib/data_adapter.js:91</a> </div> <div class=\"description\"> <p>Ember Data &gt; v1.0.0-beta.18 requires string model names to be passed around instead of the actual factories.</p> <p>This is a stamp for the Ember Inspector to differentiate between the versions to be able to support older versions too.</p> </div>  </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_containerDebugAdapter\">containerDebugAdapter</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/data_adapter.js#L68\">packages/ember-extension-support/lib/data_adapter.js:68</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>The container-debug-adapter which is used to list all models.</p> </div> <p> <strong>Default:</strong> <code>undefined</code> </p> </div>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.DataAdapter.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.DataAdapter.html</a>\n  </p>\n</div>\n","classes/ember.error":"<h1 class=\"api-header\"> Ember.Error Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: Error</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/error.js#L11\">packages/ember-metal/lib/error.js:11</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>A subclass of the JavaScript Error object for use in Ember.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Error.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Error.html</a>\n  </p>\n</div>\n","classes/ember.freezable":"<h1 class=\"api-header\"> Ember.Freezable Class  </h1>  <p>DEPRECATED</p> <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/freezable.js#L11\">packages/ember-runtime/lib/mixins/freezable.js:11</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>The <code>Ember.Freezable</code> mixin implements some basic methods for marking an object as frozen. Once an object is frozen it should be read only. No changes may be made the internal state of the object.</p> <h2 class=\"anchorable-toc\" id=\"toc_enforcement\">Enforcement</h2> <p>To fully support freezing in your subclass, you must include this mixin and override any method that might alter any property on the object to instead raise an exception. You can check the state of an object by checking the <code>isFrozen</code> property.</p> <p>Although future versions of JavaScript may support language-level freezing object objects, that is not the case today. Even if an object is freezable, it is still technically possible to modify the object, even though it could break other parts of your application that do not expect a frozen object to change. It is, therefore, very important that you always respect the <code>isFrozen</code> property on all freezable objects.</p> <h2 class=\"anchorable-toc\" id=\"toc_example-usage\">Example Usage</h2> <p>The example below shows a simple object that implement the <code>Ember.Freezable</code> protocol.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Contact = Ember.Object.extend(Ember.Freezable, {\n  firstName: null,\n  lastName: null,\n\n  // swaps the names\n  swapNames: function() {\n    if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;\n    var tmp = this.get('firstName');\n    this.set('firstName', this.get('lastName'));\n    this.set('lastName', tmp);\n    return this;\n  }\n\n});\n\nc = Contact.create({ firstName: \"John\", lastName: \"Doe\" });\nc.swapNames();  // returns c\nc.freeze();\nc.swapNames();  // EXCEPTION\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_copying\">Copying</h2> <p>Usually the <code>Ember.Freezable</code> protocol is implemented in cooperation with the <code>Ember.Copyable</code> protocol, which defines a <code>frozenCopy()</code> method that will return a frozen object, if the object implements this method as well.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Freezable.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Freezable.html</a>\n  </p>\n</div>\n","classes/ember.htmlbars":"<h1 class=\"api-header\"> Ember.HTMLBars Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember-htmlbars\">ember-htmlbars</a></p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.HTMLBars.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.HTMLBars.html</a>\n  </p>\n</div>\n","classes/ember.evented":"<h1 class=\"api-header\"> Ember.Evented Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/evented.js#L14\">packages/ember-runtime/lib/mixins/evented.js:14</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>This mixin allows for Ember objects to subscribe to and emit events.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Ember.Object.extend(Ember.Evented, {\n  greet: function() {\n    // ...\n    this.trigger('greet');\n  }\n});\n\nvar person = App.Person.create();\n\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n});\n\nperson.greet();\n\n// outputs: 'Our person has greeted'\n</pre> <p>You can also chain multiple event subscriptions:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">person.on('greet', function() {\n  console.log('Our person has greeted');\n}).one('greet', function() {\n  console.log('Offer one-time special');\n}).off('event', this, forgetThis);\n</pre> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_has\">has</h2>\n<span class=\"args\"> (name) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/evented.js#L142\">packages/ember-runtime/lib/mixins/evented.js:142</a> </div> <div class=\"description\"> <p>Checks to see if object has any subscriptions for named event.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the event </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> does the object have a subscription for event</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_off\">off</h2>\n<span class=\"args\"> (name, target, method) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/evented.js#L127\">packages/ember-runtime/lib/mixins/evented.js:127</a> </div> <div class=\"description\"> <p>Cancels subscription for given name, target, and method.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the event </dd> <dt>\n<strong>target</strong> <span class=\"type\">Object</span>\n</dt> <dd> The target of the subscription </dd> <dt>\n<strong>method</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The function of the subscription </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> this</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_on\">on</h2>\n<span class=\"args\"> (name, target, method) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/evented.js#L52\">packages/ember-runtime/lib/mixins/evented.js:52</a> </div> <div class=\"description\"> <p>Subscribes to a named event with given function.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">person.on('didLoad', function() {\n  // fired once the person has loaded\n});\n</pre> <p>An optional target can be passed in as the 2nd argument that will be set as the \"this\" for the callback. This is a good way to give your function access to the object triggering the event. When the target parameter is used the callback becomes the third argument.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the event </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The \"this\" binding for the callback </dd> <dt>\n<strong>method</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> this</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_one\">one</h2>\n<span class=\"args\"> (name, target, method) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/evented.js#L78\">packages/ember-runtime/lib/mixins/evented.js:78</a> </div> <div class=\"description\"> <p>Subscribes a function to a named event and then cancels the subscription after the first time the event is triggered. It is good to use <code>one</code> when you only care about the first time an event has taken place.</p> <p>This function takes an optional 2nd argument that will become the \"this\" value for the callback. If this argument is passed then the 3rd argument becomes the function.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the event </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The \"this\" binding for the callback </dd> <dt>\n<strong>method</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> this</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_trigger\">trigger</h2>\n<span class=\"args\"> (name, args) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/evented.js#L104\">packages/ember-runtime/lib/mixins/evented.js:104</a> </div> <div class=\"description\"> <p>Triggers a named event for the object. Any additional arguments will be passed as parameters to the functions that are subscribed to the event.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">person.on('didEat', function(food) {\n  console.log('person ate some ' + food);\n});\n\nperson.trigger('didEat', 'broccoli');\n\n// outputs: person ate some broccoli\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the event </dd> <dt>\n<strong>args</strong> <span class=\"type\">Object...</span>\n</dt> <dd> Optional arguments to pass on </dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Evented.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Evented.html</a>\n  </p>\n</div>\n","classes/ember.helper":"<h1 class=\"api-header\"> Ember.Helper Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helper.js#L8\">packages/ember-htmlbars/lib/helper.js:8</a></p> <p>Module: <a href=\"../modules/ember-templates\">ember-templates</a></p> </div> <div class=\"description\"> <p>Ember Helpers are functions that can compute values, and are used in templates. For example, this code calls a helper named <code>format-currency</code>:</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;div&gt;{{format-currency cents currency=\"$\"}}&lt;/div&gt;\n</pre> <p>Additionally, a helper can be called as a nested helper (sometimes called a subexpression). In this example, the computed value of a helper is passed to a component named <code>show-money</code>:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{show-money amount=(format-currency cents currency=\"$\")}}\n</pre> <p>Helpers defined using a class must provide a <code>compute</code> function. For example:</p> <pre class=\"highlight js \" data-language=\"js\">export default Ember.Helper.extend({\n  compute(params, hash) {\n    let cents = params[0];\n    let currency = hash.currency;\n    return `${currency}${cents * 0.01}`;\n  }\n});\n</pre> <p>Each time the input to a helper changes, the <code>compute</code> function will be called again.</p> <p>As instances, these helpers also have access to the container and will accept injected dependencies.</p> <p>Additionally, class helpers can call <code>recompute</code> to force a new computation.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_compute\">compute</h2>\n<span class=\"args\"> (params, hash) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helper.js#L79\">packages/ember-htmlbars/lib/helper.js:79</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Override this function when writing a class-based helper.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>params</strong> <span class=\"type\">Array</span>\n</dt> <dd> The positional arguments to the helper </dd> <dt>\n<strong>hash</strong> <span class=\"type\">Object</span>\n</dt> <dd> The named arguments to the helper </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_helper\">helper</h2>\n<span class=\"args\"> (helper) </span><span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helper.js#L94\">packages/ember-htmlbars/lib/helper.js:94</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>In many cases, the ceremony of a full <code>Ember.Helper</code> class is not required. The <code>helper</code> method creates pure-function helpers without instances. For example:</p> <pre class=\"highlight js \" data-language=\"js\">// app/helpers/format-currency.js\nexport function formatCurrency([cents], hash) {\n  let currency = hash.currency;\n  return `${currency}${cents * 0.01}`;\n});\n\nexport default Ember.Helper.helper(formatCurrency);\n\n// tests/myhelper.js\nimport { formatCurrency } from ..../helpers/myhelper\n// add some tests\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>helper</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The helper function </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_recompute\">recompute</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helper.js#L51\">packages/ember-htmlbars/lib/helper.js:51</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>On a class-based helper, it may be useful to force a recomputation of that helpers value. This is akin to <code>rerender</code> on a component.</p> <p>For example, this component will rerender when the <code>currentUser</code> on a session service changes:</p> <pre class=\"highlight js \" data-language=\"js\">// app/helpers/current-user-email.js\nexport default Ember.Helper.extend({\n  session: Ember.inject.service(),\n  onNewUser: Ember.observer('session.currentUser', function() {\n    this.recompute();\n  }),\n  compute() {\n    return this.get('session.currentUser.email');\n  }\n});\n</pre> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Helper.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Helper.html</a>\n  </p>\n</div>\n","classes/ember.containerdebugadapter":"<h1 class=\"api-header\"> Ember.ContainerDebugAdapter Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/container_debug_adapter.js#L16\">packages/ember-extension-support/lib/container_debug_adapter.js:16</a></p> <p>Module: <a href=\"../modules/ember-extension-support\">ember-extension-support</a></p> </div> <div class=\"description\"> <p>The <code>ContainerDebugAdapter</code> helps the container and resolver interface with tools that debug Ember such as the <a href=\"https://github.com/tildeio/ember-extension\">Ember Extension</a> for Chrome and Firefox.</p> <p>This class can be extended by a custom resolver implementer to override some of the methods with library-specific code.</p> <p>The methods likely to be overridden are:</p> <ul> <li><code>canCatalogEntriesByType</code></li> <li><code>catalogEntriesByType</code></li> </ul> <p>The adapter will need to be registered in the application's container as <code>container-debug-adapter:main</code>.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Application.initializer({\n  name: \"containerDebugAdapter\",\n\n  initialize: function(application) {\n    application.register('container-debug-adapter:main', require('app/container-debug-adapter'));\n  }\n});\n</pre> </div> <div class=\"pane\" id=\"methods\">        <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_canCatalogEntriesByType\">canCatalogEntriesByType</h2>\n<span class=\"args\"> (type) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/container_debug_adapter.js#L63\">packages/ember-extension-support/lib/container_debug_adapter.js:63</a> </div> <div class=\"description\"> <p>Returns true if it is possible to catalog a list of available classes in the resolver for a given type.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The type. e.g. \"model\", \"controller\", \"route\". </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> whether a list is available for this type.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_catalogEntriesByType\">catalogEntriesByType</h2>\n<span class=\"args\"> (type) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/container_debug_adapter.js#L80\">packages/ember-extension-support/lib/container_debug_adapter.js:80</a> </div> <div class=\"description\"> <p>Returns the available classes a given type.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The type. e.g. \"model\", \"controller\", \"route\". </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> An array of strings.</dd> </dl> </div> </div>                         </div>\n<div class=\"pane\" id=\"properties\">      <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_resolver\">resolver</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-extension-support/lib/container_debug_adapter.js#L52\">packages/ember-extension-support/lib/container_debug_adapter.js:52</a> </div> <div class=\"description\"> <p>The resolver instance of the application being debugged. This property will be injected on creation.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ContainerDebugAdapter.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ContainerDebugAdapter.html</a>\n  </p>\n</div>\n","classes/ember.injectedproperty":"<h1 class=\"api-header\"> Ember.InjectedProperty Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/injected_property.js#L7\">packages/ember-metal/lib/injected_property.js:7</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>Read-only property that returns the result of a container lookup.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.InjectedProperty.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.InjectedProperty.html</a>\n  </p>\n</div>\n","classes/ember.instrumentationsupport":"<h1 class=\"api-header\"> Ember.InstrumentationSupport Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/instrumentation_support.js#L8\">packages/ember-views/lib/mixins/instrumentation_support.js:8</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_instrumentDisplay\">instrumentDisplay</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/instrumentation_support.js#L14\">packages/ember-views/lib/mixins/instrumentation_support.js:14</a> </div> <div class=\"description\"> <p>Used to identify this view during debugging</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.InstrumentationSupport.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.InstrumentationSupport.html</a>\n  </p>\n</div>\n","classes/ember.legacyviewsupport":"<h1 class=\"api-header\"> Ember.LegacyViewSupport Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/legacy_view_support.js#L9\">packages/ember-views/lib/mixins/legacy_view_support.js:9</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.LegacyViewSupport.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.LegacyViewSupport.html</a>\n  </p>\n</div>\n","classes/ember.controller":"<h1 class=\"api-header\"> Ember.Controller Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Uses: <a href=\"ember.controllermixin\">Ember.ControllerMixin</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/controllers/controller.js#L12\">packages/ember-runtime/lib/controllers/controller.js:12</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Controller.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Controller.html</a>\n  </p>\n</div>\n","classes/ember.coreview":"<h1 class=\"api-header\"> Ember.CoreView Class  </h1>  <p>DEPRECATED</p> <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Uses: <a href=\"ember.evented\">Ember.Evented</a></p> <p>Uses: <a href=\"ember.actionhandler\">Ember.ActionHandler</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/views/core_view.js#L21\">packages/ember-views/lib/views/core_view.js:21</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p><code>Ember.CoreView</code> is an abstract class that exists to give view-like behavior to both Ember's main view class <code>Ember.View</code> and other classes that don't need the fully functionaltiy of <code>Ember.View</code>.</p> <p>Unless you have specific needs for <code>CoreView</code>, you will use <code>Ember.View</code> in your applications.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.CoreView.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.CoreView.html</a>\n  </p>\n</div>\n","classes/ember.defaultresolver":"<h1 class=\"api-header\"> Ember.DefaultResolver Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/resolver.js#L39\">packages/ember-application/lib/system/resolver.js:39</a></p> <p>Module: <a href=\"../modules/ember-application\">ember-application</a></p> </div> <div class=\"description\"> <p>The DefaultResolver defines the default lookup rules to resolve container lookups before consulting the container for registered items:</p> <ul> <li>templates are looked up on <code>Ember.TEMPLATES</code>\n</li> <li>other names are looked up on the application after converting the name. For example, <code>controller:post</code> looks up <code>App.PostController</code> by default.</li> <li>there are some nuances (see examples below)</li> </ul> <h3 class=\"anchorable-toc\" id=\"toc_how-resolving-works\">How Resolving Works</h3> <p>The container calls this object's <code>resolve</code> method with the <code>fullName</code> argument.</p> <p>It first parses the fullName into an object using <code>parseName</code>.</p> <p>Then it checks for the presence of a type-specific instance method of the form <code>resolve[Type]</code> and calls it if it exists. For example if it was resolving 'template:post', it would call the <code>resolveTemplate</code> method.</p> <p>Its last resort is to call the <code>resolveOther</code> method.</p> <p>The methods of this object are designed to be easy to override in a subclass. For example, you could enhance how a template is resolved like so:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App = Ember.Application.create({\n  Resolver: Ember.DefaultResolver.extend({\n    resolveTemplate: function(parsedName) {\n      var resolvedTemplate = this._super(parsedName);\n      if (resolvedTemplate) { return resolvedTemplate; }\n      return Ember.TEMPLATES['not_found'];\n    }\n  })\n});\n</pre> <p>Some examples of how names are resolved:</p> <pre class=\"highlight text \" data-language=\"\">'template:post'           //=&gt; Ember.TEMPLATES['post']\n'template:posts/byline'   //=&gt; Ember.TEMPLATES['posts/byline']\n'template:posts.byline'   //=&gt; Ember.TEMPLATES['posts/byline']\n'template:blogPost'       //=&gt; Ember.TEMPLATES['blogPost']\n                          //   OR\n                          //   Ember.TEMPLATES['blog_post']\n'controller:post'         //=&gt; App.PostController\n'controller:posts.index'  //=&gt; App.PostsIndexController\n'controller:blog/post'    //=&gt; Blog.PostController\n'controller:basic'        //=&gt; Ember.Controller\n'route:post'              //=&gt; App.PostRoute\n'route:posts.index'       //=&gt; App.PostsIndexRoute\n'route:blog/post'         //=&gt; Blog.PostRoute\n'route:basic'             //=&gt; Ember.Route\n'view:post'               //=&gt; App.PostView\n'view:posts.index'        //=&gt; App.PostsIndexView\n'view:blog/post'          //=&gt; Blog.PostView\n'view:basic'              //=&gt; Ember.View\n'foo:post'                //=&gt; App.PostFoo\n'model:post'              //=&gt; App.Post\n</pre> </div> <div class=\"pane\" id=\"methods\">                               <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_resolve\">resolve</h2>\n<span class=\"args\"> (fullName) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/resolver.js#L165\">packages/ember-application/lib/system/resolver.js:165</a> </div> <div class=\"description\"> <p>This method is called via the container's resolver method. It parses the provided <code>fullName</code> and then looks up and returns the appropriate template or class.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the lookup string </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the resolved factory</dd> </dl> </div> </div>               </div>\n<div class=\"pane\" id=\"properties\">      <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_namespace\">namespace</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/resolver.js#L112\">packages/ember-application/lib/system/resolver.js:112</a> </div> <div class=\"description\"> <p>This will be set to the Application instance when it is created.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.DefaultResolver.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.DefaultResolver.html</a>\n  </p>\n</div>\n","classes/ember.enumerable":"<h1 class=\"api-header\"> Ember.Enumerable Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L62\">packages/ember-runtime/lib/mixins/enumerable.js:62</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>This mixin defines the common interface implemented by enumerable objects in Ember. Most of these methods follow the standard Array iteration API defined up to JavaScript 1.8 (excluding language-specific features that cannot be emulated in older versions of JavaScript).</p> <p>This mixin is applied automatically to the Array class on page load, so you can use any of these methods on simple arrays. If Array already implements one of these methods, the mixin will not override them.</p> <h2 class=\"anchorable-toc\" id=\"toc_writing-your-own-enumerable\">Writing Your Own Enumerable</h2> <p>To make your own custom class enumerable, you need two items:</p> <ol> <li><p>You must have a length property. This property should change whenever the number of items in your enumerable object changes. If you use this with an <code>Ember.Object</code> subclass, you should be sure to change the length property using <code>set().</code></p></li> <li><p>You must implement <code>nextObject().</code> See documentation.</p></li> </ol> <p>Once you have these two methods implemented, apply the <code>Ember.Enumerable</code> mixin to your class and you will be able to enumerate the contents of your object like any other collection.</p> <h2 class=\"anchorable-toc\" id=\"toc_using-ember-enumeration-with-other-libraries\">Using Ember Enumeration with Other Libraries</h2> <p>Many other libraries provide some kind of iterator or enumeration like facility. This is often where the most common API conflicts occur. Ember's API is designed to be as friendly as possible with other libraries by implementing only methods that mostly correspond to the JavaScript 1.8 API.</p> </div> <div class=\"pane\" id=\"methods\">   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_any\">any</h2>\n<span class=\"args\"> (callback, target) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L624\">packages/ember-runtime/lib/mixins/enumerable.js:624</a> </div> <div class=\"description\"> <p>Returns <code>true</code> if the passed function returns true for any item in the enumeration. This corresponds with the <code>some()</code> method in JavaScript 1.6.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index, enumerable);\n</pre> <ul> <li>\n<code>item</code> is the current item in the iteration.</li> <li>\n<code>index</code> is the current index in the iteration.</li> <li>\n<code>enumerable</code> is the enumerable object itself.</li> </ul> <p>It should return the <code>true</code> to include the item in the results, <code>false</code> otherwise.</p> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context. This is a good way to give your iterator function access to the current object.</p> <p>Usage Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">if (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target object to use </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> `true` if the passed function returns `true` for any item</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_compact\">compact</h2>\n<span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L789\">packages/ember-runtime/lib/mixins/enumerable.js:789</a> </div> <div class=\"description\"> <p>Returns a copy of the array with all <code>null</code> and <code>undefined</code> elements removed.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', null, 'c', undefined];\narr.compact();  // ['a', 'c']\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> the array without null and undefined elements.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_contains\">contains</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L217\">packages/ember-runtime/lib/mixins/enumerable.js:217</a> </div> <div class=\"description\"> <p>Returns <code>true</code> if the passed object can be found in the receiver. The default version will iterate through the enumerable until the object is found. You may want to override this with a more efficient version.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'b', 'c'];\n\narr.contains('a'); // true\narr.contains('z'); // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to search for. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> `true` if object is found in enumerable.</dd> </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_every\">every</h2>\n<span class=\"args\"> (callback, target) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L569\">packages/ember-runtime/lib/mixins/enumerable.js:569</a> </div> <div class=\"description\"> <p>Returns <code>true</code> if the passed function returns true for every item in the enumeration. This corresponds with the <code>every()</code> method in JavaScript 1.6.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index, enumerable);\n</pre> <ul> <li>\n<code>item</code> is the current item in the iteration.</li> <li>\n<code>index</code> is the current index in the iteration.</li> <li>\n<code>enumerable</code> is the enumerable object itself.</li> </ul> <p>It should return the <code>true</code> or <code>false</code>.</p> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context. This is a good way to give your iterator function access to the current object.</p> <p>Example Usage:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">if (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target object to use </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_filter\">filter</h2>\n<span class=\"args\"> (callback, target) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L381\">packages/ember-runtime/lib/mixins/enumerable.js:381</a> </div> <div class=\"description\"> <p>Returns an array with all of the items in the enumeration that the passed function returns true for. This method corresponds to <code>filter()</code> defined in JavaScript 1.6.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index, enumerable);\n</pre> <ul> <li>\n<code>item</code> is the current item in the iteration.</li> <li>\n<code>index</code> is the current index in the iteration.</li> <li>\n<code>enumerable</code> is the enumerable object itself.</li> </ul> <p>It should return <code>true</code> to include the item in the results, <code>false</code> otherwise.</p> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context. This is a good way to give your iterator function access to the current object.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target object to use </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> A filtered array.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_filterBy\">filterBy</h2>\n<span class=\"args\"> (key, value) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L455\">packages/ember-runtime/lib/mixins/enumerable.js:455</a> </div> <div class=\"description\"> <p>Returns an array with just the items with the matched property. You can pass an optional second argument with the target value. Otherwise this will match any property that evaluates to <code>true</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the property to test </dd> <dt>\n<strong>value</strong> <span class=\"type\">[*]</span>\n</dt> <dd> optional value to test against. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> filtered array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_find\">find</h2>\n<span class=\"args\"> (callback, target) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L495\">packages/ember-runtime/lib/mixins/enumerable.js:495</a> </div> <div class=\"description\"> <p>Returns the first item in the array for which the callback returns true. This method works similar to the <code>filter()</code> method defined in JavaScript 1.6 except that it will stop working on the array once a match is found.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index, enumerable);\n</pre> <ul> <li>\n<code>item</code> is the current item in the iteration.</li> <li>\n<code>index</code> is the current index in the iteration.</li> <li>\n<code>enumerable</code> is the enumerable object itself.</li> </ul> <p>It should return the <code>true</code> to include the item in the results, <code>false</code> otherwise.</p> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context. This is a good way to give your iterator function access to the current object.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target object to use </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> Found item or `undefined`.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findBy\">findBy</h2>\n<span class=\"args\"> (key, value) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L552\">packages/ember-runtime/lib/mixins/enumerable.js:552</a> </div> <div class=\"description\"> <p>Returns the first item with a property matching the passed value. You can pass an optional second argument with the target value. Otherwise this will match any property that evaluates to <code>true</code>.</p> <p>This method works much like the more generic <code>find()</code> method.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the property to test </dd> <dt>\n<strong>value</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd> optional value to test against. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> found item or `undefined`</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_forEach\">forEach</h2>\n<span class=\"args\"> (callback, target) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L250\">packages/ember-runtime/lib/mixins/enumerable.js:250</a> </div> <div class=\"description\"> <p>Iterates through the enumerable, calling the passed function on each item. This method corresponds to the <code>forEach()</code> method defined in JavaScript 1.6.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index, enumerable);\n</pre> <ul> <li>\n<code>item</code> is the current item in the iteration.</li> <li>\n<code>index</code> is the current index in the iteration.</li> <li>\n<code>enumerable</code> is the enumerable object itself.</li> </ul> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context. This is a good way to give your iterator function access to the current object.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target object to use </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> receiver</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_getEach\">getEach</h2>\n<span class=\"args\"> (key) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L301\">packages/ember-runtime/lib/mixins/enumerable.js:301</a> </div> <div class=\"description\"> <p>Alias for <code>mapBy</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> name of the property </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> The mapped array.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_includes\">includes</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L1132\">packages/ember-runtime/lib/mixins/enumerable.js:1132</a> </div> <div class=\"description\"> <p>Returns <code>true</code> if the passed object can be found in the enumerable. <code>javascript\n[1, 2, 3].includes(2);                     // true\n[1, 2, 3].includes(4);                     // false\n[1, 2, undefined].includes(undefined);     // true\n[1, 2, null].includes(null);               // true\n[1, 2, NaN].includes(NaN);                 // true\n</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to search for. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> `true` if object is found in the enumerable.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_invoke\">invoke</h2>\n<span class=\"args\"> (methodName, args) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L746\">packages/ember-runtime/lib/mixins/enumerable.js:746</a> </div> <div class=\"description\"> <p>Invokes the named method on every object in the receiver that implements it. This method corresponds to the implementation in Prototype 1.6.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>methodName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the method </dd> <dt>\n<strong>args</strong> <span class=\"type\">Object...</span>\n</dt> <dd> optional arguments to pass as well. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> return values from calling invoke.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isAny\">isAny</h2>\n<span class=\"args\"> (key, value) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L682\">packages/ember-runtime/lib/mixins/enumerable.js:682</a> <br>Available since 1.3.0 </div> <div class=\"description\"> <p>Returns <code>true</code> if the passed property resolves to the value of the second argument for any item in the enumerable. This method is often simpler/faster than using a callback.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the property to test </dd> <dt>\n<strong>value</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd> optional value to test against. Defaults to `true` </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isEvery\">isEvery</h2>\n<span class=\"args\"> (key, value) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L608\">packages/ember-runtime/lib/mixins/enumerable.js:608</a> <br>Available since 1.3.0 </div> <div class=\"description\"> <p>Returns <code>true</code> if the passed property resolves to the value of the second argument for all items in the enumerable. This method is often simpler/faster than using a callback.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the property to test </dd> <dt>\n<strong>value</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd> optional value to test against. Defaults to `true` </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_map\">map</h2>\n<span class=\"args\"> (callback, target) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L329\">packages/ember-runtime/lib/mixins/enumerable.js:329</a> </div> <div class=\"description\"> <p>Maps all of the items in the enumeration to another value, returning a new array. This method corresponds to <code>map()</code> defined in JavaScript 1.6.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index, enumerable);\n</pre> <ul> <li>\n<code>item</code> is the current item in the iteration.</li> <li>\n<code>index</code> is the current index in the iteration.</li> <li>\n<code>enumerable</code> is the enumerable object itself.</li> </ul> <p>It should return the mapped value.</p> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context. This is a good way to give your iterator function access to the current object.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target object to use </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> The mapped array.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_mapBy\">mapBy</h2>\n<span class=\"args\"> (key) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L366\">packages/ember-runtime/lib/mixins/enumerable.js:366</a> </div> <div class=\"description\"> <p>Similar to map, this specialized function returns the value of the named property on all items in the enumeration.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> name of the property </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> The mapped array.</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reduce\">reduce</h2>\n<span class=\"args\"> (callback, initialValue, reducerProperty) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L698\">packages/ember-runtime/lib/mixins/enumerable.js:698</a> </div> <div class=\"description\"> <p>This will combine the values of the enumerator into a single value. It is a useful way to collect a summary value from an enumeration. This corresponds to the <code>reduce()</code> method defined in JavaScript 1.8.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(previousValue, item, index, enumerable);\n</pre> <ul> <li>\n<code>previousValue</code> is the value returned by the last call to the iterator.</li> <li>\n<code>item</code> is the current item in the iteration.</li> <li>\n<code>index</code> is the current index in the iteration.</li> <li>\n<code>enumerable</code> is the enumerable object itself.</li> </ul> <p>Return the new cumulative value.</p> <p>In addition to the callback you can also pass an <code>initialValue</code>. An error will be raised if you do not pass an initial value and the enumerator is empty.</p> <p>Note that unlike the other methods, this method does not allow you to pass a target object to set as this for the callback. It's part of the spec. Sorry.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>initialValue</strong> <span class=\"type\">Object</span>\n</dt> <dd> Initial value for the reduce </dd> <dt>\n<strong>reducerProperty</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> internal use only. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The reduced value.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reject\">reject</h2>\n<span class=\"args\"> (callback, target) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L422\">packages/ember-runtime/lib/mixins/enumerable.js:422</a> </div> <div class=\"description\"> <p>Returns an array with all of the items in the enumeration where the passed function returns false. This method is the inverse of filter().</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index, enumerable);\n</pre> <ul> <li>\n<em>item</em> is the current item in the iteration.</li> <li>\n<em>index</em> is the current index in the iteration</li> <li>\n<em>enumerable</em> is the enumerable object itself.</li> </ul> <p>It should return a falsey value to include the item in the results.</p> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as \"this\" on the context. This is a good way to give your iterator function access to the current object.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>target</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The target object to use </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> A rejected array.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_rejectBy\">rejectBy</h2>\n<span class=\"args\"> (key, value) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L470\">packages/ember-runtime/lib/mixins/enumerable.js:470</a> </div> <div class=\"description\"> <p>Returns an array with the items that do not have truthy values for key. You can pass an optional second argument with the target value. Otherwise this will match any property that evaluates to false.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the property to test </dd> <dt>\n<strong>value</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd> optional value to test against. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> rejected array</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_setEach\">setEach</h2>\n<span class=\"args\"> (key, value) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L311\">packages/ember-runtime/lib/mixins/enumerable.js:311</a> </div> <div class=\"description\"> <p>Sets the value on the named property for each member. This is more efficient than using other methods defined on this helper. If the object implements Ember.Observable, the value will be changed to <code>set(),</code> otherwise it will be set directly. <code>null</code> objects are skipped.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The key to set </dd> <dt>\n<strong>value</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to set </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> receiver</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_sortBy\">sortBy</h2>\n<span class=\"args\"> (property) </span><span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L1064\">packages/ember-runtime/lib/mixins/enumerable.js:1064</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p>Converts the enumerable into an array and sorts by the keys specified in the argument.</p> <p>You may provide multiple arguments to sort by multiple properties.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>property</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> name(s) to sort on </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> The sorted array.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_toArray\">toArray</h2>\n<span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L771\">packages/ember-runtime/lib/mixins/enumerable.js:771</a> </div> <div class=\"description\"> <p>Simply converts the enumerable into a genuine array. The order is not guaranteed. Corresponds to the method implemented by Prototype.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> the enumerable as an array.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_uniq\">uniq</h2>\n<span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L838\">packages/ember-runtime/lib/mixins/enumerable.js:838</a> </div> <div class=\"description\"> <p>Returns a new enumerable that contains only unique values. The default implementation returns an array regardless of the receiver type.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'a', 'b', 'b'];\narr.uniq();  // ['a', 'b']\n</pre> <p>This only works on primitive data types, e.g. Strings, Numbers, etc.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_uniqBy\">uniqBy</h2>\n<span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L1099\">packages/ember-runtime/lib/mixins/enumerable.js:1099</a> </div> <div class=\"description\"> <p>Returns a new enumerable that contains only items containing a unique property value. The default implementation returns an array regardless of the receiver type.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = [{ value: 'a' }, { value: 'a' }, { value: 'b' }, { value: 'b' }];\narr.uniqBy('value');  // [{ value: 'a' }, { value: 'b' }]\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_without\">without</h2>\n<span class=\"args\"> (value) </span><span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L807\">packages/ember-runtime/lib/mixins/enumerable.js:807</a> </div> <div class=\"description\"> <p>Returns a new enumerable that excludes the passed value. The default implementation returns an array regardless of the receiver type. If the receiver does not contain the value it returns the original enumerable.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'b', 'a', 'c'];\narr.without('a');  // ['b', 'c']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>value</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span> </dt>\n </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">   <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_firstObject\">firstObject</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L140\">packages/ember-runtime/lib/mixins/enumerable.js:140</a> </div> <div class=\"description\"> <p>Helper method returns the first object from a collection. This is usually used by bindings and other parts of the framework to extract a single object if the enumerable contains only one item.</p> <p>If you override this method, you should implement it so that it will always return the same value each time it is called. If your enumerable contains only one object, this method should always return that object. If your enumerable is empty, this method should return <code>undefined</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'b', 'c'];\narr.get('firstObject');  // 'a'\n\nvar arr = [];\narr.get('firstObject');  // undefined\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the object or undefined</dd> </dl> </div> </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_lastObject\">lastObject</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/enumerable.js#L177\">packages/ember-runtime/lib/mixins/enumerable.js:177</a> </div> <div class=\"description\"> <p>Helper method returns the last object from a collection. If your enumerable contains only one object, this method should always return that object. If your enumerable is empty, this method should return <code>undefined</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var arr = ['a', 'b', 'c'];\narr.get('lastObject');  // 'c'\n\nvar arr = [];\narr.get('lastObject');  // undefined\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the last object or undefined</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Enumerable.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Enumerable.html</a>\n  </p>\n</div>\n","classes/ember.map":"<h1 class=\"api-header\"> Ember.Map Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/map.js#L223\">packages/ember-metal/lib/map.js:223</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>A Map stores values indexed by keys. Unlike JavaScript's default Objects, the keys of a Map can be any JavaScript object.</p> <p>Internally, a Map has two data structures:</p> <ol> <li>\n<code>keys</code>: an OrderedSet of all of the existing keys</li> <li>\n<code>values</code>: a JavaScript Object indexed by the <code>Ember.guidFor(key)</code>\n</li> </ol> <p>When a key/value pair is added for the first time, we add the key to the <code>keys</code> OrderedSet, and create or replace an entry in <code>values</code>. When an entry is deleted, we delete its entry in <code>keys</code> and <code>values</code>.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Map.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Map.html</a>\n  </p>\n</div>\n","classes/ember.computed":"<h1 class=\"api-header\"> Ember.computed Namespace  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/computed.js#L453\">packages/ember-metal/lib/computed.js:453</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>This helper returns a new property descriptor that wraps the passed computed property function. You can use this helper to define properties with mixins or via <code>Ember.defineProperty()</code>.</p> <p>If you pass a function as an argument, it will be used as a getter. A computed property defined in this way might look like this:</p> <pre class=\"highlight js \" data-language=\"js\">let Person = Ember.Object.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: Ember.computed('firstName', 'lastName', function() {\n    return `${this.get('firstName')} ${this.get('lastName')}`;\n  })\n});\n\nlet client = Person.create();\n\nclient.get('fullName'); // 'Betty Jones'\n\nclient.set('lastName', 'Fuller');\nclient.get('fullName'); // 'Betty Fuller'\n</pre> <p>You can pass a hash with two functions, <code>get</code> and <code>set</code>, as an argument to provide both a getter and setter:</p> <pre class=\"highlight js \" data-language=\"js\">let Person = Ember.Object.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: Ember.computed('firstName', 'lastName', {\n    get(key) {\n      return `${this.get('firstName')} ${this.get('lastName')}`;\n    },\n    set(key, value) {\n      let [firstName, lastName] = value.split(/\\s+/);\n      this.setProperties({ firstName, lastName });\n      return value;\n    }\n  });\n})\n\nlet client = Person.create();\nclient.get('firstName'); // 'Betty'\n\nclient.set('fullName', 'Carroll Fuller');\nclient.get('firstName'); // 'Carroll'\n</pre> <p>The <code>set</code> function should accept two parameters, <code>key</code> and <code>value</code>. The value returned from <code>set</code> will be the new value of the property.</p> <p><em>Note: This is the preferred way to define computed properties when writing third-party libraries that depend on or use Ember, since there is no guarantee that the user will have <a href=\"http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/\">prototype Extensions</a> enabled.</em></p> <p>The alternative syntax, with prototype extensions, might look like:</p> <pre class=\"highlight js \" data-language=\"js\">fullName: function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n</pre> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_alias\">alias</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L503\">packages/ember-runtime/lib/computed/computed_macros.js:503</a> </div> <div class=\"description\"> <p>Creates a new property that is an alias for another property on an object. Calls to <code>get</code> or <code>set</code> this property behave as though they were called on the original property.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Person = Ember.Object.extend({\n  name: 'Alex Matchneer',\n  nomen: Ember.computed.alias('name')\n});\n\nvar alex = Person.create();\n\nalex.get('nomen'); // 'Alex Matchneer'\nalex.get('name');  // 'Alex Matchneer'\n\nalex.set('nomen', '@machty');\nalex.get('name');  // '@machty'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which creates an alias to the original value for property.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_and\">and</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L423\">packages/ember-runtime/lib/computed/computed_macros.js:423</a> </div> <div class=\"description\"> <p>A computed property that performs a logical <code>and</code> on the original values for the provided dependent properties.</p> <p>You may pass in more than two properties and even use property brace expansion. The computed property will return the first falsy value or last truthy value just like JavaScript's <code>||</code> operator.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  readyForCamp: Ember.computed.and('hasTent', 'hasBackpack'),\n  readyForHike: Ember.computed.and('hasWalkingStick', 'hasBackpack')\n});\n\nvar tomster = Hamster.create();\n\ntomster.get('readyForCamp'); // false\ntomster.set('hasTent', true);\ntomster.get('readyForCamp'); // false\ntomster.set('hasBackpack', true);\ntomster.get('readyForCamp'); // true\ntomster.set('hasBackpack', 'Yes');\ntomster.get('readyForCamp'); // 'Yes'\ntomster.set('hasWalkingStick', null);\ntomster.get('readyForHike'); // null\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which performs a logical `and` on the values of all the original values for properties.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_bool\">bool</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L183\">packages/ember-runtime/lib/computed/computed_macros.js:183</a> </div> <div class=\"description\"> <p>A computed property that converts the provided dependent property into a boolean value.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  hasBananas: Ember.computed.bool('numBananas')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasBananas'); // false\nhamster.set('numBananas', 0);\nhamster.get('hasBananas'); // false\nhamster.set('numBananas', 1);\nhamster.get('hasBananas'); // true\nhamster.set('numBananas', null);\nhamster.get('hasBananas'); // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which converts to boolean the original value for property</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_collect\">collect</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L542\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:542</a> </div> <div class=\"description\"> <p>A computed property that returns the array of values for the provided dependent properties.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  clothes: Ember.computed.collect('hat', 'shirt')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('clothes'); // [null, null]\nhamster.set('hat', 'Camp Hat');\nhamster.set('shirt', 'Camp Shirt');\nhamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which maps values of all passed in properties to an array.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_deprecatingAlias\">deprecatingAlias</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L619\">packages/ember-runtime/lib/computed/computed_macros.js:619</a> <br>Available since 1.7.0 </div> <div class=\"description\"> <p>Creates a new property that is an alias for another property on an object. Calls to <code>get</code> or <code>set</code> this property behave as though they were called on the original property, but also print a deprecation warning.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which creates an alias with a deprecation to the original value for property.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_empty\">empty</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L53\">packages/ember-runtime/lib/computed/computed_macros.js:53</a> <br>Available since 1.6.0 </div> <div class=\"description\"> <p>A computed property that returns true if the value of the dependent property is null, an empty string, empty array, or empty function.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var ToDoList = Ember.Object.extend({\n  isDone: Ember.computed.empty('todos')\n});\n\nvar todoList = ToDoList.create({\n  todos: ['Unit Test', 'Documentation', 'Release']\n});\n\ntodoList.get('isDone'); // false\ntodoList.get('todos').clear();\ntodoList.get('isDone'); // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which negate the original value for property</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_equal\">equal</h2>\n<span class=\"args\"> (dependentKey, value) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L253\">packages/ember-runtime/lib/computed/computed_macros.js:253</a> </div> <div class=\"description\"> <p>A computed property that returns true if the provided dependent property is equal to the given value.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  napTime: Ember.computed.equal('state', 'sleepy')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('napTime'); // false\nhamster.set('state', 'sleepy');\nhamster.get('napTime'); // true\nhamster.set('state', 'hungry');\nhamster.get('napTime'); // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>value</strong> <span class=\"type\">String|Number|Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which returns true if the original value for property is equal to the given value.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_filter\">filter</h2>\n<span class=\"args\"> (dependentKey, callback) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L248\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:248</a> </div> <div class=\"description\"> <p>Filters the array by the callback.</p> <p>The callback method you provide should have the following signature. <code>item</code> is the current item in the iteration. <code>index</code> is the integer index of the current item in the iteration. <code>array</code> is the dependant array itself.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index, array);\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  remainingChores: Ember.computed.filter('chores', function(chore, index, array) {\n    return !chore.done;\n  })\n});\n\nvar hamster = Hamster.create({\n  chores: [\n    { name: 'cook', done: true },\n    { name: 'clean', done: true },\n    { name: 'write more unit tests', done: false }\n  ]\n});\n\nhamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> the filtered array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_filterBy\">filterBy</h2>\n<span class=\"args\"> (dependentKey, propertyKey, value) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L291\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:291</a> </div> <div class=\"description\"> <p>Filters the array by the property and value</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  remainingChores: Ember.computed.filterBy('chores', 'done', false)\n});\n\nvar hamster = Hamster.create({\n  chores: [\n    { name: 'cook', done: true },\n    { name: 'clean', done: true },\n    { name: 'write more unit tests', done: false }\n  ]\n});\n\nhamster.get('remainingChores'); // [{ name: 'write more unit tests', done: false }]\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>propertyKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>value</strong> <span class=\"type\">*</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> the filtered array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_gt\">gt</h2>\n<span class=\"args\"> (dependentKey, value) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L287\">packages/ember-runtime/lib/computed/computed_macros.js:287</a> </div> <div class=\"description\"> <p>A computed property that returns true if the provided dependent property is greater than the provided value.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gt('numBananas', 10)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 11);\nhamster.get('hasTooManyBananas'); // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>value</strong> <span class=\"type\">Number</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which returns true if the original value for property is greater than given value.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_gte\">gte</h2>\n<span class=\"args\"> (dependentKey, value) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L321\">packages/ember-runtime/lib/computed/computed_macros.js:321</a> </div> <div class=\"description\"> <p>A computed property that returns true if the provided dependent property is greater than or equal to the provided value.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gte('numBananas', 10)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 10);\nhamster.get('hasTooManyBananas'); // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>value</strong> <span class=\"type\">Number</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which returns true if the original value for property is greater or equal then given value.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_intersect\">intersect</h2>\n<span class=\"args\"> (propertyKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L439\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:439</a> </div> <div class=\"description\"> <p>A computed property which returns a new array with all the duplicated elements from two or more dependent arrays.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var obj = Ember.Object.extend({\n  friendsInCommon: Ember.computed.intersect('adaFriends', 'charlesFriends')\n}).create({\n  adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n  charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']\n});\n\nobj.get('friendsInCommon'); // ['William King', 'Mary Somerville']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>propertyKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes a new array with all the duplicated elements from the dependent arrays</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_lt\">lt</h2>\n<span class=\"args\"> (dependentKey, value) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L355\">packages/ember-runtime/lib/computed/computed_macros.js:355</a> </div> <div class=\"description\"> <p>A computed property that returns true if the provided dependent property is less than the provided value.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lt('numBananas', 3)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('needsMoreBananas'); // true\nhamster.set('numBananas', 3);\nhamster.get('needsMoreBananas'); // false\nhamster.set('numBananas', 2);\nhamster.get('needsMoreBananas'); // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>value</strong> <span class=\"type\">Number</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which returns true if the original value for property is less then given value.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_lte\">lte</h2>\n<span class=\"args\"> (dependentKey, value) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L389\">packages/ember-runtime/lib/computed/computed_macros.js:389</a> </div> <div class=\"description\"> <p>A computed property that returns true if the provided dependent property is less than or equal to the provided value.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lte('numBananas', 3)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('needsMoreBananas'); // true\nhamster.set('numBananas', 5);\nhamster.get('needsMoreBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('needsMoreBananas'); // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>value</strong> <span class=\"type\">Number</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which returns true if the original value for property is less or equal than given value.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_map\">map</h2>\n<span class=\"args\"> (dependentKey, callback) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L168\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:168</a> </div> <div class=\"description\"> <p>Returns an array mapped via the callback</p> <p>The callback method you provide should have the following signature. <code>item</code> is the current item in the iteration. <code>index</code> is the integer index of the current item in the iteration.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(item, index);\n</pre> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  excitingChores: Ember.computed.map('chores', function(chore, index) {\n    return chore.toUpperCase() + '!';\n  })\n});\n\nvar hamster = Hamster.create({\n  chores: ['clean', 'write more unit tests']\n});\n\nhamster.get('excitingChores'); // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> an array mapped via the callback</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_mapBy\">mapBy</h2>\n<span class=\"args\"> (dependentKey, propertyKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L208\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:208</a> </div> <div class=\"description\"> <p>Returns an array mapped to the specified key.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age')\n});\n\nvar lordByron = Person.create({ children: [] });\n\nlordByron.get('childAges'); // []\nlordByron.get('children').pushObject({ name: 'Augusta Ada Byron', age: 7 });\nlordByron.get('childAges'); // [7]\nlordByron.get('children').pushObjects([{\n  name: 'Allegra Byron',\n  age: 5\n}, {\n  name: 'Elizabeth Medora Leigh',\n  age: 8\n}]);\nlordByron.get('childAges'); // [7, 5, 8]\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>propertyKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> an array mapped to the specified key</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_match\">match</h2>\n<span class=\"args\"> (dependentKey, regexp) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L216\">packages/ember-runtime/lib/computed/computed_macros.js:216</a> </div> <div class=\"description\"> <p>A computed property which matches the original value for the dependent property against a given RegExp, returning <code>true</code> if the value matches the RegExp and <code>false</code> if it does not.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var User = Ember.Object.extend({\n  hasValidEmail: Ember.computed.match('email', /^.+@.+\\..+$/)\n});\n\nvar user = User.create({loggedIn: false});\n\nuser.get('hasValidEmail'); // false\nuser.set('email', '');\nuser.get('hasValidEmail'); // false\nuser.set('email', 'ember_hamster@example.com');\nuser.get('hasValidEmail'); // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>regexp</strong> <span class=\"type\">RegExp</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which match the original value for property against a given RegExp</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_max\">max</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L78\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:78</a> </div> <div class=\"description\"> <p>A computed property that calculates the maximum value in the dependent array. This will return <code>-Infinity</code> when the dependent array is empty.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age'),\n  maxChildAge: Ember.computed.max('childAges')\n});\n\nvar lordByron = Person.create({ children: [] });\n\nlordByron.get('maxChildAge'); // -Infinity\nlordByron.get('children').pushObject({\n  name: 'Augusta Ada Byron', age: 7\n});\nlordByron.get('maxChildAge'); // 7\nlordByron.get('children').pushObjects([{\n  name: 'Allegra Byron',\n  age: 5\n}, {\n  name: 'Elizabeth Medora Leigh',\n  age: 8\n}]);\nlordByron.get('maxChildAge'); // 8\n</pre> <p>If the types of the arguments are not numbers, they will be converted to numbers and the type of the return value will always be <code>Number</code>. For example, the max of a list of Date objects will be the highest timestamp as a <code>Number</code>. This behavior is consistent with <code>Math.max</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes the largest value in the dependentKey's array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_min\">min</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L123\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:123</a> </div> <div class=\"description\"> <p>A computed property that calculates the minimum value in the dependent array. This will return <code>Infinity</code> when the dependent array is empty.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age'),\n  minChildAge: Ember.computed.min('childAges')\n});\n\nvar lordByron = Person.create({ children: [] });\n\nlordByron.get('minChildAge'); // Infinity\nlordByron.get('children').pushObject({\n  name: 'Augusta Ada Byron', age: 7\n});\nlordByron.get('minChildAge'); // 7\nlordByron.get('children').pushObjects([{\n  name: 'Allegra Byron',\n  age: 5\n}, {\n  name: 'Elizabeth Medora Leigh',\n  age: 8\n}]);\nlordByron.get('minChildAge'); // 5\n</pre> <p>If the types of the arguments are not numbers, they will be converted to numbers and the type of the return value will always be <code>Number</code>. For example, the min of a list of Date objects will be the lowest timestamp as a <code>Number</code>. This behavior is consistent with <code>Math.min</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes the smallest value in the dependentKey's array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_none\">none</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L118\">packages/ember-runtime/lib/computed/computed_macros.js:118</a> </div> <div class=\"description\"> <p>A computed property that returns true if the value of the dependent property is null or undefined. This avoids errors from JSLint complaining about use of ==, which can be technically confusing.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  isHungry: Ember.computed.none('food')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('isHungry'); // true\nhamster.set('food', 'Banana');\nhamster.get('isHungry'); // false\nhamster.set('food', null);\nhamster.get('isHungry'); // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which returns true if original value for property is null or undefined.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_not\">not</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L152\">packages/ember-runtime/lib/computed/computed_macros.js:152</a> </div> <div class=\"description\"> <p>A computed property that returns the inverse boolean value of the original value for the dependent property.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var User = Ember.Object.extend({\n  isAnonymous: Ember.computed.not('loggedIn')\n});\n\nvar user = User.create({loggedIn: false});\n\nuser.get('isAnonymous'); // true\nuser.set('loggedIn', true);\nuser.get('isAnonymous'); // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which returns inverse of the original value for property</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_notEmpty\">notEmpty</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L87\">packages/ember-runtime/lib/computed/computed_macros.js:87</a> </div> <div class=\"description\"> <p>A computed property that returns true if the value of the dependent property is NOT null, an empty string, empty array, or empty function.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  hasStuff: Ember.computed.notEmpty('backpack')\n});\n\nvar hamster = Hamster.create({ backpack: ['Food', 'Sleeping Bag', 'Tent'] });\n\nhamster.get('hasStuff');         // true\nhamster.get('backpack').clear(); // []\nhamster.get('hasStuff');         // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which returns true if original value for property is not empty.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_oneWay\">oneWay</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L531\">packages/ember-runtime/lib/computed/computed_macros.js:531</a> </div> <div class=\"description\"> <p>Where <code>computed.alias</code> aliases <code>get</code> and <code>set</code>, and allows for bidirectional data flow, <code>computed.oneWay</code> only provides an aliased <code>get</code>. The <code>set</code> will not mutate the upstream property, rather causes the current property to become the value set. This causes the downstream property to permanently diverge from the upstream property.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var User = Ember.Object.extend({\n  firstName: null,\n  lastName: null,\n  nickName: Ember.computed.oneWay('firstName')\n});\n\nvar teddy = User.create({\n  firstName: 'Teddy',\n  lastName:  'Zeenny'\n});\n\nteddy.get('nickName');              // 'Teddy'\nteddy.set('nickName', 'TeddyBear'); // 'TeddyBear'\nteddy.get('firstName');             // 'Teddy'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which creates a one way computed property to the original value for property.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_or\">or</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L464\">packages/ember-runtime/lib/computed/computed_macros.js:464</a> </div> <div class=\"description\"> <p>A computed property which performs a logical <code>or</code> on the original values for the provided dependent properties.</p> <p>You may pass in more than two properties and even use property brace expansion. The computed property will return the first truthy value or last falsy value just like JavaScript's <code>||</code> operator.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  readyForRain: Ember.computed.or('hasJacket', 'hasUmbrella'),\n  readyForBeach: Ember.computed.or('{hasSunscreen,hasUmbrella}')\n});\n\nvar tomster = Hamster.create();\n\ntomster.get('readyForRain'); // undefined\ntomster.set('hasUmbrella', true);\ntomster.get('readyForRain'); // true\ntomster.set('hasJacket', 'Yes');\ntomster.get('readyForRain'); // 'Yes'\ntomster.set('hasSunscreen', 'Check');\ntomster.get('readyForBeach'); // 'Check'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which performs a logical `or` on the values of all the original values for properties.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_readOnly\">readOnly</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L580\">packages/ember-runtime/lib/computed/computed_macros.js:580</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>Where <code>computed.oneWay</code> provides oneWay bindings, <code>computed.readOnly</code> provides a readOnly one way binding. Very often when using <code>computed.oneWay</code> one does not also want changes to propagate back up, as they will replace the value.</p> <p>This prevents the reverse flow, and also throws an exception when it occurs.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var User = Ember.Object.extend({\n  firstName: null,\n  lastName: null,\n  nickName: Ember.computed.readOnly('firstName')\n});\n\nvar teddy = User.create({\n  firstName: 'Teddy',\n  lastName:  'Zeenny'\n});\n\nteddy.get('nickName');              // 'Teddy'\nteddy.set('nickName', 'TeddyBear'); // throws Exception\n// throw new Ember.Error('Cannot Set: nickName on: &lt;User:ember27288&gt;' );`\nteddy.get('firstName');             // 'Teddy'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which creates a one way computed property to the original value for property.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reads\">reads</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/computed_macros.js#L568\">packages/ember-runtime/lib/computed/computed_macros.js:568</a> </div> <div class=\"description\"> <p>This is a more semantically meaningful alias of <code>computed.oneWay</code>, whose name is somewhat ambiguous as to which direction the data flows.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computed property which creates a one way computed property to the original value for property.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_setDiff\">setDiff</h2>\n<span class=\"args\"> (setAProperty, setBProperty) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L494\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:494</a> </div> <div class=\"description\"> <p>A computed property which returns a new array with all the properties from the first dependent array that are not in the second dependent array.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  likes: ['banana', 'grape', 'kale'],\n  wants: Ember.computed.setDiff('likes', 'fruits')\n});\n\nvar hamster = Hamster.create({\n  fruits: [\n    'grape',\n    'kale',\n  ]\n});\n\nhamster.get('wants'); // ['banana']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>setAProperty</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>setBProperty</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes a new array with all the items from the first dependent array that are not in the second dependent array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_sort\">sort</h2>\n<span class=\"args\"> (itemsKey, sortDefinition) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L585\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:585</a> </div> <div class=\"description\"> <p>A computed property which returns a new array with all the properties from the first dependent array sorted based on a property or sort function.</p> <p>The callback method you provide should have the following signature:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(itemA, itemB);\n</pre> <ul> <li>\n<code>itemA</code> the first item to compare.</li> <li>\n<code>itemB</code> the second item to compare.</li> </ul> <p>This function should return negative number (e.g. <code>-1</code>) when <code>itemA</code> should come before <code>itemB</code>. It should return positive number (e.g. <code>1</code>) when <code>itemA</code> should come after <code>itemB</code>. If the <code>itemA</code> and <code>itemB</code> are equal this function should return <code>0</code>.</p> <p>Therefore, if this function is comparing some numeric values, simple <code>itemA - itemB</code> or <code>itemA.get( 'foo' ) - itemB.get( 'foo' )</code> can be used instead of series of <code>if</code>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var ToDoList = Ember.Object.extend({\n  // using standard ascending sort\n  todosSorting: ['name'],\n  sortedTodos: Ember.computed.sort('todos', 'todosSorting'),\n\n  // using descending sort\n  todosSortingDesc: ['name:desc'],\n  sortedTodosDesc: Ember.computed.sort('todos', 'todosSortingDesc'),\n\n  // using a custom sort function\n  priorityTodos: Ember.computed.sort('todos', function(a, b){\n    if (a.priority &gt; b.priority) {\n      return 1;\n    } else if (a.priority &lt; b.priority) {\n      return -1;\n    }\n\n    return 0;\n  })\n});\n\nvar todoList = ToDoList.create({todos: [\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]});\n\ntodoList.get('sortedTodos');      // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\ntodoList.get('sortedTodosDesc');  // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\ntodoList.get('priorityTodos');    // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>itemsKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>sortDefinition</strong> <span class=\"type\">String or Function</span>\n</dt> <dd> a dependent key to an array of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes a new sorted array based on the sort property array or callback function</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_sum\">sum</h2>\n<span class=\"args\"> (dependentKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L63\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:63</a> <br>Available since 1.4.0 </div> <div class=\"description\"> <p>A computed property that returns the sum of the values in the dependent array.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes the sum of all values in the dependentKey's array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_union\">union</h2>\n<span class=\"args\"> (propertyKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L427\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:427</a> </div> <div class=\"description\"> <p>Alias for <a href=\"../index#method_computed_uniq\">Ember.computed.uniq</a>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>propertyKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes a new array with all the unique elements from the dependent array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_uniq\">uniq</h2>\n<span class=\"args\"> (propertyKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L334\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:334</a> </div> <div class=\"description\"> <p>A computed property which returns a new array with all the unique elements from one or more dependent arrays.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Hamster = Ember.Object.extend({\n  uniqueFruits: Ember.computed.uniq('fruits')\n});\n\nvar hamster = Hamster.create({\n  fruits: [\n    'banana',\n    'grape',\n    'kale',\n    'banana'\n  ]\n});\n\nhamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>propertyKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes a new array with all the unique elements from the dependent array</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_uniqBy\">uniqBy</h2>\n<span class=\"args\"> (dependentKey, propertyKey) </span><span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js#L383\">packages/ember-runtime/lib/computed/reduce_computed_macros.js:383</a> </div> <div class=\"description\"> <p>A computed property which returns a new array with all the unique elements from an array, with uniqueness determined by specific key. Example <code>javascript\nvar Hamster = Ember.Object.extend({\n  uniqueFruits: Ember.computed.uniqBy('fruits', 'id')\n});\nvar hamster = Hamster.create({\n  fruits: [\n    { id: 1, 'banana' },\n    { id: 2, 'grape' },\n    { id: 3, 'peach' },\n    { id: 1, 'banana' }\n  ]\n});\nhamster.get('uniqueFruits'); // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]\n</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>dependentKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>propertyKey</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.computedproperty\">Ember.ComputedProperty</a></span> </dt>\n<dd> computes a new array with all the unique elements from the dependent array</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.computed.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.computed.html</a>\n  </p>\n</div>\n","classes/ember.checkbox":"<h1 class=\"api-header\"> Ember.Checkbox Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.component\">Ember.Component</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/checkbox.js#L10\">packages/ember-htmlbars/lib/components/checkbox.js:10</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"description\"> <p>The internal class used to create text inputs when the <code>{{input}}</code> helper is used with <code>type</code> of <code>checkbox</code>.</p> <p>See <a href=\"ember.templates.helpers#method_input\">Ember.Templates.helpers.input</a> for usage details.</p> <h2 class=\"anchorable-toc\" id=\"toc_direct-manipulation-of-code-checked-code\">Direct manipulation of <code>checked</code>\n</h2> <p>The <code>checked</code> attribute of an <code>Ember.Checkbox</code> object should always be set through the Ember object or by interacting with its rendered element representation via the mouse, keyboard, or touch. Updating the value of the checkbox via jQuery will result in the checked value of the object and its element losing synchronization.</p> <h2 class=\"anchorable-toc\" id=\"toc_layout-and-layoutname-properties\">Layout and LayoutName properties</h2> <p>Because HTML <code>input</code> elements are self closing <code>layout</code> and <code>layoutName</code> properties will not be applied. See <a href=\"ember.view\">Ember.View</a>'s layout section for more information.</p> </div> \n\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Checkbox.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Checkbox.html</a>\n  </p>\n</div>\n","classes/ember.eventdispatcher":"<h1 class=\"api-header\"> Ember.EventDispatcher Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/system/event_dispatcher.js#L22\">packages/ember-views/lib/system/event_dispatcher.js:22</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"description\"> <p><code>Ember.EventDispatcher</code> handles delegating browser events to their corresponding <code>Ember.Views.</code> For example, when you click on a view, <code>Ember.EventDispatcher</code> ensures that that view's <code>mouseDown</code> method gets called.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.EventDispatcher.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.EventDispatcher.html</a>\n  </p>\n</div>\n","classes/ember.mapwithdefault":"<h1 class=\"api-header\"> Ember.MapWithDefault Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.map\">Ember.Map</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/map.js#L417\">packages/ember-metal/lib/map.js:417</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.MapWithDefault.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.MapWithDefault.html</a>\n  </p>\n</div>\n","classes/ember.mixin":"<h1 class=\"api-header\"> Ember.Mixin Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/mixin.js#L397\">packages/ember-metal/lib/mixin.js:397</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>The <code>Ember.Mixin</code> class allows you to create mixins, whose properties can be added to other classes. For instance,</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Editable = Ember.Mixin.create({\n  edit: function() {\n    console.log('starting to edit');\n    this.set('isEditing', true);\n  },\n  isEditing: false\n});\n\n// Mix mixins into classes by passing them as the first arguments to\n// .extend.\nApp.CommentView = Ember.View.extend(App.Editable, {\n  template: Ember.Handlebars.compile('{{#if view.isEditing}}...{{else}}...{{/if}}')\n});\n\ncommentView = App.CommentView.create();\ncommentView.edit(); // outputs 'starting to edit'\n</pre> <p>Note that Mixins are created with <code>Ember.Mixin.create</code>, not <code>Ember.Mixin.extend</code>.</p> <p>Note that mixins extend a constructor's prototype so arrays and object literals defined as properties will be shared amongst objects that implement the mixin. If you want to define a property in a mixin that is not shared, you can define it either as a computed property or have it be created on initialization of the object.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">//filters array will be shared amongst any object implementing mixin\nApp.Filterable = Ember.Mixin.create({\n  filters: Ember.A()\n});\n\n//filters will be a separate  array for every object implementing the mixin\nApp.Filterable = Ember.Mixin.create({\n  filters: Ember.computed(function() {return Ember.A();})\n});\n\n//filters will be created as a separate array during the object's initialization\nApp.Filterable = Ember.Mixin.create({\n  init: function() {\n    this._super(...arguments);\n    this.set(\"filters\", Ember.A());\n  }\n});\n</pre> </div> <div class=\"pane\" id=\"methods\">   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_create\">create</h2>\n<span class=\"args\"> (arguments) </span><span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/mixin.js#L499\">packages/ember-metal/lib/mixin.js:499</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>arguments</strong> \n</dt>  </dl> </div> </div>   </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Mixin.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Mixin.html</a>\n  </p>\n</div>\n","classes/ember":"<h1 class=\"api-header\"> Ember Namespace  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/core.js#L8\">packages/ember-metal/lib/core.js:8</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>This namespace contains all Ember methods and functions. Future versions of Ember may overwrite this namespace and therefore, you should avoid adding any new properties.</p> <p>At the heart of Ember is Ember-Runtime, a set of core functions that provide cross-platform compatibility and object property observing. Ember-Runtime is small and performance-focused so you can use it alongside other cross-platform libraries such as jQuery. For more details, see <a href=\"../modules/ember-runtime\">Ember-Runtime</a>.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method__\">$</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/index.js#L29\">packages/ember-views/lib/index.js:29</a> </div> <div class=\"description\"> <p>Alias for jQuery</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_A\">A</h2>\n<span class=\"type\"><a href=\"ember.nativearray\">Ember.NativeArray</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/native_array.js#L105\">packages/ember-runtime/lib/system/native_array.js:105</a> </div> <div class=\"description\"> <p>Creates an <code>Ember.NativeArray</code> from an Array like object. Does not modify the original object. Ember.A is not needed if <code>EmberENV.EXTEND_PROTOTYPES</code> is <code>true</code> (the default value). However, it is recommended that you use Ember.A when creating addons for ember or when you can not guarantee that <code>EmberENV.EXTEND_PROTOTYPES</code> will be <code>true</code>.</p> <p>Example</p> <pre class=\"highlight js \" data-language=\"js\">export default Ember.Component.extend({\n  tagName: 'ul',\n  classNames: ['pagination'],\n\n  init() {\n    this._super(...arguments);\n\n    if (!this.get('content')) {\n      this.set('content', Ember.A());\n    }\n  }\n});\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.nativearray\">Ember.NativeArray</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_K\">K</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/index.js#L403\">packages/ember-metal/lib/index.js:403</a> </div> <div class=\"description\"> <p>An empty function useful for some operations. Always returns <code>this</code>.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_addListener\">addListener</h2>\n<span class=\"args\"> (obj, eventName, target, method, once) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/events.js#L70\">packages/ember-metal/lib/events.js:70</a> </div> <div class=\"description\"> <p>Add an event listener</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> \n</dt>  <dt>\n<strong>eventName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>target</strong> <span class=\"type\">Object|Function</span>\n</dt> <dd> A target object or a function </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> A function or the name of a function to be called on `target` </dd> <dt>\n<strong>once</strong> <span class=\"type\">Boolean</span>\n</dt> <dd> A flag whether a function should only be called once </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_addObserver\">addObserver</h2>\n<span class=\"args\"> (obj, _path, target, method) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/observer.js#L27\">packages/ember-metal/lib/observer.js:27</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> \n</dt>  <dt>\n<strong>_path</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>target</strong> <span class=\"type\">Object|Function</span>\n</dt>  <dt>\n<strong>method</strong> <span class=\"type\">[Function|String]</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_aliasMethod\">aliasMethod</h2>\n<span class=\"args\"> (methodName) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/mixin.js#L670\">packages/ember-metal/lib/mixin.js:670</a> </div> <div class=\"description\"> <p>Makes a method available via an additional name.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Person = Ember.Object.extend({\n  name: function() {\n    return 'Tomhuda Katzdale';\n  },\n  moniker: Ember.aliasMethod('name')\n});\n\nvar goodGuy = App.Person.create();\n\ngoodGuy.name();    // 'Tomhuda Katzdale'\ngoodGuy.moniker(); // 'Tomhuda Katzdale'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>methodName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> name of the method to alias </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_assert\">assert</h2>\n<span class=\"args\"> (desc, test) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-debug/lib/index.js#L33\">packages/ember-debug/lib/index.js:33</a> </div> <div class=\"description\"> <p>Define an assertion that will throw an exception if the condition is not met.</p> <ul> <li>In a production build, this method is defined as an empty function (NOP). Uses of this method in Ember itself are stripped from the ember.prod.js build.</li> </ul> <pre class=\"highlight javascript \" data-language=\"javascript\">// Test for truthiness\nEmber.assert('Must pass a valid object', obj);\n\n// Fail unconditionally\nEmber.assert('This code path should never be run');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>desc</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> A description of the assertion. This will become the text of the Error thrown if the assertion fails. </dd> <dt>\n<strong>test</strong> <span class=\"type\">Boolean</span>\n</dt> <dd> Must be truthy for the assertion to pass. If falsy, an exception will be thrown. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_assign\">assign</h2>\n<span class=\"args\"> (original, args) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/assign.js#L1\">packages/ember-metal/lib/assign.js:1</a> </div> <div class=\"description\"> <p>Copy properties from a source object to a target object.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var a = {first: 'Yehuda'};\nvar b = {last: 'Katz'};\nvar c = {company: 'Tilde Inc.'};\nEmber.assign(a, b, c); // a === {first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.'}, b === {last: 'Katz'}, c === {company: 'Tilde Inc.'}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>original</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to assign into </dd> <dt>\n<strong>args</strong> <span class=\"type\">Object</span>\n</dt> <dd> The objects to copy properties from </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_bind\">bind</h2>\n<span class=\"args\"> (obj, to, from) </span><span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/binding.js#L480\">packages/ember-metal/lib/binding.js:480</a> </div> <div class=\"description\"> <p>Global helper method to create a new binding. Just pass the root object along with a <code>to</code> and <code>from</code> path to create and connect the binding.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The root object of the transform. </dd> <dt>\n<strong>to</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The path to the 'to' side of the binding. Must be relative to obj. </dd> <dt>\n<strong>from</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The path to the 'from' side of the binding. Must be relative to obj or a global path. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.binding\">Ember.Binding</a></span> </dt>\n<dd> binding instance</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_cacheFor\">cacheFor</h2>\n<span class=\"args\"> (obj, key) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/computed.js#L555\">packages/ember-metal/lib/computed.js:555</a> </div> <div class=\"description\"> <p>Returns the cached value for a property, if one exists. This can be useful for peeking at the value of a computed property that is generated lazily, without accidentally causing it to be created.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> the object whose property you want to check </dd> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the property whose cached value you want to return </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the cached value</dd> </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_compare\">compare</h2>\n<span class=\"args\"> (v, w) </span><span class=\"type\">Number</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/compare.js#L40\">packages/ember-runtime/lib/compare.js:40</a> </div> <div class=\"description\"> <p>Compares two javascript values and returns:</p> <ul> <li>-1 if the first is smaller than the second,</li> <li>0 if both are equal,</li> <li>1 if the first is greater than the second.</li> </ul> <pre class=\"highlight javascript \" data-language=\"javascript\"> Ember.compare('hello', 'hello');  // 0\n Ember.compare('abc', 'dfg');      // -1\n Ember.compare(2, 1);              // 1\n</pre> <p>If the types of the two objects are different precedence occurs in the following order, with types earlier in the list considered <code>&lt;</code> types later in the list:</p> <ul> <li>undefined</li> <li>null</li> <li>boolean</li> <li>number</li> <li>string</li> <li>array</li> <li>object</li> <li>instance</li> <li>function</li> <li>class</li> <li>date</li> </ul> <pre class=\"highlight javascript \" data-language=\"javascript\"> Ember.compare('hello', 50);       // 1\n Ember.compare(50, 'hello');       // -1\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>v</strong> <span class=\"type\">Object</span>\n</dt> <dd> First value to compare </dd> <dt>\n<strong>w</strong> <span class=\"type\">Object</span>\n</dt> <dd> Second value to compare </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Number</span> </dt>\n<dd> -1 if v &lt; w, 0 if v = w and 1 if v &gt; w.</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_copy\">copy</h2>\n<span class=\"args\"> (obj, deep) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/copy.js#L66\">packages/ember-runtime/lib/copy.js:66</a> </div> <div class=\"description\"> <p>Creates a shallow copy of the passed object. A deep copy of the object is returned if the optional <code>deep</code> argument is <code>true</code>.</p> <p>If the passed object implements the <code>Ember.Copyable</code> interface, then this function will delegate to the object's <code>copy()</code> method and return the result. See <code>Ember.Copyable</code> for further details.</p> <p>For primitive values (which are immutable in JavaScript), the passed object is simply returned.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to clone </dd> <dt>\n<strong>deep</strong> <span class=\"type\">[Boolean]</span>\n</dt> <dd> If true, a deep copy of the object is made. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The copied object</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_debug\">debug</h2>\n<span class=\"args\"> (message) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-debug/lib/index.js#L60\">packages/ember-debug/lib/index.js:60</a> </div> <div class=\"description\"> <p>Display a debug notice.</p> <ul> <li>In a production build, this method is defined as an empty function (NOP). Uses of this method in Ember itself are stripped from the ember.prod.js build.</li> </ul> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.debug('I\\'m a debug notice!');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>message</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> A debug message to display. </dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_deprecate\">deprecate</h2>\n<span class=\"args\"> (message, test, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-debug/lib/deprecate.js#L97\">packages/ember-debug/lib/deprecate.js:97</a> </div> <div class=\"description\"> <p>Display a deprecation warning with the provided message and a stack trace (Chrome and Firefox only).</p> <ul> <li>In a production build, this method is defined as an empty function (NOP). Uses of this method in Ember itself are stripped from the ember.prod.js build.</li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>message</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> A description of the deprecation. </dd> <dt>\n<strong>test</strong> <span class=\"type\">Boolean</span>\n</dt> <dd> A boolean. If falsy, the deprecation will be displayed. </dd> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt> <dd> An object that can be used to pass in a `url` to the transition guide on the emberjs.com website, and a unique `id` for this deprecation. The `id` can be used by Ember debugging tools to change the behavior (raise, log or silence) for that specific deprecation. The `id` should be namespaced by dots, e.g. \"view.helper.select\". </dd> </dl> </div> </div>        <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_get\">get</h2>\n<span class=\"args\"> (obj, keyName) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/property_get.js#L21\">packages/ember-metal/lib/property_get.js:21</a> </div> <div class=\"description\"> <p>Gets the value of a property on an object. If the property is computed, the function will be invoked. If the property is not defined but the object implements the <code>unknownProperty</code> method then that will be invoked.</p> <p>If you plan to run on IE8 and older browsers then you should use this method anytime you want to retrieve a property on an object that you don't know for sure is private. (Properties beginning with an underscore '_' are considered private.)</p> <p>On all newer browsers, you only need to use this method to retrieve properties if the property might not be defined on the object and you want to respect the <code>unknownProperty</code> handler. Otherwise you can ignore this method.</p> <p>Note that if the object itself is <code>undefined</code>, this method will throw an error.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to retrieve from. </dd> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The property key to retrieve </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the property value or `null`.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_getEngineParent\">getEngineParent</h2>\n<span class=\"args\"> (engine) </span><span class=\"type\">EngineInstance</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-application/lib/system/engine-parent.js#L10\">packages/ember-application/lib/system/engine-parent.js:10</a> </div> <div class=\"description\"> <p><code>getEngineParent</code> retrieves an engine instance's parent instance.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>engine</strong> <span class=\"type\">EngineInstance</span>\n</dt> <dd> An engine instance. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">EngineInstance</span> </dt>\n<dd> The parent engine instance.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_getProperties\">getProperties</h2>\n<span class=\"args\"> (obj, list) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/get_properties.js#L3\">packages/ember-metal/lib/get_properties.js:3</a> </div> <div class=\"description\"> <p>To get multiple properties at once, call <code>Ember.getProperties</code> with an object followed by a list of strings or an array:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.getProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n</pre> <p>is equivalent to:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.getProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>list</strong> <span class=\"type\">String...|Array</span>\n</dt> <dd> of keys to get </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_getWithDefault\">getWithDefault</h2>\n<span class=\"args\"> (obj, keyName, defaultValue) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/property_get.js#L106\">packages/ember-metal/lib/property_get.js:106</a> </div> <div class=\"description\"> <p>Retrieves the value of a property from an Object, or a default value in the case that the property returns <code>undefined</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.getWithDefault(person, 'lastName', 'Doe');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to retrieve from. </dd> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the property to retrieve </dd> <dt>\n<strong>defaultValue</strong> <span class=\"type\">Object</span>\n</dt> <dd> The value to return if the property value is undefined </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The property value or the defaultValue.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_guidFor\">guidFor</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/utils.js#L167\">packages/ember-metal/lib/utils.js:167</a> </div> <div class=\"description\"> <p>Returns a unique id for the object. If the object does not yet have a guid, one will be assigned to it. You can call this on any object, <code>Ember.Object</code>-based or not, but be aware that it will add a <code>_guid</code> property.</p> <p>You can also use this method on DOM Element objects.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> any object, string, number, Element, or primitive </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> the unique guid for this instance.</dd> </dl> </div> </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isArray\">isArray</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/utils.js#L20\">packages/ember-runtime/lib/utils.js:20</a> </div> <div class=\"description\"> <p>Returns true if the passed object is an array or Array-like.</p> <p>Objects are considered Array-like if any of the following are true:</p> <ul> <li>the object is a native Array</li> <li>the object has an objectAt property</li> <li>the object is an Object, and has a length property</li> </ul> <p>Unlike <code>Ember.typeOf</code> this method returns true even if the passed object is not formally an array but appears to be array-like (i.e. implements <code>Ember.Array</code>)</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.isArray();                                          // false\nEmber.isArray([]);                                        // true\nEmber.isArray(Ember.ArrayProxy.create({ content: [] }));  // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to test </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> true if the passed object is an array or Array-like</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isBlank\">isBlank</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/is_blank.js#L3\">packages/ember-metal/lib/is_blank.js:3</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>A value is blank if it is empty or a whitespace string.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.isBlank();                // true\nEmber.isBlank(null);            // true\nEmber.isBlank(undefined);       // true\nEmber.isBlank('');              // true\nEmber.isBlank([]);              // true\nEmber.isBlank('\\n\\t');          // true\nEmber.isBlank('  ');            // true\nEmber.isBlank({});              // false\nEmber.isBlank('\\n\\t Hello');    // false\nEmber.isBlank('Hello world');   // false\nEmber.isBlank([1,2,3]);         // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> Value to test </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isEmpty\">isEmpty</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/is_empty.js#L4\">packages/ember-metal/lib/is_empty.js:4</a> </div> <div class=\"description\"> <p>Verifies that a value is <code>null</code> or an empty string, empty array, or empty function.</p> <p>Constrains the rules on <code>Ember.isNone</code> by returning true for empty string and empty arrays.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.isEmpty();                // true\nEmber.isEmpty(null);            // true\nEmber.isEmpty(undefined);       // true\nEmber.isEmpty('');              // true\nEmber.isEmpty([]);              // true\nEmber.isEmpty({});              // false\nEmber.isEmpty('Adam Hawkins');  // false\nEmber.isEmpty([0,1,2]);         // false\nEmber.isEmpty('\\n\\t');          // false\nEmber.isEmpty('  ');            // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> Value to test </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isEqual\">isEqual</h2>\n<span class=\"args\"> (a, b) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/is-equal.js#L1\">packages/ember-runtime/lib/is-equal.js:1</a> </div> <div class=\"description\"> <p>Compares two objects, returning true if they are equal.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.isEqual('hello', 'hello');                   // true\nEmber.isEqual(1, 2);                               // false\n</pre> <p><code>isEqual</code> is a more specific comparison than a triple equal comparison. It will call the <code>isEqual</code> instance method on the objects being compared, allowing finer control over when objects should be considered equal to each other.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let Person = Ember.Object.extend({\n  isEqual(other) { return this.ssn == other.ssn; }\n});\n\nlet personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});\nlet personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});\n\nEmber.isEqual(personA, personB); // true\n</pre> <p>Due to the expense of array comparisons, collections will never be equal to each other even if each of their items are equal to each other.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.isEqual([4, 2], [4, 2]);                     // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>a</strong> <span class=\"type\">Object</span>\n</dt> <dd> first object to compare </dd> <dt>\n<strong>b</strong> <span class=\"type\">Object</span>\n</dt> <dd> second object to compare </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isNone\">isNone</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/is_none.js#L1\">packages/ember-metal/lib/is_none.js:1</a> </div> <div class=\"description\"> <p>Returns true if the passed value is null or undefined. This avoids errors from JSLint complaining about use of ==, which can be technically confusing.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.isNone();              // true\nEmber.isNone(null);          // true\nEmber.isNone(undefined);     // true\nEmber.isNone('');            // false\nEmber.isNone([]);            // false\nEmber.isNone(function() {}); // false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> Value to test </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isPresent\">isPresent</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/is_present.js#L3\">packages/ember-metal/lib/is_present.js:3</a> <br>Available since 1.8.0 </div> <div class=\"description\"> <p>A value is present if it not <code>isBlank</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.isPresent();                // false\nEmber.isPresent(null);            // false\nEmber.isPresent(undefined);       // false\nEmber.isPresent('');              // false\nEmber.isPresent('  ');            // false\nEmber.isPresent('\\n\\t');          // false\nEmber.isPresent([]);              // false\nEmber.isPresent({ length: 0 })    // false\nEmber.isPresent(false);           // true\nEmber.isPresent(true);            // true\nEmber.isPresent('string');        // true\nEmber.isPresent(0);               // true\nEmber.isPresent(function() {})    // true\nEmber.isPresent({});              // true\nEmber.isPresent(false);           // true\nEmber.isPresent('\\n\\t Hello');    // true\nEmber.isPresent([1,2,3]);         // true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> Value to test </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_merge\">merge</h2>\n<span class=\"args\"> (original, updates) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/merge.js#L1\">packages/ember-metal/lib/merge.js:1</a> </div> <div class=\"description\"> <p>Merge the contents of two objects together into the first object.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.merge({first: 'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}\nvar a = {first: 'Yehuda'};\nvar b = {last: 'Katz'};\nEmber.merge(a, b); // a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>original</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to merge into </dd> <dt>\n<strong>updates</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to copy properties from </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_observer\">observer</h2>\n<span class=\"args\"> (propertyNames, func) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/mixin.js#L700\">packages/ember-metal/lib/mixin.js:700</a> </div> <div class=\"description\"> <p>Specify a method that observes property changes.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Object.extend({\n  valueObserver: Ember.observer('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n</pre> <p>Also available as <code>Function.prototype.observes</code> if prototype extensions are enabled.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>propertyNames</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>func</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> func</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_on\">on</h2>\n<span class=\"args\"> (eventNames, func) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/events.js#L280\">packages/ember-metal/lib/events.js:280</a> </div> <div class=\"description\"> <p>Define a property as a function that should be executed when a specified event or events are triggered.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Job = Ember.Object.extend({\n  logCompleted: Ember.on('completed', function() {\n    console.log('Job completed!');\n  })\n});\n\nvar job = Job.create();\n\nEmber.sendEvent(job, 'completed'); // Logs 'Job completed!'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>eventNames</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>func</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> func</dd> </dl> </div> </div>     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeListener\">removeListener</h2>\n<span class=\"args\"> (obj, eventName, target, method) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/events.js#L112\">packages/ember-metal/lib/events.js:112</a> </div> <div class=\"description\"> <p>Remove an event listener</p> <p>Arguments should match those passed to <code>Ember.addListener</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> \n</dt>  <dt>\n<strong>eventName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>target</strong> <span class=\"type\">Object|Function</span>\n</dt> <dd> A target object or a function </dd> <dt>\n<strong>method</strong> <span class=\"type\">Function|String</span>\n</dt> <dd> A function or the name of a function to be called on `target` </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeObserver\">removeObserver</h2>\n<span class=\"args\"> (obj, path, target, method) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/observer.js#L47\">packages/ember-metal/lib/observer.js:47</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> \n</dt>  <dt>\n<strong>path</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>target</strong> <span class=\"type\">Object|Function</span>\n</dt>  <dt>\n<strong>method</strong> <span class=\"type\">[Function|String]</span>\n</dt>  </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_runInDebug\">runInDebug</h2>\n<span class=\"args\"> (func) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-debug/lib/index.js#L127\">packages/ember-debug/lib/index.js:127</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>Run a function meant for debugging.</p> <ul> <li>In a production build, this method is defined as an empty function (NOP). Uses of this method in Ember itself are stripped from the ember.prod.js build.</li> </ul> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.runInDebug(() =&gt; {\n  Ember.Component.reopen({\n    didInsertElement() {\n      console.log(\"I'm happy\");\n    }\n  });\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>func</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The function to be executed. </dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_sendEvent\">sendEvent</h2>\n<span class=\"args\"> (obj, eventName, params, actions) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/events.js#L195\">packages/ember-metal/lib/events.js:195</a> </div> <div class=\"description\"> <p>Send an event. The execution of suspended listeners is skipped, and once listeners are removed. A listener without a target is executed on the passed object. If an array of actions is not passed, the actions stored on the passed object are invoked.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> \n</dt>  <dt>\n<strong>eventName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>params</strong> <span class=\"type\">Array</span>\n</dt> <dd> Optional parameters for each listener. </dd> <dt>\n<strong>actions</strong> <span class=\"type\">Array</span>\n</dt> <dd> Optional array of actions (listeners). </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> true</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_set\">set</h2>\n<span class=\"args\"> (obj, keyName, value) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/property_set.js#L22\">packages/ember-metal/lib/property_set.js:22</a> </div> <div class=\"description\"> <p>Sets the value of a property on an object, respecting computed properties and notifying observers and other listeners of the change. If the property is not defined but the object implements the <code>setUnknownProperty</code> method then that will be invoked as well.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to modify. </dd> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The property key to set </dd> <dt>\n<strong>value</strong> <span class=\"type\">Object</span>\n</dt> <dd> The value to set </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the passed value.</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_setProperties\">setProperties</h2>\n<span class=\"args\"> (obj, properties) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/set_properties.js#L4\">packages/ember-metal/lib/set_properties.js:4</a> </div> <div class=\"description\"> <p>Set a list of properties on an object. These properties are set inside a single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so observers will be buffered.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var anObject = Ember.Object.create();\n\nanObject.setProperties({\n  firstName: 'Stanley',\n  lastName: 'Stuart',\n  age: 21\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> \n</dt>  <dt>\n<strong>properties</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> properties</dd> </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_tryInvoke\">tryInvoke</h2>\n<span class=\"args\"> (obj, methodName, args) </span><span class=\"type\">*</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/utils.js#L338\">packages/ember-metal/lib/utils.js:338</a> </div> <div class=\"description\"> <p>Checks to see if the <code>methodName</code> exists on the <code>obj</code>, and if it does, invokes it with the arguments passed.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var d = new Date('03/15/2013');\n\nEmber.tryInvoke(d, 'getTime');              // 1363320000000\nEmber.tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\nEmber.tryInvoke(d, 'noSuchMethod', [2014]); // undefined\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to check for the method </dd> <dt>\n<strong>methodName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The method name to check for </dd> <dt>\n<strong>args</strong> <span class=\"type\">[Array]</span>\n</dt> <dd> The arguments to pass to the method </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">*</span> </dt>\n<dd> the return value of the invoked method or undefined if it cannot be invoked</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_trySet\">trySet</h2>\n<span class=\"args\"> (root, path, value) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/property_set.js#L132\">packages/ember-metal/lib/property_set.js:132</a> </div> <div class=\"description\"> <p>Error-tolerant form of <code>Ember.set</code>. Will not blow up if any part of the chain is <code>undefined</code>, <code>null</code>, or destroyed.</p> <p>This is primarily used when syncing bindings, which may try to update after an object has been destroyed.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>root</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to modify. </dd> <dt>\n<strong>path</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The property path to set </dd> <dt>\n<strong>value</strong> <span class=\"type\">Object</span>\n</dt> <dd> The value to set </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_typeOf\">typeOf</h2>\n<span class=\"args\"> (item) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/utils.js#L55\">packages/ember-runtime/lib/utils.js:55</a> </div> <div class=\"description\"> <p>Returns a consistent type for the passed object.</p> <p>Use this instead of the built-in <code>typeof</code> to get the type of an item. It will return the same result across all browsers and includes a bit more detail. Here is what will be returned:</p> <pre class=\"highlight text \" data-language=\"\">| Return Value  | Meaning                                              |\n|---------------|------------------------------------------------------|\n| 'string'      | String primitive or String object.                   |\n| 'number'      | Number primitive or Number object.                   |\n| 'boolean'     | Boolean primitive or Boolean object.                 |\n| 'null'        | Null value                                           |\n| 'undefined'   | Undefined value                                      |\n| 'function'    | A function                                           |\n| 'array'       | An instance of Array                                 |\n| 'regexp'      | An instance of RegExp                                |\n| 'date'        | An instance of Date                                  |\n| 'class'       | An Ember class (created using Ember.Object.extend()) |\n| 'instance'    | An Ember object instance                             |\n| 'error'       | An instance of the Error object                      |\n| 'object'      | A JavaScript object not inheriting from Ember.Object |\n</pre> <p>Examples:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.typeOf();                       // 'undefined'\nEmber.typeOf(null);                   // 'null'\nEmber.typeOf(undefined);              // 'undefined'\nEmber.typeOf('michael');              // 'string'\nEmber.typeOf(new String('michael'));  // 'string'\nEmber.typeOf(101);                    // 'number'\nEmber.typeOf(new Number(101));        // 'number'\nEmber.typeOf(true);                   // 'boolean'\nEmber.typeOf(new Boolean(true));      // 'boolean'\nEmber.typeOf(Ember.makeArray);        // 'function'\nEmber.typeOf([1, 2, 90]);             // 'array'\nEmber.typeOf(/abc/);                  // 'regexp'\nEmber.typeOf(new Date());             // 'date'\nEmber.typeOf(Ember.Object.extend());  // 'class'\nEmber.typeOf(Ember.Object.create());  // 'instance'\nEmber.typeOf(new Error('teamocil'));  // 'error'\n\n// 'normal' JavaScript object\nEmber.typeOf({ a: 'b' });             // 'object'\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>item</strong> <span class=\"type\">Object</span>\n</dt> <dd> the item to check </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> the type</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_warn\">warn</h2>\n<span class=\"args\"> (message, test, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-debug/lib/warn.js#L26\">packages/ember-debug/lib/warn.js:26</a> </div> <div class=\"description\"> <p>Display a warning with the provided message.</p> <ul> <li>In a production build, this method is defined as an empty function (NOP). Uses of this method in Ember itself are stripped from the ember.prod.js build.</li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>message</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> A warning to display. </dd> <dt>\n<strong>test</strong> <span class=\"type\">Boolean</span>\n</dt> <dd> An optional boolean. If falsy, the warning will be displayed. </dd> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt> <dd> An object that can be used to pass a unique `id` for this warning. The `id` can be used by Ember debugging tools to change the behavior (raise, log, or silence) for that specific warning. The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\" </dd> </dl> </div> </div>    </div>\n<div class=\"pane\" id=\"events\">  <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_onerror\">onerror</h2>\n<span class=\"args\"> (error) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/index.js#L376\">packages/ember-metal/lib/index.js:376</a> </div> <div class=\"description\"> <p>A function may be assigned to <code>Ember.onerror</code> to be called when Ember internals encounter an error. This is useful for specialized error handling and reporting code.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.onerror = function(error) {\n  Em.$.ajax('/report-error', 'POST', {\n    stack: error.stack,\n    otherInformation: 'whatever app state you want to provide'\n  });\n};\n</pre> <p>Internally, <code>Ember.onerror</code> is used as Backburner's error handler.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>error</strong> <span class=\"type\">Exception</span>\n</dt> <dd> the error object </dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">      <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_VERSION\">VERSION</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/index.js#L304\">packages/ember-metal/lib/index.js:304</a> </div> <div class=\"description\"> <p>The semantic version</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.html</a>\n  </p>\n</div>\n","classes/ember.component":"<h1 class=\"api-header\"> Ember.Component Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.view\">Ember.View</a></p> <p>Uses: <a href=\"ember.viewtargetactionsupport\">Ember.ViewTargetActionSupport</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L38\">packages/ember-htmlbars/lib/component.js:38</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"description\"> <p>An <code>Ember.Component</code> is a view that is completely isolated. Properties accessed in its templates go to the view object and actions are targeted at the view object. There is no access to the surrounding context or outer controller; all contextual information must be passed in.</p> <p>The easiest way to create an <code>Ember.Component</code> is via a template. If you name a template <code>components/my-foo</code>, you will be able to use <code>{{my-foo}}</code> in other templates, which will make an instance of the isolated component.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{app-profile person=currentUser}}\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">&lt;!-- app-profile template --&gt;\n&lt;h1&gt;{{person.title}}&lt;/h1&gt;\n&lt;img src={{person.avatar}}&gt;\n&lt;p class='signature'&gt;{{person.signature}}&lt;/p&gt;\n</pre> <p>You can use <code>yield</code> inside a template to include the <strong>contents</strong> of any block attached to the component. The block will be executed in the context of the surrounding context or outer controller:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#app-profile person=currentUser}}\n  &lt;p&gt;Admin mode&lt;/p&gt;\n  {{! Executed in the controller's context. }}\n{{/app-profile}}\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">&lt;!-- app-profile template --&gt;\n&lt;h1&gt;{{person.title}}&lt;/h1&gt;\n{{! Executed in the component's context. }}\n{{yield}} {{! block contents }}\n</pre> <p>If you want to customize the component, in order to handle events or actions, you implement a subclass of <code>Ember.Component</code> named after the name of the component. Note that <code>Component</code> needs to be appended to the name of your subclass like <code>AppProfileComponent</code>.</p> <p>For example, you could implement the action <code>hello</code> for the <code>app-profile</code> component:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.AppProfileComponent = Ember.Component.extend({\n  actions: {\n    hello: function(name) {\n      console.log(\"Hello\", name);\n    }\n  }\n});\n</pre> <p>And then use it in the component's template:</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;!-- app-profile template --&gt;\n\n&lt;h1&gt;{{person.title}}&lt;/h1&gt;\n{{yield}} &lt;!-- block contents --&gt;\n\n&lt;button {{action 'hello' person.name}}&gt;\n  Say Hello to {{person.name}}\n&lt;/button&gt;\n</pre> <p>Components must have a <code>-</code> in their name to avoid conflicts with built-in controls that wrap HTML elements. This is consistent with the same requirement in web components.</p> </div> <div class=\"pane\" id=\"methods\">                       <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_didReceiveAttrs\">didReceiveAttrs</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L487\">packages/ember-htmlbars/lib/component.js:487</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called when the attributes passed into the component have been updated. Called both during the initial render of a container and during a rerender. Can be used in place of an observer; code placed here will be executed every time any attribute updates.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_didRender\">didRender</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L509\">packages/ember-htmlbars/lib/component.js:509</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called after a component has been rendered, both on initial render and in subsequent rerenders.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_didUpdateAttrs\">didUpdateAttrs</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L545\">packages/ember-htmlbars/lib/component.js:545</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called when the attributes passed into the component have been changed. Called only during a rerender, not during an initial render.</p> </div>  </div>                                      <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_sendAction\">sendAction</h2>\n<span class=\"args\"> (action, params) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L207\">packages/ember-htmlbars/lib/component.js:207</a> </div> <div class=\"description\"> <p>Calls an action passed to a component.</p> <p>For example a component for playing or pausing music may translate click events into action notifications of \"play\" or \"stop\" depending on some internal state of the component:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// app/components/play-button.js\nexport default Ember.Component.extend({\n  click() {\n    if (this.get('isPlaying')) {\n      this.sendAction('play');\n    } else {\n      this.sendAction('stop');\n    }\n  }\n});\n</pre> <p>The actions \"play\" and \"stop\" must be passed to this <code>play-button</code> component:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! app/templates/application.hbs }}\n{{play-button play=(action \"musicStarted\") stop=(action \"musicStopped\")}}\n</pre> <p>When the component receives a browser <code>click</code> event it translate this interaction into application-specific semantics (\"play\" or \"stop\") and calls the specified action.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// app/controller/application.js\nexport default Ember.Controller.extend({\n  actions: {\n    musicStarted() {\n      // called when the play button is clicked\n      // and the music started playing\n    },\n    musicStopped() {\n      // called when the play button is clicked\n      // and the music stopped playing\n    }\n  }\n});\n</pre> <p>If no action is passed to <code>sendAction</code> a default name of \"action\" is assumed.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// app/components/next-button.js\nexport default Ember.Component.extend({\n  click() {\n    this.sendAction();\n  }\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{! app/templates/application.hbs }}\n{{next-button action=(action \"playNextSongInAlbum\")}}\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">// app/controllers/application.js\nApp.ApplicationController = Ember.Controller.extend({\n  actions: {\n    playNextSongInAlbum() {\n      ...\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>action</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd> the action to call </dd> <dt>\n<strong>params</strong> <span class=\"type\">[*]</span>\n</dt> <dd> arguments for the action </dd> </dl> </div> </div>        <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_willRender\">willRender</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L527\">packages/ember-htmlbars/lib/component.js:527</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called before a component has been rendered, both on initial render and in subsequent rerenders.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_willUpdate\">willUpdate</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L563\">packages/ember-htmlbars/lib/component.js:563</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called when the component is about to update and rerender itself. Called only during a rerender, not during an initial render.</p> </div>  </div> </div>\n<div class=\"pane\" id=\"events\">   <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_didReceiveAttrs\">didReceiveAttrs</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L498\">packages/ember-htmlbars/lib/component.js:498</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called when the attributes passed into the component have been updated. Called both during the initial render of a container and during a rerender. Can be used in place of an observer; code placed here will be executed every time any attribute updates.</p> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_didRender\">didRender</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L518\">packages/ember-htmlbars/lib/component.js:518</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called after a component has been rendered, both on initial render and in subsequent rerenders.</p> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_didUpdate\">didUpdate</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ember.component#method_didUpdate\">Ember.Component</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L590\">packages/ember-htmlbars/lib/component.js:590</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called when the component has updated and rerendered itself. Called only during a rerender, not during an initial render.</p> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_didUpdateAttrs\">didUpdateAttrs</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L554\">packages/ember-htmlbars/lib/component.js:554</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called when the attributes passed into the component have been changed. Called only during a rerender, not during an initial render.</p> </div>  </div>     <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_willRender\">willRender</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L536\">packages/ember-htmlbars/lib/component.js:536</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called before a component has been rendered, both on initial render and in subsequent rerenders.</p> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_willUpdate\">willUpdate</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L572\">packages/ember-htmlbars/lib/component.js:572</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called when the component is about to update and rerender itself. Called only during a rerender, not during an initial render.</p> </div>  </div> </div>\n<div class=\"pane\" id=\"properties\">              <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_hasBlock\">hasBlock</h2>\n<span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L333\">packages/ember-htmlbars/lib/component.js:333</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Returns true when the component was invoked with a block template.</p> <p>Example (<code>hasBlock</code> will be <code>false</code>):</p> <pre class=\"highlight hbs \" data-language=\"\">{{! templates/application.hbs }}\n\n{{foo-bar}}\n\n{{! templates/components/foo-bar.hbs }}\n{{#if hasBlock}}\n  This will not be printed, because no block was provided\n{{/if}}\n</pre> <p>Example (<code>hasBlock</code> will be <code>true</code>):</p> <pre class=\"highlight hbs \" data-language=\"\">{{! templates/application.hbs }}\n\n{{#foo-bar}}\n  Hi!\n{{/foo-bar}}\n\n{{! templates/components/foo-bar.hbs }}\n{{#if hasBlock}}\n  This will be printed because a block was provided\n  {{yield}}\n{{/if}}\n</pre> <p>This helper accepts an argument with the name of the block we want to check the presence of. This is useful for checking for the presence of the optional inverse block in components.</p> <pre class=\"highlight hbs \" data-language=\"\">{{! templates/application.hbs }}\n\n{{#foo-bar}}\n  Hi!\n{{else}}\n  What's up?\n{{/foo-bar}}\n\n{{! templates/components/foo-bar.hbs }}\n{{yield}}\n{{#if (hasBlock \"inverse\")}}\n  {{yield to=\"inverse\"}}\n{{else}}\n  How are you?\n{{/if}}\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> Boolean</dd> </dl> </div> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_hasBlockParams\">hasBlockParams</h2>\n<span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L393\">packages/ember-htmlbars/lib/component.js:393</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Returns true when the component was invoked with a block parameter supplied.</p> <p>Example (<code>hasBlockParams</code> will be <code>false</code>):</p> <pre class=\"highlight hbs \" data-language=\"\">{{! templates/application.hbs }}\n\n{{#foo-bar}}\n  No block parameter.\n{{/foo-bar}}\n\n{{! templates/components/foo-bar.hbs }}\n{{#if hasBlockParams}}\n  This will not be printed, because no block was provided\n  {{yield this}}\n{{/if}}\n</pre> <p>Example (<code>hasBlockParams</code> will be <code>true</code>):</p> <pre class=\"highlight hbs \" data-language=\"\">{{! templates/application.hbs }}\n\n{{#foo-bar as |foo|}}\n  Hi!\n{{/foo-bar}}\n\n{{! templates/components/foo-bar.hbs }}\n{{#if hasBlockParams}}\n  This will be printed because a block was provided\n  {{yield this}}\n{{/if}}\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> Boolean</dd> </dl> </div> </div>          <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_positionalParams\">positionalParams</h2>\n<span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/component.js#L434\">packages/ember-htmlbars/lib/component.js:434</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Enables components to take a list of parameters as arguments.</p> <p>For example, a component that takes two parameters with the names <code>name</code> and <code>age</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let MyComponent = Ember.Component.extend;\nMyComponent.reopenClass({\n  positionalParams: ['name', 'age']\n});\n</pre> <p>It can then be invoked like this:</p> <pre class=\"highlight hbs \" data-language=\"\">{{my-component \"John\" 38}}\n</pre> <p>The parameters can be referred to just like named parameters:</p> <pre class=\"highlight hbs \" data-language=\"\">Name: {{attrs.name}}, Age: {{attrs.age}}.\n</pre> <p>Using a string instead of an array allows for an arbitrary number of parameters:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">let MyComponent = Ember.Component.extend;\nMyComponent.reopenClass({\n  positionalParams: 'names'\n});\n</pre> <p>It can then be invoked like this:</p> <pre class=\"highlight hbs \" data-language=\"\">{{my-component \"John\" \"Michael\" \"Scott\"}}\n</pre> <p>The parameters can then be referred to by enumerating over the list:</p> <pre class=\"highlight hbs \" data-language=\"\">{{#each attrs.names as |name|}}{{name}}{{/each}}\n</pre> </div>  </div>       </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Component.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Component.html</a>\n  </p>\n</div>\n","classes/ember.hashlocation":"<h1 class=\"api-header\"> Ember.HashLocation Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/location/hash_location.js#L15\">packages/ember-routing/lib/location/hash_location.js:15</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"description\"> <p><code>Ember.HashLocation</code> implements the location API using the browser's hash. At present, it relies on a <code>hashchange</code> event existing in the browser.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.HashLocation.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.HashLocation.html</a>\n  </p>\n</div>\n","classes/ember.objectproxy":"<h1 class=\"api-header\"> Ember.ObjectProxy Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: Ember._ProxyMixin</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/object_proxy.js#L4\">packages/ember-runtime/lib/system/object_proxy.js:4</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p><code>Ember.ObjectProxy</code> forwards all properties not defined by the proxy itself to a proxied <code>content</code> object.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">object = Ember.Object.create({\n  name: 'Foo'\n});\n\nproxy = Ember.ObjectProxy.create({\n  content: object\n});\n\n// Access and change existing properties\nproxy.get('name')          // 'Foo'\nproxy.set('name', 'Bar');\nobject.get('name')         // 'Bar'\n\n// Create new 'description' property on `object`\nproxy.set('description', 'Foo is a whizboo baz');\nobject.get('description')  // 'Foo is a whizboo baz'\n</pre> <p>While <code>content</code> is unset, setting a property to be delegated will throw an Error.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">proxy = Ember.ObjectProxy.create({\n  content: null,\n  flag: null\n});\nproxy.set('flag', true);\nproxy.get('flag');         // true\nproxy.get('foo');          // undefined\nproxy.set('foo', 'data');  // throws Error\n</pre> <p>Delegated properties can be bound to and will change when content is updated.</p> <p>Computed properties on the proxy itself can depend on delegated properties.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">ProxyWithComputedProperty = Ember.ObjectProxy.extend({\n  fullName: function() {\n    var firstName = this.get('firstName'),\n        lastName = this.get('lastName');\n    if (firstName &amp;&amp; lastName) {\n      return firstName + ' ' + lastName;\n    }\n    return firstName || lastName;\n  }.property('firstName', 'lastName')\n});\n\nproxy = ProxyWithComputedProperty.create();\n\nproxy.get('fullName');  // undefined\nproxy.set('content', {\n  firstName: 'Tom', lastName: 'Dale'\n}); // triggers property change for fullName on proxy\n\nproxy.get('fullName');  // 'Tom Dale'\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ObjectProxy.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ObjectProxy.html</a>\n  </p>\n</div>\n","classes/ember.orderedset":"<h1 class=\"api-header\"> Ember.OrderedSet Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/map.js#L56\">packages/ember-metal/lib/map.js:56</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"description\"> <p>This class is used internally by Ember and Ember Data. Please do not use it at this time. We plan to clean it up and add many tests soon.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.OrderedSet.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.OrderedSet.html</a>\n  </p>\n</div>\n","classes/ember.arrayproxy":"<h1 class=\"api-header\"> Ember.ArrayProxy Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Uses: <a href=\"ember.mutablearray\">Ember.MutableArray</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/array_proxy.js#L36\">packages/ember-runtime/lib/system/array_proxy.js:36</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>An ArrayProxy wraps any other object that implements <code>Ember.Array</code> and/or <code>Ember.MutableArray,</code> forwarding all requests. This makes it very useful for a number of binding use cases or other cases where being able to swap out the underlying array is useful.</p> <p>A simple example of usage:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });\n\nap.get('firstObject');                        // 'dog'\nap.set('content', ['amoeba', 'paramecium']);\nap.get('firstObject');                        // 'amoeba'\n</pre> <p>This class can also be useful as a layer to transform the contents of an array, as they are accessed. This can be done by overriding <code>objectAtContent</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({\n    content: Ember.A(pets),\n    objectAtContent: function(idx) {\n        return this.get('content').objectAt(idx).toUpperCase();\n    }\n});\n\nap.get('firstObject'); // . 'DOG'\n</pre> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ArrayProxy.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ArrayProxy.html</a>\n  </p>\n</div>\n","classes/ember.historylocation":"<h1 class=\"api-header\"> Ember.HistoryLocation Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/location/history_location.js#L16\">packages/ember-routing/lib/location/history_location.js:16</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"description\"> <p>Ember.HistoryLocation implements the location API using the browser's history.pushState API.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.HistoryLocation.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.HistoryLocation.html</a>\n  </p>\n</div>\n","classes/ember.observable":"<h1 class=\"api-header\"> Ember.Observable Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L30\">packages/ember-runtime/lib/mixins/observable.js:30</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <h2 class=\"anchorable-toc\" id=\"toc_overview\">Overview</h2> <p>This mixin provides properties and property observing functionality, core features of the Ember object model.</p> <p>Properties and observers allow one object to observe changes to a property on another object. This is one of the fundamental ways that models, controllers and views communicate with each other in an Ember application.</p> <p>Any object that has this mixin applied can be used in observer operations. That includes <code>Ember.Object</code> and most objects you will interact with as you write your Ember application.</p> <p>Note that you will not generally apply this mixin to classes yourself, but you will use the features provided by this module frequently, so it is important to understand how to use it.</p> <h2 class=\"anchorable-toc\" id=\"toc_using-code-get-code-and-code-set-code\">Using <code>get()</code> and <code>set()</code>\n</h2> <p>Because of Ember's support for bindings and observers, you will always access properties using the get method, and set properties using the set method. This allows the observing objects to be notified and computed properties to be handled properly.</p> <p>More documentation about <code>get</code> and <code>set</code> are below.</p> <h2 class=\"anchorable-toc\" id=\"toc_observing-property-changes\">Observing Property Changes</h2> <p>You typically observe property changes simply by using the <code>Ember.observer</code> function in classes that you write.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Object.extend({\n  valueObserver: Ember.observer('value', function(sender, key, value, rev) {\n    // Executes whenever the \"value\" property changes\n    // See the addObserver method for more information about the callback arguments\n  })\n});\n</pre> <p>Although this is the most common way to add an observer, this capability is actually built into the <code>Ember.Object</code> class on top of two methods defined in this mixin: <code>addObserver</code> and <code>removeObserver</code>. You can use these two methods to add and remove observers yourself if you need to do so at runtime.</p> <p>To add an observer for a property, call:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">object.addObserver('propertyKey', targetObject, targetAction)\n</pre> <p>This will call the <code>targetAction</code> method on the <code>targetObject</code> whenever the value of the <code>propertyKey</code> changes.</p> <p>Note that if <code>propertyKey</code> is a computed property, the observer will be called when any of the property dependencies are changed, even if the resulting value of the computed property is unchanged. This is necessary because computed properties are not computed until <code>get</code> is called.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_addObserver\">addObserver</h2>\n<span class=\"args\"> (key, target, method) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L333\">packages/ember-runtime/lib/mixins/observable.js:333</a> </div> <div class=\"description\"> <p>Adds an observer on a property.</p> <p>This is the core method used to register an observer for a property.</p> <p>Once you call this method, any time the key's value is set, your observer will be notified. Note that the observers are triggered any time the value is set, regardless of whether it has actually changed. Your observer should be prepared to handle that.</p> <p>You can also pass an optional context parameter to this method. The context will be passed to your observer method whenever it is triggered. Note that if you add the same target/method pair on a key multiple times with different context parameters, your observer will only be called once with the last context you passed.</p> <h3 class=\"anchorable-toc\" id=\"toc_observer-methods\">Observer Methods</h3> <p>Observer methods you pass should generally have the following signature if you do not pass a <code>context</code> parameter:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">fooDidChange: function(sender, key, value, rev) { };\n</pre> <p>The sender is the object that changed. The key is the property that changes. The value property is currently reserved and unused. The rev is the last property revision of the object when it changed, which you can use to detect if the key value has really changed or not.</p> <p>If you pass a <code>context</code> parameter, the context will be passed before the revision like so:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">fooDidChange: function(sender, key, value, context, rev) { };\n</pre> <p>Usually you will not need the value, context or revision parameters at the end. In this case, it is common to write observer methods that take only a sender and key value as parameters or, if you aren't interested in any of these values, to write an observer that has no parameters at all.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The key to observer </dd> <dt>\n<strong>target</strong> <span class=\"type\">Object</span>\n</dt> <dd> The target object to invoke </dd> <dt>\n<strong>method</strong> <span class=\"type\">String|Function</span>\n</dt> <dd> The method to invoke. </dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_cacheFor\">cacheFor</h2>\n<span class=\"args\"> (keyName) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L490\">packages/ember-runtime/lib/mixins/observable.js:490</a> </div> <div class=\"description\"> <p>Returns the cached value of a computed property, if it exists. This allows you to inspect the value of a computed property without accidentally invoking it if it is intended to be generated lazily.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The cached value of the computed property, if any</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_decrementProperty\">decrementProperty</h2>\n<span class=\"args\"> (keyName, decrement) </span><span class=\"type\">Number</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L453\">packages/ember-runtime/lib/mixins/observable.js:453</a> </div> <div class=\"description\"> <p>Set the value of a property to the current value minus some amount.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">player.decrementProperty('lives');\norc.decrementProperty('health', 5);\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the property to decrement </dd> <dt>\n<strong>decrement</strong> <span class=\"type\">Number</span>\n</dt> <dd> The amount to decrement by. Defaults to 1 </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Number</span> </dt>\n<dd> The new property value</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_get\">get</h2>\n<span class=\"args\"> (keyName) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L100\">packages/ember-runtime/lib/mixins/observable.js:100</a> </div> <div class=\"description\"> <p>Retrieves the value of a property from the object.</p> <p>This method is usually similar to using <code>object[keyName]</code> or <code>object.keyName</code>, however it supports both computed properties and the unknownProperty handler.</p> <p>Because <code>get</code> unifies the syntax for accessing all these kinds of properties, it can make many refactorings easier, such as replacing a simple property with a computed property, or vice versa.</p> <h3 class=\"anchorable-toc\" id=\"toc_computed-properties\">Computed Properties</h3> <p>Computed properties are methods defined with the <code>property</code> modifier declared at the end, such as:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">fullName: function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n</pre> <p>When you call <code>get</code> on a computed property, the function will be called and the return value will be returned instead of the function itself.</p> <h3 class=\"anchorable-toc\" id=\"toc_unknown-properties\">Unknown Properties</h3> <p>Likewise, if you try to call <code>get</code> on a property whose value is <code>undefined</code>, the <code>unknownProperty()</code> method will be called on the object. If this method returns any value other than <code>undefined</code>, it will be returned instead. This allows you to implement \"virtual\" properties that are not defined upfront.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The property to retrieve </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The property value or undefined.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_getProperties\">getProperties</h2>\n<span class=\"args\"> (list) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L143\">packages/ember-runtime/lib/mixins/observable.js:143</a> </div> <div class=\"description\"> <p>To get the values of multiple properties at once, call <code>getProperties</code> with a list of strings or an array:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n</pre> <p>is equivalent to:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>list</strong> <span class=\"type\">String...|Array</span>\n</dt> <dd> of keys to get </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_getWithDefault\">getWithDefault</h2>\n<span class=\"args\"> (keyName, defaultValue) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L415\">packages/ember-runtime/lib/mixins/observable.js:415</a> </div> <div class=\"description\"> <p>Retrieves the value of a property, or a default value in the case that the property returns <code>undefined</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">person.getWithDefault('lastName', 'Doe');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the property to retrieve </dd> <dt>\n<strong>defaultValue</strong> <span class=\"type\">Object</span>\n</dt> <dd> The value to return if the property value is undefined </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The property value or the defaultValue.</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_incrementProperty\">incrementProperty</h2>\n<span class=\"args\"> (keyName, increment) </span><span class=\"type\">Number</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L433\">packages/ember-runtime/lib/mixins/observable.js:433</a> </div> <div class=\"description\"> <p>Set the value of a property to the current value plus some amount.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">person.incrementProperty('age');\nteam.incrementProperty('score', 2);\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the property to increment </dd> <dt>\n<strong>increment</strong> <span class=\"type\">Number</span>\n</dt> <dd> The amount to increment by. Defaults to 1 </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Number</span> </dt>\n<dd> The new property value</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_notifyPropertyChange\">notifyPropertyChange</h2>\n<span class=\"args\"> (keyName) </span><span class=\"type\"><a href=\"ember.observable\">Ember.Observable</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L318\">packages/ember-runtime/lib/mixins/observable.js:318</a> </div> <div class=\"description\"> <p>Convenience method to call <code>propertyWillChange</code> and <code>propertyDidChange</code> in succession.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The property key to be notified about. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.observable\">Ember.Observable</a></span> </dt>\n </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeObserver\">removeObserver</h2>\n<span class=\"args\"> (key, target, method) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L385\">packages/ember-runtime/lib/mixins/observable.js:385</a> </div> <div class=\"description\"> <p>Remove an observer you have previously registered on this object. Pass the same key, target, and method you passed to <code>addObserver()</code> and your target will no longer receive notifications.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The key to observer </dd> <dt>\n<strong>target</strong> <span class=\"type\">Object</span>\n</dt> <dd> The target object to invoke </dd> <dt>\n<strong>method</strong> <span class=\"type\">String|Function</span>\n</dt> <dd> The method to invoke. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_set\">set</h2>\n<span class=\"args\"> (keyName, value) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L168\">packages/ember-runtime/lib/mixins/observable.js:168</a> </div> <div class=\"description\"> <p>Sets the provided key or path to the value.</p> <p>This method is generally very similar to calling <code>object[key] = value</code> or <code>object.key = value</code>, except that it provides support for computed properties, the <code>setUnknownProperty()</code> method and property observers.</p> <h3 class=\"anchorable-toc\" id=\"toc_computed-properties\">Computed Properties</h3> <p>If you try to set a value on a key that has a computed property handler defined (see the <code>get()</code> method for an example), then <code>set()</code> will call that method, passing both the value and key instead of simply changing the value itself. This is useful for those times when you need to implement a property that is composed of one or more member properties.</p> <h3 class=\"anchorable-toc\" id=\"toc_unknown-properties\">Unknown Properties</h3> <p>If you try to set a value on a key that is undefined in the target object, then the <code>setUnknownProperty()</code> handler will be called instead. This gives you an opportunity to implement complex \"virtual\" properties that are not predefined on the object. If <code>setUnknownProperty()</code> returns undefined, then <code>set()</code> will simply set the value on the object.</p> <h3 class=\"anchorable-toc\" id=\"toc_property-observers\">Property Observers</h3> <p>In addition to changing the property, <code>set()</code> will also register a property change with the object. Unless you have placed this call inside of a <code>beginPropertyChanges()</code> and <code>endPropertyChanges(),</code> any \"local\" observers (i.e. observer methods declared on the same object), will be called immediately. Any \"remote\" observers (i.e. observer methods declared on another object) will be placed in a queue and called at a later time in a coalesced manner.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The property to set </dd> <dt>\n<strong>value</strong> <span class=\"type\">Object</span>\n</dt> <dd> The value to set or `null`. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The passed value</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_setProperties\">setProperties</h2>\n<span class=\"args\"> (hash) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L213\">packages/ember-runtime/lib/mixins/observable.js:213</a> </div> <div class=\"description\"> <p>Sets a list of properties at once. These properties are set inside a single <code>beginPropertyChanges</code> and <code>endPropertyChanges</code> batch, so observers will be buffered.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>hash</strong> <span class=\"type\">Object</span>\n</dt> <dd> the hash of keys and values to set </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The passed in hash</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_toggleProperty\">toggleProperty</h2>\n<span class=\"args\"> (keyName) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/observable.js#L473\">packages/ember-runtime/lib/mixins/observable.js:473</a> </div> <div class=\"description\"> <p>Set the value of a boolean property to the opposite of its current value.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">starship.toggleProperty('warpDriveEngaged');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the property to toggle </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> The new property value</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Observable.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Observable.html</a>\n  </p>\n</div>\n","classes/ember.promiseproxymixin":"<h1 class=\"api-header\"> Ember.PromiseProxyMixin Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L34\">packages/ember-runtime/lib/mixins/promise_proxy.js:34</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>A low level mixin making ObjectProxy promise-aware.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var ObjectPromiseProxy = Ember.ObjectProxy.extend(Ember.PromiseProxyMixin);\n\nvar proxy = ObjectPromiseProxy.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\nproxy.then(function(json){\n   // the json\n}, function(reason) {\n   // the reason why you have no json\n});\n</pre> <p>the proxy has bindable attributes which track the promises life cycle</p> <pre class=\"highlight javascript \" data-language=\"javascript\">proxy.get('isPending')   //=&gt; true\nproxy.get('isSettled')  //=&gt; false\nproxy.get('isRejected')  //=&gt; false\nproxy.get('isFulfilled') //=&gt; false\n</pre> <p>When the $.getJSON completes, and the promise is fulfilled with json, the life cycle attributes will update accordingly.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">proxy.get('isPending')   //=&gt; false\nproxy.get('isSettled')   //=&gt; true\nproxy.get('isRejected')  //=&gt; false\nproxy.get('isFulfilled') //=&gt; true\n</pre> <p>As the proxy is an ObjectProxy, and the json now its content, all the json properties will be available directly from the proxy.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// Assuming the following json:\n{\n  firstName: 'Stefan',\n  lastName: 'Penner'\n}\n\n// both properties will accessible on the proxy\nproxy.get('firstName') //=&gt; 'Stefan'\nproxy.get('lastName')  //=&gt; 'Penner'\n</pre> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_catch\">catch</h2>\n<span class=\"args\"> (callback) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L174\">packages/ember-runtime/lib/mixins/promise_proxy.js:174</a> <br>Available since 1.3.0 </div> <div class=\"description\"> <p>An alias to the proxied promise's <code>catch</code>.</p> <p>See RSVP.Promise.catch.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_finally\">finally</h2>\n<span class=\"args\"> (callback) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L187\">packages/ember-runtime/lib/mixins/promise_proxy.js:187</a> <br>Available since 1.3.0 </div> <div class=\"description\"> <p>An alias to the proxied promise's <code>finally</code>.</p> <p>See RSVP.Promise.finally.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_then\">then</h2>\n<span class=\"args\"> (callback) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L162\">packages/ember-runtime/lib/mixins/promise_proxy.js:162</a> </div> <div class=\"description\"> <p>An alias to the proxied promise's <code>then</code>.</p> <p>See RSVP.Promise.then.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isFulfilled\">isFulfilled</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L127\">packages/ember-runtime/lib/mixins/promise_proxy.js:127</a> </div> <div class=\"description\"> <p>Will become <code>true</code> if the proxied promise is fulfilled.</p> </div> <p> <strong>Default:</strong> <code>false</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isPending\">isPending</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L100\">packages/ember-runtime/lib/mixins/promise_proxy.js:100</a> </div> <div class=\"description\"> <p>Once the proxied promise has settled this will become <code>false</code>.</p> </div> <p> <strong>Default:</strong> <code>true</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isRejected\">isRejected</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L118\">packages/ember-runtime/lib/mixins/promise_proxy.js:118</a> </div> <div class=\"description\"> <p>Will become <code>true</code> if the proxied promise is rejected.</p> </div> <p> <strong>Default:</strong> <code>false</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isSettled\">isSettled</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L109\">packages/ember-runtime/lib/mixins/promise_proxy.js:109</a> </div> <div class=\"description\"> <p>Once the proxied promise has settled this will become <code>true</code>.</p> </div> <p> <strong>Default:</strong> <code>false</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_promise\">promise</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L136\">packages/ember-runtime/lib/mixins/promise_proxy.js:136</a> </div> <div class=\"description\"> <p>The promise whose fulfillment value is being proxied by this object.</p> <p>This property must be specified upon creation, and should not be changed once created.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.ObjectProxy.extend(Ember.PromiseProxyMixin).create({\n  promise: &lt;thenable&gt;\n});\n</pre> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_reason\">reason</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/promise_proxy.js#L90\">packages/ember-runtime/lib/mixins/promise_proxy.js:90</a> </div> <div class=\"description\"> <p>If the proxied promise is rejected this will contain the reason provided.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.PromiseProxyMixin.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.PromiseProxyMixin.html</a>\n  </p>\n</div>\n","classes/ember.proxymixin":"<h1 class=\"api-header\"> Ember.ProxyMixin Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/-proxy.js#L43\">packages/ember-runtime/lib/mixins/-proxy.js:43</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p><code>Ember.ProxyMixin</code> forwards all properties not defined by the proxy itself to a proxied <code>content</code> object. See Ember.ObjectProxy for more details.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ProxyMixin.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ProxyMixin.html</a>\n  </p>\n</div>\n","classes/ember.mutableenumerable":"<h1 class=\"api-header\"> Ember.MutableEnumerable Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Uses: <a href=\"ember.enumerable\">Ember.Enumerable</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L10\">packages/ember-runtime/lib/mixins/mutable_enumerable.js:10</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>This mixin defines the API for modifying generic enumerables. These methods can be applied to an object regardless of whether it is ordered or unordered.</p> <p>Note that an Enumerable can change even if it does not implement this mixin. For example, a MappedEnumerable cannot be directly modified but if its underlying enumerable changes, it will change also.</p> <h2 class=\"anchorable-toc\" id=\"toc_adding-objects\">Adding Objects</h2> <p>To add an object to an enumerable, use the <code>addObject()</code> method. This method will only add the object to the enumerable if the object is not already present and is of a type supported by the enumerable.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">set.addObject(contact);\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_removing-objects\">Removing Objects</h2> <p>To remove an object from an enumerable, use the <code>removeObject()</code> method. This will only remove the object if it is present in the enumerable, otherwise this method has no effect.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">set.removeObject(contact);\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_implementing-in-your-own-code\">Implementing In Your Own Code</h2> <p>If you are implementing an object and want to support this API, just include this mixin in your class and implement the required methods. In your unit tests, be sure to apply the Ember.MutableEnumerableTests to your object.</p> </div> <div class=\"pane\" id=\"methods\">   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_addObject\">addObject</h2>\n<span class=\"args\"> (object) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L52\">packages/ember-runtime/lib/mixins/mutable_enumerable.js:52</a> </div> <div class=\"description\"> <p><strong>Required.</strong> You must implement this method to apply this mixin.</p> <p>Attempts to add the passed object to the receiver if the object is not already present in the collection. If the object is present, this method has no effect.</p> <p>If the passed object is of a type not supported by the receiver, then this method should raise an exception.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>object</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to add to the enumerable. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the passed object</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_addObjects\">addObjects</h2>\n<span class=\"args\"> (objects) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L69\">packages/ember-runtime/lib/mixins/mutable_enumerable.js:69</a> </div> <div class=\"description\"> <p>Adds each object in the passed enumerable to the receiver.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>objects</strong> <span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span>\n</dt> <dd> the objects to add. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> receiver</dd> </dl> </div> </div>                        <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeObject\">removeObject</h2>\n<span class=\"args\"> (object) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L84\">packages/ember-runtime/lib/mixins/mutable_enumerable.js:84</a> </div> <div class=\"description\"> <p><strong>Required.</strong> You must implement this method to apply this mixin.</p> <p>Attempts to remove the passed object from the receiver collection if the object is present in the collection. If the object is not present, this method has no effect.</p> <p>If the passed object is of a type not supported by the receiver, then this method should raise an exception.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>object</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to remove from the enumerable. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the passed object</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeObjects\">removeObjects</h2>\n<span class=\"args\"> (objects) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_enumerable.js#L102\">packages/ember-runtime/lib/mixins/mutable_enumerable.js:102</a> </div> <div class=\"description\"> <p>Removes each object in the passed enumerable from the receiver.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>objects</strong> <span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span>\n</dt> <dd> the objects to remove </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> receiver</dd> </dl> </div> </div>       </div>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.MutableEnumerable.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.MutableEnumerable.html</a>\n  </p>\n</div>\n","classes/ember.targetactionsupport":"<h1 class=\"api-header\"> Ember.TargetActionSupport Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.mixin\">Ember.Mixin</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/target_action_support.js#L12\">packages/ember-runtime/lib/mixins/target_action_support.js:12</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p><code>Ember.TargetActionSupport</code> is a mixin that can be included in a class to add a <code>triggerAction</code> method with semantics similar to the Handlebars <code>{{action}}</code> helper. In normal Ember usage, the <code>{{action}}</code> helper is usually the best choice. This mixin is most often useful when you are doing more complex event handling in View objects.</p> <p>See also <code>Ember.ViewTargetActionSupport</code>, which has view-aware defaults for target and actionContext.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.TargetActionSupport.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.TargetActionSupport.html</a>\n  </p>\n</div>\n","classes/ember.test.adapter":"<h1 class=\"api-header\"> Ember.Test.Adapter Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/adapters/adapter.js#L10\">packages/ember-testing/lib/adapters/adapter.js:10</a></p> <p>Module: <a href=\"../modules/ember-testing\">ember-testing</a></p> </div> <div class=\"description\"> <p>The primary purpose of this class is to create hooks that can be implemented by an adapter for various test frameworks.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_asyncEnd\">asyncEnd</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/adapters/adapter.js#L30\">packages/ember-testing/lib/adapters/adapter.js:30</a> </div> <div class=\"description\"> <p>This callback will be called whenever an async operation has completed.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_asyncStart\">asyncStart</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/adapters/adapter.js#L19\">packages/ember-testing/lib/adapters/adapter.js:19</a> </div> <div class=\"description\"> <p>This callback will be called whenever an async operation is about to start.</p> <p>Override this to call your framework's methods that handle async operations.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_exception\">exception</h2>\n<span class=\"args\"> (error) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/adapters/adapter.js#L38\">packages/ember-testing/lib/adapters/adapter.js:38</a> </div> <div class=\"description\"> <p>Override this method with your testing framework's false assertion. This function is called whenever an exception occurs causing the testing promise to fail.</p> <p>QUnit example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">  exception: function(error) {\n    ok(false, error);\n  };\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>error</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The exception to be raised. </dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Test.Adapter.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Test.Adapter.html</a>\n  </p>\n</div>\n","classes/ember.test.ember.test":"<h1 class=\"api-header\"> Ember.Test.Ember.Test Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_injectTestHelpers\">injectTestHelpers</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/ext/application.js#L96\">packages/ember-testing/lib/ext/application.js:96</a> </div> <div class=\"description\"> <p>This injects the test helpers into the <code>helperContainer</code> object. If an object is provided it will be used as the helperContainer. If <code>helperContainer</code> is not set it will default to <code>window</code>. If a function of the same name has already been defined it will be cached (so that it can be reset if the helper is removed with <code>unregisterHelper</code> or <code>removeTestHelpers</code>).</p> <p>Any callbacks registered with <code>onInjectHelpers</code> will be called once the helpers have been injected.</p> <p>Example: <code>\nApp.injectTestHelpers();\n</code></p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerHelper\">registerHelper</h2>\n<span class=\"args\"> (name, helperMethod, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/helpers.js#L5\">packages/ember-testing/lib/test/helpers.js:5</a> </div> <div class=\"description\"> <p><code>registerHelper</code> is used to register a test helper that will be injected when <code>App.injectTestHelpers</code> is called.</p> <p>The helper method will always be called with the current Application as the first parameter.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.registerHelper('boot', function(app) {\n  Ember.run(app, app.advanceReadiness);\n});\n</pre> <p>This helper can later be called without arguments because it will be called with <code>app</code> as the first parameter.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App = Ember.Application.create();\nApp.injectTestHelpers();\nboot();\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the helper method to add. </dd> <dt>\n<strong>helperMethod</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeTestHelpers\">removeTestHelpers</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/ext/application.js#L138\">packages/ember-testing/lib/ext/application.js:138</a> </div> <div class=\"description\"> <p>This removes all helpers that have been registered, and resets and functions that were overridden by the helpers.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.removeTestHelpers();\n</pre> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_setupForTesting\">setupForTesting</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/ext/application.js#L58\">packages/ember-testing/lib/ext/application.js:58</a> </div> <div class=\"description\"> <p>This hook defers the readiness of the application, so that you can start the app when your tests are ready to run. It also sets the router's location to 'none', so that the window's location will not be modified (preventing both accidental leaking of state between tests and interference with your testing framework).</p> <p>Example:</p> <pre class=\"highlight text \" data-language=\"\">App.setupForTesting();\n</pre> </div>  </div> </div>\n<div class=\"pane\" id=\"properties\">    <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_testHelpers\">testHelpers</h2>\n<span class=\"type\">{Object}</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/ext/application.js#L16\">packages/ember-testing/lib/ext/application.js:16</a> </div> <div class=\"description\"> <p>This property contains the testing helpers for the current application. These are created once you call <code>injectTestHelpers</code> on your <code>Ember.Application</code> instance. The included helpers are also available on the <code>window</code> object by default, but can be used from this object on the individual application also.</p> </div> <p> <strong>Default:</strong> <code>{}</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_testing\">testing</h2>\n<span class=\"type\">{Boolean}</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/ext/application.js#L45\">packages/ember-testing/lib/ext/application.js:45</a> <br>Available since 1.3.0 </div> <div class=\"description\"> <p>This property indicates whether or not this application is currently in testing mode. This is set when <code>setupForTesting</code> is called on the current application.</p> </div> <p> <strong>Default:</strong> <code>false</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Test.Ember.Test.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Test.Ember.Test.html</a>\n  </p>\n</div>\n","classes/ember.namespace":"<h1 class=\"api-header\"> Ember.Namespace Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/namespace.js#L30\">packages/ember-runtime/lib/system/namespace.js:30</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>A Namespace is an object usually used to contain other objects or methods such as an application or framework. Create a namespace anytime you want to define one of these new containers.</p> <h1 class=\"anchorable-toc\" id=\"toc_example-usage\">Example Usage</h1>\n<pre class=\"highlight javascript \" data-language=\"javascript\">MyFramework = Ember.Namespace.create({\n  VERSION: '1.0.0'\n});\n</pre> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Namespace.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Namespace.html</a>\n  </p>\n</div>\n","classes/ember.nonelocation":"<h1 class=\"api-header\"> Ember.NoneLocation Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/location/none_location.js#L11\">packages/ember-routing/lib/location/none_location.js:11</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"description\"> <p>Ember.NoneLocation does not interact with the browser. It is useful for testing, or when you need to manage state with your Router, but temporarily don't want it to muck with the URL (for example when you embed your application in a larger page).</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.NoneLocation.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.NoneLocation.html</a>\n  </p>\n</div>\n","classes/ember.object":"<h1 class=\"api-header\"> Ember.Object Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.coreobject\">Ember.CoreObject</a></p> <p>Uses: <a href=\"ember.observable\">Ember.Observable</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/object.js#L9\">packages/ember-runtime/lib/system/object.js:9</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p><code>Ember.Object</code> is the main base class for all Ember objects. It is a subclass of <code>Ember.CoreObject</code> with the <code>Ember.Observable</code> mixin applied. For details, see the documentation for each of these.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Object.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Object.html</a>\n  </p>\n</div>\n","classes/ember.test":"<h1 class=\"api-header\"> Ember.Test Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test.js#L29\">packages/ember-testing/lib/test.js:29</a></p> <p>Module: <a href=\"../modules/ember-testing\">ember-testing</a></p> </div> <div class=\"description\"> <p>This is a container for an assortment of testing related functionality:</p> <ul> <li>Choose your default test adapter (for your framework of choice).</li> <li>Register/Unregister additional test helpers.</li> <li>Setup callbacks to be fired when the test helpers are injected into your application.</li> </ul> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_checkWaiters\">checkWaiters</h2>\n<span class=\"flag public\">public</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/waiters.js#L74\">packages/ember-testing/lib/test/waiters.js:74</a> </div> <div class=\"description\"> <p>Iterates through each registered test waiter, and invokes its callback. If any waiter returns false, this method will return true indicating that the waiters have not settled yet.</p> <p>This is generally used internally from the acceptance/integration test infrastructure.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_click\">click</h2>\n<span class=\"args\"> (selector) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L44\">packages/ember-testing/lib/helpers.js:44</a> </div> <div class=\"description\"> <p>Clicks an element and triggers any actions triggered by the element's <code>click</code> event.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">click('.some-jQuery-selector').then(function() {\n  // assert something\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>selector</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> jQuery selector for finding element on the DOM </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_currentPath\">currentPath</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L187\">packages/ember-testing/lib/helpers.js:187</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>Returns the current path.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function validateURL() {\nequal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n}\n\nclick('#some-link-id').then(validateURL);\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The currently active path.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_currentRouteName\">currentRouteName</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L167\">packages/ember-testing/lib/helpers.js:167</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>Returns the currently active route name.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function validateRouteName() {\nequal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n}\n\nvisit('/some/path').then(validateRouteName)\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The name of the currently active route.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_currentURL\">currentURL</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L207\">packages/ember-testing/lib/helpers.js:207</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>Returns the current URL.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function validateURL() {\nequal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n}\n\nclick('#some-link-id').then(validateURL);\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The currently active URL.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_fillIn\">fillIn</h2>\n<span class=\"args\"> (selector, text) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L84\">packages/ember-testing/lib/helpers.js:84</a> </div> <div class=\"description\"> <p>Fills in an input element with some text.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">fillIn('#email', 'you@example.com').then(function() {\n  // assert something\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>selector</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> jQuery selector finding an input element on the DOM to fill text with </dd> <dt>\n<strong>text</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> text to place inside the input element </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_find\">find</h2>\n<span class=\"args\"> (selector) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L104\">packages/ember-testing/lib/helpers.js:104</a> </div> <div class=\"description\"> <p>Finds an element in the context of the app's container element. A simple alias for <code>app.$(selector)</code>.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var $el = find('.my-selector');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>selector</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> jQuery string selector for element lookup </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> jQuery object representing the results of the query</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findWithAssert\">findWithAssert</h2>\n<span class=\"args\"> (selector) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L121\">packages/ember-testing/lib/helpers.js:121</a> </div> <div class=\"description\"> <p>Like <code>find</code>, but throws an error if the element selector returns no results.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var $el = findWithAssert('.doesnt-exist'); // throws error\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>selector</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> jQuery selector string for finding an element within the DOM </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> jQuery object representing the results of the query</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_keyEvent\">keyEvent</h2>\n<span class=\"args\"> (selector, type, keyCode) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L63\">packages/ember-testing/lib/helpers.js:63</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>Simulates a key event, e.g. <code>keypress</code>, <code>keydown</code>, <code>keyup</code> with the desired keyCode</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">keyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n // assert something\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>selector</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> jQuery selector for finding element on the DOM </dd> <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the type of key event, e.g. `keypress`, `keydown`, `keyup` </dd> <dt>\n<strong>keyCode</strong> <span class=\"type\">Number</span>\n</dt> <dd> the keyCode of the simulated key event </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_onInjectHelpers\">onInjectHelpers</h2>\n<span class=\"args\"> (callback) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/on_inject_helpers.js#L3\">packages/ember-testing/lib/test/on_inject_helpers.js:3</a> </div> <div class=\"description\"> <p>Used to register callbacks to be fired whenever <code>App.injectTestHelpers</code> is called.</p> <p>The callback will receive the current application as an argument.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.onInjectHelpers(function() {\n  Ember.$(document).ajaxSend(function() {\n    Test.pendingRequests++;\n  });\n\n  Ember.$(document).ajaxComplete(function() {\n    Test.pendingRequests--;\n  });\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The function to be called. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pauseTest\">pauseTest</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L227\">packages/ember-testing/lib/helpers.js:227</a> <br>Available since 1.9.0 </div> <div class=\"description\"> <p>Pauses the current test - this is useful for debugging while testing or for test-driving. It allows you to inspect the state of your application at any point.</p> <p>Example (The test will pause before clicking the button):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">visit('/')\nreturn pauseTest();\n\nclick('.btn');\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> A promise that will never resolve</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_promise\">promise</h2>\n<span class=\"args\"> (resolver, label) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/promise.js#L21\">packages/ember-testing/lib/test/promise.js:21</a> </div> <div class=\"description\"> <p>This returns a thenable tailored for testing. It catches failed <code>onSuccess</code> callbacks and invokes the <code>Ember.Test.adapter.exception</code> callback in the last chained then.</p> <p>This method should be returned by async helpers such as <code>wait</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>resolver</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> The function used to resolve the promise. </dd> <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> An optional string for identifying the promise. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerAsyncHelper\">registerAsyncHelper</h2>\n<span class=\"args\"> (name, helperMethod) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/helpers.js#L43\">packages/ember-testing/lib/test/helpers.js:43</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p><code>registerAsyncHelper</code> is used to register an async test helper that will be injected when <code>App.injectTestHelpers</code> is called.</p> <p>The helper method will always be called with the current Application as the first parameter.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.registerAsyncHelper('boot', function(app) {\n  Ember.run(app, app.advanceReadiness);\n});\n</pre> <p>The advantage of an async helper is that it will not run until the last async helper has completed. All async helpers after it will wait for it complete before running.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.registerAsyncHelper('deletePost', function(app, postId) {\n  click('.delete-' + postId);\n});\n\n// ... in your test\nvisit('/post/2');\ndeletePost(2);\nvisit('/post/3');\ndeletePost(3);\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the helper method to add. </dd> <dt>\n<strong>helperMethod</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerWaiter\">registerWaiter</h2>\n<span class=\"args\"> (context, callback) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/waiters.js#L7\">packages/ember-testing/lib/test/waiters.js:7</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p>This allows ember-testing to play nicely with other asynchronous events, such as an application that is waiting for a CSS3 transition or an IndexDB transaction.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.registerWaiter(function() {\n  return myPendingTransactions() == 0;\n});\n</pre> <p>The <code>context</code> argument allows you to optionally specify the <code>this</code> with which your callback will be invoked.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>context</strong> <span class=\"type\">Object</span>\n</dt> <dd> (optional) </dd> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_resolve\">resolve</h2>\n<span class=\"args\"> (The) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/promise.js#L39\">packages/ember-testing/lib/test/promise.js:39</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p>Replacement for <code>Ember.RSVP.resolve</code> The only difference is this uses an instance of <code>Ember.Test.Promise</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>The</strong> <span class=\"type\">Mixed</span>\n</dt> <dd> value to resolve </dd> </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_triggerEvent\">triggerEvent</h2>\n<span class=\"args\"> (selector, context, type, options) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L247\">packages/ember-testing/lib/helpers.js:247</a> <br>Available since 1.5.0 </div> <div class=\"description\"> <p>Triggers the given DOM event on the element identified by the provided selector.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">triggerEvent('#some-elem-id', 'blur');\n</pre> <p>This is actually used internally by the <code>keyEvent</code> helper like so:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">triggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>selector</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> jQuery selector for finding element on the DOM </dd> <dt>\n<strong>context</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd> jQuery selector that will limit the selector argument to find only within the context's children </dd> <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The event type to be triggered. </dd> <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> The options to be passed to jQuery.Event. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unregisterHelper\">unregisterHelper</h2>\n<span class=\"args\"> (name) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/helpers.js#L91\">packages/ember-testing/lib/test/helpers.js:91</a> </div> <div class=\"description\"> <p>Remove a previously added helper method.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.unregisterHelper('wait');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The helper to remove. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unregisterWaiter\">unregisterWaiter</h2>\n<span class=\"args\"> (context, callback) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test/waiters.js#L47\">packages/ember-testing/lib/test/waiters.js:47</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p><code>unregisterWaiter</code> is used to unregister a callback that was registered with <code>registerWaiter</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>context</strong> <span class=\"type\">Object</span>\n</dt> <dd> (optional) </dd> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_visit\">visit</h2>\n<span class=\"args\"> (url) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L24\">packages/ember-testing/lib/helpers.js:24</a> </div> <div class=\"description\"> <p>Loads a route, sets up any controllers, and renders any templates associated with the route as though a real user had triggered the route change while using your app.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">visit('posts/index').then(function() {\n  // assert something\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>url</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the route </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_wait\">wait</h2>\n<span class=\"args\"> (value) </span><span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/helpers.js#L139\">packages/ember-testing/lib/helpers.js:139</a> </div> <div class=\"description\"> <p>Causes the run loop to process any pending events. This is used to ensure that any async operations from other helpers (or your assertions) have been processed.</p> <p>This is most often used as the return value for the helper functions (see 'click', 'fillIn','visit',etc).</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.registerAsyncHelper('loginUser', function(app, username, password) {\n  visit('secured/path/here')\n  .fillIn('#username', username)\n  .fillIn('#password', password)\n  .click('.submit')\n\n  return app.testHelpers.wait();\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>value</strong> <span class=\"type\">Object</span>\n</dt> <dd> The value to be returned. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"rsvp.promise\">RSVP.Promise</a></span> </dt>\n </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">   <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_adapter\">adapter</h2>\n<span class=\"type\">{Class} The adapter to be used.</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/test.js#L66\">packages/ember-testing/lib/test.js:66</a> </div> <div class=\"description\"> <p>Used to allow ember-testing to communicate with a specific testing framework.</p> <p>You can manually set it before calling <code>App.setupForTesting()</code>.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Test.adapter = MyCustomAdapter.create()\n</pre> <p>If you do not set it, ember-testing will default to <code>Ember.Test.QUnitAdapter</code>.</p> </div> <p> <strong>Default:</strong> <code>Ember.Test.QUnitAdapter</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Test.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Test.html</a>\n  </p>\n</div>\n","classes/ember.test.qunitadapter":"<h1 class=\"api-header\"> Ember.Test.QUnitAdapter Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.test.adapter\">Ember.Test.Adapter</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-testing/lib/adapters/qunit.js#L4\">packages/ember-testing/lib/adapters/qunit.js:4</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>This class implements the methods defined by Ember.Test.Adapter for the QUnit testing framework.</p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Test.QUnitAdapter.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Test.QUnitAdapter.html</a>\n  </p>\n</div>\n","classes/ember.mutablearray":"<h1 class=\"api-header\"> Ember.MutableArray Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Uses: <a href=\"ember.array\">Ember.Array</a></p> <p>Uses: <a href=\"ember.mutableenumerable\">Ember.MutableEnumerable</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L29\">packages/ember-runtime/lib/mixins/mutable_array.js:29</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>This mixin defines the API for modifying array-like objects. These methods can be applied only to a collection that keeps its items in an ordered set. It builds upon the Array mixin and adds methods to modify the array. One concrete implementations of this class include ArrayProxy.</p> <p>It is important to use the methods in this class to modify arrays so that changes are observable. This allows the binding system in Ember to function correctly.</p> <p>Note that an Array can change even if it does not implement this mixin. For example, one might implement a SparseArray that cannot be directly modified, but if its underlying enumerable changes, it will change also.</p> </div> <div class=\"pane\" id=\"methods\">    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_addObject\">addObject</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Inherited from <a href=\"ember.mutableenumerable#method_addObject\">Ember.MutableEnumerable</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L375\">packages/ember-runtime/lib/mixins/mutable_array.js:375</a> </div> <div class=\"description\"> <p>Push the object onto the end of the array if it is not already present in the array.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var cities = ['Chicago', 'Berlin'];\n\ncities.addObject('Lima');    // ['Chicago', 'Berlin', 'Lima']\ncities.addObject('Berlin');  // ['Chicago', 'Berlin', 'Lima']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">*</span>\n</dt> <dd> object to add, if not already present </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_clear\">clear</h2>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L70\">packages/ember-runtime/lib/mixins/mutable_array.js:70</a> </div> <div class=\"description\"> <p>Remove all elements from the array. This is useful if you want to reuse an existing array without having to recreate it.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red', 'green', 'blue'];\n\ncolor.length();   //  3\ncolors.clear();   //  []\ncolors.length();  //  0\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> An empty Array.</dd> </dl> </div> </div>            <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_includes\">includes</h2>\n<span class=\"args\"> (obj, startAt) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Inherited from <a href=\"ember.enumerable#method_includes\">Ember.Enumerable</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L589\">packages/ember-runtime/lib/mixins/array.js:589</a> </div> <div class=\"description\"> <p>Returns <code>true</code> if the passed object can be found in the array. This method is a Polyfill for ES 2016 Array.includes. If no <code>startAt</code> argument is given, the starting location to search is 0. If it's negative, searches from the index of <code>this.length + startAt</code> by asc. <code>javascript\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 2);  // true\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, 3].includes(1, -1); // false\n[1, 2, 3].includes(1, -4); // true\n[1, 2, NaN].includes(NaN); // true\n</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt> <dd> The object to search for. </dd> <dt>\n<strong>startAt</strong> <span class=\"type\">Number</span>\n</dt> <dd> optional starting location to search, default 0 </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> `true` if object is found in the array.</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_insertAt\">insertAt</h2>\n<span class=\"args\"> (idx, object) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L96\">packages/ember-runtime/lib/mixins/mutable_array.js:96</a> </div> <div class=\"description\"> <p>This will use the primitive <code>replace()</code> method to insert an object at the specified index.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red', 'green', 'blue'];\n\ncolors.insertAt(2, 'yellow');  // ['red', 'green', 'yellow', 'blue']\ncolors.insertAt(5, 'orange');  // Error: Index out of range\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>idx</strong> <span class=\"type\">Number</span>\n</dt> <dd> index of insert the object at. </dd> <dt>\n<strong>object</strong> <span class=\"type\">Object</span>\n</dt> <dd> object to insert </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>          <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_popObject\">popObject</h2>\n<span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L204\">packages/ember-runtime/lib/mixins/mutable_array.js:204</a> </div> <div class=\"description\"> <p>Pop object from array or nil if none are left. Works just like <code>pop()</code> but it is KVO-compliant.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red', 'green', 'blue'];\n\ncolors.popObject();   // 'blue'\nconsole.log(colors);  // ['red', 'green']\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> object</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pushObject\">pushObject</h2>\n<span class=\"args\"> (obj) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L160\">packages/ember-runtime/lib/mixins/mutable_array.js:160</a> </div> <div class=\"description\"> <p>Push the object onto the end of the array. Works just like <code>push()</code> but it is KVO-compliant.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red', 'green'];\n\ncolors.pushObject('black');     // ['red', 'green', 'black']\ncolors.pushObject(['yellow']);  // ['red', 'green', ['yellow']]\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">*</span>\n</dt> <dd> object to push </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> object same object passed as a param</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pushObjects\">pushObjects</h2>\n<span class=\"args\"> (objects) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L181\">packages/ember-runtime/lib/mixins/mutable_array.js:181</a> </div> <div class=\"description\"> <p>Add the objects in the passed numerable to the end of the array. Defers notifying observers of the change until all objects are added.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red'];\n\ncolors.pushObjects(['yellow', 'orange']);  // ['red', 'yellow', 'orange']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>objects</strong> <span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span>\n</dt> <dd> the objects to add </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeAt\">removeAt</h2>\n<span class=\"args\"> (start, len) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L122\">packages/ember-runtime/lib/mixins/mutable_array.js:122</a> </div> <div class=\"description\"> <p>Remove an object at the specified index using the <code>replace()</code> primitive method. You can pass either a single index, or a start and a length.</p> <p>If you pass a start and length that is beyond the length this method will throw an <code>OUT_OF_RANGE_EXCEPTION</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red', 'green', 'blue', 'yellow', 'orange'];\n\ncolors.removeAt(0);     // ['green', 'blue', 'yellow', 'orange']\ncolors.removeAt(2, 2);  // ['green', 'blue']\ncolors.removeAt(4, 2);  // Error: Index out of range\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>start</strong> <span class=\"type\">Number</span>\n</dt> <dd> index, start of range </dd> <dt>\n<strong>len</strong> <span class=\"type\">Number</span>\n</dt> <dd> length of passing range </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeObject\">removeObject</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Inherited from <a href=\"ember.mutableenumerable#method_removeObject\">Ember.MutableEnumerable</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L347\">packages/ember-runtime/lib/mixins/mutable_array.js:347</a> </div> <div class=\"description\"> <p>Remove all occurrences of an object in the array.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var cities = ['Chicago', 'Berlin', 'Lima', 'Chicago'];\n\ncities.removeObject('Chicago');  // ['Berlin', 'Lima']\ncities.removeObject('Lima');     // ['Berlin']\ncities.removeObject('Tokyo')     // ['Berlin']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">*</span>\n</dt> <dd> object to remove </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_replace\">replace</h2>\n<span class=\"args\"> (idx, amt, objects) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L52\">packages/ember-runtime/lib/mixins/mutable_array.js:52</a> </div> <div class=\"description\"> <p><strong>Required.</strong> You must implement this method to apply this mixin.</p> <p>This is one of the primitives you must implement to support <code>Ember.Array</code>. You should replace amt objects started at idx with the objects in the passed array. You should also call <code>this.enumerableContentDidChange()</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>idx</strong> <span class=\"type\">Number</span>\n</dt> <dd> Starting index in the array to replace. If idx &gt;= length, then append to the end of the array. </dd> <dt>\n<strong>amt</strong> <span class=\"type\">Number</span>\n</dt> <dd> Number of elements that should be removed from the array, starting at *idx*. </dd> <dt>\n<strong>objects</strong> <span class=\"type\">Array</span>\n</dt> <dd> An array of zero or more objects that should be inserted into the array at *idx* </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reverseObjects\">reverseObjects</h2>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L297\">packages/ember-runtime/lib/mixins/mutable_array.js:297</a> </div> <div class=\"description\"> <p>Reverse objects in the array. Works just like <code>reverse()</code> but it is KVO-compliant.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_setObjects\">setObjects</h2>\n<span class=\"args\"> (objects) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L316\">packages/ember-runtime/lib/mixins/mutable_array.js:316</a> </div> <div class=\"description\"> <p>Replace all the receiver's content with content of the argument. If argument is an empty array receiver will be cleared.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red', 'green', 'blue'];\n\ncolors.setObjects(['black', 'white']);  // ['black', 'white']\ncolors.setObjects([]);                  // []\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>objects</strong> <span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span>\n</dt> <dd> array whose content will be used for replacing the content of the receiver </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver with the new content</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_shiftObject\">shiftObject</h2>\n<span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L230\">packages/ember-runtime/lib/mixins/mutable_array.js:230</a> </div> <div class=\"description\"> <p>Shift an object from start of array or nil if none are left. Works just like <code>shift()</code> but it is KVO-compliant.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red', 'green', 'blue'];\n\ncolors.shiftObject();  // 'red'\nconsole.log(colors);   // ['green', 'blue']\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> object</dd> </dl> </div> </div>      <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unshiftObject\">unshiftObject</h2>\n<span class=\"args\"> (obj) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L255\">packages/ember-runtime/lib/mixins/mutable_array.js:255</a> </div> <div class=\"description\"> <p>Unshift an object to start of array. Works just like <code>unshift()</code> but it is KVO-compliant.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red'];\n\ncolors.unshiftObject('yellow');    // ['yellow', 'red']\ncolors.unshiftObject(['black']);   // [['black'], 'yellow', 'red']\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">*</span>\n</dt> <dd> object to unshift </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> object same object passed as a param</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unshiftObjects\">unshiftObjects</h2>\n<span class=\"args\"> (objects) </span><span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/mutable_array.js#L276\">packages/ember-runtime/lib/mixins/mutable_array.js:276</a> </div> <div class=\"description\"> <p>Adds the named objects to the beginning of the array. Defers notifying observers until all objects have been added.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var colors = ['red'];\n\ncolors.unshiftObjects(['black', 'white']);   // ['black', 'white', 'red']\ncolors.unshiftObjects('yellow'); // Type Error: 'undefined' is not a function\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>objects</strong> <span class=\"type\"><a href=\"ember.enumerable\">Ember.Enumerable</a></span>\n</dt> <dd> the objects to add </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.array\">Ember.Array</a></span> </dt>\n<dd> receiver</dd> </dl> </div> </div>  </div>\n<div class=\"pane\" id=\"properties\">   <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property__\">[]</h2>\n<span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ember.enumerable#method_%5B%5D\">Ember.Enumerable</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/array.js#L188\">packages/ember-runtime/lib/mixins/array.js:188</a> </div> <div class=\"description\"> <p>This is the handler for the special array content property. If you get this property, it will return this. If you set this property to a new array, it will replace the current content.</p> <p>This property overrides the default property defined in <code>Ember.Enumerable</code>.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> this</dd> </dl> </div> </div>      </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.MutableArray.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.MutableArray.html</a>\n  </p>\n</div>\n","classes/ember.service":"<h1 class=\"api-header\"> Ember.Service Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/service.js#L35\">packages/ember-runtime/lib/system/service.js:35</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Service.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Service.html</a>\n  </p>\n</div>\n","classes/ember.textsupport":"<h1 class=\"api-header\"> Ember.TextSupport Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.mixin\">Ember.Mixin</a></p> <p>Uses: <a href=\"ember.targetactionsupport\">Ember.TargetActionSupport</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/text_support.js#L16\">packages/ember-views/lib/mixins/text_support.js:16</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"description\"> <p><code>TextSupport</code> is a shared mixin used by both <code>Ember.TextField</code> and <code>Ember.TextArea</code>. <code>TextSupport</code> adds a number of methods that allow you to specify a controller action to invoke when a certain event is fired on your text field or textarea. The specifed controller action would get the current value of the field passed in as the only argument unless the value of the field is empty. In that case, the instance of the field itself is passed in as the only argument.</p> <p>Let's use the pressing of the escape key as an example. If you wanted to invoke a controller action when a user presses the escape key while on your field, you would use the <code>escape-press</code> attribute on your field like so:</p> <pre class=\"highlight handlebars \" data-language=\"\">  {{! application.hbs}}\n\n  {{input escape-press='alertUser'}}\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">    App = Ember.Application.create();\n\n    App.ApplicationController = Ember.Controller.extend({\n      actions: {\n        alertUser: function ( currentValue ) {\n          alert( 'escape pressed, current value: ' + currentValue );\n        }\n      }\n    });\n</pre> <p>The following chart is a visual representation of what takes place when the escape key is pressed in this scenario:</p> <pre class=\"highlight text \" data-language=\"\">The Template\n+---------------------------+\n|                           |\n| escape-press='alertUser'  |\n|                           |          TextSupport Mixin\n+----+----------------------+          +-------------------------------+\n     |                                 | cancel method                 |\n     |      escape button pressed      |                               |\n     +-------------------------------&gt; | checks for the `escape-press` |\n                                       | attribute and pulls out the   |\n     +-------------------------------+ | `alertUser` value             |\n     |     action name 'alertUser'     +-------------------------------+\n     |     sent to controller\n     v\nController\n+------------------------------------------ +\n|                                           |\n|  actions: {                               |\n|     alertUser: function( currentValue ){  |\n|       alert( 'the esc key was pressed!' ) |\n|     }                                     |\n|  }                                        |\n|                                           |\n+-------------------------------------------+\n</pre> <p>Here are the events that we currently support along with the name of the attribute you would need to use on your field. To reiterate, you would use the attribute name like so:</p> <pre class=\"highlight handlebars \" data-language=\"\">  {{input attribute-name='controllerAction'}}\n</pre>\n<pre class=\"highlight text \" data-language=\"\">+--------------------+----------------+\n|                    |                |\n| event              | attribute name |\n+--------------------+----------------+\n| new line inserted  | insert-newline |\n|                    |                |\n| enter key pressed  | insert-newline |\n|                    |                |\n| cancel key pressed | escape-press   |\n|                    |                |\n| focusin            | focus-in       |\n|                    |                |\n| focusout           | focus-out      |\n|                    |                |\n| keypress           | key-press      |\n|                    |                |\n| keyup              | key-up         |\n|                    |                |\n| keydown            | key-down       |\n+--------------------+----------------+\n</pre> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.TextSupport.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.TextSupport.html</a>\n  </p>\n</div>\n","classes/ember.visibilitysupport":"<h1 class=\"api-header\"> Ember.VisibilitySupport Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/visibility_support.js#L14\">packages/ember-views/lib/mixins/visibility_support.js:14</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> \n<div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isVisible\">isVisible</h2>\n<span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/visibility_support.js#L20\">packages/ember-views/lib/mixins/visibility_support.js:20</a> </div> <div class=\"description\"> <p>If <code>false</code>, the view will appear hidden in DOM.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.VisibilitySupport.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.VisibilitySupport.html</a>\n  </p>\n</div>\n","classes/ember.stream.stream":"<h1 class=\"api-header\"> Ember.stream.Stream Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/streams/stream.js#L19\">packages/ember-htmlbars/lib/streams/stream.js:19</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.stream.Stream.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.stream.Stream.html</a>\n  </p>\n</div>\n","classes/ember.streams.dependency":"<h1 class=\"api-header\"> Ember.streams.Dependency Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/streams/dependency.js#L14\">packages/ember-htmlbars/lib/streams/dependency.js:14</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.streams.Dependency.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.streams.Dependency.html</a>\n  </p>\n</div>\n","classes/ember.streams.ember.stream":"<h1 class=\"api-header\"> Ember.streams.Ember.stream Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.streams.Ember.stream.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.streams.Ember.stream.html</a>\n  </p>\n</div>\n","classes/ember.router":"<h1 class=\"api-header\"> Ember.Router Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Uses: <a href=\"ember.evented\">Ember.Evented</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/router.js#L41\">packages/ember-routing/lib/system/router.js:41</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"description\"> <p>The <code>Ember.Router</code> class manages the application state and URLs. Refer to the <a href=\"http://emberjs.com/guides/routing/\">routing guide</a> for documentation.</p> </div> <div class=\"pane\" id=\"methods\">           <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_didTransition\">didTransition</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/router.js#L209\">packages/ember-routing/lib/system/router.js:209</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p>Handles updating the paths and notifying any listeners of the URL change.</p> <p>Triggers the router level <code>didTransition</code> hook.</p> <p>For example, to notify google analytics when the route changes, you could use this hook. (Note: requires also including GA scripts, etc.)</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var Router = Ember.Router.extend({\n  location: config.locationType,\n\n  didTransition: function() {\n    this._super(...arguments);\n\n    return ga('send', 'pageview', {\n      'page': this.get('url'),\n      'title': this.get('url')\n    });\n  }\n});\n</pre> </div>  </div>              <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_map\">map</h2>\n<span class=\"args\"> (callback) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/router.js#L1080\">packages/ember-routing/lib/system/router.js:1080</a> </div> <div class=\"description\"> <p>The <code>Router.map</code> function allows you to define mappings from URLs to routes in your application. These mappings are defined within the supplied callback function using <code>this.route</code>.</p> <p>The first parameter is the name of the route which is used by default as the path name as well.</p> <p>The second parameter is the optional options hash. Available options are:</p> <ul> <li>\n<code>path</code>: allows you to provide your own path as well as mark dynamic segments.</li> <li>\n<code>resetNamespace</code>: false by default; when nesting routes, ember will combine the route names to form the fully-qualified route name, which is used with <code>{{link-to}}</code> or manually transitioning to routes. Setting <code>resetNamespace: true</code> will cause the route not to inherit from its parent route's names. This is handy for preventing extremely long route names. Keep in mind that the actual URL path behavior is still retained.</li> </ul> <p>The third parameter is a function, which can be used to nest routes. Nested routes, by default, will have the parent route tree's route name and path prepended to it's own.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function(){\n  this.route('post', { path: '/post/:post_id' }, function() {\n    this.route('edit');\n    this.route('comments', { resetNamespace: true }, function() {\n      this.route('new');\n    });\n  });\n});\n</pre> <p>For more detailed documentation and examples please see <a href=\"http://emberjs.com/guides/routing/defining-your-routes/\">the guides</a>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> \n</dt>  </dl> </div> </div>                 <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_transitionTo\">transitionTo</h2>\n<span class=\"args\"> (name, models, options) </span><span class=\"type\"><a href=\"transition\">Transition</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/router.js#L323\">packages/ember-routing/lib/system/router.js:323</a> </div> <div class=\"description\"> <p>Transition the application into another route. The route may be either a single route or route path:</p> <p>See <a href=\"ember.route#method_transitionTo\">Route.transitionTo</a> for more info.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the route or a URL </dd> <dt>\n<strong>models</strong> <span class=\"type\">...Object</span>\n</dt> <dd> the model(s) or identifier(s) to be used while transitioning to the route. </dd> <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> optional hash with a queryParams property containing a mapping of query parameters </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"transition\">Transition</a></span> </dt>\n<dd> the transition object associated with this attempted transition</dd> </dl> </div> </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_willTransition\">willTransition</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/router.js#L292\">packages/ember-routing/lib/system/router.js:292</a> <br>Available since 1.11.0 </div> <div class=\"description\"> <p>Handles notifying any listeners of an impending URL change.</p> <p>Triggers the router level <code>willTransition</code> hook.</p> </div>  </div> </div>\n<div class=\"pane\" id=\"properties\">     <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_location\">location</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/router.js#L52\">packages/ember-routing/lib/system/router.js:52</a> </div> <div class=\"description\"> <p>The <code>location</code> property determines the type of URL's that your application will use.</p> <p>The following location types are currently available:</p> <ul> <li>\n<code>history</code> - use the browser's history API to make the URLs look just like any standard URL</li> <li>\n<code>hash</code> - use <code>#</code> to separate the server part of the URL from the Ember part: <code>/blog/#/posts/new</code>\n</li> <li>\n<code>none</code> - do not store the Ember URL in the actual browser URL (mainly used for testing)</li> <li>\n<code>auto</code> - use the best option based on browser capabilites: <code>history</code> if possible, then <code>hash</code> if possible, otherwise <code>none</code>\n</li> </ul> <p>Note: If using ember-cli, this value is defaulted to <code>auto</code> by the <code>locationType</code> setting of <code>/config/environment.js</code></p> </div> <p> <strong>Default:</strong> <code>'hash'</code> </p> </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_rootURL\">rootURL</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/router.js#L72\">packages/ember-routing/lib/system/router.js:72</a> </div> <div class=\"description\"> <p>Represents the URL of the root of the application, often '/'. This prefix is assumed on all routes defined on this router.</p> </div> <p> <strong>Default:</strong> <code>'/'</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Router.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Router.html</a>\n  </p>\n</div>\n","classes/ember.nativearray":"<h1 class=\"api-header\"> Ember.NativeArray Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Uses: <a href=\"ember.mutablearray\">Ember.MutableArray</a></p> <p>Uses: <a href=\"ember.observable\">Ember.Observable</a></p> <p>Uses: <a href=\"ember.copyable\">Ember.Copyable</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/system/native_array.js#L21\">packages/ember-runtime/lib/system/native_array.js:21</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>The NativeArray mixin contains the properties needed to make the native Array support Ember.MutableArray and all of its dependent APIs. Unless you have <code>EmberENV.EXTEND_PROTOTYPES</code> or <code>EmberENV.EXTEND_PROTOTYPES.Array</code> set to false, this will be applied automatically. Otherwise you can apply the mixin at anytime by calling <code>Ember.NativeArray.apply(Array.prototype)</code>.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.NativeArray.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.NativeArray.html</a>\n  </p>\n</div>\n","classes/ember.streams.subscriber":"<h1 class=\"api-header\"> Ember.streams.Subscriber Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/streams/subscriber.js#L7\">packages/ember-htmlbars/lib/streams/subscriber.js:7</a></p> <p>Module: <a href=\"../modules/ember-metal\">ember-metal</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.streams.Subscriber.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.streams.Subscriber.html</a>\n  </p>\n</div>\n","classes/function":"<h1 class=\"api-header\"> Function Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_observes\">observes</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/ext/function.js#L81\">packages/ember-runtime/lib/ext/function.js:81</a> </div> <div class=\"description\"> <p>The <code>observes</code> extension of Javascript's Function prototype is available when <code>EmberENV.EXTEND_PROTOTYPES</code> or <code>EmberENV.EXTEND_PROTOTYPES.Function</code> is true, which is the default.</p> <p>You can observe property changes simply by adding the <code>observes</code> call to the end of your method declarations in classes that you write. For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Object.extend({\n  valueObserver: function() {\n    // Executes whenever the \"value\" property changes\n  }.observes('value')\n});\n</pre> <p>In the future this method may become asynchronous.</p> <p>See <code>Ember.observer</code>.</p> </div>  </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_on\">on</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/ext/function.js#L162\">packages/ember-runtime/lib/ext/function.js:162</a> </div> <div class=\"description\"> <p>The <code>on</code> extension of Javascript's Function prototype is available when <code>EmberENV.EXTEND_PROTOTYPES</code> or <code>EmberENV.EXTEND_PROTOTYPES.Function</code> is true, which is the default.</p> <p>You can listen for events simply by adding the <code>on</code> call to the end of your method declarations in classes or mixins that you write. For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Mixin.create({\n  doSomethingWithElement: function() {\n    // Executes whenever the \"didInsertElement\" event fires\n  }.on('didInsertElement')\n});\n</pre> <p>See <code>Ember.on</code>.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_property\">property</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/ext/function.js#L15\">packages/ember-runtime/lib/ext/function.js:15</a> </div> <div class=\"description\"> <p>The <code>property</code> extension of Javascript's Function prototype is available when <code>EmberENV.EXTEND_PROTOTYPES</code> or <code>EmberENV.EXTEND_PROTOTYPES.Function</code> is <code>true</code>, which is the default.</p> <p>Computed properties allow you to treat a function like a property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyApp.President = Ember.Object.extend({\n  firstName: '',\n  lastName:  '',\n\n  fullName: function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n  }.property() // Call this flag to mark the function as a property\n});\n\nvar president = MyApp.President.create({\n  firstName: 'Barack',\n  lastName: 'Obama'\n});\n\npresident.get('fullName'); // 'Barack Obama'\n</pre> <p>Treating a function like a property is useful because they can work with bindings, just like any other property.</p> <p>Many computed properties have dependencies on other properties. For example, in the above example, the <code>fullName</code> property depends on <code>firstName</code> and <code>lastName</code> to determine its value. You can tell Ember about these dependencies like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyApp.President = Ember.Object.extend({\n  firstName: '',\n  lastName:  '',\n\n  fullName: function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Tell Ember.js that this computed property depends on firstName\n    // and lastName\n  }.property('firstName', 'lastName')\n});\n</pre> <p>Make sure you list these dependencies so Ember knows when to update bindings that connect to a computed property. Changing a dependency will not immediately trigger an update of the computed property, but will instead clear the cache so that it is updated when the next <code>get</code> is called on the property.</p> <p>See <a href=\"ember.computedproperty\">Ember.ComputedProperty</a>, <a href=\"ember.computed\">Ember.computed</a>.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Function.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Function.html</a>\n  </p>\n</div>\n","classes/libraries":"<h1 class=\"api-header\"> Libraries Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-metal/lib/libraries.js#L4\">packages/ember-metal/lib/libraries.js:4</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>Helper class that allows you to register your library with Ember.</p> <p>Singleton created at <code>Ember.libraries</code>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Libraries.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Libraries.html</a>\n  </p>\n</div>\n","classes/ember.linkcomponent":"<h1 class=\"api-header\"> Ember.LinkComponent Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.component\">Ember.Component</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L329\">packages/ember-htmlbars/lib/components/link-to.js:329</a></p> <p>Module: <a href=\"../modules/ember-templates\">ember-templates</a></p> </div> <div class=\"description\"> <p><code>Ember.LinkComponent</code> renders an element whose <code>click</code> event triggers a transition of the application's instance of <code>Ember.Router</code> to a supplied route by name.</p> <p><code>Ember.LinkComponent</code> components are invoked with {{#link-to}}. Properties of this class can be overridden with <code>reopen</code> to customize application-wide behavior.</p> </div> \n\n<div class=\"pane\" id=\"properties\">        <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_attributeBindings\">attributeBindings</h2>\n<span class=\"type\">Array | String</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L446\">packages/ember-htmlbars/lib/components/link-to.js:446</a> </div> <div class=\"description\"> <p>By default the <code>{{link-to}}</code> component will bind to the <code>href</code> and <code>title</code> attributes. It's discouraged that you override these defaults, however you can push onto the array if needed.</p> </div> <p> <strong>Default:</strong> <code>['title', 'rel', 'tabindex', 'target']</code> </p> </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_classNameBindings\">classNameBindings</h2>\n<span class=\"type\">Array</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ember.classnamessupport#method_classNameBindings\">Ember.ClassNamesSupport</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L458\">packages/ember-htmlbars/lib/components/link-to.js:458</a> </div> <div class=\"description\"> <p>By default the <code>{{link-to}}</code> component will bind to the <code>active</code>, <code>loading</code>, and <code>disabled</code> classes. It is discouraged to override these directly.</p> </div> <p> <strong>Default:</strong> <code>['active', 'loading', 'disabled', 'ember-transitioning-in', 'ember-transitioning-out']</code> </p> </div>     <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_currentWhen\">currentWhen</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ember.linkcomponent#method_currentWhen\">Ember.LinkComponent</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L356\">packages/ember-htmlbars/lib/components/link-to.js:356</a> </div> <div class=\"description\"> <p>Used to determine when this <code>LinkComponent</code> is active.</p> </div>  </div>                     <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_rel\">rel</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L373\">packages/ember-htmlbars/lib/components/link-to.js:373</a> </div> <div class=\"description\"> <p>Sets the <code>rel</code> attribute of the <code>LinkComponent</code>'s HTML element.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_replace\">replace</h2>\n<span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L435\">packages/ember-htmlbars/lib/components/link-to.js:435</a> </div> <div class=\"description\"> <p>Determines whether the <code>LinkComponent</code> will trigger routing via the <code>replaceWith</code> routing strategy.</p> </div> <p> <strong>Default:</strong> <code>false</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_tabindex\">tabindex</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L382\">packages/ember-htmlbars/lib/components/link-to.js:382</a> </div> <div class=\"description\"> <p>Sets the <code>tabindex</code> attribute of the <code>LinkComponent</code>'s HTML element.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_target\">target</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ember.viewtargetactionsupport#method_target\">Ember.ViewTargetActionSupport</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L391\">packages/ember-htmlbars/lib/components/link-to.js:391</a> <br>Available since 1.8.0 </div> <div class=\"description\"> <p>Sets the <code>target</code> attribute of the <code>LinkComponent</code>'s HTML element.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>    <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_title\">title</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L364\">packages/ember-htmlbars/lib/components/link-to.js:364</a> </div> <div class=\"description\"> <p>Sets the <code>title</code> attribute of the <code>LinkComponent</code>'s HTML element.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.LinkComponent.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.LinkComponent.html</a>\n  </p>\n</div>\n","classes/routingservice":"<h1 class=\"api-header\"> RoutingService Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/services/routing.js#L13\">packages/ember-routing/lib/services/routing.js:13</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"description\"> <p>The Routing service is used by LinkComponent, and provides facilities for the component/view layer to interact with the router.</p> <p>While still private, this service can eventually be opened up, and provides the set of API needed for components to control routing without interacting with router internals.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/RoutingService.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/RoutingService.html</a>\n  </p>\n</div>\n","data/modules/ember-data":"<h1 class=\"api-header\">ember-data Module</h1>  \n<p>Ember Data</p> <h2>Classes and Namespaces</h2> <ul> <li class=\"\"><a href=\"../classes/ds.buildurlmixin\">DS.BuildURLMixin</a></li> <li class=\"\"><a href=\"../classes/ds.model\">DS.Model</a></li> <li class=\"\"><a href=\"../classes/ds.errors\">DS.Errors</a></li> <li class=\"\"><a href=\"../classes/ds.rootstate\">DS.RootState</a></li> <li class=\"\"><a href=\"../classes/ds.adapterpopulatedrecordarray\">DS.AdapterPopulatedRecordArray</a></li> <li class=\"\"><a href=\"../classes/ds.filteredrecordarray\">DS.FilteredRecordArray</a></li> <li class=\"\"><a href=\"../classes/ds.recordarray\">DS.RecordArray</a></li> <li class=\"\"><a href=\"http://emberjs.com/api/data/classes/DS.html\">DS</a></li>  <li class=\"\"><a href=\"../classes/ds.manyarray\">DS.ManyArray</a></li> <li class=\"\"><a href=\"../classes/ds.promisearray\">DS.PromiseArray</a></li> <li class=\"\"><a href=\"../classes/ds.promiseobject\">DS.PromiseObject</a></li> <li class=\"\"><a href=\"../classes/ds.promisemanyarray\">DS.PromiseManyArray</a></li>    <li class=\"\"><a href=\"../classes/ds.store\">DS.Store</a></li> <li class=\"\"><a href=\"../classes/ds.booleantransform\">DS.BooleanTransform</a></li> <li class=\"\"><a href=\"../classes/ds.datetransform\">DS.DateTransform</a></li> <li class=\"\"><a href=\"../classes/ds.numbertransform\">DS.NumberTransform</a></li> <li class=\"\"><a href=\"../classes/ds.stringtransform\">DS.StringTransform</a></li> <li class=\"\"><a href=\"../classes/ds.adaptererror\">DS.AdapterError</a></li> <li class=\"\"><a href=\"../classes/ds.invaliderror\">DS.InvalidError</a></li> <li class=\"\"><a href=\"../classes/ds.timeouterror\">DS.TimeoutError</a></li> <li class=\"\"><a href=\"../classes/ds.aborterror\">DS.AbortError</a></li> <li class=\"\"><a href=\"../classes/ds.unauthorizederror\">DS.UnauthorizedError</a></li> <li class=\"\"><a href=\"../classes/ds.forbiddenerror\">DS.ForbiddenError</a></li> <li class=\"\"><a href=\"../classes/ds.notfounderror\">DS.NotFoundError</a></li> <li class=\"\"><a href=\"../classes/ds.conflicterror\">DS.ConflictError</a></li> <li class=\"\"><a href=\"../classes/ds.servererror\">DS.ServerError</a></li> <li class=\"\"><a href=\"../classes/ds.jsonapiadapter\">DS.JSONAPIAdapter</a></li> <li class=\"\"><a href=\"../classes/ds.restadapter\">DS.RESTAdapter</a></li> <li class=\"\"><a href=\"../classes/ds.embeddedrecordsmixin\">DS.EmbeddedRecordsMixin</a></li> <li class=\"\"><a href=\"../classes/ds.jsonapiserializer\">DS.JSONAPISerializer</a></li> <li class=\"\"><a href=\"../classes/ds.jsonserializer\">DS.JSONSerializer</a></li> <li class=\"\"><a href=\"../classes/ds.restserializer\">DS.RESTSerializer</a></li> <li class=\"\"><a href=\"../classes/ds.adapter\">DS.Adapter</a></li> <li class=\"\"><a href=\"../classes/ds.serializer\">DS.Serializer</a></li> <li class=\"\"><a href=\"../classes/ds.transform\">DS.Transform</a></li> <li class=\"\"><a href=\"../classes/ds.string\">DS.String</a></li> <li class=\"\"><a href=\"../classes/ds.ember.htmlbars.helpers\">DS.Ember.HTMLBars.helpers</a></li> <li class=\"\"><a href=\"../classes/ember.htmlbars.helpers\">Ember.HTMLBars.helpers</a></li> <li class=\"\"><a href=\"../classes/ember.inflector\">Ember.Inflector</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/modules/ember-data.html\" class=\"_attribution-link\">http://emberjs.com/api/data/modules/ember-data.html</a>\n  </p>\n</div>\n","classes/ember.viewtargetactionsupport":"<h1 class=\"api-header\"> Ember.ViewTargetActionSupport Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.targetactionsupport\">Ember.TargetActionSupport</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_target_action_support.js#L5\">packages/ember-views/lib/mixins/view_target_action_support.js:5</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p><code>Ember.ViewTargetActionSupport</code> is a mixin that can be included in a view class to add a <code>triggerAction</code> method with semantics similar to the Handlebars <code>{{action}}</code> helper. It provides intelligent defaults for the action's target: the view's controller; and the context that is sent with the action: the view's context.</p> <p>Note: In normal Ember usage, the <code>{{action}}</code> helper is usually the best choice. This mixin is most often useful when you are doing more complex event handling in custom View subclasses.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  action: 'save',\n  click: function() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n</pre> <p>The <code>action</code> can be provided as properties of an optional object argument to <code>triggerAction</code> as well.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  click: function() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n</pre> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method__\">$</h2>\n<span class=\"args\"> (selector) </span><span class=\"type\">JQuery</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L203\">packages/ember-views/lib/mixins/view_support.js:203</a> </div> <div class=\"description\"> <p>Returns a jQuery object for this view's element. If you pass in a selector string, this method will return a jQuery object, using the current element as its buffer.</p> <p>For example, calling <code>view.$('li')</code> will return a jQuery object containing all of the <code>li</code> elements inside the DOM element of this view.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>selector</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd> a jQuery-compatible selector string </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">JQuery</span> </dt>\n<dd> the jQuery object for the DOM node</dd> </dl> </div> </div>                 <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_readDOMAttr\">readDOMAttr</h2>\n<span class=\"args\"> (name) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L565\">packages/ember-views/lib/mixins/view_support.js:565</a> </div> <div class=\"description\"> <p>Normally, Ember's component model is \"write-only\". The component takes a bunch of attributes that it got passed in, and uses them to render its template.</p> <p>One nice thing about this model is that if you try to set a value to the same thing as last time, Ember (through HTMLBars) will avoid doing any work on the DOM.</p> <p>This is not just a performance optimization. If an attribute has not changed, it is important not to clobber the element's \"hidden state\". For example, if you set an input's <code>value</code> to the same value as before, it will clobber selection state and cursor position. In other words, setting an attribute is not <strong>always</strong> idempotent.</p> <p>This method provides a way to read an element's attribute and also update the last value Ember knows about at the same time. This makes setting an attribute idempotent.</p> <p>In particular, what this means is that if you get an <code>&lt;input&gt;</code> element's <code>value</code> attribute and then re-render the template with the same value, it will avoid clobbering the cursor and selection position.</p> <p>Since most attribute sets are idempotent in the browser, you typically can get away with reading attributes using jQuery, but the most reliable way to do so is through this method.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the attribute </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> String</dd> </dl> </div> </div>       <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_rerender\">rerender</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L169\">packages/ember-views/lib/mixins/view_support.js:169</a> </div> <div class=\"description\"> <p>Renders the view again. This will work regardless of whether the view is already in the DOM or not. If the view is in the DOM, the rendering process will be deferred to give bindings a chance to synchronize.</p> <p>If children were added during the rendering process using <code>appendChild</code>, <code>rerender</code> will remove them, because they will be added again if needed by the next <code>render</code>.</p> <p>In general, if the display of your view changes, you should modify the DOM element directly instead of manually calling <code>rerender</code>, which can be slow.</p> </div>  </div>  </div>\n<div class=\"pane\" id=\"events\">  <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_didInsertElement\">didInsertElement</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L469\">packages/ember-views/lib/mixins/view_support.js:469</a> </div> <div class=\"description\"> <p>Called when the element of the view has been inserted into the DOM or after the view was re-rendered. Override this function to do any set up that requires an element in the document body.</p> <p>When a view has children, didInsertElement will be called on the child view(s) first, bubbling upwards through the hierarchy.</p> </div>  </div>  <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_willClearRender\">willClearRender</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L482\">packages/ember-views/lib/mixins/view_support.js:482</a> </div> <div class=\"description\"> <p>Called when the view is about to rerender, but before anything has been torn down. This is a good opportunity to tear down any manual observers you have installed based on the DOM state</p> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_willDestroyElement\">willDestroyElement</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L515\">packages/ember-views/lib/mixins/view_support.js:515</a> </div> <div class=\"description\"> <p>Called when the element of the view is going to be destroyed. Override this function to do any teardown that requires an element, like removing event listeners.</p> <p>Please note: any property changes made during this event will have no effect on object observers.</p> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_willInsertElement\">willInsertElement</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L461\">packages/ember-views/lib/mixins/view_support.js:461</a> </div> <div class=\"description\"> <p>Called when a view is going to insert an element into the DOM.</p> </div>  </div> </div>\n<div class=\"pane\" id=\"properties\">       <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_element\">element</h2>\n<span class=\"type\">DOMElement</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L194\">packages/ember-views/lib/mixins/view_support.js:194</a> </div> <div class=\"description\"> <p>Returns the current DOM element for the view.</p> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_elementId\">elementId</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L394\">packages/ember-views/lib/mixins/view_support.js:394</a> </div> <div class=\"description\"> <p>The HTML <code>id</code> of the view's element in the DOM. You can provide this value yourself but it must be unique (just as in HTML):</p> <pre class=\"highlight handlebars \" data-language=\"\">  {{my-component elementId=\"a-really-cool-id\"}}\n</pre> <p>If not manually set a default value will be provided by the framework.</p> <p>Once rendered an element's <code>elementId</code> is considered immutable and you should never change it. If you need to compute a dynamic value for the <code>elementId</code>, you should do this when the component or element is being instantiated:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">  export default Ember.Component.extend({\n    setElementId: Ember.on('init', function() {\n      var index = this.get('index');\n      this.set('elementId', 'component-id' + index);\n    })\n  });\n</pre> </div>  </div>    <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_tagName\">tagName</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/mixins/view_support.js#L540\">packages/ember-views/lib/mixins/view_support.js:540</a> </div> <div class=\"description\"> <p>Tag name for the view's outer element. The tag name is only used when an element is first created. If you change the <code>tagName</code> for an element, you must destroy and recreate the view element.</p> <p>By default, the render buffer will use a <code>&lt;div&gt;</code> tag for views.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.ViewTargetActionSupport.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.ViewTargetActionSupport.html</a>\n  </p>\n</div>\n","classes/rsvp.eventtarget":"<h1 class=\"api-header\"> RSVP.EventTarget Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/events.js#L19\">bower_components/rsvp/lib/rsvp/events.js:19</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/RSVP.EventTarget.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/RSVP.EventTarget.html</a>\n  </p>\n</div>\n","classes/rsvp.promise":"<h1 class=\"api-header\"> RSVP.Promise Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/promise.js#L34\">bower_components/rsvp/lib/rsvp/promise.js:34</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>Promise objects represent the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its <code>then</code> method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled.</p> <h2 class=\"anchorable-toc\" id=\"toc_terminology\">Terminology</h2> <ul> <li>\n<code>promise</code> is an object or function with a <code>then</code> method whose behavior conforms to this specification.</li> <li>\n<code>thenable</code> is an object or function that defines a <code>then</code> method.</li> <li>\n<code>value</code> is any legal JavaScript value (including undefined, a thenable, or a promise).</li> <li>\n<code>exception</code> is a value that is thrown using the throw statement.</li> <li>\n<code>reason</code> is a value that indicates why a promise was rejected.</li> <li>\n<code>settled</code> the final resting state of a promise, fulfilled or rejected.</li> </ul> <p>A promise can be in one of three states: pending, fulfilled, or rejected.</p> <p>Promises that are fulfilled have a fulfillment value and are in the fulfilled state. Promises that are rejected have a rejection reason and are in the rejected state. A fulfillment value is never a thenable.</p> <p>Promises can also be said to <em>resolve</em> a value. If this value is also a promise, then the original promise's settled state will match the value's settled state. So a promise that <em>resolves</em> a promise that rejects will itself reject, and a promise that <em>resolves</em> a promise that fulfills will itself fulfill.</p> <h2 class=\"anchorable-toc\" id=\"toc_basic-usage\">Basic Usage:</h2>\n<pre class=\"highlight js \" data-language=\"js\">var promise = new Promise(function(resolve, reject) {\n  // on success\n  resolve(value);\n\n  // on failure\n  reject(reason);\n});\n\npromise.then(function(value) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_advanced-usage\">Advanced Usage:</h2> <p>Promises shine when abstracting away asynchronous interactions such as <code>XMLHttpRequest</code>s.</p> <pre class=\"highlight js \" data-language=\"js\">function getJSON(url) {\n  return new Promise(function(resolve, reject){\n    var xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n\n    function handler() {\n      if (this.readyState === this.DONE) {\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n        }\n      }\n    };\n  });\n}\n\ngetJSON('/posts.json').then(function(json) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n</pre> <p>Unlike callbacks, promises are great composable primitives.</p> <pre class=\"highlight js \" data-language=\"js\">Promise.all([\n  getJSON('/posts'),\n  getJSON('/comments')\n]).then(function(values){\n  values[0] // =&gt; postsJSON\n  values[1] // =&gt; commentsJSON\n\n  return values;\n});\n</pre> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_catch\">catch</h2>\n<span class=\"args\"> (onRejection, label) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/promise.js#L410\">bower_components/rsvp/lib/rsvp/promise.js:410</a> </div> <div class=\"description\"> <p><code>catch</code> is simply sugar for <code>then(undefined, onRejection)</code> which makes it the same as the catch block of a try/catch statement.</p> <pre class=\"highlight js \" data-language=\"js\">function findAuthor(){\n  throw new Error('couldn't find that author');\n}\n\n// synchronous\ntry {\n  findAuthor();\n} catch(reason) {\n  // something went wrong\n}\n\n// async with promises\nfindAuthor().catch(function(reason){\n  // something went wrong\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>onRejection</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for labeling the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_finally\">finally</h2>\n<span class=\"args\"> (callback, label) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/promise.js#L442\">bower_components/rsvp/lib/rsvp/promise.js:442</a> </div> <div class=\"description\"> <p><code>finally</code> will be invoked regardless of the promise's fate just as native try/catch/finally behaves</p> <p>Synchronous example:</p> <pre class=\"highlight js \" data-language=\"js\">findAuthor() {\n  if (Math.random() &gt; 0.5) {\n    throw new Error();\n  }\n  return new Author();\n}\n\ntry {\n  return findAuthor(); // succeed or fail\n} catch(error) {\n  return findOtherAuther();\n} finally {\n  // always runs\n  // doesn't affect the return value\n}\n</pre> <p>Asynchronous example:</p> <pre class=\"highlight js \" data-language=\"js\">findAuthor().catch(function(reason){\n  return findOtherAuther();\n}).finally(function(){\n  // author was either found, or not\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for labeling the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_then\">then</h2>\n<span class=\"args\"> (onFulfillment, onRejection, label) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/promise.js#L184\">bower_components/rsvp/lib/rsvp/promise.js:184</a> </div> <div class=\"description\"> <p>The primary way of interacting with a promise is through its <code>then</code> method, which registers callbacks to receive either a promise's eventual value or the reason why the promise cannot be fulfilled.</p> <pre class=\"highlight js \" data-language=\"js\">findUser().then(function(user){\n  // user is available\n}, function(reason){\n  // user is unavailable, and you are given the reason why\n});\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_chaining\">Chaining</h2> <p>The return value of <code>then</code> is itself a promise. This second, 'downstream' promise is resolved with the return value of the first promise's fulfillment or rejection handler, or rejected if the handler throws an exception.</p> <pre class=\"highlight js \" data-language=\"js\">findUser().then(function (user) {\n  return user.name;\n}, function (reason) {\n  return 'default name';\n}).then(function (userName) {\n  // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n  // will be `'default name'`\n});\n\nfindUser().then(function (user) {\n  throw new Error('Found user, but still unhappy');\n}, function (reason) {\n  throw new Error('`findUser` rejected and we're unhappy');\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n  // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n});\n</pre> <p>If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.</p> <pre class=\"highlight js \" data-language=\"js\">findUser().then(function (user) {\n  throw new PedagogicalException('Upstream error');\n}).then(function (value) {\n  // never reached\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // The `PedgagocialException` is propagated all the way down to here\n});\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_assimilation\">Assimilation</h2> <p>Sometimes the value you want to propagate to a downstream promise can only be retrieved asynchronously. This can be achieved by returning a promise in the fulfillment or rejection handler. The downstream promise will then be pending until the returned promise is settled. This is called <em>assimilation</em>.</p> <pre class=\"highlight js \" data-language=\"js\">findUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // The user's comments are now available\n});\n</pre> <p>If the assimliated promise rejects, then the downstream promise will also reject.</p> <pre class=\"highlight js \" data-language=\"js\">findUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // If `findCommentsByAuthor` fulfills, we'll have the value here\n}, function (reason) {\n  // If `findCommentsByAuthor` rejects, we'll have the reason here\n});\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_simple-example\">Simple Example</h2> <p>Synchronous Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var result;\n\ntry {\n  result = findResult();\n  // success\n} catch(reason) {\n  // failure\n}\n</pre> <p>Errback Example</p> <pre class=\"highlight js \" data-language=\"js\">findResult(function(result, err){\n  if (err) {\n    // failure\n  } else {\n    // success\n  }\n});\n</pre> <p>Promise Example;</p> <pre class=\"highlight javascript \" data-language=\"javascript\">findResult().then(function(result){\n  // success\n}, function(reason){\n  // failure\n});\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_advanced-example\">Advanced Example</h2> <p>Synchronous Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var author, books;\n\ntry {\n  author = findAuthor();\n  books  = findBooksByAuthor(author);\n  // success\n} catch(reason) {\n  // failure\n}\n</pre> <p>Errback Example</p> <pre class=\"highlight js \" data-language=\"js\">\nfunction foundBooks(books) {\n\n}\n\nfunction failure(reason) {\n\n}\n\nfindAuthor(function(author, err){\n  if (err) {\n    failure(err);\n    // failure\n  } else {\n    try {\n      findBoooksByAuthor(author, function(books, err) {\n        if (err) {\n          failure(err);\n        } else {\n          try {\n            foundBooks(books);\n          } catch(reason) {\n            failure(reason);\n          }\n        }\n      });\n    } catch(error) {\n      failure(err);\n    }\n    // success\n  }\n});\n</pre> <p>Promise Example;</p> <pre class=\"highlight javascript \" data-language=\"javascript\">findAuthor().\n  then(findBooksByAuthor).\n  then(function(books){\n    // found books\n}).catch(function(reason){\n  // something went wrong\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>onFulfillment</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>onRejection</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for labeling the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/RSVP.Promise.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/RSVP.Promise.html</a>\n  </p>\n</div>\n","classes/registryproxymixin":"<h1 class=\"api-header\"> RegistryProxyMixin Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L9\">packages/ember-runtime/lib/mixins/registry_proxy.js:9</a></p> <p>Module: <a href=\"../modules/ember-runtime\">ember-runtime</a></p> </div> <div class=\"description\"> <p>RegistryProxyMixin is used to provide public access to specific registry functionality.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_hasRegistration\">hasRegistration</h2>\n<span class=\"args\"> (fullName) </span><span class=\"type\">Boolean</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L110\">packages/ember-runtime/lib/mixins/registry_proxy.js:110</a> </div> <div class=\"description\"> <p>Check if a factory is registered.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_inject\">inject</h2>\n<span class=\"args\"> (factoryNameOrType, property, injectionName) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L203\">packages/ember-runtime/lib/mixins/registry_proxy.js:203</a> </div> <div class=\"description\"> <p>Define a dependency injection onto a specific factory or all factories of a type.</p> <p>When Ember instantiates a controller, view, or other framework component it can attach a dependency to that component. This is often used to provide services to a set of framework components.</p> <p>An example of providing a session object to all controllers:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create();\nvar Session = Ember.Object.extend({ isAuthenticated: false });\n\n// A factory must be registered before it can be injected\nApp.register('session:main', Session);\n\n// Inject 'session:main' onto all factories of the type 'controller'\n// with the name 'session'\nApp.inject('controller', 'session', 'session:main');\n\nApp.IndexController = Ember.Controller.extend({\n  isLoggedIn: Ember.computed.alias('session.isAuthenticated')\n});\n</pre> <p>Injections can also be performed on specific factories.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.inject(&lt;full_name or type&gt;, &lt;property name&gt;, &lt;full_name&gt;)\nApp.inject('route', 'source', 'source:main')\nApp.inject('route:application', 'email', 'model:email')\n</pre> <p>It is important to note that injections can only be performed on classes that are instantiated by Ember itself. Instantiating a class directly (via <code>create</code> or <code>new</code>) bypasses the dependency injection system.</p> <p><strong>Note:</strong> Ember-Data instantiates its models in a unique manner, and consequently injections onto models (or all models) will not work as expected. Injections on models can be enabled by setting <code>EmberENV.MODEL_FACTORY_INJECTIONS</code> to <code>true</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>factoryNameOrType</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>property</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>injectionName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_register\">register</h2>\n<span class=\"args\"> (fullName, factory, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L29\">packages/ember-runtime/lib/mixins/registry_proxy.js:29</a> </div> <div class=\"description\"> <p>Registers a factory that can be used for dependency injection (with <code>inject</code>) or for service lookup. Each factory is registered with a full name including two parts: <code>type:name</code>.</p> <p>A simple example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create();\n\nApp.Orange = Ember.Object.extend();\nApp.register('fruit:favorite', App.Orange);\n</pre> <p>Ember will resolve factories from the <code>App</code> namespace automatically. For example <code>App.CarsController</code> will be discovered and returned if an application requests <code>controller:cars</code>.</p> <p>An example of registering a controller with a non-standard name:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create();\nvar Session = Ember.Controller.extend();\n\nApp.register('controller:session', Session);\n\n// The Session controller can now be treated like a normal controller,\n// despite its non-standard name.\nApp.ApplicationController = Ember.Controller.extend({\n  needs: ['session']\n});\n</pre> <p>Registered factories are <strong>instantiated</strong> by having <code>create</code> called on them. Additionally they are <strong>singletons</strong>, each time they are looked up they return the same instance.</p> <p>Some examples modifying that default behavior:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create();\n\nApp.Person = Ember.Object.extend();\nApp.Orange = Ember.Object.extend();\nApp.Email = Ember.Object.extend();\nApp.session = Ember.Object.create();\n\nApp.register('model:user', App.Person, { singleton: false });\nApp.register('fruit:favorite', App.Orange);\nApp.register('communication:main', App.Email, { singleton: false });\nApp.register('session', App.session, { instantiate: false });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> type:name (e.g., 'model:user') </dd> <dt>\n<strong>factory</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> (e.g., App.Person) </dd> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt> <dd> (optional) disable instantiation or singleton usage </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerOption\">registerOption</h2>\n<span class=\"args\"> (fullName, optionName, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L120\">packages/ember-runtime/lib/mixins/registry_proxy.js:120</a> </div> <div class=\"description\"> <p>Register an option for a particular factory.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>optionName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerOptions\">registerOptions</h2>\n<span class=\"args\"> (fullName, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L142\">packages/ember-runtime/lib/mixins/registry_proxy.js:142</a> </div> <div class=\"description\"> <p>Register options for a particular factory.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerOptionsForType\">registerOptionsForType</h2>\n<span class=\"args\"> (type, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L162\">packages/ember-runtime/lib/mixins/registry_proxy.js:162</a> </div> <div class=\"description\"> <p>Allow registering options for all factories of a type.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create();\nvar appInstance = App.buildInstance();\n\n// if all of type `connection` must not be singletons\nappInstance.optionsForType('connection', { singleton: false });\n\nappInstance.register('connection:twitter', TwitterConnection);\nappInstance.register('connection:facebook', FacebookConnection);\n\nvar twitter = appInstance.lookup('connection:twitter');\nvar twitter2 = appInstance.lookup('connection:twitter');\n\ntwitter === twitter2; // =&gt; false\n\nvar facebook = appInstance.lookup('connection:facebook');\nvar facebook2 = appInstance.lookup('connection:facebook');\n\nfacebook === facebook2; // =&gt; false\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registeredOption\">registeredOption</h2>\n<span class=\"args\"> (fullName, optionName) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L131\">packages/ember-runtime/lib/mixins/registry_proxy.js:131</a> </div> <div class=\"description\"> <p>Return a specific registered option for a particular factory.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>optionName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> options</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registeredOptions\">registeredOptions</h2>\n<span class=\"args\"> (fullName) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L152\">packages/ember-runtime/lib/mixins/registry_proxy.js:152</a> </div> <div class=\"description\"> <p>Return registered options for a particular factory.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> options</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registeredOptionsForType\">registeredOptionsForType</h2>\n<span class=\"args\"> (type) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L193\">packages/ember-runtime/lib/mixins/registry_proxy.js:193</a> </div> <div class=\"description\"> <p>Return the registered options for all factories of a type.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> options</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_resolveRegistration\">resolveRegistration</h2>\n<span class=\"args\"> (fullName) </span><span class=\"type\"><a href=\"function\">Function</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L19\">packages/ember-runtime/lib/mixins/registry_proxy.js:19</a> </div> <div class=\"description\"> <p>Given a fullName return the corresponding factory.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"function\">Function</a></span> </dt>\n<dd> fullName's factory</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unregister\">unregister</h2>\n<span class=\"args\"> (fullName) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-runtime/lib/mixins/registry_proxy.js#L90\">packages/ember-runtime/lib/mixins/registry_proxy.js:90</a> </div> <div class=\"description\"> <p>Unregister a factory.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create();\nvar User = Ember.Object.extend();\nApp.register('model:user', User);\n\nApp.resolveRegistration('model:user').create() instanceof User //=&gt; true\n\nApp.unregister('model:user')\nApp.resolveRegistration('model:user') === undefined //=&gt; true\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>fullName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/RegistryProxyMixin.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/RegistryProxyMixin.html</a>\n  </p>\n</div>\n","classes/transition":"<h1 class=\"api-header\"> Transition Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L5\">bower_components/router.js/lib/router/transition.js:5</a></p> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"description\"> <p>A Transition is a thennable (a promise-like object) that represents an attempt to transition to another route. It can be aborted, either explicitly via <code>abort</code> or by attempting another transition while a previous one is still underway. An aborted transition can also be <code>retry()</code>d later.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_abort\">abort</h2>\n<span class=\"type\"><a href=\"transition\">Transition</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L184\">bower_components/router.js/lib/router/transition.js:184</a> </div> <div class=\"description\"> <p>Aborts the Transition. Note you can also implicitly abort a transition by initiating another transition while a previous one is underway.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"transition\">Transition</a></span> </dt>\n<dd> this transition</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_catch\">catch</h2>\n<span class=\"args\"> (onRejection, label) </span><span class=\"type\">Promise</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L150\">bower_components/router.js/lib/router/transition.js:150</a> </div> <div class=\"description\"> <p>Forwards to the internal <code>promise</code> property which you can use in situations where you want to pass around a thennable, but not the Transition itself.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>onRejection</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for labeling the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_finally\">finally</h2>\n<span class=\"args\"> (callback, label) </span><span class=\"type\">Promise</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L167\">bower_components/router.js/lib/router/transition.js:167</a> </div> <div class=\"description\"> <p>Forwards to the internal <code>promise</code> property which you can use in situations where you want to pass around a thennable, but not the Transition itself.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for labeling the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_followRedirects\">followRedirects</h2>\n<span class=\"type\">Promise</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L267\">bower_components/router.js/lib/router/transition.js:267</a> </div> <div class=\"description\"> <p>Transitions are aborted and their promises rejected when redirects occur; this method returns a promise that will follow any redirects that occur and fulfill with the value fulfilled by any redirecting transitions that occur.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> a promise that fulfills with the same value that the final redirecting transition fulfills with</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_method\">method</h2>\n<span class=\"args\"> (method) </span><span class=\"type\"><a href=\"transition\">Transition</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L218\">bower_components/router.js/lib/router/transition.js:218</a> </div> <div class=\"description\"> <p>Sets the URL-changing method to be employed at the end of a successful transition. By default, a new Transition will just use <code>updateURL</code>, but passing 'replace' to this method will cause the URL to update using 'replaceWith' instead. Omitting a parameter will disable the URL change, allowing for transitions that don't update the URL at completion (this is also used for handleURL, since the URL has already changed before the transition took place).</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>method</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the type of URL-changing method to use at the end of a transition. Accepted values are 'replace', falsy values, or any other non-falsy value (which is interpreted as an updateURL transition). </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"transition\">Transition</a></span> </dt>\n<dd> this transition</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_retry\">retry</h2>\n<span class=\"type\"><a href=\"transition\">Transition</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L202\">bower_components/router.js/lib/router/transition.js:202</a> </div> <div class=\"description\"> <p>Retries a previously-aborted transition (making sure to abort the transition if it's still active). Returns a new transition that represents the new attempt to transition.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"transition\">Transition</a></span> </dt>\n<dd> new transition</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_then\">then</h2>\n<span class=\"args\"> (onFulfilled, onRejected, label) </span><span class=\"type\">Promise</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L130\">bower_components/router.js/lib/router/transition.js:130</a> </div> <div class=\"description\"> <p>A standard promise hook that resolves if the transition succeeds and rejects if it fails/redirects/aborts.</p> <p>Forwards to the internal <code>promise</code> property which you can use in situations where you want to pass around a thennable, but not the Transition itself.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>onFulfilled</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>onRejected</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for labeling the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_trigger\">trigger</h2>\n<span class=\"args\"> (ignoreFailure, name) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L243\">bower_components/router.js/lib/router/transition.js:243</a> </div> <div class=\"description\"> <p>Fires an event on the current list of resolved/resolving handlers within this transition. Useful for firing events on route hierarchies that haven't fully been entered yet. Note: This method is also aliased as <code>send</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>ignoreFailure</strong> <span class=\"type\">[Boolean]</span>\n</dt> <dd> a boolean specifying whether unhandled events throw an error </dd> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the event to fire </dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_data\">data</h2>\n<span class=\"type\">{Object}</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L117\">bower_components/router.js/lib/router/transition.js:117</a> </div> <div class=\"description\"> <p>Custom state can be stored on a Transition's <code>data</code> object. This can be useful for decorating a Transition within an earlier hook and shared with a later hook. Properties set on <code>data</code> will be copied to new transitions generated by calling <code>retry</code> on this transition.</p> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_promise\">promise</h2>\n<span class=\"type\">{Object}</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/router.js/lib/router/transition.js#L103\">bower_components/router.js/lib/router/transition.js:103</a> </div> <div class=\"description\"> <p>The Transition's internal promise. Calling <code>.then</code> on this property is that same as calling <code>.then</code> on the Transition object itself, but this property is exposed for when you want to pass around a Transition's promise, but not the Transition object itself, since Transition object can be externally <code>abort</code>ed, while the promise cannot.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Transition.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Transition.html</a>\n  </p>\n</div>\n","data/classes/ds.transform":"<h1 class=\"api-header\"> DS.Transform Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/transform.js#L3\">addon/transform.js:3</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The <code>DS.Transform</code> class is used to serialize and deserialize model attributes when they are saved or loaded from an adapter. Subclassing <code>DS.Transform</code> is useful for creating custom attributes. All subclasses of <code>DS.Transform</code> must implement a <code>serialize</code> and a <code>deserialize</code> method.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\n// Converts centigrade in the JSON to fahrenheit in the app\nexport default DS.Transform.extend({\n  deserialize: function(serialized) {\n    return (serialized *  1.8) + 32;\n  },\n  serialize: function(deserialized) {\n    return (deserialized - 32) / 1.8;\n  }\n});\n</pre> <p>Usage</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  name: DS.attr('string'),\n  temperature: DS.attr('temperature')\n});\n</pre> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_deserialize\">deserialize</h2>\n<span class=\"args\"> (serialized, options) </span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/transform.js#L60\">addon/transform.js:60</a> </div> <div class=\"description\"> <p>When given a serialize value from a JSON object this method must return the deserialized value for the record attribute.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">deserialize: function(serialized, options) {\n  return empty(serialized) ? null : Number(serialized);\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>serialized</strong> \n</dt> <dd> The serialized value </dd> <dt>\n<strong>options</strong> \n</dt> <dd> hash of options passed to `DS.attr` </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> The deserialized value</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (deserialized, options) </span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/transform.js#L41\">addon/transform.js:41</a> </div> <div class=\"description\"> <p>When given a deserialized value from a record attribute this method must return the serialized value.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">serialize: function(deserialized, options) {\n  return Ember.isEmpty(deserialized) ? null : Number(deserialized);\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>deserialized</strong> \n</dt> <dd> The deserialized value </dd> <dt>\n<strong>options</strong> \n</dt> <dd> hash of options passed to `DS.attr` </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> The serialized value</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.Transform.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.Transform.html</a>\n  </p>\n</div>\n","classes/ember.templates.helpers":"<h1 class=\"api-header\"> Ember.Templates.helpers Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember-templates\">ember-templates</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_action\">action</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/action.js#L9\">packages/ember-htmlbars/lib/keywords/action.js:9</a> </div> <div class=\"description\"> <p>The <code>{{action}}</code> helper provides a way to pass triggers for behavior (usually just a function) between components, and into components from controllers.</p> <h3 class=\"anchorable-toc\" id=\"toc_passing-functions-with-the-action-helper\">Passing functions with the action helper</h3> <p>There are three contexts an action helper can be used in. The first two contexts to discuss are attribute context, and Handlebars value context.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! An example of attribute context }}\n&lt;div onclick={{action \"save\"}}&gt;&lt;/div&gt;\n{{! Examples of Handlebars value context }}\n{{input on-input=(action \"save\")}}\n{{yield (action \"refreshData\") andAnotherParam}}\n</pre> <p>In these contexts, the helper is called a \"closure action\" helper. Its behavior is simple: If passed a function name, read that function off the <code>actions</code> property of the current context. Once that function is read (or if a function was passed), create a closure over that function and any arguments.</p> <p>The resulting value of an action helper used this way is simply a function. For example, in the attribute context:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! An example of attribute context }}\n&lt;div onclick={{action \"save\"}}&gt;&lt;/div&gt;\n</pre> <p>The resulting template render logic would be:</p> <pre class=\"highlight js \" data-language=\"js\">var div = document.createElement('div');\nvar actionFunction = (function(context){\n  return function() {\n    return context.actions.save.apply(context, arguments);\n  };\n})(context);\ndiv.onclick = actionFunction;\n</pre> <p>Thus when the div is clicked, the action on that context is called. Because the <code>actionFunction</code> is just a function, closure actions can be passed between components and still execute in the correct context.</p> <p>Here is an example action handler on a component:</p> <pre class=\"highlight js \" data-language=\"js\">export default Ember.Component.extend({\n  actions: {\n    save() {\n      this.get('model').save();\n    }\n  }\n});\n</pre> <p>Actions are always looked up on the <code>actions</code> property of the current context. This avoids collisions in the naming of common actions, such as <code>destroy</code>.</p> <p>Two options can be passed to the <code>action</code> helper when it is used in this way.</p> <ul> <li>\n<code>target=someProperty</code> will look to <code>someProperty</code> instead of the current context for the <code>actions</code> hash. This can be useful when targetting a service for actions.</li> <li>\n<code>value=\"target.value\"</code> will read the path <code>target.value</code> off the first argument to the action when it is called and rewrite the first argument to be that value. This is useful when attaching actions to event listeners.</li> </ul> <h3 class=\"anchorable-toc\" id=\"toc_invoking-an-action\">Invoking an action</h3> <p>Closure actions curry both their scope and any arguments. When invoked, any additional arguments are added to the already curried list.</p> <p>Actions should be invoked using the <a href=\"ember.component#method_sendAction\">sendAction</a> method. The first argument to <code>sendAction</code> is the action to be called, and additional arguments are passed to the action function. This has interesting properties combined with currying of arguments. For example:</p> <pre class=\"highlight js \" data-language=\"js\">export default Ember.Component.extend({\n  actions: {\n    // Usage {{input on-input=(action (action 'setName' model) value=\"target.value\")}}\n    setName(model, name) {\n      model.set('name', name);\n    }\n  }\n});\n</pre> <p>The first argument (<code>model</code>) was curried over, and the run-time argument (<code>event</code>) becomes a second argument. Action calls can be nested this way because each simply returns a function. Any function can be passed to the <code>{{action}}</code> helper, including other actions.</p> <p>Actions invoked with <code>sendAction</code> have the same currying behavior as demonstrated with <code>on-input</code> above. For example:</p> <pre class=\"highlight js \" data-language=\"js\">export default Ember.Component.extend({\n  actions: {\n    setName(model, name) {\n      model.set('name', name);\n    }\n  }\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{my-input submit=(action 'setName' model)}}\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">// app/components/my-component.js\nexport default Ember.Component.extend({\n  click() {\n    // Note that model is not passed, it was curried in the template\n    this.sendAction('submit', 'bob');\n  }\n});\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_attaching-actions-to-dom-elements\">Attaching actions to DOM elements</h3> <p>The third context of the <code>{{action}}</code> helper can be called \"element space\". For example:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! An example of element space }}\n&lt;div {{action \"save\"}}&gt;&lt;/div&gt;\n</pre> <p>Used this way, the <code>{{action}}</code> helper provides a useful shortcut for registering an HTML element in a template for a single DOM event and forwarding that interaction to the template's context (controller or component).</p> <p>If the context of a template is a controller, actions used this way will bubble to routes when the controller does not implement the specified action. Once an action hits a route, it will bubble through the route hierarchy.</p> <h3 class=\"anchorable-toc\" id=\"toc_event-propagation\">Event Propagation</h3> <p><code>{{action}}</code> helpers called in element space can control event bubbling. Note that the closure style actions cannot.</p> <p>Events triggered through the action helper will automatically have <code>.preventDefault()</code> called on them. You do not need to do so in your event handlers. If you need to allow event propagation (to handle file inputs for example) you can supply the <code>preventDefault=false</code> option to the <code>{{action}}</code> helper:</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;div {{action \"sayHello\" preventDefault=false}}&gt;\n  &lt;input type=\"file\" /&gt;\n  &lt;input type=\"checkbox\" /&gt;\n&lt;/div&gt;\n</pre> <p>To disable bubbling, pass <code>bubbles=false</code> to the helper:</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;button {{action 'edit' post bubbles=false}}&gt;Edit&lt;/button&gt;\n</pre> <p>To disable bubbling with closure style actions you must create your own wrapper helper that makes use of <code>event.stopPropagation()</code>:</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;div onclick={{disable-bubbling (action \"sayHello\")}}&gt;Hello&lt;/div&gt;\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">// app/helpers/disable-bubbling.js\nimport Ember from 'ember';\n\nexport function disableBubbling([action]) {\n  return function(event) {\n    event.stopPropagation();\n\n    return action(event);\n  };\n}\n\nexport default Ember.Helper.helper(disableBubbling);\n</pre> <p>If you need the default handler to trigger you should either register your own event handler, or use event methods on your view class. See <a href=\"ember.view#toc_responding-to-browser-events\">\"Responding to Browser Events\"</a> in the documentation for Ember.View for more information.</p> <h3 class=\"anchorable-toc\" id=\"toc_specifying-dom-event-type\">Specifying DOM event type</h3> <p><code>{{action}}</code> helpers called in element space can specify an event type.</p> <p>By default the <code>{{action}}</code> helper registers for DOM <code>click</code> events. You can supply an <code>on</code> option to the helper to specify a different DOM event name:</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;div {{action \"anActionName\" on=\"doubleClick\"}}&gt;\n  click me\n&lt;/div&gt;\n</pre> <p>See <a href=\"ember.view#toc_event-names\">\"Event Names\"</a> for a list of acceptable DOM event names.</p> <h3 class=\"anchorable-toc\" id=\"toc_specifying-whitelisted-modifier-keys\">Specifying whitelisted modifier keys</h3> <p><code>{{action}}</code> helpers called in element space can specify modifier keys.</p> <p>By default the <code>{{action}}</code> helper will ignore click events with pressed modifier keys. You can supply an <code>allowedKeys</code> option to specify which keys should not be ignored.</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;div {{action \"anActionName\" allowedKeys=\"alt\"}}&gt;\n  click me\n&lt;/div&gt;\n</pre> <p>This way the action will fire when clicking with the alt key pressed down.</p> <p>Alternatively, supply \"any\" to the <code>allowedKeys</code> option to accept any combination of modifier keys.</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;div {{action \"anActionName\" allowedKeys=\"any\"}}&gt;\n  click me with any key pressed\n&lt;/div&gt;\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_specifying-a-target\">Specifying a Target</h3> <p>A <code>target</code> option can be provided to the helper to change which object will receive the method call. This option must be a path to an object, accessible in the current context:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! app/templates/application.hbs }}\n&lt;div {{action \"anActionName\" target=someService}}&gt;\n  click me\n&lt;/div&gt;\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">// app/controllers/application.js\nexport default Ember.Controller.extend({\n  someService: Ember.inject.service()\n});\n</pre> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_component\">component</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/component.js#L11\">packages/ember-htmlbars/lib/keywords/component.js:11</a> <br>Available since 1.11.0 </div> <div class=\"description\"> <p>The <code>{{component}}</code> helper lets you add instances of <code>Ember.Component</code> to a template. See <a href=\"ember.component\">Ember.Component</a> for additional information on how a <code>Component</code> functions. <code>{{component}}</code>'s primary use is for cases where you want to dynamically change which type of component is rendered as the state of your application changes. The provided block will be applied as the template for the component. Given an empty <code>&lt;body&gt;</code> the following template:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! application.hbs }}\n{{component infographicComponentName}}\n</pre> <p>And the following application code:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">export default Ember.Controller.extend({\n  infographicComponentName: computed('isMarketOpen', {\n    get() {\n      if (this.get('isMarketOpen')) {\n        return 'live-updating-chart';\n      } else {\n        return 'market-close-summary';\n      }\n    }\n  })\n});\n</pre> <p>The <code>live-updating-chart</code> component will be appended when <code>isMarketOpen</code> is <code>true</code>, and the <code>market-close-summary</code> component will be appended when <code>isMarketOpen</code> is <code>false</code>. If the value changes while the app is running, the component will be automatically swapped out accordingly. Note: You should not use this helper when you are consistently rendering the same component. In that case, use standard component syntax, for example:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! application.hbs }}\n{{live-updating-chart}}\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_nested-usage\">Nested Usage</h2> <p>The <code>component</code> helper can be used to package a component path with initial attrs. The included attrs can then be merged during the final invocation.</p> <p>For example, given a <code>person-form</code> component with the following template:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{yield (hash\n    nameInput=(component \"my-input-component\" value=model.name placeholder=\"First Name\"))}}\n</pre> <p>The following snippet:</p> <pre class=\"highlight text \" data-language=\"\">{{#person-form as |form|}}\n  {{component form.nameInput placeholder=\"Username\"}}\n{{/person-form}}\n</pre> <p>would output an input whose value is already bound to <code>model.name</code> and <code>placeholder</code> is \"Username\".</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_concat\">concat</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/concat.js#L6\">packages/ember-htmlbars/lib/helpers/concat.js:6</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Concatenates input params together. Example: <code>handlebars\n{{some-component name=(concat firstName \" \" lastName)}}\n{{! would pass name=\"&lt;first name value&gt; &lt;last name value&gt;\" to the component}}\n</code></p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_debugger\">debugger</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/debugger.js#L10\">packages/ember-htmlbars/lib/keywords/debugger.js:10</a> </div> <div class=\"description\"> <p>Execute the <code>debugger</code> statement in the current template's context.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{debugger}}\n</pre> <p>When using the debugger helper you will have access to a <code>get</code> function. This function retrieves values available in the context of the template. For example, if you're wondering why a value <code>{{foo}}</code> isn't rendering as expected within a template, you could place a <code>{{debugger}}</code> statement and, when the <code>debugger;</code> breakpoint is hit, you can attempt to retrieve this value:</p> <pre class=\"highlight text \" data-language=\"\">&gt; get('foo')\n</pre> <p><code>get</code> is also aware of keywords. So in this situation</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#each items as |item|}}\n  {{debugger}}\n{{/each}}\n</pre> <p>You'll be able to get values from the current item:</p> <pre class=\"highlight text \" data-language=\"\">&gt; get('item.name')\n</pre> <p>You can also access the context of the view to make sure it is the object that you expect:</p> <pre class=\"highlight text \" data-language=\"\">&gt; context\n</pre> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_each\">each</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/each.js#L9\">packages/ember-htmlbars/lib/helpers/each.js:9</a> </div> <div class=\"description\"> <p>The <code>{{#each}}</code> helper loops over elements in a collection. It is an extension of the base Handlebars <code>{{#each}}</code> helper.</p> <p>The default behavior of <code>{{#each}}</code> is to yield its inner block once for every item in an array passing the item as the first block parameter.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{#each developers key=\"name\" as |person|}}\n  {{person.name}}\n  {{! `this` is whatever it was outside the #each }}\n{{/each}}\n</pre> <p>The same rules apply to arrays of primitives.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var developerNames = ['Yehuda', 'Tom', 'Paul']\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{#each developerNames key=\"@index\" as |name|}}\n  {{name}}\n{{/each}}\n</pre> <p>During iteration, the index of each item in the array is provided as a second block parameter.</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;ul&gt;\n  {{#each people as |person index|}}\n    &lt;li&gt;Hello, {{person.name}}! You're number {{index}} in line&lt;/li&gt;\n  {{/each}}\n&lt;/ul&gt;\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_specifying-keys\">Specifying Keys</h3> <p>The <code>key</code> option is used to tell Ember how to determine if the array being iterated over with <code>{{#each}}</code> has changed between renders. By helping Ember detect that some elements in the array are the same, DOM elements can be re-used, significantly improving rendering speed.</p> <p>For example, here's the <code>{{#each}}</code> helper with its <code>key</code> set to <code>id</code>:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#each model key=\"id\" as |item|}}\n{{/each}}\n</pre> <p>When this <code>{{#each}}</code> re-renders, Ember will match up the previously rendered items (and reorder the generated DOM elements) based on each item's <code>id</code> property.</p> <p>By default the item's own reference is used.</p> <h3 class=\"anchorable-toc\" id=\"toc_else-condition\">{{else}} condition</h3> <p><code>{{#each}}</code> can have a matching <code>{{else}}</code>. The contents of this block will render if the collection is empty.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#each developers as |person|}}\n  {{person.name}}\n{{else}}\n  &lt;p&gt;Sorry, nobody is available for this task.&lt;/p&gt;\n{{/each}}\n</pre> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_each-in\">each-in</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/each-in.js#L8\">packages/ember-htmlbars/lib/helpers/each-in.js:8</a> <br>Available since 2.1.0 </div> <div class=\"description\"> <p>The <code>{{each-in}}</code> helper loops over properties on an object. It is unbound, in that new (or removed) properties added to the target object will not be rendered.</p> <p>For example, given a <code>user</code> object that looks like:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">{\n  \"name\": \"Shelly Sails\",\n  \"age\": 42\n}\n</pre> <p>This template would display all properties on the <code>user</code> object in a list:</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;ul&gt;\n{{#each-in user as |key value|}}\n  &lt;li&gt;{{key}}: {{value}}&lt;/li&gt;\n{{/each-in}}\n&lt;/ul&gt;\n</pre> <p>Outputting their name and age.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_get\">get</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/get.js#L105\">packages/ember-htmlbars/lib/keywords/get.js:105</a> <br>Available since 2.1.0 </div> <div class=\"description\"> <p>Dynamically look up a property on an object. The second argument to <code>{{get}}</code> should have a string value, although it can be bound.</p> <p>For example, these two usages are equivilent:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{person.height}}\n{{get person \"height\"}}\n</pre> <p>If there were several facts about a person, the <code>{{get}}</code> helper can dynamically pick one:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{get person factName}}\n</pre> <p>For a more complex example, this template would allow the user to switch between showing the user's height and weight with a click:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{get person factName}}\n&lt;button {{action (mut factName) \"height\"}}&gt;Show height&lt;/button&gt;\n&lt;button {{action (mut factName) \"weight\"}}&gt;Show weight&lt;/button&gt;\n</pre> <p>The <code>{{get}}</code> helper can also respect mutable values itself. For example:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{input value=(mut (get person factName)) type=\"text\"}}\n&lt;button {{action (mut factName) \"height\"}}&gt;Show height&lt;/button&gt;\n&lt;button {{action (mut factName) \"weight\"}}&gt;Show weight&lt;/button&gt;\n</pre> <p>Would allow the user to swap what fact is being displayed, and also edit that fact via a two-way mutable binding.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_hash\">hash</h2>\n<span class=\"args\"> (options) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/hash.js#L6\">packages/ember-htmlbars/lib/helpers/hash.js:6</a> </div> <div class=\"description\"> <p>Use the <code>{{hash}}</code> helper to create a hash to pass as an option to your components. This is specially useful for contextual components where you can just yield a hash: <code>handlebars\n{{yield (hash\n   name='Sarah'\n   title=office\n)}}\n</code> Would result in an object such as: <code>js\n{ name: 'Sarah', title: this.get('office') }\n</code> Where the <code>title</code> is bound to updates of the <code>office</code> property.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> Hash</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_if\">if</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/if_unless.js#L9\">packages/ember-htmlbars/lib/helpers/if_unless.js:9</a> </div> <div class=\"description\"> <p>Use the <code>if</code> block helper to conditionally render a block depending on a property. If the property is \"falsey\", for example: <code>false</code>, <code>undefined</code>, <code>null</code>, <code>\"\"</code>, <code>0</code>, <code>NaN</code> or an empty array, the block will not be rendered.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! will not render if foo is falsey}}\n{{#if foo}}\n  Welcome to the {{foo.bar}}\n{{/if}}\n</pre> <p>You can also specify a template to show if the property is falsey by using the <code>else</code> helper.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! is it raining outside?}}\n{{#if isRaining}}\n  Yes, grab an umbrella!\n{{else}}\n  No, it's lovely outside!\n{{/if}}\n</pre> <p>You are also able to combine <code>else</code> and <code>if</code> helpers to create more complex conditional logic.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#if isMorning}}\n  Good morning\n{{else if isAfternoon}}\n  Good afternoon\n{{else}}\n  Good night\n{{/if}}\n</pre> <p>You can use <code>if</code> inline to conditionally render a single property or string. This helper acts like a ternary operator. If the first property is truthy, the second argument will be displayed, if not, the third argument will be displayed</p> <pre class=\"highlight handlebars \" data-language=\"\">{{if useLongGreeting \"Hello\" \"Hi\"}} Dave\n</pre> <p>Finally, you can use the <code>if</code> helper inside another helper as a subexpression.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{some-component height=(if isBig \"100\" \"10\")}}\n</pre> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_input\">input</h2>\n<span class=\"args\"> (options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/input.js#L8\">packages/ember-htmlbars/lib/keywords/input.js:8</a> </div> <div class=\"description\"> <p>The <code>{{input}}</code> helper lets you create an HTML <code>&lt;input /&gt;</code> component. It causes an <code>Ember.TextField</code> component to be rendered. For more info, see the <a href=\"ember.textfield\">Ember.TextField</a> docs and the <a href=\"http://emberjs.com/guides/templates/input-helpers/\">templates guide</a>.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{input value=\"987\"}}\n</pre> <p>renders as:</p> <pre class=\"highlight HTML \" data-language=\"\">&lt;input type=\"text\" value=\"987\" /&gt;\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_text-field\">Text field</h3> <p>If no <code>type</code> option is specified, a default of type 'text' is used.</p> <p>Many of the standard HTML attributes may be passed to this helper.</p> <table> <tr>\n<td>`readonly`</td>\n<td>`required`</td>\n<td>`autofocus`</td>\n</tr> <tr>\n<td>`value`</td>\n<td>`placeholder`</td>\n<td>`disabled`</td>\n</tr> <tr>\n<td>`size`</td>\n<td>`tabindex`</td>\n<td>`maxlength`</td>\n</tr> <tr>\n<td>`name`</td>\n<td>`min`</td>\n<td>`max`</td>\n</tr> <tr>\n<td>`pattern`</td>\n<td>`accept`</td>\n<td>`autocomplete`</td>\n</tr> <tr>\n<td>`autosave`</td>\n<td>`formaction`</td>\n<td>`formenctype`</td>\n</tr> <tr>\n<td>`formmethod`</td>\n<td>`formnovalidate`</td>\n<td>`formtarget`</td>\n</tr> <tr>\n<td>`height`</td>\n<td>`inputmode`</td>\n<td>`multiple`</td>\n</tr> <tr>\n<td>`step`</td>\n<td>`width`</td>\n<td>`form`</td>\n</tr> <tr>\n<td>`selectionDirection`</td>\n<td>`spellcheck`</td>\n<td> </td>\n</tr> </table> <p>When set to a quoted string, these values will be directly applied to the HTML element. When left unquoted, these values will be bound to a property on the template's current rendering context (most typically a controller instance).</p> <p>A very common use of this helper is to bind the <code>value</code> of an input to an Object's attribute:</p> <pre class=\"highlight handlebars \" data-language=\"\">Search:\n{{input value=searchWord}}\n</pre> <p>In this example, the inital value in the <code>&lt;input /&gt;</code> will be set to the value of <code>searchWord</code>. If the user changes the text, the value of <code>searchWord</code> will also be updated.</p> <h3 class=\"anchorable-toc\" id=\"toc_actions\">Actions</h3> <p>The helper can send multiple actions based on user events. The action property defines the action which is sent when the user presses the return key.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{input action=\"submit\"}}\n</pre> <p>The helper allows some user events to send actions.</p> <ul> <li><code>enter</code></li> <li><code>insert-newline</code></li> <li><code>escape-press</code></li> <li><code>focus-in</code></li> <li><code>focus-out</code></li> <li><code>key-press</code></li> <li><code>key-up</code></li> </ul> <p>For example, if you desire an action to be sent when the input is blurred, you only need to setup the action name to the event name property.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{input focus-out=\"alertMessage\"}}\n</pre> <p>See more about <a href=\"ember.textfield\">Text Support Actions</a></p> <h3 class=\"anchorable-toc\" id=\"toc_extending-code-ember-textfield-code\">Extending <code>Ember.TextField</code>\n</h3> <p>Internally, <code>{{input type=\"text\"}}</code> creates an instance of <code>Ember.TextField</code>, passing arguments from the helper to <code>Ember.TextField</code>'s <code>create</code> method. You can extend the capabilities of text inputs in your applications by reopening this class. For example, if you are building a Bootstrap project where <code>data-*</code> attributes are used, you can add one to the <code>TextField</code>'s <code>attributeBindings</code> property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.TextField.reopen({\n  attributeBindings: ['data-error']\n});\n</pre> <p>Keep in mind when writing <code>Ember.TextField</code> subclasses that <code>Ember.TextField</code> itself extends <code>Ember.Component</code>. Expect isolated component semantics, not legacy 1.x view semantics (like <code>controller</code> being present).</p> <p>See more about <a href=\"ember.component\">Ember components</a></p> <h3 class=\"anchorable-toc\" id=\"toc_checkbox\">Checkbox</h3> <p>Checkboxes are special forms of the <code>{{input}}</code> helper. To create a <code>&lt;checkbox /&gt;</code>:</p> <pre class=\"highlight handlebars \" data-language=\"\">Emberize Everything:\n{{input type=\"checkbox\" name=\"isEmberized\" checked=isEmberized}}\n</pre> <p>This will bind checked state of this checkbox to the value of <code>isEmberized</code> -- if either one changes, it will be reflected in the other.</p> <p>The following HTML attributes can be set via the helper:</p> <ul> <li><code>checked</code></li> <li><code>disabled</code></li> <li><code>tabindex</code></li> <li><code>indeterminate</code></li> <li><code>name</code></li> <li><code>autofocus</code></li> <li><code>form</code></li> </ul> <h3 class=\"anchorable-toc\" id=\"toc_extending-code-ember-checkbox-code\">Extending <code>Ember.Checkbox</code>\n</h3> <p>Internally, <code>{{input type=\"checkbox\"}}</code> creates an instance of <code>Ember.Checkbox</code>, passing arguments from the helper to <code>Ember.Checkbox</code>'s <code>create</code> method. You can extend the capablilties of checkbox inputs in your applications by reopening this class. For example, if you wanted to add a css class to all checkboxes in your application:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.Checkbox.reopen({\n  classNames: ['my-app-checkbox']\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Hash</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_link-to\">link-to</h2>\n<span class=\"args\"> (routeName, context, options) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/link-to.js#L6\">packages/ember-htmlbars/lib/components/link-to.js:6</a> </div> <div class=\"description\"> <p>The <code>{{link-to}}</code> component renders a link to the supplied <code>routeName</code> passing an optionally supplied model to the route as its <code>model</code> context of the route. The block for <code>{{link-to}}</code> becomes the innerHTML of the rendered element:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery'}}\n  Great Hamster Photos\n{{/link-to}}\n</pre> <p>You can also use an inline form of <code>{{link-to}}</code> component by passing the link text as the first argument to the component:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{link-to 'Great Hamster Photos' 'photoGallery'}}\n</pre> <p>Both will result in:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;a href=\"/hamster-photos\"&gt;\n  Great Hamster Photos\n&lt;/a&gt;\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_supplying-a-tagname\">Supplying a tagName</h3> <p>By default <code>{{link-to}}</code> renders an <code>&lt;a&gt;</code> element. This can be overridden for a single use of <code>{{link-to}}</code> by supplying a <code>tagName</code> option:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery' tagName=\"li\"}}\n  Great Hamster Photos\n{{/link-to}}\n</pre>\n<pre class=\"highlight html \" data-language=\"html\">&lt;li&gt;\n  Great Hamster Photos\n&lt;/li&gt;\n</pre> <p>To override this option for your entire application, see \"Overriding Application-wide Defaults\".</p> <h3 class=\"anchorable-toc\" id=\"toc_disabling-the-code-link-to-code-component\">Disabling the <code>link-to</code> component</h3> <p>By default <code>{{link-to}}</code> is enabled. any passed value to the <code>disabled</code> component property will disable the <code>link-to</code> component.</p> <p>static use: the <code>disabled</code> option:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery' disabled=true}}\n  Great Hamster Photos\n{{/link-to}}\n</pre> <p>dynamic use: the <code>disabledWhen</code> option:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery' disabledWhen=controller.someProperty}}\n  Great Hamster Photos\n{{/link-to}}\n</pre> <p>any passed value to <code>disabled</code> will disable it except <code>undefined</code>. to ensure that only <code>true</code> disable the <code>link-to</code> component you can override the global behaviour of <code>Ember.LinkComponent</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.LinkComponent.reopen({\n  disabled: Ember.computed(function(key, value) {\n    if (value !== undefined) {\n      this.set('_isDisabled', value === true);\n    }\n    return value === true ? get(this, 'disabledClass') : false;\n  })\n});\n</pre> <p>see \"Overriding Application-wide Defaults\" for more.</p> <h3 class=\"anchorable-toc\" id=\"toc_handling-code-href-code\">Handling <code>href</code>\n</h3> <p><code>{{link-to}}</code> will use your application's Router to fill the element's <code>href</code> property with a url that matches the path to the supplied <code>routeName</code> for your router's configured <code>Location</code> scheme, which defaults to Ember.HashLocation.</p> <h3 class=\"anchorable-toc\" id=\"toc_handling-current-route\">Handling current route</h3> <p><code>{{link-to}}</code> will apply a CSS class name of 'active' when the application's current route matches the supplied routeName. For example, if the application's current route is 'photoGallery.recent' the following use of <code>{{link-to}}</code>:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery.recent'}}\n  Great Hamster Photos\n{{/link-to}}\n</pre> <p>will result in</p> <pre class=\"highlight html \" data-language=\"html\">&lt;a href=\"/hamster-photos/this-week\" class=\"active\"&gt;\n  Great Hamster Photos\n&lt;/a&gt;\n</pre> <p>The CSS class name used for active classes can be customized for a single use of <code>{{link-to}}</code> by passing an <code>activeClass</code> option:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery.recent' activeClass=\"current-url\"}}\n  Great Hamster Photos\n{{/link-to}}\n</pre>\n<pre class=\"highlight html \" data-language=\"html\">&lt;a href=\"/hamster-photos/this-week\" class=\"current-url\"&gt;\n  Great Hamster Photos\n&lt;/a&gt;\n</pre> <p>To override this option for your entire application, see \"Overriding Application-wide Defaults\".</p> <h3 class=\"anchorable-toc\" id=\"toc_keeping-a-link-active-for-other-routes\">Keeping a link active for other routes</h3> <p>If you need a link to be 'active' even when it doesn't match the current route, you can use the <code>current-when</code> argument.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery' current-when='photos'}}\n  Photo Gallery\n{{/link-to}}\n</pre> <p>This may be helpful for keeping links active for:</p> <ul> <li>non-nested routes that are logically related</li> <li>some secondary menu approaches</li> <li>'top navigation' with 'sub navigation' scenarios</li> </ul> <p>A link will be active if <code>current-when</code> is <code>true</code> or the current route is the route this link would transition to.</p> <p>To match multiple routes 'space-separate' the routes:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'gallery' current-when='photos drawings paintings'}}\n  Art Gallery\n{{/link-to}}\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_supplying-a-model\">Supplying a model</h3> <p>An optional model argument can be used for routes whose paths contain dynamic segments. This argument will become the model context of the linked route:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Router.map(function() {\n  this.route(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery' aPhoto}}\n  {{aPhoto.title}}\n{{/link-to}}\n</pre>\n<pre class=\"highlight html \" data-language=\"html\">&lt;a href=\"/hamster-photos/42\"&gt;\n  Tomster\n&lt;/a&gt;\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_supplying-multiple-models\">Supplying multiple models</h3> <p>For deep-linking to route paths that contain multiple dynamic segments, multiple model arguments can be used. As the router transitions through the route path, each supplied model argument will become the context for the route with the dynamic segments:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Router.map(function() {\n  this.route(\"photoGallery\", { path: \"hamster-photos/:photo_id\" }, function() {\n    this.route(\"comment\", {path: \"comments/:comment_id\"});\n  });\n});\n</pre> <p>This argument will become the model context of the linked route:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery.comment' aPhoto comment}}\n  {{comment.body}}\n{{/link-to}}\n</pre>\n<pre class=\"highlight html \" data-language=\"html\">&lt;a href=\"/hamster-photos/42/comments/718\"&gt;\n  A+++ would snuggle again.\n&lt;/a&gt;\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_supplying-an-explicit-dynamic-segment-value\">Supplying an explicit dynamic segment value</h3> <p>If you don't have a model object available to pass to <code>{{link-to}}</code>, an optional string or integer argument can be passed for routes whose paths contain dynamic segments. This argument will become the value of the dynamic segment:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Router.map(function() {\n  this.route(\"photoGallery\", { path: \"hamster-photos/:photo_id\" });\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery' aPhotoId}}\n  {{aPhoto.title}}\n{{/link-to}}\n</pre>\n<pre class=\"highlight html \" data-language=\"html\">&lt;a href=\"/hamster-photos/42\"&gt;\n  Tomster\n&lt;/a&gt;\n</pre> <p>When transitioning into the linked route, the <code>model</code> hook will be triggered with parameters including this passed identifier.</p> <h3 class=\"anchorable-toc\" id=\"toc_allowing-default-action\">Allowing Default Action</h3> <p>By default the <code>{{link-to}}</code> component prevents the default browser action by calling <code>preventDefault()</code> as this sort of action bubbling is normally handled internally and we do not want to take the browser to a new URL (for example).</p> <p>If you need to override this behavior specify <code>preventDefault=false</code> in your template:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'photoGallery' aPhotoId preventDefault=false}}\n  {{aPhotoId.title}}\n{{/link-to}}\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_overriding-attributes\">Overriding attributes</h3> <p>You can override any given property of the <code>Ember.LinkComponent</code> that is generated by the <code>{{link-to}}</code> component by passing key/value pairs, like so:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}\n  Uh-mazing!\n{{/link-to}}\n</pre> <p>See <a href=\"ember.linkcomponent\">Ember.LinkComponent</a> for a complete list of overrideable properties. Be sure to also check out inherited properties of <code>LinkComponent</code>.</p> <h3 class=\"anchorable-toc\" id=\"toc_overriding-application-wide-defaults\">Overriding Application-wide Defaults</h3> <p><code>{{link-to}}</code> creates an instance of <code>Ember.LinkComponent</code> for rendering. To override options for your entire application, reopen <code>Ember.LinkComponent</code> and supply the desired values:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.LinkComponent.reopen({\n  activeClass: \"is-active\",\n  tagName: 'li'\n})\n</pre> <p>It is also possible to override the default event in this manner:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.LinkComponent.reopen({\n  eventName: 'customEventName'\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>routeName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>context</strong> <span class=\"type\">[Object]</span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> Handlebars key/value pairs of options, you can override any property of Ember.LinkComponent </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> HTML string</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_loc\">loc</h2>\n<span class=\"args\"> (str) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/loc.js#L9\">packages/ember-htmlbars/lib/helpers/loc.js:9</a> </div> <div class=\"description\"> <p>Calls <a href=\"ember.string#method_loc\">Ember.String.loc</a> with the provided string. This is a convenient way to localize text within a template. For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.STRINGS = {\n  '_welcome_': 'Bonjour'\n};\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">&lt;div class='message'&gt;\n  {{loc '_welcome_'}}\n&lt;/div&gt;\n</pre>\n<pre class=\"highlight html \" data-language=\"html\">&lt;div class='message'&gt;\n  Bonjour\n&lt;/div&gt;\n</pre> <p>See <a href=\"ember.string#method_loc\">Ember.String.loc</a> for how to set up localized string references.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>str</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The string to format. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_log\">log</h2>\n<span class=\"args\"> (values) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/log.js#L8\">packages/ember-htmlbars/lib/helpers/log.js:8</a> </div> <div class=\"description\"> <p><code>log</code> allows you to output the value of variables in the current rendering context. <code>log</code> also accepts primitive types such as strings or numbers.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{log \"myVariable:\" myVariable }}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>values</strong> <span class=\"type\">*</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_mut\">mut</h2>\n<span class=\"args\"> (attr) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/mut.js#L47\">packages/ember-htmlbars/lib/keywords/mut.js:47</a> </div> <div class=\"description\"> <p>The <code>mut</code> helper lets you <strong>clearly specify</strong> that a child <code>Component</code> can update the (mutable) value passed to it, which will <strong>change the value of the parent component</strong>.</p> <p>This is very helpful for passing mutable values to a <code>Component</code> of any size, but critical to understanding the logic of a large/complex <code>Component</code>.</p> <p>To specify that a parameter is mutable, when invoking the child <code>Component</code>:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{my-child childClickCount=(mut totalClicks)}}\n</pre> <p>The child <code>Component</code> can then modify the parent's value as needed:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// my-child.js\nexport default Component.extend({\n  click() {\n    this.get('childClickCount').update(this.get('childClickCount').value + 1);\n  }\n});\n</pre> <p>Additionally, the <code>mut</code> helper can be combined with the <code>action</code> helper to mutate a value. For example:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{my-child childClickCount=totalClicks click-count-change=(action (mut totalClicks))}}\n</pre> <p>The child <code>Component</code> would invoke the action with the new click value:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// my-child.js\nexport default Component.extend({\n  click() {\n    this.get('clickCountChange')(this.get('childClickCount') + 1);\n  }\n});\n</pre> <p>The <code>mut</code> helper changes the <code>totalClicks</code> value to what was provided as the action argument.</p> <p>See a <a href=\"http://emberjs.com/blog/2015/05/10/run-up-to-two-oh.html#toc_the-code-mut-code-helper\">2.0 blog post</a> for additional information on using <code>{{mut}}</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>attr</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> the \"two-way\" attribute that can be modified. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_outlet\">outlet</h2>\n<span class=\"args\"> (name) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/outlet.js#L17\">packages/ember-htmlbars/lib/keywords/outlet.js:17</a> </div> <div class=\"description\"> <p>The <code>{{outlet}}</code> helper lets you specify where a child route will render in your template. An important use of the <code>{{outlet}}</code> helper is in your application's <code>application.hbs</code> file:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! app/templates/application.hbs }}\n\n&lt;!-- header content goes here, and will always display --&gt;\n{{my-header}}\n\n&lt;div class=\"my-dynamic-content\"&gt;\n  &lt;!-- this content will change based on the current route, which depends on the current URL --&gt;\n  {{outlet}}\n&lt;/div&gt;\n\n&lt;!-- footer content goes here, and will always display --&gt;\n{{my-footer}}\n</pre> <p>See <a href=\"http://emberjs.com/guides/templates/the-application-template/\">templates guide</a> for additional information on using <code>{{outlet}}</code> in <code>application.hbs</code>.</p> <p>You may also specify a name for the <code>{{outlet}}</code>, which is useful when using more than one <code>{{outlet}}</code> in a template:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{outlet \"menu\"}}\n{{outlet \"sidebar\"}}\n{{outlet \"main\"}}\n</pre> <p>Your routes can then render into a specific one of these <code>outlet</code>s by specifying the <code>outlet</code> attribute in your <code>renderTemplate</code> function:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// app/routes/menu.js\n\nexport default Ember.Route.extend({\n  renderTemplate() {\n    this.render({ outlet: 'menu' });\n  }\n});\n</pre> <p>See the <a href=\"http://emberjs.com/guides/routing/rendering-a-template/\">routing guide</a> for more information on how your <code>route</code> interacts with the <code>{{outlet}}</code> helper.</p> <p>Note: Your content <strong>will not render</strong> if there isn't an <code>{{outlet}}</code> for it.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_partial\">partial</h2>\n<span class=\"args\"> (partialName) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/partial.js#L9\">packages/ember-htmlbars/lib/keywords/partial.js:9</a> </div> <div class=\"description\"> <p>The <code>partial</code> helper renders another template without changing the template context:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{foo}}\n{{partial \"nav\"}}\n</pre> <p>The above example template will render a template named \"<em>nav\", which has the same context as the parent template it's rendered into, so if the \"</em>nav\" template also referenced <code>{{foo}}</code>, it would print the same thing as the <code>{{foo}}</code> in the above example.</p> <p>If a \"_nav\" template isn't found, the <code>partial</code> helper will fall back to a template named \"nav\".</p> <h3 class=\"anchorable-toc\" id=\"toc_bound-template-names\">Bound template names</h3> <p>The parameter supplied to <code>partial</code> can also be a path to a property containing a template name, e.g.:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{partial someTemplateName}}\n</pre> <p>The above example will look up the value of <code>someTemplateName</code> on the template context (e.g. a controller) and use that value as the name of the template to render. If the resolved value is falsy, nothing will be rendered. If <code>someTemplateName</code> changes, the partial will be re-rendered using the new template name.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>partialName</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> The name of the template to render minus the leading underscore. </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_query-params\">query-params</h2>\n<span class=\"args\"> (hash) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/query-params.js#L9\">packages/ember-htmlbars/lib/helpers/query-params.js:9</a> </div> <div class=\"description\"> <p>This is a helper to be used in conjunction with the link-to helper. It will supply url query parameters to the target route.</p> <p>Example</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#link-to 'posts' (query-params direction=\"asc\")}}Sort{{/link-to}}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>hash</strong> <span class=\"type\">Object</span>\n</dt> <dd> takes a hash of query parameters </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> A `QueryParams` object for `{{link-to}}`</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_render\">render</h2>\n<span class=\"args\"> (name, context, options) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/render.js#L16\">packages/ember-htmlbars/lib/keywords/render.js:16</a> </div> <div class=\"description\"> <p>Calling <code>{{render}}</code> from within a template will insert another template that matches the provided name. The inserted template will access its properties on its own controller (rather than the controller of the parent template). If a view class with the same name exists, the view class also will be used. Note: A given controller may only be used <em>once</em> in your app in this manner. A singleton instance of the controller will be created for you. Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.NavigationController = Ember.Controller.extend({\n  who: \"world\"\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">&lt;!-- navigation.hbs --&gt;\nHello, {{who}}.\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">&lt;!-- application.hbs --&gt;\n&lt;h1&gt;My great app&lt;/h1&gt;\n{{render \"navigation\"}}\n</pre>\n<pre class=\"highlight html \" data-language=\"html\">&lt;h1&gt;My great app&lt;/h1&gt;\n&lt;div class='ember-view'&gt;\n  Hello, world.\n&lt;/div&gt;\n</pre> <p>Optionally you may provide a second argument: a property path that will be bound to the <code>model</code> property of the controller. If a <code>model</code> property path is specified, then a new instance of the controller will be created and <code>{{render}}</code> can be used multiple times with the same name.</p> <p>For example if you had this <code>author</code> template.</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;div class=\"author\"&gt;\n  Written by {{firstName}} {{lastName}}.\n  Total Posts: {{postCount}}\n&lt;/div&gt;\n</pre> <p>You could render it inside the <code>post</code> template using the <code>render</code> helper.</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;div class=\"post\"&gt;\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;div&gt;{{body}}&lt;/div&gt;\n  {{render \"author\" author}}\n&lt;/div&gt;\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  <dt>\n<strong>context</strong> <span class=\"type\">Object?</span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Hash</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> HTML string</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_textarea\">textarea</h2>\n<span class=\"args\"> (options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/textarea.js#L6\">packages/ember-htmlbars/lib/keywords/textarea.js:6</a> </div> <div class=\"description\"> <p><code>{{textarea}}</code> inserts a new instance of <code>&lt;textarea&gt;</code> tag into the template. The attributes of <code>{{textarea}}</code> match those of the native HTML tags as closely as possible.</p> <p>The following HTML attributes can be set:</p> <ul> <li><code>value</code></li> <li><code>name</code></li> <li><code>rows</code></li> <li><code>cols</code></li> <li><code>placeholder</code></li> <li><code>disabled</code></li> <li><code>maxlength</code></li> <li><code>tabindex</code></li> <li><code>selectionEnd</code></li> <li><code>selectionStart</code></li> <li><code>selectionDirection</code></li> <li><code>wrap</code></li> <li><code>readonly</code></li> <li><code>autofocus</code></li> <li><code>form</code></li> <li><code>spellcheck</code></li> <li><code>required</code></li> </ul> <p>When set to a quoted string, these value will be directly applied to the HTML element. When left unquoted, these values will be bound to a property on the template's current rendering context (most typically a controller instance).</p> <p>Unbound:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{textarea value=\"Lots of static text that ISN'T bound\"}}\n</pre> <p>Would result in the following HTML:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;textarea class=\"ember-text-area\"&gt;\n  Lots of static text that ISN'T bound\n&lt;/textarea&gt;\n</pre> <p>Bound:</p> <p>In the following example, the <code>writtenWords</code> property on <code>App.ApplicationController</code> will be updated live as the user types 'Lots of text that IS bound' into the text area of their browser's window.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\"\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{textarea value=writtenWords}}\n</pre> <p>Would result in the following HTML:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;textarea class=\"ember-text-area\"&gt;\n  Lots of text that IS bound\n&lt;/textarea&gt;\n</pre> <p>If you wanted a one way binding between the text area and a div tag somewhere else on your screen, you could use <code>Ember.computed.oneWay</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\",\n  outputWrittenWords: Ember.computed.oneWay(\"writtenWords\")\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{textarea value=writtenWords}}\n\n&lt;div&gt;\n  {{outputWrittenWords}}\n&lt;/div&gt;\n</pre> <p>Would result in the following HTML:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;textarea class=\"ember-text-area\"&gt;\n  Lots of text that IS bound\n&lt;/textarea&gt;\n\n&lt;-- the following div will be updated in real time as you type --&gt;\n\n&lt;div&gt;\n  Lots of text that IS bound\n&lt;/div&gt;\n</pre> <p>Finally, this example really shows the power and ease of Ember when two properties are bound to eachother via <code>Ember.computed.alias</code>. Type into either text area box and they'll both stay in sync. Note that <code>Ember.computed.alias</code> costs more in terms of performance, so only use it when your really binding in both directions:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\",\n  twoWayWrittenWords: Ember.computed.alias(\"writtenWords\")\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">{{textarea value=writtenWords}}\n{{textarea value=twoWayWrittenWords}}\n</pre>\n<pre class=\"highlight html \" data-language=\"html\">&lt;textarea id=\"ember1\" class=\"ember-text-area\"&gt;\n  Lots of text that IS bound\n&lt;/textarea&gt;\n\n&lt;-- both updated in real time --&gt;\n\n&lt;textarea id=\"ember2\" class=\"ember-text-area\"&gt;\n  Lots of text that IS bound\n&lt;/textarea&gt;\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_actions\">Actions</h3> <p>The helper can send multiple actions based on user events.</p> <p>The action property defines the action which is send when the user presses the return key.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{input action=\"submit\"}}\n</pre> <p>The helper allows some user events to send actions.</p> <ul> <li><code>enter</code></li> <li><code>insert-newline</code></li> <li><code>escape-press</code></li> <li><code>focus-in</code></li> <li><code>focus-out</code></li> <li><code>key-press</code></li> </ul> <p>For example, if you desire an action to be sent when the input is blurred, you only need to setup the action name to the event name property.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{textarea focus-in=\"alertMessage\"}}\n</pre> <p>See more about <a href=\"ember.textarea\">Text Support Actions</a></p> <h3 class=\"anchorable-toc\" id=\"toc_extension\">Extension</h3> <p>Internally, <code>{{textarea}}</code> creates an instance of <code>Ember.TextArea</code>, passing arguments from the helper to <code>Ember.TextArea</code>'s <code>create</code> method. You can extend the capabilities of text areas in your application by reopening this class. For example, if you are building a Bootstrap project where <code>data-*</code> attributes are used, you can globally add support for a <code>data-*</code> attribute on all <code>{{textarea}}</code>s' in your app by reopening <code>Ember.TextArea</code> or <code>Ember.TextSupport</code> and adding it to the <code>attributeBindings</code> concatenated property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Ember.TextArea.reopen({\n  attributeBindings: ['data-error']\n});\n</pre> <p>Keep in mind when writing <code>Ember.TextArea</code> subclasses that <code>Ember.TextArea</code> itself extends <code>Ember.Component</code>. Expect isolated component semantics, not legacy 1.x view semantics (like <code>controller</code> being present).</p> <p>See more about <a href=\"ember.component\">Ember components</a></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Hash</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unbound\">unbound</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/keywords/unbound.js#L10\">packages/ember-htmlbars/lib/keywords/unbound.js:10</a> </div> <div class=\"description\"> <p>The <code>{{unbound}}</code> helper disconnects the one-way binding of a property, essentially freezing its value at the moment of rendering. For example, in this example the display of the variable <code>name</code> will not change even if it is set with a new value:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{unbound name}}\n</pre> <p>Like any helper, the <code>unbound</code> helper can accept a nested helper expression. This allows for custom helpers to be rendered unbound:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{unbound (some-custom-helper)}}\n{{unbound (capitalize name)}}\n{{! You can use any helper, including unbound, in a nested expression }}\n{{capitalize (unbound name)}}\n</pre> <p>The <code>unbound</code> helper only accepts a single argument, and it return an unbound value.</p> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unless\">unless</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/if_unless.js#L81\">packages/ember-htmlbars/lib/helpers/if_unless.js:81</a> </div> <div class=\"description\"> <p>The <code>unless</code> helper is the inverse of the <code>if</code> helper. Its block will be rendered if the expression contains a falsey value. All forms of the <code>if</code> helper can also be used with <code>unless</code>.</p> </div>  </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_with\">with</h2>\n<span class=\"args\"> (options) </span><span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/helpers/with.js#L8\">packages/ember-htmlbars/lib/helpers/with.js:8</a> </div> <div class=\"description\"> <p>Use the <code>{{with}}</code> helper when you want to alias a property to a new name. This is helpful for semantic clarity as it allows you to retain default scope or to reference a property from another <code>{{with}}</code> block.</p> <p>If the aliased property is \"falsey\", for example: <code>false</code>, <code>undefined</code> <code>null</code>, <code>\"\"</code>, <code>0</code>, NaN or an empty array, the block will not be rendered.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{! Will only render if user.posts contains items}}\n{{#with user.posts as |blogPosts|}}\n  &lt;div class=\"notice\"&gt;\n    There are {{blogPosts.length}} blog posts written by {{user.name}}.\n  &lt;/div&gt;\n  {{#each blogPosts as |post|}}\n    &lt;li&gt;{{post.title}}&lt;/li&gt;\n  {{/each}}\n{{/with}}\n</pre> <p>Without the <code>as</code> operator, it would be impossible to reference <code>user.name</code> in the example above.</p> <p>NOTE: The alias should not reuse a name from the bound property path. For example: <code>{{#with foo.bar as |foo|}}</code> is not supported because it attempts to alias using the first part of the property path, <code>foo</code>. Instead, use <code>{{#with foo.bar as |baz|}}</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span> </dt>\n<dd> HTML string</dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Templates.helpers.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Templates.helpers.html</a>\n  </p>\n</div>\n","classes/rsvp":"<h1 class=\"api-header\"> RSVP Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember\">ember</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_all\">all</h2>\n<span class=\"args\"> (array, label) </span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"rsvp#method_all\">RSVP</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/all.js#L3\">bower_components/rsvp/lib/rsvp/all.js:3</a> </div> <div class=\"description\"> <p>This is a convenient alias for <code>RSVP.Promise.all</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>array</strong> <span class=\"type\">Array</span>\n</dt> <dd> Array of promises. </dd> <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> An optional label. This is useful for tooling. </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_allSettled\">allSettled</h2>\n<span class=\"args\"> (entries, label) </span><span class=\"type\">Promise</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/all-settled.js#L19\">bower_components/rsvp/lib/rsvp/all-settled.js:19</a> </div> <div class=\"description\"> <p><code>RSVP.allSettled</code> is similar to <code>RSVP.all</code>, but instead of implementing a fail-fast method, it waits until all the promises have returned and shows you all the results. This is useful if you want to handle multiple promises' failure states together as a set.</p> <p>Returns a promise that is fulfilled when all the given promises have been settled. The return promise is fulfilled with an array of the states of the promises passed into the <code>promises</code> array argument.</p> <p>Each state object will either indicate fulfillment or rejection, and provide the corresponding value or reason. The states will take one of the following formats:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">{ state: 'fulfilled', value: value }\n  or\n{ state: 'rejected', reason: reason }\n</pre> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var promise1 = RSVP.Promise.resolve(1);\nvar promise2 = RSVP.Promise.reject(new Error('2'));\nvar promise3 = RSVP.Promise.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.allSettled(promises).then(function(array){\n  // array == [\n  //   { state: 'fulfilled', value: 1 },\n  //   { state: 'rejected', reason: Error },\n  //   { state: 'rejected', reason: Error }\n  // ]\n  // Note that for the second item, reason.message will be '2', and for the\n  // third item, reason.message will be '3'.\n}, function(error) {\n  // Not run. (This block would only be called if allSettled had failed,\n  // for instance if passed an incorrect argument type.)\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>entries</strong> <span class=\"type\">Array</span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> - optional string that describes the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise that is fulfilled with an array of the settled states of the constituent promises.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_defer\">defer</h2>\n<span class=\"args\"> (label) </span><span class=\"type\">Object</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/defer.js#L3\">bower_components/rsvp/lib/rsvp/defer.js:3</a> </div> <div class=\"description\"> <p><code>RSVP.defer</code> returns an object similar to jQuery's <code>$.Deferred</code>. <code>RSVP.defer</code> should be used when porting over code reliant on <code>$.Deferred</code>'s interface. New code should use the <code>RSVP.Promise</code> constructor instead.</p> <p>The object returned from <code>RSVP.defer</code> is a plain object with three properties:</p> <ul> <li>promise - an <code>RSVP.Promise</code>.</li> <li>reject - a function that causes the <code>promise</code> property on this object to become rejected</li> <li>resolve - a function that causes the <code>promise</code> property on this object to become fulfilled.</li> </ul> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\"> var deferred = RSVP.defer();\n\n deferred.resolve(\"Success!\");\n\n deferred.promise.then(function(value){\n   // value here is \"Success!\"\n });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for labeling the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_denodeify\">denodeify</h2>\n<span class=\"args\"> (nodeFunc, options) </span><span class=\"type\"><a href=\"function\">Function</a></span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/node.js#L73\">bower_components/rsvp/lib/rsvp/node.js:73</a> </div> <div class=\"description\"> <p><code>RSVP.denodeify</code> takes a 'node-style' function and returns a function that will return an <code>RSVP.Promise</code>. You can use <code>denodeify</code> in Node.js or the browser when you'd prefer to use promises over using callbacks. For example, <code>denodeify</code> transforms the following:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var fs = require('fs');\n\nfs.readFile('myfile.txt', function(err, data){\n  if (err) return handleError(err);\n  handleData(data);\n});\n</pre> <p>into:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\n\nreadFile('myfile.txt').then(handleData, handleError);\n</pre> <p>If the node function has multiple success parameters, then <code>denodeify</code> just returns the first one:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var request = RSVP.denodeify(require('request'));\n\nrequest('http://example.com').then(function(res) {\n  // ...\n});\n</pre> <p>However, if you need all success parameters, setting <code>denodeify</code>'s second parameter to <code>true</code> causes it to return all success parameters as an array:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var request = RSVP.denodeify(require('request'), true);\n\nrequest('http://example.com').then(function(result) {\n  // result[0] -&gt; res\n  // result[1] -&gt; body\n});\n</pre> <p>Or if you pass it an array with names it returns the parameters as a hash:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var request = RSVP.denodeify(require('request'), ['res', 'body']);\n\nrequest('http://example.com').then(function(result) {\n  // result.res\n  // result.body\n});\n</pre> <p>Sometimes you need to retain the <code>this</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var app = require('express')();\nvar render = RSVP.denodeify(app.render.bind(app));\n</pre> <p>The denodified function inherits from the original function. It works in all environments, except IE 10 and below. Consequently all properties of the original function are available to you. However, any properties you change on the denodeified function won't be changed on the original function. Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var request = RSVP.denodeify(require('request')),\n    cookieJar = request.jar(); // &lt;- Inheritance is used here\n\nrequest('http://example.com', {jar: cookieJar}).then(function(res) {\n  // cookieJar.cookies holds now the cookies returned by example.com\n});\n</pre> <p>Using <code>denodeify</code> makes it easier to compose asynchronous operations instead of using callbacks. For example, instead of:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var fs = require('fs');\n\nfs.readFile('myfile.txt', function(err, data){\n  if (err) { ... } // Handle error\n  fs.writeFile('myfile2.txt', data, function(err){\n    if (err) { ... } // Handle error\n    console.log('done')\n  });\n});\n</pre> <p>you can chain the operations together using <code>then</code> from the returned promise:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\nvar writeFile = RSVP.denodeify(fs.writeFile);\n\nreadFile('myfile.txt').then(function(data){\n  return writeFile('myfile2.txt', data);\n}).then(function(){\n  console.log('done')\n}).catch(function(error){\n  // Handle error\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>nodeFunc</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> a 'node-style' function that takes a callback as its last argument. The callback expects an error to be passed as its first argument (if an error occurred, otherwise null), and the value from the operation as its second argument ('function(err, value){ }'). </dd> <dt>\n<strong>options</strong> <span class=\"type\">[Boolean|Array]</span>\n</dt> <dd> An optional paramter that if set to `true` causes the promise to fulfill with the callback's success arguments as an array. This is useful if the node function has multiple success paramters. If you set this paramter to an array with names, the promise will fulfill with a hash with these names as keys and the success parameters as values. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"function\">Function</a></span> </dt>\n<dd> a function that wraps `nodeFunc` to return an `RSVP.Promise`</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_filter\">filter</h2>\n<span class=\"args\"> (promises, filterFn, label) </span><span class=\"type\">Promise</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/filter.js#L6\">bower_components/rsvp/lib/rsvp/filter.js:6</a> </div> <div class=\"description\"> <p><code>RSVP.filter</code> is similar to JavaScript's native <code>filter</code> method, except that it waits for all promises to become fulfilled before running the <code>filterFn</code> on each item in given to <code>promises</code>. <code>RSVP.filter</code> returns a promise that will become fulfilled with the result of running <code>filterFn</code> on the values the promises become fulfilled with.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.resolve(2);\n var promise3 = RSVP.resolve(3);\n\n var promises = [promise1, promise2, promise3];\n\n var filterFn = function(item){\n   return item &gt; 1;\n };\n\n RSVP.filter(promises, filterFn).then(function(result){\n   // result is [ 2, 3 ]\n });\n</pre> <p>If any of the <code>promises</code> given to <code>RSVP.filter</code> are rejected, the first promise that is rejected will be given as an argument to the returned promise's rejection handler. For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\"> var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.reject(new Error('2'));\n var promise3 = RSVP.reject(new Error('3'));\n var promises = [ promise1, promise2, promise3 ];\n\n var filterFn = function(item){\n   return item &gt; 1;\n };\n\n RSVP.filter(promises, filterFn).then(function(array){\n   // Code here never runs because there are rejected promises!\n }, function(reason) {\n   // reason.message === '2'\n });\n</pre> <p><code>RSVP.filter</code> will also wait for any promises returned from <code>filterFn</code>. For instance, you may want to fetch a list of users then return a subset of those users based on some asynchronous operation:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">\n var alice = { name: 'alice' };\n var bob   = { name: 'bob' };\n var users = [ alice, bob ];\n\n var promises = users.map(function(user){\n   return RSVP.resolve(user);\n });\n\n var filterFn = function(user){\n   // Here, Alice has permissions to create a blog post, but Bob does not.\n   return getPrivilegesForUser(user).then(function(privs){\n     return privs.can_create_blog_post === true;\n   });\n };\n RSVP.filter(promises, filterFn).then(function(users){\n   // true, because the server told us only Alice can create a blog post.\n   users.length === 1;\n   // false, because Alice is the only user present in `users`\n   users[0] === bob;\n });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>promises</strong> <span class=\"type\">Array</span>\n</dt>  <dt>\n<strong>filterFn</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> - function to be called on each resolved value to filter the final results. </dd> <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string describing the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_hash\">hash</h2>\n<span class=\"args\"> (object, label) </span><span class=\"type\">Promise</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/hash.js#L4\">bower_components/rsvp/lib/rsvp/hash.js:4</a> </div> <div class=\"description\"> <p><code>RSVP.hash</code> is similar to <code>RSVP.all</code>, but takes an object instead of an array for its <code>promises</code> argument.</p> <p>Returns a promise that is fulfilled when all the given promises have been fulfilled, or rejected if any of them become rejected. The returned promise is fulfilled with a hash that has the same key names as the <code>promises</code> object argument. If any of the values in the object are not promises, they will simply be copied over to the fulfilled object.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var promises = {\n  myPromise: RSVP.resolve(1),\n  yourPromise: RSVP.resolve(2),\n  theirPromise: RSVP.resolve(3),\n  notAPromise: 4\n};\n\nRSVP.hash(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise: 1,\n  //   yourPromise: 2,\n  //   theirPromise: 3,\n  //   notAPromise: 4\n  // }\n});\n</pre> <p>If any of the <code>promises</code> given to <code>RSVP.hash</code> are rejected, the first promise that is rejected will be given as the reason to the rejection handler.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var promises = {\n  myPromise: RSVP.resolve(1),\n  rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n  anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n};\n\nRSVP.hash(promises).then(function(hash){\n  // Code here never runs because there are rejected promises!\n}, function(reason) {\n  // reason.message === 'rejectedPromise'\n});\n</pre> <p>An important note: <code>RSVP.hash</code> is intended for plain JavaScript objects that are just a set of keys and values. <code>RSVP.hash</code> will NOT preserve prototype chains.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function MyConstructor(){\n  this.example = RSVP.resolve('Example');\n}\n\nMyConstructor.prototype = {\n  protoProperty: RSVP.resolve('Proto Property')\n};\n\nvar myObject = new MyConstructor();\n\nRSVP.hash(myObject).then(function(hash){\n  // protoProperty will not be present, instead you will just have an\n  // object that looks like:\n  // {\n  //   example: 'Example'\n  // }\n  //\n  // hash.hasOwnProperty('protoProperty'); // false\n  // 'undefined' === typeof hash.protoProperty\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>object</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string that describes the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise that is fulfilled when all properties of `promises` have been fulfilled, or rejected if any of them become rejected.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_hashSettled\">hashSettled</h2>\n<span class=\"args\"> (object, label) </span><span class=\"type\">Promise</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/hash-settled.js#L23\">bower_components/rsvp/lib/rsvp/hash-settled.js:23</a> </div> <div class=\"description\"> <p><code>RSVP.hashSettled</code> is similar to <code>RSVP.allSettled</code>, but takes an object instead of an array for its <code>promises</code> argument.</p> <p>Unlike <code>RSVP.all</code> or <code>RSVP.hash</code>, which implement a fail-fast method, but like <code>RSVP.allSettled</code>, <code>hashSettled</code> waits until all the constituent promises have returned and then shows you all the results with their states and values/reasons. This is useful if you want to handle multiple promises' failure states together as a set.</p> <p>Returns a promise that is fulfilled when all the given promises have been settled, or rejected if the passed parameters are invalid.</p> <p>The returned promise is fulfilled with a hash that has the same key names as the <code>promises</code> object argument. If any of the values in the object are not promises, they will be copied over to the fulfilled object and marked with state 'fulfilled'.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var promises = {\n  myPromise: RSVP.Promise.resolve(1),\n  yourPromise: RSVP.Promise.resolve(2),\n  theirPromise: RSVP.Promise.resolve(3),\n  notAPromise: 4\n};\n\nRSVP.hashSettled(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise: { state: 'fulfilled', value: 1 },\n  //   yourPromise: { state: 'fulfilled', value: 2 },\n  //   theirPromise: { state: 'fulfilled', value: 3 },\n  //   notAPromise: { state: 'fulfilled', value: 4 }\n  // }\n});\n</pre> <p>If any of the <code>promises</code> given to <code>RSVP.hash</code> are rejected, the state will be set to 'rejected' and the reason for rejection provided.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var promises = {\n  myPromise: RSVP.Promise.resolve(1),\n  rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n  anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n};\n\nRSVP.hashSettled(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise:              { state: 'fulfilled', value: 1 },\n  //   rejectedPromise:        { state: 'rejected', reason: Error },\n  //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n  // }\n  // Note that for rejectedPromise, reason.message == 'rejection',\n  // and for anotherRejectedPromise, reason.message == 'more rejection'.\n});\n</pre> <p>An important note: <code>RSVP.hashSettled</code> is intended for plain JavaScript objects that are just a set of keys and values. <code>RSVP.hashSettled</code> will NOT preserve prototype chains.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function MyConstructor(){\n  this.example = RSVP.Promise.resolve('Example');\n}\n\nMyConstructor.prototype = {\n  protoProperty: RSVP.Promise.resolve('Proto Property')\n};\n\nvar myObject = new MyConstructor();\n\nRSVP.hashSettled(myObject).then(function(hash){\n  // protoProperty will not be present, instead you will just have an\n  // object that looks like:\n  // {\n  //   example: { state: 'fulfilled', value: 'Example' }\n  // }\n  //\n  // hash.hasOwnProperty('protoProperty'); // false\n  // 'undefined' === typeof hash.protoProperty\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>object</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string that describes the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise that is fulfilled when when all properties of `promises` have been settled.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_map\">map</h2>\n<span class=\"args\"> (promises, mapFn, label) </span><span class=\"type\">Promise</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/map.js#L6\">bower_components/rsvp/lib/rsvp/map.js:6</a> </div> <div class=\"description\"> <p><code>RSVP.map</code> is similar to JavaScript's native <code>map</code> method, except that it waits for all promises to become fulfilled before running the <code>mapFn</code> on each item in given to <code>promises</code>. <code>RSVP.map</code> returns a promise that will become fulfilled with the result of running <code>mapFn</code> on the values the promises become fulfilled with.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.resolve(2);\n var promise3 = RSVP.resolve(3);\n var promises = [ promise1, promise2, promise3 ];\n\n var mapFn = function(item){\n   return item + 1;\n };\n\n RSVP.map(promises, mapFn).then(function(result){\n   // result is [ 2, 3, 4 ]\n });\n</pre> <p>If any of the <code>promises</code> given to <code>RSVP.map</code> are rejected, the first promise that is rejected will be given as an argument to the returned promise's rejection handler. For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\"> var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.reject(new Error('2'));\n var promise3 = RSVP.reject(new Error('3'));\n var promises = [ promise1, promise2, promise3 ];\n\n var mapFn = function(item){\n   return item + 1;\n };\n\n RSVP.map(promises, mapFn).then(function(array){\n   // Code here never runs because there are rejected promises!\n }, function(reason) {\n   // reason.message === '2'\n });\n</pre> <p><code>RSVP.map</code> will also wait if a promise is returned from <code>mapFn</code>. For example, say you want to get all comments from a set of blog posts, but you need the blog posts first because they contain a url to those comments.</p> <pre class=\"highlight javscript \" data-language=\"\">\n var mapFn = function(blogPost){\n   // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n   // with some comments data\n   return getComments(blogPost.comments_url);\n };\n\n // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n // with some blog post data\n RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n   // comments is the result of asking the server for the comments\n   // of all blog posts returned from getBlogPosts()\n });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>promises</strong> <span class=\"type\">Array</span>\n</dt>  <dt>\n<strong>mapFn</strong> <span class=\"type\"><a href=\"function\">Function</a></span>\n</dt> <dd> function to be called on each fulfilled promise. </dd> <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for labeling the promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise that is fulfilled with the result of calling `mapFn` on each fulfilled promise or value when they become fulfilled. The promise will be rejected if any of the given `promises` become rejected.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_race\">race</h2>\n<span class=\"args\"> (array, label) </span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"rsvp#method_race\">RSVP</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/race.js#L3\">bower_components/rsvp/lib/rsvp/race.js:3</a> </div> <div class=\"description\"> <p>This is a convenient alias for <code>RSVP.Promise.race</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>array</strong> <span class=\"type\">Array</span>\n</dt> <dd> Array of promises. </dd> <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> An optional label. This is useful for tooling. </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reject\">reject</h2>\n<span class=\"args\"> (reason, label) </span><span class=\"type\">Promise</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Inherited from <a href=\"rsvp#method_reject\">RSVP</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/reject.js#L3\">bower_components/rsvp/lib/rsvp/reject.js:3</a> </div> <div class=\"description\"> <p>This is a convenient alias for <code>RSVP.Promise.reject</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>reason</strong> <span class=\"type\">*</span>\n</dt> <dd> value that the returned promise will be rejected with. </dd> <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for identifying the returned promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> a promise rejected with the given `reason`.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_resolve\">resolve</h2>\n<span class=\"args\"> (value, label) </span><span class=\"type\">Promise</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Inherited from <a href=\"rsvp#method_resolve\">RSVP</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/resolve.js#L3\">bower_components/rsvp/lib/rsvp/resolve.js:3</a> </div> <div class=\"description\"> <p>This is a convenient alias for <code>RSVP.Promise.resolve</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>value</strong> <span class=\"type\">*</span>\n</dt> <dd> value that the returned promise will be resolved with </dd> <dt>\n<strong>label</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> optional string for identifying the returned promise. Useful for tooling. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> a promise that will become fulfilled with the given `value`</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_rethrow\">rethrow</h2>\n<span class=\"args\"> (reason) </span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/bower_components/rsvp/lib/rsvp/rethrow.js#L1\">bower_components/rsvp/lib/rsvp/rethrow.js:1</a> </div> <div class=\"description\"> <p><code>RSVP.rethrow</code> will rethrow an error on the next turn of the JavaScript event loop in order to aid debugging.</p> <p>Promises A+ specifies that any exceptions that occur with a promise must be caught by the promises implementation and bubbled to the last handler. For this reason, it is recommended that you always specify a second rejection handler function to <code>then</code>. However, <code>RSVP.rethrow</code> will throw the exception outside of the promise, so it bubbles up to your console if in the browser, or domain/cause uncaught exception in Node. <code>rethrow</code> will also throw the error again so the error can be handled by the promise per the spec.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function throws(){\n  throw new Error('Whoops!');\n}\n\nvar promise = new RSVP.Promise(function(resolve, reject){\n  throws();\n});\n\npromise.catch(RSVP.rethrow).then(function(){\n  // Code here doesn't run because the promise became rejected due to an\n  // error!\n}, function (err){\n  // handle the error here\n});\n</pre> <p>The 'Whoops' error will be thrown on the next turn of the event loop and you can watch for it in your console. You can also handle it using a rejection handler given to <code>.then</code> or <code>.catch</code> on the returned promise.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>reason</strong> <span class=\"type\">Error</span>\n</dt> <dd> reason the promise became rejected. </dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/RSVP.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/RSVP.html</a>\n  </p>\n</div>\n","data/classes/containerinstancecache":"<h1 class=\"api-header\"> ContainerInstanceCache Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store/container-instance-cache.js#L5\">addon/-private/system/store/container-instance-cache.js:5</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The <code>ContainerInstanceCache</code> serves as a lazy cache for looking up instances of serializers and adapters. It has some additional logic for finding the 'fallback' adapter or serializer.</p> <p>The 'fallback' adapter or serializer is an adapter or serializer that is looked up when the preferred lookup fails. For example, say you try to look up <code>adapter:post</code>, but there is no entry (app/adapters/post.js in EmberCLI) for <code>adapter:post</code> in the registry.</p> <p>The <code>fallbacks</code> array passed will then be used; the first entry in the fallbacks array that exists in the container will then be cached for <code>adapter:post</code>. So, the next time you look up <code>adapter:post</code>, you'll get the <code>adapter:application</code> instance (or whatever the fallback was if <code>adapter:application</code> doesn't exist).</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/ContainerInstanceCache.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/ContainerInstanceCache.html</a>\n  </p>\n</div>\n","data/classes/ds.rootstate":"<h1 class=\"api-header\"> DS.RootState Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/states.js#L12\">addon/-private/system/model/states.js:12</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <h3 class=\"anchorable-toc\" id=\"toc_state\">State</h3> <p>Each record has a <code>currentState</code> property that explicitly tracks what state a record is in at any given time. For instance, if a record is newly created and has not yet been sent to the adapter to be saved, it would be in the <code>root.loaded.created.uncommitted</code> state. If a record has had local modifications made to it that are in the process of being saved, the record would be in the <code>root.loaded.updated.inFlight</code> state. (This state paths will be explained in more detail below.)</p> <p>Events are sent by the record or its store to the record's <code>currentState</code> property. How the state reacts to these events is dependent on which state it is in. In some states, certain events will be invalid and will cause an exception to be raised.</p> <p>States are hierarchical and every state is a substate of the <code>RootState</code>. For example, a record can be in the <code>root.deleted.uncommitted</code> state, then transition into the <code>root.deleted.inFlight</code> state. If a child state does not implement an event handler, the state manager will attempt to invoke the event on all parent states until the root state is reached. The state hierarchy of a record is described in terms of a path string. You can determine a record's current state by getting the state's <code>stateName</code> property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.get('currentState.stateName');\n//=&gt; \"root.created.uncommitted\"\n</pre> <p>The hierarchy of valid states that ship with ember data looks like this:</p> <pre class=\"highlight text \" data-language=\"\">* root\n  * deleted\n    * saved\n    * uncommitted\n    * inFlight\n  * empty\n  * loaded\n    * created\n      * uncommitted\n      * inFlight\n    * saved\n    * updated\n      * uncommitted\n      * inFlight\n  * loading\n</pre> <p>The <code>DS.Model</code> states are themselves stateless. What that means is that, the hierarchical states that each of <em>those</em> points to is a shared data structure. For performance reasons, instead of each record getting its own copy of the hierarchy of states, each record points to this global, immutable shared instance. How does a state know which record it should be acting on? We pass the record instance into the state's event handlers as the first argument.</p> <p>The record passed as the first parameter is where you should stash state about the record if needed; you should never store data on the state object itself.</p> <h3 class=\"anchorable-toc\" id=\"toc_events-and-flags\">Events and Flags</h3> <p>A state may implement zero or more events and flags.</p> <h4 class=\"anchorable-toc\" id=\"toc_events\">Events</h4> <p>Events are named functions that are invoked when sent to a record. The record will first look for a method with the given name on the current state. If no method is found, it will search the current state's parent, and then its grandparent, and so on until reaching the top of the hierarchy. If the root is reached without an event handler being found, an exception will be raised. This can be very helpful when debugging new features.</p> <p>Here's an example implementation of a state with a <code>myEvent</code> event handler:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">aState: DS.State.create({\n  myEvent: function(manager, param) {\n    console.log(\"Received myEvent with\", param);\n  }\n})\n</pre> <p>To trigger this event:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.send('myEvent', 'foo');\n//=&gt; \"Received myEvent with foo\"\n</pre> <p>Note that an optional parameter can be sent to a record's <code>send()</code> method, which will be passed as the second parameter to the event handler.</p> <p>Events should transition to a different state if appropriate. This can be done by calling the record's <code>transitionTo()</code> method with a path to the desired state. The state manager will attempt to resolve the state path relative to the current state. If no state is found at that path, it will attempt to resolve it relative to the current state's parent, and then its parent, and so on until the root is reached. For example, imagine a hierarchy like this:</p> <pre class=\"highlight text \" data-language=\"\">* created\n  * uncommitted &lt;-- currentState\n  * inFlight\n* updated\n  * inFlight\n</pre> <p>If we are currently in the <code>uncommitted</code> state, calling <code>transitionTo('inFlight')</code> would transition to the <code>created.inFlight</code> state, while calling <code>transitionTo('updated.inFlight')</code> would transition to the <code>updated.inFlight</code> state.</p> <p>Remember that <em>only events</em> should ever cause a state transition. You should never call <code>transitionTo()</code> from outside a state's event handler. If you are tempted to do so, create a new event and send that to the state manager.</p> <h4 class=\"anchorable-toc\" id=\"toc_flags\">Flags</h4> <p>Flags are Boolean values that can be used to introspect a record's current state in a more user-friendly way than examining its state path. For example, instead of doing this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var statePath = record.get('stateManager.currentPath');\nif (statePath === 'created.inFlight') {\n  doSomething();\n}\n</pre> <p>You can say:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">if (record.get('isNew') &amp;&amp; record.get('isSaving')) {\n  doSomething();\n}\n</pre> <p>If your state does not set a value for a given flag, the value will be inherited from its parent (or the first place in the state hierarchy where it is defined).</p> <p>The current set of flags are defined below. If you want to add a new flag, in addition to the area below, you will also need to declare it in the <code>DS.Model</code> class.</p> <ul> <li><a href=\"ds.model#property_isEmpty\">isEmpty</a></li> <li><a href=\"ds.model#property_isLoading\">isLoading</a></li> <li><a href=\"ds.model#property_isLoaded\">isLoaded</a></li> <li><a href=\"ds.model#property_isDirty\">isDirty</a></li> <li><a href=\"ds.model#property_isSaving\">isSaving</a></li> <li><a href=\"ds.model#property_isDeleted\">isDeleted</a></li> <li><a href=\"ds.model#property_isNew\">isNew</a></li> <li><a href=\"ds.model#property_isValid\">isValid</a></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.RootState.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.RootState.html</a>\n  </p>\n</div>\n","data/classes/ds.adapterpopulatedrecordarray":"<h1 class=\"api-header\"> DS.AdapterPopulatedRecordArray Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.recordarray\">DS.RecordArray</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/adapter-populated-record-array.js#L12\">addon/-private/system/record-arrays/adapter-populated-record-array.js:12</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>Represents an ordered list of records whose order and membership is determined by the adapter. For example, a query sent to the adapter may trigger a search on the server, whose results would be loaded into an instance of the <code>AdapterPopulatedRecordArray</code>.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.AdapterPopulatedRecordArray.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.AdapterPopulatedRecordArray.html</a>\n  </p>\n</div>\n","data/classes/ds.recordarray":"<h1 class=\"api-header\"> DS.RecordArray Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.ArrayProxy</p> <p>Uses: Ember.Evented</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/record-array.js#L12\">addon/-private/system/record-arrays/record-array.js:12</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>A record array is an array that contains records of a certain type. The record array materializes records as needed when they are retrieved for the first time. You should not create record arrays yourself. Instead, an instance of <code>DS.RecordArray</code> or its subclasses will be returned by your application's store in response to queries.</p> </div> <div class=\"pane\" id=\"methods\">      <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_save\">save</h2>\n<span class=\"type\"><a href=\"ds.promisearray\">DS.PromiseArray</a></span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/record-array.js#L165\">addon/-private/system/record-arrays/record-array.js:165</a> </div> <div class=\"description\"> <p>Saves all of the records in the <code>RecordArray</code>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var messages = store.peekAll('message');\nmessages.forEach(function(message) {\n  message.set('hasBeenSeen', true);\n});\nmessages.save();\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.promisearray\">DS.PromiseArray</a></span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"method_update\">update</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/record-array.js#L100\">addon/-private/system/record-arrays/record-array.js:100</a> </div> <div class=\"description\"> <p>Used to get the latest version of all of the records in this array from the adapter.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var people = store.peekAll('person');\npeople.get('isUpdating'); // false\n\npeople.update().then(function() {\n  people.get('isUpdating'); // false\n});\n\npeople.get('isUpdating'); // true\n</pre> </div>  </div> </div>\n<div class=\"pane\" id=\"properties\">   <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isLoaded\">isLoaded</h2>\n<span class=\"type\">Boolean</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/record-array.js#L46\">addon/-private/system/record-arrays/record-array.js:46</a> </div> <div class=\"description\"> <p>The flag to signal a <code>RecordArray</code> is finished loading data.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var people = store.peekAll('person');\npeople.get('isLoaded'); // true\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isUpdating\">isUpdating</h2>\n<span class=\"type\">Boolean</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/record-array.js#L60\">addon/-private/system/record-arrays/record-array.js:60</a> </div> <div class=\"description\"> <p>The flag to signal a <code>RecordArray</code> is currently loading data.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var people = store.peekAll('person');\npeople.get('isUpdating'); // false\npeople.update();\npeople.get('isUpdating'); // true\n</pre> </div>  </div>  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_type\">type</h2>\n<span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/record-array.js#L26\">addon/-private/system/record-arrays/record-array.js:26</a> </div> <div class=\"description\"> <p>The model type contained by this record array.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.RecordArray.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.RecordArray.html</a>\n  </p>\n</div>\n","data/classes/ds.promisearray":"<h1 class=\"api-header\"> DS.PromiseArray Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.ArrayProxy</p> <p>Uses: Ember.PromiseProxyMixin</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/promise-proxies.js#L7\">addon/-private/system/promise-proxies.js:7</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>A <code>PromiseArray</code> is an object that acts like both an <code>Ember.Array</code> and a promise. When the promise is resolved the resulting value will be set to the <code>PromiseArray</code>'s <code>content</code> property. This makes it easy to create data bindings with the <code>PromiseArray</code> that will be updated when the promise resolves.</p> <p>For more information see the <a href=\"../../classes/ember.promiseproxymixin\">Ember.PromiseProxyMixin documentation</a>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var promiseArray = DS.PromiseArray.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\npromiseArray.get('length'); // 0\n\npromiseArray.then(function() {\n  promiseArray.get('length'); // 100\n});\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.PromiseArray.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.PromiseArray.html</a>\n  </p>\n</div>\n","data/classes/ds.promiseobject":"<h1 class=\"api-header\"> DS.PromiseObject Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.ObjectProxy</p> <p>Uses: Ember.PromiseProxyMixin</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/promise-proxies.js#L38\">addon/-private/system/promise-proxies.js:38</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>A <code>PromiseObject</code> is an object that acts like both an <code>Ember.Object</code> and a promise. When the promise is resolved, then the resulting value will be set to the <code>PromiseObject</code>'s <code>content</code> property. This makes it easy to create data bindings with the <code>PromiseObject</code> that will be updated when the promise resolves.</p> <p>For more information see the <a href=\"../../classes/ember.promiseproxymixin\">Ember.PromiseProxyMixin documentation</a>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var promiseObject = DS.PromiseObject.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\npromiseObject.get('name'); // null\n\npromiseObject.then(function() {\n  promiseObject.get('name'); // 'Tomster'\n});\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.PromiseObject.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.PromiseObject.html</a>\n  </p>\n</div>\n","data/classes/ds.promisemanyarray":"<h1 class=\"api-header\"> DS.PromiseManyArray Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.ArrayProxy</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/promise-proxies.js#L81\">addon/-private/system/promise-proxies.js:81</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>A PromiseManyArray is a PromiseArray that also proxies certain method calls to the underlying manyArray. Right now we proxy:</p> <ul> <li><code>reload()</code></li> <li><code>createRecord()</code></li> <li><code>on()</code></li> <li><code>one()</code></li> <li><code>trigger()</code></li> <li><code>off()</code></li> <li><code>has()</code></li> </ul> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.PromiseManyArray.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.PromiseManyArray.html</a>\n  </p>\n</div>\n","data/classes/ds.buildurlmixin":"<h1 class=\"api-header\"> DS.BuildURLMixin Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L5\">addon/-private/adapters/build-url-mixin.js:5</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>WARNING: This interface is likely to change in order to accomodate <a href=\"https://github.com/emberjs/rfcs/pull/4\">https://github.com/emberjs/rfcs/pull/4</a></p> <h2 class=\"anchorable-toc\" id=\"toc_using-buildurlmixin\">Using BuildURLMixin</h2> <p>To use url building, include the mixin when extending an adapter, and call <code>buildURL</code> where needed. The default behaviour is designed for RESTAdapter.</p> <h3 class=\"anchorable-toc\" id=\"toc_example\">Example</h3>\n<pre class=\"highlight javascript \" data-language=\"javascript\">  export default DS.Adapter.extend(BuildURLMixin, {\n    findRecord: function(store, type, id, snapshot) {\n      var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');\n      return this.ajax(url, 'GET');\n    }\n  });\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_attributes\">Attributes</h3> <p>The <code>host</code> and <code>namespace</code> attributes will be used if defined, and are optional.</p> </div> <div class=\"pane\" id=\"methods\">   <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_buildURL\">buildURL</h2>\n<span class=\"args\"> (modelName, id, snapshot, requestType, query) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L33\">addon/-private/adapters/build-url-mixin.js:33</a> </div> <div class=\"description\"> <p>Builds a URL for a given type and optional ID.</p> <p>By default, it pluralizes the type's name (for example, 'post' becomes 'posts' and 'person' becomes 'people'). To override the pluralization see <a href=\"#method_pathForType\">pathForType</a>.</p> <p>If an ID is specified, it adds the ID to the path generated for the type, separated by a <code>/</code>.</p> <p>When called by RESTAdapter.findMany() the <code>id</code> and <code>snapshot</code> parameters will be arrays of ids and snapshots.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">(String|Array|Object)</span>\n</dt> <dd> single id or array of ids or query </dd> <dt>\n<strong>snapshot</strong> <span class=\"type\">(DS.Snapshot|Array)</span>\n</dt> <dd> single snapshot or array of snapshots </dd> <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt> <dd> object of query parameters to send for query requests. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pathForType\">pathForType</h2>\n<span class=\"args\"> (modelName) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L253\">addon/-private/adapters/build-url-mixin.js:253</a> </div> <div class=\"description\"> <p>Determines the pathname for a given type.</p> <p>By default, it pluralizes the type's name (for example, 'post' becomes 'posts' and 'person' becomes 'people').</p> <h3 class=\"anchorable-toc\" id=\"toc_pathname-customization\">Pathname customization</h3> <p>For example if you have an object LineItem with an endpoint of \"/line_items/\".</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  pathForType: function(modelName) {\n    var decamelized = Ember.String.decamelize(modelName);\n    return Ember.String.pluralize(decamelized);\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> path</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForCreateRecord\">urlForCreateRecord</h2>\n<span class=\"args\"> (modelName, snapshot) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L184\">addon/-private/adapters/build-url-mixin.js:184</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForDeleteRecord\">urlForDeleteRecord</h2>\n<span class=\"args\"> (id, modelName, snapshot) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L205\">addon/-private/adapters/build-url-mixin.js:205</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>id</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForFindAll\">urlForFindAll</h2>\n<span class=\"args\"> (modelName, snapshot) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L121\">addon/-private/adapters/build-url-mixin.js:121</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshotrecordarray\">DS.SnapshotRecordArray</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForFindBelongsTo\">urlForFindBelongsTo</h2>\n<span class=\"args\"> (id, modelName, snapshot) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L173\">addon/-private/adapters/build-url-mixin.js:173</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>id</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForFindHasMany\">urlForFindHasMany</h2>\n<span class=\"args\"> (id, modelName, snapshot) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L162\">addon/-private/adapters/build-url-mixin.js:162</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>id</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForFindMany\">urlForFindMany</h2>\n<span class=\"args\"> (ids, modelName, snapshots) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L151\">addon/-private/adapters/build-url-mixin.js:151</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>ids</strong> <span class=\"type\">Array</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshots</strong> <span class=\"type\">Array</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForFindRecord\">urlForFindRecord</h2>\n<span class=\"args\"> (id, modelName, snapshot) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L110\">addon/-private/adapters/build-url-mixin.js:110</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>id</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForQuery\">urlForQuery</h2>\n<span class=\"args\"> (query, modelName) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L131\">addon/-private/adapters/build-url-mixin.js:131</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForQueryRecord\">urlForQueryRecord</h2>\n<span class=\"args\"> (query, modelName) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L141\">addon/-private/adapters/build-url-mixin.js:141</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForUpdateRecord\">urlForUpdateRecord</h2>\n<span class=\"args\"> (id, modelName, snapshot) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/adapters/build-url-mixin.js#L194\">addon/-private/adapters/build-url-mixin.js:194</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>id</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> url</dd> </dl> </div> </div>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.BuildURLMixin.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.BuildURLMixin.html</a>\n  </p>\n</div>\n","data/classes/ds.errors":"<h1 class=\"api-header\"> DS.Errors Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.Object</p> <p>Uses: Ember.Enumerable</p> <p>Uses: Ember.Evented</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/errors.js#L15\">addon/-private/system/model/errors.js:15</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>Holds validation errors for a given record, organized by attribute names.</p> <p>Every <code>DS.Model</code> has an <code>errors</code> property that is an instance of <code>DS.Errors</code>. This can be used to display validation error messages returned from the server when a <code>record.save()</code> rejects.</p> <p>For Example, if you had a <code>User</code> model that looked like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  username: attr('string'),\n  email: attr('string')\n});\n</pre> <p>And you attempted to save a record that did not validate on the backend:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save();\n</pre> <p>Your backend would be expected to return an error response that described the problem, so that error messages can be generated on the app.</p> <p>API responses will be translated into instances of <code>DS.Errors</code> differently, depending on the specific combination of adapter and serializer used. You may want to check the documentation or the source code of the libraries that you are using, to know how they expect errors to be communicated.</p> <p>Errors can be displayed to the user by accessing their property name to get an array of all the error objects for that property. Each error object is a JavaScript object with two keys:</p> <ul> <li>\n<code>message</code> A string containing the error message from the backend</li> <li>\n<code>attribute</code> The name of the property associated with this error message</li> </ul> <pre class=\"highlight handlebars \" data-language=\"\">&lt;label&gt;Username: {{input value=username}} &lt;/label&gt;\n{{#each model.errors.username as |error|}}\n  &lt;div class=\"error\"&gt;\n    {{error.message}}\n  &lt;/div&gt;\n{{/each}}\n\n&lt;label&gt;Email: {{input value=email}} &lt;/label&gt;\n{{#each model.errors.email as |error|}}\n  &lt;div class=\"error\"&gt;\n    {{error.message}}\n  &lt;/div&gt;\n{{/each}}\n</pre> <p>You can also access the special <code>messages</code> property on the error object to get an array of all the error strings.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#each model.errors.messages as |message|}}\n  &lt;div class=\"error\"&gt;\n    {{message}}\n  &lt;/div&gt;\n{{/each}}\n</pre> </div> <div class=\"pane\" id=\"methods\">         <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_errorsFor\">errorsFor</h2>\n<span class=\"args\"> (attribute) </span><span class=\"type\">Array</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/errors.js#L136\">addon/-private/system/model/errors.js:136</a> </div> <div class=\"description\"> <p>Returns errors for a given attribute</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save().catch(function(){\n  user.get('errors').errorsFor('email'); // returns:\n  // [{attribute: \"email\", message: \"Doesn't look like a valid email.\"}]\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>attribute</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_has\">has</h2>\n<span class=\"args\"> (attribute) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/errors.js#L405\">addon/-private/system/model/errors.js:405</a> </div> <div class=\"description\"> <p>Checks if there is error messages for the given attribute.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    save: function(user) {\n       if (user.get('errors').has('email')) {\n         return alert('Please update your email before attempting to save.');\n       }\n       user.save();\n     }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>attribute</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> true if there some errors on given attribute</dd> </dl> </div> </div>    </div>\n<div class=\"pane\" id=\"properties\">    <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isEmpty\">isEmpty</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/errors.js#L202\">addon/-private/system/model/errors.js:202</a> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_length\">length</h2>\n<span class=\"type\">{Number}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/errors.js#L194\">addon/-private/system/model/errors.js:194</a> </div> <div class=\"description\"> <p>Total number of errors.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_messages\">messages</h2>\n<span class=\"type\">{Array}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/errors.js#L158\">addon/-private/system/model/errors.js:158</a> </div> <div class=\"description\"> <p>An array containing all of the error messages for this record. This is useful for displaying all errors to the user.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#each model.errors.messages as |message|}}\n  &lt;div class=\"error\"&gt;\n    {{message}}\n  &lt;/div&gt;\n{{/each}}\n</pre> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.Errors.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.Errors.html</a>\n  </p>\n</div>\n","data/classes/ds.filteredrecordarray":"<h1 class=\"api-header\"> DS.FilteredRecordArray Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.recordarray\">DS.RecordArray</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/filtered-record-array.js#L10\">addon/-private/system/record-arrays/filtered-record-array.js:10</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>Represents a list of records whose membership is determined by the store. As records are created, loaded, or modified, the store evaluates them to determine if they should be part of the record array.</p> </div> <div class=\"pane\" id=\"methods\">    <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_filterFunction\">filterFunction</h2>\n<span class=\"args\"> (record) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-arrays/filtered-record-array.js#L21\">addon/-private/system/record-arrays/filtered-record-array.js:21</a> </div> <div class=\"description\"> <p>The filterFunction is a function used to test records from the store to determine if they should be part of the record array.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var allPeople = store.peekAll('person');\nallPeople.mapBy('name'); // [\"Tom Dale\", \"Yehuda Katz\", \"Trek Glowacki\"]\n\nvar people = store.filter('person', function(person) {\n  if (person.get('name').match(/Katz$/)) { return true; }\n});\npeople.mapBy('name'); // [\"Yehuda Katz\"]\n\nvar notKatzFilter = function(person) {\n  return !person.get('name').match(/Katz$/);\n};\npeople.set('filterFunction', notKatzFilter);\npeople.mapBy('name'); // [\"Tom Dale\", \"Trek Glowacki\"]\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>record</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> `true` if the record should be in the array</dd> </dl> </div> </div>      </div>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.FilteredRecordArray.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.FilteredRecordArray.html</a>\n  </p>\n</div>\n","data/classes/ds.manyarray":"<h1 class=\"api-header\"> DS.ManyArray Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.Object</p> <p>Uses: Ember.MutableArray</p> <p>Uses: Ember.Evented</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/many-array.js#L12\">addon/-private/system/many-array.js:12</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>A <code>ManyArray</code> is a <code>MutableArray</code> that represents the contents of a has-many relationship.</p> <p>The <code>ManyArray</code> is instantiated lazily the first time the relationship is requested.</p> <h3 class=\"anchorable-toc\" id=\"toc_inverses\">Inverses</h3> <p>Often, the relationships in Ember Data applications will have an inverse. For example, imagine the following models are defined:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n</pre> <p>If you created a new instance of <code>App.Post</code> and added a <code>App.Comment</code> record to its <code>comments</code> has-many relationship, you would expect the comment's <code>post</code> property to be set to the post that contained the has-many.</p> <p>We call the record to which a relationship belongs the relationship's <em>owner</em>.</p> </div> <div class=\"pane\" id=\"methods\">     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reload\">reload</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/many-array.js#L236\">addon/-private/system/many-array.js:236</a> </div>  </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_save\">save</h2>\n<span class=\"type\"><a href=\"ds.promisearray\">DS.PromiseArray</a></span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/many-array.js#L244\">addon/-private/system/many-array.js:244</a> </div> <div class=\"description\"> <p>Saves all of the records in the <code>ManyArray</code>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.findRecord('inbox', 1).then(function(inbox) {\n  inbox.get('messages').then(function(messages) {\n    messages.forEach(function(message) {\n      message.set('isRead', true);\n    });\n    messages.save()\n  });\n});\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.promisearray\">DS.PromiseArray</a></span> </dt>\n<dd> promise</dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isLoaded\">isLoaded</h2>\n<span class=\"type\">Boolean</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/many-array.js#L109\">addon/-private/system/many-array.js:109</a> </div> <div class=\"description\"> <p>The loading state of this array</p> </div>  </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_meta\">meta</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/many-array.js#L124\">addon/-private/system/many-array.js:124</a> </div> <div class=\"description\"> <p>Metadata associated with the request for async hasMany relationships.</p> <p>Example</p> <p>Given that the server returns the following JSON payload when fetching a hasMany relationship:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"comments\": [{\n    \"id\": 1,\n    \"comment\": \"This is the first comment\",\n  }, {\n    // ...\n  }],\n\n  \"meta\": {\n    \"page\": 1,\n    \"total\": 5\n  }\n}\n</pre> <p>You can then access the metadata via the <code>meta</code> property:</p> <pre class=\"highlight js \" data-language=\"js\">post.get('comments').then(function(comments) {\n  var meta = comments.get('meta');\n\n  // meta.page =&gt; 1\n  // meta.total =&gt; 5\n});\n</pre> </div>  </div>   </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.ManyArray.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.ManyArray.html</a>\n  </p>\n</div>\n","data/classes/ds.recordarraymanager":"<h1 class=\"api-header\"> DS.RecordArrayManager Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Extends: Ember.Object</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L15\">addon/-private/system/record-array-manager.js:15</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_createAdapterPopulatedRecordArray\">createAdapterPopulatedRecordArray</h2>\n<span class=\"args\"> (typeClass, query) </span><span class=\"type\"><a href=\"ds.adapterpopulatedrecordarray\">DS.AdapterPopulatedRecordArray</a></span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L231\">addon/-private/system/record-array-manager.js:231</a> </div> <div class=\"description\"> <p>Create a <code>DS.AdapterPopulatedRecordArray</code> for a type with given query.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.adapterpopulatedrecordarray\">DS.AdapterPopulatedRecordArray</a></span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_createFilteredRecordArray\">createFilteredRecordArray</h2>\n<span class=\"args\"> (typeClass, filter, query) </span><span class=\"type\"><a href=\"ds.filteredrecordarray\">DS.FilteredRecordArray</a></span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L207\">addon/-private/system/record-array-manager.js:207</a> </div> <div class=\"description\"> <p>Create a <code>DS.FilteredRecordArray</code> for a type and register it for updates.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>filter</strong> <span class=\"type\">Function</span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt> <dd> (optional </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.filteredrecordarray\">DS.FilteredRecordArray</a></span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_createRecordArray\">createRecordArray</h2>\n<span class=\"args\"> (typeClass) </span><span class=\"type\"><a href=\"ds.recordarray\">DS.RecordArray</a></span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L188\">addon/-private/system/record-array-manager.js:188</a> </div> <div class=\"description\"> <p>Create a <code>DS.RecordArray</code> for a type.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>typeClass</strong> <span class=\"type\">Class</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.recordarray\">DS.RecordArray</a></span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_liveRecordArrayFor\">liveRecordArrayFor</h2>\n<span class=\"args\"> (typeClass) </span><span class=\"type\"><a href=\"ds.recordarray\">DS.RecordArray</a></span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L176\">addon/-private/system/record-array-manager.js:176</a> </div> <div class=\"description\"> <p>Get the <code>DS.RecordArray</code> for a type, which contains all loaded records of given type.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>typeClass</strong> <span class=\"type\">Class</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.recordarray\">DS.RecordArray</a></span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_registerFilteredRecordArray\">registerFilteredRecordArray</h2>\n<span class=\"args\"> (array, typeClass, filter) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L253\">addon/-private/system/record-array-manager.js:253</a> </div> <div class=\"description\"> <p>Register a RecordArray for a given type to be backed by a filter function. This will cause the array to update automatically when records of that type change attribute values or states.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>array</strong> <span class=\"type\"><a href=\"ds.recordarray\">DS.RecordArray</a></span>\n</dt>  <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>filter</strong> <span class=\"type\">Function</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unregisterRecordArray\">unregisterRecordArray</h2>\n<span class=\"args\"> (array) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L271\">addon/-private/system/record-array-manager.js:271</a> </div> <div class=\"description\"> <p>Unregister a RecordArray. So manager will not update this array.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>array</strong> <span class=\"type\"><a href=\"ds.recordarray\">DS.RecordArray</a></span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_updateFilter\">updateFilter</h2>\n<span class=\"args\"> (array, modelName, filter) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L150\">addon/-private/system/record-array-manager.js:150</a> </div> <div class=\"description\"> <p>This method is invoked if the <code>filterFunction</code> property is changed on a <code>DS.FilteredRecordArray</code>.</p> <p>It essentially re-runs the filter from scratch. This same method is invoked when the filter is created in th first place.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>array</strong> <span class=\"type\">Array</span>\n</dt>  <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>filter</strong> <span class=\"type\">Function</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_updateFilterRecordArray\">updateFilterRecordArray</h2>\n<span class=\"args\"> (array, filter, typeClass, record) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L108\">addon/-private/system/record-array-manager.js:108</a> </div> <div class=\"description\"> <p>Update an individual filter.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>array</strong> <span class=\"type\"><a href=\"ds.filteredrecordarray\">DS.FilteredRecordArray</a></span>\n</dt>  <dt>\n<strong>filter</strong> <span class=\"type\">Function</span>\n</dt>  <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>record</strong> <span class=\"type\">InternalModel</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"method_updateRecordArrays\">updateRecordArrays</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/record-array-manager.js#L48\">addon/-private/system/record-array-manager.js:48</a> </div> <div class=\"description\"> <p>This method is invoked whenever data is loaded into the store by the adapter or updated by the adapter, or when a record has changed.</p> <p>It updates all record arrays that a record belongs to.</p> <p>To avoid thrashing, it only runs at most once per run loop.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.RecordArrayManager.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.RecordArrayManager.html</a>\n  </p>\n</div>\n","data/classes/ds.snapshotrecordarray":"<h1 class=\"api-header\"> DS.SnapshotRecordArray Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot-record-array.js#L5\">addon/-private/system/snapshot-record-array.js:5</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_snapshots\">snapshots</h2>\n<span class=\"type\">Array</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot-record-array.js#L56\">addon/-private/system/snapshot-record-array.js:56</a> </div> <div class=\"description\"> <p>Get snapshots of the underlying record array</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> Array of snapshots</dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">    <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_adapterOptions\">adapterOptions</h2>\n<span class=\"type\">{Object}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot-record-array.js#L46\">addon/-private/system/snapshot-record-array.js:46</a> </div> <div class=\"description\"> <p>A hash of adapter options</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_length\">length</h2>\n<span class=\"type\">{Number}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot-record-array.js#L28\">addon/-private/system/snapshot-record-array.js:28</a> </div> <div class=\"description\"> <p>Number of records in the array</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_meta\">meta</h2>\n<span class=\"type\">{Object}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot-record-array.js#L40\">addon/-private/system/snapshot-record-array.js:40</a> </div> <div class=\"description\"> <p>Meta object</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_type\">type</h2>\n<span class=\"type\">{DS.Model}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot-record-array.js#L34\">addon/-private/system/snapshot-record-array.js:34</a> </div> <div class=\"description\"> <p>The type of the underlying records for the snapshots in the array, as a DS.Model</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.SnapshotRecordArray.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.SnapshotRecordArray.html</a>\n  </p>\n</div>\n","classes/ember.route":"<h1 class=\"api-header\"> Ember.Route Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.object\">Ember.Object</a></p> <p>Uses: <a href=\"ember.actionhandler\">Ember.ActionHandler</a></p> <p>Uses: <a href=\"ember.evented\">Ember.Evented</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L74\">packages/ember-routing/lib/system/route.js:74</a></p> <p>Module: <a href=\"../modules/ember-routing\">ember-routing</a></p> </div> <div class=\"description\"> <p>The <code>Ember.Route</code> class is used to define individual routes. Refer to the <a href=\"http://emberjs.com/guides/routing/\">routing guide</a> for documentation.</p> </div> <div class=\"pane\" id=\"methods\">        <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_activate\">activate</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L900\">packages/ember-routing/lib/system/route.js:900</a> </div> <div class=\"description\"> <p>This hook is executed when the router enters the route. It is not executed when the model for the route changes.</p> </div>  </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_afterModel\">afterModel</h2>\n<span class=\"args\"> (resolvedModel, transition) </span><span class=\"type\">Promise</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1357\">packages/ember-routing/lib/system/route.js:1357</a> </div> <div class=\"description\"> <p>This hook is called after this route's model has resolved. It follows identical async/promise semantics to <code>beforeModel</code> but is provided the route's resolved model in addition to the <code>transition</code>, and is therefore suited to performing logic that can only take place after the model has already resolved.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostsRoute = Ember.Route.extend({\n  afterModel: function(posts, transition) {\n    if (posts.get('length') === 1) {\n      this.transitionTo('post.show', posts.get('firstObject'));\n    }\n  }\n});\n</pre> <p>Refer to documentation for <code>beforeModel</code> for a description of transition-pausing semantics when a promise is returned from this hook.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>resolvedModel</strong> <span class=\"type\">Object</span>\n</dt> <dd> the value returned from `model`, or its resolved value if it was a promise </dd> <dt>\n<strong>transition</strong> <span class=\"type\"><a href=\"transition\">Transition</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> if the value returned from this hook is a promise, the transition will pause until the transition resolves. Otherwise, non-promise return values are not utilized in any way.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_beforeModel\">beforeModel</h2>\n<span class=\"args\"> (transition) </span><span class=\"type\">Promise</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1280\">packages/ember-routing/lib/system/route.js:1280</a> </div> <div class=\"description\"> <p>This hook is the first of the route entry validation hooks called when an attempt is made to transition into a route or one of its children. It is called before <code>model</code> and <code>afterModel</code>, and is appropriate for cases when:</p> <p>1) A decision can be made to redirect elsewhere without needing to resolve the model first. 2) Any async operations need to occur first before the model is attempted to be resolved.</p> <p>This hook is provided the current <code>transition</code> attempt as a parameter, which can be used to <code>.abort()</code> the transition, save it for a later <code>.retry()</code>, or retrieve values set on it from a previous hook. You can also just call <code>this.transitionTo</code> to another route to implicitly abort the <code>transition</code>.</p> <p>You can return a promise from this hook to pause the transition until the promise resolves (or rejects). This could be useful, for instance, for retrieving async code from the server that is required to enter a route.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostRoute = Ember.Route.extend({\n  beforeModel: function(transition) {\n    if (!App.Post) {\n      return Ember.$.getScript('/models/post.js');\n    }\n  }\n});\n</pre> <p>If <code>App.Post</code> doesn't exist in the above example, <code>beforeModel</code> will use jQuery's <code>getScript</code>, which returns a promise that resolves after the server has successfully retrieved and executed the code from the server. Note that if an error were to occur, it would be passed to the <code>error</code> hook on <code>Ember.Route</code>, but it's also possible to handle errors specific to <code>beforeModel</code> right from within the hook (to distinguish from the shared error handling behavior of the <code>error</code> hook):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostRoute = Ember.Route.extend({\n  beforeModel: function(transition) {\n    if (!App.Post) {\n      var self = this;\n      return Ember.$.getScript('post.js').then(null, function(e) {\n        self.transitionTo('help');\n\n        // Note that the above transitionTo will implicitly\n        // halt the transition. If you were to return\n        // nothing from this promise reject handler,\n        // according to promise semantics, that would\n        // convert the reject into a resolve and the\n        // transition would continue. To propagate the\n        // error so that it'd be handled by the `error`\n        // hook, you would have to\n        return Ember.RSVP.reject(e);\n      });\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>transition</strong> <span class=\"type\"><a href=\"transition\">Transition</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> if the value returned from this hook is a promise, the transition will pause until the transition resolves. Otherwise, non-promise return values are not utilized in any way.</dd> </dl> </div> </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_controllerFor\">controllerFor</h2>\n<span class=\"args\"> (name) </span><span class=\"type\"><a href=\"ember.controller\">Ember.Controller</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1695\">packages/ember-routing/lib/system/route.js:1695</a> </div> <div class=\"description\"> <p>Returns the controller for a particular route or name.</p> <p>The controller instance must already have been created, either through entering the associated route or using <code>generateController</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostRoute = Ember.Route.extend({\n  setupController: function(controller, post) {\n    this._super(controller, post);\n    this.controllerFor('posts').set('currentPost', post);\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the route or controller </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ember.controller\">Ember.Controller</a></span> </dt>\n </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_deactivate\">deactivate</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L891\">packages/ember-routing/lib/system/route.js:891</a> </div> <div class=\"description\"> <p>This hook is executed when the router completely exits this route. It is not executed when the model for the route changes.</p> </div>  </div>     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_disconnectOutlet\">disconnectOutlet</h2>\n<span class=\"args\"> (options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1981\">packages/ember-routing/lib/system/route.js:1981</a> </div> <div class=\"description\"> <p>Disconnects a view that has been rendered into an outlet.</p> <p>You may pass any or all of the following options to <code>disconnectOutlet</code>:</p> <ul> <li>\n<code>outlet</code>: the name of the outlet to clear (default: 'main')</li> <li>\n<code>parentView</code>: the name of the view containing the outlet to clear (default: the view rendered by the parent route)</li> </ul> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ApplicationRoute = App.Route.extend({\n  actions: {\n    showModal: function(evt) {\n      this.render(evt.modalName, {\n        outlet: 'modal',\n        into: 'application'\n      });\n    },\n    hideModal: function(evt) {\n      this.disconnectOutlet({\n        outlet: 'modal',\n        parentView: 'application'\n      });\n    }\n  }\n});\n</pre> <p>Alternatively, you can pass the <code>outlet</code> name directly as a string.</p> <p>Example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">hideModal: function(evt) {\n  this.disconnectOutlet('modal');\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Object|String</span>\n</dt> <dd> the options hash or outlet name </dd> </dl> </div> </div>               <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_intermediateTransitionTo\">intermediateTransitionTo</h2>\n<span class=\"args\"> (name, models) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1068\">packages/ember-routing/lib/system/route.js:1068</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p>Perform a synchronous transition into another route without attempting to resolve promises, update the URL, or abort any currently active asynchronous transitions (i.e. regular transitions caused by <code>transitionTo</code> or URL changes).</p> <p>This method is handy for performing intermediate transitions on the way to a final destination route, and is called internally by the default implementations of the <code>error</code> and <code>loading</code> handlers.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the route </dd> <dt>\n<strong>models</strong> <span class=\"type\">...Object</span>\n</dt> <dd> the model(s) to be used while transitioning to the route. </dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_model\">model</h2>\n<span class=\"args\"> (params, transition) </span><span class=\"type\">Object|Promise</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1428\">packages/ember-routing/lib/system/route.js:1428</a> </div> <div class=\"description\"> <p>A hook you can implement to convert the URL into the model for this route.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n</pre> <p>The model for the <code>post</code> route is <code>store.findRecord('post', params.post_id)</code>.</p> <p>By default, if your route has a dynamic segment ending in <code>_id</code>:</p> <ul> <li>The model class is determined from the segment (<code>post_id</code>'s class is <code>App.Post</code>)</li> <li>The find method is called on the model class with the value of the dynamic segment.</li> </ul> <p>Note that for routes with dynamic segments, this hook is not always executed. If the route is entered through a transition (e.g. when using the <code>link-to</code> Handlebars helper or the <code>transitionTo</code> method of routes), and a model context is already provided this hook is not called.</p> <p>A model context does not include a primitive string or number, which does cause the model hook to be called.</p> <p>Routes without dynamic segments will always execute the model hook.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// no dynamic segment, model hook always called\nthis.transitionTo('posts');\n\n// model passed in, so model hook not called\nthePost = store.findRecord('post', 1);\nthis.transitionTo('post', thePost);\n\n// integer passed in, model hook is called\nthis.transitionTo('post', 1);\n\n// model id passed in, model hook is called\n// useful for forcing the hook to execute\nthePost = store.findRecord('post', 1);\nthis.transitionTo('post', thePost.id);\n</pre> <p>This hook follows the asynchronous/promise semantics described in the documentation for <code>beforeModel</code>. In particular, if a promise returned from <code>model</code> fails, the error will be handled by the <code>error</code> hook on <code>Ember.Route</code>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostRoute = Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id);\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>params</strong> <span class=\"type\">Object</span>\n</dt> <dd> the parameters extracted from the URL </dd> <dt>\n<strong>transition</strong> <span class=\"type\"><a href=\"transition\">Transition</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object|Promise</span> </dt>\n<dd> the model for this route. If a promise is returned, the transition will pause until the promise resolves, and the resolved value of the promise will be used as the model for this route.</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelFor\">modelFor</h2>\n<span class=\"args\"> (name) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1761\">packages/ember-routing/lib/system/route.js:1761</a> </div> <div class=\"description\"> <p>Returns the resolved model of a parent (or any ancestor) route in a route hierarchy. During a transition, all routes must resolve a model object, and if a route needs access to a parent route's model in order to resolve a model (or just reuse the model from a parent), it can call <code>this.modelFor(theNameOfParentRoute)</code> to retrieve it. If the ancestor route's model was a promise, its resolved result is returned.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n    this.route('post', { path: '/post/:post_id' }, function() {\n      this.route('comments', { resetNamespace: true });\n    });\n});\n\nApp.CommentsRoute = Ember.Route.extend({\n    afterModel: function() {\n      this.set('post', this.modelFor('post'));\n    }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the route </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the model object</dd> </dl> </div> </div>     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_paramsFor\">paramsFor</h2>\n<span class=\"args\"> (name) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L346\">packages/ember-routing/lib/system/route.js:346</a> </div> <div class=\"description\"> <p>Retrieves parameters, for current route using the state.params variable and getQueryParamsFor, using the supplied routeName.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt>  </dl> </div> </div>    <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_redirect\">redirect</h2>\n<span class=\"args\"> (model, transition) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1391\">packages/ember-routing/lib/system/route.js:1391</a> </div> <div class=\"description\"> <p>A hook you can implement to optionally redirect to another route.</p> <p>If you call <code>this.transitionTo</code> from inside of this hook, this route will not be entered in favor of the other hook.</p> <p><code>redirect</code> and <code>afterModel</code> behave very similarly and are called almost at the same time, but they have an important distinction in the case that, from one of these hooks, a redirect into a child route of this route occurs: redirects from <code>afterModel</code> essentially invalidate the current attempt to enter this route, and will result in this route's <code>beforeModel</code>, <code>model</code>, and <code>afterModel</code> hooks being fired again within the new, redirecting transition. Redirects that occur within the <code>redirect</code> hook, on the other hand, will <em>not</em> cause these hooks to be fired again the second time around; in other words, by the time the <code>redirect</code> hook has been called, both the resolved model and attempted entry into this route are considered to be fully validated.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>model</strong> <span class=\"type\">Object</span>\n</dt> <dd> the model for this route </dd> <dt>\n<strong>transition</strong> <span class=\"type\"><a href=\"transition\">Transition</a></span>\n</dt> <dd> the transition object associated with the current transition </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_refresh\">refresh</h2>\n<span class=\"type\"><a href=\"transition\">Transition</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1090\">packages/ember-routing/lib/system/route.js:1090</a> <br>Available since 1.4.0 </div> <div class=\"description\"> <p>Refresh the model on this route and any child routes, firing the <code>beforeModel</code>, <code>model</code>, and <code>afterModel</code> hooks in a similar fashion to how routes are entered when transitioning in from other route. The current route params (e.g. <code>article_id</code>) will be passed in to the respective model hooks, and if a different model is returned, <code>setupController</code> and associated route hooks will re-fire as well.</p> <p>An example usage of this method is re-querying the server for the latest information using the same parameters as when the route was first entered.</p> <p>Note that this will cause <code>model</code> hooks to fire even on routes that were provided a model object when the route was initially entered.</p> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"transition\">Transition</a></span> </dt>\n<dd> the transition object associated with this attempted transition</dd> </dl> </div> </div>  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_render\">render</h2>\n<span class=\"args\"> (name, options) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1843\">packages/ember-routing/lib/system/route.js:1843</a> </div> <div class=\"description\"> <p><code>render</code> is used to render a template into a region of another template (indicated by an <code>{{outlet}}</code>). <code>render</code> is used both during the entry phase of routing (via the <code>renderTemplate</code> hook) and later in response to user interaction.</p> <p>For example, given the following minimal router and templates:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">Router.map(function() {\n  this.route('photos');\n});\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">&lt;!-- application.hbs --&gt;\n&lt;div class='something-in-the-app-hbs'&gt;\n  {{outlet \"anOutletName\"}}\n&lt;/div&gt;\n</pre>\n<pre class=\"highlight handlebars \" data-language=\"\">&lt;!-- photos.hbs --&gt;\n&lt;h1&gt;Photos&lt;/h1&gt;\n</pre> <p>You can render <code>photos.hbs</code> into the <code>\"anOutletName\"</code> outlet of <code>application.hbs</code> by calling <code>render</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// posts route\nEmber.Route.extend({\n  renderTemplate: function() {\n    this.render('photos', {\n      into: 'application',\n      outlet: 'anOutletName'\n    })\n  }\n});\n</pre> <p><code>render</code> additionally allows you to supply which <code>view</code>, <code>controller</code>, and <code>model</code> objects should be loaded and associated with the rendered template.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// posts route\nEmber.Route.extend({\n  renderTemplate: function(controller, model){\n    this.render('posts', {    // the template to render, referenced by name\n      into: 'application',    // the template to render into, referenced by name\n      outlet: 'anOutletName', // the outlet inside `options.template` to render into.\n      view: 'aViewName',      // the view to use for this template, referenced by name\n      controller: 'someControllerName', // the controller to use for this template, referenced by name\n      model: model            // the model to set on `options.controller`.\n    })\n  }\n});\n</pre> <p>The string values provided for the template name, view, and controller will eventually pass through to the resolver for lookup. See Ember.Resolver for how these are mapped to JavaScript objects in your application.</p> <p>Not all options need to be passed to <code>render</code>. Default values will be used based on the name of the route specified in the router or the Route's <code>controllerName</code>, <code>viewName</code> and <code>templateName</code> properties.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// router\nRouter.map(function() {\n  this.route('index');\n  this.route('post', { path: '/posts/:post_id' });\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">// post route\nPostRoute = App.Route.extend({\n  renderTemplate: function() {\n    this.render(); // all defaults apply\n  }\n});\n</pre> <p>The name of the <code>PostRoute</code>, defined by the router, is <code>post</code>.</p> <p>The following equivalent default options will be applied when the Route calls <code>render</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">//\nthis.render('post', {  // the template name associated with 'post' Route\n  into: 'application', // the parent route to 'post' Route\n  outlet: 'main',      // {{outlet}} and {{outlet 'main'}} are synonymous,\n  view: 'post',        // the view associated with the 'post' Route\n  controller: 'post',  // the controller associated with the 'post' Route\n})\n</pre> <p>By default the controller's <code>model</code> will be the route's model, so it does not need to be passed unless you wish to change which model is being used.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the template to render </dd> <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> the options <dl> <dt>\n<strong>into</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd>the template to render into, referenced by name. Defaults to the parent template</dd> <dt>\n<strong>outlet</strong> <span class=\"type\">[<a href=\"http://emberjs.com/api/classes/String.html\">String</a>]</span>\n</dt> <dd>the outlet inside `options.template` to render into. Defaults to 'main'</dd> <dt>\n<strong>controller</strong> <span class=\"type\">[String|Object]</span>\n</dt> <dd>the controller to use for this template, referenced by name or as a controller instance. Defaults to the Route's paired controller</dd> <dt>\n<strong>model</strong> <span class=\"type\">[Object]</span>\n</dt> <dd>the model object to set on `options.controller`. Defaults to the return value of the Route's model hook</dd> </dl> </dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_renderTemplate\">renderTemplate</h2>\n<span class=\"args\"> (controller, model) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1808\">packages/ember-routing/lib/system/route.js:1808</a> </div> <div class=\"description\"> <p>A hook you can use to render the template for the current route.</p> <p>This method is called with the controller for the current route and the model supplied by the <code>model</code> hook. By default, it renders the route's template, configured with the controller for the route.</p> <p>This method can be overridden to set up and render additional or alternative templates.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostsRoute = Ember.Route.extend({\n  renderTemplate: function(controller, model) {\n    var favController = this.controllerFor('favoritePost');\n\n    // Render the `favoritePost` template into\n    // the outlet `posts`, and display the `favoritePost`\n    // controller.\n    this.render('favoritePost', {\n      outlet: 'posts',\n      controller: favController\n    });\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>controller</strong> <span class=\"type\">Object</span>\n</dt> <dd> the route's controller </dd> <dt>\n<strong>model</strong> <span class=\"type\">Object</span>\n</dt> <dd> the route's model </dd> </dl> </div> </div>   <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_replaceWith\">replaceWith</h2>\n<span class=\"args\"> (name, models) </span><span class=\"type\"><a href=\"transition\">Transition</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1116\">packages/ember-routing/lib/system/route.js:1116</a> </div> <div class=\"description\"> <p>Transition into another route while replacing the current URL, if possible. This will replace the current history entry instead of adding a new one. Beside that, it is identical to <code>transitionTo</code> in all other respects. See 'transitionTo' for additional information regarding multiple models.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('index');\n  this.route('secret');\n});\n\nApp.SecretRoute = Ember.Route.extend({\n  afterModel: function() {\n    if (!authorized()){\n      this.replaceWith('index');\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the route or a URL </dd> <dt>\n<strong>models</strong> <span class=\"type\">...Object</span>\n</dt> <dd> the model(s) or identifier(s) to be used while transitioning to the route. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"transition\">Transition</a></span> </dt>\n<dd> the transition object associated with this attempted transition</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_resetController\">resetController</h2>\n<span class=\"args\"> (controller, isExiting, transition) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L436\">packages/ember-routing/lib/system/route.js:436</a> <br>Available since 1.7.0 </div> <div class=\"description\"> <p>A hook you can use to reset controller values either when the model changes or the route is exiting.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ArticlesRoute = Ember.Route.extend({\n  // ...\n\n  resetController: function(controller, isExiting, transition) {\n    if (isExiting) {\n      controller.set('page', 1);\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>controller</strong> <span class=\"type\">Controller</span>\n</dt> <dd> instance </dd> <dt>\n<strong>isExiting</strong> <span class=\"type\">Boolean</span>\n</dt>  <dt>\n<strong>transition</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_send\">send</h2>\n<span class=\"args\"> (name, args) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ember.actionhandler#method_send\">Ember.ActionHandler</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1152\">packages/ember-routing/lib/system/route.js:1152</a> </div> <div class=\"description\"> <p>Sends an action to the router, which will delegate it to the currently active route hierarchy per the bubbling rules explained under <code>actions</code>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('index');\n});\n\nApp.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    track: function(arg) {\n      console.log(arg, 'was clicked');\n    }\n  }\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    trackIfDebug: function(arg) {\n      if (debug) {\n        this.send('track', arg);\n      }\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the action to trigger </dd> <dt>\n<strong>args</strong> <span class=\"type\">...*</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (model, params) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1589\">packages/ember-routing/lib/system/route.js:1589</a> </div> <div class=\"description\"> <p>A hook you can implement to convert the route's model into parameters for the URL.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n\nApp.PostRoute = Ember.Route.extend({\n  model: function(params) {\n    // the server returns `{ id: 12 }`\n    return Ember.$.getJSON('/posts/' + params.post_id);\n  },\n\n  serialize: function(model) {\n    // this will make the URL `/posts/12`\n    return { post_id: model.id };\n  }\n});\n</pre> <p>The default <code>serialize</code> method will insert the model's <code>id</code> into the route's dynamic segment (in this case, <code>:post_id</code>) if the segment contains '<em>id'. If the route has multiple dynamic segments or does not contain '</em>id', <code>serialize</code> will return <code>Ember.getProperties(model, params)</code></p> <p>This method is called when <code>transitionTo</code> is called with a context in order to populate the URL.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>model</strong> <span class=\"type\">Object</span>\n</dt> <dd> the routes model </dd> <dt>\n<strong>params</strong> <span class=\"type\">Array</span>\n</dt> <dd> an Array of parameter names for the current route (in the example, `['post_id']`. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the serialized parameters</dd> </dl> </div> </div>      <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_setupController\">setupController</h2>\n<span class=\"args\"> (controller, model) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L1628\">packages/ember-routing/lib/system/route.js:1628</a> </div> <div class=\"description\"> <p>A hook you can use to setup the controller for the current route.</p> <p>This method is called with the controller for the current route and the model supplied by the <code>model</code> hook.</p> <p>By default, the <code>setupController</code> hook sets the <code>model</code> property of the controller to the <code>model</code>.</p> <p>If you implement the <code>setupController</code> hook in your Route, it will prevent this default behavior. If you want to preserve that behavior when implementing your <code>setupController</code> function, make sure to call <code>_super</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PhotosRoute = Ember.Route.extend({\n  model: function() {\n    return this.store.findAll('photo');\n  },\n\n  setupController: function(controller, model) {\n    // Call _super for default behavior\n    this._super(controller, model);\n    // Implement your custom setup after\n    this.controllerFor('application').set('showingPhotos', true);\n  }\n});\n</pre> <p>The provided controller will be one resolved based on the name of this route.</p> <p>If no explicit controller is defined, Ember will automatically create one.</p> <p>As an example, consider the router:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n</pre> <p>For the <code>post</code> route, a controller named <code>App.PostController</code> would be used if it is defined. If it is not defined, a basic <code>Ember.Controller</code> instance would be used.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.PostRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    controller.set('model', model);\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>controller</strong> <span class=\"type\">Controller</span>\n</dt> <dd> instance </dd> <dt>\n<strong>model</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div>     <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_transitionTo\">transitionTo</h2>\n<span class=\"args\"> (name, models, options) </span><span class=\"type\"><a href=\"transition\">Transition</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L909\">packages/ember-routing/lib/system/route.js:909</a> </div> <div class=\"description\"> <p>Transition the application into another route. The route may be either a single route or route path:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">this.transitionTo('blogPosts');\nthis.transitionTo('blogPosts.recentEntries');\n</pre> <p>Optionally supply a model for the route in question. The model will be serialized into the URL using the <code>serialize</code> hook of the route:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">this.transitionTo('blogPost', aPost);\n</pre> <p>If a literal is passed (such as a number or a string), it will be treated as an identifier instead. In this case, the <code>model</code> hook of the route will be triggered:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">this.transitionTo('blogPost', 1);\n</pre> <p>Multiple models will be applied last to first recursively up the route tree.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('blogPost', { path:':blogPostId' }, function() {\n    this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });\n  });\n});\n\nthis.transitionTo('blogComment', aPost, aComment);\nthis.transitionTo('blogComment', 1, 13);\n</pre> <p>It is also possible to pass a URL (a string that starts with a <code>/</code>). This is intended for testing and debugging purposes and should rarely be used in production code.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">this.transitionTo('/');\nthis.transitionTo('/blog/post/1/comment/13');\nthis.transitionTo('/blog/posts?sort=title');\n</pre> <p>An options hash with a <code>queryParams</code> property may be provided as the final argument to add query parameters to the destination URL.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">this.transitionTo('blogPost', 1, {\n  queryParams: {showComments: 'true'}\n});\n\n// if you just want to transition the query parameters without changing the route\nthis.transitionTo({queryParams: {sort: 'date'}});\n</pre> <p>See also <a href=\"#method_replaceWith\">replaceWith</a>.</p> <p>Simple Transition Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('index');\n  this.route('secret');\n  this.route('fourOhFour', { path: '*:' });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    moveToSecret: function(context) {\n      if (authorized()) {\n        this.transitionTo('secret', context);\n      } else {\n        this.transitionTo('fourOhFour');\n      }\n    }\n  }\n});\n</pre> <p>Transition to a nested route</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('articles', { path: '/articles' }, function() {\n    this.route('new');\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    transitionToNewArticle: function() {\n      this.transitionTo('articles.new');\n    }\n  }\n});\n</pre> <p>Multiple Models Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('index');\n\n  this.route('breakfast', { path: ':breakfastId' }, function() {\n    this.route('cereal', { path: ':cerealId', resetNamespace: true });\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    moveToChocolateCereal: function() {\n      var cereal = { cerealId: 'ChocolateYumminess' };\n      var breakfast = { breakfastId: 'CerealAndMilk' };\n\n      this.transitionTo('cereal', breakfast, cereal);\n    }\n  }\n});\n</pre> <p>Nested Route with Query String Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.Router.map(function() {\n  this.route('fruits', function() {\n    this.route('apples');\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    transitionToApples: function() {\n      this.transitionTo('fruits.apples', {queryParams: {color: 'red'}});\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span>\n</dt> <dd> the name of the route or a URL </dd> <dt>\n<strong>models</strong> <span class=\"type\">...Object</span>\n</dt> <dd> the model(s) or identifier(s) to be used while transitioning to the route. </dd> <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> optional hash with a queryParams property containing a mapping of query parameters </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"transition\">Transition</a></span> </dt>\n<dd> the transition object associated with this attempted transition</dd> </dl> </div> </div>   </div>\n<div class=\"pane\" id=\"events\">  <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_activate\">activate</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L718\">packages/ember-routing/lib/system/route.js:718</a> <br>Available since 1.9.0 </div> <div class=\"description\"> <p>This event is triggered when the router enters the route. It is not executed when the model for the route changes.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ApplicationRoute = Ember.Route.extend({\n  collectAnalytics: function(){\n    collectAnalytics();\n  }.on('activate')\n});\n</pre> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_deactivate\">deactivate</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L735\">packages/ember-routing/lib/system/route.js:735</a> <br>Available since 1.9.0 </div> <div class=\"description\"> <p>This event is triggered when the router completely exits this route. It is not executed when the model for the route changes.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.IndexRoute = Ember.Route.extend({\n  trackPageLeaveAnalytics: function(){\n    trackPageLeaveAnalytics();\n  }.on('deactivate')\n});\n</pre> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_didTransition\">didTransition</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L611\">packages/ember-routing/lib/system/route.js:611</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p>The <code>didTransition</code> action is fired after a transition has successfully been completed. This occurs after the normal model hooks (<code>beforeModel</code>, <code>model</code>, <code>afterModel</code>, <code>setupController</code>) have resolved. The <code>didTransition</code> action has no arguments, however, it can be useful for tracking page views or resetting state on the controller.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.LoginRoute = Ember.Route.extend({\n  actions: {\n    didTransition: function() {\n      this.controller.get('errors.base').clear();\n      return true; // Bubble the didTransition event\n    }\n  }\n});\n</pre> </div>  </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_error\">error</h2>\n<span class=\"args\"> (error, transition) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L663\">packages/ember-routing/lib/system/route.js:663</a> </div> <div class=\"description\"> <p>When attempting to transition into a route, any of the hooks may return a promise that rejects, at which point an <code>error</code> action will be fired on the partially-entered routes, allowing for per-route error handling logic, or shared error handling logic defined on a parent route.</p> <p>Here is an example of an error handler that will be invoked for rejected promises from the various hooks on the route, as well as any unhandled errors from child routes:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.AdminRoute = Ember.Route.extend({\n  beforeModel: function() {\n    return Ember.RSVP.reject('bad things!');\n  },\n\n  actions: {\n    error: function(error, transition) {\n      // Assuming we got here due to the error in `beforeModel`,\n      // we can expect that error === \"bad things!\",\n      // but a promise model rejecting would also\n      // call this hook, as would any errors encountered\n      // in `afterModel`.\n\n      // The `error` hook is also provided the failed\n      // `transition`, which can be stored and later\n      // `.retry()`d if desired.\n\n      this.transitionTo('login');\n    }\n  }\n});\n</pre> <p><code>error</code> actions that bubble up all the way to <code>ApplicationRoute</code> will fire a default error handler that logs the error. You can specify your own global default error handler by overriding the <code>error</code> handler on <code>ApplicationRoute</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    error: function(error, transition) {\n      this.controllerFor('banner').displayError(error.message);\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>error</strong> <span class=\"type\">Error</span>\n</dt>  <dt>\n<strong>transition</strong> <span class=\"type\"><a href=\"transition\">Transition</a></span>\n</dt>  </dl> </div> </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_loading\">loading</h2>\n<span class=\"args\"> (transition, route) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L635\">packages/ember-routing/lib/system/route.js:635</a> <br>Available since 1.2.0 </div> <div class=\"description\"> <p>The <code>loading</code> action is fired on the route when a route's <code>model</code> hook returns a promise that is not already resolved. The current <code>Transition</code> object is the first parameter and the route that triggered the loading event is the second parameter.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    loading: function(transition, route) {\n      let controller = this.controllerFor('foo');\n      controller.set('currentlyLoading', true);\n\n      transition.finally(function() {\n        controller.set('currentlyLoading', false);\n      });\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>transition</strong> <span class=\"type\"><a href=\"transition\">Transition</a></span>\n</dt>  <dt>\n<strong>route</strong> <span class=\"type\"><a href=\"ember.route\">Ember.Route</a></span>\n</dt> <dd> The route that triggered the loading event </dd> </dl> </div> </div> <div class=\"event public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"event_willTransition\">willTransition</h2>\n<span class=\"args\"> (transition) </span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L570\">packages/ember-routing/lib/system/route.js:570</a> </div> <div class=\"description\"> <p>The <code>willTransition</code> action is fired at the beginning of any attempted transition with a <code>Transition</code> object as the sole argument. This action can be used for aborting, redirecting, or decorating the transition from the currently active routes.</p> <p>A good example is preventing navigation when a form is half-filled out:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.ContactFormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: function(transition) {\n      if (this.controller.get('userHasEnteredData')) {\n        this.controller.displayNavigationConfirm();\n        transition.abort();\n      }\n    }\n  }\n});\n</pre> <p>You can also redirect elsewhere by calling <code>this.transitionTo('elsewhere')</code> from within <code>willTransition</code>. Note that <code>willTransition</code> will not be fired for the redirecting <code>transitionTo</code>, since <code>willTransition</code> doesn't fire when there is already a transition underway. If you want subsequent <code>willTransition</code> actions to fire for the redirecting transition, you must first explicitly call <code>transition.abort()</code>.</p> <p>To allow the <code>willTransition</code> event to continue bubbling to the parent route, use <code>return true;</code>. When the <code>willTransition</code> method has a return value of <code>true</code> then the parent route's <code>willTransition</code> method will be fired, enabling \"bubbling\" behavior for the event.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>transition</strong> <span class=\"type\"><a href=\"transition\">Transition</a></span>\n</dt>  </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">        <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_controller\">controller</h2>\n<span class=\"type\"><a href=\"ember.controller\">Ember.Controller</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L752\">packages/ember-routing/lib/system/route.js:752</a> <br>Available since 1.6.0 </div> <div class=\"description\"> <p>The controller associated with this route.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">App.FormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: function(transition) {\n      if (this.controller.get('userHasEnteredData') &amp;&amp;\n          !confirm('Are you sure you want to abandon progress?')) {\n        transition.abort();\n      } else {\n        // Bubble the `willTransition` action so that\n        // parent routes can decide whether or not to abort.\n        return true;\n      }\n    }\n  }\n});\n</pre> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_controllerName\">controllerName</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L548\">packages/ember-routing/lib/system/route.js:548</a> <br>Available since 1.4.0 </div> <div class=\"description\"> <p>The name of the controller to associate with this route.</p> <p>By default, Ember will lookup a route's controller that matches the name of the route (i.e. <code>App.PostController</code> for <code>App.PostRoute</code>). However, if you would like to define a specific controller to use, you can do so using this property.</p> <p>This is useful in many ways, as the controller specified will be:</p> <ul> <li>passed to the <code>setupController</code> method.</li> <li>used as the controller for the view being rendered by the route.</li> <li>returned from a call to <code>controllerFor</code> for the route.</li> </ul> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>    <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_queryParams\">queryParams</h2>\n<span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L86\">packages/ember-routing/lib/system/route.js:86</a> </div> <div class=\"description\"> <p>Configuration hash for this route's queryParams. The possible configuration options and their defaults are as follows (assuming a query param whose controller property is <code>page</code>):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">queryParams: {\n  page: {\n    // By default, controller query param properties don't\n    // cause a full transition when they are changed, but\n    // rather only cause the URL to update. Setting\n    // `refreshModel` to true will cause an \"in-place\"\n    // transition to occur, whereby the model hooks for\n    // this route (and any child routes) will re-fire, allowing\n    // you to reload models (e.g., from the server) using the\n    // updated query param values.\n    refreshModel: false,\n\n    // By default, changes to controller query param properties\n    // cause the URL to update via `pushState`, which means an\n    // item will be added to the browser's history, allowing\n    // you to use the back button to restore the app to the\n    // previous state before the query param property was changed.\n    // Setting `replace` to true will use `replaceState` (or its\n    // hash location equivalent), which causes no browser history\n    // item to be added. This options name and default value are\n    // the same as the `link-to` helper's `replace` option.\n    replace: false,\n\n    // By default, the query param URL key is the same name as\n    // the controller property name. Use `as` to specify a\n    // different URL key.\n    as: 'page'\n  }\n}\n</pre> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_routeName\">routeName</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L130\">packages/ember-routing/lib/system/route.js:130</a> </div> <div class=\"description\"> <p>The name of the route, dot-delimited.</p> <p>For example, a route found at <code>app/routes/posts/post.js</code> or <code>app/posts/post/route.js</code> (with pods) will have a <code>routeName</code> of <code>posts.post</code>.</p> </div>  </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_templateName\">templateName</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L524\">packages/ember-routing/lib/system/route.js:524</a> <br>Available since 1.4.0 </div> <div class=\"description\"> <p>The name of the template to use by default when rendering this routes template.</p> <p>This is similar with <code>viewName</code>, but is useful when you just want a custom template without a view.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var PostsList = Ember.Route.extend({\n  templateName: 'posts/list'\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();\n</pre> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_viewName\">viewName</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-routing/lib/system/route.js#L496\">packages/ember-routing/lib/system/route.js:496</a> <br>Available since 1.4.0 </div> <div class=\"description\"> <p>The name of the view to use by default when rendering this routes template.</p> <p>When rendering a template, the route will, by default, determine the template and view to use from the name of the route itself. If you need to define a specific view, set this property.</p> <p>This is useful when multiple routes would benefit from using the same view because it doesn't require a custom <code>renderTemplate</code> method. For example, the following routes will all render using the <code>App.PostsListView</code> view:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var PostsList = Ember.Route.extend({\n  viewName: 'postsList'\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();\n</pre> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.Route.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.Route.html</a>\n  </p>\n</div>\n","classes/ember.view":"<h1 class=\"api-header\"> Ember.View Class  </h1>  <p>DEPRECATED</p> <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.coreview\">Ember.CoreView</a></p> <p>Uses: Ember.ViewSupport</p> <p>Uses: Ember.ViewContextSupport</p> <p>Uses: Ember.ViewChildViewsSupport</p> <p>Uses: <a href=\"ember.classnamessupport\">Ember.ClassNamesSupport</a></p> <p>Uses: Ember.AttributeBindingsSupport</p> <p>Uses: <a href=\"ember.legacyviewsupport\">Ember.LegacyViewSupport</a></p> <p>Uses: <a href=\"ember.instrumentationsupport\">Ember.InstrumentationSupport</a></p> <p>Uses: <a href=\"ember.visibilitysupport\">Ember.VisibilitySupport</a></p> <p>Uses: <a href=\"ember.ariarolesupport\">Ember.AriaRoleSupport</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-views/lib/views/view.js#L20\">packages/ember-views/lib/views/view.js:20</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"description\"> <p><code>Ember.View</code> is the class in Ember responsible for encapsulating templates of HTML content, combining templates with data to render as sections of a page's DOM, and registering and responding to user-initiated events.</p> <h2 class=\"anchorable-toc\" id=\"toc_html-tag\">HTML Tag</h2> <p>The default HTML tag name used for a view's DOM representation is <code>div</code>. This can be customized by setting the <code>tagName</code> property. The following view class:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">ParagraphView = Ember.View.extend({\n  tagName: 'em'\n});\n</pre> <p>Would result in instances with the following HTML:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;em id=\"ember1\" class=\"ember-view\"&gt;&lt;/em&gt;\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_html-code-class-code-attribute\">HTML <code>class</code> Attribute</h2> <p>The HTML <code>class</code> attribute of a view's tag can be set by providing a <code>classNames</code> property that is set to an array of strings:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyView = Ember.View.extend({\n  classNames: ['my-class', 'my-other-class']\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view my-class my-other-class\"&gt;&lt;/div&gt;\n</pre> <p><code>class</code> attribute values can also be set by providing a <code>classNameBindings</code> property set to an array of properties names for the view. The return value of these properties will be added as part of the value for the view's <code>class</code> attribute. These properties can be computed properties:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: ['propertyA', 'propertyB'],\n  propertyA: 'from-a',\n  propertyB: Ember.computed(function() {\n    if (someLogic) { return 'from-b'; }\n  })\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view from-a from-b\"&gt;&lt;/div&gt;\n</pre> <p>If the value of a class name binding returns a boolean the property name itself will be used as the class name if the property is true. The class name will not be added if the value is <code>false</code> or <code>undefined</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: ['hovered'],\n  hovered: true\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view hovered\"&gt;&lt;/div&gt;\n</pre> <p>When using boolean class name bindings you can supply a string value other than the property name for use as the <code>class</code> HTML attribute by appending the preferred value after a \":\" character when defining the binding:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: ['awesome:so-very-cool'],\n  awesome: true\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view so-very-cool\"&gt;&lt;/div&gt;\n</pre> <p>Boolean value class name bindings whose property names are in a camelCase-style format will be converted to a dasherized format:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view is-urgent\"&gt;&lt;/div&gt;\n</pre> <p>Class name bindings can also refer to object values that are found by traversing a path relative to the view itself:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyView = Ember.View.extend({\n  classNameBindings: ['messages.empty']\n  messages: Ember.Object.create({\n    empty: true\n  })\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view empty\"&gt;&lt;/div&gt;\n</pre> <p>If you want to add a class name for a property which evaluates to true and and a different class name if it evaluates to false, you can pass a binding like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false\nEmber.View.extend({\n  classNameBindings: ['isEnabled:enabled:disabled']\n  isEnabled: true\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view enabled\"&gt;&lt;/div&gt;\n</pre> <p>When isEnabled is <code>false</code>, the resulting HTML representation looks like this:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view disabled\"&gt;&lt;/div&gt;\n</pre> <p>This syntax offers the convenience to add a class if a property is <code>false</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// Applies no class when isEnabled is true and class 'disabled' when isEnabled is false\nEmber.View.extend({\n  classNameBindings: ['isEnabled::disabled']\n  isEnabled: true\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view\"&gt;&lt;/div&gt;\n</pre> <p>When the <code>isEnabled</code> property on the view is set to <code>false</code>, it will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view disabled\"&gt;&lt;/div&gt;\n</pre> <p>Updates to the value of a class name binding will result in automatic update of the HTML <code>class</code> attribute in the view's rendered HTML representation. If the value becomes <code>false</code> or <code>undefined</code> the class name will be removed.</p> <p>Both <code>classNames</code> and <code>classNameBindings</code> are concatenated properties. See <a href=\"ember.object\">Ember.Object</a> documentation for more information about concatenated properties.</p> <h2 class=\"anchorable-toc\" id=\"toc_html-attributes\">HTML Attributes</h2> <p>The HTML attribute section of a view's tag can be set by providing an <code>attributeBindings</code> property set to an array of property names on the view. The return value of these properties will be used as the value of the view's HTML associated attribute:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AnchorView = Ember.View.extend({\n  tagName: 'a',\n  attributeBindings: ['href'],\n  href: 'http://google.com'\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"&gt;&lt;/a&gt;\n</pre> <p>One property can be mapped on to another by placing a \":\" between the source property and the destination property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AnchorView = Ember.View.extend({\n  tagName: 'a',\n  attributeBindings: ['url:href'],\n  url: 'http://google.com'\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"&gt;&lt;/a&gt;\n</pre> <p>Namespaced attributes (e.g. <code>xlink:href</code>) are supported, but have to be mapped, since <code>:</code> is not a valid character for properties in Javascript:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">UseView = Ember.View.extend({\n  tagName: 'use',\n  attributeBindings: ['xlinkHref:xlink:href'],\n  xlinkHref: '#triangle'\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;use xlink:href=\"#triangle\"&gt;&lt;/use&gt;\n</pre> <p>If the return value of an <code>attributeBindings</code> monitored property is a boolean the property's value will be set as a coerced string:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyTextInput = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n  disabled: false\n});\n</pre> <p>Will result in a view instance with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;input id=\"ember1\" class=\"ember-view\" disabled=\"false\" /&gt;\n</pre> <p><code>attributeBindings</code> can refer to computed properties:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyTextInput = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n  disabled: Ember.computed(function() {\n    if (someLogic) {\n      return true;\n    } else {\n      return false;\n    }\n  })\n});\n</pre> <p>To prevent setting an attribute altogether, use <code>null</code> or <code>undefined</code> as the return value of the <code>attributeBindings</code> monitored property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">MyTextInput = Ember.View.extend({\n  tagName: 'form',\n  attributeBindings: ['novalidate'],\n  novalidate: null\n});\n</pre> <p>Updates to the property of an attribute binding will result in automatic update of the HTML attribute in the view's rendered HTML representation.</p> <p><code>attributeBindings</code> is a concatenated property. See <a href=\"ember.object\">Ember.Object</a> documentation for more information about concatenated properties.</p> <h2 class=\"anchorable-toc\" id=\"toc_templates\">Templates</h2> <p>The HTML contents of a view's rendered representation are determined by its template. Templates can be any function that accepts an optional context parameter and returns a string of HTML that will be inserted within the view's tag. Most typically in Ember this function will be a compiled template.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  template: Ember.HTMLBars.compile('I am the template')\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view\"&gt;I am the template&lt;/div&gt;\n</pre> <p>Within an Ember application is more common to define a Handlebars templates as part of a page:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;script type='text/x-handlebars' data-template-name='some-template'&gt;\n  Hello\n&lt;/script&gt;\n</pre> <p>And associate it by name using a view's <code>templateName</code> property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  templateName: 'some-template'\n});\n</pre> <p>If you have nested routes, your Handlebars template will look like this:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;script type='text/x-handlebars' data-template-name='posts/new'&gt;\n  &lt;h1&gt;New Post&lt;/h1&gt;\n&lt;/script&gt;\n</pre> <p>And <code>templateName</code> property:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  templateName: 'posts/new'\n});\n</pre> <p>Using a value for <code>templateName</code> that does not have a template with a matching <code>data-template-name</code> attribute will throw an error.</p> <p>For views classes that may have a template later defined (e.g. as the block portion of a <code>{{view}}</code> helper call in another template or in a subclass), you can provide a <code>defaultTemplate</code> property set to compiled template function. If a template is not later provided for the view instance the <code>defaultTemplate</code> value will be used:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  defaultTemplate: Ember.HTMLBars.compile('I was the default'),\n  template: null,\n  templateName: null\n});\n</pre> <p>Will result in instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view\"&gt;I was the default&lt;/div&gt;\n</pre> <p>If a <code>template</code> or <code>templateName</code> is provided it will take precedence over <code>defaultTemplate</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  defaultTemplate: Ember.HTMLBars.compile('I was the default')\n});\n\naView = AView.create({\n  template: Ember.HTMLBars.compile('I was the template, not default')\n});\n</pre> <p>Will result in the following HTML representation when rendered:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view\"&gt;I was the template, not default&lt;/div&gt;\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_view-context\">View Context</h2> <p>The default context of the compiled template is the view's controller:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  template: Ember.HTMLBars.compile('Hello {{excitedGreeting}}')\n});\n\naController = Ember.Object.create({\n  firstName: 'Barry',\n  excitedGreeting: Ember.computed('content.firstName', function() {\n    return this.get('content.firstName') + '!!!';\n  })\n});\n\naView = AView.create({\n  controller: aController\n});\n</pre> <p>Will result in an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view\"&gt;Hello Barry!!!&lt;/div&gt;\n</pre> <p>A context can also be explicitly supplied through the view's <code>context</code> property. If the view has neither <code>context</code> nor <code>controller</code> properties, the <code>parentView</code>'s context will be used.</p> <h2 class=\"anchorable-toc\" id=\"toc_layouts\">Layouts</h2> <p>Views can have a secondary template that wraps their main template. Like primary templates, layouts can be any function that accepts an optional context parameter and returns a string of HTML that will be inserted inside view's tag. Views whose HTML element is self closing (e.g. <code>&lt;input /&gt;</code>) cannot have a layout and this property will be ignored.</p> <p>Most typically in Ember a layout will be a compiled template.</p> <p>A view's layout can be set directly with the <code>layout</code> property or reference an existing template by name with the <code>layoutName</code> property.</p> <p>A template used as a layout must contain a single use of the <code>{{yield}}</code> helper. The HTML contents of a view's rendered <code>template</code> will be inserted at this location:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AViewWithLayout = Ember.View.extend({\n  layout: Ember.HTMLBars.compile(\"&lt;div class='my-decorative-class'&gt;{{yield}}&lt;/div&gt;\"),\n  template: Ember.HTMLBars.compile(\"I got wrapped\")\n});\n</pre> <p>Will result in view instances with an HTML representation of:</p> <pre class=\"highlight html \" data-language=\"html\">&lt;div id=\"ember1\" class=\"ember-view\"&gt;\n  &lt;div class=\"my-decorative-class\"&gt;\n    I got wrapped\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre> <p>See <a href=\"ember.templates.helpers#method_yield\">Ember.Templates.helpers.yield</a> for more information.</p> <h2 class=\"anchorable-toc\" id=\"toc_responding-to-browser-events\">Responding to Browser Events</h2> <p>Views can respond to user-initiated events in one of three ways: method implementation, through an event manager, and through <code>{{action}}</code> helper use in their template or layout.</p> <h3 class=\"anchorable-toc\" id=\"toc_method-implementation\">Method Implementation</h3> <p>Views can respond to user-initiated events by implementing a method that matches the event name. A <code>jQuery.Event</code> object will be passed as the argument to this method.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  click: function(event) {\n    // will be called when an instance's\n    // rendered element is clicked\n  }\n});\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_event-managers\">Event Managers</h3> <p>Views can define an object as their <code>eventManager</code> property. This object can then implement methods that match the desired event names. Matching events that occur on the view's rendered HTML or the rendered HTML of any of its DOM descendants will trigger this method. A <code>jQuery.Event</code> object will be passed as the first argument to the method and an <code>Ember.View</code> object as the second. The <code>Ember.View</code> will be the view whose rendered HTML was interacted with. This may be the view with the <code>eventManager</code> property or one of its descendant views.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  eventManager: Ember.Object.create({\n    doubleClick: function(event, view) {\n      // will be called when an instance's\n      // rendered element or any rendering\n      // of this view's descendant\n      // elements is clicked\n    }\n  })\n});\n</pre> <p>An event defined for an event manager takes precedence over events of the same name handled through methods on the view.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">AView = Ember.View.extend({\n  mouseEnter: function(event) {\n    // will never trigger.\n  },\n  eventManager: Ember.Object.create({\n    mouseEnter: function(event, view) {\n      // takes precedence over AView#mouseEnter\n    }\n  })\n});\n</pre> <p>Similarly a view's event manager will take precedence for events of any views rendered as a descendant. A method name that matches an event name will not be called if the view instance was rendered inside the HTML representation of a view that has an <code>eventManager</code> property defined that handles events of the name. Events not handled by the event manager will still trigger method calls on the descendant.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var App = Ember.Application.create();\nApp.OuterView = Ember.View.extend({\n  template: Ember.HTMLBars.compile(\"outer {{#view 'inner'}}inner{{/view}} outer\"),\n  eventManager: Ember.Object.create({\n    mouseEnter: function(event, view) {\n      // view might be instance of either\n      // OuterView or InnerView depending on\n      // where on the page the user interaction occurred\n    }\n  })\n});\n\nApp.InnerView = Ember.View.extend({\n  click: function(event) {\n    // will be called if rendered inside\n    // an OuterView because OuterView's\n    // eventManager doesn't handle click events\n  },\n  mouseEnter: function(event) {\n    // will never be called if rendered inside\n    // an OuterView.\n  }\n});\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_code-action-code-helper\">\n<code>{{action}}</code> Helper</h3> <p>See <a href=\"ember.templates.helpers#method_action\">Ember.Templates.helpers.action</a>.</p> <h3 class=\"anchorable-toc\" id=\"toc_event-names\">Event Names</h3> <p>All of the event handling approaches described above respond to the same set of events. The names of the built-in events are listed below. (The hash of built-in events exists in <code>Ember.EventDispatcher</code>.) Additional, custom events can be registered by using <code>Ember.Application.customEvents</code>.</p> <p>Touch events:</p> <ul> <li><code>touchStart</code></li> <li><code>touchMove</code></li> <li><code>touchEnd</code></li> <li><code>touchCancel</code></li> </ul> <p>Keyboard events</p> <ul> <li><code>keyDown</code></li> <li><code>keyUp</code></li> <li><code>keyPress</code></li> </ul> <p>Mouse events</p> <ul> <li><code>mouseDown</code></li> <li><code>mouseUp</code></li> <li><code>contextMenu</code></li> <li><code>click</code></li> <li><code>doubleClick</code></li> <li><code>mouseMove</code></li> <li><code>focusIn</code></li> <li><code>focusOut</code></li> <li><code>mouseEnter</code></li> <li><code>mouseLeave</code></li> </ul> <p>Form events:</p> <ul> <li><code>submit</code></li> <li><code>change</code></li> <li><code>focusIn</code></li> <li><code>focusOut</code></li> <li><code>input</code></li> </ul> <p>HTML5 drag and drop events:</p> <ul> <li><code>dragStart</code></li> <li><code>drag</code></li> <li><code>dragEnter</code></li> <li><code>dragLeave</code></li> <li><code>dragOver</code></li> <li><code>dragEnd</code></li> <li><code>drop</code></li> </ul> <h2 class=\"anchorable-toc\" id=\"toc_code-view-code-helper\">\n<code>{{view}}</code> Helper</h2> <p>Other <code>Ember.View</code> instances can be included as part of a view's template by using the <code>{{view}}</code> helper. See <a href=\"ember.templates.helpers#method_view\">Ember.Templates.helpers.view</a> for additional information.</p> </div> \n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.View.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.View.html</a>\n  </p>\n</div>\n","data/classes/ds.timeouterror":"<h1 class=\"api-header\"> DS.TimeoutError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L119\">addon/adapters/errors.js:119</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.TimeoutError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.TimeoutError.html</a>\n  </p>\n</div>\n","data/classes/ds.booleantransform":"<h1 class=\"api-header\"> DS.BooleanTransform Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.transform\">DS.Transform</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/transforms/boolean.js#L7\">addon/-private/transforms/boolean.js:7</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The <code>DS.BooleanTransform</code> class is used to serialize and deserialize boolean attributes on Ember Data record objects. This transform is used when <code>boolean</code> is passed as the type parameter to the <a href=\"../../data#method_attr\">DS.attr</a> function.</p> <p>Usage</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  isAdmin: DS.attr('boolean'),\n  name: DS.attr('string'),\n  email: DS.attr('string')\n});\n</pre> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.BooleanTransform.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.BooleanTransform.html</a>\n  </p>\n</div>\n","data/classes/ds.datetransform":"<h1 class=\"api-header\"> DS.DateTransform Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.transform\">DS.Transform</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/transforms/date.js#L3\">addon/-private/transforms/date.js:3</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The <code>DS.DateTransform</code> class is used to serialize and deserialize date attributes on Ember Data record objects. This transform is used when <code>date</code> is passed as the type parameter to the <a href=\"../../data#method_attr\">DS.attr</a> function.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  value: DS.attr('number'),\n  player: DS.belongsTo('player'),\n  date: DS.attr('date')\n});\n</pre> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.DateTransform.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.DateTransform.html</a>\n  </p>\n</div>\n","data/classes/ds.numbertransform":"<h1 class=\"api-header\"> DS.NumberTransform Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.transform\">DS.Transform</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/transforms/number.js#L10\">addon/-private/transforms/number.js:10</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The <code>DS.NumberTransform</code> class is used to serialize and deserialize numeric attributes on Ember Data record objects. This transform is used when <code>number</code> is passed as the type parameter to the <a href=\"../../data#method_attr\">DS.attr</a> function.</p> <p>Usage</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  value: DS.attr('number'),\n  player: DS.belongsTo('player'),\n  date: DS.attr('date')\n});\n</pre> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.NumberTransform.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.NumberTransform.html</a>\n  </p>\n</div>\n","data/classes/ds.stringtransform":"<h1 class=\"api-header\"> DS.StringTransform Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.transform\">DS.Transform</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/transforms/string.js#L6\">addon/-private/transforms/string.js:6</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The <code>DS.StringTransform</code> class is used to serialize and deserialize string attributes on Ember Data record objects. This transform is used when <code>string</code> is passed as the type parameter to the <a href=\"../../data#method_attr\">DS.attr</a> function.</p> <p>Usage</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  isAdmin: DS.attr('boolean'),\n  name: DS.attr('string'),\n  email: DS.attr('string')\n});\n</pre> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.StringTransform.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.StringTransform.html</a>\n  </p>\n</div>\n","data/classes/ds.adaptererror":"<h1 class=\"api-header\"> DS.AdapterError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L11\">addon/adapters/errors.js:11</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_assertPolymorphicType\">assertPolymorphicType</h2>\n<span class=\"args\"> (record, relationshipMeta, addedRecord) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/debug.js#L43\">addon/-private/debug.js:43</a> </div> <div class=\"description\"> <p>Assert that <code>addedRecord</code> has a valid type so it can be added to the relationship of the <code>record</code>.</p> <p>The assert basically checks if the <code>addedRecord</code> can be added to the relationship (specified via <code>relationshipMeta</code>) of the <code>record</code>.</p> <p>This utility should only be used internally, as both record parameters must be an InternalModel and the <code>relationshipMeta</code> needs to be the meta information about the relationship, retrieved via <code>record.relationshipFor(key)</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>record</strong> <span class=\"type\">InternalModel</span>\n</dt>  <dt>\n<strong>relationshipMeta</strong> <span class=\"type\">RelationshipMeta</span>\n</dt> <dd> retrieved via `record.relationshipFor(key)` </dd> <dt>\n<strong>addedRecord</strong> <span class=\"type\">InternalModel</span>\n</dt> <dd> record which should be added/set for the relationship </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelHasAttributeOrRelationshipNamedType\">modelHasAttributeOrRelationshipNamedType</h2>\n<span class=\"args\"> (modelClass) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/utils.js#L5\">addon/-private/utils.js:5</a> </div> <div class=\"description\"> <p>Check if the passed model has a <code>type</code> attribute or a relationship named <code>type</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelClass</strong> \n</dt>  </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.AdapterError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.AdapterError.html</a>\n  </p>\n</div>\n","data/classes/ds.invaliderror":"<h1 class=\"api-header\"> DS.InvalidError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L58\">addon/adapters/errors.js:58</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>A <code>DS.InvalidError</code> is used by an adapter to signal the external API was unable to process a request because the content was not semantically correct or meaningful per the API. Usually this means a record failed some form of server side validation. When a promise from an adapter is rejected with a <code>DS.InvalidError</code> the record will transition to the <code>invalid</code> state and the errors will be set to the <code>errors</code> property on the record.</p> <p>For Ember Data to correctly map errors to their corresponding properties on the model, Ember Data expects each error to be a valid json-api error object with a <code>source/pointer</code> that matches the property name. For example if you had a Post model that looked like this.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  title: DS.attr('string'),\n  content: DS.attr('string')\n});\n</pre> <p>To show an error from the server related to the <code>title</code> and <code>content</code> properties your adapter could return a promise that rejects with a <code>DS.InvalidError</code> object that looks like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\nimport DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  updateRecord: function() {\n    // Fictional adapter that always rejects\n    return Ember.RSVP.reject(new DS.InvalidError([\n      {\n        detail: 'Must be unique',\n        source: { pointer: '/data/attributes/title' }\n      },\n      {\n        detail: 'Must not be blank',\n        source: { pointer: '/data/attributes/content'}\n      }\n    ]));\n  }\n});\n</pre> <p>Your backend may use different property names for your records the store will attempt extract and normalize the errors using the serializer's <code>extractErrors</code> method before the errors get added to the the model. As a result, it is safe for the <code>InvalidError</code> to wrap the error payload unaltered.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.InvalidError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.InvalidError.html</a>\n  </p>\n</div>\n","data/classes/ds.aborterror":"<h1 class=\"api-header\"> DS.AbortError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L126\">addon/adapters/errors.js:126</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.AbortError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.AbortError.html</a>\n  </p>\n</div>\n","data/classes/ds.unauthorizederror":"<h1 class=\"api-header\"> DS.UnauthorizedError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L133\">addon/adapters/errors.js:133</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.UnauthorizedError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.UnauthorizedError.html</a>\n  </p>\n</div>\n","data/classes/ds.forbiddenerror":"<h1 class=\"api-header\"> DS.ForbiddenError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L140\">addon/adapters/errors.js:140</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.ForbiddenError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.ForbiddenError.html</a>\n  </p>\n</div>\n","data/classes/ds.notfounderror":"<h1 class=\"api-header\"> DS.NotFoundError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L147\">addon/adapters/errors.js:147</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.NotFoundError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.NotFoundError.html</a>\n  </p>\n</div>\n","data/classes/ds.conflicterror":"<h1 class=\"api-header\"> DS.ConflictError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L154\">addon/adapters/errors.js:154</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.ConflictError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.ConflictError.html</a>\n  </p>\n</div>\n","data/classes/ds.servererror":"<h1 class=\"api-header\"> DS.ServerError Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/errors.js#L161\">addon/adapters/errors.js:161</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.ServerError.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.ServerError.html</a>\n  </p>\n</div>\n","data/classes/ds.model":"<h1 class=\"api-header\"> DS.Model Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.Object</p> <p>Uses: Ember.Evented</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L96\">addon/-private/system/relationships/ext.js:96</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The model class that all Ember Data records descend from. This is the public API of Ember Data models. If you are using Ember Data in your application, this is the class you should use. If you are working on Ember Data internals, you most likely want to be dealing with <code>InternalModel</code></p> </div> <div class=\"pane\" id=\"methods\">      <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_belongsTo\">belongsTo</h2>\n<span class=\"args\"> (name) </span><span class=\"type\">BelongsToReference</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L829\">addon/-private/system/model/model.js:829</a> <br>Available since 2.5.0 </div> <div class=\"description\"> <p>Get the reference for the specified belongsTo relationship.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// models/blog.js\nexport default DS.Model.extend({\n  user: DS.belongsTo({ async: true })\n});\n\nvar blog = store.push({\n  type: 'blog',\n  id: 1,\n  relationships: {\n    user: { type: 'user', id: 1 }\n  }\n});\nvar userRef = blog.belongsTo('user');\n\n// check if the user relationship is loaded\nvar isLoaded = userRef.value() !== null;\n\n// get the record of the reference (null if not yet available)\nvar user = userRef.value();\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"id\") {\n  var id = userRef.id();\n} else if (userRef.remoteType() === \"link\") {\n  var link = userRef.link();\n}\n\n// load user (via store.findRecord or store.findBelongsTo)\nuserRef.load().then(...)\n\n// or trigger a reload\nuserRef.reload().then(...)\n\n// provide data for reference\nuserRef.push({\n  type: 'user',\n  id: 1,\n  attributes: {\n    username: \"@user\"\n  }\n}).then(function(user) {\n  userRef.value() === user;\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\">String</span>\n</dt> <dd> of the relationship </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">BelongsToReference</span> </dt>\n<dd> reference for this relationship</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_changedAttributes\">changedAttributes</h2>\n<span class=\"type\">Object</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L611\">addon/-private/system/model/model.js:611</a> </div> <div class=\"description\"> <p>Returns an object, whose keys are changed properties, and value is an [oldProp, newProp] array.</p> <p>The array represents the diff of the canonical state with the local state of the model. Note: if the model is created locally, the canonical state is empty since the adapter hasn't acknowledged the attributes yet:</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  name: attr('string'),\n  isAdmin: attr('boolean', {\n    defaultValue: false\n  })\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">var mascot = store.createRecord('mascot');\n\nmascot.changedAttributes(); // {}\n\nmascot.set('name', 'Tomster');\nmascot.changedAttributes(); // { name: [undefined, 'Tomster'] }\n\nmascot.set('isAdmin', true);\nmascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }\n\nmascot.save().then(function() {\n  mascot.changedAttributes(); // {}\n\n  mascot.set('isAdmin', false);\n  mascot.changedAttributes(); // { isAdmin: [true, false] }\n});\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> an object, whose keys are changed properties, and value is an [oldProp, newProp] array.</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"method_deleteRecord\">deleteRecord</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L506\">addon/-private/system/model/model.js:506</a> </div> <div class=\"description\"> <p>Marks the record as deleted but does not save it. You must call <code>save</code> afterwards if you want to persist it. You might use this method if you want to allow the user to still <code>rollbackAttributes()</code> after a delete it was made.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    softDelete: function() {\n      this.controller.get('model').deleteRecord();\n    },\n    confirm: function() {\n      this.controller.get('model').save();\n    },\n    undo: function() {\n      this.controller.get('model').rollbackAttributes();\n    }\n  }\n});\n</pre> </div>  </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_destroyRecord\">destroyRecord</h2>\n<span class=\"args\"> (options) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L538\">addon/-private/system/model/model.js:538</a> </div> <div class=\"description\"> <p>Same as <code>deleteRecord</code>, but saves the record immediately.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    delete: function() {\n      var controller = this.controller;\n      controller.get('model').destroyRecord().then(function() {\n        controller.transitionToRoute('model.index');\n      });\n    }\n  }\n});\n</pre> <p>If you pass an object on the <code>adapterOptions</code> property of the options argument it will be passed to you adapter via the snapshot</p> <pre class=\"highlight js \" data-language=\"js\">record.destroyRecord({ adapterOptions: { subscribe: false } });\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  deleteRecord: function(store, type, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> a promise that will be resolved when the adapter returns successfully or rejected if the adapter returns with an error.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_didDefineProperty\">didDefineProperty</h2>\n<span class=\"args\"> (proto, key, value) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L102\">addon/-private/system/relationships/ext.js:102</a> </div> <div class=\"description\"> <p>This Ember.js hook allows an object to be notified when a property is defined.</p> <p>In this case, we use it to be notified when an Ember Data user defines a belongs-to relationship. In that case, we need to set up observers for each one, allowing us to track relationship changes and automatically reflect changes in the inverse has-many array.</p> <p>This hook passes the class being set up, as well as the key and value being defined. So, for example, when the user does this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">DS.Model.extend({\n  parent: DS.belongsTo('user')\n});\n</pre> <p>This hook would be called with \"parent\" as the key and the computed property returned by <code>DS.belongsTo</code> as the value.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>proto</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>value</strong> <span class=\"type\">Ember.ComputedProperty</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_eachAttribute\">eachAttribute</h2>\n<span class=\"args\"> (callback, binding) </span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/attr.js#L121\">addon/-private/system/model/attr.js:121</a> </div> <div class=\"description\"> <p>Iterates through the attributes of the model, calling the passed function on each attribute.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(name, meta);\n</pre> <ul> <li>\n<code>name</code> the name of the current property in the iteration</li> <li>\n<code>meta</code> the meta object for the attribute property in the iteration</li> </ul> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nvar Person = DS.Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nPerson.eachAttribute(function(name, meta) {\n  console.log(name, meta);\n});\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\">Function</span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>binding</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> the value to which the callback's `this` should be bound </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_eachRelatedType\">eachRelatedType</h2>\n<span class=\"args\"> (callback, binding) </span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L559\">addon/-private/system/relationships/ext.js:559</a> </div> <div class=\"description\"> <p>Given a callback, iterates over each of the types related to a model, invoking the callback with the related type's class. Each type will be returned just once, regardless of how many different relationships it has with a model.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\">Function</span>\n</dt> <dd> the callback to invoke </dd> <dt>\n<strong>binding</strong> <span class=\"type\">Any</span>\n</dt> <dd> the value to which the callback's `this` should be bound </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_eachRelationship\">eachRelationship</h2>\n<span class=\"args\"> (callback, binding) </span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.model#method_eachRelationship\">DS.Model</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L603\">addon/-private/system/relationships/ext.js:603</a> </div> <div class=\"description\"> <p>Given a callback, iterates over each of the relationships in the model, invoking the callback with the name of each relationship and its relationship descriptor.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(name, descriptor);\n</pre> <ul> <li>\n<code>name</code> the name of the current property in the iteration</li> <li>\n<code>descriptor</code> the meta object that describes this relationship</li> </ul> <p>The relationship descriptor argument is an object with the following properties.</p> <ul> <li>\n<strong>key</strong> <span class=\"type\">String</span> the name of this relationship on the Model</li> <li>\n<strong>kind</strong> <span class=\"type\">String</span> \"hasMany\" or \"belongsTo\"</li> <li>\n<strong>options</strong> <span class=\"type\">Object</span> the original options hash passed when the relationship was declared</li> <li>\n<strong>parentType</strong> <span class=\"type\">DS.Model</span> the type of the Model that owns this relationship</li> <li>\n<strong>type</strong> <span class=\"type\">String</span> the type name of the related Model</li> </ul> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize: function(record, options) {\n    var json = {};\n\n    record.eachRelationship(function(name, descriptor) {\n      if (descriptor.kind === 'hasMany') {\n        var serializedHasManyName = name.toUpperCase() + '_IDS';\n        json[serializedHasManyName] = record.get(name).mapBy('id');\n      }\n    });\n\n    return json;\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\">Function</span>\n</dt> <dd> the callback to invoke </dd> <dt>\n<strong>binding</strong> <span class=\"type\">Any</span>\n</dt> <dd> the value to which the callback's `this` should be bound </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_eachTransformedAttribute\">eachTransformedAttribute</h2>\n<span class=\"args\"> (callback, binding) </span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/attr.js#L170\">addon/-private/system/model/attr.js:170</a> </div> <div class=\"description\"> <p>Iterates through the transformedAttributes of the model, calling the passed function on each attribute. Note the callback will not be called for any attributes that do not have an transformation type.</p> <p>The callback method you provide should have the following signature (all parameters are optional):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">function(name, type);\n</pre> <ul> <li>\n<code>name</code> the name of the current property in the iteration</li> <li>\n<code>type</code> a string containing the name of the type of transformed applied to the attribute</li> </ul> <p>Note that in addition to a callback, you can also pass an optional target object that will be set as <code>this</code> on the context.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nvar Person = DS.Model.extend({\n  firstName: attr(),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nPerson.eachTransformedAttribute(function(name, type) {\n  console.log(name, type);\n});\n\n// prints:\n// lastName string\n// birthday date\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\">Function</span>\n</dt> <dd> The callback to execute </dd> <dt>\n<strong>binding</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> the value to which the callback's `this` should be bound </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_hasMany\">hasMany</h2>\n<span class=\"args\"> (name) </span><span class=\"type\">HasManyReference</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L889\">addon/-private/system/model/model.js:889</a> <br>Available since 2.5.0 </div> <div class=\"description\"> <p>Get the reference for the specified hasMany relationship.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// models/blog.js\nexport default DS.Model.extend({\n  comments: DS.hasMany({ async: true })\n});\n\nvar blog = store.push({\n  type: 'blog',\n  id: 1,\n  relationships: {\n    comments: {\n      data: [\n        { type: 'comment', id: 1 },\n        { type: 'comment', id: 2 }\n      ]\n    }\n  }\n});\nvar commentsRef = blog.hasMany('comments');\n\n// check if the comments are loaded already\nvar isLoaded = commentsRef.value() !== null;\n\n// get the records of the reference (null if not yet available)\nvar comments = commentsRef.value();\n\n// get the identifier of the reference\nif (commentsRef.remoteType() === \"ids\") {\n  var ids = commentsRef.ids();\n} else if (commentsRef.remoteType() === \"link\") {\n  var link = commentsRef.link();\n}\n\n// load comments (via store.findMany or store.findHasMany)\ncommentsRef.load().then(...)\n\n// or trigger a reload\ncommentsRef.reload().then(...)\n\n// provide data for reference\ncommentsRef.push([{ type: 'comment', id: 1 }, { type: 'comment', id: 2 }]).then(function(comments) {\n  commentsRef.value() === comments;\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\">String</span>\n</dt> <dd> of the relationship </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">HasManyReference</span> </dt>\n<dd> reference for this relationship</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_initializeStore\">initializeStore</h2>\n<span class=\"args\"> (applicationOrRegistry) </span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.model#method_initializeStore\">DS.Model</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/instance-initializers/initialize-store-service.js#L1\">addon/-private/instance-initializers/initialize-store-service.js:1</a> </div> <div class=\"description\"> <p>Configures a registry for use with an Ember-Data store.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>applicationOrRegistry</strong> <span class=\"type\">Ember.ApplicationInstance</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_initializeStoreInjections\">initializeStoreInjections</h2>\n<span class=\"args\"> (registry) </span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.model#method_initializeStoreInjections\">DS.Model</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/initializers/store-injections.js#L1\">addon/-private/initializers/store-injections.js:1</a> </div> <div class=\"description\"> <p>Configures a registry with injections on Ember applications for the Ember-Data store. Accepts an optional namespace argument.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>registry</strong> <span class=\"type\">Ember.Registry</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_initializeTransforms\">initializeTransforms</h2>\n<span class=\"args\"> (registry) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/initializers/transforms.js#L8\">addon/-private/initializers/transforms.js:8</a> </div> <div class=\"description\"> <p>Configures a registry for use with Ember-Data transforms.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>registry</strong> <span class=\"type\">Ember.Registry</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_inverseFor\">inverseFor</h2>\n<span class=\"args\"> (name) </span><span class=\"type\">Object</span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L191\">addon/-private/system/relationships/ext.js:191</a> </div> <div class=\"description\"> <p>Find the relationship which is the inverse of the one asked for.</p> <p>For example, if you define models like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('message')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  owner: DS.belongsTo('post')\n});\n</pre> <p>App.Post.inverseFor('comments') -&gt; { type: App.Message, name: 'owner', kind: 'belongsTo' } App.Message.inverseFor('owner') -&gt; { type: App.Post, name: 'comments', kind: 'hasMany' }</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\">String</span>\n</dt> <dd> the name of the relationship </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the inverse relationship, or null</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_reload\">reload</h2>\n<span class=\"type\">Promise</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L756\">addon/-private/system/model/model.js:756</a> </div> <div class=\"description\"> <p>Reload the record from the adapter.</p> <p>This will only work if the record has already finished loading.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    reload: function() {\n      this.controller.get('model').reload().then(function(model) {\n        // do something with the reloaded model\n      });\n    }\n  }\n});\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> a promise that will be resolved with the record when the adapter returns successfully or rejected if the adapter returns with an error.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"method_rollbackAttributes\">rollbackAttributes</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L677\">addon/-private/system/model/model.js:677</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>If the model <code>hasDirtyAttributes</code> this function will discard any unsaved changes. If the model <code>isNew</code> it will be removed from the store.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.get('name'); // 'Untitled Document'\nrecord.set('name', 'Doc 1');\nrecord.get('name'); // 'Doc 1'\nrecord.rollbackAttributes();\nrecord.get('name'); // 'Untitled Document'\n</pre> </div>  </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_save\">save</h2>\n<span class=\"args\"> (options) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L710\">addon/-private/system/model/model.js:710</a> </div> <div class=\"description\"> <p>Save the record and persist any changes to the record to an external source via the adapter.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.set('name', 'Tomster');\nrecord.save().then(function() {\n  // Success callback\n}, function() {\n  // Error callback\n});\n</pre> <p>If you pass an object on the <code>adapterOptions</code> property of the options argument it will be passed to you adapter via the snapshot</p> <pre class=\"highlight js \" data-language=\"js\">record.save({ adapterOptions: { subscribe: false } });\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  updateRecord: function(store, type, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> a promise that will be resolved when the adapter returns successfully or rejected if the adapter returns with an error.</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (options) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L381\">addon/-private/system/model/model.js:381</a> </div> <div class=\"description\"> <p>Create a JSON representation of the record, using the serialization strategy of the store's adapter.</p> <p><code>serialize</code> takes an optional hash as a parameter, currently supported options are:</p> <ul> <li>\n<code>includeId</code>: <code>true</code> if the record's ID should be included in the JSON representation.</li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> an object whose values are primitive JSON values only</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_toJSON\">toJSON</h2>\n<span class=\"args\"> (options) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L399\">addon/-private/system/model/model.js:399</a> </div> <div class=\"description\"> <p>Use <a href=\"ds.jsonserializer\">DS.JSONSerializer</a> to get the JSON representation of a record.</p> <p><code>toJSON</code> takes an optional hash as a parameter, currently supported options are:</p> <ul> <li>\n<code>includeId</code>: <code>true</code> if the record's ID should be included in the JSON representation.</li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> A JSON representation of the object.</dd> </dl> </div> </div>   <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_typeForRelationship\">typeForRelationship</h2>\n<span class=\"args\"> (name, store) </span><span class=\"type\"><a href=\"ds.model\">DS.Model</a></span><span class=\"flag static\">static</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L161\">addon/-private/system/relationships/ext.js:161</a> </div> <div class=\"description\"> <p>For a given relationship name, returns the model type of the relationship.</p> <p>For example, if you define a model like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n</pre> <p>Calling <code>App.Post.typeForRelationship('comments')</code> will return <code>App.Comment</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>name</strong> <span class=\"type\">String</span>\n</dt> <dd> the name of the relationship </dd> <dt>\n<strong>store</strong> <span class=\"type\">Store</span>\n</dt> <dd> an instance of DS.Store </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.model\">DS.Model</a></span> </dt>\n<dd> the type of the relationship, or undefined</dd> </dl> </div> </div>  </div>\n<div class=\"pane\" id=\"events\">  <div class=\"event  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"event_becameError\">becameError</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L464\">addon/-private/system/model/model.js:464</a> </div> <div class=\"description\"> <p>Fired when the record enters the error state.</p> </div>  </div> <div class=\"event  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"event_becameInvalid\">becameInvalid</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L457\">addon/-private/system/model/model.js:457</a> </div> <div class=\"description\"> <p>Fired when the record becomes invalid.</p> </div>  </div> <div class=\"event  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"event_didCreate\">didCreate</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L443\">addon/-private/system/model/model.js:443</a> </div> <div class=\"description\"> <p>Fired when a new record is commited to the server.</p> </div>  </div> <div class=\"event  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"event_didDelete\">didDelete</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L450\">addon/-private/system/model/model.js:450</a> </div> <div class=\"description\"> <p>Fired when the record is deleted.</p> </div>  </div> <div class=\"event  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"event_didLoad\">didLoad</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L429\">addon/-private/system/model/model.js:429</a> </div> <div class=\"description\"> <p>Fired when the record is loaded from the server.</p> </div>  </div> <div class=\"event  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"event_didUpdate\">didUpdate</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L436\">addon/-private/system/model/model.js:436</a> </div> <div class=\"description\"> <p>Fired when the record is updated.</p> </div>  </div> <div class=\"event  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"event_ready\">ready</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L421\">addon/-private/system/model/model.js:421</a> </div> <div class=\"description\"> <p>Fired when the record is ready to be interacted with, that is either loaded from the server or created locally.</p> </div>  </div> <div class=\"event  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"event_rolledBack\">rolledBack</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L471\">addon/-private/system/model/model.js:471</a> </div> <div class=\"description\"> <p>Fired when the record is rolled back.</p> </div>  </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_adapterError\">adapterError</h2>\n<span class=\"type\">{DS.AdapterError}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L372\">addon/-private/system/model/model.js:372</a> </div> <div class=\"description\"> <p>This property holds the <code>DS.AdapterError</code> object with which last adapter operation was rejected.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_attributes\">attributes</h2>\n<span class=\"type\">{Ember.Map}</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/attr.js#L18\">addon/-private/system/model/attr.js:18</a> </div> <div class=\"description\"> <p>A map whose keys are the attributes of the model (properties described by DS.attr) and whose values are the meta object for the property.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\nimport Person from 'app/models/person';\n\nvar attributes = Ember.get(Person, 'attributes')\n\nattributes.forEach(function(meta, name) {\n  console.log(name, meta);\n});\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n</pre> </div>  </div>   <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_dirtyType\">dirtyType</h2>\n<span class=\"type\">{String}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L221\">addon/-private/system/model/model.js:221</a> </div> <div class=\"description\"> <p>If the record is in the dirty state this property will report what kind of change has caused it to move into the dirty state. Possible values are:</p> <ul> <li>\n<code>created</code> The record has been created by the client and not yet saved to the adapter.</li> <li>\n<code>updated</code> The record has been updated by the client and not yet saved to the adapter.</li> <li>\n<code>deleted</code> The record has been deleted by the client and not yet saved to the adapter.</li> </ul> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var record = store.createRecord('model');\nrecord.get('dirtyType'); // 'created'\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_errors\">errors</h2>\n<span class=\"type\">{DS.Errors}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L308\">addon/-private/system/model/model.js:308</a> </div> <div class=\"description\"> <p>When the record is in the <code>invalid</code> state this object will contain any errors returned by the adapter. When present the errors hash contains keys corresponding to the invalid property names and values which are arrays of Javascript objects with two keys:</p> <ul> <li>\n<code>message</code> A string containing the error message from the backend</li> <li>\n<code>attribute</code> The name of the property associated with this error message</li> </ul> <pre class=\"highlight javascript \" data-language=\"javascript\">record.get('errors.length'); // 0\nrecord.set('foo', 'invalid value');\nrecord.save().catch(function() {\n  record.get('errors').get('foo');\n  // [{message: 'foo should be a number.', attribute: 'foo'}]\n});\n</pre> <p>The <code>errors</code> property us useful for displaying error messages to the user.</p> <pre class=\"highlight handlebars \" data-language=\"\">&lt;label&gt;Username: {{input value=username}} &lt;/label&gt;\n{{#each model.errors.username as |error|}}\n  &lt;div class=\"error\"&gt;\n    {{error.message}}\n  &lt;/div&gt;\n{{/each}}\n&lt;label&gt;Email: {{input value=email}} &lt;/label&gt;\n{{#each model.errors.email as |error|}}\n  &lt;div class=\"error\"&gt;\n    {{error.message}}\n  &lt;/div&gt;\n{{/each}}\n</pre> <p>You can also access the special <code>messages</code> property on the error object to get an array of all the error strings.</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#each model.errors.messages as |message|}}\n  &lt;div class=\"error\"&gt;\n    {{message}}\n  &lt;/div&gt;\n{{/each}}\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_fields\">fields</h2>\n<span class=\"type\">Ember.Map</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L488\">addon/-private/system/relationships/ext.js:488</a> </div> <div class=\"description\"> <p>A map whose keys are the fields of the model and whose values are strings describing the kind of the field. A model's fields are the union of all of its attributes and relationships.</p> <p>For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post'),\n\n  title: DS.attr('string')\n});\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">import Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar fields = Ember.get(Blog, 'fields');\nfields.forEach(function(kind, field) {\n  console.log(field, kind);\n});\n\n// prints:\n// users, hasMany\n// owner, belongsTo\n// posts, hasMany\n// title, attribute\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_hasDirtyAttributes\">hasDirtyAttributes</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L100\">addon/-private/system/model/model.js:100</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>If this property is <code>true</code> the record is in the <code>dirty</code> state. The record has local changes that have not yet been saved by the adapter. This includes records that have been created (but not yet saved) or deleted.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var record = store.createRecord('model');\nrecord.get('hasDirtyAttributes'); // true\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('hasDirtyAttributes'); // false\n  model.set('foo', 'some value');\n  model.get('hasDirtyAttributes'); // true\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_id\">id</h2>\n<span class=\"type\">{String}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L281\">addon/-private/system/model/model.js:281</a> </div> <div class=\"description\"> <p>All ember models have an id property. This is an identifier managed by an external source. These are always coerced to be strings before being used internally. Note when declaring the attributes for a model it is an error to declare an id attribute.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var record = store.createRecord('model');\nrecord.get('id'); // null\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('id'); // '1'\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isDeleted\">isDeleted</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L150\">addon/-private/system/model/model.js:150</a> </div> <div class=\"description\"> <p>If this property is <code>true</code> the record is in the <code>deleted</code> state and has been marked for deletion. When <code>isDeleted</code> is true and <code>hasDirtyAttributes</code> is true, the record is deleted locally but the deletion was not yet persisted. When <code>isSaving</code> is true, the change is in-flight. When both <code>hasDirtyAttributes</code> and <code>isSaving</code> are false, the change has persisted.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var record = store.createRecord('model');\nrecord.get('isDeleted');    // false\nrecord.deleteRecord();\n\n// Locally deleted\nrecord.get('isDeleted');           // true\nrecord.get('hasDirtyAttributes');  // true\nrecord.get('isSaving');            // false\n\n// Persisting the deletion\nvar promise = record.save();\nrecord.get('isDeleted');    // true\nrecord.get('isSaving');     // true\n\n// Deletion Persisted\npromise.then(function() {\n  record.get('isDeleted');          // true\n  record.get('isSaving');           // false\n  record.get('hasDirtyAttributes'); // false\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isEmpty\">isEmpty</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L53\">addon/-private/system/model/model.js:53</a> </div> <div class=\"description\"> <p>If this property is <code>true</code> the record is in the <code>empty</code> state. Empty is the first state all records enter after they have been created. Most records created by the store will quickly transition to the <code>loading</code> state if data needs to be fetched from the server or the <code>created</code> state if the record is created on the client. A record can also enter the empty state if the adapter is unable to locate the record.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isError\">isError</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L243\">addon/-private/system/model/model.js:243</a> </div> <div class=\"description\"> <p>If <code>true</code> the adapter reported that it was unable to save local changes to the backend for any reason other than a server-side validation error.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.get('isError'); // false\nrecord.set('foo', 'valid value');\nrecord.save().then(null, function() {\n  record.get('isError'); // true\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isLoaded\">isLoaded</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L78\">addon/-private/system/model/model.js:78</a> </div> <div class=\"description\"> <p>If this property is <code>true</code> the record is in the <code>loaded</code> state. A record enters this state when its data is populated. Most of a record's lifecycle is spent inside substates of the <code>loaded</code> state.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var record = store.createRecord('model');\nrecord.get('isLoaded'); // true\n\nstore.findRecord('model', 1).then(function(model) {\n  model.get('isLoaded'); // true\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isLoading\">isLoading</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L67\">addon/-private/system/model/model.js:67</a> </div> <div class=\"description\"> <p>If this property is <code>true</code> the record is in the <code>loading</code> state. A record enters this state when the store asks the adapter for its data. It remains in this state until the adapter provides the requested data.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isNew\">isNew</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L188\">addon/-private/system/model/model.js:188</a> </div> <div class=\"description\"> <p>If this property is <code>true</code> the record is in the <code>new</code> state. A record will be in the <code>new</code> state when it has been created on the client and the adapter has not yet report that it was successfully saved.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var record = store.createRecord('model');\nrecord.get('isNew'); // true\n\nrecord.save().then(function(model) {\n  model.get('isNew'); // false\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isReloading\">isReloading</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L264\">addon/-private/system/model/model.js:264</a> </div> <div class=\"description\"> <p>If <code>true</code> the store is attempting to reload the record form the adapter.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">record.get('isReloading'); // false\nrecord.reload();\nrecord.get('isReloading'); // true\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isSaving\">isSaving</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L127\">addon/-private/system/model/model.js:127</a> </div> <div class=\"description\"> <p>If this property is <code>true</code> the record is in the <code>saving</code> state. A record enters the saving state when <code>save</code> is called, but the adapter has not yet acknowledged that the changes have been persisted to the backend.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var record = store.createRecord('model');\nrecord.get('isSaving'); // false\nvar promise = record.save();\nrecord.get('isSaving'); // true\npromise.then(function() {\n  record.get('isSaving'); // false\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_isValid\">isValid</h2>\n<span class=\"type\">{Boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L210\">addon/-private/system/model/model.js:210</a> </div> <div class=\"description\"> <p>If this property is <code>true</code> the record is in the <code>valid</code> state.</p> <p>A record will be in the <code>valid</code> state when the adapter did not report any server-side validation failures.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_modelName\">modelName</h2>\n<span class=\"type\">String</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/model.js#L980\">addon/-private/system/model/model.js:980</a> </div> <div class=\"description\"> <p>Represents the model's class name as a string. This can be used to look up the model through DS.Store's modelFor method.</p> <p><code>modelName</code> is generated for you by Ember Data. It will be a lowercased, dasherized string. For example:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.modelFor('post').modelName; // 'post'\nstore.modelFor('blog-post').modelName; // 'blog-post'\n</pre> <p>The most common place you'll want to access <code>modelName</code> is in your serializer's <code>payloadKeyFromModelName</code> method. For example, to change payload keys to underscore (instead of dasherized), you might use the following code:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">export default var PostSerializer = DS.RESTSerializer.extend({\n  payloadKeyFromModelName: function(modelName) {\n    return Ember.String.underscore(modelName);\n  }\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_relatedTypes\">relatedTypes</h2>\n<span class=\"type\">Ember.Array</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L415\">addon/-private/system/relationships/ext.js:415</a> </div> <div class=\"description\"> <p>An array of types directly related to a model. Each type will be included once, regardless of the number of relationships it has with the model.</p> <p>For example, given a model with this definition:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n</pre> <p>This property would contain the following:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar relatedTypes = Ember.get(Blog, 'relatedTypes');\n//=&gt; [ App.User, App.Post ]\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_relationshipNames\">relationshipNames</h2>\n<span class=\"type\">Object</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L366\">addon/-private/system/relationships/ext.js:366</a> </div> <div class=\"description\"> <p>A hash containing lists of the model's relationships, grouped by the relationship kind. For example, given a model with this definition:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n</pre> <p>This property would contain the following:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar relationshipNames = Ember.get(Blog, 'relationshipNames');\nrelationshipNames.hasMany;\n//=&gt; ['users', 'posts']\nrelationshipNames.belongsTo;\n//=&gt; ['owner']\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_relationships\">relationships</h2>\n<span class=\"type\">Ember.Map</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L325\">addon/-private/system/relationships/ext.js:325</a> </div> <div class=\"description\"> <p>The model's relationships as a map, keyed on the type of the relationship. The value of each entry is an array containing a descriptor for each relationship with that type, describing the name of the relationship as well as the type.</p> <p>For example, given the following model definition:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n  posts: DS.hasMany('post')\n});\n</pre> <p>This computed property would return a map describing these relationships, like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar relationships = Ember.get(Blog, 'relationships');\nrelationships.get(App.User);\n//=&gt; [ { name: 'users', kind: 'hasMany' },\n//     { name: 'owner', kind: 'belongsTo' } ]\nrelationships.get(App.Post);\n//=&gt; [ { name: 'posts', kind: 'hasMany' } ]\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_relationshipsByName\">relationshipsByName</h2>\n<span class=\"type\">Ember.Map</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/relationships/ext.js#L450\">addon/-private/system/relationships/ext.js:450</a> </div> <div class=\"description\"> <p>A map whose keys are the relationships of a model and whose values are relationship descriptors.</p> <p>For example, given a model with this definition:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n</pre> <p>This property would contain the following:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\nimport Blog from 'app/models/blog';\n\nvar relationshipsByName = Ember.get(Blog, 'relationshipsByName');\nrelationshipsByName.get('users');\n//=&gt; { key: 'users', kind: 'hasMany', type: 'user', options: Object, isRelationship: true }\nrelationshipsByName.get('owner');\n//=&gt; { key: 'owner', kind: 'belongsTo', type: 'user', options: Object, isRelationship: true }\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_transformedAttributes\">transformedAttributes</h2>\n<span class=\"type\">{Ember.Map}</span><span class=\"flag static\">static</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/model/attr.js#L71\">addon/-private/system/model/attr.js:71</a> </div> <div class=\"description\"> <p>A map whose keys are the attributes of the model (properties described by DS.attr) and whose values are type of transformation applied to each attribute. This map does not include any attributes that do not have an transformation type.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: attr(),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\nimport Person from 'app/models/person';\n\nvar transformedAttributes = Ember.get(Person, 'transformedAttributes')\n\ntransformedAttributes.forEach(function(field, type) {\n  console.log(field, type);\n});\n\n// prints:\n// lastName string\n// birthday date\n</pre> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.Model.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.Model.html</a>\n  </p>\n</div>\n","data/classes/ds.snapshot":"<h1 class=\"api-header\"> DS.Snapshot Class  </h1>  <p>PRIVATE</p> <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L10\">addon/-private/system/snapshot.js:10</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_attr\">attr</h2>\n<span class=\"args\"> (keyName) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L94\">addon/-private/system/snapshot.js:94</a> </div> <div class=\"description\"> <p>Returns the value of an attribute.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.attr('author'); // =&gt; 'Tomster'\npostSnapshot.attr('title'); // =&gt; 'Ember.js rocks'\n</pre> <p>Note: Values are loaded eagerly and cached when the snapshot is created.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The attribute value or undefined</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_attributes\">attributes</h2>\n<span class=\"type\">Object</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L118\">addon/-private/system/snapshot.js:118</a> </div> <div class=\"description\"> <p>Returns all attributes and their corresponding values.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.attributes(); // =&gt; { author: 'Tomster', title: 'Ember.js rocks' }\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> All attributes of the current snapshot</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_belongsTo\">belongsTo</h2>\n<span class=\"args\"> (keyName, options) </span><span class=\"type\">(DS.Snapshot|String|null|undefined)</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L161\">addon/-private/system/snapshot.js:161</a> </div> <div class=\"description\"> <p>Returns the current value of a belongsTo relationship.</p> <p><code>belongsTo</code> takes an optional hash of options as a second parameter, currently supported options are:</p> <ul> <li>\n<code>id</code>: set to <code>true</code> if you only want the ID of the related record to be returned.</li> </ul> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// store.push('post', { id: 1, title: 'Hello World' });\n// store.createRecord('comment', { body: 'Lorem ipsum', post: post });\ncommentSnapshot.belongsTo('post'); // =&gt; DS.Snapshot\ncommentSnapshot.belongsTo('post', { id: true }); // =&gt; '1'\n\n// store.push('comment', { id: 1, body: 'Lorem ipsum' });\ncommentSnapshot.belongsTo('post'); // =&gt; undefined\n</pre> <p>Calling <code>belongsTo</code> will return a new Snapshot as long as there's any known data for the relationship available, such as an ID. If the relationship is known but unset, <code>belongsTo</code> will return <code>null</code>. If the contents of the relationship is unknown <code>belongsTo</code> will return <code>undefined</code>.</p> <p>Note: Relationships are loaded lazily and cached upon first access.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">(DS.Snapshot|String|null|undefined)</span> </dt>\n<dd> A snapshot or ID of a known relationship or null if the relationship is known but unset. undefined will be returned if the contents of the relationship is unknown.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_changedAttributes\">changedAttributes</h2>\n<span class=\"type\">Object</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L135\">addon/-private/system/snapshot.js:135</a> </div> <div class=\"description\"> <p>Returns all changed attributes and their old and new values.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostModel.set('title', 'Ember.js rocks!');\npostSnapshot.changedAttributes(); // =&gt; { title: ['Ember.js rocks', 'Ember.js rocks!'] }\n</pre> </div>  <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> All changed attributes of the current snapshot</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_eachAttribute\">eachAttribute</h2>\n<span class=\"args\"> (callback, binding) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L310\">addon/-private/system/snapshot.js:310</a> </div> <div class=\"description\"> <p>Iterates through all the attributes of the model, calling the passed function on each attribute.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">snapshot.eachAttribute(function(name, meta) {\n  // ...\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\">Function</span>\n</dt> <dd> the callback to execute </dd> <dt>\n<strong>binding</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> the value to which the callback's `this` should be bound </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_eachRelationship\">eachRelationship</h2>\n<span class=\"args\"> (callback, binding) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L330\">addon/-private/system/snapshot.js:330</a> </div> <div class=\"description\"> <p>Iterates through all the relationships of the model, calling the passed function on each relationship.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">snapshot.eachRelationship(function(name, relationship) {\n  // ...\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>callback</strong> <span class=\"type\">Function</span>\n</dt> <dd> the callback to execute </dd> <dt>\n<strong>binding</strong> <span class=\"type\">[Object]</span>\n</dt> <dd> the value to which the callback's `this` should be bound </dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_hasMany\">hasMany</h2>\n<span class=\"args\"> (keyName, options) </span><span class=\"type\">(Array|undefined)</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L238\">addon/-private/system/snapshot.js:238</a> </div> <div class=\"description\"> <p>Returns the current value of a hasMany relationship.</p> <p><code>hasMany</code> takes an optional hash of options as a second parameter, currently supported options are:</p> <ul> <li>\n<code>ids</code>: set to <code>true</code> if you only want the IDs of the related records to be returned.</li> </ul> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// store.push('post', { id: 1, title: 'Hello World', comments: [2, 3] });\npostSnapshot.hasMany('comments'); // =&gt; [DS.Snapshot, DS.Snapshot]\npostSnapshot.hasMany('comments', { ids: true }); // =&gt; ['2', '3']\n\n// store.push('post', { id: 1, title: 'Hello World' });\npostSnapshot.hasMany('comments'); // =&gt; undefined\n</pre> <p>Note: Relationships are loaded lazily and cached upon first access.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>keyName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">(Array|undefined)</span> </dt>\n<dd> An array of snapshots or IDs of a known relationship or an empty array if the relationship is known but unset. undefined will be returned if the contents of the relationship is unknown.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (options) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L350\">addon/-private/system/snapshot.js:350</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> an object whose values are primitive JSON values only</dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_adapterOptions\">adapterOptions</h2>\n<span class=\"type\">{Object}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L33\">addon/-private/system/snapshot.js:33</a> </div> <div class=\"description\"> <p>A hash of adapter options</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_id\">id</h2>\n<span class=\"type\">{String}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L48\">addon/-private/system/snapshot.js:48</a> </div> <div class=\"description\"> <p>The id of the snapshot's underlying record</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// store.push('post', { id: 1, author: 'Tomster', title: 'Ember.js rocks' });\npostSnapshot.id; // =&gt; '1'\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_modelName\">modelName</h2>\n<span class=\"type\">{String}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L86\">addon/-private/system/snapshot.js:86</a> </div> <div class=\"description\"> <p>The name of the type of the underlying record for this snapshot, as a string.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_record\">record</h2>\n<span class=\"type\">{DS.Model}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L63\">addon/-private/system/snapshot.js:63</a> </div> <div class=\"description\"> <p>The underlying record for this snapshot. Can be used to access methods and properties defined on the record.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var json = snapshot.record.toJSON();\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_type\">type</h2>\n<span class=\"type\">{DS.Model}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/snapshot.js#L78\">addon/-private/system/snapshot.js:78</a> </div> <div class=\"description\"> <p>The type of the underlying record for this snapshot, as a DS.Model.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.Snapshot.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.Snapshot.html</a>\n  </p>\n</div>\n","classes/ember.textarea":"<h1 class=\"api-header\"> Ember.TextArea Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.component\">Ember.Component</a></p> <p>Uses: <a href=\"ember.textsupport\">Ember.TextSupport</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/text_area.js#L8\">packages/ember-htmlbars/lib/components/text_area.js:8</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"description\"> <p>The internal class used to create textarea element when the <code>{{textarea}}</code> helper is used.</p> <p>See <a href=\"ember.templates.helpers#method_textarea\">Ember.Templates.helpers.textarea</a> for usage details.</p> <h2 class=\"anchorable-toc\" id=\"toc_layout-and-layoutname-properties\">Layout and LayoutName properties</h2> <p>Because HTML <code>textarea</code> elements do not contain inner HTML the <code>layout</code> and <code>layoutName</code> properties will not be applied. See <a href=\"ember.view\">Ember.View</a>'s layout section for more information.</p> </div> \n\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.TextArea.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.TextArea.html</a>\n  </p>\n</div>\n","classes/ember.textfield":"<h1 class=\"api-header\"> Ember.TextField Class  </h1>  <p>PUBLIC</p> <div class=\"class-info\"> <p>Extends: <a href=\"ember.component\">Ember.Component</a></p> <p>Uses: <a href=\"ember.textsupport\">Ember.TextSupport</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/text_field.js#L37\">packages/ember-htmlbars/lib/components/text_field.js:37</a></p> <p>Module: <a href=\"../modules/ember-views\">ember-views</a></p> </div> <div class=\"description\"> <p>The internal class used to create text inputs when the <code>{{input}}</code> helper is used with <code>type</code> of <code>text</code>. See <a href=\"ember.templates.helpers#method_input\">Ember.Templates.helpers.input</a> for usage details.</p> <h2 class=\"anchorable-toc\" id=\"toc_layout-and-layoutname-properties\">Layout and LayoutName properties</h2> <p>Because HTML <code>input</code> elements are self closing <code>layout</code> and <code>layoutName</code> properties will not be applied. See <a href=\"ember.view\">Ember.View</a>'s layout section for more information.</p> </div> \n\n<div class=\"pane\" id=\"properties\">                         <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_max\">max</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/text_field.js#L155\">packages/ember-htmlbars/lib/components/text_field.js:155</a> <br>Available since 1.4.0 </div> <div class=\"description\"> <p>The <code>max</code> attribute of input element used with <code>type=\"number\"</code> or <code>type=\"range\"</code>.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_min\">min</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/text_field.js#L144\">packages/ember-htmlbars/lib/components/text_field.js:144</a> <br>Available since 1.4.0 </div> <div class=\"description\"> <p>The <code>min</code> attribute of input element used with <code>type=\"number\"</code> or <code>type=\"range\"</code>.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>   <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_pattern\">pattern</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/text_field.js#L134\">packages/ember-htmlbars/lib/components/text_field.js:134</a> </div> <div class=\"description\"> <p>The <code>pattern</code> attribute of input element.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_size\">size</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/text_field.js#L124\">packages/ember-htmlbars/lib/components/text_field.js:124</a> </div> <div class=\"description\"> <p>The <code>size</code> of the text field in characters.</p> </div> <p> <strong>Default:</strong> <code>null</code> </p> </div>      <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_type\">type</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/text_field.js#L100\">packages/ember-htmlbars/lib/components/text_field.js:100</a> </div> <div class=\"description\"> <p>The <code>type</code> attribute of the input element.</p> </div> <p> <strong>Default:</strong> <code>\"text\"</code> </p> </div> <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_value\">value</h2>\n<span class=\"type\"><a href=\"http://emberjs.com/api/classes/String.html\">String</a></span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/ember.js/tree/v2.7.0/packages/ember-htmlbars/lib/components/text_field.js#L89\">packages/ember-htmlbars/lib/components/text_field.js:89</a> </div> <div class=\"description\"> <p>The <code>value</code> attribute of the input element. As the user inputs text, this property is updated live.</p> </div> <p> <strong>Default:</strong> <code>\"\"</code> </p> </div>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/classes/Ember.TextField.html\" class=\"_attribution-link\">http://emberjs.com/api/classes/Ember.TextField.html</a>\n  </p>\n</div>\n","data/classes/ds.string":"<h1 class=\"api-header\"> DS.String Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"method_pluralize\">pluralize</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/ext/string.js#L8\">node_modules/ember-inflector/addon/lib/ext/string.js:8</a> </div> <div class=\"description\"> <p>See {{#crossLink \"Ember.String/pluralize\"}}{{/crossLink}}</p> </div>  </div> <div class=\"method  item-entry\"> <div class=\"title\"><h2 class=\"name anchorable-toc\" id=\"method_singularize\">singularize</h2></div> <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/ext/string.js#L18\">node_modules/ember-inflector/addon/lib/ext/string.js:18</a> </div> <div class=\"description\"> <p>See {{#crossLink \"Ember.String/singularize\"}}{{/crossLink}}</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.String.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.String.html</a>\n  </p>\n</div>\n","data/classes/ds.ember.htmlbars.helpers":"<h1 class=\"api-header\"> DS.Ember.HTMLBars.helpers Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pluralize\">pluralize</h2>\n<span class=\"args\"> (count, word) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/helpers/pluralize.js#L4\">node_modules/ember-inflector/addon/lib/helpers/pluralize.js:4</a> </div> <div class=\"description\"> <p>If you have Ember Inflector (such as if Ember Data is present), pluralize a word. For example, turn \"ox\" into \"oxen\". Example: {{pluralize count myProperty}} {{pluralize 1 \"oxen\"}} {{pluralize myProperty}} {{pluralize \"ox\"}}</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>count</strong> <span class=\"type\">[Number|Property]</span>\n</dt> <dd> count of objects </dd> <dt>\n<strong>word</strong> <span class=\"type\">String|Property</span>\n</dt> <dd> word to pluralize </dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.Ember.HTMLBars.helpers.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.Ember.HTMLBars.helpers.html</a>\n  </p>\n</div>\n","data/classes/ember.htmlbars.helpers":"<h1 class=\"api-header\"> Ember.HTMLBars.helpers Class </h1>  <div class=\"class-info\"> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_singularize\">singularize</h2>\n<span class=\"args\"> (word) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/helpers/singularize.js#L4\">node_modules/ember-inflector/addon/lib/helpers/singularize.js:4</a> </div> <div class=\"description\"> <p>If you have Ember Inflector (such as if Ember Data is present), singularize a word. For example, turn \"oxen\" into \"ox\". Example: {{singularize myProperty}} {{singularize \"oxen\"}}</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>word</strong> <span class=\"type\">String|Property</span>\n</dt> <dd> word to singularize </dd> </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/Ember.HTMLBars.helpers.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/Ember.HTMLBars.helpers.html</a>\n  </p>\n</div>\n","data/classes/ds.embeddedrecordsmixin":"<h1 class=\"api-header\"> DS.EmbeddedRecordsMixin Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/embedded-records-mixin.js#L9\">addon/serializers/embedded-records-mixin.js:9</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <h2 class=\"anchorable-toc\" id=\"toc_using-embedded-records\">Using Embedded Records</h2> <p><code>DS.EmbeddedRecordsMixin</code> supports serializing embedded records.</p> <p>To set up embedded records, include the mixin when extending a serializer, then define and configure embedded (model) relationships.</p> <p>Below is an example of a per-type serializer (<code>post</code> type).</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' },\n    comments: { serialize: 'ids' }\n  }\n});\n</pre> <p>Note that this use of <code>{ embedded: 'always' }</code> is unrelated to the <code>{ embedded: 'always' }</code> that is defined as an option on <code>DS.attr</code> as part of defining a model while working with the <code>ActiveModelSerializer</code>. Nevertheless, using <code>{ embedded: 'always' }</code> as an option to <code>DS.attr</code> is not a valid way to setup embedded records.</p> <p>The <code>attrs</code> option for a resource <code>{ embedded: 'always' }</code> is shorthand for:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  serialize: 'records',\n  deserialize: 'records'\n}\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_configuring-attrs\">Configuring Attrs</h3> <p>A resource's <code>attrs</code> option may be set to use <code>ids</code>, <code>records</code> or false for the <code>serialize</code> and <code>deserialize</code> settings.</p> <p>The <code>attrs</code> property can be set on the <code>ApplicationSerializer</code> or a per-type serializer.</p> <p>In the case where embedded JSON is expected while extracting a payload (reading) the setting is <code>deserialize: 'records'</code>, there is no need to use <code>ids</code> when extracting as that is the default behavior without this mixin if you are using the vanilla <code>EmbeddedRecordsMixin</code>. Likewise, to embed JSON in the payload while serializing <code>serialize: 'records'</code> is the setting to use. There is an option of not embedding JSON in the serialized payload by using <code>serialize: 'ids'</code>. If you do not want the relationship sent at all, you can use <code>serialize: false</code>.</p> <h3 class=\"anchorable-toc\" id=\"toc_embeddedrecordsmixin-defaults\">EmbeddedRecordsMixin defaults</h3> <p>If you do not overwrite <code>attrs</code> for a specific relationship, the <code>EmbeddedRecordsMixin</code> will behave in the following way:</p> <p>BelongsTo: <code>{ serialize: 'id', deserialize: 'id' }</code> HasMany: <code>{ serialize: false, deserialize: 'ids' }</code></p> <h3 class=\"anchorable-toc\" id=\"toc_model-relationships\">Model Relationships</h3> <p>Embedded records must have a model defined to be extracted and serialized. Note that when defining any relationships on your model such as <code>belongsTo</code> and <code>hasMany</code>, you should not both specify <code>async: true</code> and also indicate through the serializer's <code>attrs</code> attribute that the related model should be embedded for deserialization. If a model is declared embedded for deserialization (<code>embedded: 'always'</code> or <code>deserialize: 'records'</code>), then do not use <code>async: true</code>.</p> <p>To successfully extract and serialize embedded records the model relationships must be setup correcty. See the <a href=\"http://emberjs.com/guides/models/defining-models/#toc_defining-relationships\">defining relationships</a> section of the <strong>Defining Models</strong> guide page.</p> <p>Records without an <code>id</code> property are not considered embedded records, model instances must have an <code>id</code> property to be used with Ember Data.</p> <h3 class=\"anchorable-toc\" id=\"toc_example-json-payloads-models-and-serializers\">Example JSON payloads, Models and Serializers</h3> <p><strong>When customizing a serializer it is important to grok what the customizations are. Please read the docs for the methods this mixin provides, in case you need to modify it to fit your specific needs.</strong></p> <p>For example review the docs for each method of this mixin: * <a href=\"ds.embeddedrecordsmixin#method_normalize\">normalize</a> * <a href=\"ds.embeddedrecordsmixin#method_serializeBelongsTo\">serializeBelongsTo</a> * <a href=\"ds.embeddedrecordsmixin#method_serializeHasMany\">serializeHasMany</a></p> </div> <div class=\"pane\" id=\"methods\">      <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalize\">normalize</h2>\n<span class=\"args\"> (typeClass, hash, prop) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/embedded-records-mixin.js#L101\">addon/serializers/embedded-records-mixin.js:101</a> </div> <div class=\"description\"> <p>Normalize the record and recursively normalize/extract all the embedded records while pushing them into the store as they are encountered</p> <p>A payload with an attr configured for embedded records needs to be extracted:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>hash</strong> <span class=\"type\">Object</span>\n</dt> <dd> to be normalized </dd> <dt>\n<strong>prop</strong> <span class=\"type\">String</span>\n</dt> <dd> the hash has been referenced by </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the normalized hash</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_removeEmbeddedForeignKey\">removeEmbeddedForeignKey</h2>\n<span class=\"args\"> (snapshot, embeddedSnapshot, relationship, json) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/embedded-records-mixin.js#L451\">addon/serializers/embedded-records-mixin.js:451</a> </div> <div class=\"description\"> <p>When serializing an embedded record, modify the property (in the json payload) that refers to the parent record (foreign key for relationship).</p> <p>Serializing a <code>belongsTo</code> relationship removes the property that refers to the parent record</p> <p>Serializing a <code>hasMany</code> relationship does not remove the property that refers to the parent record.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>embeddedSnapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeBelongsTo\">serializeBelongsTo</h2>\n<span class=\"args\"> (snapshot, json, relationship) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/embedded-records-mixin.js#L142\">addon/serializers/embedded-records-mixin.js:142</a> </div> <div class=\"description\"> <p>Serialize <code>belongsTo</code> relationship when it is configured as an embedded object.</p> <p>This example of an author model belongs to a post model:</p> <pre class=\"highlight js \" data-language=\"js\">Post = DS.Model.extend({\n  title:    DS.attr('string'),\n  body:     DS.attr('string'),\n  author:   DS.belongsTo('author')\n});\n\nAuthor = DS.Model.extend({\n  name:     DS.attr('string'),\n  post:     DS.belongsTo('post')\n});\n</pre> <p>Use a custom (type) serializer for the post model to configure embedded author</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' }\n  }\n})\n</pre> <p>A payload with an attribute configured for embedded records can serialize the records together under the root attribute's payload:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"author\": {\n      \"id\": \"2\"\n      \"name\": \"dhh\"\n    }\n  }\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeHasMany\">serializeHasMany</h2>\n<span class=\"args\"> (snapshot, json, relationship) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/embedded-records-mixin.js#L238\">addon/serializers/embedded-records-mixin.js:238</a> </div> <div class=\"description\"> <p>Serializes <code>hasMany</code> relationships when it is configured as embedded objects.</p> <p>This example of a post model has many comments:</p> <pre class=\"highlight js \" data-language=\"js\">Post = DS.Model.extend({\n  title:    DS.attr('string'),\n  body:     DS.attr('string'),\n  comments: DS.hasMany('comment')\n});\n\nComment = DS.Model.extend({\n  body:     DS.attr('string'),\n  post:     DS.belongsTo('post')\n});\n</pre> <p>Use a custom (type) serializer for the post model to configure embedded comments</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: { embedded: 'always' }\n  }\n})\n</pre> <p>A payload with an attribute configured for embedded records can serialize the records together under the root attribute's payload:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n</pre> <p>The attrs options object can use more specific instruction for extracting and serializing. When serializing, an option to embed <code>ids</code>, <code>ids-and-types</code> or <code>records</code> can be set. When extracting the only option is <code>records</code>.</p> <p>So <code>{ embedded: 'always' }</code> is shorthand for: <code>{ serialize: 'records', deserialize: 'records' }</code></p> <p>To embed the <code>ids</code> for a related object (using a hasMany relationship):</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: { serialize: 'ids', deserialize: 'records' }\n  }\n})\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [\"1\", \"2\"]\n  }\n}\n</pre> <p>To embed the relationship as a collection of objects with <code>id</code> and <code>type</code> keys, set <code>ids-and-types</code> for the related object.</p> <p>This is particularly useful for polymorphic relationships where records don't share the same table and the <code>id</code> is not enough information.</p> <p>By example having a user that has many pets:</p> <pre class=\"highlight js \" data-language=\"js\">User = DS.Model.extend({\n  name:    DS.attr('string'),\n  pets: DS.hasMany('pet', { polymorphic: true })\n});\n\nPet = DS.Model.extend({\n  name: DS.attr('string'),\n});\n\nCat = Pet.extend({\n  // ...\n});\n\nParrot = Pet.extend({\n  // ...\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data;\n\nexport default DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    pets: { serialize: 'ids-and-types', deserialize: 'records' }\n  }\n});\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">{\n  \"user\": {\n    \"id\": \"1\"\n    \"name\": \"Bertin Osborne\",\n    \"pets\": [\n      { \"id\": \"1\", \"type\": \"Cat\" },\n      { \"id\": \"1\", \"type\": \"Parrot\"}\n    ]\n  }\n}\n</pre> <p>Note that the <code>ids-and-types</code> strategy is still behind the <code>ds-serialize-ids-and-types</code> feature flag.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.EmbeddedRecordsMixin.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.EmbeddedRecordsMixin.html</a>\n  </p>\n</div>\n","data/classes/ds.serializer":"<h1 class=\"api-header\"> DS.Serializer Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.Object</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializer.js#L7\">addon/serializer.js:7</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p><code>DS.Serializer</code> is an abstract base class that you should override in your application to customize it for your backend. The minimum set of methods that you should implement is:</p> <ul> <li><code>normalizeResponse()</code></li> <li><code>serialize()</code></li> </ul> <p>And you can optionally override the following methods:</p> <ul> <li><code>normalize()</code></li> </ul> <p>For an example implementation, see <a href=\"ds.jsonserializer\">DS.JSONSerializer</a>, the included JSON serializer.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalize\">normalize</h2>\n<span class=\"args\"> (typeClass, hash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializer.js#L73\">addon/serializer.js:73</a> </div> <div class=\"description\"> <p>The <code>normalize</code> method is used to convert a payload received from your external data source into the normalized form <code>store.push()</code> expects. You should override this method, munge the hash and return the normalized payload.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>hash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeResponse\">normalizeResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializer.js#L40\">addon/serializer.js:40</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>The <code>normalizeResponse</code> method is used to normalize a payload from the server to a JSON-API Document.</p> <p><a href=\"http://jsonapi.org/format/#document-structure\">http://jsonapi.org/format/#document-structure</a></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (record, options) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializer.js#L57\">addon/serializer.js:57</a> </div> <div class=\"description\"> <p>The <code>serialize</code> method is used when a record is saved in order to convert the record into the form that your external data source expects.</p> <p><code>serialize</code> takes an optional <code>options</code> hash with a single option:</p> <ul> <li>\n<code>includeId</code>: If this is <code>true</code>, <code>serialize</code> should include the ID in the serialized object it builds.</li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>record</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">[Object]</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_store\">store</h2>\n<span class=\"type\">{DS.Store}</span><span class=\"flag public\">public</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializer.js#L29\">addon/serializer.js:29</a> </div> <div class=\"description\"> <p>The <code>store</code> property is the application's <code>store</code> that contains all records. It's injected as a service. It can be used to push records from a non flat data structure server response.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.Serializer.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.Serializer.html</a>\n  </p>\n</div>\n","data/classes/ember.inflector":"<h1 class=\"api-header\"> Ember.Inflector Class  </h1>  <div class=\"class-info\"> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L32\">node_modules/ember-inflector/addon/lib/system/inflector.js:32</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>Inflector.Ember provides a mechanism for supplying inflection rules for your application. Ember includes a default set of inflection rules, and provides an API for providing additional rules.</p> <p>Examples:</p> <p>Creating an inflector with no rules.</p> <pre class=\"highlight js \" data-language=\"js\">var inflector = new Ember.Inflector();\n</pre> <p>Creating an inflector with the default ember ruleset.</p> <pre class=\"highlight js \" data-language=\"js\">var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);\n\ninflector.pluralize('cow'); //=&gt; 'kine'\ninflector.singularize('kine'); //=&gt; 'cow'\n</pre> <p>Creating an inflector and adding rules later.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var inflector = Ember.Inflector.inflector;\n\ninflector.pluralize('advice'); // =&gt; 'advices'\ninflector.uncountable('advice');\ninflector.pluralize('advice'); // =&gt; 'advice'\n\ninflector.pluralize('formula'); // =&gt; 'formulas'\ninflector.irregular('formula', 'formulae');\ninflector.pluralize('formula'); // =&gt; 'formulae'\n\n// you would not need to add these as they are the default rules\ninflector.plural(/$/, 's');\ninflector.singular(/s$/i, '');\n</pre> <p>Creating an inflector with a nondefault ruleset.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var rules = {\n  plurals:  [ /$/, 's' ],\n  singular: [ /\\s$/, '' ],\n  irregularPairs: [\n    [ 'cow', 'kine' ]\n  ],\n  uncountable: [ 'fish' ]\n};\n\nvar inflector = new Ember.Inflector(rules);\n</pre> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_disableCache_\">disableCache;</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L154\">node_modules/ember-inflector/addon/lib/system/inflector.js:154</a> </div>  </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_enableCache\">enableCache</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L121\">node_modules/ember-inflector/addon/lib/system/inflector.js:121</a> </div>  </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_irregular\">irregular</h2>\n<span class=\"args\"> (singular, plural) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L201\">node_modules/ember-inflector/addon/lib/system/inflector.js:201</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>singular</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>plural</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_plural\">plural</h2>\n<span class=\"args\"> (regex, string) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L172\">node_modules/ember-inflector/addon/lib/system/inflector.js:172</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>regex</strong> <span class=\"type\">RegExp</span>\n</dt>  <dt>\n<strong>string</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pluralize\">pluralize</h2>\n<span class=\"args\"> (word) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L211\">node_modules/ember-inflector/addon/lib/system/inflector.js:211</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>word</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_purgedCache\">purgedCache</h2>\n<span class=\"flag public\">public</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L143\">node_modules/ember-inflector/addon/lib/system/inflector.js:143</a> </div>  </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_singular\">singular</h2>\n<span class=\"args\"> (regex, string) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L182\">node_modules/ember-inflector/addon/lib/system/inflector.js:182</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>regex</strong> <span class=\"type\">RegExp</span>\n</dt>  <dt>\n<strong>string</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_singularize\">singularize</h2>\n<span class=\"args\"> (word) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L222\">node_modules/ember-inflector/addon/lib/system/inflector.js:222</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>word</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_uncountable\">uncountable</h2>\n<span class=\"args\"> (regex) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/node_modules/ember-inflector/addon/lib/system/inflector.js#L192\">node_modules/ember-inflector/addon/lib/system/inflector.js:192</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>regex</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/Ember.Inflector.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/Ember.Inflector.html</a>\n  </p>\n</div>\n","data/classes/ds.store":"<h1 class=\"api-header\"> DS.Store Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.Service</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L97\">addon/-private/system/store.js:97</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The store contains all of the data for records loaded from the server. It is also responsible for creating instances of <code>DS.Model</code> that wrap the individual data for a record, so that they can be bound to in your Handlebars templates.</p> <p>Define your application's store like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Store.extend({\n});\n</pre> <p>Most Ember.js applications will only have a single <code>DS.Store</code> that is automatically created by their <code>Ember.Application</code>.</p> <p>You can retrieve models from the store in several ways. To retrieve a record for a specific id, use <code>DS.Store</code>'s <code>findRecord()</code> method:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.findRecord('person', 123).then(function (person) {\n});\n</pre> <p>By default, the store will talk to your backend using a standard REST mechanism. You can customize how the store talks to your backend by specifying a custom adapter:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n});\n</pre> <p>You can learn more about writing a custom adapter by reading the <code>DS.Adapter</code> documentation.</p> <h3 class=\"anchorable-toc\" id=\"toc_store-createrecord-vs-push-vs-pushpayload\">Store createRecord() vs. push() vs. pushPayload()</h3> <p>The store provides multiple ways to create new record objects. They have some subtle differences in their use which are detailed below:</p> <p><a href=\"#method_createRecord\">createRecord</a> is used for creating new records on the client side. This will return a new record in the <code>created.uncommitted</code> state. In order to persist this record to the backend you will need to call <code>record.save()</code>.</p> <p><a href=\"#method_push\">push</a> is used to notify Ember Data's store of new or updated records that exist in the backend. This will return a record in the <code>loaded.saved</code> state. The primary use-case for <code>store#push</code> is to notify Ember Data about record updates (full or partial) that happen outside of the normal adapter methods (for example <a href=\"http://dev.w3.org/html5/eventsource/\">SSE</a> or <a href=\"http://www.w3.org/TR/2009/WD-websockets-20091222/\">Web Sockets</a>).</p> <p><a href=\"#method_pushPayload\">pushPayload</a> is a convenience wrapper for <code>store#push</code> that will deserialize payloads if the Serializer implements a <code>pushPayload</code> method.</p> <p>Note: When creating a new record using any of the above methods Ember Data will update <code>DS.RecordArray</code>s such as those returned by <code>store#peekAll()</code>, <code>store#findAll()</code> or <code>store#filter()</code>. This means any data bindings or computed properties that depend on the RecordArray will automatically be synced to include the new or updated record values.</p> </div> <div class=\"pane\" id=\"methods\">      <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_adapterFor\">adapterFor</h2>\n<span class=\"args\"> (modelName) </span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L2275\">addon/-private/system/store.js:2275</a> </div> <div class=\"description\"> <p>Returns an instance of the adapter for a given type. For example, <code>adapterFor('person')</code> will return an instance of <code>App.PersonAdapter</code>.</p> <p>If no <code>App.PersonAdapter</code> is found, this method will look for an <code>App.ApplicationAdapter</code> (the default adapter for your entire application).</p> <p>If no <code>App.ApplicationAdapter</code> is found, it will return the value of the <code>defaultAdapter</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> \n<dd> DS.Adapter</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_createRecord\">createRecord</h2>\n<span class=\"args\"> (modelName, inputProperties) </span><span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L255\">addon/-private/system/store.js:255</a> </div> <div class=\"description\"> <p>Create a new record in the current store. The properties passed to this method are set on the newly created record.</p> <p>To create a new instance of a <code>Post</code>:</p> <pre class=\"highlight js \" data-language=\"js\">store.createRecord('post', {\n  title: \"Rails is omakase\"\n});\n</pre> <p>To create a new instance of a <code>Post</code> that has a relationship with a <code>User</code> record:</p> <pre class=\"highlight js \" data-language=\"js\">var user = this.store.peekRecord('user', 1);\nstore.createRecord('post', {\n  title: \"Rails is omakase\",\n  user: user\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>inputProperties</strong> <span class=\"type\">Object</span>\n</dt> <dd> a hash of properties to set on the newly created record. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.model\">DS.Model</a></span> </dt>\n<dd> record</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_deleteRecord\">deleteRecord</h2>\n<span class=\"args\"> (record) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L342\">addon/-private/system/store.js:342</a> </div> <div class=\"description\"> <p>For symmetry, a record can be deleted via the store.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var post = store.createRecord('post', {\n  title: \"Rails is omakase\"\n});\n\nstore.deleteRecord(post);\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>record</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  </dl> </div> </div>      <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findAll\">findAll</h2>\n<span class=\"args\"> (modelName, options) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L1206\">addon/-private/system/store.js:1206</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p><code>findAll</code> asks the adapter's <code>findAll</code> method to find the records for the given type, and returns a promise which will resolve with all records of this type present in the store, even if the adapter only returns a subset of them.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findAll('author');\n  }\n});\n</pre> <p><em>When</em> the returned promise resolves depends on the reload behavior, configured via the passed <code>options</code> hash and the result of the adapter's <code>shouldReloadAll</code> method.</p> <h3 class=\"anchorable-toc\" id=\"toc_reloading\">Reloading</h3> <p>If <code>{ reload: true }</code> is passed or <code>adapter.shouldReloadAll</code> evaluates to <code>true</code>, then the returned promise resolves once the adapter returns data, regardless if there are already records in the store:</p> <pre class=\"highlight js \" data-language=\"js\">store.push({\n  data: {\n    id: 'first',\n    type: 'author'\n  }\n});\n\n// adapter#findAll resolves with\n// [\n//   {\n//     id: 'second',\n//     type: 'author'\n//   }\n// ]\nstore.findAll('author', { reload: true }).then(function(authors) {\n  authors.getEach(\"id\"); // ['first', 'second']\n});\n</pre> <p>If no reload is indicated via the abovementioned ways, then the promise immediately resolves with all the records currently loaded in the store.</p> <h3 class=\"anchorable-toc\" id=\"toc_background-reloading\">Background Reloading</h3> <p>Optionally, if <code>adapter.shouldBackgroundReloadAll</code> evaluates to <code>true</code>, then a background reload is started. Once this resolves, the array with which the promise resolves, is updated automatically so it contains all the records in the store:</p> <pre class=\"highlight js \" data-language=\"js\">// app/adapters/application.js\nexport default DS.Adapter.extend({\n  shouldReloadAll(store, snapshotsArray) {\n    return false;\n  },\n\n  shouldBackgroundReloadAll(store, snapshotsArray) {\n    return true;\n  }\n});\n\n// ...\n\nstore.push({\n  data: {\n    id: 'first',\n    type: 'author'\n  }\n});\n\nvar allAuthors;\nstore.findAll('author').then(function(authors) {\n  authors.getEach('id'); // ['first']\n\n  allAuthors = authors;\n});\n\n// later, once adapter#findAll resolved with\n// [\n//   {\n//     id: 'second',\n//     type: 'author'\n//   }\n// ]\n\nallAuthors.getEach('id'); // ['first', 'second']\n</pre> <p>If you would like to force or prevent background reloading, you can set a boolean value for <code>backgroundReload</code> in the options object for <code>findAll</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function() {\n    return this.store.findAll('post', { backgroundReload: false });\n  }\n});\n</pre> <p>If you pass an object on the <code>adapterOptions</code> property of the options argument it will be passed to you adapter via the <code>snapshotRecordArray</code></p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findAll('post', {\n      adapterOptions: { subscribe: false }\n    });\n  }\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  findAll: function(store, type, sinceToken, snapshotRecordArray) {\n    if (snapshotRecordArray.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n</pre> <p>See <a href=\"#method_peekAll\">peekAll</a> to get an array of current records in the store, without waiting until a reload is finished.</p> <p>See <a href=\"#method_query\">query</a> to only get a subset of records from the server.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div>     <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findRecord\">findRecord</h2>\n<span class=\"args\"> (modelName, id, options) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L417\">addon/-private/system/store.js:417</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>This method returns a record for a given type and id combination.</p> <p>The <code>findRecord</code> method will always resolve its promise with the same object for a given type and <code>id</code>.</p> <p>The <code>findRecord</code> method will always return a <strong>promise</strong> that will be resolved with the record.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id);\n  }\n});\n</pre> <p>If the record is not yet available, the store will ask the adapter's <code>find</code> method to find the necessary data. If the record is already present in the store, it depends on the reload behavior <em>when</em> the returned promise resolves.</p> <h3 class=\"anchorable-toc\" id=\"toc_reloading\">Reloading</h3> <p>The reload behavior is configured either via the passed <code>options</code> hash or the result of the adapter's <code>shouldReloadRecord</code>.</p> <p>If <code>{ reload: true }</code> is passed or <code>adapter.shouldReloadRecord</code> evaluates to <code>true</code>, then the returned promise resolves once the adapter returns data, regardless if the requested record is already in the store:</p> <pre class=\"highlight js \" data-language=\"js\">store.push({\n  data: {\n    id: 1,\n    type: 'post',\n    revision: 1\n  }\n});\n\n// adapter#findRecord resolves with\n// [\n//   {\n//     id: 1,\n//     type: 'post',\n//     revision: 2\n//   }\n// ]\nstore.findRecord('post', 1, { reload: true }).then(function(post) {\n  post.get(\"revision\"); // 2\n});\n</pre> <p>If no reload is indicated via the abovementioned ways, then the promise immediately resolves with the cached version in the store.</p> <h3 class=\"anchorable-toc\" id=\"toc_background-reloading\">Background Reloading</h3> <p>Optionally, if <code>adapter.shouldBackgroundReloadRecord</code> evaluates to <code>true</code>, then a background reload is started, which updates the records' data, once it is available:</p> <pre class=\"highlight js \" data-language=\"js\">// app/adapters/post.js\nimport ApplicationAdapter from \"./application\";\n\nexport default ApplicationAdapter.extend({\n  shouldReloadRecord(store, snapshot) {\n    return false;\n  },\n\n  shouldBackgroundReloadRecord(store, snapshot) {\n    return true;\n  }\n});\n\n// ...\n\nstore.push({\n  data: {\n    id: 1,\n    type: 'post',\n    revision: 1\n  }\n});\n\nvar blogPost = store.findRecord('post', 1).then(function(post) {\n  post.get('revision'); // 1\n});\n\n// later, once adapter#findRecord resolved with\n// [\n//   {\n//     id: 1,\n//     type: 'post',\n//     revision: 2\n//   }\n// ]\n\nblogPost.get('revision'); // 2\n</pre> <p>If you would like to force or prevent background reloading, you can set a boolean value for <code>backgroundReload</code> in the options object for <code>findRecord</code>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id, { backgroundReload: false });\n  }\n});\n</pre> <p>If you pass an object on the <code>adapterOptions</code> property of the options argument it will be passed to you adapter via the snapshot</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import Ember from 'ember';\n\nexport default Ember.Route.extend({\n  model: function(params) {\n    return this.store.findRecord('post', params.post_id, {\n      adapterOptions: { subscribe: false }\n    });\n  }\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import MyCustomAdapter from './custom-adapter';\n\nexport default MyCustomAdapter.extend({\n  findRecord: function(store, type, id, snapshot) {\n    if (snapshot.adapterOptions.subscribe) {\n      // ...\n    }\n    // ...\n  }\n});\n</pre> <p>See <a href=\"#method_peekRecord\">peekRecord</a> to get the cached version of a record.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">(String|Integer)</span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_getReference\">getReference</h2>\n<span class=\"args\"> (type, id) </span><span class=\"type\">RecordReference</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L825\">addon/-private/system/store.js:825</a> <br>Available since 2.5.0 </div> <div class=\"description\"> <p>Get the reference for the specified record.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var userRef = store.getReference('user', 1);\n\n// check if the user is loaded\nvar isLoaded = userRef.value() !== null;\n\n// get the record of the reference (null if not yet available)\nvar user = userRef.value();\n\n// get the identifier of the reference\nif (userRef.remoteType() === \"id\") {\nvar id = userRef.id();\n}\n\n// load user (via store.find)\nuserRef.load().then(...)\n\n// or trigger a reload\nuserRef.reload().then(...)\n\n// provide data for reference\nuserRef.push({ id: 1, username: \"@user\" }).then(function(user) {\nuserRef.value() === user;\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>type</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Integer</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">RecordReference</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_hasRecordForId\">hasRecordForId</h2>\n<span class=\"args\"> (modelName, inputId) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L921\">addon/-private/system/store.js:921</a> </div> <div class=\"description\"> <p>Returns true if a record for a given type and ID is already loaded.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">(String|DS.Model)</span>\n</dt>  <dt>\n<strong>inputId</strong> <span class=\"type\">(String|Integer)</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelFor\">modelFor</h2>\n<span class=\"args\"> (modelName) </span><span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L1841\">addon/-private/system/store.js:1841</a> </div> <div class=\"description\"> <p>Returns a model class for a particular key. Used by methods that take a type key (like <code>find</code>, <code>createRecord</code>, etc.)</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.model\">DS.Model</a></span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalize\">normalize</h2>\n<span class=\"args\"> (modelName, payload) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L2179\">addon/-private/system/store.js:2179</a> </div> <div class=\"description\"> <p><code>normalize</code> converts a json payload into the normalized form that <a href=\"#method_push\">push</a> expects.</p> <p>Example</p> <pre class=\"highlight js \" data-language=\"js\">socket.on('message', function(message) {\n  var modelName = message.model;\n  var data = message.data;\n  store.push(store.normalize(modelName, data));\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt> <dd> The name of the model type for this payload </dd> <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> The normalized payload</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_peekAll\">peekAll</h2>\n<span class=\"args\"> (modelName) </span><span class=\"type\"><a href=\"ds.recordarray\">DS.RecordArray</a></span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L1411\">addon/-private/system/store.js:1411</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>This method returns a filtered array that contains all of the known records for a given type in the store.</p> <p>Note that because it's just a filter, the result will contain any locally created records of the type, however, it will not make a request to the backend to retrieve additional records. If you would like to request all the records from the backend please use <a href=\"#method_findAll\">store.findAll</a>.</p> <p>Also note that multiple calls to <code>peekAll</code> for a given type will always return the same <code>RecordArray</code>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">var localPosts = store.peekAll('post');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.recordarray\">DS.RecordArray</a></span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_peekRecord\">peekRecord</h2>\n<span class=\"args\"> (modelName, id) </span><span class=\"type\">DS.Model|null</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L866\">addon/-private/system/store.js:866</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Get a record by a given type and ID without triggering a fetch.</p> <p>This method will synchronously return the record if it is available in the store, otherwise it will return <code>null</code>. A record is available if it has been fetched earlier, or pushed manually into the store.</p> <p><em>Note: This is an synchronous method and does not return a promise.</em></p> <pre class=\"highlight js \" data-language=\"js\">var post = store.peekRecord('post', 1);\n\npost.get('id'); // 1\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Integer</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">DS.Model|null</span> </dt>\n<dd> record</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_push\">push</h2>\n<span class=\"args\"> (data) </span><span class=\"type\">DS.Model|Array</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L1877\">addon/-private/system/store.js:1877</a> </div> <div class=\"description\"> <p>Push some data for a given type into the store.</p> <p>This method expects normalized <a href=\"http://jsonapi.org/\">JSON API</a> document. This means you have to follow <a href=\"http://jsonapi.org/format/\">JSON API specification</a> with few minor adjustments: - record's <code>type</code> should always be in singular, dasherized form - members (properties) should be camelCased</p> <p><a href=\"http://jsonapi.org/format/#document-top-level\">Your primary data should be wrapped inside <code>data</code> property</a>:</p> <pre class=\"highlight js \" data-language=\"js\">store.push({\n  data: {\n    // primary data for single record of type `Person`\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Daniel',\n      lastName: 'Kmak'\n    }\n  }\n});\n</pre> <p><a href=\"http://ember-twiddle.com/fb99f18cd3b4d3e2a4c7\">Demo.</a></p> <p><code>data</code> property can also hold an array (of records):</p> <pre class=\"highlight js \" data-language=\"js\">store.push({\n  data: [\n    // an array of records\n    {\n      id: '1',\n      type: 'person',\n      attributes: {\n        firstName: 'Daniel',\n        lastName: 'Kmak'\n      }\n    },\n    {\n      id: '2',\n      type: 'person',\n      attributes: {\n        firstName: 'Tom',\n        lastName: 'Dale'\n      }\n    }\n  ]\n});\n</pre> <p><a href=\"http://ember-twiddle.com/69cdbeaa3702159dc355\">Demo.</a></p> <p>There are some typical properties for <code>JSONAPI</code> payload: * <code>id</code> - mandatory, unique record's key * <code>type</code> - mandatory string which matches <code>model</code>'s dasherized name in singular form * <code>attributes</code> - object which holds data for record attributes - <code>DS.attr</code>'s declared in model * <code>relationships</code> - object which must contain any of the following properties under each relationships' respective key (example path is <code>relationships.achievements.data</code>): - <a href=\"http://jsonapi.org/format/#document-links\"><code>links</code></a> - <a href=\"http://jsonapi.org/format/#document-resource-object-linkage\"><code>data</code></a> - place for primary data - <a href=\"http://jsonapi.org/format/#document-meta\"><code>meta</code></a> - object which contains meta-information about relationship</p> <p>For this model:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n\n  children: DS.hasMany('person')\n});\n</pre> <p>To represent the children as IDs:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  data: {\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Tom',\n      lastName: 'Dale'\n    },\n    relationships: {\n      children: {\n        data: [\n          {\n            id: '2',\n            type: 'person'\n          },\n          {\n            id: '3',\n            type: 'person'\n          },\n          {\n            id: '4',\n            type: 'person'\n          }\n        ]\n      }\n    }\n  }\n}\n</pre> <p><a href=\"http://ember-twiddle.com/343e1735e034091f5bde\">Demo.</a></p> <p>To represent the children relationship as a URL:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  data: {\n    id: '1',\n    type: 'person',\n    attributes: {\n      firstName: 'Tom',\n      lastName: 'Dale'\n    },\n    relationships: {\n      children: {\n        links: {\n          related: '/people/1/children'\n        }\n      }\n    }\n  }\n}\n</pre> <p>If you're streaming data or implementing an adapter, make sure that you have converted the incoming data into this form. The store's <a href=\"#method_normalize\">normalize</a> method is a convenience helper for converting a json payload into the form Ember Data expects.</p> <pre class=\"highlight js \" data-language=\"js\">store.push(store.normalize('person', data));\n</pre> <p>This method can be used both to push in brand new records, as well as to update existing records.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>data</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">DS.Model|Array</span> </dt>\n<dd> the record(s) that was created or updated.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pushPayload\">pushPayload</h2>\n<span class=\"args\"> (modelName, inputPayload) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L2105\">addon/-private/system/store.js:2105</a> </div> <div class=\"description\"> <p>Push some raw data into the store.</p> <p>This method can be used both to push in brand new records, as well as to update existing records. You can push in more than one type of object at once. All objects should be in the format expected by the serializer.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.ActiveModelSerializer;\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">var pushData = {\n  posts: [\n    { id: 1, post_title: \"Great post\", comment_ids: [2] }\n  ],\n  comments: [\n    { id: 2, comment_body: \"Insightful comment\" }\n  ]\n}\n\nstore.pushPayload(pushData);\n</pre> <p>By default, the data will be deserialized using a default serializer (the application serializer if it exists).</p> <p>Alternatively, <code>pushPayload</code> will accept a model type which will determine which serializer will process the payload.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.ActiveModelSerializer;\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer;\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">store.pushPayload('comment', pushData); // Will use the application serializer\nstore.pushPayload('post', pushData); // Will use the post serializer\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt> <dd> Optionally, a model type used to determine which serializer will be used </dd> <dt>\n<strong>inputPayload</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_query\">query</h2>\n<span class=\"args\"> (modelName, query) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L1030\">addon/-private/system/store.js:1030</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>This method delegates a query to the adapter. This is the one place where adapter-level semantics are exposed to the application.</p> <p>Exposing queries this way seems preferable to creating an abstract query language for all server-side queries, and then require all adapters to implement them.</p>  <p>If you do something like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.query('person', { page: 1 });\n</pre> <p>The call made to the server, using a Rails backend, will look something like this:</p> <pre class=\"highlight text \" data-language=\"\">Started GET \"/api/v1/person?page=1\"\nProcessing by Api::V1::PersonsController#index as HTML\nParameters: { \"page\"=&gt;\"1\" }\n</pre>  <p>If you do something like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.query('person', { ids: [1, 2, 3] });\n</pre> <p>The call to the server, using a Rails backend, will look something like this:</p> <pre class=\"highlight text \" data-language=\"\">Started GET \"/api/v1/person?ids%5B%5D=1&amp;ids%5B%5D=2&amp;ids%5B%5D=3\"\nProcessing by Api::V1::PersonsController#index as HTML\nParameters: { \"ids\" =&gt; [\"1\", \"2\", \"3\"] }\n</pre> <p>This method returns a promise, which is resolved with a <code>RecordArray</code> once the server returns.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Any</span>\n</dt> <dd> an opaque query to be used by the adapter </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_queryRecord\">queryRecord</h2>\n<span class=\"args\"> (modelName, query) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L1099\">addon/-private/system/store.js:1099</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>This method makes a request for one record, where the <code>id</code> is not known beforehand (if the <code>id</code> is known, use <code>findRecord</code> instead).</p> <p>This method can be used when it is certain that the server will return a single object for the primary data.</p> <p>Let's assume our API provides an endpoint for the currently logged in user via:</p> <pre class=\"highlight text \" data-language=\"\">// GET /api/current_user\n{\n  user: {\n    id: 1234,\n    username: 'admin'\n  }\n}\n</pre> <p>Since the specific <code>id</code> of the <code>user</code> is not known beforehand, we can use <code>queryRecord</code> to get the user:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.queryRecord('user', {}).then(function(user) {\n  let username = user.get('username');\n  console.log(`Currently logged in as ${username}`);\n});\n</pre> <p>The request is made through the adapters' <code>queryRecord</code>:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// app/adapters/user.js\nimport DS from \"ember-data\";\n\nexport default DS.Adapter.extend({\n  queryRecord(modelName, query) {\n    return Ember.$.getJSON(\"/api/current_user\");\n  }\n});\n</pre> <p>Note: the primary use case for <code>store.queryRecord</code> is when a single record is queried and the <code>id</code> is not known beforehand. In all other cases <code>store.query</code> and using the first item of the array is likely the preferred way:</p> <pre class=\"highlight text \" data-language=\"\">// GET /users?username=unique\n{\n  data: [{\n    id: 1234,\n    type: 'user',\n    attributes: {\n      username: \"unique\"\n    }\n  }]\n}\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">store.query('user', { username: 'unique' }).then(function(users) {\n  return users.get('firstObject');\n}).then(function(user) {\n  let id = user.get('id');\n});\n</pre> <p>This method returns a promise, which resolves with the found record.</p> <p>If the adapter returns no data for the primary data of the payload, then <code>queryRecord</code> resolves with <code>null</code>:</p> <pre class=\"highlight text \" data-language=\"\">// GET /users?username=unique\n{\n  data: null\n}\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">store.queryRecord('user', { username: 'unique' }).then(function(user) {\n  console.log(user); // null\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Any</span>\n</dt> <dd> an opaque query to be used by the adapter </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise which resolves with the found record or `null`</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_recordIsLoaded\">recordIsLoaded</h2>\n<span class=\"args\"> (modelName, id) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L1574\">addon/-private/system/store.js:1574</a> </div> <div class=\"description\"> <p>This method returns if a certain record is already loaded in the store. Use this function to know beforehand if a findRecord() will result in a request or that it will be a cache hit.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.recordIsLoaded('post', 1); // false\nstore.findRecord('post', 1).then(function() {\n  store.recordIsLoaded('post', 1); // true\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div>       <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializerFor\">serializerFor</h2>\n<span class=\"args\"> (modelName) </span><span class=\"type\"><a href=\"ds.serializer\">DS.Serializer</a></span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L2307\">addon/-private/system/store.js:2307</a> </div> <div class=\"description\"> <p>Returns an instance of the serializer for a given type. For example, <code>serializerFor('person')</code> will return an instance of <code>App.PersonSerializer</code>.</p> <p>If no <code>App.PersonSerializer</code> is found, this method will look for an <code>App.ApplicationSerializer</code> (the default serializer for your entire application).</p> <p>if no <code>App.ApplicationSerializer</code> is found, it will attempt to get the <code>defaultSerializer</code> from the <code>PersonAdapter</code> (<code>adapterFor('person')</code>).</p> <p>If a serializer cannot be found on the adapter, it will fall back to an instance of <code>DS.JSONSerializer</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt> <dd> the record to serialize </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\"><a href=\"ds.serializer\">DS.Serializer</a></span> </dt>\n </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unloadAll\">unloadAll</h2>\n<span class=\"args\"> (modelName) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L1446\">addon/-private/system/store.js:1446</a> </div> <div class=\"description\"> <p>This method unloads all records in the store.</p> <p>Optionally you can pass a type which unload all records for a given type.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.unloadAll();\nstore.unloadAll('post');\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String=</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_unloadRecord\">unloadRecord</h2>\n<span class=\"args\"> (record) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L362\">addon/-private/system/store.js:362</a> </div> <div class=\"description\"> <p>For symmetry, a record can be unloaded via the store. Only non-dirty records can be unloaded.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.findRecord('post', 1).then(function(post) {\n  store.unloadRecord(post);\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>record</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  </dl> </div> </div>  </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_adapter\">adapter</h2>\n<span class=\"type\">{(DS.Adapter|String)}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/-private/system/store.js#L190\">addon/-private/system/store.js:190</a> </div> <div class=\"description\"> <p>The adapter to use to communicate to a backend server or other persistence layer.</p> <p>This can be specified as an instance, class, or string.</p> <p>If you want to specify <code>app/adapters/custom.js</code> as a string, do:</p> <pre class=\"highlight js \" data-language=\"js\">adapter: 'custom'\n</pre> </div> <p> <strong>Default:</strong> <code>DS.JSONAPIAdapter</code> </p> </div>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.Store.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.Store.html</a>\n  </p>\n</div>\n","data/classes/ds.adapter":"<h1 class=\"api-header\"> DS.Adapter Class  </h1>  <div class=\"class-info\"> <p>Extends: Ember.Object</p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L8\">addon/adapter.js:8</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>An adapter is an object that receives requests from a store and translates them into the appropriate action to take against your persistence layer. The persistence layer is usually an HTTP API, but may be anything, such as the browser's local storage. Typically the adapter is not invoked directly instead its functionality is accessed through the <code>store</code>.</p> <h3 class=\"anchorable-toc\" id=\"toc_creating-an-adapter\">Creating an Adapter</h3> <p>Create a new subclass of <code>DS.Adapter</code> in the <code>app/adapters</code> folder:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  // ...your code here\n});\n</pre> <p>Model-specific adapters can be created by putting your adapter class in an <code>app/adapters/</code> + <code>model-name</code> + <code>.js</code> file of the application.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  // ...Post-specific adapter code goes here\n});\n</pre> <p><code>DS.Adapter</code> is an abstract base class that you should override in your application to customize it for your backend. The minimum set of methods that you should implement is:</p> <ul> <li><code>findRecord()</code></li> <li><code>createRecord()</code></li> <li><code>updateRecord()</code></li> <li><code>deleteRecord()</code></li> <li><code>findAll()</code></li> <li><code>query()</code></li> </ul> <p>To improve the network performance of your application, you can optimize your adapter by overriding these lower-level methods:</p> <ul> <li><code>findMany()</code></li> </ul> <p>For an example implementation, see <code>DS.RESTAdapter</code>, the included REST adapter.</p> </div> <div class=\"pane\" id=\"methods\">  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_createRecord\">createRecord</h2>\n<span class=\"args\"> (store, type, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L287\">addon/adapter.js:287</a> </div> <div class=\"description\"> <p>Implement this method in a subclass to handle the creation of new records.</p> <p>Serializes the record and sends it to the server.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  createRecord: function(store, type, snapshot) {\n    var data = this.serialize(snapshot, { includeId: true });\n    var url = type;\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.ajax({\n        type: 'POST',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt> <dd> the DS.Model class of the record </dd> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_deleteRecord\">deleteRecord</h2>\n<span class=\"args\"> (store, type, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L378\">addon/adapter.js:378</a> </div> <div class=\"description\"> <p>Implement this method in a subclass to handle the deletion of a record.</p> <p>Sends a delete request for the record to the server.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  deleteRecord: function(store, type, snapshot) {\n    var data = this.serialize(snapshot, { includeId: true });\n    var id = snapshot.id;\n    var url = [type, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.ajax({\n        type: 'DELETE',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt> <dd> the DS.Model class of the record </dd> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findAll\">findAll</h2>\n<span class=\"args\"> (store, type, sinceToken, snapshotRecordArray) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L125\">addon/adapter.js:125</a> </div> <div class=\"description\"> <p>The <code>findAll()</code> method is used to retrieve all records for a given type.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  findAll: function(store, type, sinceToken) {\n    var url = type;\n    var query = { since: sinceToken };\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.getJSON(url, query).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>sinceToken</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshotRecordArray</strong> <span class=\"type\"><a href=\"ds.snapshotrecordarray\">DS.SnapshotRecordArray</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findMany\">findMany</h2>\n<span class=\"args\"> (store, type, ids, snapshots) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L431\">addon/adapter.js:431</a> </div> <div class=\"description\"> <p>Find multiple records at once if coalesceFindRequests is true.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt> <dd> the DS.Model class of the records </dd> <dt>\n<strong>ids</strong> <span class=\"type\">Array</span>\n</dt>  <dt>\n<strong>snapshots</strong> <span class=\"type\">Array</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findRecord\">findRecord</h2>\n<span class=\"args\"> (store, type, id, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L88\">addon/adapter.js:88</a> </div> <div class=\"description\"> <p>The <code>findRecord()</code> method is invoked when the store is asked for a record that has not previously been loaded. In response to <code>findRecord()</code> being called, you should query your persistence layer for a record with the given ID. The <code>findRecord</code> method should return a promise that will resolve to a JavaScript object that will be normalized by the serializer.</p> <p>Here is an example <code>findRecord</code> implementation:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  findRecord: function(store, type, id, snapshot) {\n    var url = [type.modelName, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.getJSON(url).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_generateIdForRecord\">generateIdForRecord</h2>\n<span class=\"args\"> (store, type, inputProperties) </span><span class=\"type\">(String|Number)</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L230\">addon/adapter.js:230</a> </div> <div class=\"description\"> <p>If the globally unique IDs for your records should be generated on the client, implement the <code>generateIdForRecord()</code> method. This method will be invoked each time you create a new record, and the value returned from it will be assigned to the record's <code>primaryKey</code>.</p> <p>Most traditional REST-like HTTP APIs will not use this method. Instead, the ID of the record will be set by the server, and your adapter will update the store with the new ID when it calls <code>didCreateRecord()</code>. Only implement this method if you intend to generate record IDs on the client-side.</p> <p>The <code>generateIdForRecord()</code> method will be invoked with the requesting store as the first parameter and the newly created record as the second parameter:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">generateIdForRecord: function(store, inputProperties) {\n  var uuid = App.generateUUIDWithStatisticallyLowOddsOfCollision();\n  return uuid;\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt> <dd> the DS.Model class of the record </dd> <dt>\n<strong>inputProperties</strong> <span class=\"type\">Object</span>\n</dt> <dd> a hash of properties to set on the newly created record. </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">(String|Number)</span> </dt>\n<dd> id</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_groupRecordsForFindMany\">groupRecordsForFindMany</h2>\n<span class=\"args\"> (store, snapshots) </span><span class=\"type\">Array</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L443\">addon/adapter.js:443</a> </div> <div class=\"description\"> <p>Organize records into groups, each of which is to be passed to separate calls to <code>findMany</code>.</p> <p>For example, if your api has nested URLs that depend on the parent, you will want to group records by their parent.</p> <p>The default implementation returns the records as a single group.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>snapshots</strong> <span class=\"type\">Array</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> an array of arrays of records, each of which is to be loaded separately by `findMany`.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_query\">query</h2>\n<span class=\"args\"> (store, type, query, recordArray) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L158\">addon/adapter.js:158</a> </div> <div class=\"description\"> <p>This method is called when you call <code>query</code> on the store.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  query: function(store, type, query) {\n    var url = type;\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.getJSON(url, query).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>recordArray</strong> <span class=\"type\"><a href=\"ds.adapterpopulatedrecordarray\">DS.AdapterPopulatedRecordArray</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_queryRecord\">queryRecord</h2>\n<span class=\"args\"> (store, type, query) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L190\">addon/adapter.js:190</a> </div> <div class=\"description\"> <p>The <code>queryRecord()</code> method is invoked when the store is asked for a single record through a query object.</p> <p>In response to <code>queryRecord()</code> being called, you should always fetch fresh data. Once found, you can asynchronously call the store's <code>push()</code> method to push the record into the store.</p> <p>Here is an example <code>queryRecord</code> implementation:</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\nimport Ember from 'ember';\n\nexport default DS.Adapter.extend(DS.BuildURLMixin, {\n  queryRecord: function(store, type, query) {\n    var urlForQueryRecord = this.buildURL(type.modelName, null, null, 'queryRecord', query);\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.getJSON(urlForQueryRecord, query).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\">subclass of DS.Model</span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (snapshot, options) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L260\">addon/adapter.js:260</a> </div> <div class=\"description\"> <p>Proxies to the serializer's <code>serialize</code> method.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  createRecord: function(store, type, snapshot) {\n    var data = this.serialize(snapshot, { includeId: true });\n    var url = type;\n\n    // ...\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> serialized snapshot</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_shouldBackgroundReloadAll\">shouldBackgroundReloadAll</h2>\n<span class=\"args\"> (store, snapshotRecordArray) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L593\">addon/adapter.js:593</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>This method is used by the store to determine if the store should reload a record array after the <code>store.findAll</code> method resolves with a cached record array.</p> <p>This method is <em>only</em> checked by the store when the store is returning a cached record array.</p> <p>If this method returns <code>true</code> the store will re-fetch all records from the adapter.</p> <p>For example, if you do not want to fetch complex data over a mobile connection, or if the network is down, you can implement <code>shouldBackgroundReloadAll</code> as follows:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">shouldBackgroundReloadAll: function(store, snapshotArray) {\n  var connection = window.navigator.connection;\n  if (connection === 'cellular' || connection === 'none') {\n    return false;\n  } else {\n    return true;\n  }\n}\n</pre> <p>By default this method returns <code>true</code>, indicating that a background reload should always be triggered.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>snapshotRecordArray</strong> <span class=\"type\"><a href=\"ds.snapshotrecordarray\">DS.SnapshotRecordArray</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_shouldBackgroundReloadRecord\">shouldBackgroundReloadRecord</h2>\n<span class=\"args\"> (store, snapshot) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L554\">addon/adapter.js:554</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>This method is used by the store to determine if the store should reload a record after the <code>store.findRecord</code> method resolves a cached record.</p> <p>This method is <em>only</em> checked by the store when the store is returning a cached record.</p> <p>If this method returns <code>true</code> the store will re-fetch a record from the adapter.</p> <p>For example, if you do not want to fetch complex data over a mobile connection, or if the network is down, you can implement <code>shouldBackgroundReloadRecord</code> as follows:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">shouldBackgroundReloadRecord: function(store, snapshot) {\n  var connection = window.navigator.connection;\n  if (connection === 'cellular' || connection === 'none') {\n    return false;\n  } else {\n    return true;\n  }\n}\n</pre> <p>By default this hook returns <code>true</code> so the data for the record is updated in the background.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_shouldReloadAll\">shouldReloadAll</h2>\n<span class=\"args\"> (store, snapshotRecordArray) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L506\">addon/adapter.js:506</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>This method is used by the store to determine if the store should reload all records from the adapter when records are requested by <code>store.findAll</code>.</p> <p>If this method returns <code>true</code>, the store will re-fetch all records from the adapter. If this method returns <code>false</code>, the store will resolve immediately using the cached records.</p> <p>For example, if you are building an events ticketing system, in which users can only reserve tickets for 20 minutes at a time, and want to ensure that in each route you have data that is no more than 20 minutes old you could write:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">shouldReloadAll: function(store, snapshotArray) {\n  var snapshots = snapshotArray.snapshots();\n\n  return snapshots.any(function(ticketSnapshot) {\n    var timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt')).minutes();\n    if (timeDiff &gt; 20) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n</pre> <p>This method would ensure that whenever you do <code>store.findAll('ticket')</code> you will always get a list of tickets that are no more than 20 minutes old. In case a cached version is more than 20 minutes old, <code>findAll</code> will not resolve until you fetched the latest versions.</p> <p>By default this methods returns <code>true</code> if the passed <code>snapshotRecordArray</code> is empty (meaning that there are no records locally available yet), otherwise it returns <code>false</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>snapshotRecordArray</strong> <span class=\"type\"><a href=\"ds.snapshotrecordarray\">DS.SnapshotRecordArray</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_shouldReloadRecord\">shouldReloadRecord</h2>\n<span class=\"args\"> (store, snapshot) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L463\">addon/adapter.js:463</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>This method is used by the store to determine if the store should reload a record from the adapter when a record is requested by <code>store.findRecord</code>.</p> <p>If this method returns <code>true</code>, the store will re-fetch a record from the adapter. If this method returns <code>false</code>, the store will resolve immediately using the cached record.</p> <p>For example, if you are building an events ticketing system, in which users can only reserve tickets for 20 minutes at a time, and want to ensure that in each route you have data that is no more than 20 minutes old you could write:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">shouldReloadRecord: function(store, ticketSnapshot) {\n  var timeDiff = moment().diff(ticketSnapshot.attr('lastAccessedAt')).minutes();\n  if (timeDiff &gt; 20) {\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre> <p>This method would ensure that whenever you do <code>store.findRecord('ticket',\nid)</code> you will always get a ticket that is no more than 20 minutes old. In case the cached version is more than 20 minutes old, <code>findRecord</code> will not resolve until you fetched the latest version.</p> <p>By default this hook returns <code>false</code>, as most UIs should not block user interactions while waiting on data update.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_updateRecord\">updateRecord</h2>\n<span class=\"args\"> (store, type, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L328\">addon/adapter.js:328</a> </div> <div class=\"description\"> <p>Implement this method in a subclass to handle the updating of a record.</p> <p>Serializes the record update and sends it to the server.</p> <p>The updateRecord method is expected to return a promise that will resolve with the serialized record. This allows the backend to inform the Ember Data store the current state of this record after the update. If it is not possible to return a serialized record the updateRecord promise can also resolve with <code>undefined</code> and the Ember Data store will assume all of the updates were successfully applied on the backend.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  updateRecord: function(store, type, snapshot) {\n    var data = this.serialize(snapshot, { includeId: true });\n    var id = snapshot.id;\n    var url = [type, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      Ember.$.ajax({\n        type: 'PUT',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt> <dd> the DS.Model class of the record </dd> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_coalesceFindRequests\">coalesceFindRequests</h2>\n<span class=\"type\">{boolean}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L420\">addon/adapter.js:420</a> </div> <div class=\"description\"> <p>By default the store will try to coalesce all <code>fetchRecord</code> calls within the same runloop into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call. You can opt out of this behaviour by either not implementing the findMany hook or by setting coalesceFindRequests to false.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_defaultSerializer\">defaultSerializer</h2>\n<span class=\"type\">{String}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapter.js#L66\">addon/adapter.js:66</a> </div> <div class=\"description\"> <p>If you would like your adapter to use a custom serializer you can set the <code>defaultSerializer</code> property to be the name of the custom serializer.</p> <p>Note the <code>defaultSerializer</code> serializer has a lower priority than a model specific serializer (i.e. <code>PostSerializer</code>) or the <code>application</code> serializer.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Adapter.extend({\n  defaultSerializer: 'django'\n});\n</pre> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.Adapter.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.Adapter.html</a>\n  </p>\n</div>\n","data/classes/ds.jsonapiadapter":"<h1 class=\"api-header\"> DS.JSONAPIAdapter Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.restadapter\">DS.RESTAdapter</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/json-api.js#L10\">addon/adapters/json-api.js:10</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"pane\" id=\"methods\">                <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findMany\">findMany</h2>\n<span class=\"args\"> (store, type, ids, snapshots) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.restadapter#method_findMany\">DS.RESTAdapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/json-api.js#L95\">addon/adapters/json-api.js:95</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>ids</strong> <span class=\"type\">Array</span>\n</dt>  <dt>\n<strong>snapshots</strong> <span class=\"type\">Array</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div>            <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pathForType\">pathForType</h2>\n<span class=\"args\"> (modelName) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.buildurlmixin#method_pathForType\">DS.BuildURLMixin</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/json-api.js#L112\">addon/adapters/json-api.js:112</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> path</dd> </dl> </div> </div>         <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_updateRecord\">updateRecord</h2>\n<span class=\"args\"> (store, type, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.restadapter#method_updateRecord\">DS.RESTAdapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/json-api.js#L123\">addon/adapters/json-api.js:123</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div>             </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_coalesceFindRequests\">coalesceFindRequests</h2>\n<span class=\"type\">{boolean}</span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.restadapter#method_coalesceFindRequests\">DS.RESTAdapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/json-api.js#L46\">addon/adapters/json-api.js:46</a> </div> <div class=\"description\"> <p>By default the JSONAPIAdapter will send each find request coming from a <code>store.find</code> or from accessing a relationship separately to the server. If your server supports passing ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests within a single runloop.</p> <p>For example, if you have an initial payload of:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">{\n  post: {\n    id: 1,\n    comments: [1, 2]\n  }\n}\n</pre> <p>By default calling <code>post.get('comments')</code> will trigger the following requests(assuming the comments haven't been loaded before):</p> <pre class=\"highlight text \" data-language=\"\">GET /comments/1\nGET /comments/2\n</pre> <p>If you set coalesceFindRequests to <code>true</code> it will instead trigger the following request:</p> <pre class=\"highlight text \" data-language=\"\">GET /comments?filter[id]=1,2\n</pre> <p>Setting coalesceFindRequests to <code>true</code> also works for <code>store.find</code> requests and <code>belongsTo</code> relationships accessed within the same runloop. If you set <code>coalesceFindRequests: true</code></p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.findRecord('comment', 1);\nstore.findRecord('comment', 2);\n</pre> <p>will also send a request to: <code>GET /comments?filter[id]=1,2</code></p> <p>Note: Requests coalescing rely on URL building strategy. So if you override <code>buildURL</code> in your app <code>groupRecordsForFindMany</code> more likely should be overridden as well in order for coalescing to work.</p> </div>  </div>     </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html</a>\n  </p>\n</div>\n","data/classes/ds.restadapter":"<h1 class=\"api-header\"> DS.RESTAdapter Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.adapter\">DS.Adapter</a></p> <p>Uses: <a href=\"ds.buildurlmixin\">DS.BuildURLMixin</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L28\">addon/adapters/rest.js:28</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>The REST adapter allows your store to communicate with an HTTP server by transmitting JSON via XHR. Most Ember.js apps that consume a JSON API should use the REST adapter.</p> <p>This adapter is designed around the idea that the JSON exchanged with the server should be conventional.</p> <h2 class=\"anchorable-toc\" id=\"toc_success-and-failure\">Success and failure</h2> <p>The REST adapter will consider a success any response with a status code of the 2xx family (\"Success\"), as well as 304 (\"Not Modified\"). Any other status code will be considered a failure.</p> <p>On success, the request promise will be resolved with the full response payload.</p> <p>Failed responses with status code 422 (\"Unprocessable Entity\") will be considered \"invalid\". The response will be discarded, except for the <code>errors</code> key. The request promise will be rejected with a <code>DS.InvalidError</code>. This error object will encapsulate the saved <code>errors</code> value.</p> <p>Any other status codes will be treated as an \"adapter error\". The request promise will be rejected, similarly to the \"invalid\" case, but with an instance of <code>DS.AdapterError</code> instead.</p> <h2 class=\"anchorable-toc\" id=\"toc_json-structure\">JSON Structure</h2> <p>The REST adapter expects the JSON returned from your server to follow these conventions.</p> <h3 class=\"anchorable-toc\" id=\"toc_object-root\">Object Root</h3> <p>The JSON payload should be an object that contains the record inside a root property. For example, in response to a <code>GET</code> request for <code>/posts/1</code>, the JSON should look like this:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"I'm Running to Reform the W3C's Tag\",\n    \"author\": \"Yehuda Katz\"\n  }\n}\n</pre> <p>Similarly, in response to a <code>GET</code> request for <code>/posts</code>, the JSON should look like this:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"posts\": [\n    {\n      \"id\": 1,\n      \"title\": \"I'm Running to Reform the W3C's Tag\",\n      \"author\": \"Yehuda Katz\"\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Rails is omakase\",\n      \"author\": \"D2H\"\n    }\n  ]\n}\n</pre> <p>Note that the object root can be pluralized for both a single-object response and an array response: the REST adapter is not strict on this. Further, if the HTTP server responds to a <code>GET</code> request to <code>/posts/1</code> (e.g. the response to a <code>findRecord</code> query) with more than one object in the array, Ember Data will only display the object with the matching ID.</p> <h3 class=\"anchorable-toc\" id=\"toc_conventional-names\">Conventional Names</h3> <p>Attribute names in your JSON payload should be the camelCased versions of the attributes in your Ember.js models.</p> <p>For example, if you have a <code>Person</code> model:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string')\n});\n</pre> <p>The JSON returned should look like this:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"person\": {\n    \"id\": 5,\n    \"firstName\": \"Barack\",\n    \"lastName\": \"Obama\",\n    \"occupation\": \"President\"\n  }\n}\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_errors\">Errors</h3> <p>If a response is considered a failure, the JSON payload is expected to include a top-level key <code>errors</code>, detailing any specific issues. For example:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"errors\": {\n    \"msg\": \"Something went wrong\"\n  }\n}\n</pre> <p>This adapter does not make any assumptions as to the format of the <code>errors</code> object. It will simply be passed along as is, wrapped in an instance of <code>DS.InvalidError</code> or <code>DS.AdapterError</code>. The serializer can interpret it afterwards.</p> <h2 class=\"anchorable-toc\" id=\"toc_customization\">Customization</h2>\n<h3 class=\"anchorable-toc\" id=\"toc_endpoint-path-customization\">Endpoint path customization</h3> <p>Endpoint paths can be prefixed with a <code>namespace</code> by setting the namespace property on the adapter:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  namespace: 'api/1'\n});\n</pre> <p>Requests for the <code>Person</code> model would now target <code>/api/1/people/1</code>.</p> <h3 class=\"anchorable-toc\" id=\"toc_host-customization\">Host customization</h3> <p>An adapter can target other hosts by setting the <code>host</code> property.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  host: 'https://api.example.com'\n});\n</pre>\n<h3 class=\"anchorable-toc\" id=\"toc_headers-customization\">Headers customization</h3> <p>Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary headers can be set as key/value pairs on the <code>RESTAdapter</code>'s <code>headers</code> object and Ember Data will send them along with each ajax request.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  headers: {\n    \"API_KEY\": \"secret key\",\n    \"ANOTHER_HEADER\": \"Some header value\"\n  }\n});\n</pre> <p><code>headers</code> can also be used as a computed property to support dynamic headers. In the example below, the <code>session</code> object has been injected into an adapter by Ember's container.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  headers: Ember.computed('session.authToken', function() {\n    return {\n      \"API_KEY\": this.get(\"session.authToken\"),\n      \"ANOTHER_HEADER\": \"Some header value\"\n    };\n  })\n});\n</pre> <p>In some cases, your dynamic headers may require data from some object outside of Ember's observer system (for example <code>document.cookie</code>). You can use the <a href=\"../../classes/ember.computedproperty#method_volatile\">volatile</a> function to set the property into a non-cached mode causing the headers to be recomputed with every request.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  headers: Ember.computed(function() {\n    return {\n      \"API_KEY\": Ember.get(document.cookie.match(/apiKey\\=([^;]*)/), \"1\"),\n      \"ANOTHER_HEADER\": \"Some header value\"\n    };\n  }).volatile()\n});\n</pre> </div> <div class=\"pane\" id=\"methods\">          <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_createRecord\">createRecord</h2>\n<span class=\"args\"> (store, type, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_createRecord\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L697\">addon/adapters/rest.js:697</a> </div> <div class=\"description\"> <p>Called by the store when a newly created record is saved via the <code>save</code> method on a model record instance.</p> <p>The <code>createRecord</code> method serializes the record and makes an Ajax (HTTP POST) request to a URL computed by <code>buildURL</code>.</p> <p>See <code>serialize</code> for information on how to customize the serialized form of a record.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_dataForRequest\">dataForRequest</h2>\n<span class=\"args\"> (params) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L1205\">addon/adapters/rest.js:1205</a> </div> <div class=\"description\"> <p>Get the data (body or query params) for a request.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>params</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> data</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_deleteRecord\">deleteRecord</h2>\n<span class=\"args\"> (store, type, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_deleteRecord\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L769\">addon/adapters/rest.js:769</a> </div> <div class=\"description\"> <p>Called by the store when a record is deleted.</p> <p>The <code>deleteRecord</code> method makes an Ajax (HTTP DELETE) request to a URL computed by <code>buildURL</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findAll\">findAll</h2>\n<span class=\"args\"> (store, type, sinceToken, snapshotRecordArray) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_findAll\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L436\">addon/adapters/rest.js:436</a> </div> <div class=\"description\"> <p>Called by the store in order to fetch a JSON array for all of the records for a given type.</p> <p>The <code>findAll</code> method makes an Ajax (HTTP GET) request to a URL computed by <code>buildURL</code>, and returns a promise for the resulting payload.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>sinceToken</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshotRecordArray</strong> <span class=\"type\"><a href=\"ds.snapshotrecordarray\">DS.SnapshotRecordArray</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findBelongsTo\">findBelongsTo</h2>\n<span class=\"args\"> (store, snapshot, url) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L645\">addon/adapters/rest.js:645</a> </div> <div class=\"description\"> <p>Called by the store in order to fetch the JSON for the unloaded record in a belongs-to relationship that was originally specified as a URL (inside of <code>links</code>).</p> <p>For example, if your original payload looks like this:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"person\": {\n    \"id\": 1,\n    \"name\": \"Tom Dale\",\n    \"links\": { \"group\": \"/people/1/group\" }\n  }\n}\n</pre> <p>This method will be called with the parent record and <code>/people/1/group</code>.</p> <p>The <code>findBelongsTo</code> method will make an Ajax (HTTP GET) request to the originally specified URL.</p> <p>The format of your <code>links</code> value will influence the final request URL via the <code>urlPrefix</code> method:</p> <ul> <li><p>Links beginning with <code>//</code>, <code>http://</code>, <code>https://</code>, will be used as is, with no further manipulation.</p></li> <li><p>Links beginning with a single <code>/</code> will have the current adapter's <code>host</code> value prepended to it.</p></li> <li><p>Links with no beginning <code>/</code> will have a parentURL prepended to it, via the current adapter's <code>buildURL</code>.</p></li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>url</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findHasMany\">findHasMany</h2>\n<span class=\"args\"> (store, snapshot, url) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L592\">addon/adapters/rest.js:592</a> </div> <div class=\"description\"> <p>Called by the store in order to fetch a JSON array for the unloaded records in a has-many relationship that were originally specified as a URL (inside of <code>links</code>).</p> <p>For example, if your original payload looks like this:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"links\": { \"comments\": \"/posts/1/comments\" }\n  }\n}\n</pre> <p>This method will be called with the parent record and <code>/posts/1/comments</code>.</p> <p>The <code>findHasMany</code> method will make an Ajax (HTTP GET) request to the originally specified URL.</p> <p>The format of your <code>links</code> value will influence the final request URL via the <code>urlPrefix</code> method:</p> <ul> <li><p>Links beginning with <code>//</code>, <code>http://</code>, <code>https://</code>, will be used as is, with no further manipulation.</p></li> <li><p>Links beginning with a single <code>/</code> will have the current adapter's <code>host</code> value prepended to it.</p></li> <li><p>Links with no beginning <code>/</code> will have a parentURL prepended to it, via the current adapter's <code>buildURL</code>.</p></li> </ul> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>url</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findMany\">findMany</h2>\n<span class=\"args\"> (store, type, ids, snapshots) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_findMany\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L545\">addon/adapters/rest.js:545</a> </div> <div class=\"description\"> <p>Called by the store in order to fetch several records together if <code>coalesceFindRequests</code> is true</p> <p>For example, if the original payload looks like:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"id\": 1,\n  \"title\": \"Rails is omakase\",\n  \"comments\": [ 1, 2, 3 ]\n}\n</pre> <p>The IDs will be passed as a URL-encoded Array of IDs, in this form:</p> <pre class=\"highlight text \" data-language=\"\">ids[]=1&amp;ids[]=2&amp;ids[]=3\n</pre> <p>Many servers, such as Rails and PHP, will automatically convert this URL-encoded array into an Array for you on the server-side. If you want to encode the IDs, differently, just override this (one-line) method.</p> <p>The <code>findMany</code> method makes an Ajax (HTTP GET) request to a URL computed by <code>buildURL</code>, and returns a promise for the resulting payload.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>ids</strong> <span class=\"type\">Array</span>\n</dt>  <dt>\n<strong>snapshots</strong> <span class=\"type\">Array</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_findRecord\">findRecord</h2>\n<span class=\"args\"> (store, type, id, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_findRecord\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L403\">addon/adapters/rest.js:403</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called by the store in order to fetch the JSON for a given type and ID.</p> <p>The <code>findRecord</code> method makes an Ajax request to a URL computed by <code>buildURL</code>, and returns a promise for the resulting payload.</p> <p>This method performs an HTTP <code>GET</code> request with the id provided as part of the query string.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div>   <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_groupRecordsForFindMany\">groupRecordsForFindMany</h2>\n<span class=\"args\"> (store, snapshots) </span><span class=\"type\">Array</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_groupRecordsForFindMany\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L819\">addon/adapters/rest.js:819</a> </div> <div class=\"description\"> <p>Organize records into groups, each of which is to be passed to separate calls to <code>findMany</code>.</p> <p>This implementation groups together records that have the same base URL but differing ids. For example <code>/comments/1</code> and <code>/comments/2</code> will be grouped together because we know findMany can coalesce them together as <code>/comments?ids[]=1&amp;ids[]=2</code></p> <p>It also supports urls where ids are passed as a query param, such as <code>/comments?id=1</code> but not those where there is more than 1 query param such as <code>/comments?id=2&amp;name=David</code> Currently only the query param of <code>id</code> is supported. If you need to support others, please override this or the <code>_stripIDFromURL</code> method.</p> <p>It does not group records that have differing base urls, such as for example: <code>/posts/1/comments/2</code> and <code>/posts/2/comments/3</code></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>snapshots</strong> <span class=\"type\">Array</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Array</span> </dt>\n<dd> an array of arrays of records, each of which is to be loaded separately by `findMany`.</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_handleResponse\">handleResponse</h2>\n<span class=\"args\"> (status, headers, payload, requestData) </span><span class=\"type\">Object | DS.AdapterError</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L883\">addon/adapters/rest.js:883</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Takes an ajax response, and returns the json payload or an error.</p> <p>By default this hook just returns the json payload passed to it. You might want to override it in two cases:</p> <ol> <li><p>Your API might return useful results in the response headers. Response headers are passed in as the second argument.</p></li> <li><p>Your API might return errors as successful responses with status code 200 and an Errors text or object. You can return a <code>DS.InvalidError</code> or a <code>DS.AdapterError</code> (or a sub class) from this hook and it will automatically reject the promise and put your record into the invalid or error state.</p></li> </ol> <p>Returning a <code>DS.InvalidError</code> from this method will cause the record to transition into the <code>invalid</code> state and make the <code>errors</code> object available on the record. When returning an <code>DS.InvalidError</code> the store will attempt to normalize the error data returned from the server using the serializer's <code>extractErrors</code> method.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>status</strong> <span class=\"type\">Number</span>\n</dt>  <dt>\n<strong>headers</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>requestData</strong> <span class=\"type\">Object</span>\n</dt> <dd> - the original request information </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object | DS.AdapterError</span> </dt>\n<dd> response</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_headersForRequest\">headersForRequest</h2>\n<span class=\"args\"> (params) </span><span class=\"type\">Object</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L1320\">addon/adapters/rest.js:1320</a> </div> <div class=\"description\"> <p>Get the headers for a request.</p> <p>By default the value of the <code>headers</code> property of the adapter is returned.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>params</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> headers</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isInvalid\">isInvalid</h2>\n<span class=\"args\"> (status, headers, payload) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L957\">addon/adapters/rest.js:957</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Default <code>handleResponse</code> implementation uses this hook to decide if the response is a an invalid error.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>status</strong> <span class=\"type\">Number</span>\n</dt>  <dt>\n<strong>headers</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_isSuccess\">isSuccess</h2>\n<span class=\"args\"> (status, headers, payload) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L942\">addon/adapters/rest.js:942</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Default <code>handleResponse</code> implementation uses this hook to decide if the response is a success.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>status</strong> <span class=\"type\">Number</span>\n</dt>  <dt>\n<strong>headers</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_methodForRequest\">methodForRequest</h2>\n<span class=\"args\"> (params) </span><span class=\"type\">String</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L1263\">addon/adapters/rest.js:1263</a> </div> <div class=\"description\"> <p>Get the HTTP method for a request.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>params</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> HTTP method</dd> </dl> </div> </div>    <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_query\">query</h2>\n<span class=\"args\"> (store, type, query) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_query\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L472\">addon/adapters/rest.js:472</a> </div> <div class=\"description\"> <p>Called by the store in order to fetch a JSON array for the records that match a particular query.</p> <p>The <code>query</code> method makes an Ajax (HTTP GET) request to a URL computed by <code>buildURL</code>, and returns a promise for the resulting payload.</p> <p>The <code>query</code> argument is a simple JavaScript object that will be passed directly to the server as parameters.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_queryRecord\">queryRecord</h2>\n<span class=\"args\"> (store, type, query) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_queryRecord\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L508\">addon/adapters/rest.js:508</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>Called by the store in order to fetch a JSON object for the record that matches a particular query.</p> <p>The <code>queryRecord</code> method makes an Ajax (HTTP GET) request to a URL computed by <code>buildURL</code>, and returns a promise for the resulting payload.</p> <p>The <code>query</code> argument is a simple JavaScript object that will be passed directly to the server as parameters.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>query</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div>      <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_sortQueryParams\">sortQueryParams</h2>\n<span class=\"args\"> (obj) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L241\">addon/adapters/rest.js:241</a> </div> <div class=\"description\"> <p>By default, the RESTAdapter will send the query params sorted alphabetically to the server.</p> <p>For example:</p> <pre class=\"highlight js \" data-language=\"js\">  store.query('posts', { sort: 'price', category: 'pets' });\n</pre> <p>will generate a requests like this <code>/posts?category=pets&amp;sort=price</code>, even if the parameters were specified in a different order.</p> <p>That way the generated URL will be deterministic and that simplifies caching mechanisms in the backend.</p> <p>Setting <code>sortQueryParams</code> to a falsey value will respect the original order.</p> <p>In case you want to sort the query parameters with a different criteria, set <code>sortQueryParams</code> to your custom sort function.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  sortQueryParams: function(params) {\n    var sortedKeys = Object.keys(params).sort().reverse();\n    var len = sortedKeys.length, newParams = {};\n\n    for (var i = 0; i &lt; len; i++) {\n      newParams[sortedKeys[i]] = params[sortedKeys[i]];\n    }\n    return newParams;\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>obj</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_updateRecord\">updateRecord</h2>\n<span class=\"args\"> (store, type, snapshot) </span><span class=\"type\">Promise</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_updateRecord\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L732\">addon/adapters/rest.js:732</a> </div> <div class=\"description\"> <p>Called by the store when an existing record is saved via the <code>save</code> method on a model record instance.</p> <p>The <code>updateRecord</code> method serializes the record and makes an Ajax (HTTP PUT) request to a URL computed by <code>buildURL</code>.</p> <p>See <code>serialize</code> for information on how to customize the serialized form of a record.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>type</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Promise</span> </dt>\n<dd> promise</dd> </dl> </div> </div>          <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_urlForRequest\">urlForRequest</h2>\n<span class=\"args\"> (params) </span><span class=\"type\">String</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L1283\">addon/adapters/rest.js:1283</a> </div> <div class=\"description\"> <p>Get the URL for a request.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>params</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> URL</dd> </dl> </div> </div>   </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_coalesceFindRequests\">coalesceFindRequests</h2>\n<span class=\"type\">{boolean}</span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.adapter#method_coalesceFindRequests\">DS.Adapter</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L297\">addon/adapters/rest.js:297</a> </div> <div class=\"description\"> <p>By default the RESTAdapter will send each find request coming from a <code>store.find</code> or from accessing a relationship separately to the server. If your server supports passing ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests within a single runloop.</p> <p>For example, if you have an initial payload of:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">{\n  post: {\n    id: 1,\n    comments: [1, 2]\n  }\n}\n</pre> <p>By default calling <code>post.get('comments')</code> will trigger the following requests(assuming the comments haven't been loaded before):</p> <pre class=\"highlight text \" data-language=\"\">GET /comments/1\nGET /comments/2\n</pre> <p>If you set coalesceFindRequests to <code>true</code> it will instead trigger the following request:</p> <pre class=\"highlight text \" data-language=\"\">GET /comments?ids[]=1&amp;ids[]=2\n</pre> <p>Setting coalesceFindRequests to <code>true</code> also works for <code>store.find</code> requests and <code>belongsTo</code> relationships accessed within the same runloop. If you set <code>coalesceFindRequests: true</code></p> <pre class=\"highlight javascript \" data-language=\"javascript\">store.findRecord('comment', 1);\nstore.findRecord('comment', 2);\n</pre> <p>will also send a request to: <code>GET /comments?ids[]=1&amp;ids[]=2</code></p> <p>Note: Requests coalescing rely on URL building strategy. So if you override <code>buildURL</code> in your app <code>groupRecordsForFindMany</code> more likely should be overridden as well in order for coalescing to work.</p> </div>  </div>  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_headers\">headers</h2>\n<span class=\"type\">{Object}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L381\">addon/adapters/rest.js:381</a> </div> <div class=\"description\"> <p>Some APIs require HTTP headers, e.g. to provide an API key. Arbitrary headers can be set as key/value pairs on the <code>RESTAdapter</code>'s <code>headers</code> object and Ember Data will send them along with each ajax request. For dynamic headers see <a href=\"ds.restadapter#toc_headers-customization\">headers customization</a>.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  headers: {\n    \"API_KEY\": \"secret key\",\n    \"ANOTHER_HEADER\": \"Some header value\"\n  }\n});\n</pre> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_host\">host</h2>\n<span class=\"type\">{String}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L364\">addon/adapters/rest.js:364</a> </div> <div class=\"description\"> <p>An adapter can target other hosts by setting the <code>host</code> property.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  host: 'https://api.example.com'\n});\n</pre> <p>Requests for the <code>Post</code> model would now target <code>https://api.example.com/post/</code>.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_namespace\">namespace</h2>\n<span class=\"type\">{String}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/adapters/rest.js#L346\">addon/adapters/rest.js:346</a> </div> <div class=\"description\"> <p>Endpoint paths can be prefixed with a <code>namespace</code> by setting the namespace property on the adapter:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTAdapter.extend({\n  namespace: 'api/1'\n});\n</pre> <p>Requests for the <code>Post</code> model would now target <code>/api/1/post/</code>.</p> </div>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.RESTAdapter.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.RESTAdapter.html</a>\n  </p>\n</div>\n","data/classes/ds.jsonapiserializer":"<h1 class=\"api-header\"> DS.JSONAPISerializer Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.jsonserializer\">DS.JSONSerializer</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L14\">addon/serializers/json-api.js:14</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>Ember Data 2.0 Serializer:</p> <p>In Ember Data a Serializer is used to serialize and deserialize records when they are transferred in and out of an external source. This process involves normalizing property names, transforming attribute values and serializing relationships.</p> <p><code>JSONAPISerializer</code> supports the <a href=\"http://jsonapi.org/\">http://jsonapi.org/</a> spec and is the serializer recommended by Ember Data.</p> <p>This serializer normalizes a JSON API payload that looks like:</p> <pre class=\"highlight js \" data-language=\"js\">\n  // models/player.js\n  import DS from \"ember-data\";\n\n  export default DS.Model.extend({\n    name: DS.attr(),\n    skill: DS.attr(),\n    gamesPlayed: DS.attr(),\n    club: DS.belongsTo('club')\n  });\n\n  // models/club.js\n  import DS from \"ember-data\";\n\n  export default DS.Model.extend({\n    name: DS.attr(),\n    location: DS.attr(),\n    players: DS.hasMany('player')\n  });\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">\n  {\n    \"data\": [\n      {\n        \"attributes\": {\n          \"name\": \"Benfica\",\n          \"location\": \"Portugal\"\n        },\n        \"id\": \"1\",\n        \"relationships\": {\n          \"players\": {\n            \"data\": [\n              {\n                \"id\": \"3\",\n                \"type\": \"players\"\n              }\n            ]\n          }\n        },\n        \"type\": \"clubs\"\n      }\n    ],\n    \"included\": [\n      {\n        \"attributes\": {\n          \"name\": \"Eusebio Silva Ferreira\",\n          \"skill\": \"Rocket shot\",\n          \"games-played\": 431\n        },\n        \"id\": \"3\",\n        \"relationships\": {\n          \"club\": {\n            \"data\": {\n              \"id\": \"1\",\n              \"type\": \"clubs\"\n            }\n          }\n        },\n        \"type\": \"players\"\n      }\n    ]\n  }\n</pre> <p>to the format that the Ember Data store expects.</p> </div> <div class=\"pane\" id=\"methods\">            <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractAttributes\">extractAttributes</h2>\n<span class=\"args\"> (modelClass, resourceHash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_extractAttributes\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L253\">addon/serializers/json-api.js:253</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>resourceHash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div>     <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractRelationship\">extractRelationship</h2>\n<span class=\"args\"> (relationshipHash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_extractRelationship\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L274\">addon/serializers/json-api.js:274</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>relationshipHash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractRelationships\">extractRelationships</h2>\n<span class=\"args\"> (modelClass, resourceHash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_extractRelationships\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L299\">addon/serializers/json-api.js:299</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelClass</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>resourceHash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_keyForAttribute\">keyForAttribute</h2>\n<span class=\"args\"> (key, method) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_keyForAttribute\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L397\">addon/serializers/json-api.js:397</a> </div> <div class=\"description\"> <p><code>keyForAttribute</code> can be used to define rules for how to convert an attribute name in your model to a key in your JSON. By default <code>JSONAPISerializer</code> follows the format used on the examples of <a href=\"http://jsonapi.org/format\">http://jsonapi.org/format</a> and uses dashes as the word separator in the JSON attribute keys.</p> <p>This behaviour can be easily customized by extending this method.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONAPISerializer.extend({\n  keyForAttribute: function(attr, method) {\n    return Ember.String.dasherize(attr).toUpperCase();\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>method</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> normalized key</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_keyForRelationship\">keyForRelationship</h2>\n<span class=\"args\"> (key, typeClass, method) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_keyForRelationship\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L427\">addon/serializers/json-api.js:427</a> </div> <div class=\"description\"> <p><code>keyForRelationship</code> can be used to define a custom key when serializing and deserializing relationship properties. By default <code>JSONAPISerializer</code> follows the format used on the examples of <a href=\"http://jsonapi.org/format\">http://jsonapi.org/format</a> and uses dashes as word separators in relationship properties.</p> <p>This behaviour can be easily customized by extending this method.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\"> import DS from 'ember-data';\n\n export default DS.JSONAPISerializer.extend({\n   keyForRelationship: function(key, relationship, method) {\n     return Ember.String.underscore(key);\n   }\n });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>typeClass</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>method</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> normalized key</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelNameFromPayloadKey\">modelNameFromPayloadKey</h2>\n<span class=\"args\"> (key) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_modelNameFromPayloadKey\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L350\">addon/serializers/json-api.js:350</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> the model's modelName</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelNameFromPayloadType\">modelNameFromPayloadType</h2>\n<span class=\"args\"> (payloadType) </span><span class=\"type\">String</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_modelNameFromPayloadType\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L630\">addon/serializers/json-api.js:630</a> </div> <div class=\"description\"> <p><code>modelNameFromPayloadType</code> can be used to change the mapping for a DS model name, taken from the value in the payload.</p> <p>Say your API namespaces the type of a model and returns the following payload for the <code>post</code> model:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// GET /api/posts/1\n{\n  \"data\": {\n    \"id\": 1,\n    \"type: \"api::v1::post\"\n  }\n}\n</pre> <p>By overwriting <code>modelNameFromPayloadType</code> you can specify that the <code>posr</code> model should be used:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from \"ember-data\";\n\nexport default DS.JSONAPISerializer.extend({\n  modelNameFromPayloadType(payloadType) {\n    return payloadType.replace('api::v1::', '');\n  }\n});\n</pre> <p>By default the modelName for a model is its singularized name in dasherized form. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override <code>modelNameFromPayloadType</code> for this purpose.</p> <p>Also take a look at <a href=\"#method_payloadTypeFromModelName\">payloadTypeFromModelName</a> to customize how the type of a record should be serialized.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>payloadType</strong> <span class=\"type\">String</span>\n</dt> <dd> type from payload </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> modelName</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalize\">normalize</h2>\n<span class=\"args\"> (modelClass, resourceHash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_normalize\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L370\">addon/serializers/json-api.js:370</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>resourceHash</strong> <span class=\"type\">Object</span>\n</dt> <dd> the resource hash from the adapter </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> the normalized resource hash</dd> </dl> </div> </div>                  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_payloadKeyFromModelName\">payloadKeyFromModelName</h2>\n<span class=\"args\"> (modelName) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L360\">addon/serializers/json-api.js:360</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_payloadTypeFromModelName\">payloadTypeFromModelName</h2>\n<span class=\"args\"> (modelname) </span><span class=\"type\">String</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L678\">addon/serializers/json-api.js:678</a> </div> <div class=\"description\"> <p><code>payloadTypeFromModelName</code> can be used to change the mapping for the type in the payload, taken from the model name.</p> <p>Say your API namespaces the type of a model and expects the following payload when you update the <code>post</code> model:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// POST /api/posts/1\n{\n  \"data\": {\n    \"id\": 1,\n    \"type\": \"api::v1::post\"\n  }\n}\n</pre> <p>By overwriting <code>payloadTypeFromModelName</code> you can specify that the namespaces model name for the <code>post</code> should be used:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from \"ember-data\";\n\nexport default JSONAPISerializer.extend({\n  payloadTypeFromModelName(modelName) {\n    return \"api::v1::\" + modelName;\n  }\n});\n</pre> <p>By default the payload type is the pluralized model name. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override <code>payloadTypeFromModelName</code> for this purpose.</p> <p>Also take a look at <a href=\"#method_modelNameFromPayloadType\">modelNameFromPayloadType</a> to customize how the model name from should be mapped from the payload.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelname</strong> <span class=\"type\">String</span>\n</dt> <dd> modelName from the record </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> payloadType</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pushPayload\">pushPayload</h2>\n<span class=\"args\"> (store, payload) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L213\">addon/serializers/json-api.js:213</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (snapshot, options) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_serialize\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L457\">addon/serializers/json-api.js:457</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> json</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeAttribute\">serializeAttribute</h2>\n<span class=\"args\"> (snapshot, json, key, attribute) </span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_serializeAttribute\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L487\">addon/serializers/json-api.js:487</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>attribute</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeBelongsTo\">serializeBelongsTo</h2>\n<span class=\"args\"> (snapshot, json, relationship) </span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_serializeBelongsTo\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L516\">addon/serializers/json-api.js:516</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeHasMany\">serializeHasMany</h2>\n<span class=\"args\"> (snapshot, json, relationship) </span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_serializeHasMany\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json-api.js#L567\">addon/serializers/json-api.js:567</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div>     </div>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.JSONAPISerializer.html</a>\n  </p>\n</div>\n","data/classes/ds.jsonserializer":"<h1 class=\"api-header\"> DS.JSONSerializer Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.serializer\">DS.Serializer</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L19\">addon/serializers/json.js:19</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>Ember Data 2.0 Serializer:</p> <p>In Ember Data a Serializer is used to serialize and deserialize records when they are transferred in and out of an external source. This process involves normalizing property names, transforming attribute values and serializing relationships.</p> <p>By default, Ember Data uses and recommends the <code>JSONAPISerializer</code>.</p> <p><code>JSONSerializer</code> is useful for simpler or legacy backends that may not support the <a href=\"http://jsonapi.org/\">http://jsonapi.org/</a> spec.</p> <p>For example, given the following <code>User</code> model and JSON payload:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  friends: DS.hasMany('user'),\n  house: DS.belongsTo('location'),\n\n  name: DS.attr('string')\n});\n</pre>\n<pre class=\"highlight js \" data-language=\"js\">{\n  id: 1,\n  name: 'Sebastian',\n  friends: [3, 4],\n  links: {\n    house: '/houses/lefkada'\n  }\n}\n</pre> <p><code>JSONSerializer</code> will normalize the JSON payload to the JSON API format that the Ember Data store expects.</p> <p>You can customize how JSONSerializer processes its payload by passing options in the <code>attrs</code> hash or by subclassing the <code>JSONSerializer</code> and overriding hooks:</p> <ul> <li>To customize how a single record is normalized, use the <code>normalize</code> hook.</li> <li>To customize how <code>JSONSerializer</code> normalizes the whole server response, use the <code>normalizeResponse</code> hook.</li> <li>To customize how <code>JSONSerializer</code> normalizes a specific response from the server, use one of the many specific <code>normalizeResponse</code> hooks.</li> <li>To customize how <code>JSONSerializer</code> normalizes your id, attributes or relationships, use the <code>extractId</code>, <code>extractAttributes</code> and <code>extractRelationships</code> hooks.</li> </ul> <p>The <code>JSONSerializer</code> normalization process follows these steps:</p> <ul> <li>\n<code>normalizeResponse</code> - entry method to the serializer.</li> <li>\n<code>normalizeCreateRecordResponse</code> - a <code>normalizeResponse</code> for a specific operation is called.</li> <li>\n<code>normalizeSingleResponse</code>|<code>normalizeArrayResponse</code> - for methods like <code>createRecord</code> we expect a single record back, while for methods like <code>findAll</code> we expect multiple methods back.</li> <li>\n<code>normalize</code> - <code>normalizeArray</code> iterates and calls <code>normalize</code> for each of its records while <code>normalizeSingle</code> calls it once. This is the method you most likely want to subclass.</li> <li>\n<code>extractId</code> | <code>extractAttributes</code> | <code>extractRelationships</code> - <code>normalize</code> delegates to these methods to turn the record payload into the JSON API format.</li> </ul> </div> <div class=\"pane\" id=\"methods\">        <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractAttributes\">extractAttributes</h2>\n<span class=\"args\"> (modelClass, resourceHash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L564\">addon/serializers/json.js:564</a> </div> <div class=\"description\"> <p>Returns the resource's attributes formatted as a JSON-API \"attributes object\".</p> <p><a href=\"http://jsonapi.org/format/#document-resource-object-attributes\">http://jsonapi.org/format/#document-resource-object-attributes</a></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelClass</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>resourceHash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractErrors\">extractErrors</h2>\n<span class=\"args\"> (store, typeClass, payload, id) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1322\">addon/serializers/json.js:1322</a> </div> <div class=\"description\"> <p><code>extractErrors</code> is used to extract model errors when a call to <code>DS.Model#save</code> fails with an <code>InvalidError</code>. By default Ember Data expects error information to be located on the <code>errors</code> property of the payload object.</p> <p>This serializer expects this <code>errors</code> object to be an Array similar to the following, compliant with the JSON-API specification:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"errors\": [\n    {\n      \"detail\": \"This username is already taken!\",\n      \"source\": {\n        \"pointer\": \"data/attributes/username\"\n      }\n    }, {\n      \"detail\": \"Doesn't look like a valid email.\",\n      \"source\": {\n        \"pointer\": \"data/attributes/email\"\n      }\n    }\n  ]\n}\n</pre> <p>The key <code>detail</code> provides a textual description of the problem. Alternatively, the key <code>title</code> can be used for the same purpose.</p> <p>The nested keys <code>source.pointer</code> detail which specific element of the request data was invalid.</p> <p>Note that JSON-API also allows for object-level errors to be placed in an object with pointer <code>data</code>, signifying that the problem cannot be traced to a specific attribute:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">{\n  \"errors\": [\n    {\n      \"detail\": \"Some generic non property error message\",\n      \"source\": {\n        \"pointer\": \"data\"\n      }\n    }\n  ]\n}\n</pre> <p>When turn into a <code>DS.Errors</code> object, you can read these errors through the property <code>base</code>:</p> <pre class=\"highlight handlebars \" data-language=\"\">{{#each model.errors.base as |error|}}\n  &lt;div class=\"error\"&gt;\n    {{error.message}}\n  &lt;/div&gt;\n{{/each}}\n</pre> <p>Example of alternative implementation, overriding the default behavior to deal with a different format of errors:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  extractErrors: function(store, typeClass, payload, id) {\n    if (payload &amp;&amp; typeof payload === 'object' &amp;&amp; payload._problems) {\n      payload = payload._problems;\n      this.normalizeErrors(typeClass, payload);\n    }\n    return payload;\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">(String|Number)</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> json The deserialized errors</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractId\">extractId</h2>\n<span class=\"args\"> (modelClass, resourceHash) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L550\">addon/serializers/json.js:550</a> </div> <div class=\"description\"> <p>Returns the resource's ID.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelClass</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>resourceHash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractMeta\">extractMeta</h2>\n<span class=\"args\"> (store, modelClass, payload) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1288\">addon/serializers/json.js:1288</a> </div> <div class=\"description\"> <p><code>extractMeta</code> is used to deserialize any meta information in the adapter payload. By default Ember Data expects meta information to be located on the <code>meta</code> property of the payload object.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  extractMeta: function(store, typeClass, payload) {\n    if (payload &amp;&amp; payload.hasOwnProperty('_pagination')) {\n      let meta = payload._pagination;\n      delete payload._pagination;\n      return meta;\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>modelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractPolymorphicRelationship\">extractPolymorphicRelationship</h2>\n<span class=\"args\"> (relationshipModelName, relationshipHash, relationshipOptions) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L637\">addon/serializers/json.js:637</a> </div> <div class=\"description\"> <p>Returns a polymorphic relationship formatted as a JSON-API \"relationship object\".</p> <p><a href=\"http://jsonapi.org/format/#document-resource-object-relationships\">http://jsonapi.org/format/#document-resource-object-relationships</a></p> <p><code>relationshipOptions</code> is a hash which contains more information about the polymorphic relationship which should be extracted: - <code>resourceHash</code> complete hash of the resource the relationship should be extracted from - <code>relationshipKey</code> key under which the value for the relationship is extracted from the resourceHash - <code>relationshipMeta</code> meta information about the relationship</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>relationshipModelName</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationshipHash</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationshipOptions</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractRelationship\">extractRelationship</h2>\n<span class=\"args\"> (relationshipModelName, relationshipHash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L588\">addon/serializers/json.js:588</a> </div> <div class=\"description\"> <p>Returns a relationship formatted as a JSON-API \"relationship object\".</p> <p><a href=\"http://jsonapi.org/format/#document-resource-object-relationships\">http://jsonapi.org/format/#document-resource-object-relationships</a></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>relationshipModelName</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationshipHash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractRelationships\">extractRelationships</h2>\n<span class=\"args\"> (modelClass, resourceHash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L660\">addon/serializers/json.js:660</a> </div> <div class=\"description\"> <p>Returns the resource's relationships formatted as a JSON-API \"relationships object\".</p> <p><a href=\"http://jsonapi.org/format/#document-resource-object-relationships\">http://jsonapi.org/format/#document-resource-object-relationships</a></p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelClass</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>resourceHash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_keyForAttribute\">keyForAttribute</h2>\n<span class=\"args\"> (key, method) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1433\">addon/serializers/json.js:1433</a> </div> <div class=\"description\"> <p><code>keyForAttribute</code> can be used to define rules for how to convert an attribute name in your model to a key in your JSON.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  keyForAttribute: function(attr, method) {\n    return Ember.String.underscore(attr).toUpperCase();\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>method</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> normalized key</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_keyForLink\">keyForLink</h2>\n<span class=\"args\"> (key, kind) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1485\">addon/serializers/json.js:1485</a> </div> <div class=\"description\"> <p><code>keyForLink</code> can be used to define a custom key when deserializing link properties.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>kind</strong> <span class=\"type\">String</span>\n</dt> <dd> `belongsTo` or `hasMany` </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> normalized key</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_keyForRelationship\">keyForRelationship</h2>\n<span class=\"args\"> (key, typeClass, method) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1458\">addon/serializers/json.js:1458</a> </div> <div class=\"description\"> <p><code>keyForRelationship</code> can be used to define a custom key when serializing and deserializing relationship properties. By default <code>JSONSerializer</code> does not provide an implementation of this method.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\"> import DS from 'ember-data';\n\n export default DS.JSONSerializer.extend({\n   keyForRelationship: function(key, relationship, method) {\n     return 'rel_' + Ember.String.underscore(key);\n   }\n });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>typeClass</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>method</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> normalized key</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelNameFromPayloadKey\">modelNameFromPayloadKey</h2>\n<span class=\"args\"> (key) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L716\">addon/serializers/json.js:716</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> the model's modelName</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelNameFromPayloadType\">modelNameFromPayloadType</h2>\n<span class=\"args\"> (type) </span><span class=\"type\">String</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1520\">addon/serializers/json.js:1520</a> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>type</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> the model's modelName</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalize\">normalize</h2>\n<span class=\"args\"> (typeClass, hash) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.serializer#method_normalize\">DS.Serializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L491\">addon/serializers/json.js:491</a> </div> <div class=\"description\"> <p>Normalizes a part of the JSON payload returned by the server. You should override this method, munge the hash and call super if you have generic normalization to do.</p> <p>It takes the type of the record that is being normalized (as a DS.Model class), the property where the hash was originally found, and the hash to normalize.</p> <p>You can use this method, for example, to normalize underscored keys to camelized or other general-purpose normalizations.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  normalize: function(typeClass, hash) {\n    var fields = Ember.get(typeClass, 'fields');\n    fields.forEach(function(field) {\n      var payloadField = Ember.String.underscore(field);\n      if (field === payloadField) { return; }\n\n      hash[field] = hash[payloadField];\n      delete hash[payloadField];\n    });\n    return this._super.apply(this, arguments);\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>hash</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeArrayResponse\">normalizeArrayResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L430\">addon/serializers/json.js:430</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeCreateRecordResponse\">normalizeCreateRecordResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L360\">addon/serializers/json.js:360</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeDeleteRecordResponse\">normalizeDeleteRecordResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L374\">addon/serializers/json.js:374</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeFindAllResponse\">normalizeFindAllResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L290\">addon/serializers/json.js:290</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeFindBelongsToResponse\">normalizeFindBelongsToResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L304\">addon/serializers/json.js:304</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeFindHasManyResponse\">normalizeFindHasManyResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L318\">addon/serializers/json.js:318</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeFindManyResponse\">normalizeFindManyResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L332\">addon/serializers/json.js:332</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeFindRecordResponse\">normalizeFindRecordResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L262\">addon/serializers/json.js:262</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeQueryRecordResponse\">normalizeQueryRecordResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L276\">addon/serializers/json.js:276</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeQueryResponse\">normalizeQueryResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L346\">addon/serializers/json.js:346</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeResponse\">normalizeResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.serializer#method_normalizeResponse\">DS.Serializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L202\">addon/serializers/json.js:202</a> <br>Available since 1.13.0 </div> <div class=\"description\"> <p>The <code>normalizeResponse</code> method is used to normalize a payload from the server to a JSON-API Document.</p> <p><a href=\"http://jsonapi.org/format/#document-structure\">http://jsonapi.org/format/#document-structure</a></p> <p>This method delegates to a more specific normalize method based on the <code>requestType</code>.</p> <p>To override this method with a custom one, make sure to call <code>return this._super(store, primaryModelClass, payload, id, requestType)</code> with your pre-processed data.</p> <p>Here's an example of using <code>normalizeResponse</code> manually:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">socket.on('message', function(message) {\n  var data = message.data;\n  var modelClass = store.modelFor(data.modelName);\n  var serializer = store.serializerFor(data.modelName);\n  var normalized = serializer.normalizeSingleResponse(store, modelClass, data, data.id);\n\n  store.push(normalized);\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeSaveResponse\">normalizeSaveResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L402\">addon/serializers/json.js:402</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeSingleResponse\">normalizeSingleResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L416\">addon/serializers/json.js:416</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalizeUpdateRecordResponse\">normalizeUpdateRecordResponse</h2>\n<span class=\"args\"> (store, primaryModelClass, payload, id, requestType) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L388\">addon/serializers/json.js:388</a> <br>Available since 1.13.0 </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>primaryModelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>id</strong> <span class=\"type\">String|Number</span>\n</dt>  <dt>\n<strong>requestType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> JSON-API Document</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (snapshot, options) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.serializer#method_serialize\">DS.Serializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L898\">addon/serializers/json.js:898</a> </div> <div class=\"description\"> <p>Called when a record is saved in order to convert the record into JSON.</p> <p>By default, it creates a JSON object with a key for each attribute and belongsTo relationship.</p> <p>For example, consider this model:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  title: DS.attr(),\n  body: DS.attr(),\n\n  author: DS.belongsTo('user')\n});\n</pre> <p>The default serialization would create a JSON object like:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n</pre> <p>By default, attributes are passed through as-is, unless you specified an attribute type (<code>DS.attr('date')</code>). If you specify a transform, the JavaScript value will be serialized when inserted into the JSON hash.</p> <p>By default, belongs-to relationships are converted into IDs when inserted into the JSON hash.</p> <h2 class=\"anchorable-toc\" id=\"toc_ids\">IDs</h2> <p><code>serialize</code> takes an options hash with a single option: <code>includeId</code>. If this option is <code>true</code>, <code>serialize</code> will, by default include the ID in the JSON object it builds.</p> <p>The adapter passes in <code>includeId: true</code> when serializing a record for <code>createRecord</code>, but not for <code>updateRecord</code>.</p> <h2 class=\"anchorable-toc\" id=\"toc_customization\">Customization</h2> <p>Your server may expect a different JSON format than the built-in serialization format.</p> <p>In that case, you can implement <code>serialize</code> yourself and return a JSON hash of your choosing.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = {\n      POST_TTL: snapshot.attr('title'),\n      POST_BDY: snapshot.attr('body'),\n      POST_CMS: snapshot.hasMany('comments', { ids: true })\n    }\n\n    if (options.includeId) {\n      json.POST_ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_customizing-an-app-wide-serializer\">Customizing an App-Wide Serializer</h2> <p>If you want to define a serializer for your entire application, you'll probably want to use <code>eachAttribute</code> and <code>eachRelationship</code> on the record.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = {};\n\n    snapshot.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = snapshot.attr(name);\n    })\n\n    snapshot.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(name.singularize()) + \"_IDS\";\n}\n</pre> <p>This serializer will generate JSON that looks like this:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_tweaking-the-default-json\">Tweaking the Default JSON</h2> <p>If you just want to do some small tweaks on the default JSON, you can call super first and make the tweaks on the returned JSON.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = this._super.apply(this, arguments);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> json</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeAttribute\">serializeAttribute</h2>\n<span class=\"args\"> (snapshot, json, key, attribute) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1106\">addon/serializers/json.js:1106</a> </div> <div class=\"description\"> <p><code>serializeAttribute</code> can be used to customize how <code>DS.attr</code> properties are serialized</p> <p>For example if you wanted to ensure all your attributes were always serialized as properties on an <code>attributes</code> object you could write:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializeAttribute: function(snapshot, json, key, attributes) {\n    json.attributes = json.attributes || {};\n    this._super(snapshot, json.attributes, key, attributes);\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>attribute</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeBelongsTo\">serializeBelongsTo</h2>\n<span class=\"args\"> (snapshot, json, relationship) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1153\">addon/serializers/json.js:1153</a> </div> <div class=\"description\"> <p><code>serializeBelongsTo</code> can be used to customize how <code>DS.belongsTo</code> properties are serialized.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializeBelongsTo: function(snapshot, json, relationship) {\n    var key = relationship.key;\n\n    var belongsTo = snapshot.belongsTo(key);\n\n    key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\", \"serialize\") : key;\n\n    json[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.record.toJSON();\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeHasMany\">serializeHasMany</h2>\n<span class=\"args\"> (snapshot, json, relationship) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1206\">addon/serializers/json.js:1206</a> </div> <div class=\"description\"> <p><code>serializeHasMany</code> can be used to customize how <code>DS.hasMany</code> properties are serialized.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializeHasMany: function(snapshot, json, relationship) {\n    var key = relationship.key;\n    if (key === 'comments') {\n      return;\n    } else {\n      this._super.apply(this, arguments);\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeIntoHash\">serializeIntoHash</h2>\n<span class=\"args\"> (hash, typeClass, snapshot, options) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1075\">addon/serializers/json.js:1075</a> </div> <div class=\"description\"> <p>You can use this method to customize how a serialized record is added to the complete JSON hash to be sent to the server. By default the JSON Serializer does not namespace the payload and just sends the raw serialized JSON object. If your server expects namespaced keys, you should consider using the RESTSerializer. Otherwise you can override this method to customize how the record is added to the hash. The hash property should be modified by reference.</p> <p>For example, your server may expect underscored root objects.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serializeIntoHash: function(data, type, snapshot, options) {\n    var root = Ember.String.decamelize(type.modelName);\n    data[root] = this.serialize(snapshot, options);\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>hash</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializePolymorphicType\">serializePolymorphicType</h2>\n<span class=\"args\"> (snapshot, json, relationship) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L1255\">addon/serializers/json.js:1255</a> </div> <div class=\"description\"> <p>You can use this method to customize how polymorphic objects are serialized. Objects are considered to be polymorphic if <code>{ polymorphic: true }</code> is pass as the second argument to the <code>DS.belongsTo</code> function.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  serializePolymorphicType: function(snapshot, json, relationship) {\n    var key = relationship.key,\n        belongsTo = snapshot.belongsTo(key);\n    key = this.keyForAttribute ? this.keyForAttribute(key, \"serialize\") : key;\n\n    if (Ember.isNone(belongsTo)) {\n      json[key + \"_type\"] = null;\n    } else {\n      json[key + \"_type\"] = belongsTo.modelName;\n    }\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_shouldSerializeHasMany\">shouldSerializeHasMany</h2>\n<span class=\"args\"> (snapshot, key, relationshipType) </span><span class=\"type\">Boolean</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L857\">addon/serializers/json.js:857</a> </div> <div class=\"description\"> <p>Check if the given hasMany relationship should be serialized</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>relationshipType</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Boolean</span> </dt>\n<dd> true if the hasMany relationship should be serialized</dd> </dl> </div> </div>  </div>\n<div class=\"pane\" id=\"properties\">  <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_attrs\">attrs</h2>\n<span class=\"type\">{Object}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L111\">addon/serializers/json.js:111</a> </div> <div class=\"description\"> <p>The <code>attrs</code> object can be used to declare a simple mapping between property names on <code>DS.Model</code> records and payload keys in the serialized JSON object representing the record. An object with the property <code>key</code> can also be used to designate the attribute's key on the response payload.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string'),\n  admin: DS.attr('boolean')\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  attrs: {\n    admin: 'is_admin',\n    occupation: { key: 'career' }\n  }\n});\n</pre> <p>You can also remove attributes by setting the <code>serialize</code> key to <code>false</code> in your mapping object.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  attrs: {\n    admin: { serialize: false },\n    occupation: { key: 'career' }\n  }\n});\n</pre> <p>When serialized:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">{\n  \"firstName\": \"Harry\",\n  \"lastName\": \"Houdini\",\n  \"career\": \"magician\"\n}\n</pre> <p>Note that the <code>admin</code> is now not included in the payload.</p> </div>  </div> <div class=\"property  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"property_primaryKey\">primaryKey</h2>\n<span class=\"type\">{String}</span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/json.js#L87\">addon/serializers/json.js:87</a> </div> <div class=\"description\"> <p>The <code>primaryKey</code> is used when serializing and deserializing data. Ember Data always uses the <code>id</code> property to store the id of the record. The external source may not always follow this convention. In these cases it is useful to override the <code>primaryKey</code> property to match the <code>primaryKey</code> of your external store.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.JSONSerializer.extend({\n  primaryKey: '_id'\n});\n</pre> </div> <p> <strong>Default:</strong> <code>'id'</code> </p> </div>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.JSONSerializer.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.JSONSerializer.html</a>\n  </p>\n</div>\n","data/classes/ds.restserializer":"<h1 class=\"api-header\"> DS.RESTSerializer Class  </h1>  <div class=\"class-info\"> <p>Extends: <a href=\"ds.jsonserializer\">DS.JSONSerializer</a></p> <p>Defined in: <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L16\">addon/serializers/rest.js:16</a></p> <p>Module: <a href=\"../modules/ember-data\">ember-data</a></p> </div> <div class=\"description\"> <p>Normally, applications will use the <code>RESTSerializer</code> by implementing the <code>normalize</code> method.</p> <p>This allows you to do whatever kind of munging you need, and is especially useful if your server is inconsistent and you need to do munging differently for many different kinds of responses.</p> <p>See the <code>normalize</code> documentation for more information.</p> <h2 class=\"anchorable-toc\" id=\"toc_across-the-board-normalization\">Across the Board Normalization</h2> <p>There are also a number of hooks that you might find useful to define across-the-board rules for your payload. These rules will be useful if your server is consistent, or if you're building an adapter for an infrastructure service, like Firebase, and want to encode service conventions.</p> <p>For example, if all of your keys are underscored and all-caps, but otherwise consistent with the names you use in your models, you can implement across-the-board rules for how to convert an attribute name in your model to a key in your JSON.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  keyForAttribute: function(attr, method) {\n    return Ember.String.underscore(attr).toUpperCase();\n  }\n});\n</pre> <p>You can also implement <code>keyForRelationship</code>, which takes the name of the relationship as the first parameter, the kind of relationship (<code>hasMany</code> or <code>belongsTo</code>) as the second parameter, and the method (<code>serialize</code> or <code>deserialize</code>) as the third parameter.</p> </div> <div class=\"pane\" id=\"methods\">             <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_extractPolymorphicRelationship\">extractPolymorphicRelationship</h2>\n<span class=\"args\"> (relationshipType, relationshipHash, relationshipOptions) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_extractPolymorphicRelationship\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L786\">addon/serializers/rest.js:786</a> </div> <div class=\"description\"> <p>You can use this method to customize how a polymorphic relationship should be extracted.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>relationshipType</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationshipHash</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationshipOptions</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div>     <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_keyForPolymorphicType\">keyForPolymorphicType</h2>\n<span class=\"args\"> (key, typeClass, method) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L60\">addon/serializers/rest.js:60</a> </div> <div class=\"description\"> <p><code>keyForPolymorphicType</code> can be used to define a custom key when serializing and deserializing a polymorphic type. By default, the returned key is <code>${key}Type</code>.</p> <p>Example</p> <pre class=\"highlight javascript \" data-language=\"javascript\"> import DS from 'ember-data';\n\n export default DS.RESTSerializer.extend({\n   keyForPolymorphicType: function(key, relationship) {\n     var relationshipKey = this.keyForRelationship(key);\n\n     return 'type-' + relationshipKey;\n   }\n });\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>typeClass</strong> <span class=\"type\">String</span>\n</dt>  <dt>\n<strong>method</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> normalized key</dd> </dl> </div> </div>  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelNameFromPayloadKey\">modelNameFromPayloadKey</h2>\n<span class=\"args\"> (key) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_modelNameFromPayloadKey\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L444\">addon/serializers/rest.js:444</a> </div> <div class=\"description\"> <p>This method is used to convert each JSON root key in the payload into a modelName that it can use to look up the appropriate model for that part of the payload.</p> <p>For example, your server may send a model name that does not correspond with the name of the model in your app. Let's take a look at an example model, and an example payload:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n});\n</pre>\n<pre class=\"highlight javascript \" data-language=\"javascript\">  {\n    \"blog/post\": {\n      \"id\": \"1\n    }\n  }\n</pre> <p>Ember Data is going to normalize the payload's root key for the modelName. As a result, it will try to look up the \"blog/post\" model. Since we don't have a model called \"blog/post\" (or a file called app/models/blog/post.js in ember-cli), Ember Data will throw an error because it cannot find the \"blog/post\" model.</p> <p>Since we want to remove this namespace, we can define a serializer for the application that will remove \"blog/\" from the payload key whenver it's encountered by Ember Data:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  modelNameFromPayloadKey: function(payloadKey) {\n    if (payloadKey === 'blog/post') {\n      return this._super(payloadKey.replace('blog/', ''));\n    } else {\n     return this._super(payloadKey);\n    }\n  }\n});\n</pre> <p>After refreshing, Ember Data will appropriately look up the \"post\" model.</p> <p>By default the modelName for a model is its name in dasherized form. This means that a payload key like \"blogPost\" would be normalized to \"blog-post\" when Ember Data looks up the model. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override <code>modelNameFromPayloadKey</code> for this purpose.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>key</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> the model's modelName</dd> </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_modelNameFromPayloadType\">modelNameFromPayloadType</h2>\n<span class=\"args\"> (payloadType) </span><span class=\"type\">String</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_modelNameFromPayloadType\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L861\">addon/serializers/rest.js:861</a> </div> <div class=\"description\"> <p><code>modelNameFromPayloadType</code> can be used to change the mapping for a DS model name, taken from the value in the payload.</p> <p>Say your API namespaces the type of a model and returns the following payload for the <code>post</code> model, which has a polymorphic <code>user</code> relationship:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// GET /api/posts/1\n{\n  \"post\": {\n    \"id\": 1,\n    \"user\": 1,\n    \"userType: \"api::v1::administrator\"\n  }\n}\n</pre> <p>By overwriting <code>modelNameFromPayloadType</code> you can specify that the <code>administrator</code> model should be used:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from \"ember-data\";\n\nexport default DS.RESTSerializer.extend({\n  modelNameFromPayloadType(payloadType) {\n    return payloadType.replace('api::v1::', '');\n  }\n});\n</pre> <p>By default the modelName for a model is its name in dasherized form. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override <code>modelNameFromPayloadType</code> for this purpose.</p> <p>Also take a look at <a href=\"#method_payloadTypeFromModelName\">payloadTypeFromModelName</a> to customize how the type of a record should be serialized.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>payloadType</strong> <span class=\"type\">String</span>\n</dt> <dd> type from payload </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> modelName</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_normalize\">normalize</h2>\n<span class=\"args\"> (modelClass, resourceHash, prop) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_normalize\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L91\">addon/serializers/rest.js:91</a> </div> <div class=\"description\"> <p>Normalizes a part of the JSON payload returned by the server. You should override this method, munge the hash and call super if you have generic normalization to do.</p> <p>It takes the type of the record that is being normalized (as a DS.Model class), the property where the hash was originally found, and the hash to normalize.</p> <p>For example, if you have a payload that looks like this:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"comments\": [ 1, 2 ]\n  },\n  \"comments\": [{\n    \"id\": 1,\n    \"body\": \"FIRST\"\n  }, {\n    \"id\": 2,\n    \"body\": \"Rails is unagi\"\n  }]\n}\n</pre> <p>The <code>normalize</code> method will be called three times:</p> <ul> <li>With <code>App.Post</code>, <code>\"posts\"</code> and <code>{ id: 1, title: \"Rails is omakase\", ... }</code>\n</li> <li>With <code>App.Comment</code>, <code>\"comments\"</code> and <code>{ id: 1, body: \"FIRST\" }</code>\n</li> <li>With <code>App.Comment</code>, <code>\"comments\"</code> and <code>{ id: 2, body: \"Rails is unagi\" }</code>\n</li> </ul> <p>You can use this method, for example, to normalize underscored keys to camelized or other general-purpose normalizations. You will only need to implement <code>normalize</code> and manipulate the payload as desired.</p> <p>For example, if the <code>IDs</code> under <code>\"comments\"</code> are provided as <code>_id</code> instead of <code>id</code>, you can specify how to normalize just the comments:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  normalize(model, hash, prop) {\n    if (prop === 'comments') {\n      hash.id = hash._id;\n      delete hash._id;\n    }\n\n    return this._super(...arguments);\n  }\n});\n</pre> <p>On each call to the <code>normalize</code> method, the third parameter (<code>prop</code>) is always one of the keys that were in the original payload or in the result of another normalization as <code>normalizeResponse</code>.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>resourceHash</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>prop</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n </dl> </div> </div>                  <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_payloadKeyFromModelName\">payloadKeyFromModelName</h2>\n<span class=\"args\"> (modelName) </span><span class=\"type\">String</span>\n</div>   <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L693\">addon/serializers/rest.js:693</a> </div> <div class=\"description\"> <p>You can use <code>payloadKeyFromModelName</code> to override the root key for an outgoing request. By default, the RESTSerializer returns a camelized version of the model's name.</p> <p>For a model called TacoParty, its <code>modelName</code> would be the string <code>taco-party</code>. The RESTSerializer will send it to the server with <code>tacoParty</code> as the root key in the JSON payload:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"tacoParty\": {\n    \"id\": \"1\",\n    \"location\": \"Matthew Beale's House\"\n  }\n}\n</pre> <p>For example, your server may expect dasherized root objects:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  payloadKeyFromModelName: function(modelName) {\n    return Ember.String.dasherize(modelName);\n  }\n});\n</pre> <p>Given a <code>TacoParty</code> model, calling <code>save</code> on it would produce an outgoing request like:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"taco-party\": {\n    \"id\": \"1\",\n    \"location\": \"Matthew Beale's House\"\n  }\n}\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelName</strong> <span class=\"type\">String</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n </dl> </div> </div> <div class=\"method public item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_payloadTypeFromModelName\">payloadTypeFromModelName</h2>\n<span class=\"args\"> (modelname) </span><span class=\"type\">String</span><span class=\"flag public\">public</span>\n</div>    <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L910\">addon/serializers/rest.js:910</a> </div> <div class=\"description\"> <p><code>payloadTypeFromModelName</code> can be used to change the mapping for the type in the payload, taken from the model name.</p> <p>Say your API namespaces the type of a model and expects the following payload when you update the <code>post</code> model, which has a polymorphic <code>user</code> relationship:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">// POST /api/posts/1\n{\n  \"post\": {\n    \"id\": 1,\n    \"user\": 1,\n    \"userType\": \"api::v1::administrator\"\n  }\n}\n</pre> <p>By overwriting <code>payloadTypeFromModelName</code> you can specify that the namespaces model name for the <code>administrator</code> should be used:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from \"ember-data\";\n\nexport default DS.RESTSerializer.extend({\n  payloadTypeFromModelName(modelName) {\n    return \"api::v1::\" + modelName;\n  }\n});\n</pre> <p>By default the payload type is the camelized model name. Usually, Ember Data can use the correct inflection to do this for you. Most of the time, you won't need to override <code>payloadTypeFromModelName</code> for this purpose.</p> <p>Also take a look at <a href=\"#method_modelNameFromPayloadType\">modelNameFromPayloadType</a> to customize how the model name from should be mapped from the payload.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>modelname</strong> <span class=\"type\">String</span>\n</dt> <dd> modelName from the record </dd> </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">String</span> </dt>\n<dd> payloadType</dd> </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_pushPayload\">pushPayload</h2>\n<span class=\"args\"> (store, payload) </span>\n</div>  <div class=\"meta\"> Defined in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L380\">addon/serializers/rest.js:380</a> </div> <div class=\"description\"> <p>This method allows you to push a payload containing top-level collections of records organized per type.</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"posts\": [{\n    \"id\": \"1\",\n    \"title\": \"Rails is omakase\",\n    \"author\", \"1\",\n    \"comments\": [ \"1\" ]\n  }],\n  \"comments\": [{\n    \"id\": \"1\",\n    \"body\": \"FIRST\"\n  }],\n  \"users\": [{\n    \"id\": \"1\",\n    \"name\": \"@d2h\"\n  }]\n}\n</pre> <p>It will first normalize the payload, so you can use this to push in data streaming in from your server structured the same way that fetches and saves are structured.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>store</strong> <span class=\"type\"><a href=\"ds.store\">DS.Store</a></span>\n</dt>  <dt>\n<strong>payload</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serialize\">serialize</h2>\n<span class=\"args\"> (snapshot, options) </span><span class=\"type\">Object</span>\n</div>   <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_serialize\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L508\">addon/serializers/rest.js:508</a> </div> <div class=\"description\"> <p>Called when a record is saved in order to convert the record into JSON.</p> <p>By default, it creates a JSON object with a key for each attribute and belongsTo relationship.</p> <p>For example, consider this model:</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.Model.extend({\n  title: DS.attr(),\n  body: DS.attr(),\n\n  author: DS.belongsTo('user')\n});\n</pre> <p>The default serialization would create a JSON object like:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n</pre> <p>By default, attributes are passed through as-is, unless you specified an attribute type (<code>DS.attr('date')</code>). If you specify a transform, the JavaScript value will be serialized when inserted into the JSON hash.</p> <p>By default, belongs-to relationships are converted into IDs when inserted into the JSON hash.</p> <h2 class=\"anchorable-toc\" id=\"toc_ids\">IDs</h2> <p><code>serialize</code> takes an options hash with a single option: <code>includeId</code>. If this option is <code>true</code>, <code>serialize</code> will, by default include the ID in the JSON object it builds.</p> <p>The adapter passes in <code>includeId: true</code> when serializing a record for <code>createRecord</code>, but not for <code>updateRecord</code>.</p> <h2 class=\"anchorable-toc\" id=\"toc_customization\">Customization</h2> <p>Your server may expect a different JSON format than the built-in serialization format.</p> <p>In that case, you can implement <code>serialize</code> yourself and return a JSON hash of your choosing.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = {\n      POST_TTL: snapshot.attr('title'),\n      POST_BDY: snapshot.attr('body'),\n      POST_CMS: snapshot.hasMany('comments', { ids: true })\n    }\n\n    if (options.includeId) {\n      json.POST_ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_customizing-an-app-wide-serializer\">Customizing an App-Wide Serializer</h2> <p>If you want to define a serializer for your entire application, you'll probably want to use <code>eachAttribute</code> and <code>eachRelationship</code> on the record.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = {};\n\n    snapshot.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = snapshot.attr(name);\n    })\n\n    snapshot.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = snapshot.hasMany(name, { ids: true });\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = snapshot.id;\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(name.singularize()) + \"_IDS\";\n}\n</pre> <p>This serializer will generate JSON that looks like this:</p> <pre class=\"highlight js \" data-language=\"js\">{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n</pre>\n<h2 class=\"anchorable-toc\" id=\"toc_tweaking-the-default-json\">Tweaking the Default JSON</h2> <p>If you just want to do some small tweaks on the default JSON, you can call super first and make the tweaks on the returned JSON.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serialize: function(snapshot, options) {\n    var json = this._super(snapshot, options);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> <div class=\"return\"> <h3>Returns:</h3> <dl> <dt>\n<span class=\"type\">Object</span> </dt>\n<dd> json</dd> </dl> </div> </div>    <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializeIntoHash\">serializeIntoHash</h2>\n<span class=\"args\"> (hash, typeClass, snapshot, options) </span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_serializeIntoHash\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L663\">addon/serializers/rest.js:663</a> </div> <div class=\"description\"> <p>You can use this method to customize the root keys serialized into the JSON. The hash property should be modified by reference (possibly using something like _.extend) By default the REST Serializer sends the modelName of a model, which is a camelized version of the name.</p> <p>For example, your server may expect underscored root objects.</p> <pre class=\"highlight javascript \" data-language=\"javascript\">import DS from 'ember-data';\n\nexport default DS.RESTSerializer.extend({\n  serializeIntoHash: function(data, type, record, options) {\n    var root = Ember.String.decamelize(type.modelName);\n    data[root] = this.serialize(record, options);\n  }\n});\n</pre> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>hash</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>typeClass</strong> <span class=\"type\"><a href=\"ds.model\">DS.Model</a></span>\n</dt>  <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>options</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div> <div class=\"method  item-entry\"> <div class=\"title\">\n<h2 class=\"name anchorable-toc\" id=\"method_serializePolymorphicType\">serializePolymorphicType</h2>\n<span class=\"args\"> (snapshot, json, relationship) </span>\n</div>  <div class=\"meta\"> Inherited from <a href=\"ds.jsonserializer#method_serializePolymorphicType\">DS.JSONSerializer</a> but overwritten in <a class=\"api-file-link\" href=\"https://github.com/emberjs/data/tree/v2.7.0/addon/serializers/rest.js#L742\">addon/serializers/rest.js:742</a> </div> <div class=\"description\"> <p>You can use this method to customize how polymorphic objects are serialized. By default the REST Serializer creates the key by appending <code>Type</code> to the attribute and value from the model's camelcased model name.</p> </div>  <div class=\"params\"> <h3>Parameters:</h3> <dl> <dt>\n<strong>snapshot</strong> <span class=\"type\"><a href=\"ds.snapshot\">DS.Snapshot</a></span>\n</dt>  <dt>\n<strong>json</strong> <span class=\"type\">Object</span>\n</dt>  <dt>\n<strong>relationship</strong> <span class=\"type\">Object</span>\n</dt>  </dl> </div> </div>   </div>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2016 Yehuda Katz, Tom Dale and Ember.js contributors<br>Licensed under the MIT License.<br>\n    <a href=\"http://emberjs.com/api/data/classes/DS.RESTSerializer.html\" class=\"_attribution-link\">http://emberjs.com/api/data/classes/DS.RESTSerializer.html</a>\n  </p>\n</div>\n"}