{"guide/installation/index":"<h1 id=\"installation\">Installation</h1> <p>Chai is available for both node.js and the browser using any test framework you like. There are also a number of other tools that include Chai.</p> <h3 id=\"nodejs\">Node.js</h3> <p>Package is available through <a href=\"http://npmjs.org\">npm</a>:</p> <div class=\"language-bash highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">npm install chai\n</pre> </div> <p>Recommend adding it to <code class=\"language-js highlighter-rouge\"><span class=\"kr\">package</span><span class=\"p\">.</span><span class=\"nx\">json</span></code> devDependencies using a <code class=\"language-js highlighter-rouge\"><span class=\"o\">*</span></code> as the version tag. This will ensure that you always have the most recent version after running <code class=\"language-js highlighter-rouge\"><span class=\"nx\">npm</span> <span class=\"nx\">install</span></code>, which can be especially powerful when paired with a continuous integration tool.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">\"devDependencies\": {\n  \"chai\": \"*\",\n  \"mocha\": \"*\"\n}, \"//\": \"mocha is our preference, but you can use any test runner you like\"\n</pre> </div> <h3 id=\"browser\">Browser</h3> <p>Include the chai browser build in your testing suite.</p> <div class=\"language-html highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">&lt;script src=\"chai.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</pre> </div> <p>This will provide <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span></code> as a global object, or <code class=\"language-js highlighter-rouge\"><span class=\"nx\">define</span></code> it if you are using AMD.</p> <p>The latest tagged version will be available for hot-linking at <a href=\"http://chaijs.com/chai.js\">http://chaijs.com/chai.js</a>. If you prefer to host yourself, use the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">js</span></code> file from the root of the github project. We recommend that you always use a version tag as your starting point, so the <a href=\"https://github.com/chaijs/chai/tags\">tag download list</a> is the best place to start.</p> <p>Currently supports all modern browsers: IE 9+, Chrome 7+, FireFox 4+, Safari 5+. Please note that the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> style is currently not compatible with IE9.</p> <p>If you want to know if your browser is compatible, run the <a href=\"http://chaijs.com/api/test/\">online test suite</a>.</p> <h3 id=\"other-platforms\">Other Platforms</h3> <h4 id=\"ruby\">Ruby</h4> <h5 id=\"konachahttpsgithubcomjfirebaughkonacha\"><a href=\"https://github.com/jfirebaugh/konacha\">Konacha</a></h5> <p>For testing your Ruby on Rails application using Chai assertions and the Mocha test framework, check out Konacha – a modern test harness that takes full advantage of Rails 3 features such as the asset pipeline and engines.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2015 Jake Luer<br>Licensed under the MIT License.<br>\n    <a href=\"http://chaijs.com/guide/installation/\" class=\"_attribution-link\">http://chaijs.com/guide/installation/</a>\n  </p>\n</div>\n","index":"<h1 id=\"api-reference\">Chai Assertion Library</h1> <p>The Chai API is broken down by style or task.</p> <h5 id=\"assertion-styles\">Assertion Styles</h5> <ul> <li>The <a href=\"api/bdd/index\">Expect / Should</a> API covers the BDD assertion styles.</li> <li>The <a href=\"api/assert/index\">Assert</a> API covers the TDD assertion style.</li> </ul> <h5 id=\"plugins\">Plugins</h5> <ul> <li>The <a href=\"api/plugins/index\">Plugin API</a> will be of use to anyone interested in building plugins as helpers to DRY up your tests, or for release to the community.</li> </ul> <h5 id=\"tools\">Tools</h5> <ul> <li>The <a href=\"http://chaijs.com/api/test/\">Online Test Suite</a> is a live run of Chai’s test suite. Use it to ensure browser compatibility.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2015 Jake Luer<br>Licensed under the MIT License.<br>\n    <a href=\"http://chaijs.com/api/\" class=\"_attribution-link\">http://chaijs.com/api/</a>\n  </p>\n</div>\n","api/plugins/index":"<h1 id=\"plugin-utilities\">Plugin Utilities</h1> <p>The plugin utilities are for those who want to extend Chai with their own set of assertions. The <a href=\"../../guide/plugins/index\">Code Plugin Concepts</a> and <a href=\"../../guide/helpers/index\">Building a Helper</a> guide tutorials are a great reference on how to get started with your own assertions.</p> <h2>API Reference</h2> <div id=\"method_addchainablemethod\" class=\"api_method_wrapper\"> <h3 id=\"addchainablemethod-ctx-name-method-chainingbehavior\">addChainableMethod (ctx, name, method, chainingBehavior)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">ctx</span> <span class=\"desc\">object to which the method is added</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> <span class=\"desc\">of method to add</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">method</span> <span class=\"desc\">function to be used for `name`, when called</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">chainingBehavior</span> <span class=\"desc\">function to be called every time the property is accessed</span>\n</li> </ul> <p>Adds a method to an object, such that the method can also be chained.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n  var obj = utils.flag(this, 'object');\n  new chai.Assertion(obj).to.be.equal(str);\n});\n</pre> </div> <p>Can also be accessed directly from <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">Assertion</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n</pre> </div> <p>The result can then be used as both a method assertion, executing both <code class=\"language-js highlighter-rouge\"><span class=\"nx\">method</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chainingBehavior</span></code>, or as a language chain, which only executes <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chainingBehavior</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(fooStr).to.be.foo('bar');\nexpect(fooStr).to.be.foo.equal('foo');\n</pre> </div> </div> <div id=\"method_addmethod\" class=\"api_method_wrapper\"> <h3 id=\"addmethod-ctx-name-method\">.addMethod (ctx, name, method)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">ctx</span> <span class=\"desc\">object to which the method is added</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> <span class=\"desc\">of method to add</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">method</span> <span class=\"desc\">function to be used for name</span>\n</li> </ul> <p>Adds a method to the prototype of an object.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n  var obj = utils.flag(this, 'object');\n  new chai.Assertion(obj).to.be.equal(str);\n});\n</pre> </div> <p>Can also be accessed directly from <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">Assertion</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.Assertion.addMethod('foo', fn);\n</pre> </div> <p>Then can be used as any other assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(fooStr).to.be.foo('bar');\n</pre> </div> </div> <div id=\"method_addproperty\" class=\"api_method_wrapper\"> <h3 id=\"addproperty-ctx-name-getter\">addProperty (ctx, name, getter)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">ctx</span> <span class=\"desc\">object to which the property is added</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> <span class=\"desc\">of property to add</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">getter</span> <span class=\"desc\">function to be used for name</span>\n</li> </ul> <p>Adds a property to the prototype of an object.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n  var obj = utils.flag(this, 'object');\n  new chai.Assertion(obj).to.be.instanceof(Foo);\n});\n</pre> </div> <p>Can also be accessed directly from <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">Assertion</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.Assertion.addProperty('foo', fn);\n</pre> </div> <p>Then can be used as any other assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(myFoo).to.be.foo;\n</pre> </div> </div> <div id=\"method_expecttypes\" class=\"api_method_wrapper\"> <h3 id=\"expecttypesobj-types\">expectTypes(obj, types)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">obj</span> <span class=\"desc\">constructed Assertion</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">type</span> <span class=\"desc\">A list of allowed types for this assertion</span>\n</li> </ul> <p>Ensures that the object being tested against is of a valid type.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.expectTypes(this, ['array', 'object', 'string']);\n</pre> </div> </div> <div id=\"method_flag\" class=\"api_method_wrapper\"> <h3 id=\"flagobject-key-value\">flag(object, key, [value])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> <span class=\"desc\">constructed Assertion</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">key</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> <span class=\"desc\">(optional)</span>\n</li> </ul> <p>Get or set a flag value on an object. If a value is provided it will be set, else it will return the currently set value or <code class=\"language-js highlighter-rouge\"><span class=\"kc\">undefined</span></code> if the value is not set.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.flag(this, 'foo', 'bar'); // setter\nutils.flag(this, 'foo'); // getter, returns `bar`\n</pre> </div> </div> <div id=\"method_getactual\" class=\"api_method_wrapper\"> <h1 id=\"getactualobject-actual\">getActual(object, [actual])</h1> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> <span class=\"desc\">(constructed Assertion)</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Arguments }</span> <span class=\"name\">chai.Assertion.prototype.assert</span> <span class=\"desc\">arguments</span>\n</li> </ul> <p>Returns the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">actual</span></code> value for an Assertion</p> </div> <div id=\"method_getenumerableproperties\" class=\"api_method_wrapper\"> <h3 id=\"getenumerablepropertiesobject\">.getEnumerableProperties(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> </ul> <p>This allows the retrieval of enumerable property names of an object, inherited or not.</p> </div> <div id=\"method_getmessage\" class=\"api_method_wrapper\"> <h3 id=\"getmessageobject-message-negatemessage\">.getMessage(object, message, negateMessage)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> <span class=\"desc\">(constructed Assertion)</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Arguments }</span> <span class=\"name\">chai.Assertion.prototype.assert</span> <span class=\"desc\">arguments</span>\n</li> </ul> <p>Construct the error message based on flags and template tags. Template tags will return a stringified inspection of the object referenced.</p> <p>Message template tags: - <code class=\"language-js highlighter-rouge\"><span class=\"err\">#</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">}</span></code> current asserted object - <code class=\"language-js highlighter-rouge\"><span class=\"err\">#</span><span class=\"p\">{</span><span class=\"nx\">act</span><span class=\"p\">}</span></code> actual value - <code class=\"language-js highlighter-rouge\"><span class=\"err\">#</span><span class=\"p\">{</span><span class=\"nx\">exp</span><span class=\"p\">}</span></code> expected value</p> </div> <div id=\"method_getname\" class=\"api_method_wrapper\"> <h1 id=\"getnamefunc\">getName(func)</h1> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">a</span> <span class=\"desc\">function (usually a constructor)</span>\n</li> </ul> <p>Gets the name of a function, in a cross-browser way.</p> </div> <div id=\"method_getpathinfo\" class=\"api_method_wrapper\"> <h3 id=\"getpathinfopath-object\">.getPathInfo(path, object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">path</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> </ul> <p>This allows the retrieval of property info in an object given a string path.</p> <p>The path info consists of an object with the following properties:</p> <ul> <li>parent - The parent object of the property referenced by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">path</span></code>\n</li> <li>name - The name of the final property, a number if it was an array indexer</li> <li>value - The value of the property, if it exists, otherwise <code class=\"language-js highlighter-rouge\"><span class=\"kc\">undefined</span></code>\n</li> <li>exists - Whether the property exists or not</li> </ul> </div> <div id=\"method_getpathvalue\" class=\"api_method_wrapper\"> <h3 id=\"getpathvaluepath-object\">.getPathValue(path, object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">path</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> </ul> <p>This allows the retrieval of values in an object given a string path.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = {\n    prop1: {\n        arr: ['a', 'b', 'c']\n      , str: 'Hello'\n    }\n  , prop2: {\n        arr: [ { nested: 'Universe' } ]\n      , str: 'Hello again!'\n    }\n}\n</pre> </div> <p>The following would be the results.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">getPathValue('prop1.str', obj); // Hello\ngetPathValue('prop1.att[2]', obj); // b\ngetPathValue('prop2.arr[0].nested', obj); // Universe\n</pre> </div> </div> <div id=\"method_getproperties\" class=\"api_method_wrapper\"> <h3 id=\"getpropertiesobject\">.getProperties(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> </ul> <p>This allows the retrieval of property names of an object, enumerable or not, inherited or not.</p> </div> <div id=\"method_getpathinfo\" class=\"api_method_wrapper\"> <h3 id=\"haspropertyobject-name\">.hasProperty(object, name)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Objuect }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String | Number }</span> <span class=\"name\">name</span> \n</li> </ul> <p>This allows checking whether an object has named property or numeric array index.</p> <p>Basically does the same thing as the <code class=\"language-js highlighter-rouge\"><span class=\"k\">in</span></code> operator but works properly with natives and null/undefined values.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = {\n    arr: ['a', 'b', 'c']\n  , str: 'Hello'\n}\n</pre> </div> <p>The following would be the results.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">hasProperty('str', obj);  // true\nhasProperty('constructor', obj);  // true\nhasProperty('bar', obj);  // false\n\nhasProperty('length', obj.str); // true\nhasProperty(1, obj.str);  // true\nhasProperty(5, obj.str);  // false\n\nhasProperty('length', obj.arr);  // true\nhasProperty(2, obj.arr);  // true\nhasProperty(3, obj.arr);  // false\n</pre> </div> </div> <div id=\"method_inspect\" class=\"api_method_wrapper\"> <p>Echos the value of a value. Trys to print the value out in the best way possible given the different types.</p> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">obj</span> <span class=\"desc\">The object to print out.</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Boolean }</span> <span class=\"name\">showHidden</span> <span class=\"desc\">Flag that shows hidden (not enumerable) properties of objects.</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">depth</span> <span class=\"desc\">Depth in which to descend in object. Default is 2.</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Boolean }</span> <span class=\"name\">colors</span> <span class=\"desc\">Flag to turn on ANSI escape codes to color the output. Default is false (no coloring).</span>\n</li> </ul> </div> <div id=\"method_objdisplay\" class=\"api_method_wrapper\"> <h3 id=\"objdisplay-object\">.objDisplay (object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">javascript</span> <span class=\"desc\">object to inspect</span>\n</li> </ul> <p>Determines if an object or an array matches criteria to be inspected in-line for error messages or should be truncated.</p> </div> <div id=\"method_overwritechainablemethod\" class=\"api_method_wrapper\"> <h3 id=\"overwritechainablemethod-ctx-name-method-chainingbehavior\">overwriteChainableMethod (ctx, name, method, chainingBehavior)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">ctx</span> <span class=\"desc\">object whose method / property is to be overwritten</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> <span class=\"desc\">of method / property to overwrite</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">method</span> <span class=\"desc\">function that returns a function to be used for name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">chainingBehavior</span> <span class=\"desc\">function that returns a function to be used for property</span>\n</li> </ul> <p>Overwites an already existing chainable method and provides access to the previous function or property. Must return functions to be used for name.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n  function (_super) {\n  }\n, function (_super) {\n  }\n);\n</pre> </div> <p>Can also be accessed directly from <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">Assertion</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n</pre> </div> <p>Then can be used as any other assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(myFoo).to.have.length(3);\nexpect(myFoo).to.have.length.above(3);\n</pre> </div> </div> <div id=\"method_overwritemethod\" class=\"api_method_wrapper\"> <h3 id=\"overwritemethod-ctx-name-fn\">overwriteMethod (ctx, name, fn)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">ctx</span> <span class=\"desc\">object whose method is to be overwritten</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> <span class=\"desc\">of method to overwrite</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">method</span> <span class=\"desc\">function that returns a function to be used for name</span>\n</li> </ul> <p>Overwites an already existing method and provides access to previous function. Must return function to be used for name.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n  return function (str) {\n    var obj = utils.flag(this, 'object');\n    if (obj instanceof Foo) {\n      new chai.Assertion(obj.value).to.equal(str);\n    } else {\n      _super.apply(this, arguments);\n    }\n  }\n});\n</pre> </div> <p>Can also be accessed directly from <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">Assertion</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.Assertion.overwriteMethod('foo', fn);\n</pre> </div> <p>Then can be used as any other assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(myFoo).to.equal('bar');\n</pre> </div> </div> <div id=\"method_overwriteproperty\" class=\"api_method_wrapper\"> <h3 id=\"overwriteproperty-ctx-name-fn\">overwriteProperty (ctx, name, fn)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">ctx</span> <span class=\"desc\">object whose property is to be overwritten</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> <span class=\"desc\">of property to overwrite</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">getter</span> <span class=\"desc\">function that returns a getter function to be used for name</span>\n</li> </ul> <p>Overwites an already existing property getter and provides access to previous value. Must return function to use as getter.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n  return function () {\n    var obj = utils.flag(this, 'object');\n    if (obj instanceof Foo) {\n      new chai.Assertion(obj.name).to.equal('bar');\n    } else {\n      _super.call(this);\n    }\n  }\n});\n</pre> </div> <p>Can also be accessed directly from <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">Assertion</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.Assertion.overwriteProperty('foo', fn);\n</pre> </div> <p>Then can be used as any other assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(myFoo).to.be.ok;\n</pre> </div> </div> <div id=\"method_test\" class=\"api_method_wrapper\"> <h1 id=\"testobject-expression\">test(object, expression)</h1> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> <span class=\"desc\">(constructed Assertion)</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Arguments }</span> <span class=\"name\">chai.Assertion.prototype.assert</span> <span class=\"desc\">arguments</span>\n</li> </ul> <p>Test and object for expression.</p> </div> <div id=\"method_transferflags\" class=\"api_method_wrapper\"> <h3 id=\"transferflagsassertion-object-includeall--true\">transferFlags(assertion, object, includeAll = true)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Assertion }</span> <span class=\"name\">assertion</span> <span class=\"desc\">the assertion to transfer the flags from</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> <span class=\"desc\">the object to transfer the flags to; usually a new assertion</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Boolean }</span> <span class=\"name\">includeAll</span> \n</li> </ul> <p>Transfer all the flags for <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assertion</span></code> to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code>. If <code class=\"language-js highlighter-rouge\"><span class=\"nx\">includeAll</span></code> is set to <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code>, then the base Chai assertion flags (namely <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code>, <code class=\"language-js highlighter-rouge\"><span class=\"nx\">ssfi</span></code>, and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">message</span></code>) will not be transferred.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var newAssertion = new Assertion();\nutils.transferFlags(assertion, newAssertion);\n\nvar anotherAsseriton = new Assertion(myObj);\nutils.transferFlags(assertion, anotherAssertion, false);\n</pre> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2015 Jake Luer<br>Licensed under the MIT License.<br>\n    <a href=\"http://chaijs.com/api/plugins/\" class=\"_attribution-link\">http://chaijs.com/api/plugins/</a>\n  </p>\n</div>\n","api/assert/index":"<h1 id=\"assert\">Assert</h1> <p>The <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code> style is very similar to node.js’ included assert module, with a bit of extra sugar. Of the three style options, <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code> is the only one that is not chainable. Check out the <a href=\"../../guide/styles/index\">Style Guide</a> for a comparison.</p> <h2>API Reference</h2> <div id=\"method_assert\" class=\"api_method_wrapper\"> <h3 id=\"assertexpression-message\">assert(expression, message)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">expression</span> <span class=\"desc\">to test for truthiness</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">to display on error</span>\n</li> </ul> <p>Write your own test expressions.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert('foo' !== 'bar', 'foo is not bar');\nassert(Array.isArray([]), 'empty arrays are arrays');\n</pre> </div> </div> <div id=\"method_fail\" class=\"api_method_wrapper\"> <h3 id=\"failactual-expected-message-operator\">.fail(actual, expected, [message], [operator])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">operator</span> \n</li> </ul> <p>Throw a failure. Node.js <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code> module-compatible.</p> </div> <div id=\"method_isok\" class=\"api_method_wrapper\"> <h3 id=\"isokobject-message\">.isOk(object, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">object</span> <span class=\"desc\">to test</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> is truthy.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isOk('everything', 'everything is ok');\nassert.isOk(false, 'this will fail');\n</pre> </div> </div> <div id=\"method_isnotok\" class=\"api_method_wrapper\"> <h3 id=\"isnotokobject-message\">.isNotOk(object, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">object</span> <span class=\"desc\">to test</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> is falsy.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isNotOk('everything', 'this will fail');\nassert.isNotOk(false, 'this will pass');\n</pre> </div> </div> <div id=\"method_equal\" class=\"api_method_wrapper\"> <h3 id=\"equalactual-expected-message\">.equal(actual, expected, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts non-strict equality (<code class=\"language-js highlighter-rouge\"><span class=\"o\">==</span></code>) of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">actual</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.equal(3, '3', '== coerces values to strings');\n</pre> </div> </div> <div id=\"method_notequal\" class=\"api_method_wrapper\"> <h3 id=\"notequalactual-expected-message\">.notEqual(actual, expected, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts non-strict inequality (<code class=\"language-js highlighter-rouge\"><span class=\"o\">!=</span></code>) of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">actual</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.notEqual(3, 4, 'these numbers are not equal');\n</pre> </div> </div> <div id=\"method_strictequal\" class=\"api_method_wrapper\"> <h3 id=\"strictequalactual-expected-message\">.strictEqual(actual, expected, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts strict equality (<code class=\"language-js highlighter-rouge\"><span class=\"o\">===</span></code>) of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">actual</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.strictEqual(true, true, 'these booleans are strictly equal');\n</pre> </div> </div> <div id=\"method_notstrictequal\" class=\"api_method_wrapper\"> <h3 id=\"notstrictequalactual-expected-message\">.notStrictEqual(actual, expected, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts strict inequality (<code class=\"language-js highlighter-rouge\"><span class=\"o\">!==</span></code>) of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">actual</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n</pre> </div> </div> <div id=\"method_deepequal\" class=\"api_method_wrapper\"> <h3 id=\"deepequalactual-expected-message\">.deepEqual(actual, expected, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">actual</span></code> is deeply equal to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n</pre> </div> </div> <div id=\"method_notdeepequal\" class=\"api_method_wrapper\"> <h3 id=\"notdeepequalactual-expected-message\">.notDeepEqual(actual, expected, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Assert that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">actual</span></code> is not deeply equal to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n</pre> </div> </div> <div id=\"method_isabove\" class=\"api_method_wrapper\"> <h3 id=\"isabovevaluetocheck-valuetobeabove-message\">.isAbove(valueToCheck, valueToBeAbove, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">valueToCheck</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">valueToBeAbove</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts <code class=\"language-js highlighter-rouge\"><span class=\"nx\">valueToCheck</span></code> is strictly greater than (&gt;) <code class=\"language-js highlighter-rouge\"><span class=\"nx\">valueToBeAbove</span></code></p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isAbove(5, 2, '5 is strictly greater than 2');\n</pre> </div> </div> <div id=\"method_isatleast\" class=\"api_method_wrapper\"> <h3 id=\"isatleastvaluetocheck-valuetobeatleast-message\">.isAtLeast(valueToCheck, valueToBeAtLeast, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">valueToCheck</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">valueToBeAtLeast</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts <code class=\"language-js highlighter-rouge\"><span class=\"nx\">valueToCheck</span></code> is greater than or equal to (&gt;=) <code class=\"language-js highlighter-rouge\"><span class=\"nx\">valueToBeAtLeast</span></code></p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isAtLeast(5, 2, '5 is greater or equal to 2');\nassert.isAtLeast(3, 3, '3 is greater or equal to 3');\n</pre> </div> </div> <div id=\"method_isbelow\" class=\"api_method_wrapper\"> <h3 id=\"isbelowvaluetocheck-valuetobebelow-message\">.isBelow(valueToCheck, valueToBeBelow, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">valueToCheck</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">valueToBeBelow</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts <code class=\"language-js highlighter-rouge\"><span class=\"nx\">valueToCheck</span></code> is strictly less than (&lt;) <code class=\"language-js highlighter-rouge\"><span class=\"nx\">valueToBeBelow</span></code></p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isBelow(3, 6, '3 is strictly less than 6');\n</pre> </div> </div> <div id=\"method_isatmost\" class=\"api_method_wrapper\"> <h3 id=\"isatmostvaluetocheck-valuetobeatmost-message\">.isAtMost(valueToCheck, valueToBeAtMost, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">valueToCheck</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">valueToBeAtMost</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts <code class=\"language-js highlighter-rouge\"><span class=\"nx\">valueToCheck</span></code> is less than or equal to (&lt;=) <code class=\"language-js highlighter-rouge\"><span class=\"nx\">valueToBeAtMost</span></code></p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isAtMost(3, 6, '3 is less than or equal to 6');\nassert.isAtMost(4, 4, '4 is less than or equal to 4');\n</pre> </div> </div> <div id=\"method_istrue\" class=\"api_method_wrapper\"> <h3 id=\"istruevalue-message\">.isTrue(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is true.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var teaServed = true;\nassert.isTrue(teaServed, 'the tea has been served');\n</pre> </div> </div> <div id=\"method_isnottrue\" class=\"api_method_wrapper\"> <h3 id=\"isnottruevalue-message\">.isNotTrue(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is not true.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var tea = 'tasty chai';\nassert.isNotTrue(tea, 'great, time for tea!');\n</pre> </div> </div> <div id=\"method_isfalse\" class=\"api_method_wrapper\"> <h3 id=\"isfalsevalue-message\">.isFalse(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is false.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var teaServed = false;\nassert.isFalse(teaServed, 'no tea yet? hmm...');\n</pre> </div> </div> <div id=\"method_isnotfalse\" class=\"api_method_wrapper\"> <h3 id=\"isnotfalsevalue-message\">.isNotFalse(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is not false.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var tea = 'tasty chai';\nassert.isNotFalse(tea, 'great, time for tea!');\n</pre> </div> </div> <div id=\"method_isnull\" class=\"api_method_wrapper\"> <h3 id=\"isnullvalue-message\">.isNull(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is null.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isNull(err, 'there was no error');\n</pre> </div> </div> <div id=\"method_isnotnull\" class=\"api_method_wrapper\"> <h3 id=\"isnotnullvalue-message\">.isNotNull(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is not null.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var tea = 'tasty chai';\nassert.isNotNull(tea, 'great, time for tea!');\n</pre> </div> </div> <div id=\"method_isnan\" class=\"api_method_wrapper\"> <h3 id=\"isnan\">.isNaN</h3> <p>Asserts that value is NaN</p> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>assert.isNaN(‘foo’, ‘foo is NaN’);</p> </div> <div id=\"method_isnotnan\" class=\"api_method_wrapper\"> <h3 id=\"isnotnan\">.isNotNaN</h3> <p>Asserts that value is not NaN</p> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>assert.isNotNaN(4, ‘4 is not NaN’);</p> </div> <div id=\"method_isundefined\" class=\"api_method_wrapper\"> <h3 id=\"isundefinedvalue-message\">.isUndefined(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">undefined</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var tea;\nassert.isUndefined(tea, 'no tea defined');\n</pre> </div> </div> <div id=\"method_isdefined\" class=\"api_method_wrapper\"> <h3 id=\"isdefinedvalue-message\">.isDefined(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is not <code class=\"language-js highlighter-rouge\"><span class=\"kc\">undefined</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var tea = 'cup of chai';\nassert.isDefined(tea, 'tea has been defined');\n</pre> </div> </div> <div id=\"method_isfunction\" class=\"api_method_wrapper\"> <h3 id=\"isfunctionvalue-message\">.isFunction(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is a function.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">function serveTea() { return 'cup of tea'; };\nassert.isFunction(serveTea, 'great, we can have tea now');\n</pre> </div> </div> <div id=\"method_isnotfunction\" class=\"api_method_wrapper\"> <h3 id=\"isnotfunctionvalue-message\">.isNotFunction(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is <em>not</em> a function.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var serveTea = [ 'heat', 'pour', 'sip' ];\nassert.isNotFunction(serveTea, 'great, we have listed the steps');\n</pre> </div> </div> <div id=\"method_isobject\" class=\"api_method_wrapper\"> <h3 id=\"isobjectvalue-message\">.isObject(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is an object of type ‘Object’ (as revealed by <code class=\"language-js highlighter-rouge\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span></code>). <em>The assertion does not match subclassed objects.</em></p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var selection = { name: 'Chai', serve: 'with spices' };\nassert.isObject(selection, 'tea selection is an object');\n</pre> </div> </div> <div id=\"method_isnotobject\" class=\"api_method_wrapper\"> <h3 id=\"isnotobjectvalue-message\">.isNotObject(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is <em>not</em> an object of type ‘Object’ (as revealed by <code class=\"language-js highlighter-rouge\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span></code>).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var selection = 'chai'\nassert.isNotObject(selection, 'tea selection is not an object');\nassert.isNotObject(null, 'null is not an object');\n</pre> </div> </div> <div id=\"method_isarray\" class=\"api_method_wrapper\"> <h3 id=\"isarrayvalue-message\">.isArray(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is an array.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var menu = [ 'green', 'chai', 'oolong' ];\nassert.isArray(menu, 'what kind of tea do we want?');\n</pre> </div> </div> <div id=\"method_isnotarray\" class=\"api_method_wrapper\"> <h3 id=\"isnotarrayvalue-message\">.isNotArray(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is <em>not</em> an array.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var menu = 'green|chai|oolong';\nassert.isNotArray(menu, 'what kind of tea do we want?');\n</pre> </div> </div> <div id=\"method_isstring\" class=\"api_method_wrapper\"> <h3 id=\"isstringvalue-message\">.isString(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is a string.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var teaOrder = 'chai';\nassert.isString(teaOrder, 'order placed');\n</pre> </div> </div> <div id=\"method_isnotstring\" class=\"api_method_wrapper\"> <h3 id=\"isnotstringvalue-message\">.isNotString(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is <em>not</em> a string.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var teaOrder = 4;\nassert.isNotString(teaOrder, 'order placed');\n</pre> </div> </div> <div id=\"method_isnumber\" class=\"api_method_wrapper\"> <h3 id=\"isnumbervalue-message\">.isNumber(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is a number.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var cups = 2;\nassert.isNumber(cups, 'how many cups');\n</pre> </div> </div> <div id=\"method_isnotnumber\" class=\"api_method_wrapper\"> <h3 id=\"isnotnumbervalue-message\">.isNotNumber(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is <em>not</em> a number.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var cups = '2 cups please';\nassert.isNotNumber(cups, 'how many cups');\n</pre> </div> </div> <div id=\"method_isboolean\" class=\"api_method_wrapper\"> <h3 id=\"isbooleanvalue-message\">.isBoolean(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is a boolean.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var teaReady = true\n  , teaServed = false;\n\nassert.isBoolean(teaReady, 'is the tea ready');\nassert.isBoolean(teaServed, 'has tea been served');\n</pre> </div> </div> <div id=\"method_isnotboolean\" class=\"api_method_wrapper\"> <h3 id=\"isnotbooleanvalue-message\">.isNotBoolean(value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is <em>not</em> a boolean.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var teaReady = 'yep'\n  , teaServed = 'nope';\n\nassert.isNotBoolean(teaReady, 'is the tea ready');\nassert.isNotBoolean(teaServed, 'has tea been served');\n</pre> </div> </div> <div id=\"method_typeof\" class=\"api_method_wrapper\"> <h3 id=\"typeofvalue-name-message\">.typeOf(value, name, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>’s type is <code class=\"language-js highlighter-rouge\"><span class=\"nx\">name</span></code>, as determined by <code class=\"language-js highlighter-rouge\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\nassert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\nassert.typeOf('tea', 'string', 'we have a string');\nassert.typeOf(/tea/, 'regexp', 'we have a regular expression');\nassert.typeOf(null, 'null', 'we have a null');\nassert.typeOf(undefined, 'undefined', 'we have an undefined');\n</pre> </div> </div> <div id=\"method_nottypeof\" class=\"api_method_wrapper\"> <h3 id=\"nottypeofvalue-name-message\">.notTypeOf(value, name, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">typeof</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>’s type is <em>not</em> <code class=\"language-js highlighter-rouge\"><span class=\"nx\">name</span></code>, as determined by <code class=\"language-js highlighter-rouge\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">toString</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.notTypeOf('tea', 'number', 'strings are not numbers');\n</pre> </div> </div> <div id=\"method_instanceof\" class=\"api_method_wrapper\"> <h3 id=\"instanceofobject-constructor-message\">.instanceOf(object, constructor, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Constructor }</span> <span class=\"name\">constructor</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is an instance of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">constructor</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var Tea = function (name) { this.name = name; }\n  , chai = new Tea('chai');\n\nassert.instanceOf(chai, Tea, 'chai is an instance of tea');\n</pre> </div> </div> <div id=\"method_notinstanceof\" class=\"api_method_wrapper\"> <h3 id=\"notinstanceofobject-constructor-message\">.notInstanceOf(object, constructor, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Constructor }</span> <span class=\"name\">constructor</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> is not an instance of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">constructor</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var Tea = function (name) { this.name = name; }\n  , chai = new String('chai');\n\nassert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n</pre> </div> </div> <div id=\"method_include\" class=\"api_method_wrapper\"> <h3 id=\"includehaystack-needle-message\">.include(haystack, needle, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array | String }</span> <span class=\"name\">haystack</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">needle</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">haystack</span></code> includes <code class=\"language-js highlighter-rouge\"><span class=\"nx\">needle</span></code>. Works for strings and arrays.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\nassert.include([ 1, 2, 3 ], 3, 'array contains value');\n</pre> </div> </div> <div id=\"method_notinclude\" class=\"api_method_wrapper\"> <h3 id=\"notincludehaystack-needle-message\">.notInclude(haystack, needle, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array | String }</span> <span class=\"name\">haystack</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">needle</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">haystack</span></code> does not include <code class=\"language-js highlighter-rouge\"><span class=\"nx\">needle</span></code>. Works for strings and arrays.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.notInclude('foobar', 'baz', 'string not include substring');\nassert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n</pre> </div> </div> <div id=\"method_match\" class=\"api_method_wrapper\"> <h3 id=\"matchvalue-regexp-message\">.match(value, regexp, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ RegExp }</span> <span class=\"name\">regexp</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> matches the regular expression <code class=\"language-js highlighter-rouge\"><span class=\"nx\">regexp</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.match('foobar', /^foo/, 'regexp matches');\n</pre> </div> </div> <div id=\"method_notmatch\" class=\"api_method_wrapper\"> <h3 id=\"notmatchvalue-regexp-message\">.notMatch(value, regexp, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ RegExp }</span> <span class=\"name\">regexp</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code> does not match the regular expression <code class=\"language-js highlighter-rouge\"><span class=\"nx\">regexp</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.notMatch('foobar', /^foo/, 'regexp does not match');\n</pre> </div> </div> <div id=\"method_property\" class=\"api_method_wrapper\"> <h3 id=\"propertyobject-property-message\">.property(object, property, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> has a property named by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.property({ tea: { green: 'matcha' }}, 'tea');\n</pre> </div> </div> <div id=\"method_notproperty\" class=\"api_method_wrapper\"> <h3 id=\"notpropertyobject-property-message\">.notProperty(object, property, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> does <em>not</em> have a property named by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n</pre> </div> </div> <div id=\"method_deepproperty\" class=\"api_method_wrapper\"> <h3 id=\"deeppropertyobject-property-message\">.deepProperty(object, property, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> has a property named by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code>, which can be a string using dot- and bracket-notation for deep reference.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n</pre> </div> </div> <div id=\"method_notdeepproperty\" class=\"api_method_wrapper\"> <h3 id=\"notdeeppropertyobject-property-message\">.notDeepProperty(object, property, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> does <em>not</em> have a property named by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code>, which can be a string using dot- and bracket-notation for deep reference.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n</pre> </div> </div> <div id=\"method_propertyval\" class=\"api_method_wrapper\"> <h3 id=\"propertyvalobject-property-value-message\">.propertyVal(object, property, value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> has a property named by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code> with value given by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n</pre> </div> </div> <div id=\"method_propertynotval\" class=\"api_method_wrapper\"> <h3 id=\"propertynotvalobject-property-value-message\">.propertyNotVal(object, property, value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> has a property named by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code>, but with a value different from that given by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n</pre> </div> </div> <div id=\"method_deeppropertyval\" class=\"api_method_wrapper\"> <h3 id=\"deeppropertyvalobject-property-value-message\">.deepPropertyVal(object, property, value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> has a property named by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code> with value given by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>. <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code> can use dot- and bracket-notation for deep reference.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n</pre> </div> </div> <div id=\"method_deeppropertynotval\" class=\"api_method_wrapper\"> <h3 id=\"deeppropertynotvalobject-property-value-message\">.deepPropertyNotVal(object, property, value, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> has a property named by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code>, but with a value different from that given by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>. <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code> can use dot- and bracket-notation for deep reference.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n</pre> </div> </div> <div id=\"method_lengthof\" class=\"api_method_wrapper\"> <h3 id=\"lengthofobject-length-message\">.lengthOf(object, length, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">length</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> has a <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> property with the expected value.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.lengthOf([1,2,3], 3, 'array has length of 3');\nassert.lengthOf('foobar', 6, 'string has length of 6');\n</pre> </div> </div> <div id=\"method_throws\" class=\"api_method_wrapper\"> <h3 id=\"throwsfunction-constructorstringregexp-stringregexp-message\">.throws(function, [constructor/string/regexp], [string/regexp], [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">function</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ ErrorConstructor }</span> <span class=\"name\">constructor</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ RegExp }</span> <span class=\"name\">regexp</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@see</span> <span class=\"type\"><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\" target=\"_blank\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types</a></span>\n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"kd\">function</span></code> will throw an error that is an instance of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">constructor</span></code>, or alternately that it will throw an error with message matching <code class=\"language-js highlighter-rouge\"><span class=\"nx\">regexp</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.throws(fn, 'function throws a reference error');\nassert.throws(fn, /function throws a reference error/);\nassert.throws(fn, ReferenceError);\nassert.throws(fn, ReferenceError, 'function throws a reference error');\nassert.throws(fn, ReferenceError, /function throws a reference error/);\n</pre> </div> </div> <div id=\"method_doesnotthrow\" class=\"api_method_wrapper\"> <h3 id=\"doesnotthrowfunction-constructorregexp-message\">.doesNotThrow(function, [constructor/regexp], [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">function</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ ErrorConstructor }</span> <span class=\"name\">constructor</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ RegExp }</span> <span class=\"name\">regexp</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@see</span> <span class=\"type\"><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\" target=\"_blank\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types</a></span>\n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"kd\">function</span></code> will <em>not</em> throw an error that is an instance of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">constructor</span></code>, or alternately that it will not throw an error with message matching <code class=\"language-js highlighter-rouge\"><span class=\"nx\">regexp</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.doesNotThrow(fn, Error, 'function does not throw');\n</pre> </div> </div> <div id=\"method_operator\" class=\"api_method_wrapper\"> <h3 id=\"operatorval1-operator-val2-message\">.operator(val1, operator, val2, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">val1</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">operator</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">val2</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Compares two values using <code class=\"language-js highlighter-rouge\"><span class=\"nx\">operator</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.operator(1, '&lt;', 2, 'everything is ok');\nassert.operator(1, '&gt;', 2, 'this will fail');\n</pre> </div> </div> <div id=\"method_closeto\" class=\"api_method_wrapper\"> <h3 id=\"closetoactual-expected-delta-message\">.closeTo(actual, expected, delta, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">delta</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that the target is equal <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>, to within a +/- <code class=\"language-js highlighter-rouge\"><span class=\"nx\">delta</span></code> range.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n</pre> </div> </div> <div id=\"method_approximately\" class=\"api_method_wrapper\"> <h3 id=\"approximatelyactual-expected-delta-message\">.approximately(actual, expected, delta, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">actual</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">delta</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that the target is equal <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>, to within a +/- <code class=\"language-js highlighter-rouge\"><span class=\"nx\">delta</span></code> range.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.approximately(1.5, 1, 0.5, 'numbers are close');\n</pre> </div> </div> <div id=\"method_samemembers\" class=\"api_method_wrapper\"> <h3 id=\"samemembersset1-set2-message\">.sameMembers(set1, set2, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">set1</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">set2</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">set1</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">set2</span></code> have the same members. Order is not taken into account.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n</pre> </div> </div> <div id=\"method_samedeepmembers\" class=\"api_method_wrapper\"> <h3 id=\"samedeepmembersset1-set2-message\">.sameDeepMembers(set1, set2, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">set1</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">set2</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">set1</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">set2</span></code> have the same members - using a deep equality checking. Order is not taken into account.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n</pre> </div> </div> <div id=\"method_includemembers\" class=\"api_method_wrapper\"> <h3 id=\"includememberssuperset-subset-message\">.includeMembers(superset, subset, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">superset</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">subset</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">subset</span></code> is included in <code class=\"language-js highlighter-rouge\"><span class=\"nx\">superset</span></code>. Order is not taken into account.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n</pre> </div> </div> <div id=\"method_includedeepmembers\" class=\"api_method_wrapper\"> <h3 id=\"includedeepmemberssuperset-subset-message\">.includeDeepMembers(superset, subset, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">superset</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">subset</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">subset</span></code> is included in <code class=\"language-js highlighter-rouge\"><span class=\"nx\">superset</span></code> - using deep equality checking. Order is not taken into account. Duplicates are ignored.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n</pre> </div> </div> <div id=\"method_oneof\" class=\"api_method_wrapper\"> <h3 id=\"oneofinlist-list-message\">.oneOf(inList, list, [message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ }</span> <span class=\"name\">inList</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array. }</span> <span class=\"name\">list</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> \n</li> </ul> <p>Asserts that non-object, non-array value <code class=\"language-js highlighter-rouge\"><span class=\"nx\">inList</span></code> appears in the flat array <code class=\"language-js highlighter-rouge\"><span class=\"nx\">list</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n</pre> </div> </div> <div id=\"method_changes\" class=\"api_method_wrapper\"> <h3 id=\"changesfunction-object-property\">.changes(function, object, property)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">modifier</span> <span class=\"desc\">function</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function changes the value of a property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { obj.val = 22 };\nassert.changes(fn, obj, 'val');\n</pre> </div> </div> <div id=\"method_doesnotchange\" class=\"api_method_wrapper\"> <h3 id=\"doesnotchangefunction-object-property\">.doesNotChange(function, object, property)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">modifier</span> <span class=\"desc\">function</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function does not changes the value of a property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { console.log('foo'); };\nassert.doesNotChange(fn, obj, 'val');\n</pre> </div> </div> <div id=\"method_increases\" class=\"api_method_wrapper\"> <h3 id=\"increasesfunction-object-property\">.increases(function, object, property)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">modifier</span> <span class=\"desc\">function</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function increases an object property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { obj.val = 13 };\nassert.increases(fn, obj, 'val');\n</pre> </div> </div> <div id=\"method_doesnotincrease\" class=\"api_method_wrapper\"> <h3 id=\"doesnotincreasefunction-object-property\">.doesNotIncrease(function, object, property)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">modifier</span> <span class=\"desc\">function</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function does not increase object property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { obj.val = 8 };\nassert.doesNotIncrease(fn, obj, 'val');\n</pre> </div> </div> <div id=\"method_decreases\" class=\"api_method_wrapper\"> <h3 id=\"decreasesfunction-object-property\">.decreases(function, object, property)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">modifier</span> <span class=\"desc\">function</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function decreases an object property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { obj.val = 5 };\nassert.decreases(fn, obj, 'val');\n</pre> </div> </div> <div id=\"method_doesnotdecrease\" class=\"api_method_wrapper\"> <h3 id=\"doesnotdecreasefunction-object-property\">.doesNotDecrease(function, object, property)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">modifier</span> <span class=\"desc\">function</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function does not decreases an object property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { obj.val = 15 };\nassert.doesNotDecrease(fn, obj, 'val');\n</pre> </div> </div> <div id=\"method_iferror\" class=\"api_method_wrapper\"> <h3 id=\"iferrorobject\">.ifError(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> </ul> <p>Asserts if value is not a false value, and throws if it is a true value. This is added to allow for chai to be a drop-in replacement for Node’s assert class.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var err = new Error('I am a custom error');\nassert.ifError(err); // Rethrows err!\n</pre> </div> </div> <div id=\"method_isextensible\" class=\"api_method_wrapper\"> <h3 id=\"isextensibleobject\">.isExtensible(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> is extensible (can have new properties added to it).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isExtensible({});\n</pre> </div> </div> <div id=\"method_isnotextensible\" class=\"api_method_wrapper\"> <h3 id=\"isnotextensibleobject\">.isNotExtensible(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> is <em>not</em> extensible.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freese({});\n\nassert.isNotExtensible(nonExtensibleObject);\nassert.isNotExtensible(sealedObject);\nassert.isNotExtensible(frozenObject);\n</pre> </div> </div> <div id=\"method_issealed\" class=\"api_method_wrapper\"> <h3 id=\"issealedobject\">.isSealed(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> is sealed (cannot have new properties added to it and its existing properties cannot be removed).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var sealedObject = Object.seal({});\nvar frozenObject = Object.seal({});\n\nassert.isSealed(sealedObject);\nassert.isSealed(frozenObject);\n</pre> </div> </div> <div id=\"method_isnotsealed\" class=\"api_method_wrapper\"> <h3 id=\"isnotsealedobject\">.isNotSealed(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> is <em>not</em> sealed.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isNotSealed({});\n</pre> </div> </div> <div id=\"method_isfrozen\" class=\"api_method_wrapper\"> <h3 id=\"isfrozenobject\">.isFrozen(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> is frozen (cannot have new properties added to it and its existing properties cannot be modified).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var frozenObject = Object.freeze({});\nassert.frozen(frozenObject);\n</pre> </div> </div> <div id=\"method_isnotfrozen\" class=\"api_method_wrapper\"> <h3 id=\"isnotfrozenobject\">.isNotFrozen(object)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> is <em>not</em> frozen.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">assert.isNotFrozen({});\n</pre> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2015 Jake Luer<br>Licensed under the MIT License.<br>\n    <a href=\"http://chaijs.com/api/assert/\" class=\"_attribution-link\">http://chaijs.com/api/assert/</a>\n  </p>\n</div>\n","guide/plugins/index":"<h1 id=\"core-plugin-concepts\">Core Plugin Concepts</h1> <p>Plugins are for more than just writing vendor integrations. As a tester, one can write a plugin to validate input data, assert schema validation on an object, or ensure proper behavior on a DOM element. The API is flexible enough that any synchronous tasks can easily be encapsulated within a single assertion and reused throughout your tests.</p> <p>This tutorial will show you how to access Chai’s plugin API, use flags to transfer data through the language chain, and write your first assertion (and thorough error messages). Once you have finished here, <a href=\"../helpers/index\">Building a Helper</a> will show you how to compose properties and methods for use on the Chai language chain.</p> <h2 id=\"accessing-utilities\">Accessing Utilities</h2> <p>Chai comes with a number of utilities to assist in the construction of assertions, but it does not provide these directly on the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span></code> export. These can be accessed by using the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">use</span></code> method of the chai export, which accepts a single function as an argument.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.use(function (_chai, utils) {\n  // ...\n});\n</pre> </div> <p>The function which will be used gets passed two parameters to its scope. The first is the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span></code> export, the second is an object containing a number of utility methods (we’ll get to those in a minute).</p> <p>The <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span></code> export is included so that you can build helpers that can be used in multiple test files, or package your helpers as a plugin to share with the community. A more appropriate pattern for creating helpers is as follows…</p> <p>For our helper file: <code class=\"language-js highlighter-rouge\"><span class=\"nx\">test</span><span class=\"o\">/</span><span class=\"nx\">helpers</span><span class=\"o\">/</span><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">js</span></code></p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">module.exports = function (chai, utils) {\n  var Assertion = chai.Assertion;\n\n  // your helpers here\n};\n</pre> </div> <p>And, for our actual test: <code class=\"language-js highlighter-rouge\"><span class=\"nx\">test</span><span class=\"o\">/</span><span class=\"nx\">person</span><span class=\"p\">.</span><span class=\"nx\">js</span></code></p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var chai = require('chai')\n  , chaiModel = require('./helpers/model')\n  , expect = chai.expect;\n\nchai.use(chaiModel);\n</pre> </div> <p>For the rest of this document, we will assume this structure…</p> <ul> <li>helper in external file</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">Assertion</span></code> assigned to the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">Assertion</span></code> variable</li> <li>all of our helpers will be inside exported function, located where indicated</li> </ul> <p>The <code class=\"language-js highlighter-rouge\"><span class=\"nx\">Assertion</span></code> variable is now a constructor for an assertion chain; <code class=\"language-js highlighter-rouge\"><span class=\"k\">new</span> <span class=\"nx\">Assertion</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span></code> is now equivalent to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span></code>.</p> <h2 id=\"using-flags\">Using Flags</h2> <p>The upper-most core concept of how assertions work internally is the concept of flags. Each assertion has a set of mostly arbitrary flags - key:value pairs - associated with it. Chai uses a small number of these internally, but the store is also available for developers to expand on.</p> <h3 id=\"flag-usage\">flag usage</h3> <p>The flag utility is exposed as <code class=\"language-js highlighter-rouge\"><span class=\"nx\">utils</span><span class=\"p\">.</span><span class=\"nx\">flag</span></code> from within our <code class=\"language-js highlighter-rouge\"><span class=\"nx\">use</span></code> function. It can function as either a getter or a setter, depending on the number of arguments passed to it.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var myAssert = new Assertion(obj);\nutils.flag(myAssert, 'owner', 'me'); // sets key `owner` to `me`\nvar owner = utils.flag(myAssert, 'owner'); // get key `owner', returns value\n</pre> </div> <h3 id=\"object-flag\">object flag</h3> <p>The most important of Chai’s reserved flags is the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code> flag. This is the subject of an assertion.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var myAssert = new Assertion('Arthur Dent');\nvar obj = flag(myAssert, 'object'); // obj === 'Arthur Dent';\n</pre> </div> <p>This flag is so often used that a shortcut was provided as the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">_obj</span></code> property of a constructed assertion.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = myAssert._obj; // obj === `Arthur Dent`\n</pre> </div> <p>The following flags are used by Chai’s core assertions. Side effects may occur should you interfere with these.</p> <ul> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"nx\">object</span></code>: (see above)</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"nx\">ssfi</span></code>: start stack function - used to prevent callback stacks from being shown in errors.</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"nx\">message</span></code>: additional information to include with an error when using <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code> interface.</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"nx\">negate</span></code>: set when <code class=\"language-js highlighter-rouge\"><span class=\"p\">.</span><span class=\"nx\">not</span></code> is included in the chain.</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"nx\">deep</span></code>: set when <code class=\"language-js highlighter-rouge\"><span class=\"p\">.</span><span class=\"nx\">deep</span></code> is included in the chain. used by <code class=\"language-js highlighter-rouge\"><span class=\"nx\">equal</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code>\n</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"nx\">contains</span></code>: set when <code class=\"language-js highlighter-rouge\"><span class=\"nx\">include</span></code> or <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contain</span></code> is used as a property. changes the behavior of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">keys</span></code>.</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"nx\">lengthOf</span></code>: set when <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> is used as a property. changes the behavior of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">above</span></code>, <code class=\"language-js highlighter-rouge\"><span class=\"nx\">below</span></code>, and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">within</span></code>.</li> </ul> <h2 id=\"composing-an-assertion\">Composing an Assertion</h2> <p>Before we begin adding methods and properties to the language chain, we should first examine how to invoke an assertion, and the expected behavior should it fail.</p> <p>For this, each constructed <code class=\"language-js highlighter-rouge\"><span class=\"nx\">Assertion</span></code> has a method called simply <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code>. It accepts many parameters and its behavior can change depending on whether an assertion was negated or not.</p> <h3 id=\"basic-assertion\">Basic Assertion</h3> <p>To begin, we will construct Arthur again, then we can assert that he is who he says he is.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var arthur = new Assertion('Arthur Dent');\n\narthur.assert(\n    arthur._obj === 'Arthur Dent'\n  , \"expected #{this} to be 'Arthur Dent'\"\n  , \"expected #{this} to not be 'Arthur Dent'\"\n);\n</pre> </div> <p>Chai will check the first argument; if it is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">true</span></code> then the assertion passed, but if it is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code> the assertion failed and the first error message will be thrown as part of a <code class=\"language-js highlighter-rouge\"><span class=\"nx\">chai</span><span class=\"p\">.</span><span class=\"nx\">AssertionError</span></code>. Conversely, if the language chain was negated, it will consider <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code> a pass and <code class=\"language-js highlighter-rouge\"><span class=\"kc\">true</span></code> a failure. The second error message will be included in the thrown error instead.</p> <p>In all, the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code> method accepts six arguments:</p> <ol> <li>a boolean (result of a truth test)</li> <li>a string error message to be used if the first argument is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code>\n</li> <li>a string error message to be used if the assertion is negated and the first argument is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">true</span></code>\n</li> <li>(optional) the expected value</li> <li>(optional) the actual value, which will default to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">_obj</span></code>\n</li> <li>(optional) a boolean which indicates whether to display a diff in addition to the message if the first argument is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code>\n</li> </ol> <h3 id=\"composing-error-messages\">Composing Error Messages</h3> <p>As you can see from the above example, Chai can accept template tags to dynamically compose the error message. When used, these template tags will be replaced with a stringified replacement of the object in question. There are three template tags available.</p> <ul> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"err\">#</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">}</span></code>: the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">_obj</span></code> of the assertion</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"err\">#</span><span class=\"p\">{</span><span class=\"nx\">exp</span><span class=\"p\">}</span></code>: the expected value, if it was provided in <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code>\n</li> <li>\n<code class=\"language-js highlighter-rouge\"><span class=\"err\">#</span><span class=\"p\">{</span><span class=\"nx\">act</span><span class=\"p\">}</span></code>: the actual value, defaults to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">_obj</span></code> but can be overwritten by value provided in <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2015 Jake Luer<br>Licensed under the MIT License.<br>\n    <a href=\"http://chaijs.com/guide/plugins/\" class=\"_attribution-link\">http://chaijs.com/guide/plugins/</a>\n  </p>\n</div>\n","api/bdd/index":"<h1 id=\"bdd\">BDD</h1> <p>The BDD styles are <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expect</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code>. Both use the same chainable language to construct assertions, but they differ in the way an assertion is initially constructed. Check out the <a href=\"../../guide/styles/index\">Style Guide</a> for a comparison.</p> <h2>API Reference</h2> <div id=\"method_language-chains\" class=\"api_method_wrapper\"> <h3 id=\"language-chains\">Language Chains</h3>  <p>The following are provided as chainable getters to improve the readability of your assertions. They do not provide testing capabilities unless they have been overwritten by a plugin.</p> <p><strong>Chains</strong></p> <ul> <li>to</li> <li>be</li> <li>been</li> <li>is</li> <li>that</li> <li>which</li> <li>and</li> <li>has</li> <li>have</li> <li>with</li> <li>at</li> <li>of</li> <li>same</li> </ul> </div> <div id=\"method_not\" class=\"api_method_wrapper\"> <h3 id=\"not\">.not</h3>  <p>Negates any of assertions following in the chain.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(foo).to.not.equal('bar');\nexpect(goodFn).to.not.throw(Error);\nexpect({ foo: 'baz' }).to.have.property('foo')\n  .and.not.equal('bar');\n</pre> </div> </div> <div id=\"method_deep\" class=\"api_method_wrapper\"> <h3 id=\"deep\">.deep</h3>  <p>Sets the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">deep</span></code> flag, later used by the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">equal</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code> assertions.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(foo).to.deep.equal({ bar: 'baz' });\nexpect({ foo: { bar: { baz: 'quux' } } })\n  .to.have.deep.property('foo.bar.baz', 'quux');\n</pre> </div> <p><code class=\"language-js highlighter-rouge\"><span class=\"p\">.</span><span class=\"nx\">deep</span><span class=\"p\">.</span><span class=\"nx\">property</span></code> special characters can be escaped by adding two slashes before the <code class=\"language-js highlighter-rouge\"><span class=\"p\">.</span></code> or <code class=\"language-js highlighter-rouge\"><span class=\"p\">[]</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var deepCss = { '.link': { '[target]': 42 }};\nexpect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n</pre> </div> </div> <div id=\"method_any\" class=\"api_method_wrapper\"> <h3 id=\"any\">.any</h3>  <p>Sets the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">any</span></code> flag, (opposite of the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">all</span></code> flag) later used in the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">keys</span></code> assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(foo).to.have.any.keys('bar', 'baz');\n</pre> </div> </div> <div id=\"method_all\" class=\"api_method_wrapper\"> <h3 id=\"all\">.all</h3>  <p>Sets the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">all</span></code> flag (opposite of the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">any</span></code> flag) later used by the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">keys</span></code> assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(foo).to.have.all.keys('bar', 'baz');\n</pre> </div> </div> <div id=\"method_a\" class=\"api_method_wrapper\"> <h3 id=\"atype\">.a(type)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">type</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>The <code class=\"language-js highlighter-rouge\"><span class=\"nx\">a</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">an</span></code> assertions are aliases that can be used either as language chains or to assert a value’s type.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">// typeof\nexpect('test').to.be.a('string');\nexpect({ foo: 'bar' }).to.be.an('object');\nexpect(null).to.be.a('null');\nexpect(undefined).to.be.an('undefined');\nexpect(new Error).to.be.an('error');\nexpect(new Promise).to.be.a('promise');\nexpect(new Float32Array()).to.be.a('float32array');\nexpect(Symbol()).to.be.a('symbol');\n\n// es6 overrides\nexpect({[Symbol.toStringTag]:()=&gt;'foo'}).to.be.a('foo');\n\n// language chain\nexpect(foo).to.be.an.instanceof(Foo);\n</pre> </div> </div> <div id=\"method_include\" class=\"api_method_wrapper\"> <h3 id=\"includevalue\">.include(value)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object | String | Number }</span> <span class=\"name\">obj</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>The <code class=\"language-js highlighter-rouge\"><span class=\"nx\">include</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contain</span></code> assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. When used as language chains, they toggle the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contains</span></code> flag for the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">keys</span></code> assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect([1,2,3]).to.include(2);\nexpect('foobar').to.contain('foo');\nexpect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n</pre> </div> </div> <div id=\"method_ok\" class=\"api_method_wrapper\"> <h3 id=\"ok\">.ok</h3>  <p>Asserts that the target is truthy.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('everything').to.be.ok;\nexpect(1).to.be.ok;\nexpect(false).to.not.be.ok;\nexpect(undefined).to.not.be.ok;\nexpect(null).to.not.be.ok;\n</pre> </div> </div> <div id=\"method_true\" class=\"api_method_wrapper\"> <h3 id=\"true\">.true</h3>  <p>Asserts that the target is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">true</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(true).to.be.true;\nexpect(1).to.not.be.true;\n</pre> </div> </div> <div id=\"method_false\" class=\"api_method_wrapper\"> <h3 id=\"false\">.false</h3>  <p>Asserts that the target is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(false).to.be.false;\nexpect(0).to.not.be.false;\n</pre> </div> </div> <div id=\"method_null\" class=\"api_method_wrapper\"> <h3 id=\"null\">.null</h3>  <p>Asserts that the target is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">null</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(null).to.be.null;\nexpect(undefined).to.not.be.null;\n</pre> </div> </div> <div id=\"method_undefined\" class=\"api_method_wrapper\"> <h3 id=\"undefined\">.undefined</h3>  <p>Asserts that the target is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">undefined</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;\n</pre> </div> </div> <div id=\"method_nan\" class=\"api_method_wrapper\"> <h3 id=\"nan\">.NaN</h3> <p>Asserts that the target is <code class=\"language-js highlighter-rouge\"><span class=\"kc\">NaN</span></code>.</p>  <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foo').to.be.NaN;\nexpect(4).not.to.be.NaN;\n</pre> </div> </div> <div id=\"method_exist\" class=\"api_method_wrapper\"> <h3 id=\"exist\">.exist</h3>  <p>Asserts that the target is neither <code class=\"language-js highlighter-rouge\"><span class=\"kc\">null</span></code> nor <code class=\"language-js highlighter-rouge\"><span class=\"kc\">undefined</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var foo = 'hi'\n  , bar = null\n  , baz;\n\nexpect(foo).to.exist;\nexpect(bar).to.not.exist;\nexpect(baz).to.not.exist;\n</pre> </div> </div> <div id=\"method_empty\" class=\"api_method_wrapper\"> <h3 id=\"empty\">.empty</h3>  <p>Asserts that the target’s length is <code class=\"language-js highlighter-rouge\"><span class=\"mi\">0</span></code>. For arrays and strings, it checks the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> property. For objects, it gets the count of enumerable keys.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect([]).to.be.empty;\nexpect('').to.be.empty;\nexpect({}).to.be.empty;\n</pre> </div> </div> <div id=\"method_arguments\" class=\"api_method_wrapper\"> <h3 id=\"arguments\">.arguments</h3>  <p>Asserts that the target is an arguments object.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">function test () {\n  expect(arguments).to.be.arguments;\n}\n</pre> </div> </div> <div id=\"method_equal\" class=\"api_method_wrapper\"> <h3 id=\"equalvalue\">.equal(value)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is strictly equal (<code class=\"language-js highlighter-rouge\"><span class=\"o\">===</span></code>) to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>. Alternately, if the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">deep</span></code> flag is set, asserts that the target is deeply equal to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('hello').to.equal('hello');\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\nexpect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n</pre> </div> </div> <div id=\"method_eql\" class=\"api_method_wrapper\"> <h3 id=\"eqlvalue\">.eql(value)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is deeply equal to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\nexpect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n</pre> </div> </div> <div id=\"method_above\" class=\"api_method_wrapper\"> <h3 id=\"abovevalue\">.above(value)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is greater than <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(10).to.be.above(5);\n</pre> </div> <p>Can also be used in conjunction with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> to assert a minimum length. The benefit being a more informative error message than if the length was supplied directly.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foo').to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);\n</pre> </div> </div> <div id=\"method_least\" class=\"api_method_wrapper\"> <h3 id=\"leastvalue\">.least(value)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is greater than or equal to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(10).to.be.at.least(10);\n</pre> </div> <p>Can also be used in conjunction with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> to assert a minimum length. The benefit being a more informative error message than if the length was supplied directly.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foo').to.have.length.of.at.least(2);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n</pre> </div> </div> <div id=\"method_below\" class=\"api_method_wrapper\"> <h3 id=\"belowvalue\">.below(value)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is less than <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(5).to.be.below(10);\n</pre> </div> <p>Can also be used in conjunction with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> to assert a maximum length. The benefit being a more informative error message than if the length was supplied directly.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foo').to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);\n</pre> </div> </div> <div id=\"method_most\" class=\"api_method_wrapper\"> <h3 id=\"mostvalue\">.most(value)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">value</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is less than or equal to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(5).to.be.at.most(5);\n</pre> </div> <p>Can also be used in conjunction with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> to assert a maximum length. The benefit being a more informative error message than if the length was supplied directly.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foo').to.have.length.of.at.most(4);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n</pre> </div> </div> <div id=\"method_within\" class=\"api_method_wrapper\"> <h3 id=\"withinstart-finish\">.within(start, finish)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">start</span> <span class=\"desc\">lowerbound inclusive</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">finish</span> <span class=\"desc\">upperbound inclusive</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is within a range.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(7).to.be.within(5,10);\n</pre> </div> <p>Can also be used in conjunction with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> to assert a length range. The benefit being a more informative error message than if the length was supplied directly.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foo').to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);\n</pre> </div> </div> <div id=\"method_instanceof\" class=\"api_method_wrapper\"> <h3 id=\"instanceofconstructor\">.instanceof(constructor)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Constructor }</span> <span class=\"name\">constructor</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is an instance of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">constructor</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var Tea = function (name) { this.name = name; }\n  , Chai = new Tea('chai');\n\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([ 1, 2, 3 ]).to.be.instanceof(Array);\n</pre> </div> </div> <div id=\"method_property\" class=\"api_method_wrapper\"> <h3 id=\"propertyname-value\">.property(name, [value])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Mixed }</span> <span class=\"name\">value</span> <span class=\"desc\">(optional)</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target has a property <code class=\"language-js highlighter-rouge\"><span class=\"nx\">name</span></code>, optionally asserting that the value of that property is strictly equal to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">value</span></code>. If the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">deep</span></code> flag is set, you can use dot- and bracket-notation for deep references into objects and arrays.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">// simple referencing\nvar obj = { foo: 'bar' };\nexpect(obj).to.have.property('foo');\nexpect(obj).to.have.property('foo', 'bar');\n\n// deep referencing\nvar deepObj = {\n    green: { tea: 'matcha' }\n  , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n};\n\nexpect(deepObj).to.have.deep.property('green.tea', 'matcha');\nexpect(deepObj).to.have.deep.property('teas[1]', 'matcha');\nexpect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n</pre> </div> <p>You can also use an array as the starting point of a <code class=\"language-js highlighter-rouge\"><span class=\"nx\">deep</span><span class=\"p\">.</span><span class=\"nx\">property</span></code> assertion, or traverse nested arrays.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var arr = [\n    [ 'chai', 'matcha', 'konacha' ]\n  , [ { tea: 'chai' }\n    , { tea: 'matcha' }\n    , { tea: 'konacha' } ]\n];\n\nexpect(arr).to.have.deep.property('[0][1]', 'matcha');\nexpect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n</pre> </div> <p>Furthermore, <code class=\"language-js highlighter-rouge\"><span class=\"nx\">property</span></code> changes the subject of the assertion to be the value of that property from the original object. This permits for further chainable assertions on that property.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(obj).to.have.property('foo')\n  .that.is.a('string');\nexpect(deepObj).to.have.property('green')\n  .that.is.an('object')\n  .that.deep.equals({ tea: 'matcha' });\nexpect(deepObj).to.have.property('teas')\n  .that.is.an('array')\n  .with.deep.property('[2]')\n    .that.deep.equals({ tea: 'konacha' });\n</pre> </div> <p>Note that dots and bracket in <code class=\"language-js highlighter-rouge\"><span class=\"nx\">name</span></code> must be backslash-escaped when the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">deep</span></code> flag is set, while they must NOT be escaped when the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">deep</span></code> flag is not set.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">// simple referencing\nvar css = { '.link[target]': 42 };\nexpect(css).to.have.property('.link[target]', 42);\n\n// deep referencing\nvar deepCss = { '.link': { '[target]': 42 }};\nexpect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n</pre> </div> </div> <div id=\"method_ownproperty\" class=\"api_method_wrapper\"> <h3 id=\"ownpropertyname\">.ownProperty(name)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target has an own property <code class=\"language-js highlighter-rouge\"><span class=\"nx\">name</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('test').to.have.ownProperty('length');\n</pre> </div> </div> <div id=\"method_ownpropertydescriptor\" class=\"api_method_wrapper\"> <h3 id=\"ownpropertydescriptorname-descriptor-message\">.ownPropertyDescriptor(name[, descriptor[, message]])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">name</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Object }</span> <span class=\"name\">descriptor</span> <span class=\"desc\">_optional_</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target has an own property descriptor <code class=\"language-js highlighter-rouge\"><span class=\"nx\">name</span></code>, that optionally matches <code class=\"language-js highlighter-rouge\"><span class=\"nx\">descriptor</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('test').to.have.ownPropertyDescriptor('length');\nexpect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\nexpect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\nexpect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\nexpect('test').ownPropertyDescriptor('length').to.have.keys('value');\n</pre> </div> </div> <div id=\"method_length\" class=\"api_method_wrapper\"> <h3 id=\"length\">.length</h3>  <p>Sets the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">doLength</span></code> flag later used as a chain precursor to a value comparison for the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> property.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foo').to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);\nexpect('foo').to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);\nexpect('foo').to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);\n</pre> </div> <p><em>Deprecation notice:</em> Using <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> as an assertion will be deprecated in version 2.4.0 and removed in 3.0.0. Code using the old style of asserting for <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> property value using <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span></code> should be switched to use <code class=\"language-js highlighter-rouge\"><span class=\"nx\">lengthOf</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span></code> instead.</p> </div> <div id=\"method_lengthof\" class=\"api_method_wrapper\"> <h3 id=\"lengthofvalue-message\">.lengthOf(value[, message])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">length</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target’s <code class=\"language-js highlighter-rouge\"><span class=\"nx\">length</span></code> property has the expected value.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect([ 1, 2, 3]).to.have.lengthOf(3);\nexpect('foobar').to.have.lengthOf(6);\n</pre> </div> </div> <div id=\"method_match\" class=\"api_method_wrapper\"> <h3 id=\"matchregexp\">.match(regexp)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ RegExp }</span> <span class=\"name\">RegularExpression</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target matches a regular expression.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foobar').to.match(/^foo/);\n</pre> </div> </div> <div id=\"method_string\" class=\"api_method_wrapper\"> <h3 id=\"stringstring\">.string(string)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">string</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the string target contains another string.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('foobar').to.have.string('bar');\n</pre> </div> </div> <div id=\"method_keys\" class=\"api_method_wrapper\"> <h3 id=\"keyskey1-key2-\">.keys(key1, [key2], […])</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String | Array | Object }</span> <span class=\"name\">keys</span> \n</li> </ul> <p>Asserts that the target contains any or all of the passed-in keys. Use in combination with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">any</span></code>, <code class=\"language-js highlighter-rouge\"><span class=\"nx\">all</span></code>, <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contains</span></code>, or <code class=\"language-js highlighter-rouge\"><span class=\"nx\">have</span></code> will affect what will pass.</p> <p>When used in conjunction with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">any</span></code>, at least one key that is passed in must exist in the target object. This is regardless whether or not the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">have</span></code> or <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contain</span></code> qualifiers are used. Note, either <code class=\"language-js highlighter-rouge\"><span class=\"nx\">any</span></code> or <code class=\"language-js highlighter-rouge\"><span class=\"nx\">all</span></code> should be used in the assertion. If neither are used, the assertion is defaulted to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">all</span></code>.</p> <p>When both <code class=\"language-js highlighter-rouge\"><span class=\"nx\">all</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contain</span></code> are used, the target object must have at least all of the passed-in keys but may have more keys not listed.</p> <p>When both <code class=\"language-js highlighter-rouge\"><span class=\"nx\">all</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">have</span></code> are used, the target object must both contain all of the passed-in keys AND the number of keys in the target object must match the number of keys passed in (in other words, a target object must have all and only all of the passed-in keys).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\nexpect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\nexpect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\nexpect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\nexpect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\nexpect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n</pre> </div> </div> <div id=\"method_throw\" class=\"api_method_wrapper\"> <h3 id=\"throwconstructor\">.throw(constructor)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ ErrorConstructor }</span> <span class=\"name\">constructor</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String | RegExp }</span> <span class=\"name\">expected</span> <span class=\"desc\">error message</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@see</span> <span class=\"type\"><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\" target=\"_blank\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types</a></span>\n</li> </ul> <p>Asserts that the function target will throw a specific error, or specific type of error (as determined using <code class=\"language-js highlighter-rouge\"><span class=\"k\">instanceof</span></code>), optionally with a RegExp or string inclusion test for the error’s message.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var err = new ReferenceError('This is a bad function.');\nvar fn = function () { throw err; }\nexpect(fn).to.throw(ReferenceError);\nexpect(fn).to.throw(Error);\nexpect(fn).to.throw(/bad function/);\nexpect(fn).to.not.throw('good function');\nexpect(fn).to.throw(ReferenceError, /bad function/);\nexpect(fn).to.throw(err);\n</pre> </div> <p>Please note that when a throw expectation is negated, it will check each parameter independently, starting with error constructor type. The appropriate way to check for the existence of a type of error but for a message that does not match is to use <code class=\"language-js highlighter-rouge\"><span class=\"nx\">and</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(fn).to.throw(ReferenceError)\n   .and.not.throw(/good function/);\n</pre> </div> </div> <div id=\"method_respondto\" class=\"api_method_wrapper\"> <h3 id=\"respondtomethod\">.respondTo(method)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">method</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the object or class target will respond to a method.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">Klass.prototype.bar = function(){};\nexpect(Klass).to.respondTo('bar');\nexpect(obj).to.respondTo('bar');\n</pre> </div> <p>To check if a constructor will respond to a static function, set the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">itself</span></code> flag.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">Klass.baz = function(){};\nexpect(Klass).itself.to.respondTo('baz');\n</pre> </div> </div> <div id=\"method_itself\" class=\"api_method_wrapper\"> <h3 id=\"itself\">.itself</h3>  <p>Sets the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">itself</span></code> flag, later used by the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">respondTo</span></code> assertion.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">function Foo() {}\nFoo.bar = function() {}\nFoo.prototype.baz = function() {}\n\nexpect(Foo).itself.to.respondTo('bar');\nexpect(Foo).itself.not.to.respondTo('baz');\n</pre> </div> </div> <div id=\"method_satisfy\" class=\"api_method_wrapper\"> <h3 id=\"satisfymethod\">.satisfy(method)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Function }</span> <span class=\"name\">matcher</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target passes a given truth test.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(1).to.satisfy(function(num) { return num &gt; 0; });\n</pre> </div> </div> <div id=\"method_closeto\" class=\"api_method_wrapper\"> <h3 id=\"closetoexpected-delta\">.closeTo(expected, delta)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">expected</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Number }</span> <span class=\"name\">delta</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is equal <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span></code>, to within a +/- <code class=\"language-js highlighter-rouge\"><span class=\"nx\">delta</span></code> range.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(1.5).to.be.closeTo(1, 0.5);\n</pre> </div> </div> <div id=\"method_members\" class=\"api_method_wrapper\"> <h3 id=\"membersset\">.members(set)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array }</span> <span class=\"name\">set</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that the target is a superset of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">set</span></code>, or that the target and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">set</span></code> have the same strictly-equal (===) members. Alternately, if the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">deep</span></code> flag is set, set members are compared for deep equality.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);\n\nexpect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n</pre> </div> </div> <div id=\"method_oneof\" class=\"api_method_wrapper\"> <h3 id=\"oneoflist\">.oneOf(list)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ Array. }</span> <span class=\"name\">list</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Assert that a value appears somewhere in the top level of array <code class=\"language-js highlighter-rouge\"><span class=\"nx\">list</span></code>.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect('a').to.be.oneOf(['a', 'b', 'c']);\nexpect(9).to.not.be.oneOf(['z']);\nexpect([3]).to.not.be.oneOf([1, 2, [3]]);\n\nvar three = [3];\n// for object-types, contents are not compared\nexpect(three).to.not.be.oneOf([1, 2, [3]]);\n// comparing references works\nexpect(three).to.be.oneOf([1, 2, three]);\n</pre> </div> </div> <div id=\"method_change\" class=\"api_method_wrapper\"> <h3 id=\"changefunction\">.change(function)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function changes an object property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { obj.val += 3 };\nvar noChangeFn = function() { return 'foo' + 'bar'; }\nexpect(fn).to.change(obj, 'val');\nexpect(noChangeFn).to.not.change(obj, 'val')\n</pre> </div> </div> <div id=\"method_increase\" class=\"api_method_wrapper\"> <h3 id=\"increasefunction\">.increase(function)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function increases an object property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { obj.val = 15 };\nexpect(fn).to.increase(obj, 'val');\n</pre> </div> </div> <div id=\"method_decrease\" class=\"api_method_wrapper\"> <h3 id=\"decreasefunction\">.decrease(function)</h3> <ul class=\"tags\"> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">object</span> \n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">property</span> <span class=\"desc\">name</span>\n</li> <li class=\"tag\">\n<span class=\"type\">@param</span> <span class=\"types\">{ String }</span> <span class=\"name\">message</span> <span class=\"desc\">_optional_</span>\n</li> </ul> <p>Asserts that a function decreases an object property</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var obj = { val: 10 };\nvar fn = function() { obj.val = 5 };\nexpect(fn).to.decrease(obj, 'val');\n</pre> </div> </div> <div id=\"method_extensible\" class=\"api_method_wrapper\"> <h3 id=\"extensible\">.extensible</h3>  <p>Asserts that the target is extensible (can have new properties added to it).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\n\nexpect({}).to.be.extensible;\nexpect(nonExtensibleObject).to.not.be.extensible;\nexpect(sealedObject).to.not.be.extensible;\nexpect(frozenObject).to.not.be.extensible;\n</pre> </div> </div> <div id=\"method_sealed\" class=\"api_method_wrapper\"> <h3 id=\"sealed\">.sealed</h3>  <p>Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\n\nexpect(sealedObject).to.be.sealed;\nexpect(frozenObject).to.be.sealed;\nexpect({}).to.not.be.sealed;\n</pre> </div> </div> <div id=\"method_frozen\" class=\"api_method_wrapper\"> <h3 id=\"frozen\">.frozen</h3>  <p>Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var frozenObject = Object.freeze({});\n\nexpect(frozenObject).to.be.frozen;\nexpect({}).to.not.be.frozen;\n</pre> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2015 Jake Luer<br>Licensed under the MIT License.<br>\n    <a href=\"http://chaijs.com/api/bdd/\" class=\"_attribution-link\">http://chaijs.com/api/bdd/</a>\n  </p>\n</div>\n","guide/helpers/index":"<h1 id=\"building-a-helper\">Building a Helper</h1> <blockquote> <p>This tutorial assumes that you are familiar with the plugin <a href=\"../plugins/index\">core concepts</a>. If you have not yet read that article, it is recommended that you do so before continuing.</p> </blockquote> <p>Providing chainable helper assertions is the most common use of the plugin utilities that Chai exposes. Before we get into the basics, we are going to need a topic for which we will extend Chai’s assertions to comprehend. For this, we will be using a very minimal data model object.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">/**\n * # Model\n *\n * A constructor for a simple data model\n * object. Has a `type` and contains arbitrary\n * attributes.\n *\n * @param {String} type\n */\n\nfunction Model (type) {\n  this._type = type;\n  this._attrs = {};\n}\n\n/**\n * .set (key, value)\n *\n * Set an attribute to be stored in this model.\n *\n * @param {String} key\n * @param {Mixted} value\n */\n\nModel.prototype.set = function (key, value) {\n  this._attrs[key] = value;\n};\n\n/**\n * .get (key)\n *\n * Get an attribute that is stored in this model.\n *\n * @param {String} key\n */\n\nModel.prototype.get = function (key) {\n  return this._attrs[key];\n};\n</pre> </div> <p>Practically speaking, this could be any data model object returned from an ORM database in node or constructed from your MVC framework of choice in the browser.</p> <p>Hopefully our <code class=\"language-js highlighter-rouge\"><span class=\"nx\">Model</span></code> class is self explanatory, but as an example, here we construct a person object.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var arthur = new Model('person');\narthur.set('name', 'Arthur Dent');\narthur.set('occupation', 'traveller');\nconsole.log(arthur.get('name')); // Arthur Dent\n</pre> </div> <p>Now that we have our subject, we can move on to the basics of plugins.</p> <h2 id=\"adding-language-chains\">Adding Language Chains</h2> <p>Now we are getting to the fun part! Adding properties and methods are what Chai’s plugin API is really for.</p> <h3 id=\"adding-properties\">Adding Properties</h3> <p>In essence, defining a property can be done using <code class=\"language-js highlighter-rouge\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span></code>, but we encourage you to use Chai’s utility helpers to ensure a standard implementation throughout.</p> <p>For this example, we want the following test case to pass:</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var arthur = new Model('person');\nexpect(arthur).to.be.a.model;\n</pre> </div> <p>For this, we will use be using the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">addProperty</span></code> utility.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">utils.addProperty(Assertion.prototype, 'model', function () {\n  this.assert(\n      this._obj instanceof Model\n    , 'expected #{this} to be a Model'\n    , 'expected #{this} to not be a Model'\n  );\n});\n</pre> </div> <p><a href=\"../../api/plugins/index#addProperty-section\" class=\"clean-button\">View addProperty API</a></p> <p>Simple and concise. Chai can take it from here. It is also worth mentioning that because this extension pattern is used so often, Chai makes it just a bit easier. The following can be used in place of the first line above:</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">Assertion.addProperty('model', function () { // ...\n</pre> </div> <p>All chain extension utilities are provided both as part of the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">utils</span></code> object and directly on the Assertion constructor. For the rest of this document, however, we will be calling the methods directly from <code class=\"language-js highlighter-rouge\"><span class=\"nx\">Assertion</span></code>.</p> <h3 id=\"adding-methods\">Adding Methods</h3> <blockquote> <p>Note: Multiple plugins defining the same method name using <code class=\"language-js highlighter-rouge\"><span class=\"nx\">addMethod</span></code> will conflict, with the last-registered plugin winning. The plugin API is pending a major overhaul in future versions of Chai that will, among other things, deal with this conflict. In the mean time, please prefer using <code class=\"language-js highlighter-rouge\"><span class=\"nx\">overwriteMethod</span></code>.</p> </blockquote> <p>Though a property is an elegant solution, it is likely not specific enough for the helper we are constructing. As our models have types, it would be beneficial to assert that our model is of a specific type. For this, we need a method.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">// goal\nexpect(arthur).to.be.a.model('person');\n\n// language chain method\nAssertion.addMethod('model', function (type) {\n  var obj = this._obj;\n\n  // first, our instanceof check, shortcut\n  new Assertion(this._obj).to.be.instanceof(Model);\n\n  // second, our type check\n  this.assert(\n      obj._type === type\n    , \"expected #{this} to be of type #{exp} but got #{act}\"\n    , \"expected #{this} to not be of type #{act}\"\n    , type        // expected\n    , obj._type   // actual\n  );\n});\n</pre> </div> <p><a href=\"../../api/plugins/index#addMethod-section\" class=\"clean-button\">View addMethod API</a></p> <p>All calls to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code> are synchronous, so if the first one fails the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">AssertionError</span></code> is thrown and the second one will not be reached. It is up to the test runner to interpret the message and handle display of any failed assertions.</p> <h3 id=\"methods-as-properties\">Methods as Properties</h3> <p>Chai includes a unique utility that allows you to construct a language chain that can function as either a property or a method. We call these “chainable methods”. Despite the fact that we demonstrated the “is model of model” as both a property and a method, these assertions are NOT a good use case for chainable methods.</p> <h5 id=\"when-to-use\">When to Use</h5> <p>To understand when to best use chainable methods we will examine a chainable method from Chai’s core.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var arr = [ 1, 2, 3 ]\n  , obj = { a: 1, b: 2 };\n\nexpect(arr).to.contain(2);\nexpect(obj).to.contain.key('a');\n</pre> </div> <p>For this to work, two seperate functions are needed. One that will be invoked when the chain is used as either a property or a method, and one that will be invoked when only used as a method.</p> <p>In these examples, and with all of the other chainable methods in core, the only function of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contain</span></code> as a property is to set a <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contains</span></code> flag to true. This indicates to <code class=\"language-js highlighter-rouge\"><span class=\"nx\">keys</span></code> to behave differently. In this case, when <code class=\"language-js highlighter-rouge\"><span class=\"nx\">key</span></code> is used in conjunction with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">contain</span></code>, it will check for the inclusion of a key, instead of checking the exact match to all keys.</p> <h5 id=\"when-not-to-use\">When NOT to Use</h5> <p>Let’s say we set up a chainable method for <code class=\"language-js highlighter-rouge\"><span class=\"nx\">model</span></code> to behave as we indicated above: do an <code class=\"language-js highlighter-rouge\"><span class=\"k\">instanceof</span></code> check if used as a property, and a <code class=\"language-js highlighter-rouge\"><span class=\"nx\">_type</span></code> check if used as a method. The following conflict would occur…</p> <p>The following would work…</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(arthur).to.be.a.model;\nexpect(arthur).to.be.a.model('person');\nexpect(arr).to.not.be.a.model;\n</pre> </div> <p>But the following would not…</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(arthur).to.not.be.a.model('person');\n</pre> </div> <p>Remember, since the function used as the property assertion is invoked when also used as a method, and negation impacts ALL assertions after it is set, we would receive an error message resembling <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span> <span class=\"p\">[</span><span class=\"nx\">object</span> <span class=\"nx\">Model</span><span class=\"p\">]</span> <span class=\"nx\">not</span> <span class=\"nx\">to</span> <span class=\"nx\">be</span> <span class=\"nx\">instance</span> <span class=\"nx\">of</span> <span class=\"p\">[</span><span class=\"nx\">object</span> <span class=\"nx\">Model</span><span class=\"p\">]</span></code>. As such, please obey this general guideline when constructing chainable methods.</p> <blockquote> <p>When constructing chainable methods, the property function should only serve to set a flag for later modifying the behavior of an existing assertion.</p> </blockquote> <h5 id=\"an-appropriate-example\">An Appropriate Example</h5> <p>For use with our model example, we are going to construct an example that allows us to test Arthur’s age exactly, or chain into Chai’s numerical comparators, such as <code class=\"language-js highlighter-rouge\"><span class=\"nx\">above</span></code>, <code class=\"language-js highlighter-rouge\"><span class=\"nx\">below</span></code>, and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">within</span></code>. You will need to learn how to overwrite methods without destroying core functionality, but we get to that a bit later.</p> <p>Our goal will allow for all of the following to pass.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">expect(arthur).to.have.age(27);\nexpect(arthur).to.have.age.above(17);\nexpect(arthur).to.not.have.age.below(18);\n</pre> </div> <p>Let’s start first by composing the two functions needed for a chainable method. First up is the function to use when invoking the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">age</span></code> method.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">function assertModelAge (n) {\n  // make sure we are working with a model\n  new Assertion(this._obj).to.be.instanceof(Model);\n\n  // make sure we have an age and its a number\n  var age = this._obj.get('age');\n  new Assertion(age).to.be.a('number');\n\n  // do our comparison\n  this.assert(\n      age === n\n    , \"expected #{this} to have have #{exp} but got #{act}\"\n    , \"expected #{this} to not have age #{act}\"\n    , n\n    , age\n  );\n}\n</pre> </div> <p>By now, that should be self-explanatory. Now for our property function.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">function chainModelAge () {\n  utils.flag(this, 'model.age', true);\n}\n</pre> </div> <p>We will later teach our numerical comparators to look for that flag and change its behavior. Since we don’t want to break the core methods, we will need to safely override that method, but we’ll get to that in a minute. Let’s finish up here first…</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">Assertion.addChainableMethod('age', assertModelAge, chainModelAge);\n</pre> </div> <p><a href=\"../../api/plugins/index#addChainableMethod-section\" class=\"clean-button\">View addChainableMethod API</a></p> <p>Done. Now we can assert Arthur’s exact age. We will pick up again with this example when learning how to overwrite methods.</p> <h2 id=\"overwriting-language-chains\">Overwriting Language Chains</h2> <p>Now that we can successfully add assertions to the language chain, we should work on being able to safely overwrite existing assertions, such as those from Chai’s core or other plugins.</p> <p>Chai provides a number of utilities that allow you to overwrite existing behavior of an already existing assertion, but revert to the already defined assertion behavior if the subject of the assertion does not meet your criteria.</p> <p>Let’s start with a simple example of overwriting a property.</p> <h3 id=\"overwriting-properties\">Overwriting Properties</h3> <p>For this example, we are going to overwrite the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">ok</span></code> property provided by Chai’s core. The default behavior is that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">ok</span></code> will pass if an object is truthy. We want to change that behavior so then when <code class=\"language-js highlighter-rouge\"><span class=\"nx\">ok</span></code> is used with an instance of a model, it validates that the model is well formed. In our example, we will consider a model <code class=\"language-js highlighter-rouge\"><span class=\"nx\">ok</span></code> if it has an <code class=\"language-js highlighter-rouge\"><span class=\"nx\">id</span></code> attribute.</p> <p>Let’s start out with the basic overwrite utility and a basic assertion.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.overwriteProperty('ok', function (_super) {\n  return function checkModel () {\n    var obj = this._obj;\n    if (obj &amp;&amp; obj instanceof Model) {\n      new Assertion(obj).to.have.deep.property('_attrs.id').a('number');\n    } else {\n      _super.call(this);\n    }\n  };\n});\n</pre> </div> <p><a href=\"../../api/plugins/index#overwriteProperty-section\" class=\"clean-button\">View overwriteProperty API</a></p> <h5 id=\"overwrite-structure\">Overwrite Structure</h5> <p>As you can see, the main difference in overwriting is that the first function passes just one argument of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">_super</span></code>. This is the function that originally existed, and you should be sure to call that if your criteria doesn’t match. Secondly, you will notice that we immediately return a new function that will serve as the actual assertion.</p> <p>With this in place, we can write positive assertions.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var arthur = new Model('person');\narthur.set('id', 42);\nexpect(arthur).to.be.ok;\nexpect(true).to.be.ok;\n</pre> </div> <p>The above expectations will pass. When working with a model it will run our custom assertion, and when working with non-models it will revert to the original behavior. We will, however, run into a bit of trouble if we try to negate an <code class=\"language-js highlighter-rouge\"><span class=\"nx\">ok</span></code> assertion on a model.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var arthur = new Model('person');\narthur.set('id', 'dont panic');\nexpect(arthur).to.not.be.ok;\n</pre> </div> <p>We would expect this expection to pass as well, as our statement is negated and the id is not a number. Unfortunately, the negation flag was not passed to our number assertion, so it still expects the value to be a number.</p> <h5 id=\"transfering-flags\">Transfering Flags</h5> <p>For this we will expand on this assertion by transfering all of the flags from the original assertion to our new assertion. The final property overwrite would look like this.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.overwriteProperty('ok', function (_super) {\n  return function checkModel () {\n    var obj = this._obj;\n    if (obj &amp;&amp; obj instanceof Model) {\n      new Assertion(obj).to.have.deep.property('_attrs.id'); // we always want this\n      var assertId = new Assertion(obj._attrs.id);\n      utils.transferFlags(this, assertId, false); // false means don't transfer `object` flag\n      assertId.is.a('number');\n    } else {\n      _super.call(this);\n    }\n  };\n});\n</pre> </div> <p>Now, the negation flag is included in your new assertion and we can successfully handle both positive and negative assertions on the type of id. We left the property assertion as it was as we always want it to fail if the id is not present.</p> <h5 id=\"enhancing-error-messages\">Enhancing Error Messages</h5> <p>Though, we have one more small modification to make. Should our assertion fail for the wrong type of id attribute, we would get an error message that states <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expected</span> <span class=\"s1\">'dont panic'</span> <span class=\"nx\">to</span> <span class=\"p\">[</span><span class=\"nx\">not</span><span class=\"p\">]</span> <span class=\"nx\">be</span> <span class=\"nx\">a</span> <span class=\"nx\">number</span></code>. Not entirely useful when running a large test suite, so we will provide it with a bit more information.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var assertId = new Assertion(obj._attrs.id, 'model assert ok id type');\n</pre> </div> <p>This will change our error message to be a more informative <code class=\"language-js highlighter-rouge\"><span class=\"nx\">model</span> <span class=\"nx\">assert</span> <span class=\"nx\">ok</span> <span class=\"nx\">id</span> <span class=\"nx\">type</span><span class=\"err\">:</span>\n<span class=\"nx\">expected</span> <span class=\"s1\">'dont panic'</span> <span class=\"nx\">to</span> <span class=\"p\">[</span><span class=\"nx\">not</span><span class=\"p\">]</span> <span class=\"nx\">be</span> <span class=\"nx\">a</span> <span class=\"nx\">number</span></code>. Much more informative!</p> <h3 id=\"overwriting-methods\">Overwriting Methods</h3> <p>Overwriting methods follow the same structure of overwriting properties. For this example we will be returning to our example of asserting Arthur’s age to be above a minimum threshold.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var arthur = new Model('person');\narthur.set('age', 27);\nexpect(arthur).to.have.age.above(17);\n</pre> </div> <p>We already have our <code class=\"language-js highlighter-rouge\"><span class=\"nx\">age</span></code> chain in place to flag the assertion with <code class=\"language-js highlighter-rouge\"><span class=\"nx\">model</span><span class=\"p\">.</span><span class=\"nx\">age</span></code> so all we have to do is check if that exists.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">Assertion.overwriteMethod('above', function (_super) {\n  return function assertAge (n) {\n    if (utils.flag(this, 'model.age')) {\n      var obj = this._obj;\n\n      // first we assert we are actually working with a model\n      new Assertion(obj).instanceof(Model);\n\n      // next, make sure we have an age\n      new Assertion(obj).to.have.deep.property('_attrs.age').a('number');\n\n      // now we compare\n      var age = obj.get('age');\n      this.assert(\n          age &gt; n\n        , \"expected #{this} to have an age above #{exp} but got #{act}\"\n        , \"expected #{this} to not have an age above #{exp} but got #{act}\"\n        , n\n        , age\n      );\n    } else {\n      _super.apply(this, arguments);\n    }\n  };\n});\n</pre> </div> <p><a href=\"../../api/plugins/index#overwriteMethod-section\" class=\"clean-button\">View overwriteMethod API</a></p> <p>This covers both positive and negative scenarios. No need to transfer flags in this case as <code class=\"language-js highlighter-rouge\"><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">assert</span></code> handles that automatically. The same pattern can also be used for <code class=\"language-js highlighter-rouge\"><span class=\"nx\">below</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">within</span></code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2015 Jake Luer<br>Licensed under the MIT License.<br>\n    <a href=\"http://chaijs.com/guide/helpers/\" class=\"_attribution-link\">http://chaijs.com/guide/helpers/</a>\n  </p>\n</div>\n","guide/styles/index":"<h1 id=\"assertion-styles\">Assertion Styles</h1> <p>This section of the guide introduces you to the three different assertion styles that you may use in your testing environment. Once you have made your selection, it is recommended that you look at the API Documentation for your selected style.</p> <h2 id=\"assert\">Assert</h2> <p><a href=\"../../api/assert/index\" class=\"clean-button\">View full Assert API</a></p> <p>The assert style is exposed through <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code> interface. This provides the classic assert-dot notation, similar to that packaged with node.js. This assert module, however, provides several additional tests and is browser compatible.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var assert = require('chai').assert\n  , foo = 'bar'\n  , beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\n\nassert.typeOf(foo, 'string'); // without optional message\nassert.typeOf(foo, 'string', 'foo is a string'); // with optional message\nassert.equal(foo, 'bar', 'foo equal `bar`');\nassert.lengthOf(foo, 3, 'foo`s value has a length of 3');\nassert.lengthOf(beverages.tea, 3, 'beverages has 3 types of tea');\n</pre> </div> <p>In all cases, the assert style allows you to include an optional message as the last parameter in the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">assert</span></code> statement. These will be included in the error messages should your assertion not pass.</p> <h2 id=\"bdd\">BDD</h2> <p><a href=\"../../api/bdd/index\" class=\"clean-button\">View full BDD API</a></p> <p>The BDD style comes in two flavors: <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expect</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code>. Both use the same chainable language to construct assertions, but they differ in the way an assertion is initially constructed. In the case of <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code>, there are also some caveats and additional tools to overcome the caveats.</p> <h3 id=\"expect\">Expect</h3> <p>The BDD style is exposed through <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expect</span></code> or <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> interfaces. In both scenarios, you chain together natural language assertions.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var expect = require('chai').expect\n  , foo = 'bar'\n  , beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\n\nexpect(foo).to.be.a('string');\nexpect(foo).to.equal('bar');\nexpect(foo).to.have.length(3);\nexpect(beverages).to.have.property('tea').with.length(3);\n</pre> </div> <p>Expect also allows you to include arbitrary messages to prepend to any failed assertions that might occur.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var answer = 43;\n\n// AssertionError: expected 43 to equal 42.\nexpect(answer).to.equal(42);\n\n// AssertionError: topic [answer]: expected 43 to equal 42.\nexpect(answer, 'topic [answer]').to.equal(42);\n</pre> </div> <p>This comes in handy when being used with non-descript topics such as booleans or numbers.</p> <h3 id=\"should\">Should</h3> <p>The <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> style allows for the same chainable assertions as the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expect</span></code> interface, however it extends each object with a <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> property to start your chain. This style has some issues when used with Internet Explorer, so be aware of browser compatibility.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var should = require('chai').should() //actually call the function\n  , foo = 'bar'\n  , beverages = { tea: [ 'chai', 'matcha', 'oolong' ] };\n\nfoo.should.be.a('string');\nfoo.should.equal('bar');\nfoo.should.have.length(3);\nbeverages.should.have.property('tea').with.length(3);\n</pre> </div> <h3 id=\"differences\">Differences</h3> <p>First of all, notice that the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expect</span></code> require is just a reference to the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expect</span></code> function, whereas with the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> require, the function is being executed.</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var chai = require('chai')\n  , expect = chai.expect\n  , should = chai.should();\n</pre> </div> <p>The <code class=\"language-js highlighter-rouge\"><span class=\"nx\">expect</span></code> interface provides a function as a starting point for chaining your language assertions. It works on node.js and in all browsers.</p> <p>The <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> interface extends <code class=\"language-js highlighter-rouge\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span></code> to provide a single getter as the starting point for your language assertions. It works on node.js and in all modern browsers except Internet Explorer.</p> <h3 id=\"should-extras\">Should Extras</h3> <p>Given that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> works by extending <code class=\"language-js highlighter-rouge\"><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">prototype</span></code>, there are some scenarios where <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> will not work. Mainly, if you are trying to check the existence of an object. Take the following pseudocode:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">db.get(1234, function (err, doc) {\n  // we expect error to not exist\n  // we expect doc to exist and be an object\n});\n</pre> </div> <p>Given that <code class=\"language-js highlighter-rouge\"><span class=\"nx\">err</span></code> should be null or undefined, <code class=\"language-js highlighter-rouge\"><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">should</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">exist</span></code> is not a valid statement as <code class=\"language-js highlighter-rouge\"><span class=\"kc\">undefined</span></code> and <code class=\"language-js highlighter-rouge\"><span class=\"kc\">null</span></code> haven’t been extended with a <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> chain starter. As such, the appropriate few assertions for this scenario are as follows:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">var should = require('chai').should();\ndb.get(1234, function (err, doc) {\n  should.not.exist(err);\n  should.exist(doc);\n  doc.should.be.an('object');\n});\n</pre> </div> <p>Provided you assigned <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code> to a var, you have access to several quick helpers to keep you out of trouble when using <code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span></code>.</p> <ul> <li><code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span><span class=\"p\">.</span><span class=\"nx\">exist</span></code></li> <li><code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">exist</span></code></li> <li><code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span><span class=\"p\">.</span><span class=\"nx\">equal</span></code></li> <li><code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">equal</span></code></li> <li><code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span><span class=\"p\">.</span><span class=\"nx\">Throw</span></code></li> <li><code class=\"language-js highlighter-rouge\"><span class=\"nx\">should</span><span class=\"p\">.</span><span class=\"nx\">not</span><span class=\"p\">.</span><span class=\"nx\">Throw</span></code></li> </ul> <h3 id=\"using-should-in-es2015\">Using Should in ES2015</h3> <p>It isn’t possible to chain a function call from an ES2015 <code class=\"language-js highlighter-rouge\"><span class=\"kr\">import</span></code> statement – it has to go on its own line, which looks a little verbose:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">import chai from 'chai';\nchai.should();\n</pre> </div> <p>For a cleaner look, you can do this instead:</p> <div class=\"language-js highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">import 'chai/should';\n</pre> </div> <h2 id=\"configuration\">Configuration</h2> <h3 id=\"configincludestack\">config.includeStack</h3> <ul> <li>\n<strong>@param</strong> <em>{Boolean}</em>\n</li> <li>\n<strong>@default</strong> <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code>\n</li> </ul> <p>User configurable property, influences whether stack trace is included in Assertion error message. Default of <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code> suppresses stack trace in the error message.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.config.includeStack = true; // turn on stack trace\n</pre> </div> <h3 id=\"configshowdiff\">config.showDiff</h3> <ul> <li>\n<strong>@param</strong> <em>{Boolean}</em>\n</li> <li>\n<strong>@default</strong> <code class=\"language-js highlighter-rouge\"><span class=\"kc\">true</span></code>\n</li> </ul> <p>User configurable property, influences whether or not the <code class=\"language-js highlighter-rouge\"><span class=\"nx\">showDiff</span></code> flag should be included in the thrown AssertionErrors. <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code> will always be <code class=\"language-js highlighter-rouge\"><span class=\"kc\">false</span></code>; <code class=\"language-js highlighter-rouge\"><span class=\"kc\">true</span></code> will be true when the assertion has requested a diff be shown.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.config.showDiff = false; // turn off reporter diff display\n</pre> </div> <h3 id=\"configtruncatethreshold\">config.truncateThreshold</h3> <ul> <li>\n<strong>@param</strong> <em>{Number}</em>\n</li> <li>\n<strong>@default</strong> <code class=\"language-js highlighter-rouge\"><span class=\"mi\">40</span></code>\n</li> </ul> <p>User configurable property, sets length threshold for actual and expected values in assertion errors. If this threshold is exceeded, the value is truncated.</p> <p>Set it to zero if you want to disable truncating altogether.</p> <div class=\"language-javascript highlighter-rouge\">\n<pre class=\"highlight\" data-language=\"javascript\">chai.config.truncateThreshold = 0; // disable truncating\n</pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2015 Jake Luer<br>Licensed under the MIT License.<br>\n    <a href=\"http://chaijs.com/guide/styles/\" class=\"_attribution-link\">http://chaijs.com/guide/styles/</a>\n  </p>\n</div>\n"}