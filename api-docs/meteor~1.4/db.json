{"index":"<h1 class=\"title-page\">Introduction</h1> <div class=\"subtitle-page\">This is the guide for using Meteor, a full-stack JavaScript platform for developing modern web and mobile applications.</div>     <h2 id=\"what-is-meteor\">What is Meteor?</h2> <p>Meteor is a full-stack JavaScript platform for developing modern web and mobile applications. Meteor includes a key set of technologies for building connected-client reactive applications, a build tool, and a curated set of packages from the Node.js and general JavaScript community.</p> <ul> <li>\n<p>Meteor allows you to develop in <strong>one language</strong>, JavaScript, in all environments: application server, web browser, and mobile device.</p> </li> <li>\n<p>Meteor uses <strong>data on the wire</strong>, meaning the server sends data, not HTML, and the client renders it.</p> </li> <li>\n<p>Meteor <strong>embraces the ecosystem</strong>, bringing the best parts of the extremely active JavaScript community to you in a careful and considered way.</p> </li> <li>\n<p>Meteor provides <strong>full stack reactivity</strong>, allowing your UI to seamlessly reflect the true state of the world with minimal development effort.</p> </li> </ul> <h2 id=\"quickstart\">Quick start</h2> <p>Meteor supports <a href=\"https://www.meteor.com/install\" target=\"_blank\" rel=\"external\">OS X, Windows, and Linux</a>.</p> <p>On Windows? <a href=\"https://install.meteor.com/windows\" target=\"_blank\" rel=\"external\">Download the official Meteor installer here</a>.</p> <p>On OS X or Linux? Install the latest official Meteor release from your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">curl https://install.meteor.com/ | sh\n</pre> <p>The Windows installer supports Windows 7, Windows 8.1, Windows Server<br>2008, and Windows Server 2012. The command line installer supports Mac OS X<br>10.7 (Lion) and above, and Linux on x86 and x86_64 architectures.</p> <p>Once you’ve installed Meteor, create a project:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor create myapp\n</pre> <p>Run it locally:</p> <pre class=\"highlight bash\" data-language=\"bash\">cd myapp\nmeteor npm install\nmeteor\n# Meteor server running on: http://localhost:3000/\n</pre> <blockquote> <p>Meteor comes with npm bundled so that you can type <code>meteor npm</code> without worrying about installing it yourself. If you like, you can also use a globally installed npm to manage your packages.</p> </blockquote> <h2 id=\"learning-more\">Meteor resources</h2> <ol> <li>\n<p>The place to get started with Meteor is the <a href=\"https://www.meteor.com/tutorials/blaze/creating-an-app\" target=\"_blank\" rel=\"external\">official tutorial</a>.</p> </li> <li>\n<p><a href=\"http://stackoverflow.com/questions/tagged/meteor\" target=\"_blank\" rel=\"external\">Stack Overflow</a> is the best place to ask (and answer!) technical questions. Be sure to add the meteor tag to your question.</p> </li> <li>\n<p>Visit the <a href=\"https://forums.meteor.com\" target=\"_blank\" rel=\"external\">Meteor discussion forums</a> to announce projects, get help, talk about the community, or discuss changes to core.</p> </li> <li>\n<p>The <a href=\"https://docs.meteor.com\" target=\"_blank\" rel=\"external\">Meteor docs</a> is the best place to find the core API documentation of the platform.</p> </li> <li>\n<p><a href=\"https://atmospherejs.com\" target=\"_blank\" rel=\"external\">Atmosphere</a> is the repository of community packages designed especially for Meteor.</p> </li> <li>\n<p><a href=\"https://github.com/Urigo/awesome-meteor\" target=\"_blank\" rel=\"external\">Awesome Meteor</a> is a community-curated list of <a href=\"https://github.com/Urigo/awesome-meteor#getting-started\" target=\"_blank\" rel=\"external\">packages</a> and <a href=\"https://github.com/Urigo/awesome-meteor#resources\" target=\"_blank\" rel=\"external\">resources</a>.</p> </li> </ol> <h2 id=\"what-is-it\">What is the Meteor Guide?</h2> <p>This is a set of articles outlining opinions on best-practice application development using the <a href=\"https://meteor.com\" target=\"_blank\" rel=\"external\">Meteor</a> platform. Our aim is to cover patterns that are common to the development of all modern web and mobile applications, so many concepts documented here are not necessarily Meteor specific and could be applied to any application built with a focus on modern, interactive user interfaces.</p> <p>Nothing in the Meteor guide is <em>required</em> to build a Meteor application—you can certainly use the platform in ways that contradict the principles and patterns of the guide. However, the guide is an attempt to document best practices and community conventions, so we hope that the majority of the Meteor community will benefit from adopting the practices documented here.</p> <p>The APIs of the Meteor platform are available at the <a href=\"https://docs.meteor.com\" target=\"_blank\" rel=\"external\">docs site</a>, and you can browse community packages on <a href=\"https://atmospherejs.com\" target=\"_blank\" rel=\"external\">atmosphere</a>.</p> <h3 id=\"audience\">Target audience</h3> <p>The guide is targeted towards intermediate developers that have some familiarity with JavaScript, the Meteor platform, and web development in general. If you are just getting started with Meteor, we recommend starting with the <a href=\"https://www.meteor.com/tutorials/blaze/creating-an-app\" target=\"_blank\" rel=\"external\">official tutorial</a>.</p> <h3 id=\"example-app\">Example app</h3> <p>Many articles reference the Todos example application. This code is being actively developed alongside the guide. You can see the latest source code for the app, and file issues or make suggestions via pull request at its <a href=\"https://github.com/meteor/todos\" target=\"_blank\" rel=\"external\">GitHub repository</a>.</p> <h2 id=\"guide-concepts\">Guide development</h2> <h3 id=\"contributing\">Contributing</h3> <p>Ongoing Meteor Guide development takes place <strong>in the open</strong> <a href=\"https://github.com/meteor/guide\" target=\"_blank\" rel=\"external\">on GitHub</a>. We encourage pull requests and issues to discuss problems with and changes that could be made to the content. We hope that keeping our process open and honest will make it clear what we plan to include in the guide and what changes will be coming in future Meteor versions.</p> <h3 id=\"goals\">Goals of the project</h3> <p>The decisions made and practices outlined in the guide must necessarily be <strong>opinionated</strong>. Certain best practices will be highlighted and other valid approaches ignored. We aim to reach community consensus around major decisions but there will always be other ways to solve problems when developing your application. We believe it’s important to know what the “standard” way to solve a problem is before branching out to other options. If an alternate approach proves itself superior, then it should make its way into a future version of the guide.</p> <p>An important function of the guide is to <strong>shape future development</strong> in the Meteor platform. By documenting best practices, the guide shines a spotlight on areas of the platform that could be better, easier, or more performant, and thus will be used to focus a lot of future platform choices.</p> <p>Similarly, gaps in the platform highlighted by the guide can often be plugged by <strong>community packages</strong>; we hope that if you see an opportunity to improve the Meteor workflow by writing a package, that you take it! If you’re not sure how best to design or architect your package, reach out on the forums and start a discussion.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/index.html\" class=\"_attribution-link\">https://guide.meteor.com/index.html</a>\n  </p>\n</div>\n","api/core":"<h1 class=\"title-page\">Core</h1> <div class=\"subtitle-page\">Documentation of core Meteor functions.</div>     <h2 class=\"api-heading\" id=\"Meteor-isClient\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.isClient</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/client_environment.js#L30\" target=\"_blank\"> (meteor/client_environment.js, line 30) </a> </div> </h2>   <p>Boolean variable. True if running in client environment.</p>     <h2 class=\"api-heading\" id=\"Meteor-isServer\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.isServer</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/client_environment.js#L38\" target=\"_blank\"> (meteor/client_environment.js, line 38) </a> </div> </h2>   <p>Boolean variable. True if running in server environment.</p>    <blockquote> <p><code>Meteor.isServer</code> can be used to limit where code runs, but it does not prevent code from being sent to the client. Any sensitive code that you don’t want served to the client, such as code containing passwords or authentication mechanisms, should be kept in the <code>server</code> directory.</p> </blockquote>  <h2 class=\"api-heading\" id=\"Meteor-isCordova\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.isCordova</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/cordova_environment.js#L7\" target=\"_blank\"> (meteor/cordova_environment.js, line 7) </a> </div> </h2>   <p>Boolean variable. True if running in a Cordova mobile environment.</p>     <h2 class=\"api-heading\" id=\"Meteor-isDevelopment\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.isDevelopment</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/client_environment.js#L22\" target=\"_blank\"> (meteor/client_environment.js, line 22) </a> </div> </h2>   <p>Boolean variable. True if running in development environment.</p>     <h2 class=\"api-heading\" id=\"Meteor-isProduction\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.isProduction</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/client_environment.js#L14\" target=\"_blank\"> (meteor/client_environment.js, line 14) </a> </div> </h2>   <p>Boolean variable. True if running in production environment.</p>     <h2 class=\"api-heading\" id=\"Meteor-startup\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.startup(func)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/startup_client.js#L70\" target=\"_blank\"> (meteor/startup_client.js, line 70) </a> </div> </h2>   <p>Run code when a client or a server starts.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to run on startup.</p> </dd> </dl>   <p>On a server, the function will run as soon as the server process is finished starting. On a client, the function will run as soon as the DOM is ready. Code wrapped in <code>Meteor.startup</code> always runs after all app files have loaded, so you should put code here if you want to access shared variables from other files.</p> <p>The <code>startup</code> callbacks are called in the same order as the calls to <code>Meteor.startup</code> were made.</p> <p>On a client, <code>startup</code> callbacks from packages will be called first, followed by <code>&lt;body&gt;</code> templates from your <code>.html</code> files, followed by your application code.</p> <pre class=\"highlight js\" data-language=\"js\">// On server startup, if the database is empty, create some initial data.\n\nif (Meteor.isServer) {\n  Meteor.startup(function () {\n    if (Rooms.find().count() === 0) {\n      Rooms.insert({name: \"Initial room\"});\n    }\n  });\n}</pre>  <h2 class=\"api-heading\" id=\"Meteor-wrapAsync\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.wrapAsync(func, [context])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/helpers.js#L90\" target=\"_blank\"> (meteor/helpers.js, line 90) </a> </div> </h2>   <p>Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be <code>function(error, result){}</code>. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function that takes a callback as its final parameter</p> </dd> <dt> <code>context</code> <span class=\"type\">Object</span> </dt> <dd> <p>Optional <code>this</code> object against which the original function will be invoked</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Meteor-defer\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.defer(func)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/timers.js#L74\" target=\"_blank\"> (meteor/timers.js, line 74) </a> </div> </h2>   <p>Defer execution of a function to run asynchronously in the background (similar to <code>Meteor.setTimeout(func, 0)</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to run</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Meteor-absoluteUrl\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.absoluteUrl([path], [options])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/url_common.js#L10\" target=\"_blank\"> (meteor/url_common.js, line 10) </a> </div> </h2>   <p>Generate an absolute URL pointing to the application. The server reads from the <code>ROOT_URL</code> environment variable to determine where it is running. This is taken care of automatically for apps deployed to Galaxy, but must be provided when using <code>meteor build</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>path</code> <span class=\"type\">String</span> </dt> <dd> <p>A path to append to the root URL. Do not include a leading \"<code>/</code>\".</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>secure</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>Create an HTTPS URL.</p> </dd> <dt> <code>replaceLocalhost</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.</p> </dd> <dt> <code>rootUrl</code> <span class=\"type\">String</span> </dt> <dd> <p>Override the default ROOT_URL from the server environment. For example: \"<code>http://foo.example.com</code>\"</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Meteor-settings\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.settings</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/client_environment.js#L49\" target=\"_blank\"> (meteor/client_environment.js, line 49) </a> </div> </h2>   <p><code>Meteor.settings</code> contains deployment-specific configuration options. You can initialize settings by passing the <code>--settings</code> option (which takes the name of a file containing JSON data) to <code>meteor run</code> or <code>meteor deploy</code>. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the <code>METEOR_SETTINGS</code> environment variable. If the settings object contains a key named <code>public</code>, then <code>Meteor.settings.public</code> will be available on the client as well as the server. All other properties of <code>Meteor.settings</code> are only defined on the server. You can rely on <code>Meteor.settings</code> and <code>Meteor.settings.public</code> being defined objects (not undefined) on both client and server even if there are no settings specified. Changes to <code>Meteor.settings.public</code> at runtime will be picked up by new client connections.</p>     <h2 class=\"api-heading\" id=\"Meteor-release\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.release</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/helpers.js#L11\" target=\"_blank\"> (meteor/helpers.js, line 11) </a> </div> </h2>   <p><code>Meteor.release</code> is a string containing the name of the <a href=\"#meteorupdate\">release</a> with which the project was built (for example, <code>\"1.2.3\"</code>). It is <code>undefined</code> if the project was built using a git checkout of Meteor.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/core.html\" class=\"_attribution-link\">https://docs.meteor.com/api/core.html</a>\n  </p>\n</div>\n","api/packagejs":"<h1 class=\"title-page\">Package.js</h1> <div class=\"subtitle-page\">Documentation of Meteor's package API.</div>    <p>A package is a directory containing a package.js file, which contains roughly three major sections: a basic description, a package definition, and a test definition. By default, the directory name is the name of the package.</p> <p>The <code>package.js</code> file below is an example of how to use the packaging API. The rest of this section will explain the specific API commands in greater detail.</p> <pre class=\"highlight js\" data-language=\"js\">/* Information about this package */\nPackage.describe({\n  // Short two-sentence summary.\n\n  summary: \"What this does\",\n  // Version number.\n\n  version: \"1.0.0\",\n  // Optional.  Default is package directory name.\n\n  name: \"username:package-name\",\n  // Optional github URL to your source repository.\n\n  git: \"https://github.com/something/something.git\",\n});\n\n/* This defines your actual package */\nPackage.onUse(function (api) {\n  // If no version is specified for an 'api.use' dependency, use the\n\n  // one defined in Meteor 0.9.0.\n\n  api.versionsFrom('0.9.0');\n  // Use Underscore package, but only on the server.\n\n  // Version not specified, so it will be as of Meteor 0.9.0.\n\n  api.use('underscore', 'server');\n  // Use kadira:flow-router, version 1.0.0 or newer.\n\n  api.use('kadira:flow-router@2.12.1');\n  // Give users of this package access to active-route's Javascript helpers\n\n  api.imply('zimme:active-route@2.3.2')\n  // Export the object 'Email' to packages or apps that use this package.\n\n  api.export('Email', 'server');\n  // Specify the source code for the package.\n\n  api.addFiles('email.js', 'server');\n\n  // When using ecmascript or modules packages, you can use this instead of\n\n  // api.export and api.addFiles:\n\n  api.mainModule('email.js', 'server');\n});\n\n/* This defines the tests for the package */\nPackage.onTest(function (api) {\n  // Sets up a dependency on this package\n\n  api.use('username:package-name');\n  // Allows you to use the mocha test framework\n\n  api.use('practicalmeteor:mocha@2.4.5_2');\n  // Specify the source code for the package tests\n\n  api.addFiles('email_tests.js', 'server');\n});\n\n/* This lets you use npm packages in your package */\nNpm.depends({\n  simplesmtp: \"0.3.10\",\n  \"stream-buffers\": \"0.2.5\"});</pre> <p><code>api.mainModule</code> is documented in the <a href=\"http://docs.meteor.com/packages/modules.html#Modular-package-structure\">modules</a> section.</p> <p>Build plugins are created with <a href=\"#Package-registerBuildPlugin\"><code>Package.registerBuildPlugin</code></a>. See the coffeescript package for an example. Build plugins are fully-fledged Meteor programs in their own right and have their own namespace, package dependencies, source files and npm requirements.</p> <blockquote> <p>You can use <a href=\"#writingpackages\">local packages</a> to define custom build plugins for your app, with one caveat. In published packages, build plugins are already bundled with their transitive dependencies. So if you want a dependency of a build plugin to be satisfied by a local package, you must use a local copy of the package that defines the plugin (even if you make no changes to that package) so that Meteor will pick up the local dependency.</p> </blockquote> <p>Provide basic package information with <code>Package.describe(options)</code>. To publish a package, you must define <code>summary</code> and <code>version</code>.</p>  <h2 class=\"api-heading\" id=\"Package-describe\"> <div class=\"locus\"> package.js </div> <code>Package.describe(options)</code>  </h2>   <p>Provide basic package information.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>summary</code> <span class=\"type\">String</span> </dt> <dd> <p>A concise 1-2 sentence description of the package, required for publication.</p> </dd> <dt> <code>version</code> <span class=\"type\">String</span> </dt> <dd> <p>The (extended) <a href=\"http://www.semver.org\" target=\"_blank\" rel=\"external\">semver</a> version for your package. Additionally, Meteor allows a wrap number: a positive integer that follows the version number. If you are porting another package that uses semver versioning, you may want to use the original version, postfixed with <code>_wrapnumber</code>. For example, <code>1.2.3_1</code> or <code>2.4.5-rc1_4</code>. Wrap numbers sort after the original numbers: <code>1.2.3</code> &lt; <code>1.2.3_1</code> &lt; <code>1.2.3_2</code> &lt; <code>1.2.4-rc.0</code>. If no version is specified, this field defaults to <code>0.0.0</code>. If you want to publish your package to the package server, you must specify a version.</p> </dd> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional name override. By default, the package name comes from the name of its directory.</p> </dd> <dt> <code>git</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional Git URL to the source repository.</p> </dd> <dt> <code>documentation</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional Filepath to documentation. Set to 'README.md' by default. Set this to null to submit no documentation.</p> </dd> <dt> <code>debugOnly</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>A package with this flag set to true will not be bundled into production builds. This is useful for packages meant to be used in development only.</p> </dd> <dt> <code>prodOnly</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>A package with this flag set to true will ONLY be bundled into production builds.</p> </dd> <dt> <code>testOnly</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>A package with this flag set to true will ONLY be bundled as part of <code>meteor test</code>.</p> </dd> </dl>   <p>Define dependencies and expose package methods with the <code>Package.onUse</code> handler. This section lets you define what packages your package depends on, what packages are implied by your package, and what object your package is exported to.</p>  <h2 class=\"api-heading\" id=\"Package-onUse\"> <div class=\"locus\"> package.js </div> <code>Package.onUse(func)</code>  </h2>   <p>Define package dependencies and expose package methods.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function that takes in the package control <code>api</code> object, which keeps track of dependencies and exports.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"PackageAPI-versionsFrom\"> <div class=\"locus\"> package.js </div> <code>PackageAPI#versionsFrom(meteorRelease)</code>  </h3>   <p>Use versions of core packages from a release. Unless provided, all packages will default to the versions released along with <code>meteorRelease</code>. This will save you from having to figure out the exact versions of the core packages you want to use. For example, if the newest release of meteor is <code>METEOR@0.9.0</code> and it includes <code>jquery@1.0.0</code>, you can write <code>api.versionsFrom('METEOR@0.9.0')</code> in your package, and when you later write <code>api.use('jquery')</code>, it will be equivalent to <code>api.use('jquery@1.0.0')</code>. You may specify an array of multiple releases, in which case the default value for constraints will be the \"or\" of the versions from each release: <code>api.versionsFrom(['METEOR@0.9.0',\n'METEOR@0.9.5'])</code> may cause <code>api.use('jquery')</code> to be interpreted as <code>api.use('jquery@1.0.0 || 2.0.0')</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>meteorRelease</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>Specification of a release: track@version. Just 'version' (e.g. <code>\"0.9.0\"</code>) is sufficient if using the default release track <code>METEOR</code>. Can be an array of specifications.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"PackageAPI-use\"> <div class=\"locus\"> package.js </div> <code>PackageAPI#use(packageNames, [architecture], [options])</code>  </h3>   <p>Depend on package <code>packagename</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>packageNames</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>Packages being depended on. Package names may be suffixed with an @version tag.</p> <p>In general, you must specify a package's version (e.g., <code>'accounts@1.0.0'</code> to use version 1.0.0 or a higher compatible version (ex: 1.0.1, 1.5.0, etc.) of the <code>accounts</code> package). If you are sourcing core packages from a Meteor release with <code>versionsFrom</code>, you may leave off version names for core packages. You may also specify constraints, such as <code>my:forms@=1.0.0</code> (this package demands <code>my:forms</code> at <code>1.0.0</code> exactly), or <code>my:forms@1.0.0 || =2.0.1</code> (<code>my:forms</code> at <code>1.x.y</code>, or exactly <code>2.0.1</code>).</p> </dd> <dt> <code>architecture</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>If you only use the package on the server (or the client), you can pass in the second argument (e.g., <code>'server'</code>, <code>'client'</code>, <code>'web.browser'</code>, <code>'web.cordova'</code>) to specify what architecture the package is used with. You can specify multiple architectures by passing in an array, for example <code>['web.cordova', 'os.linux']</code>.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>weak</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>Establish a weak dependency on a package. If package A has a weak dependency on package B, it means that including A in an app does not force B to be included too — but, if B is included or by another package, then B will load before A. You can use this to make packages that optionally integrate with or enhance other packages if those packages are present. When you weakly depend on a package you don't see its exports. You can detect if the possibly-present weakly-depended-on package is there by seeing if <code>Package.foo</code> exists, and get its exports from the same place.</p> </dd> <dt> <code>unordered</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>It's okay to load this dependency after your package. (In general, dependencies specified by <code>api.use</code> are loaded before your package.) You can use this option to break circular dependencies.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"PackageAPI-imply\"> <div class=\"locus\"> package.js </div> <code>PackageAPI#imply(packageNames, [architecture])</code>  </h3>   <p>Give users of this package access to another package (by passing in the string <code>packagename</code>) or a collection of packages (by passing in an array of strings [<code>packagename1</code>, <code>packagename2</code>]</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>packageNames</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>Name of a package, or array of package names, with an optional @version component for each.</p> </dd> <dt> <code>architecture</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>If you only use the package on the server (or the client), you can pass in the second argument (e.g., <code>'server'</code>, <code>'client'</code>, <code>'web.browser'</code>, <code>'web.cordova'</code>) to specify what architecture the package is used with. You can specify multiple architectures by passing in an array, for example <code>['web.cordova',\n'os.linux']</code>.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"PackageAPI-export\"> <div class=\"locus\"> package.js </div> <code>PackageAPI#export(exportedObjects, [architecture], [exportOptions], exportOptions.testOnly)</code>  </h3>   <p>Export package-level variables in your package. The specified variables (declared without <code>var</code> in the source code) will be available to packages that use your package. If your package sets the <code>debugOnly</code>, <code>prodOnly</code> or <code>testOnly</code> options to <code>true</code> when it calls <code>Package.describe()</code>, then packages that use your package will need to use <code>Package[\"package-name\"].ExportedVariableName</code> to access the value of an exported variable.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>exportedObjects</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>Name of the object to export, or an array of object names.</p> </dd> <dt> <code>architecture</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>If you only want to export the object on the server (or the client), you can pass in the second argument (e.g., 'server', 'client', 'web.browser', 'web.cordova') to specify what architecture the export is used with. You can specify multiple architectures by passing in an array, for example <code>['web.cordova',\n'os.linux']</code>.</p> </dd> <dt> <code>exportOptions</code> <span class=\"type\">Object</span> </dt>  <dt> <code>exportOptions.testOnly</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>If true, this symbol will only be exported when running tests for this package.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"PackageAPI-addFiles\"> <div class=\"locus\"> package.js </div> <code>PackageAPI#addFiles(filenames, [architecture], [options])</code>  </h3>   <p>Specify source code files for your package.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>filenames</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>Paths to the source files.</p> </dd> <dt> <code>architecture</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>If you only want to use the file on the server (or the client), you can pass this argument (e.g., 'server', 'client', 'web.browser', 'web.cordova') to specify what architecture the file is used with. You can specify multiple architectures by passing in an array, for example <code>['web.cordova', 'os.linux']</code>. By default, the file will be loaded on both server and client.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>bare</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>If this file is JavaScript code or will be compiled into JavaScript code by a build plugin, don't wrap the resulting file in a closure. Has the same effect as putting a file into the <code>client/compatibility</code> directory in an app.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"PackageAPI-addAssets\"> <div class=\"locus\"> package.js </div> <code>PackageAPI#addAssets(filenames, architecture)</code>  </h3>   <p>Specify asset files for your package. They can be accessed via the <a href=\"#assets\">Assets API</a> from the server, or at the URL <code>/packages/username_package-name/file-name</code> from the client, depending on the architecture passed.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>filenames</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>Paths to the asset files.</p> </dd> <dt> <code>architecture</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>Specify where this asset should be available (e.g., 'server', 'client', 'web.browser', 'web.cordova'). You can specify multiple architectures by passing in an array, for example <code>['web.cordova', 'os.linux']</code>.</p> </dd> </dl>   <p>Set up your tests with the <code>Package.onTest</code> handler, which has an interface that’s parallel to that of the <code>onUse</code> handler. The tests will need to depend on the package that you have just created. For example, if your package is the <code>email</code> package, you have to call <code>api.use('email')</code> in order to test the package.</p> <p>If you used <code>meteor create</code> to set up your package, Meteor will create the required scaffolding in <code>package.js</code>, and you’ll only need to add unit test code in the <code>_test.js</code> file that was created.</p>  <h2 class=\"api-heading\" id=\"Package-onTest\"> <div class=\"locus\"> package.js </div> <code>Package.onTest(func)</code>  </h2>   <p>Define dependencies and expose package methods for unit tests.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function that takes in the package control 'api' object, which keeps track of dependencies and exports.</p> </dd> </dl>   <p>Meteor packages can include NPM packages and Cordova plugins by using <code>Npm.depends</code> and <code>Cordova.depends</code> in the <code>package.js</code> file.</p>  <h2 class=\"api-heading\" id=\"Npm-depends\"> <div class=\"locus\"> package.js </div> <code>Npm.depends(dependencies)</code>  </h2>   <p>Specify which <a href=\"https://www.npmjs.org/\" target=\"_blank\" rel=\"external\">NPM</a> packages your Meteor package depends on.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>dependencies</code> <span class=\"type\">Object</span> </dt> <dd> <p>An object where the keys are package names and the values are one of:</p> <ol> <li>Version numbers in string form</li> <li>Http(s) URLs to a git commit by SHA. </li> <li>Git URLs in the format described <a href=\"https://docs.npmjs.com/files/package.json#git-urls-as-dependencies\" target=\"_blank\" rel=\"external\">here</a>\n</li> </ol> <p>Https URL example:</p> <pre class=\"prettyprint source lang-js\" data-language=\"js\">Npm.depends({\n  moment: \"2.8.3\",\n  async: \"https://github.com/caolan/async/archive/71fa2638973dafd8761fa5457c472a312cc820fe.tar.gz\"\n});</pre>\n<p>Git URL example:</p> <pre class=\"prettyprint source lang-js\" data-language=\"js\">Npm.depends({\n  moment: \"2.8.3\",\n  async: \"git+https://github.com/caolan/async#master\"\n});</pre> </dd> </dl>    <h2 class=\"api-heading\" id=\"Npm-require\"> <div class=\"locus\"> Server </div> <code>Npm.require(name)</code>  </h2>   <p>Require a package that was specified using <code>Npm.depends()</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the package to require.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Cordova-depends\"> <div class=\"locus\"> package.js </div> <code>Cordova.depends(dependencies)</code>  </h2>   <p>Specify which <a href=\"http://cordova.apache.org/\" target=\"_blank\" rel=\"external\">Cordova / PhoneGap</a> plugins your Meteor package depends on.</p> <p>Plugins are installed from <a href=\"http://plugins.cordova.io/\" target=\"_blank\" rel=\"external\">plugins.cordova.io</a>, so the plugins and versions specified must exist there. Alternatively, the version can be replaced with a GitHub tarball URL as described in the <a href=\"https://github.com/meteor/meteor/wiki/Meteor-Cordova-integration#meteor-packages-with-cordova-dependencies\" target=\"_blank\" rel=\"external\">Cordova</a> page of the Meteor wiki on GitHub.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>dependencies</code> <span class=\"type\">Object</span> </dt> <dd> <p>An object where the keys are plugin names and the values are version numbers or GitHub tarball URLs in string form. Example:</p> <pre class=\"prettyprint source lang-js\" data-language=\"js\">Cordova.depends({\n  \"org.apache.cordova.camera\": \"0.3.0\"\n});</pre>\n<p>Alternatively, with a GitHub URL:</p> <pre class=\"prettyprint source lang-js\" data-language=\"js\">Cordova.depends({\n  \"org.apache.cordova.camera\":\n    \"https://github.com/apache/cordova-plugin-camera/tarball/d84b875c449d68937520a1b352e09f6d39044fbf\"\n});</pre> </dd> </dl>    <h2 class=\"api-heading\" id=\"Package-registerBuildPlugin\"> <div class=\"locus\"> package.js </div> <code>Package.registerBuildPlugin([options])</code>  </h2>   <p>Define a build plugin. A build plugin extends the build process for apps and packages that use this package. For example, the <code>coffeescript</code> package uses a build plugin to compile CoffeeScript source files into JavaScript.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>A cosmetic name, must be unique in the package.</p> </dd> <dt> <code>use</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>Meteor packages that this plugin uses, independent of the packages specified in <a href=\"#pack_onUse\">api.onUse</a>.</p> </dd> <dt> <code>sources</code> <span class=\"type\">Array of Strings</span> </dt> <dd> <p>The source files that make up the build plugin, independent from <a href=\"#pack_addFiles\">api.addFiles</a>.</p> </dd> <dt> <code>npmDependencies</code> <span class=\"type\">Object</span> </dt> <dd> <p>An object where the keys are NPM package names, and the values are the version numbers of required NPM packages, just like in <a href=\"#Npm-depends\">Npm.depends</a>.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"Plugin-registerSourceHandler\"> <div class=\"locus\"> Build Plugin </div> <code>Plugin.registerSourceHandler(fileExtension, handler)</code>  </h3>   <p>Inside a build plugin source file specified in <a href=\"#Package-registerBuildPlugin\">Package.registerBuildPlugin</a>, add a handler to compile files with a certain file extension.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>fileExtension</code> <span class=\"type\">String</span> </dt> <dd> <p>The file extension that this plugin should handle, without the first dot. Examples: <code>\"coffee\"</code>, <code>\"coffee.md\"</code>.</p> </dd> <dt> <code>handler</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function that takes one argument, a CompileStep object.</p> <p>Documentation for CompileStep is available <a href=\"https://github.com/meteor/meteor/wiki/CompileStep-API-for-Build-Plugin-Source-Handlers\" target=\"_blank\" rel=\"external\">on the GitHub Wiki</a>.</p> </dd> </dl>   <h2 id=\"build-plugin-api\">Build Plugins API</h2> <p>Meteor packages can provide build plugins - programs that integrate with the build tool Isobuild used to compile and bundle your application.</p> <p>Starting with Meteor 1.2, the API used to plug into the build process is called “Build Plugins”. There are 3 phases when a package’s plugin can run: linting, compilation and minification. Here is an overview of operations Isobuild performs on the application and packages source:</p> <ol> <li>Gather source files from the app folder or read <code>package.js</code> file for a package.</li> <li>Lint all source files and print the linting warnings.</li> <li>Compile the source files like CoffeeScript, ES6, Less or Templates to plain JavaScript and CSS.</li> <li>Link the JavaScript files: wrap them into closures and provide necessary package imports.</li> <li>Minify JavaScript and CSS files. Can also include concatenation of all files.</li> </ol> <p>Build plugins fill the phases 2, 3 and 5.</p> <p>Usually build plugins implement a class that is given a list of files to process. Commonly, such files have the following methods:</p> <ul> <li>\n<code>getContentsAsBuffer</code> - Returns the full contents of the file as a buffer.</li> <li>\n<code>getContentsAsString</code> - Returns the full contents of the file as a string.</li> <li>\n<code>getPackageName</code> - Returns the name of the package or <code>null</code> if the file is not in a package.</li> <li>\n<code>getPathInPackage</code> - Returns the relative path of file to the package or app root directory. The returned path always uses forward slashes.</li> <li>\n<code>getSourceHash</code> - Returns a hash string for the file that can be used to implement caching.</li> <li>\n<code>getArch</code> - Returns the architecture that is targeted while processing this file.</li> <li>\n<code>getBasename</code> - Returns the filename of the file.</li> <li>\n<code>getDirname</code> - Returns the directory path relative to the package or app root. The returned path always uses forward slashes.</li> <li>\n<code>error</code> - Call this method to raise a compilation or linting error for the file.</li> </ul> <h3 id=\"build-plugin-linters\">Linters</h3> <p>Linters are programs that check the code for undeclared variables or find code that doesn’t correspond to certain style guidelines. Some of the popular examples of linters are <a href=\"http://jshint.com/about/\" target=\"_blank\" rel=\"external\">JSHint</a> and <a href=\"http://eslint.org/\" target=\"_blank\" rel=\"external\">ESLint</a>. Some of the non-JavaScript linter examples include <a href=\"http://www.coffeelint.org/\" target=\"_blank\" rel=\"external\">CoffeeLint</a> for CoffeeScript and <a href=\"http://csslint.net/\" target=\"_blank\" rel=\"external\">CSSLint</a> for CSS.</p> <p>To register a linter build plugin in your package, you need to do a couple of things in your <code>package.js</code>:</p> <ul> <li>depend on the <code>isobuild:linter-plugin@1.0.0</code> package</li> <li>register a build plugin: <code>Package.registerBuildPlugin({name, sources, ... });</code> (see <a href=\"http://docs.meteor.com/#/full/Package-registerBuildPlugin\">docs</a>)</li> </ul> <p>In your build plugin sources, register a Linter Plugin: provide details such as a name, list of extensions and filenames the plugin will handle and a factory function that returns an instance of a linter class. Ex.:</p> <pre class=\"highlight javascript\" data-language=\"javascript\">Plugin.registerLinter({\n  extensions: [\"js\"],\n  filenames: [\".linterrc\"]\n}, function () {\n  var linter = new MyLinter();\n  return linter;\n});</pre> <p>In this example, we register a linter that runs on all <code>js</code> files and also reads a file named <code>.linterrc</code> to get a configuration.</p> <p>The <code>MyLinter</code> class should now implement the <code>processFilesForPackage</code> method. The method should accept two arguments: a list of files and an options object.</p> <pre class=\"highlight javascript\" data-language=\"javascript\">\nfunction MyLinter() {}\nMyLinter.prototype.processFilesForPackage = function (files, options) {\n  var globals = options.globals;\n\n  files.forEach(function (file) {\n    // lint the file\n\n    var lint = lintFile(file.getContentsAsString());\n    if (lint) {\n      // if there are linting errors, output them\n\n      file.error({\n        message: lint.text,\n        column: lint.column,\n        line: lint.line\n      });\n    }\n  });\n}</pre> <p>The globals are passed in the options object so that the linters can omit the warnings about the package imports that look like global variables.</p> <p>Each file in the list is an object that has all the methods provided by all build plugins, described above.</p> <p>See an example of a linting plugin implemented in Core: <a href=\"https://github.com/meteor/meteor/tree/devel/packages/jshint\" target=\"_blank\" rel=\"external\">jshint</a>.</p> <h3 id=\"build-plugin-compilers\">Compilers</h3> <p>Compilers are programs that take the source files and output JavaScript or CSS. They also can output parts of HTML that is added to the <code>&lt;head&gt;</code> tag and static assets. Examples for the compiler plugins are: CoffeeScript, Babel.js, JSX compilers, Jade templating compiler and others.</p> <p>To register a compiler plugin in your package, you need to do the following in your <code>package.js</code> file:</p> <ul> <li>depend on the <code>isobuild:compiler-plugin@1.0.0</code> package</li> <li>register a build plugin: <code>Package.registerBuildPlugin({name, sources, ... });</code> (see <a href=\"http://docs.meteor.com/#/full/Package-registerBuildPlugin\">docs</a>)</li> </ul> <p>In your build plugin source, register a Compiler Plugin: similar to other types of build plugins, provide the details, extensions and filenames and a factory function that returns an instance of the compiler. Ex.:</p> <pre class=\"highlight javascript\" data-language=\"javascript\">Plugin.registerCompiler({\n  extensions: [\"jade\", \"tpl.jade\"],\n  filenames: []\n}, function () {\n  var compiler  = new JadeCompiler();\n  return compiler;\n});</pre> <p>The compiler class must implement the <code>processFilesForTarget</code> method that is given the source files for a target (server or client part of the package/app).</p> <pre class=\"highlight javascript\" data-language=\"javascript\">\nfunction JadeCompiler() {}\nJadeCompiler.prototype.processFilesForTarget = function (files) {\n  files.forEach(function (file) {\n    // process and add the output\n\n    var output = compileJade(file.getContentsAsString());\n    file.addJavaScript({ data: output, path: file.getPathInPackage() + '.js' });\n  });\n};</pre> <p>Besides the common methods available on the input files’ class, the following methods are available:</p> <ul> <li>\n<code>getExtension</code> - Returns the extension that matched the compiler plugin. The longest prefix is preferred.</li> <li>\n<code>getDeclaredExports</code> - Returns a list of symbols declared as exports in this target. The result of <code>api.export('symbol')</code> calls in target’s control file such as package.js.</li> <li>\n<code>getDisplayPath</code> Returns a relative path that can be used to form error messages or other display properties. Can be used as an input to a source map.</li> <li>\n<code>addStlyesheet</code> - Web targets only. Add a stylesheet to the document. Not available for linter build plugins.</li> <li>\n<code>addJavaScript</code> - Add JavaScript code. The code added will only see the namespaces imported by this package as runtime dependencies using <a href=\"#PackageAPI-use\">‘api.use’</a>. If the file being compiled was added with the bare flag, the resulting JavaScript won’t be wrapped in a closure.</li> <li>\n<code>addAsset</code> - Add a file to serve as-is to the browser or to include on the browser, depending on the target. On the web, it will be served at the exact path requested. For server targets, it can be retrieved using <code>Assets.getText</code> or <code>Assets.getBinary</code>.</li> <li>\n<code>addHtml</code> - Works in web targets only. Add markup to the <code>head</code> or <code>body</code> section of the document.</li> </ul> <p>Meteor implements a couple of compilers as Core packages, good examples would be the <a href=\"https://github.com/meteor/meteor/tree/devel/packages/templating\" target=\"_blank\" rel=\"external\">Blaze templating</a> package and the <a href=\"https://github.com/meteor/meteor/tree/devel/packages/ecmascript\" target=\"_blank\" rel=\"external\">EcmaScript</a> package (compiles ES6/7 to JavaScript that can run in the browsers).</p> <h3 id=\"build-plugin-minifiers\">Minifiers</h3> <p>Minifiers run last after the sources has been compiled and JavaScript code has been linked. Minifiers are only ran for the client programs (<code>web.browser</code> and <code>web.cordova</code>).</p> <p>There are two types of minifiers one can add: a minifier processing JavaScript (registered extensions: <code>['js']</code>) and a minifier processing CSS (extensions: <code>['css']</code>).</p> <p>To register a minifier plugin in your package, add the following in your <code>package.js</code> file:</p> <ul> <li>depend on <code>isobuild:minifier-plugin@1.0.0</code> package</li> <li>register a build plugin: <code>Package.registerBuildPlugin({name, sources, ... });</code> (see <a href=\"http://docs.meteor.com/#/full/Package-registerBuildPlugin\">docs</a>)</li> </ul> <p>In your build plugin source, register a Minifier Plugin. Similar to Linter and Compiler plugin, specify the interested extensions (<code>css</code> or <code>js</code>). The factory function returns an instance of the minifier class.</p> <pre class=\"highlight javascript\" data-language=\"javascript\">Plugin.registerMinifier({\n  extensions: [\"js\"],\n  filenames: []\n}, function () {\n  var minifier  = new UglifyJsMinifier();\n  return minifier;\n});</pre> <p>The minifier class must implement the method <code>processFilesForBundle</code>. The first argument is a list of processed files and the options object specifies if the minifier is ran in production mode or development mode.</p> <pre class=\"highlight javascript\" data-language=\"javascript\">\nfunction UglifyJsMinifier() {}\nUglifyJsMinifier.prototype.processFileForBundle = function (files, options) {\n\nvar minifyMode = options.minifiyMode;\n  if (minifyMode === 'development') {\n    // don't minify in development\n\n    files.forEach(function (file) {\n      file.addJavaScript({\n        data: file.getContentsAsBuffer(),\n        sourceMap: file.getSourceMap(),\n        path: file.getPathInBundle()\n      });\n    });\n\n    return;\n  }\n\n  // in production mode minifiy:\n\n  files.forEach(function (file) {\n    file.addJavaScript({\n      data: uglifyjs.minify(file.getContentsAsBuffer()),\n      path: file.getPathInBundle()\n    });\n  });\n}</pre> <p>In this example, we re-add the same files in the development mode to avoid unnecessary work and then we minify the files in production mode.</p> <p>Besides the common input files’ methods, these methods are available:</p> <ul> <li>getPathInBundle - returns a path of the processed file in the bundle.</li> <li>getSourceMap - returns the source-map for the processed file if there is such.</li> <li>addJavaScript - same as compilers</li> <li>addStylesheet - same as compilers</li> </ul> <p>Right now, Meteor Core ships with the <code>standard-minifiers</code> package that can be replaced with a custom one. The <a href=\"https://github.com/meteor/meteor/tree/devel/packages/standard-minifiers\" target=\"_blank\" rel=\"external\">source</a> of the package is a good example how to build your own minification plugin.</p> <h3 id=\"build-plugin-caching\">Caching</h3> <p>Since the API allows build plugins to process multiple files at once, we encourage package authors to implement at least some in-memory caching for their plugins. Using the <code>getSourceHash</code> function for linters and compilers will allow quick incremental recompilations if the file is not reprocessed even when the contents didn’t change.</p> <p>For the fast rebuilds between the Isobuild process runs, plugins can implement on-disk caching. If a plugin implements the <code>setDiskCacheDirectory</code> method, it will be called from time to time with a new path on disk where the plugin can write its offline cache. The folder is correctly reset when the plugin is rebuilt or cache should be invalidated for any reason (for example, picked package versions set has changed).</p> <h4 id=\"build-plugin-caching-compiler\">Caching Compiler</h4> <p>There is a core package called <code>caching-compiler</code> that implements most of the common logic of keeping both in-memory and on-disk caches. The easiest way to implement caching correctly is to subclass the <code>CachingCompiler</code> or <code>MultiFileCachingCompiler</code> class from this package in your build plugin. <code>CachingCompiler</code> is for compilers that consider each file completely independently; <code>MultiFileCachingCompiler</code> is for compilers that allow files to reference each other. To get this class in your plugin namespace, add a dependency to the plugin definition:</p> <pre class=\"highlight javascript\" data-language=\"javascript\">Package.registerBuildPlugin({\n  name: \"compileGG\",\n  use: [ 'caching-compiler@1.0.0' ],\n  sources: [ 'plugin/compile-gg.js' ]\n});</pre> <h3 id=\"build-plugin-file-system\">Accessing File System</h3> <p>Since the build plugins run as part of the Meteor tool, they follow the same file-system access convention - all file system paths always look like a Unix path: using forward slashes and having a root at ‘/‘, even on Windows. For example: paths <code>/usr/bin/program</code> and <code>/C/Program Files/Program/program.exe</code> are valid paths, and <code>C:\\Program Files\\Program\\program.exe</code> is not.</p> <p>So whenever you get a path in your build plugin implementation, via <code>getPathInPackage</code> or in an argument of the <code>setDiskCacheDirectory</code> method, the path will be a Unix path.</p> <p>Now, on running on Windows, the usual node modules <code>fs</code> and <code>path</code> expect to get a DOS path. To assist you to write correct code, the <code>Plugin</code> symbol provides its own versions of <code>fs</code> and <code>path</code> that you can use instead (note that all methods on <code>fs</code> are fiberized and sync versions prefer using Fibers rather than freezing the whole event loop).</p> <p>Also <code>Plugin</code> provides helper functions <code>convertToStandardPath</code> and <code>convertToOSPath</code> to convert to a Unix path or to the path expected by the node libraries regardless of the path origin.</p> <p>Example:</p> <pre class=\"highlight javascript\" data-language=\"javascript\">// on Windows\n\nvar fs = Plugin.fs;\n\nvar path = Plugin.path;\n\n\nvar filepath = path.join('/C/Program Files', 'Program/file.txt');\n\n\nconsole.log(filepath); // prints \"/C/Program Files/Program/file.txt\"\n\n\nfs.writeFileSync(filepath, \"Hello.\"); // writes to C:\\Program Files\\Program\\file.txt\n\n\n\nconsole.log(Plugin.convertToOsPath(filepath)); // prints \"C:\\Program Files\\Program\\file.txt\"\n</pre> <h2 id=\"isobuild-features\">Isobuild Feature Packages</h2> <p>Starting with Meteor 1.2, packages can declare that they need a version of the Meteor tool whose Isobuild build system supports a certain feature. For example, packages must write <code>api.use('isobuild:compiler-plugin@1.0.0')</code> in order to call <code>Plugin.registerCompiler</code>. This means that a package can transition from the old <code>registerSourceHandler</code> API to <code>registerCompiler</code> and Version Solver will properly prevent the <code>registerCompiler</code> version from being chosen by older tools that don’t know how to handle it.</p> <p>This is the known Isobuild feature “packages” sorted by the first release of Meteor which supports them.</p> <h3 id=\"isobuild-features-1.2\">Introduced in Meteor 1.2</h3> <ul> <li>\n<code>compiler-plugin@1.0.0</code>: Allows use of <code>Plugin.registerCompiler</code>.</li> <li>\n<code>linter-plugin@1.0.0</code>: Allows use of <code>Plugin.registerLinter</code>.</li> <li>\n<code>minifier-plugin@1.0.0</code>: Allows use of <code>Plugin.registerMinifier</code>.</li> <li>\n<code>isopack-2@1.0.0</code>: This package is published only in <code>isopack-2</code> format and won’t work in versions of Meteor that don’t support that format.</li> <li>\n<code>prod-only@1.0.0</code>: Allows use of the <code>prodOnly</code> flag in <code>Package.describe</code>.</li> <li>\n<code>isobuild:cordova@5.2.0</code>: This package depends on a specific version of Cordova, most likely as a result of the Cordova plugins it depends on.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/packagejs.html\" class=\"_attribution-link\">https://docs.meteor.com/api/packagejs.html</a>\n  </p>\n</div>\n","api/check":"<h1 class=\"title-page\">Check</h1>    <p>The <code>check</code> package includes pattern checking functions useful for checking the types and structure of variables and an <a href=\"#matchpatterns\">extensible library of patterns</a> to specify which types you are expecting.</p> <p>To add <code>check</code> (or <code>Match</code>) to your application, run this command in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add check</pre>  <h2 class=\"api-heading\" id=\"check\"> <div class=\"locus\"> Anywhere </div> <code>check</code> <div class=\"subtext-api\"> <code>import { check } from 'meteor/check'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/check/match.js#L20\" target=\"_blank\"> (check/match.js, line 20) </a> </div> </h2>   <p>Check that a value matches a <a href=\"#matchpatterns\">pattern</a>. If the value does not match the pattern, throw a <code>Match.Error</code>.</p> <p>Particularly useful to assert that arguments to a function have the right types and structure.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>value</code> <span class=\"type\">Any</span> </dt> <dd> <p>The value to check</p> </dd> <dt> <code>pattern</code> <span class=\"type\"><a href=\"#matchpatterns\">Match Pattern</a></span> </dt> <dd> <p>The pattern to match <code>value</code> against</p> </dd> </dl>   <p>Meteor methods and publish functions can take arbitrary <a href=\"#ejson\">EJSON</a> types as arguments, but most functions expect their arguments to be of a particular type. <code>check</code> is a lightweight function for checking that arguments and other values are of the expected type. For example:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish(\"chats-in-room\", function (roomId) {\n  // Make sure roomId is a string, not an arbitrary mongo selector object.\n\n  check(roomId, String);\n  return Chats.find({room: roomId});\n});\n\nMeteor.methods({addChat: function (roomId, message) {\n  check(roomId, String);\n  check(message, {\n    text: String,\n    timestamp: Date,\n    // Optional, but if present must be an array of strings.\n\n    tags: Match.Maybe([String])\n  });\n\n  // ... do something with the message ...\n\n}});</pre> <p>If the match fails, <code>check</code> throws a <code>Match.Error</code> describing how it failed. If this error gets sent over the wire to the client, it will appear only as <code>Meteor.Error(400, \"Match Failed\")</code>. The failure details will be written to the server logs but not revealed to the client.</p>  <h2 class=\"api-heading\" id=\"Match-test\"> <div class=\"locus\"> Anywhere </div> <code>Match.test(value, pattern)</code> <div class=\"subtext-api\"> <code>import { Match } from 'meteor/check'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/check/match.js#L96\" target=\"_blank\"> (check/match.js, line 96) </a> </div> </h2>   <p>Returns true if the value matches the pattern.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>value</code> <span class=\"type\">Any</span> </dt> <dd> <p>The value to check</p> </dd> <dt> <code>pattern</code> <span class=\"type\"><a href=\"#matchpatterns\">Match Pattern</a></span> </dt> <dd> <p>The pattern to match <code>value</code> against</p> </dd> </dl>   <p><code>Match.test</code> can be used to identify if a variable has a certain structure.</p> <pre class=\"highlight js\" data-language=\"js\">// will return true for {foo: 1, bar: \"hello\"} or similar\nMatch.test(value, {foo: Match.Integer, bar: String});\n\n// will return true if value is a string\nMatch.test(value, String);\n\n// will return true if value is a String or an array of Numbers\nMatch.test(value, Match.OneOf(String, [Number]));</pre> <p>This can be useful if you have a function that accepts several different kinds of objects, and you want to determine which was passed in.</p> <h2 id=\"matchpatterns\">Match Patterns</h2> <p>The following patterns can be used as pattern arguments to <a href=\"#check\"><code>check</code></a> and <code>Match.test</code>:</p> <dl> <dt><span class=\"name\"><code>Match.Any</code></span></dt>\n<dd>\n<p>Matches any value.</p> </dd> <dt><span class=\"name\"><code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>undefined</code>, <code>null</code></span></dt>\n<dd>\n<p>Matches a primitive of the given type.</p> </dd> <dt><span class=\"name\"><code>Match.Integer</code></span></dt>\n<dd>\n<p>Matches a signed 32-bit integer. Doesn’t match <code>Infinity</code>, <code>-Infinity</code>, or <code>NaN</code>.</p> </dd> <dt><span class=\"name\"><code>[<em>pattern</em>]</code></span></dt>\n<dd>\n<p>A one-element array matches an array of elements, each of which match <em>pattern</em>. For example, <code>[Number]</code> matches a (possibly empty) array of numbers; <code>[Match.Any]</code> matches any array.</p> </dd> <dt><span class=\"name\"><code>{<em>key1</em>: <em>pattern1</em>, <em>key2</em>: <em>pattern2</em>, …}</code></span></dt> <dd> Matches an Object with the given keys, with values matching the given patterns. If any <em>pattern</em> is a <code>Match.Maybe</code> or <code>Match.Optional</code>, that key does not need to exist in the object. The value may not contain any keys not listed in the pattern. The value must be a plain Object with no special prototype. </dd> <dt><span class=\"name\"><code>Match.ObjectIncluding({<em>key1</em>: <em>pattern1</em>, <em>key2</em>: <em>pattern2</em>, …})</code></span></dt> <dd> Matches an Object with the given keys; the value may also have other keys with arbitrary values. </dd> <dt><span class=\"name\"><code>Object</code></span></dt>\n<dd>\n<p>Matches any plain Object with any keys; equivalent to <code>Match.ObjectIncluding({})</code>.</p> </dd> <dt><span class=\"name\"><code>Match.Maybe(<em>pattern</em>)</code></span></dt>\n<dd>\n<p>Matches either <code>undefined</code>, <code>null</code>, or <em>pattern</em>. If used in an object, matches only if the key is not set as opposed to the value being set to <code>undefined</code> or <code>null</code>. This set of conditions was chosen because <code>undefined</code> arguments to Meteor Methods are converted to <code>null</code> when sent over the wire.</p> <pre class=\"highlight js\" data-language=\"js\">// In an object\n\nvar pattern = { name: Match.Maybe(String) };\ncheck({ name: “something” }, pattern) // OK\n\ncheck({}, pattern) // OK\n\ncheck({ name: undefined }, pattern) // Throws an exception\n\ncheck({ name: null }, pattern) // Throws an exception\n\n\n// Outside an object\ncheck(null, Match.Maybe(String)); // OK\n\ncheck(undefined, Match.Maybe(String)); // OK\n</pre>\n</dd> <dt><span class=\"name\"><code>Match.Optional(<em>pattern</em>)</code></span></dt>\n<dd>\n<p>Behaves like <code>Match.Maybe</code> except it doesn’t accept <code>null</code>. If used in an object, the behavior is identical to <code>Match.Maybe</code>.</p> </dd> <dt><span class=\"name\"><code>Match.OneOf(<em>pattern1</em>, <em>pattern2</em>, ...)</code></span></dt>\n<dd>\n<p>Matches any value that matches at least one of the provided patterns.</p> </dd> <dt><span class=\"name\">Any constructor function (eg, <code>Date</code>)</span></dt>\n<dd>\n<p>Matches any element that is an instance of that type.</p> </dd> <dt><span class=\"name\"><code>Match.Where(<em>condition</em>)</code></span></dt>\n<dd>\n<p>Calls the function <em>condition</em> with the value as the argument. If <em>condition</em> returns true, this matches. If <em>condition</em> throws a <code>Match.Error</code> or returns false, this fails. If <em>condition</em> throws any other error, that error is thrown from the call to <code>check</code> or <code>Match.test</code>. Examples:</p> <pre class=\"highlight js\" data-language=\"js\">check(buffer, Match.Where(EJSON.isBinary));\n\nNonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length &gt; 0;\n});\ncheck(arg, NonEmptyString);</pre>\n</dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/check.html\" class=\"_attribution-link\">https://docs.meteor.com/api/check.html</a>\n  </p>\n</div>\n","api/connections":"<h1 class=\"title-page\">Server Connections</h1> <div class=\"subtitle-page\">Documentation on how to use Meteor's client-server connection.</div>    <p>These functions manage and inspect the network connection between the Meteor client and server.</p>  <h2 class=\"api-heading\" id=\"Meteor-status\"> <div class=\"locus\"> Client </div> <code>Meteor.status()</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-client/livedata_connection.js#L1058\" target=\"_blank\"> (ddp-client/livedata_connection.js, line 1058) </a> </div> </h2>   <p>Get the current connection status. A reactive data source.</p>    <p>This method returns the status of the connection between the client and the server. The return value is an object with the following fields:</p> <dl class=\"objdesc\"> <dt>\n<span class=\"name\">connected</span><span class=\"type\">Boolean</span>\n</dt>\n<dd>\n<p>True if currently connected to the server. If false, changes and method invocations will be queued up until the connection is reestablished.</p> </dd> <dt>\n<span class=\"name\">status</span><span class=\"type\">String</span>\n</dt>\n<dd>\n<p>Describes the current reconnection status. The possible values are <code>connected</code> (the connection is up and running), <code>connecting</code> (disconnected and trying to open a new connection), <code>failed</code> (permanently failed to connect; e.g., the client and server support different versions of DDP), <code>waiting</code> (failed to connect and waiting to try to reconnect) and <code>offline</code> (user has disconnected the connection).</p> </dd> <dt>\n<span class=\"name\">retryCount</span><span class=\"type\">Number</span>\n</dt>\n<dd>\n<p>The number of times the client has tried to reconnect since the connection was lost. 0 when connected.</p> </dd> <dt>\n<span class=\"name\">retryTime</span><span class=\"type\">Number or undefined</span>\n</dt>\n<dd>\n<p>The estimated time of the next reconnection attempt. To turn this into an interval until the next reconnection, use <code>retryTime - (new Date()).getTime()</code>. This key will be set only when <code>status</code> is <code>waiting</code>.</p> </dd> <dt>\n<span class=\"name\">reason</span><span class=\"type\">String or undefined</span>\n</dt>\n<dd>\n<p>If <code>status</code> is <code>failed</code>, a description of why the connection failed.</p> </dd> </dl> <p>Instead of using callbacks to notify you on changes, this is a <a href=\"#reactivity\">reactive</a> data source. You can use it in a <a href=\"#livehtmltemplates\">template</a> or <a href=\"#tracker_autorun\">computation</a> to get realtime updates.</p>  <h2 class=\"api-heading\" id=\"Meteor-reconnect\"> <div class=\"locus\"> Client </div> <code>Meteor.reconnect()</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-client/livedata_connection.js#L1071\" target=\"_blank\"> (ddp-client/livedata_connection.js, line 1071) </a> </div> </h2>   <p>Force an immediate reconnection attempt if the client is not connected to the server.</p> <p>This method does nothing if the client is already connected.</p>     <h2 class=\"api-heading\" id=\"Meteor-disconnect\"> <div class=\"locus\"> Client </div> <code>Meteor.disconnect()</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-client/livedata_connection.js#L1082\" target=\"_blank\"> (ddp-client/livedata_connection.js, line 1082) </a> </div> </h2>   <p>Disconnect the client from the server.</p>    <p>Call this method to disconnect from the server and stop all live data updates. While the client is disconnected it will not receive updates to collections, method calls will be queued until the connection is reestablished, and hot code push will be disabled.</p> <p>Call <a href=\"#meteor_reconnect\">Meteor.reconnect</a> to reestablish the connection and resume data transfer.</p> <p>This can be used to save battery on mobile devices when real time updates are not required.</p>  <h2 class=\"api-heading\" id=\"Meteor-onConnection\"> <div class=\"locus\"> Server </div> <code>Meteor.onConnection(callback)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1401\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1401) </a> </div> </h2>   <p>Register a callback to be called when a new DDP connection is made to the server.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to call when a new DDP connection is established.</p> </dd> </dl>   <p><code>onConnection</code> returns an object with a single method <code>stop</code>. Calling <code>stop</code> unregisters the callback, so that this callback will no longer be called on new connections.</p> <p>The callback is called with a single argument, the server-side <code>connection</code> representing the connection from the client. This object contains the following fields:</p> <dl class=\"objdesc\"> <dt>\n<span class=\"name\">id</span><span class=\"type\">String</span>\n</dt>\n<dd>\n<p>A globally unique id for this connection.</p> </dd> <dt>\n<span class=\"name\">close</span><span class=\"type\">Function</span>\n</dt>\n<dd>\n<p>Close this DDP connection. The client is free to reconnect, but will receive a different connection with a new <code>id</code> if it does.</p> </dd> <dt>\n<span class=\"name\">onClose</span><span class=\"type\">Function</span>\n</dt>\n<dd>\n<p>Register a callback to be called when the connection is closed. If the connection is already closed, the callback will be called immediately.</p> </dd> <dt>\n<span class=\"name\">clientAddress</span><span class=\"type\">String</span>\n</dt>\n<dd>\n<p>The IP address of the client in dotted form (such as <code>\"127.0.0.1\"</code>).</p> <p>If you’re running your Meteor server behind a proxy (so that clients are connecting to the proxy instead of to your server directly), you’ll need to set the <code>HTTP_FORWARDED_COUNT</code> environment variable for the correct IP address to be reported by <code>clientAddress</code>.</p> <p>Set <code>HTTP_FORWARDED_COUNT</code> to an integer representing the number of proxies in front of your server. For example, you’d set it to <code>\"1\"</code> when your server was behind one proxy.</p> </dd> <dt>\n<span class=\"name\">httpHeaders</span><span class=\"type\">Object</span>\n</dt>\n<dd>\n<p>When the connection came in over an HTTP transport (such as with Meteor’s default SockJS implementation), this field contains whitelisted HTTP headers.</p> <p>Cookies are deliberately excluded from the headers as they are a security risk for this transport. For details and alternatives, see the <a href=\"https://github.com/sockjs/sockjs-node#authorisation\" target=\"_blank\" rel=\"external\">SockJS documentation</a>.</p> </dd> </dl> <blockquote> <p>Currently when a client reconnects to the server (such as after temporarily losing its Internet connection), it will get a new connection each time. The <code>onConnection</code> callbacks will be called again, and the new connection will have a new connection <code>id</code>.</p> <p>In the future, when client reconnection is fully implemented, reconnecting from the client will reconnect to the same connection on the server: the <code>onConnection</code> callback won’t be called for that connection again, and the connection will still have the same connection <code>id</code>.</p> </blockquote>  <h2 class=\"api-heading\" id=\"DDP-connect\"> <div class=\"locus\"> Anywhere </div> <code>DDP.connect(url)</code> <div class=\"subtext-api\"> <code>import { DDP } from 'meteor/ddp-client'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-client/livedata_connection.js#L1750\" target=\"_blank\"> (ddp-client/livedata_connection.js, line 1750) </a> </div> </h2>   <p>Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>url</code> <span class=\"type\">String</span> </dt> <dd> <p>The URL of another Meteor application.</p> </dd> </dl>   <p>To call methods on another Meteor application or subscribe to its data sets, call <code>DDP.connect</code> with the URL of the application. <code>DDP.connect</code> returns an object which provides:</p> <ul> <li>\n<code>subscribe</code> - Subscribe to a record set. See <a href=\"#meteor_subscribe\">Meteor.subscribe</a>.</li> <li>\n<code>call</code> - Invoke a method. See <a href=\"#meteor_call\">Meteor.call</a>.</li> <li>\n<code>apply</code> - Invoke a method with an argument array. See <a href=\"#meteor_apply\">Meteor.apply</a>.</li> <li>\n<code>methods</code> - Define client-only stubs for methods defined on the remote server. See <a href=\"#meteor_methods\">Meteor.methods</a>.</li> <li>\n<code>status</code> - Get the current connection status. See <a href=\"#meteor_status\">Meteor.status</a>.</li> <li>\n<code>reconnect</code> - See <a href=\"#meteor_reconnect\">Meteor.reconnect</a>.</li> <li>\n<code>disconnect</code> - See <a href=\"#meteor_disconnect\">Meteor.disconnect</a>.</li> <li>\n<code>onReconnect</code> - Set this to a function to be called as the first step of reconnecting. This function can call methods which will be executed before any other outstanding methods. For example, this can be used to re-establish the appropriate authentication context on the new connection.</li> </ul> <p>By default, clients open a connection to the server from which they’re loaded. When you call <code>Meteor.subscribe</code>, <code>Meteor.status</code>, <code>Meteor.call</code>, and <code>Meteor.apply</code>, you are using a connection back to that default server.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/connections.html\" class=\"_attribution-link\">https://docs.meteor.com/api/connections.html</a>\n  </p>\n</div>\n","api/pubsub":"<h1 class=\"title-page\">Publish and subscribe</h1> <div class=\"subtitle-page\">Documentation of Meteor's publication and subscription API.</div>    <p>These functions control how Meteor servers publish sets of records and how clients can subscribe to those sets.</p>  <h2 class=\"api-heading\" id=\"Meteor-publish\"> <div class=\"locus\"> Server </div> <code>Meteor.publish(name, func)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1476\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1476) </a> </div> </h2>   <p>Publish a record set.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>Name of the record set. If <code>null</code>, the set has no name, and the record set is automatically sent to all connected clients.</p> </dd> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>Function called on the server each time a client subscribes. Inside the function, <code>this</code> is the publish handler object, described below. If the client passed arguments to <code>subscribe</code>, the function is called with the same arguments.</p> </dd> </dl>   <p>To publish records to clients, call <code>Meteor.publish</code> on the server with two parameters: the name of the record set, and a <em>publish function</em> that Meteor will call each time a client subscribes to the name.</p> <p>Publish functions can return a <a href=\"#mongo_cursor\"><code>Collection.Cursor</code></a>, in which case Meteor will publish that cursor’s documents to each subscribed client. You can also return an array of <code>Collection.Cursor</code>s, in which case Meteor will publish all of the cursors.</p> <blockquote class=\"pullquote warning\">\n<p>If you return multiple cursors in an array, they currently must all be from different collections. We hope to lift this restriction in a future release.</p> </blockquote> <p>A client will see a document if the document is currently in the published record set of any of its subscriptions. If multiple publications publish a document with the same <code>_id</code> to the same collection the documents will be merged for the client. If the values of any of the top level fields conflict, the resulting value will be one of the published values, chosen arbitrarily.</p> <pre class=\"highlight js\" data-language=\"js\">// server: publish the rooms collection, minus secret info...\nMeteor.publish(\"rooms\", function () {\n  return Rooms.find({}, {fields: {secretInfo: 0}});\n});\n\n// ... and publish secret info for rooms where the logged-in user\n// is an admin. If the client subscribes to both streams, the records\n// are merged together into the same documents in the Rooms collection.\n// Note that currently object values are not recursively merged, so the\n// fields that differ must be top level fields.\nMeteor.publish(\"adminSecretInfo\", function () {\n  return Rooms.find({admin: this.userId}, {fields: {secretInfo: 1}});\n});\n\n// publish dependent documents and simulate joins\nMeteor.publish(\"roomAndMessages\", function (roomId) {\n  check(roomId, String);\n  return [\n    Rooms.find({_id: roomId}, {fields: {secretInfo: 0}}),\n    Messages.find({roomId: roomId})\n  ];\n});</pre> <p>Alternatively, a publish function can directly control its published record set by calling the functions <a href=\"#publish_added\"><code>added</code></a> (to add a new document to the published record set), <a href=\"#publish_changed\"><code>changed</code></a> (to change or clear some fields on a document already in the published record set), and <a href=\"#publish_removed\"><code>removed</code></a> (to remove documents from the published record set). These methods are provided by <code>this</code> in your publish function.</p> <p>If a publish function does not return a cursor or array of cursors, it is assumed to be using the low-level <code>added</code>/<code>changed</code>/<code>removed</code> interface, and it <strong>must also call <a href=\"#publish_ready\"><code>ready</code></a> once the initial record set is complete</strong>.</p> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">// server: publish the current size of a collection\nMeteor.publish(\"counts-by-room\", function (roomId) {\n  var self = this;\n  check(roomId, String);\n  var count = 0;\n  var initializing = true;\n\n  // observeChanges only returns after the initial `added` callbacks\n\n  // have run. Until then, we don't want to send a lot of\n\n  // `self.changed()` messages - hence tracking the\n\n  // `initializing` state.\n\n  var handle = Messages.find({roomId: roomId}).observeChanges({\n    added: function (id) {\n      count++;\n      if (!initializing)\n        self.changed(\"counts\", roomId, {count: count});\n    },\n    removed: function (id) {\n      count--;\n      self.changed(\"counts\", roomId, {count: count});\n    }\n    // don't care about changed\n\n  });\n\n  // Instead, we'll send one `self.added()` message right after\n\n  // observeChanges has returned, and mark the subscription as\n\n  // ready.\n\n  initializing = false;\n  self.added(\"counts\", roomId, {count: count});\n  self.ready();\n\n  // Stop observing the cursor when client unsubs.\n\n  // Stopping a subscription automatically takes\n\n  // care of sending the client any removed messages.\n\n  self.onStop(function () {\n    handle.stop();\n  });\n});\n\n// client: declare collection to hold count object\nCounts = new Mongo.Collection(\"counts\");\n\n// client: subscribe to the count for the current room\nTracker.autorun(function () {\n  Meteor.subscribe(\"counts-by-room\", Session.get(\"roomId\"));\n});\n\n// client: use the new collection\n\nconsole.log(\"Current room has \" +\n            Counts.findOne(Session.get(\"roomId\")).count +\n            \" messages.\");\n\n// server: sometimes publish a query, sometimes publish nothing\nMeteor.publish(\"secretData\", function () {\n  if (this.userId === 'superuser') {\n    return SecretData.find();\n  } else {\n    // Declare that no data is being published. If you leave this line\n\n    // out, Meteor will never consider the subscription ready because\n\n    // it thinks you're using the added/changed/removed interface where\n\n    // you have to explicitly call this.ready().\n\n    return [];\n  }\n});</pre> <blockquote class=\"pullquote warning\">\n<p>Meteor will emit a warning message if you call <code>Meteor.publish</code> in a project that includes the <code>autopublish</code> package. Your publish function will still work.</p> </blockquote> <p>Read more about publications and how to use them in the [Data Loading] (<a href=\"http://guide.meteor.com/data-loading.html\" target=\"_blank\" rel=\"external\">http://guide.meteor.com/data-loading.html</a>) article in the Meteor Guide.</p>  <h3 class=\"api-heading\" id=\"Subscription-userId\"> <div class=\"locus\"> Server </div> <code>this.userId</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L988\" target=\"_blank\"> (ddp-server/livedata_server.js, line 988) </a> </div> </h3>   <p>Access inside the publish function. The id of the logged-in user, or <code>null</code> if no user is logged in.</p>    <p>This is constant. However, if the logged-in user changes, the publish function is rerun with the new value.</p>  <h3 class=\"api-heading\" id=\"Subscription-added\"> <div class=\"locus\"> Server </div> <code>this.added(collection, id, fields)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1230\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1230) </a> </div> </h3>   <p>Call inside the publish function. Informs the subscriber that a document has been added to the record set.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>collection</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the collection that contains the new document.</p> </dd> <dt> <code>id</code> <span class=\"type\">String</span> </dt> <dd> <p>The new document's ID.</p> </dd> <dt> <code>fields</code> <span class=\"type\">Object</span> </dt> <dd> <p>The fields in the new document. If <code>_id</code> is present it is ignored.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"Subscription-changed\"> <div class=\"locus\"> Server </div> <code>this.changed(collection, id, fields)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1248\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1248) </a> </div> </h3>   <p>Call inside the publish function. Informs the subscriber that a document in the record set has been modified.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>collection</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the collection that contains the changed document.</p> </dd> <dt> <code>id</code> <span class=\"type\">String</span> </dt> <dd> <p>The changed document's ID.</p> </dd> <dt> <code>fields</code> <span class=\"type\">Object</span> </dt> <dd> <p>The fields in the document that have changed, together with their new values. If a field is not present in <code>fields</code> it was left unchanged; if it is present in <code>fields</code> and has a value of <code>undefined</code> it was removed from the document. If <code>_id</code> is present it is ignored.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"Subscription-removed\"> <div class=\"locus\"> Server </div> <code>this.removed(collection, id)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1264\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1264) </a> </div> </h3>   <p>Call inside the publish function. Informs the subscriber that a document has been removed from the record set.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>collection</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the collection that the document has been removed from.</p> </dd> <dt> <code>id</code> <span class=\"type\">String</span> </dt> <dd> <p>The ID of the document that has been removed.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"Subscription-ready\"> <div class=\"locus\"> Server </div> <code>this.ready()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1281\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1281) </a> </div> </h3>   <p>Call inside the publish function. Informs the subscriber that an initial, complete snapshot of the record set has been sent. This will trigger a call on the client to the <code>onReady</code> callback passed to <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>, if any.</p>     <h3 class=\"api-heading\" id=\"Subscription-onStop\"> <div class=\"locus\"> Server </div> <code>this.onStop(func)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1205\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1205) </a> </div> </h3>   <p>Call inside the publish function. Registers a callback function to run when the subscription is stopped.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>The callback function</p> </dd> </dl>   <p>If you call <a href=\"#observe\"><code>observe</code></a> or <a href=\"#observe_changes\"><code>observeChanges</code></a> in your publish handler, this is the place to stop the observes.</p>  <h3 class=\"api-heading\" id=\"Subscription-error\"> <div class=\"locus\"> Server </div> <code>this.error(error)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1173\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1173) </a> </div> </h3>   <p>Call inside the publish function. Stops this client's subscription, triggering a call on the client to the <code>onStop</code> callback passed to <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>, if any. If <code>error</code> is not a <a href=\"#meteor_error\"><code>Meteor.Error</code></a>, it will be <a href=\"#meteor_error\">sanitized</a>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>error</code> <span class=\"type\">Error</span> </dt> <dd> <p>The error to pass to the client.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"Subscription-stop\"> <div class=\"locus\"> Server </div> <code>this.stop()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1191\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1191) </a> </div> </h3>   <p>Call inside the publish function. Stops this client's subscription and invokes the client's <code>onStop</code> callback with no error.</p>     <h3 class=\"api-heading\" id=\"Subscription-connection\"> <div class=\"locus\"> Server </div> <code>this.connection</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L946\" target=\"_blank\"> (ddp-server/livedata_server.js, line 946) </a> </div> </h3>   <p>Access inside the publish function. The incoming <a href=\"#meteor_onconnection\">connection</a> for this subscription.</p>     <h2 class=\"api-heading\" id=\"Meteor-subscribe\"> <div class=\"locus\"> Client </div> <code>Meteor.subscribe(name, [arg1, arg2...], [callbacks])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-client/livedata_connection.js#L537\" target=\"_blank\"> (ddp-client/livedata_connection.js, line 537) </a> </div> </h2>   <p>Subscribe to a record set. Returns a handle that provides <code>stop()</code> and <code>ready()</code> methods.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>Name of the subscription. Matches the name of the server's <code>publish()</code> call.</p> </dd> <dt> <code>arg1, arg2...</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a></span> </dt> <dd> <p>Optional arguments passed to publisher function on server.</p> </dd> <dt> <code>callbacks</code> <span class=\"type\">Function or Object</span> </dt> <dd> <p>Optional. May include <code>onStop</code> and <code>onReady</code> callbacks. If there is an error, it is passed as an argument to <code>onStop</code>. If a function is passed instead of an object, it is interpreted as an <code>onReady</code> callback.</p> </dd> </dl>   <p>When you subscribe to a record set, it tells the server to send records to the client. The client stores these records in local <a href=\"#mongo_collection\">Minimongo collections</a>, with the same name as the <code>collection</code> argument used in the publish handler’s <a href=\"#publish_added\"><code>added</code></a>, <a href=\"#publish_changed\"><code>changed</code></a>, and <a href=\"#publish_removed\"><code>removed</code></a> callbacks. Meteor will queue incoming records until you declare the <a href=\"#mongo_collection\"><code>Mongo.Collection</code></a> on the client with the matching collection name.</p> <pre class=\"highlight js\" data-language=\"js\">// okay to subscribe (and possibly receive data) before declaring\n// the client collection that will hold it.  assume \"allplayers\"\n// publishes data from server's \"players\" collection.\nMeteor.subscribe(\"allplayers\");\n...\n// client queues incoming players records until ...\n...\nPlayers = new Mongo.Collection(\"players\");</pre> <p>The client will see a document if the document is currently in the published record set of any of its subscriptions. If multiple publications publish a document with the same <code>_id</code> for the same collection the documents are merged for the client. If the values of any of the top level fields conflict, the resulting value will be one of the published values, chosen arbitrarily.</p> <blockquote class=\"pullquote warning\">\n<p>Currently, when multiple subscriptions publish the same document <em>only the top level fields</em> are compared during the merge. This means that if the documents include different sub-fields of the same top level field, not all of them will be available on the client. We hope to lift this restriction in a future release.</p> </blockquote> <p>The <code>onReady</code> callback is called with no arguments when the server <a href=\"#publish_ready\">marks the subscription as ready</a>. The <code>onStop</code> callback is called with a <a href=\"#meteor_error\"><code>Meteor.Error</code></a> if the subscription fails or is terminated by the server. If the subscription is stopped by calling <code>stop</code> on the subscription handle or inside the publication, <code>onStop</code> is called with no arguments.</p> <p><code>Meteor.subscribe</code> returns a subscription handle, which is an object with the following properties:</p> <dl class=\"callbacks\"> <dt><span class=\"name\">stop()</span></dt>\n<dd>\n<p>Cancel the subscription. This will typically result in the server directing the client to remove the subscription’s data from the client’s cache.</p> </dd> <dt><span class=\"name\">ready()</span></dt>\n<dd>\n<p>True if the server has <a href=\"#publish_ready\">marked the subscription as ready</a>. A reactive data source.</p> </dd> <dt><span class=\"name\">subscriptionId</span></dt>\n<dd>\n<p>The <code>id</code> of the subscription this handle is for. When you run <code>Meteor.subscribe</code> inside of <code>Tracker.autorun</code>, the handles you get will always have the same <code>subscriptionId</code> field. You can use this to deduplicate subscription handles if you are storing them in some data structure.</p> </dd> </dl> <p>If you call <code>Meteor.subscribe</code> within a <a href=\"#reactivity\">reactive computation</a>, for example using <a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a>, the subscription will automatically be cancelled when the computation is invalidated or stopped; it is not necessary to call <code>stop</code> on subscriptions made from inside <code>autorun</code>. However, if the next iteration of your run function subscribes to the same record set (same name and parameters), Meteor is smart enough to skip a wasteful unsubscribe/resubscribe. For example:</p> <pre class=\"highlight js\" data-language=\"js\">Tracker.autorun(function () {\n  Meteor.subscribe(\"chat\", {room: Session.get(\"current-room\")});\n  Meteor.subscribe(\"privateMessages\");\n});</pre> <p>This subscribes you to the chat messages in the current room and to your private messages. When you change rooms by calling <code>Session.set(\"current-room\",\n\"new-room\")</code>, Meteor will subscribe to the new room’s chat messages, unsubscribe from the original room’s chat messages, and continue to stay subscribed to your private messages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/pubsub.html\" class=\"_attribution-link\">https://docs.meteor.com/api/pubsub.html</a>\n  </p>\n</div>\n","api/methods":"<h1 class=\"title-page\">Methods</h1> <div class=\"subtitle-page\">Documentation of Meteor's Method (Remote Procedure Call) API.</div>    <p>Methods are remote functions that Meteor clients can invoke.</p>  <h2 class=\"api-heading\" id=\"Meteor-methods\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.methods(methods)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-server/livedata_server.js#L1542\" target=\"_blank\"> (ddp-server/livedata_server.js, line 1542) </a> </div> </h2>   <p>Defines functions that can be invoked over the network by clients.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>methods</code> <span class=\"type\">Object</span> </dt> <dd> <p>Dictionary whose keys are method names and values are functions.</p> </dd> </dl>   <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.methods({\n  foo: function (arg1, arg2) {\n    check(arg1, String);\n    check(arg2, [Number]);\n\n    // .. do stuff ..\n\n\n    if (/* you want to throw an error */) {\n      throw new Meteor.Error(\"pants-not-found\", \"Can't find my pants\");\n    }\n\n    return \"some return value\";\n  },\n\n  bar: function () {\n    // .. do other stuff ..\n\n    return \"baz\";\n  }\n});</pre> <p>Calling <code>methods</code> on the server defines functions that can be called remotely by clients. They should return an <a href=\"#ejson\">EJSON</a>-able value or throw an exception. Inside your method invocation, <code>this</code> is bound to a method invocation object, which provides the following:</p> <ul> <li>\n<code>isSimulation</code>: a boolean value, true if this invocation is a stub.</li> <li>\n<code>unblock</code>: when called, allows the next method from this client to begin running.</li> <li>\n<code>userId</code>: the id of the current user.</li> <li>\n<code>setUserId</code>: a function that associates the current client with a user.</li> <li>\n<code>connection</code>: on the server, the <a href=\"#meteor_onconnection\">connection</a> this method call was received on.</li> </ul> <p>Calling <code>methods</code> on the client defines <em>stub</em> functions associated with server methods of the same name. You don’t have to define a stub for your method if you don’t want to. In that case, method calls are just like remote procedure calls in other systems, and you’ll have to wait for the results from the server.</p> <p>If you do define a stub, when a client invokes a server method it will also run its stub in parallel. On the client, the return value of a stub is ignored. Stubs are run for their side-effects: they are intended to <em>simulate</em> the result of what the server’s method will do, but without waiting for the round trip delay. If a stub throws an exception it will be logged to the console.</p> <p>You use methods all the time, because the database mutators (<a href=\"#insert\"><code>insert</code></a>, <a href=\"#update\"><code>update</code></a>, <a href=\"#remove\"><code>remove</code></a>) are implemented as methods. When you call any of these functions on the client, you’re invoking their stub version that update the local cache, and sending the same write request to the server. When the server responds, the client updates the local cache with the writes that actually occurred on the server.</p> <p>You don’t have to put all your method definitions into a single <code>Meteor.methods</code> call; you may call it multiple times, as long as each method has a unique name.</p> <p>If a client calls a method and is disconnected before it receives a response, it will re-call the method when it reconnects. This means that a client may call a method multiple times when it only means to call it once. If this behavior is problematic for your method, consider attaching a unique ID to each method call on the client, and checking on the server whether a call with this ID has already been made. Alternatively, you can use <a href=\"#meteor_apply\"><code>Meteor.apply</code></a> with the noRetry option set to true.</p> <p>Read more about methods and how to use them in the <a href=\"http://guide.meteor.com/methods.html\" target=\"_blank\" rel=\"external\">Methods</a> article in the Meteor Guide.</p>  <h3 class=\"api-heading\" id=\"DDPCommon-MethodInvocation-userId\"> <div class=\"locus\"> Anywhere </div> <code>this.userId</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-common/method_invocation.js#L38\" target=\"_blank\"> (ddp-common/method_invocation.js, line 38) </a> </div> </h3>   <p>The id of the user that made this method call, or <code>null</code> if no user was logged in.</p>    <p>The user id is an arbitrary string — typically the id of the user record in the database. You can set it with the <code>setUserId</code> function. If you’re using the <a href=\"#accounts_api\">Meteor accounts system</a> then this is handled for you.</p>  <h3 class=\"api-heading\" id=\"DDPCommon-MethodInvocation-setUserId\"> <div class=\"locus\"> Server </div> <code>this.setUserId(userId)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-common/method_invocation.js#L89\" target=\"_blank\"> (ddp-common/method_invocation.js, line 89) </a> </div> </h3>   <p>Set the logged in user.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>userId</code> <span class=\"type\">String or null</span> </dt> <dd> <p>The value that should be returned by <code>userId</code> on this connection.</p> </dd> </dl>   <p>Call this function to change the currently logged-in user on the connection that made this method call. This simply sets the value of <code>userId</code> for future method calls received on this connection. Pass <code>null</code> to log out the connection.</p> <p>If you are using the <a href=\"#accounts_api\">built-in Meteor accounts system</a> then this should correspond to the <code>_id</code> field of a document in the <a href=\"#meteor_users\"><code>Meteor.users</code></a> collection.</p> <p><code>setUserId</code> is not retroactive. It affects the current method call and any future method calls on the connection. Any previous method calls on this connection will still see the value of <code>userId</code> that was in effect when they started.</p> <p>If you also want to change the logged-in user on the client, then after calling <code>setUserId</code> on the server, call <code>Meteor.connection.setUserId(userId)</code> on the client.</p>  <h3 class=\"api-heading\" id=\"DDPCommon-MethodInvocation-isSimulation\"> <div class=\"locus\"> Anywhere </div> <code>this.isSimulation</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-common/method_invocation.js#L20\" target=\"_blank\"> (ddp-common/method_invocation.js, line 20) </a> </div> </h3>   <p>Access inside a method invocation. Boolean value, true if this invocation is a stub.</p>     <h3 class=\"api-heading\" id=\"DDPCommon-MethodInvocation-unblock\"> <div class=\"locus\"> Server </div> <code>this.unblock()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-common/method_invocation.js#L76\" target=\"_blank\"> (ddp-common/method_invocation.js, line 76) </a> </div> </h3>   <p>Call inside a method invocation. Allow subsequent method from this client to begin running in a new fiber.</p>    <p>On the server, methods from a given client run one at a time. The N+1th invocation from a client won’t start until the Nth invocation returns. However, you can change this by calling <code>this.unblock</code>. This will allow the N+1th invocation to start running in a new fiber.</p>  <h3 class=\"api-heading\" id=\"DDPCommon-MethodInvocation-connection\"> <div class=\"locus\"> Server </div> <code>this.connection</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-common/method_invocation.js#L53\" target=\"_blank\"> (ddp-common/method_invocation.js, line 53) </a> </div> </h3>   <p>Access inside a method invocation. The <a href=\"#meteor_onconnection\">connection</a> that this method was received on. <code>null</code> if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same <code>connection</code>.</p>     <h2 class=\"api-heading\" id=\"Meteor-Error\"> <div class=\"locus\"> Anywhere </div> <code>new Meteor.Error(error, [reason], [details])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/errors.js#L71\" target=\"_blank\"> (meteor/errors.js, line 71) </a> </div> </h2>   <p>This class represents a symbolic error thrown by a method.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>error</code> <span class=\"type\">String</span> </dt> <dd> <p>A string code uniquely identifying this kind of error. This string should be used by callers of the method to determine the appropriate action to take, instead of attempting to parse the reason or details fields. For example:</p> <pre class=\"prettyprint source\" data-language=\"js\">// on the server, pick a code unique to this error\n// the reason field should be a useful debug message\nthrow new Meteor.Error(\"logged-out\", \n  \"The user must be logged in to post a comment.\");\n\n// on the client\nMeteor.call(\"methodName\", function (error) {\n  // identify the error\n  if (error &amp;&amp; error.error === \"logged-out\") {\n    // show a nice error message\n    Session.set(\"errorMessage\", \"Please log in to post a comment.\");\n  }\n});</pre>\n<p>For legacy reasons, some built-in Meteor functions such as <code>check</code> throw errors with a number in this field.</p> </dd> <dt> <code>reason</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. A short human-readable summary of the error, like 'Not Found'.</p> </dd> <dt> <code>details</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. Additional information about the error, like a textual stack trace.</p> </dd> </dl>   <p>If you want to return an error from a method, throw an exception. Methods can throw any kind of exception. But <code>Meteor.Error</code> is the only kind of error that a server will send to the client. If a method function throws a different exception, then it will be mapped to a sanitized version on the wire. Specifically, if the <code>sanitizedError</code> field on the thrown error is set to a <code>Meteor.Error</code>, then that error will be sent to the client. Otherwise, if no sanitized version is available, the client gets <code>Meteor.Error(500, 'Internal server error')</code>.</p>  <h2 class=\"api-heading\" id=\"Meteor-call\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.call(name, [arg1, arg2...], [asyncCallback])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-client/livedata_connection.js#L723\" target=\"_blank\"> (ddp-client/livedata_connection.js, line 723) </a> </div> </h2>   <p>Invokes a method passing any number of arguments.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>Name of method to invoke</p> </dd> <dt> <code>arg1, arg2...</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a></span> </dt> <dd> <p>Optional method arguments</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).</p> </dd> </dl>   <p>This is how to invoke a method. It will run the method on the server. If a stub is available, it will also run the stub on the client. (See also <a href=\"#meteor_apply\"><code>Meteor.apply</code></a>, which is identical to <code>Meteor.call</code> except that you specify the parameters as an array instead of as separate arguments and you can specify a few options controlling how the method is executed.)</p> <p>If you include a callback function as the last argument (which can’t be an argument to the method, since functions aren’t serializable), the method will run asynchronously: it will return nothing in particular and will not throw an exception. When the method is complete (which may or may not happen before <code>Meteor.call</code> returns), the callback will be called with two arguments: <code>error</code> and <code>result</code>. If an error was thrown, then <code>error</code> will be the exception object. Otherwise, <code>error</code> will be undefined and the return value (possibly undefined) will be in <code>result</code>.</p> <pre><code>// async call\nMeteor.call('foo', 1, 2, function (error, result) { ... } );\n</code></pre>\n<p>If you do not pass a callback on the server, the method invocation will block until the method is complete. It will eventually return the return value of the method, or it will throw an exception if the method threw an exception. (Possibly mapped to 500 Server Error if the exception happened remotely and it was not a <code>Meteor.Error</code> exception.)</p> <pre><code>// sync call\nvar result = Meteor.call('foo', 1, 2);\n</code></pre>\n<p>On the client, if you do not pass a callback and you are not inside a stub, <code>call</code> will return <code>undefined</code>, and you will have no way to get the return value of the method. That is because the client doesn’t have fibers, so there is not actually any way it can block on the remote execution of a method.</p> <p>Finally, if you are inside a stub on the client and call another method, the other method is not executed (no RPC is generated, nothing “real” happens). If that other method has a stub, that stub stands in for the method and is executed. The method call’s return value is the return value of the stub function. The client has no problem executing a stub synchronously, and that is why it’s okay for the client to use the synchronous <code>Meteor.call</code> form from inside a method body, as described earlier.</p> <p>Meteor tracks the database writes performed by methods, both on the client and the server, and does not invoke <code>asyncCallback</code> until all of the server’s writes replace the stub’s writes in the local cache. In some cases, there can be a lag between the method’s return value being available and the writes being visible: for example, if another method still outstanding wrote to the same document, the local cache may not be up to date until the other method finishes as well. If you want to process the method’s result as soon as it arrives from the server, even if the method’s writes are not available yet, you can specify an <code>onResultReceived</code> callback to <a href=\"#meteor_apply\"><code>Meteor.apply</code></a>.</p>  <h2 class=\"api-heading\" id=\"Meteor-apply\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.apply(name, args, [options], [asyncCallback])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-client/livedata_connection.js#L766\" target=\"_blank\"> (ddp-client/livedata_connection.js, line 766) </a> </div> </h2>   <p>Invoke a method passing an array of arguments.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>Name of method to invoke</p> </dd> <dt> <code>args</code> <span class=\"type\">Array of <a href=\"#ejson\">EJSON-able Object</a>s</span> </dt> <dd> <p>Method arguments</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback; same semantics as in <a href=\"#meteor_call\"><code>Meteor.call</code></a>.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>wait</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>(Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.</p> </dd> <dt> <code>onResultReceived</code> <span class=\"type\">Function</span> </dt> <dd> <p>(Client only) This callback is invoked with the error or result of the method (just like <code>asyncCallback</code>) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.</p> </dd> <dt> <code>noRetry</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>(Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.</p> </dd> </dl>   <p><code>Meteor.apply</code> is just like <code>Meteor.call</code>, except that the method arguments are passed as an array rather than directly as arguments, and you can specify options about how the client executes the method.</p> <h2 id=\"ddpratelimiter\"><span>DDPRateLimiter</span></h2> <p>Customize rate limiting for methods and subscriptions.</p> <p>By default, <code>DDPRateLimiter</code> is configured with a single rule. This rule limits login attempts, new user creation, and password resets to 5 attempts every 10 seconds per connection. It can be removed by calling <code>Accounts.removeDefaultRateLimit()</code>.</p> <p>To use <code>DDPRateLimiter</code> for modifying the default rate-limiting rules, add the <code>ddp-rate-limiter</code> package to your project in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add ddp-rate-limiter</pre>  <h3 class=\"api-heading\" id=\"DDPRateLimiter-addRule\"> <div class=\"locus\"> Server </div> <code>DDPRateLimiter.addRule(matcher, numRequests, timeInterval)</code> <div class=\"subtext-api\"> <code>import { DDPRateLimiter } from 'meteor/ddp-rate-limiter'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-rate-limiter/ddp-rate-limiter.js#L69\" target=\"_blank\"> (ddp-rate-limiter/ddp-rate-limiter.js, line 69) </a> </div> </h3>   <p>Add a rule that matches against a stream of events describing method or subscription attempts. Each event is an object with the following properties:</p> <ul> <li>\n<code>type</code>: Either \"method\" or \"subscription\"</li> <li>\n<code>name</code>: The name of the method or subscription being called</li> <li>\n<code>userId</code>: The user ID attempting the method or subscription</li> <li>\n<code>connectionId</code>: A string representing the user's DDP connection</li> <li>\n<code>clientAddress</code>: The IP address of the user</li> </ul> <p>Returns unique <code>ruleId</code> that can be passed to <code>removeRule</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>matcher</code> <span class=\"type\">Object</span> </dt> <dd> <p>Matchers specify which events are counted towards a rate limit. A matcher is an object that has a subset of the same properties as the event objects described above. Each value in a matcher object is one of the following:</p> <ul> <li>\n<p>a string: for the event to satisfy the matcher, this value must be equal to the value of the same property in the event object</p> </li> <li>\n<p>a function: for the event to satisfy the matcher, the function must evaluate to true when passed the value of the same property in the event object</p> </li> </ul> <p>Here's how events are counted: Each event that satisfies the matcher's filter is mapped to a bucket. Buckets are uniquely determined by the event object's values for all properties present in both the matcher and event objects.</p> </dd> <dt> <code>numRequests</code> <span class=\"type\">number</span> </dt> <dd> <p>number of requests allowed per time interval. Default = 10.</p> </dd> <dt> <code>timeInterval</code> <span class=\"type\">number</span> </dt> <dd> <p>time interval in milliseconds after which rule's counters are reset. Default = 1000.</p> </dd> </dl>   <p>Custom rules can be added by calling <code>DDPRateLimiter.addRule</code>. The rate limiter is called on every method and subscription invocation.</p> <p>A rate limit is reached when a bucket has surpassed the rule’s predefined capactiy, at which point errors will be returned for that input until the buckets are reset. Buckets are regularly reset after the end of a time interval.</p> <p>Here’s example of defining a rule and adding it into the <code>DDPRateLimiter</code>: <pre class=\"highlight javascript\" data-language=\"javascript\">// Define a rule that matches login attempts by non-admin users\n\nvar loginRule = {\n  userId: function (userId) {\n    return Meteor.users.findOne(userId).type !== 'Admin';\n  },\n  type: 'method',\n  name: 'login'\n\n}\n// Add the rule, allowing up to 5 messages every 1000 milliseconds.\nDDPRateLimiter.addRule(loginRule, 5, 1000);</pre></p>  <h3 class=\"api-heading\" id=\"DDPRateLimiter-removeRule\"> <div class=\"locus\"> Server </div> <code>DDPRateLimiter.removeRule(id)</code> <div class=\"subtext-api\"> <code>import { DDPRateLimiter } from 'meteor/ddp-rate-limiter'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-rate-limiter/ddp-rate-limiter.js#L84\" target=\"_blank\"> (ddp-rate-limiter/ddp-rate-limiter.js, line 84) </a> </div> </h3>   <p>Removes the specified rule from the rate limiter. If rule had hit a rate limit, that limit is removed as well.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>id</code> <span class=\"type\">string</span> </dt> <dd> <p>'ruleId' returned from <code>addRule</code></p> </dd> </dl>    <h3 class=\"api-heading\" id=\"DDPRateLimiter-setErrorMessage\"> <div class=\"locus\"> Server </div> <code>DDPRateLimiter.setErrorMessage(message)</code> <div class=\"subtext-api\"> <code>import { DDPRateLimiter } from 'meteor/ddp-rate-limiter'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ddp-rate-limiter/ddp-rate-limiter.js#L28\" target=\"_blank\"> (ddp-rate-limiter/ddp-rate-limiter.js, line 28) </a> </div> </h3>   <p>Set error message text when method or subscription rate limit exceeded.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>message</code> <span class=\"type\">string or Function</span> </dt> <dd> <p>Functions are passed in an object with a <code>timeToReset</code> field that specifies the number of milliseconds until the next method or subscription is allowed to run. The function must return a string of the error message.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/methods.html\" class=\"_attribution-link\">https://docs.meteor.com/api/methods.html</a>\n  </p>\n</div>\n","api/collections":"<h1 class=\"title-page\">Collections</h1> <div class=\"subtitle-page\">Documentation on how to use Meteor's database collections.</div>    <p>Meteor stores data in <em>collections</em>. To get started, declare a collection with <code>new Mongo.Collection</code>.</p>  <h2 class=\"api-heading\" id=\"Mongo-Collection\"> <div class=\"locus\"> Anywhere </div> <code>new Mongo.Collection(name, [options])</code> <div class=\"subtext-api\"> <code>import { Mongo } from 'meteor/mongo'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L27\" target=\"_blank\"> (mongo/collection.js, line 27) </a> </div> </h2>   <p>Constructor for a Collection</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the collection. If null, creates an unmanaged (unsynchronized) local collection.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>connection</code> <span class=\"type\">Object</span> </dt> <dd> <p>The server connection that will manage this collection. Uses the default connection if not specified. Pass the return value of calling <a href=\"#ddp_connect\"><code>DDP.connect</code></a> to specify a different server. Pass <code>null</code> to specify no connection. Unmanaged (<code>name</code> is null) collections cannot specify a connection.</p> </dd> <dt> <code>idGeneration</code> <span class=\"type\">String</span> </dt> <dd> <p>The method of generating the <code>_id</code> fields of new documents in this collection. Possible values:</p> <ul> <li>\n<strong><code>'STRING'</code></strong>: random strings</li> <li>\n<strong><code>'MONGO'</code></strong>: random <a href=\"#mongo_object_id\"><code>Mongo.ObjectID</code></a> values</li> </ul> <p>The default id generation technique is <code>'STRING'</code>.</p> </dd> <dt> <code>transform</code> <span class=\"type\">Function</span> </dt> <dd> <p>An optional transformation function. Documents will be passed through this function before being returned from <code>fetch</code> or <code>findOne</code>, and before being passed to callbacks of <code>observe</code>, <code>map</code>, <code>forEach</code>, <code>allow</code>, and <code>deny</code>. Transforms are <em>not</em> applied for the callbacks of <code>observeChanges</code> or to cursors returned from publish functions.</p> </dd> <dt> <code>defineMutationMethods</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>Set to <code>false</code> to skip setting up the mutation methods that enable insert/update/remove from client code. Default <code>true</code>.</p> </dd> </dl>   <p>Calling this function is analogous to declaring a model in a traditional ORM (Object-Relation Mapper)-centric framework. It sets up a <em>collection</em> (a storage space for records, or “documents”) that can be used to store a particular type of information, like users, posts, scores, todo items, or whatever matters to your application. Each document is a EJSON object. It includes an <code>_id</code> property whose value is unique in the collection, which Meteor will set when you first create the document.</p> <pre class=\"highlight js\" data-language=\"js\">// common code on client and server declares a DDP-managed mongo\n// collection.\nChatrooms = new Mongo.Collection(\"chatrooms\");\nMessages = new Mongo.Collection(\"messages\");</pre> <p>The function returns an object with methods to <a href=\"#insert\"><code>insert</code></a> documents in the collection, <a href=\"#update\"><code>update</code></a> their properties, and <a href=\"#remove\"><code>remove</code></a> them, and to <a href=\"#find\"><code>find</code></a> the documents in the collection that match arbitrary criteria. The way these methods work is compatible with the popular Mongo database API. The same database API works on both the client and the server (see below).</p> <pre class=\"highlight js\" data-language=\"js\">// return array of my messages\n\nvar myMessages = Messages.find({userId: Session.get('myUserId')}).fetch();\n\n// create a new message\nMessages.insert({text: \"Hello, world!\"});\n\n// mark my first message as \"important\"\nMessages.update(myMessages[0]._id, {$set: {important: true}});</pre> <p>If you pass a <code>name</code> when you create the collection, then you are declaring a persistent collection — one that is stored on the server and seen by all users. Client code and server code can both access the same collection using the same API.</p> <p>Specifically, when you pass a <code>name</code>, here’s what happens:</p> <ul> <li>\n<p>On the server (if you do not specify a <code>connection</code>), a collection with that name is created on a backend Mongo server. When you call methods on that collection on the server, they translate directly into normal Mongo operations (after checking that they match your <a href=\"#allow\">access control rules</a>).</p> </li> <li>\n<p>On the client (and on the server if you specify a <code>connection</code>), a Minimongo instance is created. Minimongo is essentially an in-memory, non-persistent implementation of Mongo in pure JavaScript. It serves as a local cache that stores just the subset of the database that this client is working with. Queries (<a href=\"#find\"><code>find</code></a>) on these collections are served directly out of this cache, without talking to the server.</p> </li> <li>\n<p>When you write to the database on the client (<a href=\"#insert\"><code>insert</code></a>, <a href=\"#update\"><code>update</code></a>, <a href=\"#remove\"><code>remove</code></a>), the command is executed locally immediately, and, simultaneously, it’s sent to the server and executed there too. This happens via <a href=\"#meteor_methods\">stubs</a>, because writes are implemented as methods.</p> </li> </ul> <blockquote> <p>When, on the server, you write to a collection which has a specified <code>connection</code> to another server, it sends the corresponding method to the other server and receives the changed values back from it over DDP. Unlike on the client, it does not execute the write locally first.</p> </blockquote> <p>If you pass <code>null</code> as the <code>name</code>, then you’re creating a local collection. It’s not synchronized anywhere; it’s just a local scratchpad that supports Mongo-style <a href=\"#find\"><code>find</code></a>, <a href=\"#insert\"><code>insert</code></a>, <a href=\"#update\"><code>update</code></a>, and <a href=\"#remove\"><code>remove</code></a> operations. (On both the client and the server, this scratchpad is implemented using Minimongo.)</p> <p>By default, Meteor automatically publishes every document in your collection to each connected client. To turn this behavior off, remove the <code>autopublish</code> package, in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor remove autopublish</pre> <p>and instead call <a href=\"#meteor_publish\"><code>Meteor.publish</code></a> to specify which parts of your collection should be published to which users.</p> <pre class=\"highlight js\" data-language=\"js\">// Create a collection called Posts and put a document in it. The\n// document will be immediately visible in the local copy of the\n// collection. It will be written to the server-side database\n// a fraction of a second later, and a fraction of a second\n// after that, it will be synchronized down to any other clients\n// that are subscribed to a query that includes it (see\n// Meteor.subscribe and autopublish)\nPosts = new Mongo.Collection(\"posts\");\nPosts.insert({title: \"Hello world\", body: \"First post\"});\n\n// Changes are visible immediately -- no waiting for a round trip to\n// the server.\nassert(Posts.find().count() === 1);\n\n// Create a temporary, local collection. It works just like any other\n// collection, but it doesn't send changes to the server, and it\n// can't receive any data from subscriptions.\nScratchpad = new Mongo.Collection;\n\nfor (var i = 0; i &lt; 10; i++)\n  Scratchpad.insert({number: i * 2});\nassert(Scratchpad.find({number: {$lt: 9}}).count() === 5);</pre> <p>Generally, you’ll assign <code>Mongo.Collection</code> objects in your app to global variables. You can only create one <code>Mongo.Collection</code> object for each underlying Mongo collection.</p> <p>If you specify a <code>transform</code> option to the <code>Collection</code> or any of its retrieval methods, documents are passed through the <code>transform</code> function before being returned or passed to callbacks. This allows you to add methods or otherwise modify the contents of your collection from their database representation. You can also specify <code>transform</code> on a particular <code>find</code>, <code>findOne</code>, <code>allow</code>, or <code>deny</code> call. Transform functions must return an object and they may not change the value of the document’s <code>_id</code> field (though it’s OK to leave it out).</p> <pre class=\"highlight js\" data-language=\"js\">// An Animal class that takes a document in its constructor\nAnimal = function (doc) {\n  _.extend(this, doc);\n};\n_.extend(Animal.prototype, {\n  makeNoise: function () {\n    console.log(this.sound);\n  }\n});\n\n// Define a Collection that uses Animal as its document\nAnimals = new Mongo.Collection(\"Animals\", {\n  transform: function (doc) { return new Animal(doc); }\n});\n\n// Create an Animal and call its makeNoise method\nAnimals.insert({name: \"raptor\", sound: \"roar\"});\nAnimals.findOne({name: \"raptor\"}).makeNoise(); // prints \"roar\"\n</pre> <p><code>transform</code> functions are not called reactively. If you want to add a dynamically changing attribute to an object, do it with a function that computes the value at the time it’s called, not by computing the attribute at <code>transform</code> time.</p> <blockquote class=\"pullquote warning\">\n<p>In this release, Minimongo has some limitations:</p> <ul> <li>\n<code>$pull</code> in modifiers can only accept certain kinds of selectors.</li> <li>\n<code>findAndModify</code>, aggregate functions, and map/reduce aren’t supported.</li> </ul> <p>All of these will be addressed in a future release. For full Minimongo release notes, see packages/minimongo/NOTES in the repository.</p> </blockquote> <blockquote class=\"pullquote warning\">\n<p>Minimongo doesn’t currently have indexes. It’s rare for this to be an issue, since it’s unusual for a client to have enough data that an index is worthwhile.</p> </blockquote> <p>Read more about collections and how to use them in the <a href=\"http://guide.meteor.com/collections.html\" target=\"_blank\" rel=\"external\">Collections</a> article in the Meteor Guide.</p>  <h3 class=\"api-heading\" id=\"Mongo-Collection-find\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Collection#find([selector], [options])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L290\" target=\"_blank\"> (mongo/collection.js, line 290) </a> </div> </h3>   <p>Find the documents in a collection that match the selector.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>selector</code> <span class=\"type\"><a href=\"#selectors\">Mongo Selector</a>, <a href=\"#mongo_object_id\">Object ID</a>, or String</span> </dt> <dd> <p>A query describing the documents to find</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>sort</code> <span class=\"type\"><a href=\"#sortspecifiers\">Mongo Sort Specifier</a></span> </dt> <dd> <p>Sort order (default: natural order)</p> </dd> <dt> <code>skip</code> <span class=\"type\">Number</span> </dt> <dd> <p>Number of results to skip at the beginning</p> </dd> <dt> <code>limit</code> <span class=\"type\">Number</span> </dt> <dd> <p>Maximum number of results to return</p> </dd> <dt> <code>fields</code> <span class=\"type\"><a href=\"#fieldspecifiers\">Mongo Field Specifier</a></span> </dt> <dd> <p>Dictionary of fields to return or exclude.</p> </dd> <dt> <code>reactive</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>(Client only) Default <code>true</code>; pass <code>false</code> to disable reactivity</p> </dd> <dt> <code>transform</code> <span class=\"type\">Function</span> </dt> <dd> <p>Overrides <code>transform</code> on the <a href=\"#collections\"><code>Collection</code></a> for this cursor. Pass <code>null</code> to disable transformation.</p> </dd> <dt> <code>disableOplog</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>(Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to <code>observe</code> on this query. Disabling the oplog can be useful when working with data that updates in large batches.</p> </dd> <dt> <code>pollingIntervalMs</code> <span class=\"type\">Number</span> </dt> <dd> <p>(Server only) How often to poll this query when observing on the server. In milliseconds. Defaults to 10 seconds.</p> </dd> <dt> <code>pollingThrottleMs</code> <span class=\"type\">Number</span> </dt> <dd> <p>(Server only) Minimum time to allow between re-polling. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. In milliseconds. Defaults to 50 milliseconds.</p> </dd> </dl>   <p><code>find</code> returns a cursor. It does not immediately access the database or return documents. Cursors provide <code>fetch</code> to return all matching documents, <code>map</code> and <code>forEach</code> to iterate over all matching documents, and <code>observe</code> and <code>observeChanges</code> to register callbacks when the set of matching documents changes.</p> <blockquote class=\"pullquote warning\">\n<p>Collection cursors are not query snapshots. If the database changes between calling <code>Collection.find</code> and fetching the results of the cursor, or while fetching results from the cursor, those changes may or may not appear in the result set.</p> </blockquote> <p>Cursors are a reactive data source. On the client, the first time you retrieve a cursor’s documents with <code>fetch</code>, <code>map</code>, or <code>forEach</code> inside a reactive computation (eg, a template or <a href=\"#tracker_autorun\"><code>autorun</code></a>), Meteor will register a dependency on the underlying data. Any change to the collection that changes the documents in a cursor will trigger a recomputation. To disable this behavior, pass <code>{reactive: false}</code> as an option to <code>find</code>.</p> <p>Note that when <code>fields</code> are specified, only changes to the included fields will trigger callbacks in <code>observe</code>, <code>observeChanges</code> and invalidations in reactive computations using this cursor. Careful use of <code>fields</code> allows for more fine-grained reactivity for computations that don’t depend on an entire document.</p> <p>On the client, there will be a period of time between when the page loads and when the published data arrives from the server during which your client-side collections will be empty.</p>  <h3 class=\"api-heading\" id=\"Mongo-Collection-findOne\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Collection#findOne([selector], [options])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L319\" target=\"_blank\"> (mongo/collection.js, line 319) </a> </div> </h3>   <p>Finds the first document that matches the selector, as ordered by sort and skip options.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>selector</code> <span class=\"type\"><a href=\"#selectors\">Mongo Selector</a>, <a href=\"#mongo_object_id\">Object ID</a>, or String</span> </dt> <dd> <p>A query describing the documents to find</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>sort</code> <span class=\"type\"><a href=\"#sortspecifiers\">Mongo Sort Specifier</a></span> </dt> <dd> <p>Sort order (default: natural order)</p> </dd> <dt> <code>skip</code> <span class=\"type\">Number</span> </dt> <dd> <p>Number of results to skip at the beginning</p> </dd> <dt> <code>fields</code> <span class=\"type\"><a href=\"#fieldspecifiers\">Mongo Field Specifier</a></span> </dt> <dd> <p>Dictionary of fields to return or exclude.</p> </dd> <dt> <code>reactive</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>(Client only) Default true; pass false to disable reactivity</p> </dd> <dt> <code>transform</code> <span class=\"type\">Function</span> </dt> <dd> <p>Overrides <code>transform</code> on the <a href=\"#collections\"><code>Collection</code></a> for this cursor. Pass <code>null</code> to disable transformation.</p> </dd> </dl>   <p>Equivalent to <a href=\"#find\"><code>find</code></a><code>(selector, options).</code><a href=\"#fetch\"><code>fetch</code></a><code>()[0]</code> with <code>options.limit = 1</code>.</p>  <h3 class=\"api-heading\" id=\"Mongo-Collection-insert\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Collection#insert(doc, [callback])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L458\" target=\"_blank\"> (mongo/collection.js, line 458) </a> </div> </h3>   <p>Insert a document in the collection. Returns its unique _id.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>doc</code> <span class=\"type\">Object</span> </dt> <dd> <p>The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.</p> </dd> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional. If present, called with an error object as the first argument and, if no error, the _id as the second.</p> </dd> </dl>   <p>Add a document to the collection. A document is just an object, and its fields can contain any combination of EJSON-compatible datatypes (arrays, objects, numbers, strings, <code>null</code>, true, and false).</p> <p><code>insert</code> will generate a unique ID for the object you pass, insert it in the database, and return the ID. When <code>insert</code> is called from untrusted client code, it will be allowed only if passes any applicable <a href=\"#allow\"><code>allow</code></a> and <a href=\"#deny\"><code>deny</code></a> rules.</p> <p>On the server, if you don’t provide a callback, then <code>insert</code> blocks until the database acknowledges the write, or throws an exception if something went wrong. If you do provide a callback, <code>insert</code> still returns the ID immediately. Once the insert completes (or fails), the callback is called with error and result arguments. In an error case, <code>result</code> is undefined. If the insert is successful, <code>error</code> is undefined and <code>result</code> is the new document ID.</p> <p>On the client, <code>insert</code> never blocks. If you do not provide a callback and the insert fails on the server, then Meteor will log a warning to the console. If you provide a callback, Meteor will call that function with <code>error</code> and <code>result</code> arguments. In an error case, <code>result</code> is undefined. If the insert is successful, <code>error</code> is undefined and <code>result</code> is the new document ID.</p> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">\nvar groceriesId = Lists.insert({name: \"Groceries\"});\nItems.insert({list: groceriesId, name: \"Watercress\"});\nItems.insert({list: groceriesId, name: \"Persimmons\"});</pre>  <h3 class=\"api-heading\" id=\"Mongo-Collection-update\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Collection#update(selector, modifier, [options], [callback])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L539\" target=\"_blank\"> (mongo/collection.js, line 539) </a> </div> </h3>   <p>Modify one or more documents in the collection. Returns the number of affected documents.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>selector</code> <span class=\"type\"><a href=\"#selectors\">Mongo Selector</a>, <a href=\"#mongo_object_id\">Object ID</a>, or String</span> </dt> <dd> <p>Specifies which documents to modify</p> </dd> <dt> <code>modifier</code> <span class=\"type\"><a href=\"#modifiers\">Mongo Modifier</a></span> </dt> <dd> <p>Specifies how to modify the documents</p> </dd> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>multi</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>True to modify all matching documents; false to only modify one of the matching documents (the default).</p> </dd> <dt> <code>upsert</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>True to insert a document if no matching documents are found.</p> </dd> </dl>   <p>Modify documents that match <code>selector</code> according to <code>modifier</code> (see <a href=\"#modifiers\">modifier documentation</a>).</p> <p>The behavior of <code>update</code> differs depending on whether it is called by trusted or untrusted code. Trusted code includes server code and method code. Untrusted code includes client-side code such as event handlers and a browser’s JavaScript console.</p> <ul> <li>\n<p>Trusted code can modify multiple documents at once by setting <code>multi</code> to true, and can use an arbitrary <a href=\"#selectors\">Mongo selector</a> to find the documents to modify. It bypasses any access control rules set up by <a href=\"#allow\"><code>allow</code></a> and <a href=\"#deny\"><code>deny</code></a>. The number of affected documents will be returned from the <code>update</code> call if you don’t pass a callback.</p> </li> <li>\n<p>Untrusted code can only modify a single document at once, specified by its <code>_id</code>. The modification is allowed only after checking any applicable <a href=\"#allow\"><code>allow</code></a> and <a href=\"#deny\"><code>deny</code></a> rules. The number of affected documents will be returned to the callback. Untrusted code cannot perform upserts, except in insecure mode.</p> </li> </ul> <p>On the server, if you don’t provide a callback, then <code>update</code> blocks until the database acknowledges the write, or throws an exception if something went wrong. If you do provide a callback, <code>update</code> returns immediately. Once the update completes, the callback is called with a single error argument in the case of failure, or a second argument indicating the number of affected documents if the update was successful.</p> <p>On the client, <code>update</code> never blocks. If you do not provide a callback and the update fails on the server, then Meteor will log a warning to the console. If you provide a callback, Meteor will call that function with an error argument if there was an error, or a second argument indicating the number of affected documents if the update was successful.</p> <p>Client example:</p> <pre class=\"highlight js\" data-language=\"js\">// When the givePoints button in the admin dashboard is pressed,\n// give 5 points to the current player. The new score will be\n// immediately visible on everyone's screens.\nTemplate.adminDashboard.events({\n  'click .givePoints': function () {\n    Players.update(Session.get(\"currentPlayer\"), {$inc: {score: 5}});\n  }\n});</pre> <p>Server example:</p> <pre class=\"highlight js\" data-language=\"js\">// Give the \"Winner\" badge to each user with a score greater than\n// 10. If they are logged in and their badge list is visible on the\n// screen, it will update automatically as they watch.\nMeteor.methods({\n  declareWinners: function () {\n    Players.update({score: {$gt: 10}},\n                   {$addToSet: {badges: \"Winner\"}},\n                   {multi: true});\n  }\n});</pre> <p>You can use <code>update</code> to perform a Mongo upsert by setting the <code>upsert</code> option to true. You can also use the <a href=\"#upsert\"><code>upsert</code></a> method to perform an upsert that returns the <code>_id</code> of the document that was inserted (if there was one) in addition to the number of affected documents.</p>  <h3 class=\"api-heading\" id=\"Mongo-Collection-upsert\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Collection#upsert(selector, modifier, [options], [callback])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L664\" target=\"_blank\"> (mongo/collection.js, line 664) </a> </div> </h3>   <p>Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys <code>numberAffected</code> (the number of documents modified) and <code>insertedId</code> (the unique _id of the document that was inserted, if any).</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>selector</code> <span class=\"type\"><a href=\"#selectors\">Mongo Selector</a>, <a href=\"#mongo_object_id\">Object ID</a>, or String</span> </dt> <dd> <p>Specifies which documents to modify</p> </dd> <dt> <code>modifier</code> <span class=\"type\"><a href=\"#modifiers\">Mongo Modifier</a></span> </dt> <dd> <p>Specifies how to modify the documents</p> </dd> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional. If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>multi</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>True to modify all matching documents; false to only modify one of the matching documents (the default).</p> </dd> </dl>   <p>Modify documents that match <code>selector</code> according to <code>modifier</code>, or insert a document if no documents were modified. <code>upsert</code> is the same as calling <code>update</code> with the <code>upsert</code> option set to true, except that the return value of <code>upsert</code> is an object that contain the keys <code>numberAffected</code> and <code>insertedId</code>. (<code>update</code> returns only the number of affected documents.)</p>  <h3 class=\"api-heading\" id=\"Mongo-Collection-remove\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Collection#remove(selector, [callback])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L600\" target=\"_blank\"> (mongo/collection.js, line 600) </a> </div> </h3>   <p>Remove documents from the collection</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>selector</code> <span class=\"type\"><a href=\"#selectors\">Mongo Selector</a>, <a href=\"#mongo_object_id\">Object ID</a>, or String</span> </dt> <dd> <p>Specifies which documents to remove</p> </dd> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional. If present, called with an error object as its argument.</p> </dd> </dl>   <p>Find all of the documents that match <code>selector</code> and delete them from the collection.</p> <p>The behavior of <code>remove</code> differs depending on whether it is called by trusted or untrusted code. Trusted code includes server code and method code. Untrusted code includes client-side code such as event handlers and a browser’s JavaScript console.</p> <ul> <li>\n<p>Trusted code can use an arbitrary <a href=\"#selectors\">Mongo selector</a> to find the documents to remove, and can remove more than one document at once by passing a selector that matches multiple documents. It bypasses any access control rules set up by <a href=\"#allow\"><code>allow</code></a> and <a href=\"#deny\"><code>deny</code></a>. The number of removed documents will be returned from <code>remove</code> if you don’t pass a callback.</p> <p>As a safety measure, if <code>selector</code> is omitted (or is <code>undefined</code>), no documents will be removed. Set <code>selector</code> to <code>{}</code> if you really want to remove all documents from your collection.</p> </li> <li>\n<p>Untrusted code can only remove a single document at a time, specified by its <code>_id</code>. The document is removed only after checking any applicable <a href=\"#allow\"><code>allow</code></a> and <a href=\"#deny\"><code>deny</code></a> rules. The number of removed documents will be returned to the callback.</p> </li> </ul> <p>On the server, if you don’t provide a callback, then <code>remove</code> blocks until the database acknowledges the write and then returns the number of removed documents, or throws an exception if something went wrong. If you do provide a callback, <code>remove</code> returns immediately. Once the remove completes, the callback is called with a single error argument in the case of failure, or a second argument indicating the number of removed documents if the remove was successful.</p> <p>On the client, <code>remove</code> never blocks. If you do not provide a callback and the remove fails on the server, then Meteor will log a warning to the console. If you provide a callback, Meteor will call that function with an error argument if there was an error, or a second argument indicating the number of removed documents if the remove was successful.</p> <p>Client example:</p> <pre class=\"highlight js\" data-language=\"js\">// When the remove button is clicked on a chat message, delete\n// that message.\nTemplate.chat.events({\n  'click .remove': function () {\n    Messages.remove(this._id);\n  }\n});</pre> <p>Server example:</p> <pre class=\"highlight js\" data-language=\"js\">// When the server starts, clear the log, and delete all players\n// with a karma of less than -2.\nMeteor.startup(function () {\n  if (Meteor.isServer) {\n    Logs.remove({});\n    Players.remove({karma: {$lt: -2}});\n  }\n});</pre>  <h3 class=\"api-heading\" id=\"Mongo-Collection-allow\"> <div class=\"locus\"> Server </div> <code>Mongo.Collection#allow(options)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/allow-deny/allow-deny.js#L43\" target=\"_blank\"> (allow-deny/allow-deny.js, line 43) </a> </div> </h3>   <p>Allow users to write directly to this collection from client code, subject to limitations you define.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>insert, update, remove</code> <span class=\"type\">Function</span> </dt> <dd> <p>Functions that look at a proposed modification to the database and return true if it should be allowed.</p> </dd> <dt> <code>fetch</code> <span class=\"type\">Array of Strings</span> </dt> <dd> <p>Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your <code>update</code> and <code>remove</code> functions.</p> </dd> <dt> <code>transform</code> <span class=\"type\">Function</span> </dt> <dd> <p>Overrides <code>transform</code> on the <a href=\"#collections\"><code>Collection</code></a>. Pass <code>null</code> to disable transformation.</p> </dd> </dl>   <p>When a client calls <code>insert</code>, <code>update</code>, or <code>remove</code> on a collection, the collection’s <code>allow</code> and <a href=\"#deny\"><code>deny</code></a> callbacks are called on the server to determine if the write should be allowed. If at least one <code>allow</code> callback allows the write, and no <code>deny</code> callbacks deny the write, then the write is allowed to proceed.</p> <p>These checks are run only when a client tries to write to the database directly, for example by calling <code>update</code> from inside an event handler. Server code is trusted and isn’t subject to <code>allow</code> and <code>deny</code> restrictions. That includes methods that are called with <code>Meteor.call</code> — they are expected to do their own access checking rather than relying on <code>allow</code> and <code>deny</code>.</p> <p>You can call <code>allow</code> as many times as you like, and each call can include any combination of <code>insert</code>, <code>update</code>, and <code>remove</code> functions. The functions should return <code>true</code> if they think the operation should be allowed. Otherwise they should return <code>false</code>, or nothing at all (<code>undefined</code>). In that case Meteor will continue searching through any other <code>allow</code> rules on the collection.</p> <p>The available callbacks are:</p> <dl class=\"callbacks\"> <dt><span class=\"name\">insert(userId, doc)</span></dt>\n<dd>\n<p>The user <code>userId</code> wants to insert the document <code>doc</code> into the collection. Return <code>true</code> if this should be allowed.</p> <p><code>doc</code> will contain the <code>_id</code> field if one was explicitly set by the client, or if there is an active <code>transform</code>. You can use this to prevent users from specifying arbitrary <code>_id</code> fields.</p> </dd> <dt><span class=\"name\">update(userId, doc, fieldNames, modifier)</span></dt>\n<dd>\n<p>The user <code>userId</code> wants to update a document <code>doc</code>. (<code>doc</code> is the current version of the document from the database, without the proposed update.) Return <code>true</code> to permit the change.</p> <p><code>fieldNames</code> is an array of the (top-level) fields in <code>doc</code> that the client wants to modify, for example <code>['name',</code> <code>'score']</code>.</p> <p><code>modifier</code> is the raw Mongo modifier that the client wants to execute; for example, <code>{$set: {'name.first': \"Alice\"}, $inc: {score: 1}}</code>.</p> <p>Only Mongo modifiers are supported (operations like <code>$set</code> and <code>$push</code>). If the user tries to replace the entire document rather than use $-modifiers, the request will be denied without checking the <code>allow</code> functions.</p> </dd> <dt><span class=\"name\">remove(userId, doc)</span></dt>\n<dd>\n<p>The user <code>userId</code> wants to remove <code>doc</code> from the database. Return <code>true</code> to permit this.</p> </dd> </dl> <p>When calling <code>update</code> or <code>remove</code> Meteor will by default fetch the entire document <code>doc</code> from the database. If you have large documents you may wish to fetch only the fields that are actually used by your functions. Accomplish this by setting <code>fetch</code> to an array of field names to retrieve.</p> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">// Create a collection where users can only modify documents that\n// they own. Ownership is tracked by an 'owner' field on each\n// document. All documents must be owned by the user that created\n// them and ownership can't be changed. Only a document's owner\n// is allowed to delete it, and the 'locked' attribute can be\n// set on a document to prevent its accidental deletion.\n\nPosts = new Mongo.Collection(\"posts\");\n\nPosts.allow({\n  insert: function (userId, doc) {\n    // the user must be logged in, and the document must be owned by the user\n\n    return (userId &amp;&amp; doc.owner === userId);\n  },\n  update: function (userId, doc, fields, modifier) {\n    // can only change your own documents\n\n    return doc.owner === userId;\n  },\n  remove: function (userId, doc) {\n    // can only remove your own documents\n\n    return doc.owner === userId;\n  },\n  fetch: ['owner']\n});\n\nPosts.deny({\n  update: function (userId, doc, fields, modifier) {\n    // can't change owners\n\n    return _.contains(fields, 'owner');\n  },\n  remove: function (userId, doc) {\n    // can't remove locked documents\n\n    return doc.locked;\n  },\n  fetch: ['locked'] // no need to fetch 'owner'\n\n});</pre> <p>If you never set up any <code>allow</code> rules on a collection then all client writes to the collection will be denied, and it will only be possible to write to the collection from server-side code. In this case you will have to create a method for each possible write that clients are allowed to do. You’ll then call these methods with <code>Meteor.call</code> rather than having the clients call <code>insert</code>, <code>update</code>, and <code>remove</code> directly on the collection.</p> <p>Meteor also has a special “insecure mode” for quickly prototyping new applications. In insecure mode, if you haven’t set up any <code>allow</code> or <code>deny</code> rules on a collection, then all users have full write access to the collection. This is the only effect of insecure mode. If you call <code>allow</code> or <code>deny</code> at all on a collection, even <code>Posts.allow({})</code>, then access is checked just like normal on that collection. <strong>New Meteor projects start in insecure mode by default.</strong> To turn it off just run in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor remove insecure</pre>  <h3 class=\"api-heading\" id=\"Mongo-Collection-deny\"> <div class=\"locus\"> Server </div> <code>Mongo.Collection#deny(options)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/allow-deny/allow-deny.js#L58\" target=\"_blank\"> (allow-deny/allow-deny.js, line 58) </a> </div> </h3>   <p>Override <code>allow</code> rules.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>insert, update, remove</code> <span class=\"type\">Function</span> </dt> <dd> <p>Functions that look at a proposed modification to the database and return true if it should be denied, even if an <a href=\"#allow\">allow</a> rule says otherwise.</p> </dd> <dt> <code>fetch</code> <span class=\"type\">Array of Strings</span> </dt> <dd> <p>Optional performance enhancement. Limits the fields that will be fetched from the database for inspection by your <code>update</code> and <code>remove</code> functions.</p> </dd> <dt> <code>transform</code> <span class=\"type\">Function</span> </dt> <dd> <p>Overrides <code>transform</code> on the <a href=\"#collections\"><code>Collection</code></a>. Pass <code>null</code> to disable transformation.</p> </dd> </dl>   <p>This works just like <a href=\"#allow\"><code>allow</code></a>, except it lets you make sure that certain writes are definitely denied, even if there is an <code>allow</code> rule that says that they should be permitted.</p> <p>When a client tries to write to a collection, the Meteor server first checks the collection’s <code>deny</code> rules. If none of them return true then it checks the collection’s <code>allow</code> rules. Meteor allows the write only if no <code>deny</code> rules return <code>true</code> and at least one <code>allow</code> rule returns <code>true</code>.</p>  <h3 class=\"api-heading\" id=\"Mongo-Collection-rawCollection\"> <div class=\"locus\"> Server </div> <code>Mongo.Collection#rawCollection()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L710\" target=\"_blank\"> (mongo/collection.js, line 710) </a> </div> </h3>   <p>Returns the <a href=\"http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html\" target=\"_blank\" rel=\"external\"><code>Collection</code></a> object corresponding to this collection from the <a href=\"https://www.npmjs.com/package/mongodb\" target=\"_blank\" rel=\"external\">npm <code>mongodb</code> driver module</a> which is wrapped by <code>Mongo.Collection</code>.</p>     <h3 class=\"api-heading\" id=\"Mongo-Collection-rawDatabase\"> <div class=\"locus\"> Server </div> <code>Mongo.Collection#rawDatabase()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L722\" target=\"_blank\"> (mongo/collection.js, line 722) </a> </div> </h3>   <p>Returns the <a href=\"http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html\" target=\"_blank\" rel=\"external\"><code>Db</code></a> object corresponding to this collection's database connection from the <a href=\"https://www.npmjs.com/package/mongodb\" target=\"_blank\" rel=\"external\">npm <code>mongodb</code> driver module</a> which is wrapped by <code>Mongo.Collection</code>.</p>    <h2 id=\"mongo_cursor\">Cursors</h2> <p>To create a cursor, use <a href=\"#find\"><code>find</code></a>. To access the documents in a cursor, use <a href=\"#foreach\"><code>forEach</code></a>, <a href=\"#map\"><code>map</code></a>, or <a href=\"#fetch\"><code>fetch</code></a>.</p>  <h3 class=\"api-heading\" id=\"Mongo-Cursor-forEach\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Cursor#forEach(callback, [thisArg])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/minimongo/minimongo.js#L145\" target=\"_blank\"> (minimongo/minimongo.js, line 145) </a> </div> </h3>   <p>Call <code>callback</code> once for each matching document, sequentially and synchronously.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.</p> </dd> <dt> <code>thisArg</code> <span class=\"type\">Any</span> </dt> <dd> <p>An object which will be the value of <code>this</code> inside <code>callback</code>.</p> </dd> </dl>   <p>This interface is compatible with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"external\">Array.forEach</a>.</p> <p>When called from a reactive computation, <code>forEach</code> registers dependencies on the matching documents.</p> <p>Examples:</p> <pre class=\"highlight js\" data-language=\"js\">// Print the titles of the five top-scoring posts\n\nvar topPosts = Posts.find({}, {sort: {score: -1}, limit: 5});\n\nvar count = 0;\ntopPosts.forEach(function (post) {\n  console.log(\"Title of post \" + count + \": \" + post.title);\n  count += 1;\n});</pre>  <h3 class=\"api-heading\" id=\"Mongo-Cursor-map\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Cursor#map(callback, [thisArg])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/minimongo/minimongo.js#L181\" target=\"_blank\"> (minimongo/minimongo.js, line 181) </a> </div> </h3>   <p>Map callback over all matching documents. Returns an Array.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Function to call. It will be called with three arguments: the document, a 0-based index, and <em>cursor</em> itself.</p> </dd> <dt> <code>thisArg</code> <span class=\"type\">Any</span> </dt> <dd> <p>An object which will be the value of <code>this</code> inside <code>callback</code>.</p> </dd> </dl>   <p>This interface is compatible with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"external\">Array.map</a>.</p> <p>When called from a reactive computation, <code>map</code> registers dependencies on the matching documents.</p>  <p>On the server, if <code>callback</code> yields, other calls to <code>callback</code> may occur while the first call is waiting. If strict sequential execution is necessary, use <code>forEach</code> instead.</p>  <h3 class=\"api-heading\" id=\"Mongo-Cursor-fetch\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Cursor#fetch()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/minimongo/minimongo.js#L199\" target=\"_blank\"> (minimongo/minimongo.js, line 199) </a> </div> </h3>   <p>Return all matching documents as an Array.</p>    <p>When called from a reactive computation, <code>fetch</code> registers dependencies on the matching documents.</p>  <h3 class=\"api-heading\" id=\"Mongo-Cursor-count\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Cursor#count()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/minimongo/minimongo.js#L216\" target=\"_blank\"> (minimongo/minimongo.js, line 216) </a> </div> </h3>   <p>Returns the number of documents that match a query.</p>    <p>Unlike the other functions, <code>count</code> registers a dependency only on the number of matching documents. (Updates that just change or reorder the documents in the result set will not trigger a recomputation.)</p>  <h3 class=\"api-heading\" id=\"Mongo-Cursor-observe\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Cursor#observe(callbacks)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/minimongo/minimongo.js#L303\" target=\"_blank\"> (minimongo/minimongo.js, line 303) </a> </div> </h3>   <p>Watch a query. Receive callbacks as the result set changes.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callbacks</code> <span class=\"type\">Object</span> </dt> <dd> <p>Functions to call to deliver the result set as it changes</p> </dd> </dl>   <p>Establishes a <em>live query</em> that invokes callbacks when the result of the query changes. The callbacks receive the entire contents of the document that was affected, as well as its old contents, if applicable. If you only need to receive the fields that changed, see <a href=\"#observe_changes\"><code>observeChanges</code></a>.</p> <p><code>callbacks</code> may have the following functions as properties:</p> <dl class=\"callbacks\"> <dt>\n<span class=\"name\">added(document)</span> <span class=\"or\">or</span>\n</dt> <dt><span class=\"name\">addedAt(document, atIndex, before)</span></dt> <dd> A new document <code>document</code> entered the result set. The new document appears at position <code>atIndex</code>. It is immediately before the document whose <code>_id</code> is <code>before</code>. <code>before</code> will be <code>null</code> if the new document is at the end of the results. </dd> <dt><span class=\"name\">changed(newDocument, oldDocument) <span class=\"or\">or</span></span></dt> <dt><span class=\"name\">changedAt(newDocument, oldDocument, atIndex)</span></dt> <dd> The contents of a document were previously <code>oldDocument</code> and are now <code>newDocument</code>. The position of the changed document is <code>atIndex</code>. </dd> <dt>\n<span class=\"name\">removed(oldDocument)</span> <span class=\"or\">or</span>\n</dt> <dt><span class=\"name\">removedAt(oldDocument, atIndex)</span></dt> <dd> The document <code>oldDocument</code> is no longer in the result set. It used to be at position <code>atIndex</code>. </dd> <dt><span class=\"name\">movedTo(document, fromIndex, toIndex, before)</span></dt>\n<dd>\n<p>A document changed its position in the result set, from <code>fromIndex</code> to <code>toIndex</code> (which is before the document with id <code>before</code>). Its current contents is <code>document</code>.</p> </dd> </dl> <p>Use <code>added</code>, <code>changed</code>, and <code>removed</code> when you don’t care about the order of the documents in the result set. They are more efficient than <code>addedAt</code>, <code>changedAt</code>, and <code>removedAt</code>.</p> <p>Before <code>observe</code> returns, <code>added</code> (or <code>addedAt</code>) will be called zero or more times to deliver the initial results of the query.</p> <p><code>observe</code> returns a live query handle, which is an object with a <code>stop</code> method. Call <code>stop</code> with no arguments to stop calling the callback functions and tear down the query. <strong>The query will run forever until you call this.</strong> If <code>observe</code> is called from a <code>Tracker.autorun</code> computation, it is automatically stopped when the computation is rerun or stopped. (If the cursor was created with the option <code>reactive</code> set to false, it will only deliver the initial results and will not call any further callbacks; it is not necessary to call <code>stop</code> on the handle.)</p>  <h3 class=\"api-heading\" id=\"Mongo-Cursor-observeChanges\"> <div class=\"locus\"> Anywhere </div> <code>Mongo.Cursor#observeChanges(callbacks)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/minimongo/minimongo.js#L315\" target=\"_blank\"> (minimongo/minimongo.js, line 315) </a> </div> </h3>   <p>Watch a query. Receive callbacks as the result set changes. Only the differences between the old and new documents are passed to the callbacks.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callbacks</code> <span class=\"type\">Object</span> </dt> <dd> <p>Functions to call to deliver the result set as it changes</p> </dd> </dl>   <p>Establishes a <em>live query</em> that invokes callbacks when the result of the query changes. In contrast to <a href=\"#observe\"><code>observe</code></a>, <code>observeChanges</code> provides only the difference between the old and new result set, not the entire contents of the document that changed.</p> <p><code>callbacks</code> may have the following functions as properties:</p> <dl class=\"callbacks\"> <dt>\n<span class=\"name\">added(id, fields)</span> <span class=\"or\">or</span>\n</dt> <dt><span class=\"name\">addedBefore(id, fields, before)</span></dt> <dd> A new document entered the result set. It has the <code>id</code> and <code>fields</code> specified. <code>fields</code> contains all fields of the document excluding the <code>_id</code> field. The new document is before the document identified by <code>before</code>, or at the end if <code>before</code> is <code>null</code>. </dd> <dt><span class=\"name\">changed(id, fields)</span></dt>\n<dd>\n<p>The document identified by <code>id</code> has changed. <code>fields</code> contains the changed fields with their new values. If a field was removed from the document then it will be present in <code>fields</code> with a value of <code>undefined</code>.</p> </dd> <dt><span class=\"name\">movedBefore(id, before)</span></dt>\n<dd>\n<p>The document identified by <code>id</code> changed its position in the ordered result set, and now appears before the document identified by <code>before</code>.</p> </dd> <dt><span class=\"name\">removed(id)</span></dt>\n<dd>\n<p>The document identified by <code>id</code> was removed from the result set.</p> </dd> </dl> <p><code>observeChanges</code> is significantly more efficient if you do not use <code>addedBefore</code> or <code>movedBefore</code>.</p> <p>Before <code>observeChanges</code> returns, <code>added</code> (or <code>addedBefore</code>) will be called zero or more times to deliver the initial results of the query.</p> <p><code>observeChanges</code> returns a live query handle, which is an object with a <code>stop</code> method. Call <code>stop</code> with no arguments to stop calling the callback functions and tear down the query. <strong>The query will run forever until you call this.</strong> If <code>observeChanges</code> is called from a <code>Tracker.autorun</code> computation, it is automatically stopped when the computation is rerun or stopped. (If the cursor was created with the option <code>reactive</code> set to false, it will only deliver the initial results and will not call any further callbacks; it is not necessary to call <code>stop</code> on the handle.)</p> <blockquote> <p>Unlike <code>observe</code>, <code>observeChanges</code> does not provide absolute position information (that is, <code>atIndex</code> positions rather than <code>before</code> positions.) This is for efficiency.</p> </blockquote> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">// Keep track of how many administrators are online.\n\nvar count = 0;\n\nvar query = Users.find({admin: true, onlineNow: true});\n\nvar handle = query.observeChanges({\n  added: function (id, user) {\n    count++;\n    console.log(user.name + \" brings the total to \" + count + \" admins.\");\n  },\n  removed: function () {\n    count--;\n    console.log(\"Lost one. We're now down to \" + count + \" admins.\");\n  }\n});\n\n// After five seconds, stop keeping the count.\nsetTimeout(function () {handle.stop();}, 5000);</pre>  <h2 class=\"api-heading\" id=\"Mongo-ObjectID\"> <div class=\"locus\"> Anywhere </div> <code>new Mongo.ObjectID([hexString])</code> <div class=\"subtext-api\"> <code>import { Mongo } from 'meteor/mongo'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/mongo/collection.js#L737\" target=\"_blank\"> (mongo/collection.js, line 737) </a> </div> </h2>   <p>Create a Mongo-style <code>ObjectID</code>. If you don't specify a <code>hexString</code>, the <code>ObjectID</code> will generated randomly (not using MongoDB's ID construction rules).</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>hexString</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. The 24-character hexadecimal contents of the ObjectID to create</p> </dd> </dl>   <p><code>Mongo.ObjectID</code> follows the same API as the <a href=\"http://mongodb.github.com/node-mongodb-native/api-bson-generated/objectid.html\" target=\"_blank\" rel=\"external\">Node MongoDB driver <code>ObjectID</code></a> class. Note that you must use the <code>equals</code> method (or <a href=\"#ejson_equals\"><code>EJSON.equals</code></a>) to compare them; the <code>===</code> operator will not work. If you are writing generic code that needs to deal with <code>_id</code> fields that may be either strings or <code>ObjectID</code>s, use <a href=\"#ejson_equals\"><code>EJSON.equals</code></a> instead of <code>===</code> to compare them.</p> <blockquote> <p> <code>ObjectID</code> values created by Meteor will not have meaningful answers to their <code>getTimestamp</code> method, since Meteor currently constructs them fully randomly.</p> </blockquote> <h2 id=\"selectors\">Mongo-Style Selectors</h2> <p>The simplest selectors are just a string or <a href=\"#mongo_object_id\"><code>Mongo.ObjectID</code></a>. These selectors match the document with that value in its <code>_id</code> field.</p> <p>A slightly more complex form of selector is an object containing a set of keys that must match in a document:</p> <pre class=\"highlight js\" data-language=\"js\">// Matches all documents where deleted is false\n{deleted: false}\n\n// Matches all documents where the name and cognomen are as given\n{name: \"Rhialto\", cognomen: \"the Marvelous\"}\n\n// Matches every document\n{}</pre> <p>But they can also contain more complicated tests:</p> <pre class=\"highlight js\" data-language=\"js\">// Matches documents where age is greater than 18\n{age: {$gt: 18}}\n\n// Also matches documents where tags is an array containing \"popular\"\n{tags: \"popular\"}\n\n// Matches documents where fruit is one of three possibilities\n{fruit: {$in: [\"peach\", \"plum\", \"pear\"]}}</pre> <p>See the <a href=\"http://docs.mongodb.org/manual/reference/operator/\" target=\"_blank\" rel=\"external\">complete documentation</a>.</p> <h2 id=\"modifiers\">Mongo-Style Modifiers</h2> <p>A modifier is an object that describes how to update a document in place by changing some of its fields. Some examples:</p> <pre class=\"highlight js\" data-language=\"js\">// Set the 'admin' property on the document to true\n{$set: {admin: true}}\n\n// Add 2 to the 'votes' property, and add \"Traz\"\n// to the end of the 'supporters' array\n{$inc: {votes: 2}, $push: {supporters: \"Traz\"}}</pre> <p>But if a modifier doesn’t contain any $-operators, then it is instead interpreted as a literal document, and completely replaces whatever was previously in the database. (Literal document modifiers are not currently supported by <a href=\"#allow\">validated updates</a>.)</p> <pre class=\"highlight excel\" data-language=\"excel\">// Find the document with id \"123\", and completely replace it.\nUsers.update({_id: \"123\"}, {name: \"Alice\", friends: [\"Bob\"]});</pre> <p>See the <a href=\"http://docs.mongodb.org/manual/reference/operator/update/\" target=\"_blank\" rel=\"external\">full list of modifiers</a>.</p> <h2 id=\"sortspecifiers\">Sort Specifiers</h2> <p>Sorts may be specified using your choice of several syntaxes:</p> <pre class=\"highlight sql\" data-language=\"sql\">// All of these do the same thing (sort in ascending order by\n\n// key \"a\", breaking ties in descending order of key \"b\")\n\n[[\"a\", \"asc\"], [\"b\", \"desc\"]]\n[\"a\", [\"b\", \"desc\"]]\n{a: 1, b: -1}</pre> <p>The last form will only work if your JavaScript implementation preserves the order of keys in objects. Most do, most of the time, but it’s up to you to be sure.</p> <p>For local collections you can pass a comparator function which receives two document objects, and returns -1 if the first document comes first in order, 1 if the second document comes first, or 0 if neither document comes before the other. This is a Minimongo extension to MongoDB.</p> <h2 id=\"fieldspecifiers\">Field Specifiers</h2> <p>Queries can specify a particular set of fields to include or exclude from the result object.</p> <p>To exclude specific fields from the result objects, the field specifier is a dictionary whose keys are field names and whose values are <code>0</code>. All unspecified fields are included.</p> <pre class=\"highlight js\" data-language=\"js\">Users.find({}, {fields: {password: 0, hash: 0}})</pre> <p>To include only specific fields in the result documents, use <code>1</code> as the value. The <code>_id</code> field is still included in the result.</p> <pre class=\"highlight js\" data-language=\"js\">Users.find({}, {fields: {firstname: 1, lastname: 1}})</pre> <p>With one exception, it is not possible to mix inclusion and exclusion styles: the keys must either be all 1 or all 0. The exception is that you may specify <code>_id: 0</code> in an inclusion specifier, which will leave <code>_id</code> out of the result object as well. However, such field specifiers can not be used with <a href=\"#observe_changes\"><code>observeChanges</code></a>, <a href=\"#observe\"><code>observe</code></a>, cursors returned from a <a href=\"#meteor_publish\">publish function</a>, or cursors used in <code>{{#each}}</code> in a template. They may be used with <a href=\"#fetch\"><code>fetch</code></a>, <a href=\"#findone\"><code>findOne</code></a>, <a href=\"#foreach\"><code>forEach</code></a>, and <a href=\"#map\"><code>map</code></a>.</p> <p><a href=\"http://docs.mongodb.org/manual/reference/operator/projection/\" target=\"_blank\" rel=\"external\">Field operators</a> such as <code>$</code> and <code>$elemMatch</code> are not available on the client side yet.</p> <p>A more advanced example:</p> <pre class=\"highlight js\" data-language=\"js\">Users.insert({ alterEgos: [{ name: \"Kira\", alliance: \"murderer\" },\n                           { name: \"L\", alliance: \"police\" }],\n               name: \"Yagami Light\" });\n\nUsers.findOne({}, { fields: { 'alterEgos.name': 1, _id: 0 } });\n\n// returns { alterEgos: [{ name: \"Kira\" }, { name: \"L\" }] }</pre> <p>See <a href=\"http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/#projection\" target=\"_blank\" rel=\"external\"> the MongoDB docs</a> for details of the nested field rules and array behavior.</p> <h2 id=\"mongo_url\">Connecting to your database</h2> <p>When developing your application, Meteor starts a local MongoDB instance and automatically connects to it. In production, you must specify a <code>MONGO_URL</code> environment variable pointing at your database in <a href=\"https://docs.mongodb.com/manual/reference/connection-string\" target=\"_blank\" rel=\"external\">the standard mongo connection string format</a>.</p> <blockquote> <p>You can also set <code>MONGO_URL</code> in development if you want to connect to a different MongoDB instance.</p> </blockquote> <p>If you want to use oplog tailing for livequeries, you should also set <code>MONGO_OPLOG_URL</code> (generally you’ll need a special user with oplog access, but the detail can differ depending on how you host your MongoDB. Read more <a href=\"https://github.com/meteor/docs/blob/master/long-form/oplog-observe-driver.md\" target=\"_blank\" rel=\"external\">here</a>).</p> <blockquote> <p>As of Meteor 1.4, you must ensure you set the <code>replicaSet</code> parameter on your <code>METEOR_OPLOG_URL</code></p> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/collections.html\" class=\"_attribution-link\">https://docs.meteor.com/api/collections.html</a>\n  </p>\n</div>\n","api/reactive-var":"<h1 class=\"title-page\">ReactiveVar</h1> <div class=\"subtitle-page\">Documentation of ReactiveVar, a simple reactive variable package.</div>    <p>To use <code>ReactiveVar</code>, add the <code>reactive-var</code> package to your project by running in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add reactive-var</pre>  <h2 class=\"api-heading\" id=\"ReactiveVar\"> <div class=\"locus\"> Client </div> <code>new ReactiveVar(initialValue, [equalsFunc])</code> <div class=\"subtext-api\"> <code>import { ReactiveVar } from 'meteor/reactive-var'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/reactive-var/reactive-var.js#L37\" target=\"_blank\"> (reactive-var/reactive-var.js, line 37) </a> </div> </h2>   <p>Constructor for a ReactiveVar, which represents a single reactive variable.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>initialValue</code> <span class=\"type\">Any</span> </dt> <dd> <p>The initial value to set. <code>equalsFunc</code> is ignored when setting the initial value.</p> </dd> <dt> <code>equalsFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional. A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set. If it returns true, no set is performed. If omitted, the default <code>equalsFunc</code> returns true if its arguments are <code>===</code> and are of type number, boolean, string, undefined, or null.</p> </dd> </dl>   <p>A ReactiveVar holds a single value that can be get and set, such that calling <code>set</code> will invalidate any Computations that called <code>get</code>, according to the usual contract for reactive data sources.</p> <p>A ReactiveVar is similar to a Session variable, with a few differences:</p> <ul> <li>\n<p>ReactiveVars don’t have global names, like the “foo” in <code>Session.get(\"foo\")</code>. Instead, they may be created and used locally, for example attached to a template instance, as in: <code>this.foo.get()</code>.</p> </li> <li>\n<p>ReactiveVars are not automatically migrated across hot code pushes, whereas Session state is.</p> </li> <li>\n<p>ReactiveVars can hold any value, while Session variables are limited to JSON or EJSON.</p> </li> </ul> <p>An important property of ReactiveVars — which is sometimes a reason for using one — is that setting the value to the same value as before has no effect; it does not trigger any invalidations. So if one autorun sets a ReactiveVar, and another autorun gets the ReactiveVar, a re-run of the first autorun won’t necessarily trigger the second. By default, only primitive values are compared this way, while calling <code>set</code> on an argument that is an <em>object</em> (not a primitive) always counts as a change. You can configure this behavior using the <code>equalsFunc</code> argument.</p>  <h3 class=\"api-heading\" id=\"ReactiveVar-get\"> <div class=\"locus\"> Client </div> <code>ReactiveVar#get()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/reactive-var/reactive-var.js#L62\" target=\"_blank\"> (reactive-var/reactive-var.js, line 62) </a> </div> </h3>   <p>Returns the current value of the ReactiveVar, establishing a reactive dependency.</p>     <h3 class=\"api-heading\" id=\"ReactiveVar-set\"> <div class=\"locus\"> Client </div> <code>ReactiveVar#set(newValue)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/reactive-var/reactive-var.js#L74\" target=\"_blank\"> (reactive-var/reactive-var.js, line 74) </a> </div> </h3>   <p>Sets the current value of the ReactiveVar, invalidating the Computations that called <code>get</code> if <code>newValue</code> is different from the old value.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>newValue</code> <span class=\"type\">Any</span> </dt>  </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/reactive-var.html\" class=\"_attribution-link\">https://docs.meteor.com/api/reactive-var.html</a>\n  </p>\n</div>\n","api/session":"<h1 class=\"title-page\">Session</h1> <div class=\"subtitle-page\">Documentation of Meteor's client-side session API.</div>    <p><code>Session</code> provides a global object on the client that you can use to store an arbitrary set of key-value pairs. Use it to store things like the currently selected item in a list.</p> <p>What’s special about <code>Session</code> is that it’s reactive. If you call <a href=\"#session_get\"><code>Session.get</code></a><code>(\"currentList\")</code> from inside a template, the template will automatically be rerendered whenever <a href=\"#session_set\"><code>Session.set</code></a><code>(\"currentList\", x)</code> is called.</p> <p>To add <code>Session</code> to your application, run this command in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add session</pre>  <h2 class=\"api-heading\" id=\"Session-set\"> <div class=\"locus\"> Client </div> <code>Session.set(key, value)</code> <div class=\"subtext-api\"> <code>import { Session } from 'meteor/session'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/session/session.js#L6\" target=\"_blank\"> (session/session.js, line 6) </a> </div> </h2>   <p>Set a variable in the session. Notify any listeners that the value has changed (eg: redraw templates, and rerun any <a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a> computations, that called <a href=\"#session_get\"><code>Session.get</code></a> on this <code>key</code>.)</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>key</code> <span class=\"type\">String</span> </dt> <dd> <p>The key to set, eg, <code>selectedItem</code></p> </dd> <dt> <code>value</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a> or undefined</span> </dt> <dd> <p>The new value for <code>key</code></p> </dd> </dl>   <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">Tracker.autorun(function () {\n  Meteor.subscribe(\"chat-history\", {room: Session.get(\"currentRoomId\")});\n});\n\n// Causes the function passed to Tracker.autorun to be re-run, so\n// that the chat-history subscription is moved to the room \"home\".\nSession.set(\"currentRoomId\", \"home\");</pre> <p><code>Session.set</code> can also be called with an object of keys and values, which is equivalent to calling <code>Session.set</code> individually on each key/value pair.</p> <pre class=\"highlight js\" data-language=\"js\">Session.set({\n  a: \"foo\",\n  b: \"bar\"\n\n});</pre>  <h2 class=\"api-heading\" id=\"Session-setDefault\"> <div class=\"locus\"> Client </div> <code>Session.setDefault(key, value)</code> <div class=\"subtext-api\"> <code>import { Session } from 'meteor/session'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/session/session.js#L18\" target=\"_blank\"> (session/session.js, line 18) </a> </div> </h2>   <p>Set a variable in the session if it hasn't been set before. Otherwise works exactly the same as <a href=\"#session_set\"><code>Session.set</code></a>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>key</code> <span class=\"type\">String</span> </dt> <dd> <p>The key to set, eg, <code>selectedItem</code></p> </dd> <dt> <code>value</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a> or undefined</span> </dt> <dd> <p>The new value for <code>key</code></p> </dd> </dl>   <p>This is useful in initialization code, to avoid re-initializing a session variable every time a new version of your app is loaded.</p>  <h2 class=\"api-heading\" id=\"Session-get\"> <div class=\"locus\"> Client </div> <code>Session.get(key)</code> <div class=\"subtext-api\"> <code>import { Session } from 'meteor/session'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/session/session.js#L28\" target=\"_blank\"> (session/session.js, line 28) </a> </div> </h2>   <p>Get the value of a session variable. If inside a <a href=\"#reactivity\">reactive computation</a>, invalidate the computation the next time the value of the variable is changed by <a href=\"#session_set\"><code>Session.set</code></a>. This returns a clone of the session value, so if it's an object or an array, mutating the returned value has no effect on the value stored in the session.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>key</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the session variable to return</p> </dd> </dl>   <p>Example:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;!-- in main.html --&gt;\n&lt;template name=\"main\"&gt;\n  &lt;p&gt;We've always been at war with {{theEnemy}}.&lt;/p&gt;\n\n&lt;/template&gt;</pre> <pre class=\"highlight js\" data-language=\"js\">// in main.js\nTemplate.main.helpers({\n  theEnemy: function () {\n    return Session.get(\"enemy\");\n  }\n});\n\nSession.set(\"enemy\", \"Eastasia\");\n// Page will say \"We've always been at war with Eastasia\"\n\nSession.set(\"enemy\", \"Eurasia\");\n// Page will change to say \"We've always been at war with Eurasia\"</pre>  <h2 class=\"api-heading\" id=\"Session-equals\"> <div class=\"locus\"> Client </div> <code>Session.equals(key, value)</code> <div class=\"subtext-api\"> <code>import { Session } from 'meteor/session'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/session/session.js#L41\" target=\"_blank\"> (session/session.js, line 41) </a> </div> </h2>   <p>Test if a session variable is equal to a value. If inside a <a href=\"#reactivity\">reactive computation</a>, invalidate the computation the next time the variable changes to or from the value.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>key</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the session variable to test</p> </dd> <dt> <code>value</code> <span class=\"type\">String, Number, Boolean, null, or undefined</span> </dt> <dd> <p>The value to test against</p> </dd> </dl>   <p>If value is a scalar, then these two expressions do the same thing:</p> <pre><code>(1) Session.get(\"key\") === value\n(2) Session.equals(\"key\", value)\n</code></pre>\n<p>… but the second one is always better. It triggers fewer invalidations (template redraws), making your program more efficient.</p> <p>Example:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"postsView\"&gt;\n{{! Show a dynamically updating list of items. Let the user click on an\n    item to select it. The selected item is given a CSS class so it\n    can be rendered differently. }}\n\n{{#each posts}}\n  {{&gt; postItem }}\n{{/each}}\n&lt;/template&gt;\n\n&lt;template name=\"postItem\"&gt;\n  &lt;div class=\"{{postClass}}\"&gt;{{title}}&lt;/div&gt;\n\n&lt;/template&gt;</pre> <pre class=\"highlight js\" data-language=\"js\">// in JS file\nTemplate.postsView.helpers({\n  posts: function() {\n    return Posts.find();\n  }\n});\n\nTemplate.postItem.helpers({\n  postClass: function() {\n    return Session.equals(\"selectedPost\", this._id) ?\n      \"selected\" : \"\";\n  }\n});\n\nTemplate.postItem.events({\n  'click': function() {\n    Session.set(\"selectedPost\", this._id);\n  }\n});</pre> <p>Using Session.equals here means that when the user clicks on an item and changes the selection, only the newly selected and the newly unselected items are re-rendered.</p> <p>If Session.get had been used instead of Session.equals, then when the selection changed, all the items would be re-rendered.</p> <p>For object and array session values, you cannot use <code>Session.equals</code>; instead, you need to use the <code>underscore</code> package and write <code>_.isEqual(Session.get(key), value)</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/session.html\" class=\"_attribution-link\">https://docs.meteor.com/api/session.html</a>\n  </p>\n</div>\n","api/timers":"<h1 class=\"title-page\">Timers</h1> <div class=\"subtitle-page\">Documentation of Meteor's timeout APIs.</div>    <p>Meteor uses global environment variables to keep track of things like the current request’s user. To make sure these variables have the right values, you need to use <code>Meteor.setTimeout</code> instead of <code>setTimeout</code> and <code>Meteor.setInterval</code> instead of <code>setInterval</code>.</p> <p>These functions work just like their native JavaScript equivalents. If you call the native function, you’ll get an error stating that Meteor code must always run within a Fiber, and advising to use <code>Meteor.bindEnvironment</code>.</p>  <h2 class=\"api-heading\" id=\"Meteor-setTimeout\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.setTimeout(func, delay)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/timers.js#L28\" target=\"_blank\"> (meteor/timers.js, line 28) </a> </div> </h2>   <p>Call a function in the future after waiting for a specified delay.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to run</p> </dd> <dt> <code>delay</code> <span class=\"type\">Number</span> </dt> <dd> <p>Number of milliseconds to wait before calling function</p> </dd> </dl>   <p>Returns a handle that can be used by <code>Meteor.clearTimeout</code>.</p>  <h2 class=\"api-heading\" id=\"Meteor-setInterval\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.setInterval(func, delay)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/timers.js#L39\" target=\"_blank\"> (meteor/timers.js, line 39) </a> </div> </h2>   <p>Call a function repeatedly, with a time delay between calls.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to run</p> </dd> <dt> <code>delay</code> <span class=\"type\">Number</span> </dt> <dd> <p>Number of milliseconds to wait between each function call.</p> </dd> </dl>   <p>Returns a handle that can be used by <code>Meteor.clearInterval</code>.</p>  <h2 class=\"api-heading\" id=\"Meteor-clearTimeout\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.clearTimeout(id)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/timers.js#L59\" target=\"_blank\"> (meteor/timers.js, line 59) </a> </div> </h2>   <p>Cancel a function call scheduled by <code>Meteor.setTimeout</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>id</code> <span class=\"type\">Number</span> </dt> <dd> <p>The handle returned by <code>Meteor.setTimeout</code></p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Meteor-clearInterval\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.clearInterval(id)</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/meteor/timers.js#L49\" target=\"_blank\"> (meteor/timers.js, line 49) </a> </div> </h2>   <p>Cancel a repeating function call scheduled by <code>Meteor.setInterval</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>id</code> <span class=\"type\">Number</span> </dt> <dd> <p>The handle returned by <code>Meteor.setInterval</code></p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/timers.html\" class=\"_attribution-link\">https://docs.meteor.com/api/timers.html</a>\n  </p>\n</div>\n","api/http":"<h1 class=\"title-page\">HTTP</h1> <div class=\"subtitle-page\">Documentation of Meteor's HTTP API.</div>    <p><code>HTTP</code> provides an HTTP request API on the client and server. To use these functions, add the HTTP package to your project by running in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add http</pre>  <h2 class=\"api-heading\" id=\"HTTP-call\"> <div class=\"locus\"> Anywhere </div> <code>HTTP.call(method, url, [options], [asyncCallback])</code> <div class=\"subtext-api\"> <code>import { HTTP } from 'meteor/http'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/http/httpcall_client.js#L19\" target=\"_blank\"> (http/httpcall_client.js, line 19) </a> </div> </h2>   <p>Perform an outbound HTTP request.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>method</code> <span class=\"type\">String</span> </dt> <dd> <p>The <a href=\"http://en.wikipedia.org/wiki/HTTP_method\" target=\"_blank\" rel=\"external\">HTTP method</a> to use, such as \"<code>GET</code>\", \"<code>POST</code>\", or \"<code>HEAD</code>\".</p> </dd> <dt> <code>url</code> <span class=\"type\">String</span> </dt> <dd> <p>The URL to retrieve.</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. If passed, the method runs asynchronously, instead of synchronously, and calls asyncCallback. On the client, this callback is required.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>content</code> <span class=\"type\">String</span> </dt> <dd> <p>String to use as the HTTP request body.</p> </dd> <dt> <code>data</code> <span class=\"type\">Object</span> </dt> <dd> <p>JSON-able object to stringify and use as the HTTP request body. Overwrites <code>content</code>.</p> </dd> <dt> <code>query</code> <span class=\"type\">String</span> </dt> <dd> <p>Query string to go in the URL. Overwrites any query string in <code>url</code>.</p> </dd> <dt> <code>params</code> <span class=\"type\">Object</span> </dt> <dd> <p>Dictionary of request parameters to be encoded and placed in the URL (for GETs) or request body (for POSTs). If <code>content</code> or <code>data</code> is specified, <code>params</code> will always be placed in the URL.</p> </dd> <dt> <code>auth</code> <span class=\"type\">String</span> </dt> <dd> <p>HTTP basic authentication string of the form <code>\"username:password\"</code></p> </dd> <dt> <code>headers</code> <span class=\"type\">Object</span> </dt> <dd> <p>Dictionary of strings, headers to add to the HTTP request.</p> </dd> <dt> <code>timeout</code> <span class=\"type\">Number</span> </dt> <dd> <p>Maximum time in milliseconds to wait for the request before failing. There is no timeout by default.</p> </dd> <dt> <code>followRedirects</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>If <code>true</code>, transparently follow HTTP redirects. Cannot be set to <code>false</code> on the client. Default <code>true</code>.</p> </dd> <dt> <code>npmRequestOptions</code> <span class=\"type\">Object</span> </dt> <dd> <p>On the server, <code>HTTP.call</code> is implemented by using the <a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"external\">npm <code>request</code> module</a>. Any options in this object will be passed directly to the <code>request</code> invocation.</p> </dd> <dt> <code>beforeSend</code> <span class=\"type\">Function</span> </dt> <dd> <p>On the client, this will be called before the request is sent to allow for more direct manipulation of the underlying XMLHttpRequest object, which will be passed as the first argument. If the callback returns <code>false</code>, the request will be not be send.</p> </dd> </dl>   <p>This function initiates an HTTP request to a remote server.</p> <p>On the server, this function can be run either synchronously or asynchronously. If the callback is omitted, it runs synchronously and the results are returned once the request completes successfully. If the request was not successful, an error is thrown. This is useful when making server-to-server HTTP API calls from within Meteor methods, as the method can succeed or fail based on the results of the synchronous HTTP call. In this case, consider using <a href=\"#method_unblock\"><code>this.unblock()</code></a> to allow other methods on the same connection to run in the mean time. On the client, this function must be used asynchronously by passing a callback.</p> <p>Both HTTP and HTTPS protocols are supported. The <code>url</code> argument must be an absolute URL including protocol and host name on the server, but may be relative to the current host on the client. The <code>query</code> option replaces the query string of <code>url</code>. Parameters specified in <code>params</code> that are put in the URL are appended to any query string. For example, with a <code>url</code> of <code>\"/path?query\"</code> and <code>params</code> of <code>{foo:\"bar\"}</code>, the final URL will be <code>\"/path?query&amp;foo=bar\"</code>.</p> <p>The <code>params</code> are put in the URL or the request body, depending on the type of request. In the case of request with no bodies, like GET and HEAD, the parameters will always go in the URL. For a POST or other type of request, the parameters will be encoded into the body with a standard <code>x-www-form-urlencoded</code> content type, unless the <code>content</code> or <code>data</code> option is used to specify a body, in which case the parameters will be appended to the URL instead.</p> <p>When run in asynchronous mode, the callback receives two arguments, <code>error</code> and <code>result</code>. The <code>error</code> argument will contain an Error if the request fails in any way, including a network error, time-out, or an HTTP status code in the 400 or 500 range. In case of a 4xx/5xx HTTP status code, the <code>response</code> property on <code>error</code> matches the contents of the result object. When run in synchronous mode, either <code>result</code> is returned from the function, or <code>error</code> is thrown.</p> <p>Contents of the result object:</p> <dl class=\"objdesc\"> <dt>\n<span class=\"name\">statusCode</span> <span class=\"type\">Number</span>\n</dt> <dd>Numeric HTTP result status code, or <code>null</code> on error.</dd> <dt>\n<span class=\"name\">content</span> <span class=\"type\">String</span>\n</dt> <dd>The body of the HTTP response as a string.</dd> <dt>\n<span class=\"name\">data</span> <span class=\"type\">Object or <code>null</code></span>\n</dt> <dd>If the response headers indicate JSON content, this contains the body of the document parsed as a JSON object.</dd> <dt>\n<span class=\"name\">headers</span> <span class=\"type\">Object</span>\n</dt> <dd>A dictionary of HTTP headers from the response.</dd> </dl> <p>Example server method:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.methods({checkTwitter: function (userId) {\n  check(userId, String);\n  this.unblock();\n  try {\n    var result = HTTP.call(\"GET\", \"http://api.twitter.com/xyz\",\n                           {params: {user: userId}});\n    return true;\n  } catch (e) {\n    // Got a network error, time-out or HTTP error in the 400 or 500 range.\n\n    return false;\n  }\n}});</pre> <p>Example asynchronous HTTP call:</p> <pre class=\"highlight js\" data-language=\"js\">HTTP.call(\"POST\", \"http://api.twitter.com/xyz\",\n          {data: {some: \"json\", stuff: 1}},\n          function (error, result) {\n            if (!error) {\n              Session.set(\"twizzled\", true);\n            }\n          });</pre>  <h2 class=\"api-heading\" id=\"HTTP-get\"> <div class=\"locus\"> Anywhere </div> <code>HTTP.get(url, [callOptions], [asyncCallback])</code> <div class=\"subtext-api\"> <code>import { HTTP } from 'meteor/http'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/http/httpcall_common.js#L49\" target=\"_blank\"> (http/httpcall_common.js, line 49) </a> </div> </h2>   <p>Send an HTTP <code>GET</code> request. Equivalent to calling <a href=\"#http_call\"><code>HTTP.call</code></a> with \"GET\" as the first argument.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>url</code> <span class=\"type\">String</span> </dt> <dd> <p>The URL to which the request should be sent.</p> </dd> <dt> <code>callOptions</code> <span class=\"type\">Object</span> </dt> <dd> <p>Options passed on to <a href=\"#http_call\"><code>HTTP.call</code></a>.</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Callback that is called when the request is completed. Required on the client.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"HTTP-post\"> <div class=\"locus\"> Anywhere </div> <code>HTTP.post(url, [callOptions], [asyncCallback])</code> <div class=\"subtext-api\"> <code>import { HTTP } from 'meteor/http'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/http/httpcall_common.js#L60\" target=\"_blank\"> (http/httpcall_common.js, line 60) </a> </div> </h2>   <p>Send an HTTP <code>POST</code> request. Equivalent to calling <a href=\"#http_call\"><code>HTTP.call</code></a> with \"POST\" as the first argument.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>url</code> <span class=\"type\">String</span> </dt> <dd> <p>The URL to which the request should be sent.</p> </dd> <dt> <code>callOptions</code> <span class=\"type\">Object</span> </dt> <dd> <p>Options passed on to <a href=\"#http_call\"><code>HTTP.call</code></a>.</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Callback that is called when the request is completed. Required on the client.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"HTTP-put\"> <div class=\"locus\"> Anywhere </div> <code>HTTP.put(url, [callOptions], [asyncCallback])</code> <div class=\"subtext-api\"> <code>import { HTTP } from 'meteor/http'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/http/httpcall_common.js#L71\" target=\"_blank\"> (http/httpcall_common.js, line 71) </a> </div> </h2>   <p>Send an HTTP <code>PUT</code> request. Equivalent to calling <a href=\"#http_call\"><code>HTTP.call</code></a> with \"PUT\" as the first argument.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>url</code> <span class=\"type\">String</span> </dt> <dd> <p>The URL to which the request should be sent.</p> </dd> <dt> <code>callOptions</code> <span class=\"type\">Object</span> </dt> <dd> <p>Options passed on to <a href=\"#http_call\"><code>HTTP.call</code></a>.</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Callback that is called when the request is completed. Required on the client.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"HTTP-del\"> <div class=\"locus\"> Anywhere </div> <code>HTTP.del(url, [callOptions], [asyncCallback])</code> <div class=\"subtext-api\"> <code>import { HTTP } from 'meteor/http'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/http/httpcall_common.js#L82\" target=\"_blank\"> (http/httpcall_common.js, line 82) </a> </div> </h2>   <p>Send an HTTP <code>DELETE</code> request. Equivalent to calling <a href=\"#http_call\"><code>HTTP.call</code></a> with \"DELETE\" as the first argument. (Named <code>del</code> to avoid conflict with the Javascript keyword <code>delete</code>)</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>url</code> <span class=\"type\">String</span> </dt> <dd> <p>The URL to which the request should be sent.</p> </dd> <dt> <code>callOptions</code> <span class=\"type\">Object</span> </dt> <dd> <p>Options passed on to <a href=\"#http_call\"><code>HTTP.call</code></a>.</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Callback that is called when the request is completed. Required on the client.</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/http.html\" class=\"_attribution-link\">https://docs.meteor.com/api/http.html</a>\n  </p>\n</div>\n","api/email":"<h1 class=\"title-page\">Email</h1> <div class=\"subtitle-page\">Documentation of Meteor's email API.</div>    <p>The <code>email</code> package allows sending email from a Meteor app. To use it, add the package to your project by running in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add email</pre> <p>The server reads from the <code>MAIL_URL</code> environment variable to determine how to send mail. Currently, Meteor supports sending mail over SMTP; the <code>MAIL_URL</code> environment variable should be of the form <code>smtp://USERNAME:PASSWORD@HOST:PORT/</code>.</p> <p>If <code>MAIL_URL</code> is not set, <code>Email.send</code> outputs the message to standard output instead.</p>  <h2 class=\"api-heading\" id=\"Email-send\"> <div class=\"locus\"> Server </div> <code>Email.send(options)</code> <div class=\"subtext-api\"> <code>import { Email } from 'meteor/email'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/email/email.js#L154\" target=\"_blank\"> (email/email.js, line 154) </a> </div> </h2>   <p>Send an email. Throws an <code>Error</code> on failure to contact mail server or if mail server returns an error. All fields should match <a href=\"http://tools.ietf.org/html/rfc5322\" target=\"_blank\" rel=\"external\">RFC5322</a> specification.</p> <p>If the <code>MAIL_URL</code> environment variable is set, actually sends the email. Otherwise, prints the contents of the email to standard out.</p> <p>Note that this package is based on mailcomposer version <code>0.1.15</code>, so make sure to refer to the documentation for that version if using the <code>attachments</code> or <code>mailComposer</code> options. <a href=\"https://github.com/andris9/mailcomposer/blob/7c0422b2de2dc61a60ba27cfa3353472f662aeb5/README.md\" target=\"_blank\" rel=\"external\">Click here to read the mailcomposer 0.1.15 docs</a>.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>from</code> <span class=\"type\">String</span> </dt> <dd> <p>\"From:\" address (required)</p> </dd> <dt> <code>to, cc, bcc, replyTo</code> <span class=\"type\">String or Array of Strings</span> </dt> <dd> <p>\"To:\", \"Cc:\", \"Bcc:\", and \"Reply-To:\" addresses</p> </dd> <dt> <code>subject</code> <span class=\"type\">String</span> </dt> <dd> <p>\"Subject:\" line</p> </dd> <dt> <code>text, html</code> <span class=\"type\">String</span> </dt> <dd> <p>Mail body (in plain text and/or HTML)</p> </dd> <dt> <code>headers</code> <span class=\"type\">Object</span> </dt> <dd> <p>Dictionary of custom headers</p> </dd> <dt> <code>attachments</code> <span class=\"type\">Array of Objects</span> </dt> <dd> <p>Array of attachment objects, as described in the <a href=\"https://github.com/andris9/mailcomposer/blob/7c0422b2de2dc61a60ba27cfa3353472f662aeb5/README.md#add-attachments\" target=\"_blank\" rel=\"external\">mailcomposer documentation</a>.</p> </dd> <dt> <code>mailComposer</code> <span class=\"type\">MailComposer</span> </dt> <dd> <p>A <a href=\"https://github.com/andris9/mailcomposer\" target=\"_blank\" rel=\"external\">MailComposer</a> object representing the message to be sent. Overrides all other options. You can access the <code>mailcomposer</code> npm module at <code>EmailInternals.NpmModules.mailcomposer.module</code>.</p> </dd> </dl>   <p>You must provide the <code>from</code> option and at least one of <code>to</code>, <code>cc</code>, and <code>bcc</code>; all other options are optional.</p> <p><code>Email.send</code> only works on the server. Here is an example of how a client could use a server method call to send an email. (In an actual application, you’d need to be careful to limit the emails that a client could send, to prevent your server from being used as a relay by spammers.)</p> <pre class=\"highlight js\" data-language=\"js\">// In your server code: define a method that the client can call\nMeteor.methods({\n  sendEmail: function (to, from, subject, text) {\n    check([to, from, subject, text], [String]);\n\n    // Let other method calls from the same client start running,\n\n    // without waiting for the email sending to complete.\n\n    this.unblock();\n\n    Email.send({\n      to: to,\n      from: from,\n      subject: subject,\n      text: text\n    });\n  }\n});\n\n// In your client code: asynchronously send an email\nMeteor.call('sendEmail',\n            'alice@example.com',\n            'bob@example.com',\n            'Hello from Meteor!',\n            'This is a test of Email.send.');</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/email.html\" class=\"_attribution-link\">https://docs.meteor.com/api/email.html</a>\n  </p>\n</div>\n","api/assets":"<h1 class=\"title-page\">Assets</h1> <div class=\"subtitle-page\">Documentation of how to use assets in Meteor.</div>    <blockquote> <p>Currently, it is not possible to import <code>Assets</code> as an ES6 module. Any of the <code>Assets</code> methods below can simply be called directly in any Meteor server code.</p> </blockquote> <p><code>Assets</code> allows server code in a Meteor application to access static server assets, which are located in the <code>private</code> subdirectory of an application’s tree. Assets are not processed as source files and are copied directly into your application’s bundle.</p>  <h2 class=\"api-heading\" id=\"Assets-getText\"> <div class=\"locus\"> Server </div> <code>Assets.getText(assetPath, [asyncCallback])</code>  </h2>   <p>Retrieve the contents of the static server asset as a UTF8-encoded string.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>assetPath</code> <span class=\"type\">String</span> </dt> <dd> <p>The path of the asset, relative to the application's <code>private</code> subdirectory.</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback, which is called asynchronously with the error or result after the function is complete. If not provided, the function runs synchronously.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Assets-getBinary\"> <div class=\"locus\"> Server </div> <code>Assets.getBinary(assetPath, [asyncCallback])</code>  </h2>   <p>Retrieve the contents of the static server asset as an <a href=\"#ejson_new_binary\">EJSON Binary</a>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>assetPath</code> <span class=\"type\">String</span> </dt> <dd> <p>The path of the asset, relative to the application's <code>private</code> subdirectory.</p> </dd> <dt> <code>asyncCallback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback, which is called asynchronously with the error or result after the function is complete. If not provided, the function runs synchronously.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Assets-absoluteFilePath\"> <div class=\"locus\"> Server [Not in build plugins] </div> <code>Assets.absoluteFilePath(assetPath)</code>  </h2>   <p>Get the absolute path to the static server asset. Note that assets are read-only.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>assetPath</code> <span class=\"type\">String</span> </dt> <dd> <p>The path of the asset, relative to the application's <code>private</code> subdirectory.</p> </dd> </dl>   <p>Static server assets are included by placing them in the application’s <code>private</code> subdirectory. For example, if an application’s <code>private</code> subdirectory includes a directory called <code>nested</code> with a file called <code>data.txt</code> inside it, then server code can read <code>data.txt</code> by running:</p> <pre class=\"highlight js\" data-language=\"js\">\nvar data = Assets.getText('nested/data.txt');</pre> <p>Note: Packages can only access their own assets. If you need to read the assets of a different package, or of the enclosing app, you need to get a reference to that package’s <code>Assets</code> object.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/assets.html\" class=\"_attribution-link\">https://docs.meteor.com/api/assets.html</a>\n  </p>\n</div>\n","api/mobile-config":"<h1 class=\"title-page\">Mobile Configuration</h1> <div class=\"subtitle-page\">Documentation of Meteor's Cordova configuration API.</div>    <p>If your Meteor application targets mobile platforms such as iOS or Android, you can configure your app’s metadata and build process in a special top-level file called <code>mobile-config.js</code> which is <em>not</em> included in your application and is used only for this configuration.</p> <p>The code snippet below is an example <code>mobile-config.js</code> file. The rest of this section will explain the specific API commands in greater detail.</p> <pre class=\"highlight js\" data-language=\"js\">// This section sets up some basic app metadata,\n// the entire section is optional.\nApp.info({\n  id: 'com.example.matt.uber',\n  name: 'über',\n  description: 'Get über power in one button click',\n  author: 'Matt Development Group',\n  email: 'contact@example.com',\n  website: 'http://example.com'\n\n});\n\n// Set up resources such as icons and launch screens.\nApp.icons({\n  'iphone': 'icons/icon-60.png',\n  'iphone_2x': 'icons/icon-60@2x.png',\n  // ... more screen sizes and platforms ...\n\n});\n\nApp.launchScreens({\n  'iphone': 'splash/Default~iphone.png',\n  'iphone_2x': 'splash/Default@2x~iphone.png',\n  // ... more screen sizes and platforms ...\n\n});\n\n// Set PhoneGap/Cordova preferences\nApp.setPreference('BackgroundColor', '0xff0000ff');\nApp.setPreference('HideKeyboardFormAccessoryBar', true);\nApp.setPreference('Orientation', 'default');\nApp.setPreference('Orientation', 'all', 'ios');\n\n// Pass preferences for a particular PhoneGap/Cordova plugin\nApp.configurePlugin('com.phonegap.plugins.facebookconnect', {\n  APP_ID: '1234567890',\n  API_KEY: 'supersecretapikey'\n\n});</pre>  <h2 class=\"api-heading\" id=\"App-info\">  <code>App.info(options)</code>  </h2>   <p>Set your mobile app's core configuration information.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>id, version, name, description, author, email, website</code> <span class=\"type\">String</span> </dt> <dd> <p>Each of the options correspond to a key in the app's core configuration as described in the <a href=\"http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_core_configuration_elements\" target=\"_blank\" rel=\"external\">Cordova documentation</a>.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"App-setPreference\">  <code>App.setPreference(name, value, [platform])</code>  </h2>   <p>Add a preference for your build as described in the <a href=\"http://cordova.apache.org/docs/en/5.1.1/config_ref_index.md.html#The%20config.xml%20File_global_preferences\" target=\"_blank\" rel=\"external\">Cordova documentation</a>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>A preference name supported by Cordova's <code>config.xml</code>.</p> </dd> <dt> <code>value</code> <span class=\"type\">String</span> </dt> <dd> <p>The value for that preference.</p> </dd> <dt> <code>platform</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. A platform name (either <code>ios</code> or <code>android</code>) to add a platform-specific preference.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"App-accessRule\">  <code>App.accessRule(pattern, [options])</code>  </h2>   <p>Set a new access rule based on origin domain for your app. By default your application has a limited list of servers it can contact. Use this method to extend this list.</p> <p>Default access rules:</p> <ul> <li>\n<code>tel:*</code>, <code>geo:*</code>, <code>mailto:*</code>, <code>sms:*</code>, <code>market:*</code> are allowed and are handled by the system (e.g. opened in the phone app or an email client)</li> <li>\n<code>http://localhost:*</code> is used to serve the app's assets from.</li> <li>The domain or address of the Meteor server to connect to for DDP and hot code push of new versions.</li> </ul> <p>Read more about domain patterns in <a href=\"http://cordova.apache.org/docs/en/6.0.0/guide_appdev_whitelist_index.md.html\" target=\"_blank\" rel=\"external\">Cordova docs</a>.</p> <p>Starting with Meteor 1.0.4 access rule for all domains and protocols (<code>&lt;access origin=\"*\"/&gt;</code>) is no longer set by default due to <a href=\"http://cordova.apache.org/announcements/2014/08/04/android-351.html\" target=\"_blank\" rel=\"external\">certain kind of possible attacks</a>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>pattern</code> <span class=\"type\">String</span> </dt> <dd> <p>The pattern defining affected domains or URLs.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>type</code> <span class=\"type\">String</span> </dt> <dd> <p>Possible values:</p> <ul> <li>\n<strong><code>'intent'</code></strong>: Controls which URLs the app is allowed to ask the system to open. (e.g. in the phone app or an email client).</li> <li>\n<strong><code>'navigation'</code></strong>: Controls which URLs the WebView itself can be navigated to (can also needed for iframes).</li> <li>\n<strong><code>'network'</code> or undefined</strong>: Controls which network requests (images, XHRs, etc) are allowed to be made.</li> </ul> </dd> <dt> <code>launchExternal</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>(Deprecated, use <code>type: 'intent'</code> instead.)</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"App-configurePlugin\">  <code>App.configurePlugin(id, config)</code>  </h2>   <p>Set the build-time configuration for a Cordova plugin.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>id</code> <span class=\"type\">String</span> </dt> <dd> <p>The identifier of the plugin you want to configure.</p> </dd> <dt> <code>config</code> <span class=\"type\">Object</span> </dt> <dd> <p>A set of key-value pairs which will be passed at build-time to configure the specified plugin.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"App-icons\">  <code>App.icons(icons)</code>  </h2>   <p>Set the icons for your mobile app.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>icons</code> <span class=\"type\">Object</span> </dt> <dd> <p>An Object where the keys are different devices and screen sizes, and values are image paths relative to the project root directory.</p> <p>Valid key values:</p> <ul> <li>\n<code>iphone_2x</code> (120x120)</li> <li>\n<code>iphone_3x</code> (180x180)</li> <li>\n<code>ipad</code> (76x76)</li> <li>\n<code>ipad_2x</code> (152x152)</li> <li>\n<code>ipad_pro</code> (167x167)</li> <li>\n<code>ios_settings</code> (29x29)</li> <li>\n<code>ios_settings_2x</code> (58x58)</li> <li>\n<code>ios_settings_3x</code> (87x87)</li> <li>\n<code>ios_spotlight</code> (40x40)</li> <li>\n<code>ios_spotlight_2x</code> (80x80)</li> <li>\n<code>android_mdpi</code> (48x48)</li> <li>\n<code>android_hdpi</code> (72x72)</li> <li>\n<code>android_xhdpi</code> (96x96)</li> <li>\n<code>android_xxhdpi</code> (144x144)</li> <li>\n<code>android_xxxhdpi</code> (192x192)</li> </ul> </dd> </dl>    <h2 class=\"api-heading\" id=\"App-launchScreens\">  <code>App.launchScreens(launchScreens)</code>  </h2>   <p>Set the launch screen images for your mobile app.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>launchScreens</code> <span class=\"type\">Object</span> </dt> <dd> <p>A dictionary where keys are different devices, screen sizes, and orientations, and the values are image paths relative to the project root directory.</p> <p>For Android, launch screen images should be special \"Nine-patch\" image files that specify how they should be stretched. See the <a href=\"https://developer.android.com/guide/topics/graphics/2d-graphics.html#nine-patch\" target=\"_blank\" rel=\"external\">Android docs</a>.</p> <p>Valid key values:</p> <ul> <li>\n<code>iphone_2x</code> (640x960)</li> <li>\n<code>iphone5</code> (640x1136)</li> <li>\n<code>iphone6</code> (750x1334)</li> <li>\n<code>iphone6p_portrait</code> (1242x2208)</li> <li>\n<code>iphone6p_landscape</code> (2208x1242)</li> <li>\n<code>ipad_portrait</code> (768x1024)</li> <li>\n<code>ipad_portrait_2x</code> (1536x2048)</li> <li>\n<code>ipad_landscape</code> (1024x768)</li> <li>\n<code>ipad_landscape_2x</code> (2048x1536)</li> <li>\n<code>android_mdpi_portrait</code> (320x470)</li> <li>\n<code>android_mdpi_landscape</code> (470x320)</li> <li>\n<code>android_hdpi_portrait</code> (480x640)</li> <li>\n<code>android_hdpi_landscape</code> (640x480)</li> <li>\n<code>android_xhdpi_portrait</code> (720x960)</li> <li>\n<code>android_xhdpi_landscape</code> (960x720)</li> <li>\n<code>android_xxhdpi_portrait</code> (1080x1440)</li> <li>\n<code>android_xxhdpi_landscape</code> (1440x1080)</li> </ul> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/mobile-config.html\" class=\"_attribution-link\">https://docs.meteor.com/api/mobile-config.html</a>\n  </p>\n</div>\n","packages/appcache":"<h1 class=\"title-page\">appcache</h1> <div class=\"subtitle-page\">Documentation of Meteor's `appcache` package.</div>    <p>The <code>appcache</code> package stores the static parts of a Meteor application (the client side Javascript, HTML, CSS, and images) in the browser’s <a href=\"https://en.wikipedia.org/wiki/AppCache\" target=\"_blank\" rel=\"external\">application cache</a>. To enable caching simply add the <code>appcache</code> package to your project.</p> <ul> <li>\n<p>Once a user has visited a Meteor application for the first time and the application has been cached, on subsequent visits the web page loads faster because the browser can load the application out of the cache without contacting the server first.</p> </li> <li>\n<p>Hot code pushes are loaded by the browser in the background while the app continues to run. Once the new code has been fully loaded the browser is able to switch over to the new code quickly.</p> </li> <li>\n<p>The application cache allows the application to be loaded even when the browser doesn’t have an Internet connection, and so enables using the app offline.</p> </li> </ul> <p>(Note however that the <code>appcache</code> package by itself doesn’t make <em>data</em> available offline: in an application loaded offline, a Meteor Collection will appear to be empty in the client until the Internet becomes available and the browser is able to establish a DDP connection).</p> <p>To turn AppCache off for specific browsers use:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.AppCache.config({\n  chrome: false,\n  firefox: false\n\n});</pre> <p>The supported browsers that can be enabled or disabled include, but are not limited to, <code>android</code>, <code>chrome</code>, <code>chromium</code>, <code>chromeMobileIOS</code>, <code>firefox</code>, <code>ie</code>, <code>mobileSafari</code> and <code>safari</code>.</p> <p>Browsers limit the amount of data they will put in the application cache, which can vary due to factors such as how much disk space is free. Unfortunately if your application goes over the limit rather than disabling the application cache altogether and running the application online, the browser will instead fail that particular <em>update</em> of the cache, leaving your users running old code.</p> <p>Thus it’s best to keep the size of the cache below 5MB. The <code>appcache</code> package will print a warning on the Meteor server console if the total size of the resources being cached is over 5MB.</p> <p>If you have files too large to fit in the cache you can disable caching by URL prefix. For example,</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.AppCache.config({onlineOnly: ['/online/']});</pre> <p>causes files in your <code>public/online</code> directory to not be cached, and so they will only be available online. You can then move your large files into that directory and refer to them at the new URL:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;img src=\"/online/bigimage.jpg\"&gt;</pre> <p>If you’d prefer not to move your files, you can use the file names themselves as the URL prefix:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.AppCache.config({\n  onlineOnly: [\n    '/bigimage.jpg',\n    '/largedata.json'\n\n  ]\n});</pre> <p>though keep in mind that since the exclusion is by prefix (this is a limitation of the application cache manifest), excluding <code>/largedata.json</code> will also exclude such URLs as <code>/largedata.json.orig</code> and <code>/largedata.json/file1</code>.</p> <p>For more information about how Meteor interacts with the application cache, see the <a href=\"https://github.com/meteor/meteor/wiki/AppCache\" target=\"_blank\" rel=\"external\">AppCache page</a> in the Meteor wiki.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/appcache.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/appcache.html</a>\n  </p>\n</div>\n","packages/accounts-ui":"<h1 class=\"title-page\">accounts-ui</h1> <div class=\"subtitle-page\">Documentation of Meteor's `accounts-ui` package.</div>    <p>A turn-key user interface for Meteor Accounts.</p> <p>To add Accounts and a set of login controls to an application, add the <code>accounts-ui</code> package and at least one login provider package: <code>accounts-password</code>, <code>accounts-facebook</code>, <code>accounts-github</code>, <code>accounts-google</code>, <code>accounts-twitter</code>, or <code>accounts-weibo</code>.</p> <p>Then simply add the <code>{{&gt; loginButtons}}</code> helper to an HTML file. This will place a login widget on the page. If there is only one provider configured and it is an external service, this will add a login/logout button. If you use <code>accounts-password</code> or use multiple external login services, this will add a “Sign in” link which opens a dropdown menu with login options. If you plan to position the login dropdown in the right edge of the screen, use <code>{{&gt; loginButtons align=\"right\"}}</code> in order to get the dropdown to lay itself out without expanding off the edge of the screen.</p> <p>To configure the behavior of <code>{{&gt; loginButtons}}</code>, use <a href=\"#accounts_ui_config\"><code>Accounts.ui.config</code></a>.</p> <p><code>accounts-ui</code> also includes modal popup dialogs to handle links from <a href=\"#accounts_sendresetpasswordemail\"><code>sendResetPasswordEmail</code></a>, <a href=\"#accounts_sendverificationemail\"><code>sendVerificationEmail</code></a>, and <a href=\"#accounts_sendenrollmentemail\"><code>sendEnrollmentEmail</code></a>. These do not have to be manually placed in HTML: they are automatically activated when the URLs are loaded.</p> <p>If you want to control the look and feel of your accounts system a little more, we recommend reading the <a href=\"http://guide.meteor.com/accounts.html#useraccounts\" target=\"_blank\" rel=\"external\">useraccounts</a> section of the Meteor Guide.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/accounts-ui.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/accounts-ui.html</a>\n  </p>\n</div>\n","api/accounts":"<h1 class=\"title-page\">Accounts</h1> <div class=\"subtitle-page\">Documentation of how to use Meteor's accounts functionality.</div>    <p>The Meteor Accounts system builds on top of the <code>userId</code> support in <a href=\"#publish_userId\"><code>publish</code></a> and <a href=\"#method_userId\"><code>methods</code></a>. The core packages add the concept of user documents stored in the database, and additional packages add <a href=\"#accounts_passwords\">secure password authentication</a>, <a href=\"#meteor_loginwithexternalservice\">integration with third party login services</a>, and a <a href=\"#accountsui\">pre-built user interface</a>.</p> <p>The basic Accounts system is in the <code>accounts-base</code> package, but applications typically include this automatically by adding one of the login provider packages: <code>accounts-password</code>, <code>accounts-facebook</code>, <code>accounts-github</code>, <code>accounts-google</code>, <code>accounts-meetup</code>, <code>accounts-twitter</code>, or <code>accounts-weibo</code>.</p> <p>Read more about customizing user accounts in the <a href=\"http://guide.meteor.com/accounts.html\" target=\"_blank\" rel=\"external\">Accounts</a> article in the Meteor Guide.</p>  <h2 class=\"api-heading\" id=\"Meteor-user\"> <div class=\"locus\"> Anywhere but publish functions </div> <code>Meteor.user()</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L245\" target=\"_blank\"> (accounts-base/accounts_common.js, line 245) </a> </div> </h2>   <p>Get the current user record, or <code>null</code> if no user is logged in. A reactive data source.</p>    <p>Retrieves the user record for the current user from the <a href=\"#meteor_users\"><code>Meteor.users</code></a> collection.</p> <p>On the client, this will be the subset of the fields in the document that are published from the server (other fields won’t be available on the client). By default the server publishes <code>username</code>, <code>emails</code>, and <code>profile</code> (writable by user). See <a href=\"#meteor_users\"><code>Meteor.users</code></a> for more on the fields used in user documents.</p> <p>On the server, this will fetch the record from the database. To improve the latency of a method that uses the user document multiple times, save the returned record to a variable instead of re-calling <code>Meteor.user()</code>.</p>  <h2 class=\"api-heading\" id=\"Meteor-userId\"> <div class=\"locus\"> Anywhere but publish functions </div> <code>Meteor.userId()</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L236\" target=\"_blank\"> (accounts-base/accounts_common.js, line 236) </a> </div> </h2>   <p>Get the current user id, or <code>null</code> if no user is logged in. A reactive data source.</p>     <h2 class=\"api-heading\" id=\"Meteor-users\"> <div class=\"locus\"> Anywhere </div> <code>Meteor.users</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/server_main.js#L21\" target=\"_blank\"> (accounts-base/server_main.js, line 21) </a> </div> </h2>   <p>A <a href=\"#collections\">Mongo.Collection</a> containing user documents.</p>    <p>This collection contains one document per registered user. Here’s an example user document:</p> <pre class=\"highlight js\" data-language=\"js\">{\n  _id: \"bbca5d6a-2156-41c4-89da-0329e8c99a4f\",  // Meteor.userId()\n\n  username: \"cool_kid_13\", // unique name\n\n  emails: [\n    // each email address can only belong to one user.\n\n    { address: \"cool@example.com\", verified: true },\n    { address: \"another@different.com\", verified: false }\n  ],\n  createdAt: Wed Aug 21 2013 15:16:52 GMT-0700 (PDT),\n  profile: {\n    // The profile is writable by the user by default.\n\n    name: \"Joe Schmoe\"\n\n  },\n  services: {\n    facebook: {\n      id: \"709050\", // facebook id\n\n      accessToken: \"AAACCgdX7G2...AbV9AZDZD\"\n\n    },\n    resume: {\n      loginTokens: [\n        { token: \"97e8c205-c7e4-47c9-9bea-8e2ccc0694cd\",\n          when: 1349761684048 }\n      ]\n    }\n  }\n}</pre> <p>A user document can contain any data you want to store about a user. Meteor treats the following fields specially:</p> <ul> <li>\n<code>username</code>: a unique String identifying the user.</li> <li>\n<code>emails</code>: an Array of Objects with keys <code>address</code> and <code>verified</code>; an email address may belong to at most one user. <code>verified</code> is a Boolean which is true if the user has <a href=\"#accounts_verifyemail\">verified the address</a> with a token sent over email.</li> <li>\n<code>createdAt</code>: the Date at which the user document was created.</li> <li>\n<code>profile</code>: an Object which the user can create and update with any data. Do not store anything on <code>profile</code> that you wouldn’t want the user to edit unless you have a deny rule on the <code>Meteor.users</code> collection.</li> <li>\n<code>services</code>: an Object containing data used by particular login services. For example, its <code>reset</code> field contains tokens used by <a href=\"#accounts_forgotpassword\">forgot password</a> links, and its <code>resume</code> field contains tokens used to keep you logged in between sessions.</li> </ul> <p>Like all <a href=\"#collections\">Mongo.Collection</a>s, you can access all documents on the server, but only those specifically published by the server are available on the client.</p> <p>By default, the current user’s <code>username</code>, <code>emails</code> and <code>profile</code> are published to the client. You can publish additional fields for the current user with:</p> <pre class=\"highlight js\" data-language=\"js\">// server\nMeteor.publish(\"userData\", function () {\n  if (this.userId) {\n    return Meteor.users.find({_id: this.userId},\n                             {fields: {'other': 1, 'things': 1}});\n  } else {\n    this.ready();\n  }\n});\n\n// client\nMeteor.subscribe(\"userData\");</pre> <p>If the autopublish package is installed, information about all users on the system is published to all clients. This includes <code>username</code>, <code>profile</code>, and any fields in <code>services</code> that are meant to be public (eg <code>services.facebook.id</code>, <code>services.twitter.screenName</code>). Additionally, when using autopublish more information is published for the currently logged in user, including access tokens. This allows making API calls directly from the client for services that allow this.</p> <p>Users are by default allowed to specify their own <code>profile</code> field with <a href=\"#accounts_createuser\"><code>Accounts.createUser</code></a> and modify it with <code>Meteor.users.update</code>. To allow users to edit additional fields, use <a href=\"#allow\"><code>Meteor.users.allow</code></a>. To forbid users from making any modifications to their user document:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.users.deny({update: function () { return true; }});</pre>  <h2 class=\"api-heading\" id=\"Meteor-loggingIn\"> <div class=\"locus\"> Client </div> <code>Meteor.loggingIn()</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L137\" target=\"_blank\"> (accounts-base/accounts_client.js, line 137) </a> </div> </h2>   <p>True if a login method (such as <code>Meteor.loginWithPassword</code>, <code>Meteor.loginWithFacebook</code>, or <code>Accounts.createUser</code>) is currently in progress. A reactive data source.</p>    <p>For example, <a href=\"#accountsui\">the <code>accounts-ui</code> package</a> uses this to display an animation while the login request is being processed.</p>  <h2 class=\"api-heading\" id=\"Meteor-logout\"> <div class=\"locus\"> Client </div> <code>Meteor.logout([callback])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L345\" target=\"_blank\"> (accounts-base/accounts_client.js, line 345) </a> </div> </h2>   <p>Log the user out.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Meteor-logoutOtherClients\"> <div class=\"locus\"> Client </div> <code>Meteor.logoutOtherClients([callback])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L355\" target=\"_blank\"> (accounts-base/accounts_client.js, line 355) </a> </div> </h2>   <p>Log out other clients logged in as the current user, but does not log out the client that calls this function.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl>   <p>For example, when called in a user’s browser, connections in that browser remain logged in, but any other browsers or DDP clients logged in as that user will be logged out.</p>  <h2 class=\"api-heading\" id=\"Meteor-loginWithPassword\"> <div class=\"locus\"> Client </div> <code>Meteor.loginWithPassword(user, password, [callback])</code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_client.js#L24\" target=\"_blank\"> (accounts-password/password_client.js, line 24) </a> </div> </h2>   <p>Log the user in with a password.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>user</code> <span class=\"type\">Object or String</span> </dt> <dd> <p>Either a string interpreted as a username or an email; or an object with a single key: <code>email</code>, <code>username</code> or <code>id</code>. Username or email match in a case insensitive manner.</p> </dd> <dt> <code>password</code> <span class=\"type\">String</span> </dt> <dd> <p>The user's password.</p> </dd> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl>   <p>If there are multiple users with a username or email only differing in case, a case sensitive match is required. Although <code>createUser</code> won’t let you create users with ambiguous usernames or emails, this could happen with existing databases or if you modify the users collection directly.</p> <p>This function is provided by the <code>accounts-password</code> package. See the <a href=\"#accounts_passwords\">Passwords</a> section below.</p>  <h2 class=\"api-heading\" id=\"Meteor-loginWith&lt;ExternalService&gt;\"> <div class=\"locus\"> Client </div> <code>Meteor.loginWith<externalservice>([options], [callback])</externalservice></code> <div class=\"subtext-api\"> <code>import { Meteor } from 'meteor/meteor'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-oauth/oauth_client.js#L3\" target=\"_blank\"> (accounts-oauth/oauth_client.js, line 3) </a> </div> </h2>   <p>Log the user in using an external service.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure. The callback cannot be called if you are using the \"redirect\" <code>loginStyle</code>, because the app will have reloaded in the meantime; try using <a href=\"#accounts_onlogin\">client-side login hooks</a> instead.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>requestPermissions</code> <span class=\"type\">Array of Strings</span> </dt> <dd> <p>A list of permissions to request from the user.</p> </dd> <dt> <code>requestOfflineToken</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>If true, asks the user for permission to act on their behalf when offline. This stores an additional offline token in the <code>services</code> field of the user document. Currently only supported with Google.</p> </dd> <dt> <code>loginUrlParameters</code> <span class=\"type\">Object</span> </dt> <dd> <p>Provide additional parameters to the authentication uri. Currently only supported with Google {@url https://developers.google.com/identity/protocols/OpenIDConnect#authenticationuriparameters}.</p> </dd> <dt> <code>loginHint</code> <span class=\"type\">String</span> </dt> <dd> <p>An email address that the external service will use to pre-fill the login prompt. Currently only supported with Meteor developer accounts and Google accounts. If used with Google, the Google User ID can also be passed.</p> </dd> <dt> <code>loginStyle</code> <span class=\"type\">String</span> </dt> <dd> <p>Login style (\"popup\" or \"redirect\", defaults to the login service configuration). The \"popup\" style opens the login page in a separate popup window, which is generally preferred because the Meteor application doesn't need to be reloaded. The \"redirect\" style redirects the Meteor application's window to the login page, and the login service provider redirects back to the Meteor application which is then reloaded. The \"redirect\" style can be used in situations where a popup window can't be opened, such as in a mobile UIWebView. The \"redirect\" style however relies on session storage which isn't available in Safari private mode, so the \"popup\" style will be forced if session storage can't be used.</p> </dd> <dt> <code>redirectUrl</code> <span class=\"type\">String</span> </dt> <dd> <p>If using \"redirect\" login style, the user will be returned to this URL after authorisation has been completed.</p> </dd> </dl>   <p>Available functions are:</p> <ul> <li><code>Meteor.loginWithMeteorDeveloperAccount</code></li> <li><code>Meteor.loginWithFacebook</code></li> <li><code>Meteor.loginWithGithub</code></li> <li><code>Meteor.loginWithGoogle</code></li> <li><code>Meteor.loginWithMeetup</code></li> <li><code>Meteor.loginWithTwitter</code></li> <li><code>Meteor.loginWithWeibo</code></li> </ul> <p>These functions initiate the login process with an external service (eg: Facebook, Google, etc), using OAuth. When called they open a new pop-up window that loads the provider’s login page. Once the user has logged in with the provider, the pop-up window is closed and the Meteor client logs in to the Meteor server with the information provided by the external service.</p> <h3 id=\"requestpermissions\" name=\"requestpermissions\">Requesting Permissions</h3> <p>In addition to identifying the user to your application, some services have APIs that allow you to take action on behalf of the user. To request specific permissions from the user, pass the <code>requestPermissions</code> option the login function. This will cause the user to be presented with an additional page in the pop-up dialog to permit access to their data. The user’s <code>accessToken</code> — with permissions to access the service’s API — is stored in the <code>services</code> field of the user document. The supported values for <code>requestPermissions</code> differ for each login service and are documented on their respective developer sites:</p> <ul> <li>Facebook: <a href=\"http://developers.facebook.com/docs/authentication/permissions/\" target=\"_blank\" rel=\"external\">http://developers.facebook.com/docs/authentication/permissions/</a>\n</li> <li>GitHub: <a href=\"http://developer.github.com/v3/oauth/#scopes\" target=\"_blank\" rel=\"external\">http://developer.github.com/v3/oauth/#scopes</a>\n</li> <li>Google: <a href=\"https://developers.google.com/identity/protocols/googlescopes\" target=\"_blank\" rel=\"external\">https://developers.google.com/identity/protocols/googlescopes</a>\n</li> <li>Meetup: <a href=\"http://www.meetup.com/meetup_api/auth/#oauth2-scopes\" target=\"_blank\" rel=\"external\">http://www.meetup.com/meetup_api/auth/#oauth2-scopes</a>\n</li> <li>Twitter, Weibo, Meteor developer accounts: <code>requestPermissions</code> currently not supported</li> </ul> <p>External login services typically require registering and configuring your application before use. The easiest way to do this is with the <a href=\"#accountsui\"><code>accounts-ui</code> package</a> which presents a step-by-step guide to configuring each service. However, the data can be also be entered manually in the <code>ServiceConfiguration.configurations</code> collection, which is exported by the <code>service-configuration</code> package.</p> <h3 id=\"service-configuration\">Configuring Services</h3> <p>First, add the service configuration package:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add service-configuration</pre> <p>Then, in your app:</p> <pre class=\"highlight js\" data-language=\"js\">ServiceConfiguration.configurations.upsert(\n  { service: \"weibo\" },\n  {\n    $set: {\n      clientId: \"1292962797\",\n      loginStyle: \"popup\",\n      secret: \"75a730b58f5691de5522789070c319bc\"\n\n    }\n  }\n);</pre> <p>Each external service has its own login provider package and login function. For example, to support GitHub login, run in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add accounts-github</pre> <p>and use the <code>Meteor.loginWithGithub</code> function:</p> <pre class=\"highlight javascript\" data-language=\"javascript\">Meteor.loginWithGithub({\n  requestPermissions: ['user', 'public_repo']\n}, function (err) {\n  if (err)\n    Session.set('errorMessage', err.reason || 'Unknown error');\n});</pre> <p>Login service configuration is sent from the server to the client over DDP when your app starts up; you may not call the login function until the configuration is loaded. The function <code>Accounts.loginServicesConfigured()</code> is a reactive data source that will return true once the login service is configured; you should not make login buttons visible or active until it is true.</p> <p>Ensure that your <a href=\"#meteor_absoluteurl\"><code>$ROOT_URL</code></a> matches the authorized domain and callback URL that you configure with the external service (for instance, if you are running Meteor behind a proxy server, <code>$ROOT_URL</code> should be the externally-accessible URL, not the URL inside your proxy).</p> <h3 id=\"popup-vs-redirect-flow\">Popup versus redirect flow</h3> <p>When configuring OAuth login with a provider (such as Facebook or Google), Meteor lets you choose a popup- or redirect-based flow. In a popup-based flow, when a user logs in, they will be prompted to login at the provider in a popup window. In a redirect-based flow, the user’s whole browser window will be redirected to the login provider, and the window will redirect back to your app when the login is completed.</p> <p>You can also pick which type of login to do by passing an option to <a href=\"#meteor_loginwithexternalservice\"><code>Meteor.loginWith&lt;ExternalService&gt;</code></a></p> <p>Usually, the popup-based flow is preferable because the user will not have to reload your whole app at the end of the login flow. However, the popup-based flow requires browser features such as <code>window.close</code> and <code>window.opener</code> that are not available in all mobile environments. In particular, we recommend using <code>Meteor.loginWith&lt;ExternalService&gt;({ loginStyle: \"redirect\" })</code> in the following environments:</p> <ul> <li>Inside UIWebViews (when your app is loaded inside a mobile app)</li> <li>In Safari on iOS8 (<code>window.close</code> is not supported due to a bug)</li> </ul>  <h2 class=\"api-heading\" id=\"currentUser\">  <code>{{ currentUser }}</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L422\" target=\"_blank\"> (accounts-base/accounts_client.js, line 422) </a> </div> </h2>   <p>Calls <a href=\"#meteor_user\">Meteor.user()</a>. Use <code>{{#if currentUser}}</code> to check whether the user is logged in.</p>     <h2 class=\"api-heading\" id=\"loggingIn\">  <code>{{ loggingIn }}</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L432\" target=\"_blank\"> (accounts-base/accounts_client.js, line 432) </a> </div> </h2>   <p>Calls <a href=\"#meteor_loggingin\">Meteor.loggingIn()</a>.</p>     <h2 class=\"api-heading\" id=\"Accounts-ui-config\"> <div class=\"locus\"> Client </div> <code>Accounts.ui.config(options)</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-ui-unstyled/accounts_ui.js#L27\" target=\"_blank\"> (accounts-ui-unstyled/accounts_ui.js, line 27) </a> </div> </h2>   <p>Configure the behavior of <a href=\"#accountsui\"><code>{{&gt; loginButtons}}</code></a>.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>requestPermissions</code> <span class=\"type\">Object</span> </dt> <dd> <p>Which <a href=\"#requestpermissions\">permissions</a> to request from the user for each external service.</p> </dd> <dt> <code>requestOfflineToken</code> <span class=\"type\">Object</span> </dt> <dd> <p>To ask the user for permission to act on their behalf when offline, map the relevant external service to <code>true</code>. Currently only supported with Google. See <a href=\"#meteor_loginwithexternalservice\">Meteor.loginWithExternalService</a> for more details.</p> </dd> <dt> <code>forceApprovalPrompt</code> <span class=\"type\">Object</span> </dt> <dd> <p>If true, forces the user to approve the app's permissions, even if previously approved. Currently only supported with Google.</p> </dd> <dt> <code>passwordSignupFields</code> <span class=\"type\">String</span> </dt> <dd> <p>Which fields to display in the user creation form. One of '<code>USERNAME_AND_EMAIL</code>', '<code>USERNAME_AND_OPTIONAL_EMAIL</code>', '<code>USERNAME_ONLY</code>', or '<code>EMAIL_ONLY</code>' (default).</p> </dd> </dl>   <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">Accounts.ui.config({\n  requestPermissions: {\n    facebook: ['user_likes'],\n    github: ['user', 'repo']\n  },\n  requestOfflineToken: {\n    google: true\n\n  },\n  passwordSignupFields: 'USERNAME_AND_OPTIONAL_EMAIL'\n\n});</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/accounts.html\" class=\"_attribution-link\">https://docs.meteor.com/api/accounts.html</a>\n  </p>\n</div>\n","api/blaze":"<h1 class=\"title-page\">Blaze</h1> <div class=\"subtitle-page\">Documentation of how to use Blaze, Meteor's reactive rendering engine.</div>    <p>Blaze is the package that makes reactive templates possible. You can use the Blaze API directly in order to render templates programmatically and manipulate “Views,” the building blocks of reactive templates. For more information, check out the <a href=\"https://www.meteor.com/blaze\" target=\"_blank\" rel=\"external\">Blaze project page</a>.</p>  <h2 class=\"api-heading\" id=\"Blaze-render\"> <div class=\"locus\"> Client </div> <code>Blaze.render(templateOrView, parentNode, [nextNode], [parentView])</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L614\" target=\"_blank\"> (blaze/view.js, line 614) </a> </div> </h2>   <p>Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered <a href=\"#blaze_view\">View</a> which can be passed to <a href=\"#blaze_remove\"><code>Blaze.remove</code></a>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>templateOrView</code> <span class=\"type\"><a href=\"#blaze_template\">Blaze.Template</a> or <a href=\"#blaze_view\">Blaze.View</a></span> </dt> <dd> <p>The template (e.g. <code>Template.myTemplate</code>) or View object to render. If a template, a View object is <a href=\"#template_constructview\">constructed</a>. If a View, it must be an unrendered View, which becomes a rendered View and is returned.</p> </dd> <dt> <code>parentNode</code> <span class=\"type\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\" target=\"_blank\" rel=\"external\">DOM Node</a></span> </dt> <dd> <p>The node that will be the parent of the rendered template. It must be an Element node.</p> </dd> <dt> <code>nextNode</code> <span class=\"type\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\" target=\"_blank\" rel=\"external\">DOM Node</a></span> </dt> <dd> <p>Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.</p> </dd> <dt> <code>parentView</code> <span class=\"type\"><a href=\"#blaze_view\">Blaze.View</a></span> </dt> <dd> <p>Optional. If provided, it will be set as the rendered View's <a href=\"#view_parentview\"><code>parentView</code></a>.</p> </dd> </dl>   <p>When you render a template, the callbacks added with <a href=\"#template_onCreated\"><code>onCreated</code></a> are invoked immediately, before evaluating the content of the template. The callbacks added with <a href=\"#template_onRendered\"><code>onRendered</code></a> are invoked after the View is rendered and inserted into the DOM.</p> <p>The rendered template will update reactively in response to data changes until the View is removed using <a href=\"#blaze_remove\"><code>Blaze.remove</code></a> or the View’s parent element is removed by Meteor or jQuery.</p> <blockquote class=\"pullquote warning\">\n<p>If the View is removed by some other mechanism besides Meteor or jQuery (which Meteor integrates with by default), the View may continue to update indefinitely. Most users will not need to manually render templates and insert them into the DOM, but if you do, be mindful to always call <a href=\"#blaze_remove\"><code>Blaze.remove</code></a> when the View is no longer needed.</p> </blockquote>  <h2 class=\"api-heading\" id=\"Blaze-renderWithData\"> <div class=\"locus\"> Client </div> <code>Blaze.renderWithData(templateOrView, data, parentNode, [nextNode], [parentView])</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L665\" target=\"_blank\"> (blaze/view.js, line 665) </a> </div> </h2>   <p>Renders a template or View to DOM nodes with a data context. Otherwise identical to <code>Blaze.render</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>templateOrView</code> <span class=\"type\"><a href=\"#blaze_template\">Blaze.Template</a> or <a href=\"#blaze_view\">Blaze.View</a></span> </dt> <dd> <p>The template (e.g. <code>Template.myTemplate</code>) or View object to render.</p> </dd> <dt> <code>data</code> <span class=\"type\">Object or Function</span> </dt> <dd> <p>The data context to use, or a function returning a data context. If a function is provided, it will be reactively re-run.</p> </dd> <dt> <code>parentNode</code> <span class=\"type\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\" target=\"_blank\" rel=\"external\">DOM Node</a></span> </dt> <dd> <p>The node that will be the parent of the rendered template. It must be an Element node.</p> </dd> <dt> <code>nextNode</code> <span class=\"type\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\" target=\"_blank\" rel=\"external\">DOM Node</a></span> </dt> <dd> <p>Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.</p> </dd> <dt> <code>parentView</code> <span class=\"type\"><a href=\"#blaze_view\">Blaze.View</a></span> </dt> <dd> <p>Optional. If provided, it will be set as the rendered View's <a href=\"#view_parentview\"><code>parentView</code></a>.</p> </dd> </dl>   <p><code>Blaze.renderWithData(Template.myTemplate, data)</code> is essentially the same as <code>Blaze.render(Blaze.With(data, function () { return Template.myTemplate; }))</code>.</p>  <h2 class=\"api-heading\" id=\"Blaze-remove\"> <div class=\"locus\"> Client </div> <code>Blaze.remove(renderedView)</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L677\" target=\"_blank\"> (blaze/view.js, line 677) </a> </div> </h2>   <p>Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>renderedView</code> <span class=\"type\"><a href=\"#blaze_view\">Blaze.View</a></span> </dt> <dd> <p>The return value from <code>Blaze.render</code> or <code>Blaze.renderWithData</code>, or the <code>view</code> property of a Blaze.Template instance. Calling <code>Blaze.remove(Template.instance().view)</code> from within a template event handler will destroy the view as well as that template and trigger the template's <code>onDestroyed</code> handlers.</p> </dd> </dl>   <p>Use <code>Blaze.remove</code> to remove a template or View previously inserted with <code>Blaze.render</code>, in such a way that any behaviors attached to the DOM by Meteor are cleaned up. The rendered template or View is now considered <a href=\"#template_onDestroyed\">“destroyed”</a>, along with all nested templates and Views. In addition, any data assigned via jQuery to the DOM nodes is removed, as if the nodes were passed to jQuery’s <code>$(...).remove()</code>.</p> <p>As mentioned in <a href=\"#blaze_render\"><code>Blaze.render</code></a>, it is important to “remove” all content rendered via <code>Blaze.render</code> using <code>Blaze.remove</code>, unless the parent node of <code>renderedView</code> is removed by a Meteor reactive update or with jQuery.</p> <p><code>Blaze.remove</code> can be used even if the DOM nodes in question have already been removed from the document, to tell Blaze to stop tracking and updating these nodes.</p>  <h2 class=\"api-heading\" id=\"Blaze-getData\"> <div class=\"locus\"> Client </div> <code>Blaze.getData([elementOrView])</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L743\" target=\"_blank\"> (blaze/view.js, line 743) </a> </div> </h2>   <p>Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>elementOrView</code> <span class=\"type\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\" target=\"_blank\" rel=\"external\">DOM Element</a> or <a href=\"#blaze_view\">Blaze.View</a></span> </dt> <dd> <p>Optional. An element that was rendered by a Meteor, or a View.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Blaze-toHTML\"> <div class=\"locus\"> Client </div> <code>Blaze.toHTML(templateOrView)</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L698\" target=\"_blank\"> (blaze/view.js, line 698) </a> </div> </h2>   <p>Renders a template or View to a string of HTML.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>templateOrView</code> <span class=\"type\"><a href=\"#blaze_template\">Blaze.Template</a> or <a href=\"#blaze_view\">Blaze.View</a></span> </dt> <dd> <p>The template (e.g. <code>Template.myTemplate</code>) or View object from which to generate HTML.</p> </dd> </dl>   <p>Rendering a template to HTML loses all fine-grained reactivity. The normal way to render a template is to either include it from another template (<code>{{&gt; myTemplate}}</code>) or render and insert it programmatically using <code>Blaze.render</code>. Only occasionally is generating HTML useful.</p> <p>Because <code>Blaze.toHTML</code> returns a string, it is not able to update the DOM in response to reactive data changes. Instead, any reactive data changes will invalidate the current Computation if there is one (for example, an autorun that is the caller of <code>Blaze.toHTML</code>).</p>  <h2 class=\"api-heading\" id=\"Blaze-toHTMLWithData\"> <div class=\"locus\"> Client </div> <code>Blaze.toHTMLWithData(templateOrView, data)</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L710\" target=\"_blank\"> (blaze/view.js, line 710) </a> </div> </h2>   <p>Renders a template or View to HTML with a data context. Otherwise identical to <code>Blaze.toHTML</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>templateOrView</code> <span class=\"type\"><a href=\"#blaze_template\">Blaze.Template</a> or <a href=\"#blaze_view\">Blaze.View</a></span> </dt> <dd> <p>The template (e.g. <code>Template.myTemplate</code>) or View object from which to generate HTML.</p> </dd> <dt> <code>data</code> <span class=\"type\">Object or Function</span> </dt> <dd> <p>The data context to use, or a function returning a data context.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Blaze-View\"> <div class=\"locus\"> Client </div> <code>new Blaze.View([name], renderFunction)</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L43\" target=\"_blank\"> (blaze/view.js, line 43) </a> </div> </h2>   <p>Constructor for a View, which represents a reactive region of DOM.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. A name for this type of View. See <a href=\"#view_name\"><code>view.name</code></a>.</p> </dd> <dt> <code>renderFunction</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>. In this function, <code>this</code> is bound to the View.</p> </dd> </dl>   <p>Behind every template or part of a template — a template tag, say, like <code>{{foo}}</code> or <code>{{#if}}</code> — is a View object, which is a reactively updating region of DOM.</p> <p>Most applications do not need to be aware of these Views, but they offer a way to understand and customize Meteor’s rendering behavior for more advanced applications and packages.</p> <p>You can obtain a View object by calling <a href=\"#blaze_render\"><code>Blaze.render</code></a> on a template, or by accessing <a href=\"#template_view\"><code>template.view</code></a> on a template instance.</p> <p>At the heart of a View is an <a href=\"#tracker_autorun\">autorun</a> that calls the View’s <code>renderFunction</code>, uses the result to create DOM nodes, and replaces the contents of the View with these new DOM nodes. A View’s content may consist of any number of consecutive DOM nodes (though if it is zero, a placeholder node such as a comment or an empty text node is automatically supplied). Any reactive dependency established by <code>renderFunction</code> causes a full recalculation of the View’s contents when the dependency is invalidated. Templates, however, are compiled in such a way that they do not have top-level dependencies and so will only ever render once, while their parts may re-render many times.</p> <p>When a <code>Blaze.View</code> is constructed by calling the constructor, no hooks are fired and no rendering is performed. In particular, the View is not yet considered to be “created.” Only when the View is actually used, by a call to <code>Blaze.render</code> or <code>Blaze.toHTML</code> or by inclusion in another View, is it “created,” right before it is rendered for the first time. When a View is created, its <code>.parentView</code> is set if appropriate, and then the <code>onViewCreated</code> hook is fired. The term “unrendered View” means a newly constructed View that has not been “created” or rendered.</p> <p>The “current View” is kept in <a href=\"#blaze_currentview\"><code>Blaze.currentView</code></a> and is set during View rendering, callbacks, autoruns, and template event handlers. It affects calls such as <a href=\"#template_currentdata\"><code>Template.currentData()</code></a>.</p> <p>The following properties and methods are available on Blaze.View:</p> <dl class=\"objdesc\"> <dt>\n<span class=\"name\" id=\"view_name\">name</span><span class=\"type\">String</span>\n</dt>\n<dd>\n<p> The name of this type of View. View names may be used to identify particular kinds of Views in code, but more often they simply aid in debugging and comprehensibility of the View tree. Views generated by Meteor have names like “Template.foo” and “if”.</p> </dd> <dt>\n<span class=\"name\" id=\"view_parentview\">parentView</span><span class=\"type\">View or null</span>\n</dt>\n<dd>\n<p>The enclosing View that caused this View to be rendered, if any.</p> </dd> <dt>\n<span class=\"name\" id=\"view_iscreated\">isCreated</span><span class=\"type\">Boolean</span>\n</dt>\n<dd>\n<p>True if this View has been called on to be rendered by <code>Blaze.render</code> or <code>Blaze.toHTML</code> or another View. Once it becomes true, never becomes false again. A “created” View’s <code>.parentView</code> has been set to its final value. <code>isCreated</code> is set to true before <code>onViewCreated</code> hooks are called.</p> </dd> <dt>\n<span class=\"name\" id=\"view_isrendered\">isRendered</span><span class=\"type\">Boolean</span>\n</dt>\n<dd>\n<p>True if this View has been rendered to DOM by <code>Blaze.render</code> or by the rendering of an enclosing View. Conversion to HTML by <code>Blaze.toHTML</code> doesn’t count. Once true, never becomes false.</p> </dd> <dt>\n<span class=\"name\" id=\"view_isdestroyed\">isDestroyed</span><span class=\"type\">Boolean</span>\n</dt>\n<dd>\n<p>True if this View has been destroyed, such as by <code>Blaze.remove()</code> or by a reactive update that removes it. A destroyed View’s autoruns have been stopped, and its DOM nodes have generally been cleaned of all Meteor reactivity and possibly dismantled.</p> </dd> <dt>\n<span class=\"name\" id=\"view_rendercount\">renderCount</span><span class=\"type\">Integer</span>\n</dt>\n<dd>\n<p>The number of times the View has been rendered, including the current time if the View is in the process of being rendered or re-rendered.</p> </dd> <dt><span class=\"name\" id=\"view_autorun\">autorun(runFunc)</span></dt>\n<dd>\n<p>Like <a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a>, except that the autorun is automatically stopped when the View is destroyed, and the <a href=\"#blaze_currentview\">current View</a> is always set when running <code>runFunc</code>. There is no relationship to the View’s internal autorun or render cycle. In <code>runFunc</code>, the View is bound to <code>this</code>.</p> </dd> <dt><span class=\"name\" id=\"view_onviewcreated\">onViewCreated(func)</span></dt>\n<dd>\n<p>If the View hasn’t been created yet, calls <code>func</code> when the View is created. In <code>func</code>, the View is bound to <code>this</code>.</p> <p>This hook is the basis for the <a href=\"#template_created\"><code>created</code></a> template callback.</p> </dd> <dt><span class=\"name\" id=\"view_onviewready\">onViewReady(func)</span></dt>\n<dd>\n<p>Calls <code>func</code> when the View is rendered and inserted into the DOM, after waiting for the end of <a href=\"#tracker_afterflush\">flush time</a>. Does not fire if the View is destroyed at any point before it would fire. May fire multiple times (if the View re-renders). In <code>func</code>, the View is bound to <code>this</code>.</p> <p>This hook is the basis for the <a href=\"#template_rendered\"><code>rendered</code></a> template callback.</p> </dd> <dt><span class=\"name\" id=\"view_onviewdestroyed\">onViewDestroyed(func)</span></dt>\n<dd>\n<p>If the View hasn’t been destroyed yet, calls <code>func</code> when the View is destroyed. A View may be destroyed without ever becoming “ready.” In <code>func</code>, the View is bound to <code>this</code>.</p> <p>This hook is the basis for the <a href=\"#template_destroyed\"><code>destroyed</code></a> template callback.</p> </dd> <dt>\n<span class=\"name\" id=\"view_firstnode\">firstNode()</span><span class=\"type\">DOM node</span>\n</dt>\n<dd>\n<p>The first node of the View’s rendered content. Note that this may be a text node. Requires that the View be rendered. If the View rendered to zero DOM nodes, it may be a placeholder node (comment or text node). The DOM extent of a View consists of the nodes between <code>view.firstNode()</code> and <code>view.lastNode()</code>, inclusive.</p> </dd> <dt>\n<span class=\"name\" id=\"view_lastnode\">lastNode()</span><span class=\"type\">DOM node</span>\n</dt>\n<dd>\n<p>The last node of the View’s rendered content.</p> <p>See <a href=\"#view_firstnode\"><code>firstNode()</code></a>.</p> </dd> <dt>\n<span class=\"name\" id=\"view_template\">template</span><span class=\"type\">Template</span>\n</dt>\n<dd>\n<p>For Views created by invoking templates, the original Template object. For example, <code>Blaze.render(Template.foo).template === Template.foo</code>.</p> </dd> <dt>\n<span class=\"name\" id=\"view_templateinstance\">templateInstance()</span><span class=\"type\">Template instance</span>\n</dt>\n<dd>\n<p>For Views created by invoking templates, returns the <a href=\"#template_inst\">template instance</a> object for this particular View. For example, in a <a href=\"#template_created\"><code>created</code></a> callback, <code>this.view.templateInstance() === this</code>.</p> <p>Template instance objects have fields like <code>data</code>, <code>firstNode</code>, and <code>lastNode</code> which are not reactive and which are also not automatically kept up to date. Calling <code>templateInstance()</code> causes these fields to be updated.</p> </dd> </dl>  <h3 class=\"api-heading\" id=\"Blaze-currentView\"> <div class=\"locus\"> Client </div> <code>Blaze.currentView</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L532\" target=\"_blank\"> (blaze/view.js, line 532) </a> </div> </h3>   <p>The View corresponding to the current template helper, event handler, callback, or autorun. If there isn't one, <code>null</code>.</p>    <p>The “current view” is used by <a href=\"#template_currentdata\"><code>Template.currentData()</code></a> and <a href=\"#template_instance\"><code>Template.instance()</code></a> to determine the contextually relevant data context and template instance.</p>  <h3 class=\"api-heading\" id=\"Blaze-getView\"> <div class=\"locus\"> Client </div> <code>Blaze.getView([element])</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/view.js#L781\" target=\"_blank\"> (blaze/view.js, line 781) </a> </div> </h3>   <p>Gets either the current View, or the View enclosing the given DOM element.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>element</code> <span class=\"type\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element\" target=\"_blank\" rel=\"external\">DOM Element</a></span> </dt> <dd> <p>Optional. If specified, the View enclosing <code>element</code> is returned.</p> </dd> </dl>   <p>If you don’t specify an <code>element</code>, there must be a current View or an error will be thrown. This is in contrast to <a href=\"#blaze_currentview\"><code>Blaze.currentView</code></a>.</p>  <h3 class=\"api-heading\" id=\"Blaze-With\"> <div class=\"locus\"> Client </div> <code>Blaze.With(data, contentFunc)</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/builtins.js#L13\" target=\"_blank\"> (blaze/builtins.js, line 13) </a> </div> </h3>   <p>Constructs a View that renders content with a data context.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>data</code> <span class=\"type\">Object or Function</span> </dt> <dd> <p>An object to use as the data context, or a function returning such an object. If a function is provided, it will be reactively re-run.</p> </dd> <dt> <code>contentFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.</p> </dd> </dl>   <p>Returns an unrendered View object you can pass to <code>Blaze.render</code>.</p> <p>Unlike <code>{{#with}}</code> (as used in templates), <code>Blaze.With</code> has no “else” case, and a falsy value for the data context will not prevent the content from rendering.</p>  <h3 class=\"api-heading\" id=\"Blaze-If\"> <div class=\"locus\"> Client </div> <code>Blaze.If(conditionFunc, contentFunc, [elseFunc])</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/builtins.js#L73\" target=\"_blank\"> (blaze/builtins.js, line 73) </a> </div> </h3>   <p>Constructs a View that renders content conditionally.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>conditionFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to reactively re-run. Whether the result is truthy or falsy determines whether <code>contentFunc</code> or <code>elseFunc</code> is shown. An empty array is considered falsy.</p> </dd> <dt> <code>contentFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.</p> </dd> <dt> <code>elseFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional. A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>. If no <code>elseFunc</code> is supplied, no content is shown in the \"else\" case.</p> </dd> </dl>   <p>Returns an unrendered View object you can pass to <code>Blaze.render</code>.</p> <p>Matches the behavior of <code>{{#if}}</code> in templates.</p>  <h3 class=\"api-heading\" id=\"Blaze-Unless\"> <div class=\"locus\"> Client </div> <code>Blaze.Unless(conditionFunc, contentFunc, [elseFunc])</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/builtins.js#L98\" target=\"_blank\"> (blaze/builtins.js, line 98) </a> </div> </h3>   <p>An inverted <a href=\"#blaze_if\"><code>Blaze.If</code></a>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>conditionFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to reactively re-run. If the result is falsy, <code>contentFunc</code> is shown, otherwise <code>elseFunc</code> is shown. An empty array is considered falsy.</p> </dd> <dt> <code>contentFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.</p> </dd> <dt> <code>elseFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional. A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>. If no <code>elseFunc</code> is supplied, no content is shown in the \"else\" case.</p> </dd> </dl>   <p>Returns an unrendered View object you can pass to <code>Blaze.render</code>.</p> <p>Matches the behavior of <code>{{#unless}}</code> in templates.</p>  <h3 class=\"api-heading\" id=\"Blaze-Each\"> <div class=\"locus\"> Client </div> <code>Blaze.Each(argFunc, contentFunc, [elseFunc])</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/builtins.js#L122\" target=\"_blank\"> (blaze/builtins.js, line 122) </a> </div> </h3>   <p>Constructs a View that renders <code>contentFunc</code> for each item in a sequence.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>argFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to reactively re-run. The function can return one of two options:</p> <ol> <li>\n<p>An object with two fields: '_variable' and '_sequence'. Each iterates over '_sequence', it may be a Cursor, an array, null, or undefined. Inside the Each body you will be able to get the current item from the sequence using the name specified in the '_variable' field.</p> </li> <li>\n<p>Just a sequence (Cursor, array, null, or undefined) not wrapped into an object. Inside the Each body, the current item will be set as the data context.</p> </li> </ol> </dd> <dt> <code>contentFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>.</p> </dd> <dt> <code>elseFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>A Function that returns <a href=\"#renderable_content\"><em>renderable content</em></a> to display in the case when there are no items in the sequence.</p> </dd> </dl>   <p>Returns an unrendered View object you can pass to <code>Blaze.render</code>.</p> <p>Matches the behavior of <code>{{#each}}</code> in templates.</p>  <h2 class=\"api-heading\" id=\"Blaze-Template\"> <div class=\"locus\"> Client </div> <code>new Blaze.Template([viewName], renderFunction)</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L16\" target=\"_blank\"> (blaze/template.js, line 16) </a> </div> </h2>   <p>Constructor for a Template, which is used to construct Views with particular name and content.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>viewName</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. A name for Views constructed by this Template. See <a href=\"#view_name\"><code>view.name</code></a>.</p> </dd> <dt> <code>renderFunction</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function that returns <a href=\"#renderable_content\"><em>renderable content</em></a>. This function is used as the <code>renderFunction</code> for Views constructed by this Template.</p> </dd> </dl>   <p>Templates defined by the template compiler, such as <code>Template.myTemplate</code>, are objects of type <code>Blaze.Template</code> (aliased as <code>Template</code>).</p> <p>In addition to methods like <code>events</code> and <code>helpers</code>, documented as part of the <a href=\"#templates_api\">Template API</a>, the following fields and methods are present on template objects:</p> <dl class=\"objdesc\"> <dt>\n<span class=\"name\" id=\"template_viewname\">viewName</span><span class=\"type\">String</span>\n</dt>\n<dd>\n<p>Same as the constructor argument.</p> </dd> <dt>\n<span class=\"name\" id=\"template_renderfunction\">renderFunction</span><span class=\"type\">Function</span>\n</dt>\n<dd>\n<p>Same as the constructor argument.</p> </dd> <dt><span class=\"name\" id=\"template_constructview\">constructView()</span></dt>\n<dd>\n<p>Constructs and returns an unrendered View object. This method is invoked by Meteor whenever the template is used, such as by <code>Blaze.render</code> or by <code>{{&gt; foo}}</code> where <code>foo</code> resolves to a Template object.</p> <p><code>constructView()</code> constructs a View using <code>viewName</code> and <code>renderFunction</code> as constructor arguments, and then configures it as a template View, setting up <code>view.template</code>, <code>view.templateInstance()</code>, event maps, and so on.</p> </dd> </dl>  <h2 class=\"api-heading\" id=\"Blaze-isTemplate\"> <div class=\"locus\"> Client </div> <code>Blaze.isTemplate(value)</code> <div class=\"subtext-api\"> <code>import { Blaze } from 'meteor/blaze'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L61\" target=\"_blank\"> (blaze/template.js, line 61) </a> </div> </h2>   <p>Returns true if <code>value</code> is a template object like <code>Template.myTemplate</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>value</code> <span class=\"type\">Any</span> </dt> <dd> <p>The value to test.</p> </dd> </dl>   <h2 id=\"renderable_content\">Renderable Content</h2> <p>A value is <em>renderable content</em> if it is one of the following:</p> <ul> <li>A <a href=\"#templates_api\">template object</a> like <code>Template.myTemplate</code>\n</li> <li>An unrendered <a href=\"#blaze_view\">View</a> object, like the return value of <code>Blaze.With</code>\n</li> <li>\n<code>null</code> or <code>undefined</code>\n</li> </ul> <blockquote> <p>Internally, renderable content includes objects representing HTML tags as well, but these objects are not yet part of the officially-supported, public API.</p> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/blaze.html\" class=\"_attribution-link\">https://docs.meteor.com/api/blaze.html</a>\n  </p>\n</div>\n","api/ejson":"<h1 class=\"title-page\">EJSON</h1> <div class=\"subtitle-page\">Documentation of EJSON, Meteor's JSON extension.</div>    <p>EJSON is an extension of JSON to support more types. It supports all JSON-safe types, as well as:</p> <ul> <li>\n<strong>Date</strong> (JavaScript <code>Date</code>)</li> <li>\n<strong>Binary</strong> (JavaScript <code>Uint8Array</code> or the result of <a href=\"#ejson_new_binary\"><code>EJSON.newBinary</code></a>)</li> <li>\n<strong>User-defined types</strong> (see <a href=\"#ejson_add_type\"><code>EJSON.addType</code></a>. For example, <a href=\"#mongo_object_id\"><code>Mongo.ObjectID</code></a> is implemented this way.)</li> </ul> <p>All EJSON serializations are also valid JSON. For example an object with a date and a binary buffer would be serialized in EJSON as:</p> <pre class=\"highlight json\" data-language=\"json\">{\n  \"d\": {\"$date\": 1358205756553},\n  \"b\": {\"$binary\": \"c3VyZS4=\"}\n}</pre> <p>Meteor supports all built-in EJSON data types in publishers, method arguments and results, Mongo databases, and <a href=\"#session\"><code>Session</code></a> variables.</p>  <h2 class=\"api-heading\" id=\"EJSON-parse\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.parse(str)</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L352\" target=\"_blank\"> (ejson/ejson.js, line 352) </a> </div> </h2>   <p>Parse a string into an EJSON value. Throws an error if the string is not valid EJSON.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>str</code> <span class=\"type\">String</span> </dt> <dd> <p>A string to parse into an EJSON value.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"EJSON-stringify\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.stringify(val, [options])</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L338\" target=\"_blank\"> (ejson/ejson.js, line 338) </a> </div> </h2>   <p>Serialize a value to a string.</p> <p>For EJSON values, the serialization fully represents the value. For non-EJSON values, serializes the same way as <code>JSON.stringify</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>val</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a></span> </dt> <dd> <p>A value to stringify.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>indent</code> <span class=\"type\">Boolean, Integer, or String</span> </dt> <dd> <p>Indents objects and arrays for easy readability. When <code>true</code>, indents by 2 spaces; when an integer, indents by that number of spaces; and when a string, uses the string as the indentation pattern.</p> </dd> <dt> <code>canonical</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>When <code>true</code>, stringifies keys in an object in sorted order.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"EJSON-fromJSONValue\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.fromJSONValue(val)</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L317\" target=\"_blank\"> (ejson/ejson.js, line 317) </a> </div> </h2>   <p>Deserialize an EJSON value from its plain JSON representation.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>val</code> <span class=\"type\">JSON-compatible Object</span> </dt> <dd> <p>A value to deserialize into EJSON.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"EJSON-toJSONValue\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.toJSONValue(val)</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L248\" target=\"_blank\"> (ejson/ejson.js, line 248) </a> </div> </h2>   <p>Serialize an EJSON-compatible value into its plain JSON representation.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>val</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a></span> </dt> <dd> <p>A value to serialize to plain JSON.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"EJSON-equals\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.equals(a, b, [options])</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L376\" target=\"_blank\"> (ejson/ejson.js, line 376) </a> </div> </h2>   <p>Return true if <code>a</code> and <code>b</code> are equal to each other. Return false otherwise. Uses the <code>equals</code> method on <code>a</code> if present, otherwise performs a deep comparison.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>a</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a></span> </dt>  <dt> <code>b</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a></span> </dt>  </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>keyOrderSensitive</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>Compare in key sensitive order, if supported by the JavaScript implementation. For example, <code>{a: 1, b: 2}</code> is equal to <code>{b: 2, a: 1}</code> only when <code>keyOrderSensitive</code> is <code>false</code>. The default is <code>false</code>.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"EJSON-clone\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.clone(val)</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L462\" target=\"_blank\"> (ejson/ejson.js, line 462) </a> </div> </h2>   <p>Return a deep copy of <code>val</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>val</code> <span class=\"type\"><a href=\"#ejson\">EJSON-able Object</a></span> </dt> <dd> <p>A value to copy.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"EJSON-newBinary\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.newBinary</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L516\" target=\"_blank\"> (ejson/ejson.js, line 516) </a> </div> </h2>   <p>Allocate a new buffer of binary data that EJSON can serialize.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>size</code> <span class=\"type\">Number</span> </dt> <dd> <p>The number of bytes of binary data to allocate.</p> </dd> </dl>   <p>Buffers of binary data are represented by <code>Uint8Array</code> instances on JavaScript platforms that support them. On implementations of JavaScript that do not support <code>Uint8Array</code>, binary data buffers are represented by standard arrays containing numbers ranging from 0 to 255, and the <code>$Uint8ArrayPolyfill</code> key set to <code>true</code>.</p>  <h2 class=\"api-heading\" id=\"EJSON-isBinary\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.isBinary(x)</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L363\" target=\"_blank\"> (ejson/ejson.js, line 363) </a> </div> </h2>   <p>Returns true if <code>x</code> is a buffer of binary data, as returned from <a href=\"#ejson_new_binary\"><code>EJSON.newBinary</code></a>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>x</code> <span class=\"type\">Object</span> </dt> <dd> <p>The variable to check.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"EJSON-addType\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.addType(name, factory)</code> <div class=\"subtext-api\"> <code>import { EJSON } from 'meteor/ejson'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L72\" target=\"_blank\"> (ejson/ejson.js, line 72) </a> </div> </h2>   <p>Add a custom datatype to EJSON.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>A tag for your custom type; must be unique among custom data types defined in your project, and must match the result of your type's <code>typeName</code> method.</p> </dd> <dt> <code>factory</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function that deserializes a JSON-compatible value into an instance of your type. This should match the serialization performed by your type's <code>toJSONValue</code> method.</p> </dd> </dl>   <p>When you add a type to EJSON, Meteor will be able to use that type in:</p> <ul> <li>publishing objects of your type if you pass them to publish handlers.</li> <li>allowing your type in the return values or arguments to <a href=\"#methods_header\">methods</a>.</li> <li>storing your type client-side in Minimongo.</li> <li>allowing your type in <a href=\"#session\"><code>Session</code></a> variables.</li> </ul> <p>Instances of your type must implement <a href=\"#ejson_type_typeName\"><code>typeName</code></a> and <a href=\"#ejson_type_toJSONValue\"><code>toJSONValue</code></a> methods, and may implement <a href=\"#ejson_type_clone\"><code>clone</code></a> and <a href=\"#ejson_type_equals\"><code>equals</code></a> methods if the default implementations are not sufficient.</p>  <h3 class=\"api-heading\" id=\"EJSON-CustomType-typeName\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.CustomType#typeName()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L19\" target=\"_blank\"> (ejson/ejson.js, line 19) </a> </div> </h3>   <p>Return the tag used to identify this type. This must match the tag used to register this type with <a href=\"#ejson_add_type\"><code>EJSON.addType</code></a>.</p>     <h3 class=\"api-heading\" id=\"EJSON-CustomType-toJSONValue\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.CustomType#toJSONValue()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L27\" target=\"_blank\"> (ejson/ejson.js, line 27) </a> </div> </h3>   <p>Serialize this instance into a JSON-compatible value.</p>    <p>For example, the <code>toJSONValue</code> method for <a href=\"#mongo_object_id\"><code>Mongo.ObjectID</code></a> could be:</p> <pre class=\"highlight js\" data-language=\"js\">\nfunction () {\n  return this.toHexString();\n};</pre>  <h3 class=\"api-heading\" id=\"EJSON-CustomType-clone\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.CustomType#clone()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L35\" target=\"_blank\"> (ejson/ejson.js, line 35) </a> </div> </h3>   <p>Return a value <code>r</code> such that <code>this.equals(r)</code> is true, and modifications to <code>r</code> do not affect <code>this</code> and vice versa.</p>    <p>If your type does not have a <code>clone</code> method, <code>EJSON.clone</code> will use <a href=\"#ejson_type_toJSONValue\"><code>toJSONValue</code></a> and the factory instead.</p>  <h3 class=\"api-heading\" id=\"EJSON-CustomType-equals\"> <div class=\"locus\"> Anywhere </div> <code>EJSON.CustomType#equals(other)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/ejson/ejson.js#L43\" target=\"_blank\"> (ejson/ejson.js, line 43) </a> </div> </h3>   <p>Return <code>true</code> if <code>other</code> has a value equal to <code>this</code>; <code>false</code> otherwise.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>other</code> <span class=\"type\">Object</span> </dt> <dd> <p>Another object to compare this to.</p> </dd> </dl>   <p>The <code>equals</code> method should define an <a href=\"http://en.wikipedia.org/wiki/Equivalence_relation\" target=\"_blank\" rel=\"external\">equivalence relation</a>. It should have the following properties:</p> <ul> <li>\n<em>Reflexivity</em> - for any instance <code>a</code>: <code>a.equals(a)</code> must be true.</li> <li>\n<em>Symmetry</em> - for any two instances <code>a</code> and <code>b</code>: <code>a.equals(b)</code> if and only if <code>b.equals(a)</code>.</li> <li>\n<em>Transitivity</em> - for any three instances <code>a</code>, <code>b</code>, and <code>c</code>: <code>a.equals(b)</code> and <code>b.equals(c)</code> implies <code>a.equals(c)</code>.</li> </ul> <p>If your type does not have an <code>equals</code> method, <code>EJSON.equals</code> will compare the result of calling <a href=\"#ejson_type_toJSONValue\"><code>toJSONValue</code></a> instead.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/ejson.html\" class=\"_attribution-link\">https://docs.meteor.com/api/ejson.html</a>\n  </p>\n</div>\n","packages/audit-argument-checks":"<h1 class=\"title-page\">audit-argument-checks</h1> <div class=\"subtitle-page\">Documentation of Meteor's `audit-argument-checks` package.</div>    <p>This package causes Meteor to require that all arguments passed to methods and publish functions are <a href=\"#check\"><code>check</code>ed</a>. Any method that does not pass each one of its arguments to <code>check</code> will throw an error, which will be logged on the server and which will appear to the client as a <code>500 Internal server error</code>. This is a simple way to help ensure that your app has complete check coverage.</p> <p>Methods and publish functions that do not need to validate their arguments can simply run <code>check(arguments, [Match.Any])</code> to satisfy the <code>audit-argument-checks</code> coverage checker.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/audit-argument-checks.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/audit-argument-checks.html</a>\n  </p>\n</div>\n","api/passwords":"<h1 class=\"title-page\">Passwords</h1> <div class=\"subtitle-page\">Documentation of Meteor's password-based accounts API.</div>    <p>The <code>accounts-password</code> package contains a full system for password-based authentication. In addition to the basic username and password-based sign-in process, it also supports email-based sign-in including address verification and password recovery emails.</p> <p>The Meteor server stores passwords using the <a href=\"http://en.wikipedia.org/wiki/Bcrypt\" target=\"_blank\" rel=\"external\">bcrypt</a> algorithm. This helps protect against embarrassing password leaks if the server’s database is compromised.</p> <p>To add password support to your application, run this command in your terminal:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add accounts-password</pre> <p>You can construct your own user interface using the functions below, or use the <a href=\"#accountsui\"><code>accounts-ui</code> package</a> to include a turn-key user interface for password-based sign-in.</p>  <h2 class=\"api-heading\" id=\"Accounts-createUser\"> <div class=\"locus\"> Anywhere </div> <code>Accounts.createUser(options, [callback])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_client.js#L115\" target=\"_blank\"> (accounts-password/password_client.js, line 115) </a> </div> </h2>   <p>Create a new user.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Client only, optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>username</code> <span class=\"type\">String</span> </dt> <dd> <p>A unique name for this user.</p> </dd> <dt> <code>email</code> <span class=\"type\">String</span> </dt> <dd> <p>The user's email address.</p> </dd> <dt> <code>password</code> <span class=\"type\">String</span> </dt> <dd> <p>The user's password. This is <strong>not</strong> sent in plain text over the wire.</p> </dd> <dt> <code>profile</code> <span class=\"type\">Object</span> </dt> <dd> <p>The user's profile, typically including the <code>name</code> field.</p> </dd> </dl>   <p>On the client, this function logs in as the newly created user on successful completion. On the server, it returns the newly created user id.</p> <p>On the client, you must pass <code>password</code> and at least one of <code>username</code> or <code>email</code> — enough information for the user to be able to log in again later. If there are existing users with a username or email only differing in case, <code>createUser</code> will fail. The callback’s <code>error.reason</code> will be <code>'Username already exists.'</code> or <code>'Email already exists.'</code> In the latter case, the user can then either <a href=\"accounts#Meteor-loginWithPassword\">login</a> or <a href=\"#Accounts-resetPassword\">reset their password</a>.</p> <p>On the server, you do not need to specify <code>password</code>, but the user will not be able to log in until it has a password (eg, set with <a href=\"#accounts_setpassword\"><code>Accounts.setPassword</code></a>). To create an account without a password on the server and still let the user pick their own password, call <code>createUser</code> with the <code>email</code> option and then call <a href=\"#accounts_sendenrollmentemail\"><code>Accounts.sendEnrollmentEmail</code></a>. This will send the user an email with a link to set their initial password.</p> <p>By default the <code>profile</code> option is added directly to the new user document. To override this behavior, use <a href=\"#accounts_oncreateuser\"><code>Accounts.onCreateUser</code></a>.</p> <p>This function is only used for creating users with passwords. The external service login flows do not use this function.</p> <p>Instead of modifying documents in the <a href=\"#meteor_users\"><code>Meteor.users</code></a> collection directly, use these convenience functions which correctly check for case insensitive duplicates before updates.</p>  <h2 class=\"api-heading\" id=\"Accounts-setUsername\"> <div class=\"locus\"> Server </div> <code>Accounts.setUsername(userId, newUsername)</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L375\" target=\"_blank\"> (accounts-password/password_server.js, line 375) </a> </div> </h2>   <p>Change a user's username. Use this instead of updating the database directly. The operation will fail if there is an existing user with a username only differing in case.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>userId</code> <span class=\"type\">String</span> </dt> <dd> <p>The ID of the user to update.</p> </dd> <dt> <code>newUsername</code> <span class=\"type\">String</span> </dt> <dd> <p>A new username for the user.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Accounts-addEmail\"> <div class=\"locus\"> Server </div> <code>Accounts.addEmail(userId, newEmail, [verified])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L864\" target=\"_blank\"> (accounts-password/password_server.js, line 864) </a> </div> </h2>   <p>Add an email address for a user. Use this instead of directly updating the database. The operation will fail if there is a different user with an email only differing in case. If the specified user has an existing email only differing in case however, we replace it.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>userId</code> <span class=\"type\">String</span> </dt> <dd> <p>The ID of the user to update.</p> </dd> <dt> <code>newEmail</code> <span class=\"type\">String</span> </dt> <dd> <p>A new email address for the user.</p> </dd> <dt> <code>verified</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>Optional - whether the new email address should be marked as verified. Defaults to false.</p> </dd> </dl>   <p>By default, an email address is added with <code>{ verified: false }</code>. Use <a href=\"#Accounts-sendVerificationEmail\"><code>Accounts.sendVerificationEmail</code></a> to send an email with a link the user can use to verify their email address.</p>  <h2 class=\"api-heading\" id=\"Accounts-removeEmail\"> <div class=\"locus\"> Server </div> <code>Accounts.removeEmail(userId, email)</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L948\" target=\"_blank\"> (accounts-password/password_server.js, line 948) </a> </div> </h2>   <p>Remove an email address for a user. Use this instead of updating the database directly.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>userId</code> <span class=\"type\">String</span> </dt> <dd> <p>The ID of the user to update.</p> </dd> <dt> <code>email</code> <span class=\"type\">String</span> </dt> <dd> <p>The email address to remove.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Accounts-verifyEmail\"> <div class=\"locus\"> Client </div> <code>Accounts.verifyEmail(token, [callback])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_client.js#L263\" target=\"_blank\"> (accounts-password/password_client.js, line 263) </a> </div> </h2>   <p>Marks the user's email address as verified. Logs the user in afterwards.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>token</code> <span class=\"type\">String</span> </dt> <dd> <p>The token retrieved from the verification URL.</p> </dd> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl>   <p>This function accepts tokens passed into the callback registered with <a href=\"#Accounts-onEmailVerificationLink\"><code>Accounts.onEmailVerificationLink</code></a>.</p>  <h2 class=\"api-heading\" id=\"Accounts-findUserByUsername\"> <div class=\"locus\"> Server </div> <code>Accounts.findUserByUsername(username)</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L124\" target=\"_blank\"> (accounts-password/password_server.js, line 124) </a> </div> </h2>   <p>Finds the user with the specified username. First tries to match username case sensitively; if that fails, it tries case insensitively; but if more than one user matches the case insensitive search, it returns null.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>username</code> <span class=\"type\">String</span> </dt> <dd> <p>The username to look for</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Accounts-findUserByEmail\"> <div class=\"locus\"> Server </div> <code>Accounts.findUserByEmail(email)</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L140\" target=\"_blank\"> (accounts-password/password_server.js, line 140) </a> </div> </h2>   <p>Finds the user with the specified email. First tries to match email case sensitively; if that fails, it tries case insensitively; but if more than one user matches the case insensitive search, it returns null.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>email</code> <span class=\"type\">String</span> </dt> <dd> <p>The email address to look for</p> </dd> </dl>   <p>Use the below functions to initiate password changes or resets from the server or the client.</p>  <h2 class=\"api-heading\" id=\"Accounts-changePassword\"> <div class=\"locus\"> Client </div> <code>Accounts.changePassword(oldPassword, newPassword, [callback])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_client.js#L151\" target=\"_blank\"> (accounts-password/password_client.js, line 151) </a> </div> </h2>   <p>Change the current user's password. Must be logged in.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>oldPassword</code> <span class=\"type\">String</span> </dt> <dd> <p>The user's current password. This is <strong>not</strong> sent in plain text over the wire.</p> </dd> <dt> <code>newPassword</code> <span class=\"type\">String</span> </dt> <dd> <p>A new password for the user. This is <strong>not</strong> sent in plain text over the wire.</p> </dd> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Accounts-forgotPassword\"> <div class=\"locus\"> Client </div> <code>Accounts.forgotPassword(options, [callback])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_client.js#L214\" target=\"_blank\"> (accounts-password/password_client.js, line 214) </a> </div> </h2>   <p>Request a forgot password email.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>email</code> <span class=\"type\">String</span> </dt> <dd> <p>The email address to send a password reset link.</p> </dd> </dl>   <p>This triggers a call to <a href=\"#accounts_sendresetpasswordemail\"><code>Accounts.sendResetPasswordEmail</code></a> on the server. When the user visits the link in this email, the callback registered with <a href=\"#Accounts-onResetPasswordLink\"><code>Accounts.onResetPasswordLink</code></a> will be called.</p> <p>If you are using the <a href=\"#accountsui\"><code>accounts-ui</code> package</a>, this is handled automatically. Otherwise, it is your responsibility to prompt the user for the new password and call <code>resetPassword</code>.</p>  <h2 class=\"api-heading\" id=\"Accounts-resetPassword\"> <div class=\"locus\"> Client </div> <code>Accounts.resetPassword(token, newPassword, [callback])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_client.js#L235\" target=\"_blank\"> (accounts-password/password_client.js, line 235) </a> </div> </h2>   <p>Reset the password for a user using a token received in email. Logs the user in afterwards.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>token</code> <span class=\"type\">String</span> </dt> <dd> <p>The token retrieved from the reset password URL.</p> </dd> <dt> <code>newPassword</code> <span class=\"type\">String</span> </dt> <dd> <p>A new password for the user. This is <strong>not</strong> sent in plain text over the wire.</p> </dd> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl>   <p>This function accepts tokens passed into the callbacks registered with <a href=\"#Accounts-onResetPasswordLink\"><code>AccountsClient#onResetPasswordLink</code></a> and <a href=\"#Accounts-onEnrollmentLink\"><code>Accounts.onEnrollmentLink</code></a>.</p>  <h2 class=\"api-heading\" id=\"Accounts-setPassword\"> <div class=\"locus\"> Server </div> <code>Accounts.setPassword(userId, newPassword, [options])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L475\" target=\"_blank\"> (accounts-password/password_server.js, line 475) </a> </div> </h2>   <p>Forcibly change the password for a user.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>userId</code> <span class=\"type\">String</span> </dt> <dd> <p>The id of the user to update.</p> </dd> <dt> <code>newPassword</code> <span class=\"type\">String</span> </dt> <dd> <p>A new password for the user.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>logout</code> <span class=\"type\">Object</span> </dt> <dd> <p>Logout all current connections with this userId (default: true)</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Accounts-sendResetPasswordEmail\"> <div class=\"locus\"> Server </div> <code>Accounts.sendResetPasswordEmail(userId, [email])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L529\" target=\"_blank\"> (accounts-password/password_server.js, line 529) </a> </div> </h2>   <p>Send an email with a link the user can use to reset their password.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>userId</code> <span class=\"type\">String</span> </dt> <dd> <p>The id of the user to send email to.</p> </dd> <dt> <code>email</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. Which address of the user's to send the email to. This address must be in the user's <code>emails</code> list. Defaults to the first email in the list.</p> </dd> </dl>   <p>When the user visits the link in this email, the callback registered with <a href=\"#Accounts-onResetPasswordLink\"><code>AccountsClient#onResetPasswordLink</code></a> will be called.</p> <p>To customize the contents of the email, see <a href=\"#accounts_emailtemplates\"><code>Accounts.emailTemplates</code></a>.</p>  <h2 class=\"api-heading\" id=\"Accounts-sendEnrollmentEmail\"> <div class=\"locus\"> Server </div> <code>Accounts.sendEnrollmentEmail(userId, [email])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L595\" target=\"_blank\"> (accounts-password/password_server.js, line 595) </a> </div> </h2>   <p>Send an email with a link the user can use to set their initial password.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>userId</code> <span class=\"type\">String</span> </dt> <dd> <p>The id of the user to send email to.</p> </dd> <dt> <code>email</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. Which address of the user's to send the email to. This address must be in the user's <code>emails</code> list. Defaults to the first email in the list.</p> </dd> </dl>   <p>When the user visits the link in this email, the callback registered with <a href=\"#Accounts-onEnrollmentLink\"><code>Accounts.onEnrollmentLink</code></a> will be called.</p> <p>To customize the contents of the email, see <a href=\"#accounts_emailtemplates\"><code>Accounts.emailTemplates</code></a>.</p>  <h2 class=\"api-heading\" id=\"Accounts-sendVerificationEmail\"> <div class=\"locus\"> Server </div> <code>Accounts.sendVerificationEmail(userId, [email])</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/password_server.js#L735\" target=\"_blank\"> (accounts-password/password_server.js, line 735) </a> </div> </h2>   <p>Send an email with a link the user can use verify their email address.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>userId</code> <span class=\"type\">String</span> </dt> <dd> <p>The id of the user to send email to.</p> </dd> <dt> <code>email</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional. Which address of the user's to send the email to. This address must be in the user's <code>emails</code> list. Defaults to the first unverified email in the list.</p> </dd> </dl>   <p>When the user visits the link in this email, the callback registered with <a href=\"#Accounts-onEmailVerificationLink\"><code>Accounts.onEmailVerificationLink</code></a> will be called.</p> <p>To customize the contents of the email, see <a href=\"#accounts_emailtemplates\"><code>Accounts.emailTemplates</code></a>.</p>  <h2 class=\"api-heading\" id=\"Accounts-onResetPasswordLink\"> <div class=\"locus\"> Client </div> <code>Accounts.onResetPasswordLink</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/url_client.js#L91\" target=\"_blank\"> (accounts-base/url_client.js, line 91) </a> </div> </h2>   <p>Register a function to call when a reset password link is clicked in an email sent by <a href=\"#accounts_sendresetpasswordemail\"><code>Accounts.sendResetPasswordEmail</code></a>. This function should be called in top-level code, not inside <code>Meteor.startup()</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to call. It is given two arguments:</p> <ol> <li>\n<code>token</code>: A password reset token that can be passed to <a href=\"#accounts_resetpassword\"><code>Accounts.resetPassword</code></a>.</li> <li>\n<code>done</code>: A function to call when the password reset UI flow is complete. The normal login process is suspended until this function is called, so that the password for user A can be reset even if user B was logged in.</li> </ol> </dd> </dl>    <h2 class=\"api-heading\" id=\"Accounts-onEnrollmentLink\"> <div class=\"locus\"> Client </div> <code>Accounts.onEnrollmentLink</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/url_client.js#L144\" target=\"_blank\"> (accounts-base/url_client.js, line 144) </a> </div> </h2>   <p>Register a function to call when an account enrollment link is clicked in an email sent by <a href=\"#accounts_sendenrollmentemail\"><code>Accounts.sendEnrollmentEmail</code></a>. This function should be called in top-level code, not inside <code>Meteor.startup()</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to call. It is given two arguments:</p> <ol> <li>\n<code>token</code>: A password reset token that can be passed to <a href=\"#accounts_resetpassword\"><code>Accounts.resetPassword</code></a> to give the newly enrolled account a password.</li> <li>\n<code>done</code>: A function to call when the enrollment UI flow is complete. The normal login process is suspended until this function is called, so that user A can be enrolled even if user B was logged in.</li> </ol> </dd> </dl>    <h2 class=\"api-heading\" id=\"Accounts-onEmailVerificationLink\"> <div class=\"locus\"> Client </div> <code>Accounts.onEmailVerificationLink</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/url_client.js#L117\" target=\"_blank\"> (accounts-base/url_client.js, line 117) </a> </div> </h2>   <p>Register a function to call when an email verification link is clicked in an email sent by <a href=\"#accounts_sendverificationemail\"><code>Accounts.sendVerificationEmail</code></a>. This function should be called in top-level code, not inside <code>Meteor.startup()</code>.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to call. It is given two arguments:</p> <ol> <li>\n<code>token</code>: An email verification token that can be passed to <a href=\"#accounts_verifyemail\"><code>Accounts.verifyEmail</code></a>.</li> <li>\n<code>done</code>: A function to call when the email verification UI flow is complete. The normal login process is suspended until this function is called, so that the user can be notified that they are verifying their email before being logged in.</li> </ol> </dd> </dl>    <h2 class=\"api-heading\" id=\"Accounts-emailTemplates\"> <div class=\"locus\"> Server </div> <code>Accounts.emailTemplates</code> <div class=\"subtext-api\"> <code>import { Accounts } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-password/email_templates.js#L21\" target=\"_blank\"> (accounts-password/email_templates.js, line 21) </a> </div> </h2>   <p>Options to customize emails sent from the Accounts system.</p>    <p>This is an <code>Object</code> with several fields that are used to generate text/html for the emails sent by <code>sendResetPasswordEmail</code>, <code>sendEnrollmentEmail</code>, and <code>sendVerificationEmail</code>.</p> <p>Override fields of the object by assigning to them:</p> <ul> <li>\n<code>from</code>: A <code>String</code> with an <a href=\"http://tools.ietf.org/html/rfc5322\" target=\"_blank\" rel=\"external\">RFC5322</a> From address. By default, the email is sent from <code>no-reply@meteor.com</code>. If you wish to receive email from users asking for help with their account, be sure to set this to an email address that you can receive email at.</li> <li>\n<code>siteName</code>: The public name of your application. Defaults to the DNS name of the application (eg: <code>awesome.meteor.com</code>).</li> <li>\n<code>headers</code>: An <code>Object</code> for custom email headers as described in <a href=\"#email_send\"><code>Email.send</code></a>.</li> <li>\n<code>resetPassword</code>: An <code>Object</code> with the fields:<ul> <li>\n<code>from</code>: A <code>Function</code> used to override the <code>from</code> address defined by the <code>emailTemplates.from</code> field.</li> <li>\n<code>subject</code>: A <code>Function</code> that takes a user object and returns a <code>String</code> for the subject line of a reset password email.</li> <li>\n<code>text</code>: An optional <code>Function</code> that takes a user object and a url, and returns the body text for a reset password email.</li> <li>\n<code>html</code>: An optional <code>Function</code> that takes a user object and a url, and returns the body html for a reset password email.</li> </ul> </li> <li>\n<code>enrollAccount</code>: Same as <code>resetPassword</code>, but for initial password setup for new accounts.</li> <li>\n<code>verifyEmail</code>: Same as <code>resetPassword</code>, but for verifying the users email address.</li> </ul> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">Accounts.emailTemplates.siteName = \"AwesomeSite\";\nAccounts.emailTemplates.from = \"AwesomeSite Admin &lt;accounts@example.com&gt;\";\nAccounts.emailTemplates.enrollAccount.subject = function (user) {\n    return \"Welcome to Awesome Town, \" + user.profile.name;\n};\nAccounts.emailTemplates.enrollAccount.text = function (user, url) {\n   return \"You have been selected to participate in building a better future!\"\n\n     + \" To activate your account, simply click the link below:\\n\\n\"\n\n     + url;\n};\nAccounts.emailTemplates.resetPassword.from = function () {\n   // Overrides value set in Accounts.emailTemplates.from when resetting passwords\n\n   return \"AwesomeSite Password Reset &lt;no-reply@example.com&gt;\";\n};</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/passwords.html\" class=\"_attribution-link\">https://docs.meteor.com/api/passwords.html</a>\n  </p>\n</div>\n","api/tracker":"<h1 class=\"title-page\">Tracker</h1> <div class=\"subtitle-page\">Documentation of Tracker, Meteor's reactive system.</div>    <p>Meteor has a simple dependency tracking system which allows it to automatically rerun templates and other computations whenever <a href=\"#session\"><code>Session</code></a> variables, database queries, and other data sources change.</p> <p>Unlike most other systems, you don’t have to manually declare these dependencies — it “just works”. The mechanism is simple and efficient. When you call a function that supports reactive updates (such as a database query), it automatically saves the current Computation object, if any (representing, for example, the current template being rendered). Later, when the data changes, the function can “invalidate” the Computation, causing it to rerun (rerendering the template).</p> <p>Applications will find <a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a> useful, while more advanced facilities such as <code>Tracker.Dependency</code> and <code>onInvalidate</code> callbacks are intended primarily for package authors implementing new reactive data sources.</p>  <h2 class=\"api-heading\" id=\"Tracker-autorun\"> <div class=\"locus\"> Client </div> <code>Tracker.autorun(runFunc, [options])</code> <div class=\"subtext-api\"> <code>import { Tracker } from 'meteor/tracker'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L581\" target=\"_blank\"> (tracker/tracker.js, line 581) </a> </div> </h2>   <p>Run a function now and rerun it later whenever its dependencies change. Returns a Computation object that can be used to stop or observe the rerunning.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>runFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to run. It receives one argument: the Computation object that will be returned.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>onError</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional. The function to run when an error happens in the Computation. The only argument it recieves is the Error thrown. Defaults to the error being logged to the console.</p> </dd> </dl>   <p><code>Tracker.autorun</code> allows you to run a function that depends on reactive data sources, in such a way that if there are changes to the data later, the function will be rerun.</p> <p>For example, you can monitor a cursor (which is a reactive data source) and aggregate it into a session variable:</p> <pre class=\"highlight js\" data-language=\"js\">Tracker.autorun(function () {\n  var oldest = _.max(Monkeys.find().fetch(), function (monkey) {\n    return monkey.age;\n  });\n  if (oldest)\n    Session.set(\"oldest\", oldest.name);\n});</pre> <p>Or you can wait for a session variable to have a certain value, and do something the first time it does, calling <code>stop</code> on the computation to prevent further rerunning:</p> <pre class=\"highlight js\" data-language=\"js\">Tracker.autorun(function (c) {\n  if (! Session.equals(\"shouldAlert\", true))\n    return;\n\n  c.stop();\n  alert(\"Oh no!\");\n});</pre> <p>The function is invoked immediately, at which point it may alert and stop right away if <code>shouldAlert</code> is already true. If not, the function is run again when <code>shouldAlert</code> becomes true.</p> <p>A change to a data dependency does not cause an immediate rerun, but rather “invalidates” the computation, causing it to rerun the next time a flush occurs. A flush will occur automatically as soon as the system is idle if there are invalidated computations. You can also use <a href=\"#tracker_flush\"><code>Tracker.flush</code></a> to cause an immediate flush of all pending reruns.</p> <p>If you nest calls to <code>Tracker.autorun</code>, then when the outer call stops or reruns, the inner call will stop automatically. Subscriptions and observers are also automatically stopped when used as part of a computation that is rerun, allowing new ones to be established. See <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a> for more information about subscriptions and reactivity.</p> <p>If the initial run of an autorun throws an exception, the computation is automatically stopped and won’t be rerun.</p>  <h2 class=\"api-heading\" id=\"Tracker-flush\"> <div class=\"locus\"> Client </div> <code>Tracker.flush()</code> <div class=\"subtext-api\"> <code>import { Tracker } from 'meteor/tracker'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L466\" target=\"_blank\"> (tracker/tracker.js, line 466) </a> </div> </h2>   <p>Process all reactive updates immediately and ensure that all invalidated computations are rerun.</p>    <p>Normally, when you make changes (like writing to the database), their impact (like updating the DOM) is delayed until the system is idle. This keeps things predictable — you can know that the DOM won’t go changing out from under your code as it runs. It’s also one of the things that makes Meteor fast.</p> <p><code>Tracker.flush</code> forces all of the pending reactive updates to complete. For example, if an event handler changes a Session variable that will cause part of the user interface to rerender, the handler can call <code>flush</code> to perform the rerender immediately and then access the resulting DOM.</p> <p>An automatic flush occurs whenever the system is idle which performs exactly the same work as <code>Tracker.flush</code>. The flushing process consists of rerunning any invalidated computations. If additional invalidations happen while flushing, they are processed as part of the same flush until there is no more work to be done. Callbacks registered with <a href=\"#tracker_afterflush\"><code>Tracker.afterFlush</code></a> are called after processing outstanding invalidations.</p> <p>It is illegal to call <code>flush</code> from inside a <code>flush</code> or from a running computation.</p> <p>The <a href=\"https://github.com/meteor/docs/blob/master/long-form/tracker-manual.md#the-flush-cycle\" target=\"_blank\" rel=\"external\">Tracker manual</a><a> describes the motivation for the flush cycle and the guarantees made by <code>Tracker.flush</code> and <code>Tracker.afterFlush</code>.</a></p>  <h2 class=\"api-heading\" id=\"Tracker-nonreactive\"> <div class=\"locus\"> Client </div> <code>Tracker.nonreactive(func)</code> <div class=\"subtext-api\"> <code>import { Tracker } from 'meteor/tracker'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L611\" target=\"_blank\"> (tracker/tracker.js, line 611) </a> </div> </h2>   <p>Run a function without tracking dependencies.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to call immediately.</p> </dd> </dl>   <p>Calls <code>func</code> with <code>Tracker.currentComputation</code> temporarily set to <code>null</code> and returns <code>func</code>‘s own return value. If <code>func</code> accesses reactive data sources, these data sources will never cause a rerun of the enclosing computation.</p>  <h2 class=\"api-heading\" id=\"Tracker-active\"> <div class=\"locus\"> Client </div> <code>Tracker.active</code> <div class=\"subtext-api\"> <code>import { Tracker } from 'meteor/tracker'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L18\" target=\"_blank\"> (tracker/tracker.js, line 18) </a> </div> </h2>   <p>True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.</p>    <p>This value is useful for data source implementations to determine whether they are being accessed reactively or not.</p>  <h2 class=\"api-heading\" id=\"Tracker-currentComputation\"> <div class=\"locus\"> Client </div> <code>Tracker.currentComputation</code> <div class=\"subtext-api\"> <code>import { Tracker } from 'meteor/tracker'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L27\" target=\"_blank\"> (tracker/tracker.js, line 27) </a> </div> </h2>   <p>The current computation, or <code>null</code> if there isn't one. The current computation is the <a href=\"#tracker_computation\"><code>Tracker.Computation</code></a> object created by the innermost active call to <code>Tracker.autorun</code>, and it's the computation that gains dependencies when reactive data sources are accessed.</p>    <p>It’s very rare to need to access <code>currentComputation</code> directly. The current computation is used implicitly by <a href=\"#tracker_active\"><code>Tracker.active</code></a> (which tests whether there is one), <a href=\"#dependency_depend\"><code>dependency.depend()</code></a> (which registers that it depends on a dependency), and <a href=\"#tracker_oninvalidate\"><code>Tracker.onInvalidate</code></a> (which registers a callback with it).</p>  <h2 class=\"api-heading\" id=\"Tracker-onInvalidate\"> <div class=\"locus\"> Client </div> <code>Tracker.onInvalidate(callback)</code> <div class=\"subtext-api\"> <code>import { Tracker } from 'meteor/tracker'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L628\" target=\"_blank\"> (tracker/tracker.js, line 628) </a> </div> </h2>   <p>Registers a new <a href=\"#computation_oninvalidate\"><code>onInvalidate</code></a> callback on the current computation (which must exist), to be called immediately when the current computation is invalidated or stopped.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>A callback function that will be invoked as <code>func(c)</code>, where <code>c</code> is the computation on which the callback is registered.</p> </dd> </dl>   <p>See <a href=\"#computation_oninvalidate\"><em><code>computation</code></em><code>.onInvalidate</code></a> for more details.</p>  <h2 class=\"api-heading\" id=\"Tracker-afterFlush\"> <div class=\"locus\"> Client </div> <code>Tracker.afterFlush(callback)</code> <div class=\"subtext-api\"> <code>import { Tracker } from 'meteor/tracker'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L642\" target=\"_blank\"> (tracker/tracker.js, line 642) </a> </div> </h2>   <p>Schedules a function to be called during the next flush, or later in the current flush if one is in progress, after all invalidated computations have been rerun. The function will be run once and not on subsequent flushes unless <code>afterFlush</code> is called again.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to call at flush time.</p> </dd> </dl>   <p>Functions scheduled by multiple calls to <code>afterFlush</code> are guaranteed to run in the order that <code>afterFlush</code> was called. Functions are guaranteed to be called at a time when there are no invalidated computations that need rerunning. This means that if an <code>afterFlush</code> function invalidates a computation, that computation will be rerun before any other <code>afterFlush</code> functions are called.</p> <h2 id=\"tracker_computation\"><span>Tracker.Computation</span></h2> <p>A Computation object represents code that is repeatedly rerun in response to reactive data changes. Computations don’t have return values; they just perform actions, such as rerendering a template on the screen. Computations are created using <a href=\"#tracker_autorun\"><code>Tracker.autorun</code></a>. Use <a href=\"#computation_stop\"><code>stop</code></a> to prevent further rerunning of a computation.</p> <p>Each time a computation runs, it may access various reactive data sources that serve as inputs to the computation, which are called its dependencies. At some future time, one of these dependencies may trigger the computation to be rerun by invalidating it. When this happens, the dependencies are cleared, and the computation is scheduled to be rerun at flush time.</p> <p>The <em>current computation</em> (<a href=\"#tracker_currentcomputation\"><code>Tracker.currentComputation</code></a>) is the computation that is currently being run or rerun (computed), and the one that gains a dependency when a reactive data source is accessed. Data sources are responsible for tracking these dependencies using <a href=\"#tracker_dependency\"><code>Tracker.Dependency</code></a> objects.</p> <p>Invalidating a computation sets its <code>invalidated</code> property to true and immediately calls all of the computation’s <code>onInvalidate</code> callbacks. When a flush occurs, if the computation has been invalidated and not stopped, then the computation is rerun by setting the <code>invalidated</code> property to <code>false</code> and calling the original function that was passed to <code>Tracker.autorun</code>. A flush will occur when the current code finishes running, or sooner if <code>Tracker.flush</code> is called.</p> <p>Stopping a computation invalidates it (if it is valid) for the purpose of calling callbacks, but ensures that it will never be rerun.</p> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">// if we're in a computation, then perform some clean-up\n// when the current computation is invalidated (rerun or\n// stopped)\n\nif (Tracker.active) {\n  Tracker.onInvalidate(function () {\n    x.destroy();\n    y.finalize();\n  });\n}</pre>  <h3 class=\"api-heading\" id=\"Tracker-Computation-stop\"> <div class=\"locus\"> Client </div> <code>Tracker.Computation#stop()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L297\" target=\"_blank\"> (tracker/tracker.js, line 297) </a> </div> </h3>   <p>Prevents this computation from rerunning.</p>    <p>Stopping a computation is irreversible and guarantees that it will never be rerun. You can stop a computation at any time, including from the computation’s own run function. Stopping a computation that is already stopped has no effect.</p> <p>Stopping a computation causes its <code>onInvalidate</code> callbacks to run immediately if it is not currently invalidated, as well as its <code>stop</code> callbacks.</p> <p>Nested computations are stopped automatically when their enclosing computation is rerun.</p>  <h3 class=\"api-heading\" id=\"Tracker-Computation-invalidate\"> <div class=\"locus\"> Client </div> <code>Tracker.Computation#invalidate()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L268\" target=\"_blank\"> (tracker/tracker.js, line 268) </a> </div> </h3>   <p>Invalidates this computation so that it will be rerun.</p>    <p>Invalidating a computation marks it to be rerun at <a href=\"#tracker_flush\">flush time</a>, at which point the computation becomes valid again. It is rare to invalidate a computation manually, because reactive data sources invalidate their calling computations when they change. Reactive data sources in turn perform this invalidation using one or more <a href=\"#tracker_dependency\"><code>Tracker.Dependency</code></a> objects.</p> <p>Invalidating a computation immediately calls all <code>onInvalidate</code> callbacks registered on it. Invalidating a computation that is currently invalidated or is stopped has no effect. A computation can invalidate itself, but if it continues to do so indefinitely, the result will be an infinite loop.</p>  <h3 class=\"api-heading\" id=\"Tracker-Computation-onInvalidate\"> <div class=\"locus\"> Client </div> <code>Tracker.Computation#onInvalidate(callback)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L227\" target=\"_blank\"> (tracker/tracker.js, line 227) </a> </div> </h3>   <p>Registers <code>callback</code> to run when this computation is next invalidated, or runs it immediately if the computation is already invalidated. The callback is run exactly once and not upon future invalidations unless <code>onInvalidate</code> is called again after the computation becomes valid again.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Function to be called on invalidation. Receives one argument, the computation that was invalidated.</p> </dd> </dl>   <p><code>onInvalidate</code> registers a one-time callback that either fires immediately or as soon as the computation is next invalidated or stopped. It is used by reactive data sources to clean up resources or break dependencies when a computation is rerun or stopped.</p> <p>To get a callback after a computation has been recomputed, you can call <a href=\"#tracker_afterflush\"><code>Tracker.afterFlush</code></a> from <code>onInvalidate</code>.</p>  <h3 class=\"api-heading\" id=\"Tracker-Computation-onStop\"> <div class=\"locus\"> Client </div> <code>Tracker.Computation#onStop(callback)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L247\" target=\"_blank\"> (tracker/tracker.js, line 247) </a> </div> </h3>   <p>Registers <code>callback</code> to run when this computation is stopped, or runs it immediately if the computation is already stopped. The callback is run after any <code>onInvalidate</code> callbacks.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Function to be called on stop. Receives one argument, the computation that was stopped.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"Tracker-Computation-stopped\"> <div class=\"locus\"> Client </div> <code>Tracker.Computation#stopped</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L163\" target=\"_blank\"> (tracker/tracker.js, line 163) </a> </div> </h3>   <p>True if this computation has been stopped.</p>     <h3 class=\"api-heading\" id=\"Tracker-Computation-invalidated\"> <div class=\"locus\"> Client </div> <code>Tracker.Computation#invalidated</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L174\" target=\"_blank\"> (tracker/tracker.js, line 174) </a> </div> </h3>   <p>True if this computation has been invalidated (and not yet rerun), or if it has been stopped.</p>    <p>This property is initially false. It is set to true by <code>stop()</code> and <code>invalidate()</code>. It is reset to false when the computation is recomputed at flush time.</p>  <h3 class=\"api-heading\" id=\"Tracker-Computation-firstRun\"> <div class=\"locus\"> Client </div> <code>Tracker.Computation#firstRun</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L186\" target=\"_blank\"> (tracker/tracker.js, line 186) </a> </div> </h3>   <p>True during the initial run of the computation at the time <code>Tracker.autorun</code> is called, and false on subsequent reruns and at other times.</p>    <p>This property is a convenience to support the common pattern where a computation has logic specific to the first run.</p> <h2 id=\"tracker_dependency\"><span>Tracker.Dependency</span></h2> <p>A Dependency represents an atomic unit of reactive data that a computation might depend on. Reactive data sources such as Session or Minimongo internally create different Dependency objects for different pieces of data, each of which may be depended on by multiple computations. When the data changes, the computations are invalidated.</p> <p>Dependencies don’t store data, they just track the set of computations to invalidate if something changes. Typically, a data value will be accompanied by a Dependency object that tracks the computations that depend on it, as in this example:</p> <pre class=\"highlight js\" data-language=\"js\">\nvar weather = \"sunny\";\n\nvar weatherDep = new Tracker.Dependency;\n\n\nvar getWeather = function () {\n  weatherDep.depend()\n  return weather;\n};\n\n\nvar setWeather = function (w) {\n  weather = w;\n  // (could add logic here to only call changed()\n\n  // if the new value is different from the old)\n\n  weatherDep.changed();\n};</pre> <p>This example implements a weather data source with a simple getter and setter. The getter records that the current computation depends on the <code>weatherDep</code> dependency using <code>depend()</code>, while the setter signals the dependency to invalidate all dependent computations by calling <code>changed()</code>.</p> <p>The reason Dependencies do not store data themselves is that it can be useful to associate multiple Dependencies with the same piece of data. For example, one Dependency might represent the result of a database query, while another might represent just the number of documents in the result. A Dependency could represent whether the weather is sunny or not, or whether the temperature is above freezing. <a href=\"#session_equals\"><code>Session.equals</code></a> is implemented this way for efficiency. When you call <code>Session.equals(\"weather\", \"sunny\")</code>, the current computation is made to depend on an internal Dependency that does not change if the weather goes from, say, “rainy” to “cloudy”.</p> <p>Conceptually, the only two things a Dependency can do are gain a dependent and change.</p> <p>A Dependency’s dependent computations are always valid (they have <code>invalidated === false</code>). If a dependent is invalidated at any time, either by the Dependency itself or some other way, it is immediately removed.</p> <p>See the <a href=\"http://manual.meteor.com/#tracker-reactivevaluewithdependency\" target=\"_blank\" rel=\"external\"> Meteor Manual</a> to learn how to create a reactive data source using Tracker.Dependency.</p>  <h3 class=\"api-heading\" id=\"Tracker-Dependency-changed\"> <div class=\"locus\"> Client </div> <code>Tracker.Dependency#changed()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L440\" target=\"_blank\"> (tracker/tracker.js, line 440) </a> </div> </h3>   <p>Invalidate all dependent computations immediately and remove them as dependents.</p>     <h3 class=\"api-heading\" id=\"Tracker-Dependency-depend\"> <div class=\"locus\"> Client </div> <code>Tracker.Dependency#depend([fromComputation])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L415\" target=\"_blank\"> (tracker/tracker.js, line 415) </a> </div> </h3>   <p>Declares that the current computation (or <code>fromComputation</code> if given) depends on <code>dependency</code>. The computation will be invalidated the next time <code>dependency</code> changes.</p> <p>If there is no current computation and <code>depend()</code> is called with no arguments, it does nothing and returns false.</p> <p>Returns true if the computation is a new dependent of <code>dependency</code> rather than an existing one.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>fromComputation</code> <span class=\"type\"><a href=\"#tracker_computation\">Tracker.Computation</a></span> </dt> <dd> <p>An optional computation declared to depend on <code>dependency</code> instead of the current computation.</p> </dd> </dl>   <p><code>dep.depend()</code> is used in reactive data source implementations to record the fact that <code>dep</code> is being accessed from the current computation.</p>  <h3 class=\"api-heading\" id=\"Tracker-Dependency-hasDependents\"> <div class=\"locus\"> Client </div> <code>Tracker.Dependency#hasDependents()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/tracker/tracker.js#L453\" target=\"_blank\"> (tracker/tracker.js, line 453) </a> </div> </h3>   <p>True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.</p>    <p>For reactive data sources that create many internal Dependencies, this function is useful to determine whether a particular Dependency is still tracking any dependency relationships or if it can be cleaned up to save memory.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/tracker.html\" class=\"_attribution-link\">https://docs.meteor.com/api/tracker.html</a>\n  </p>\n</div>\n","api/templates":"<h1 class=\"title-page\">Templates</h1> <div class=\"subtitle-page\">Documentation of Meteor's template API.</div>    <p>When you write a template as <code>&lt;template name=\"foo\"&gt; ... &lt;/template&gt;</code> in an HTML file in your app, Meteor generates a “template object” named <code>Template.foo</code>. Note that template name cannot contain hyphens and other special characters.</p> <p>The same template may occur many times on a page, and these occurrences are called template instances. Template instances have a life cycle of being created, put into the document, and later taken out of the document and destroyed. Meteor manages these stages for you, including determining when a template instance has been removed or replaced and should be cleaned up. You can associate data with a template instance, and you can access its DOM nodes when it is in the document.</p> <p>Read more about templates and how to use them in the <a href=\"#pkg_spacebars\">Spacebars</a> package README and the <a href=\"http://guide.meteor.com/blaze.html\" target=\"_blank\" rel=\"external\">Blaze</a> article in the Meteor Guide.</p> <h2 title=\"Template.&lt;em&gt;myTemplate&lt;/em&gt;\" id=\"template_myTemplate\">Template Declarations</h2>  <h3 class=\"api-heading\" id=\"Template-events\"> <div class=\"locus\"> Client </div> <code>Template#events(eventMap)</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L477\" target=\"_blank\"> (blaze/template.js, line 477) </a> </div> </h3>   <p>Specify event handlers for this template.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>eventMap</code> <span class=\"type\"><a href=\"#eventmaps\">Event Map</a></span> </dt> <dd> <p>Event handlers to associate with this template.</p> </dd> </dl>   <p>Declare event handlers for instances of this template. Multiple calls add new event handlers in addition to the existing ones.</p> <p>See <a href=\"#eventmaps\">Event Maps</a> for a detailed description of the event map format and how event handling works in Meteor.</p>  <h3 class=\"api-heading\" id=\"Template-helpers\"> <div class=\"locus\"> Client </div> <code>Template#helpers(helpers)</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L443\" target=\"_blank\"> (blaze/template.js, line 443) </a> </div> </h3>   <p>Specify template helpers available to this template.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>helpers</code> <span class=\"type\">Object</span> </dt> <dd> <p>Dictionary of helper functions by name.</p> </dd> </dl>   <p>Each template has a local dictionary of helpers that are made available to it, and this call specifies helpers to add to the template’s dictionary.</p> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">Template.myTemplate.helpers({\n  foo() {\n    return Session.get(\"foo\");\n  }\n});</pre> <p>Now you can invoke this helper with <code>{{foo}}</code> in the template defined with <code>&lt;template name=\"myTemplate\"&gt;</code>.</p> <p>Helpers can accept positional and keyword arguments:</p> <pre class=\"highlight js\" data-language=\"js\">Template.myTemplate.helpers({\n  displayName(firstName, lastName, keyword) {\n    var prefix = keyword.hash.title ? keyword.hash.title + \" \" : \"\";\n    return prefix + firstName + \" \" + lastName;\n  }\n});</pre> <p>Then you can call this helper from template like this:</p> <pre class=\"highlight clojure\" data-language=\"clojure\">{{displayName \"John\" \"Doe\" title=\"President\"}}</pre> <p>You can learn more about arguments to helpers in <a href=\"https://atmospherejs.com/meteor/spacebars\" target=\"_blank\" rel=\"external\">Spacebars Readme</a>.</p> <p>Under the hood, each helper starts a new <a href=\"#/full/tracker_autorun\"><code>Tracker.autorun</code></a>. When its reactive dependencies change, the helper is rerun. Helpers depend on their data context, passed arguments and other reactive data sources accessed during execution.</p> <p>To create a helper that can be used in any template, use <a href=\"#template_registerhelper\"><code>Template.registerHelper</code></a>.</p>  <h3 class=\"api-heading\" id=\"Template-onRendered\"> <div class=\"locus\"> Client </div> <code>Template#onRendered</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L78\" target=\"_blank\"> (blaze/template.js, line 78) </a> </div> </h3>   <p>Register a function to be called when an instance of this template is inserted into the DOM.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to be added as a callback.</p> </dd> </dl>   <p>Callbacks added with this method are called once when an instance of Template.<em>myTemplate</em> is rendered into DOM nodes and put into the document for the first time.</p> <p>In the body of a callback, <code>this</code> is a <a href=\"#template_inst\">template instance</a> object that is unique to this occurrence of the template and persists across re-renderings. Use the <code>onCreated</code> and <code>onDestroyed</code> callbacks to perform initialization or clean-up on the object.</p> <p>Because your template has been rendered, you can use functions like <a href=\"#template_findAll\"><code>this.findAll</code></a> which look at its DOM nodes.</p> <p>This can be a good place to apply any DOM manipulations you want, after the template is rendered for the first time.</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"myPictures\"&gt;\n  &lt;div class=\"container\"&gt;\n\n    {{#each pictures}}\n      &lt;img class=\"item\" src=\"/{{.}}\"/&gt;\n\n    {{/each}}\n  &lt;/div&gt;\n\n&lt;/template&gt;</pre> <pre class=\"highlight js\" data-language=\"js\">Template.myPictures.onRendered(function () {\n  // Use the Packery jQuery plugin\n\n  this.$('.container').packery({\n    itemSelector: '.item',\n    gutter: 10\n\n  });\n});</pre>  <h3 class=\"api-heading\" id=\"Template-onCreated\"> <div class=\"locus\"> Client </div> <code>Template#onCreated</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L65\" target=\"_blank\"> (blaze/template.js, line 65) </a> </div> </h3>   <p>Register a function to be called when an instance of this template is created.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to be added as a callback.</p> </dd> </dl>   <p>Callbacks added with this method are called before your template’s logic is evaluated for the first time. Inside a callback, <code>this</code> is the new <a href=\"#template_inst\">template instance</a> object. Properties you set on this object will be visible from the callbacks added with <code>onRendered</code> and <code>onDestroyed</code> methods and from event handlers.</p> <p>These callbacks fire once and are the first group of callbacks to fire. Handling the <code>created</code> event is a useful way to set up values on template instance that are read from template helpers using <code>Template.instance()</code>.</p> <pre class=\"highlight js\" data-language=\"js\">Template.myPictures.onCreated(function () {\n  // set up local reactive variables\n\n  this.highlightedPicture = new ReactiveVar(null);\n\n  // register this template within some central store\n\n  GalleryTemplates.push(this);\n});</pre>  <h3 class=\"api-heading\" id=\"Template-onDestroyed\"> <div class=\"locus\"> Client </div> <code>Template#onDestroyed</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L91\" target=\"_blank\"> (blaze/template.js, line 91) </a> </div> </h3>   <p>Register a function to be called when an instance of this template is removed from the DOM and destroyed.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>A function to be added as a callback.</p> </dd> </dl>   <p>These callbacks are called when an occurrence of a template is taken off the page for any reason and not replaced with a re-rendering. Inside a callback, <code>this</code> is the <a href=\"#template_inst\">template instance</a> object being destroyed.</p> <p>This group of callbacks is most useful for cleaning up or undoing any external effects of <code>created</code> or <code>rendered</code> groups. This group fires once and is the last callback to fire.</p> <pre class=\"highlight js\" data-language=\"js\">Template.myPictures.onDestroyed(function () {\n  // deregister from some central store\n\n  GalleryTemplates = _.without(GalleryTemplates, this);\n});</pre> <h2 id=\"template_inst\">Template instances</h2> <p>A template instance object represents an occurrence of a template in the document. It can be used to access the DOM and it can be assigned properties that persist as the template is reactively updated.</p> <p>Template instance objects are found as the value of <code>this</code> in the <code>onCreated</code>, <code>onRendered</code>, and <code>onDestroyed</code> template callbacks, and as an argument to event handlers. You can access the current template instance from helpers using <a href=\"#template_instance\"><code>Template.instance()</code></a>.</p> <p>In addition to the properties and functions described below, you can assign additional properties of your choice to the object. Use the <a href=\"#template_onCreated\"><code>onCreated</code></a> and <a href=\"#template_onDestroyed\"><code>onDestroyed</code></a> methods to add callbacks performing initialization or clean-up on the object.</p> <p>You can only access <code>findAll</code>, <code>find</code>, <code>firstNode</code>, and <code>lastNode</code> from the <code>onRendered</code> callback and event handlers, not from <code>onCreated</code> and <code>onDestroyed</code>, because they require the template instance to be in the DOM.</p> <p>Template instance objects are <code>instanceof Blaze.TemplateInstance</code>.</p>  <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-findAll\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#findAll(selector)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L304\" target=\"_blank\"> (blaze/template.js, line 304) </a> </div> </h3>   <p>Find all elements matching <code>selector</code> in this template instance.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>selector</code> <span class=\"type\">String</span> </dt> <dd> <p>The CSS selector to match, scoped to the template contents.</p> </dd> </dl>   <p><code>template.findAll</code> returns an array of DOM elements matching <code>selector</code>.</p>  <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-$\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#$(selector)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L291\" target=\"_blank\"> (blaze/template.js, line 291) </a> </div> </h3>   <p>Find all elements matching <code>selector</code> in this template instance, and return them as a JQuery object.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>selector</code> <span class=\"type\">String</span> </dt> <dd> <p>The CSS selector to match, scoped to the template contents.</p> </dd> </dl>   <p><code>template.$</code> returns a <a href=\"http://api.jquery.com/Types/#jQuery\" target=\"_blank\" rel=\"external\">jQuery object</a> of those same elements. jQuery objects are similar to arrays, with additional methods defined by the jQuery library.</p> <p>The template instance serves as the document root for the selector. Only elements inside the template and its sub-templates can match parts of the selector.</p>  <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-find\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#find(selector)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L314\" target=\"_blank\"> (blaze/template.js, line 314) </a> </div> </h3>   <p>Find one element matching <code>selector</code> in this template instance.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>selector</code> <span class=\"type\">String</span> </dt> <dd> <p>The CSS selector to match, scoped to the template contents.</p> </dd> </dl>   <p>Returns one DOM element matching <code>selector</code>, or <code>null</code> if there are no such elements.</p> <p>The template instance serves as the document root for the selector. Only elements inside the template and its sub-templates can match parts of the selector.</p>  <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-firstNode\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#firstNode</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L254\" target=\"_blank\"> (blaze/template.js, line 254) </a> </div> </h3>   <p>The first top-level DOM node in this template instance.</p>    <p>The two nodes <code>firstNode</code> and <code>lastNode</code> indicate the extent of the rendered template in the DOM. The rendered template includes these nodes, their intervening siblings, and their descendents. These two nodes are siblings (they have the same parent), and <code>lastNode</code> comes after <code>firstNode</code>, or else they are the same node.</p>  <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-lastNode\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#lastNode</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L264\" target=\"_blank\"> (blaze/template.js, line 264) </a> </div> </h3>   <p>The last top-level DOM node in this template instance.</p>     <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-data\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#data</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L161\" target=\"_blank\"> (blaze/template.js, line 161) </a> </div> </h3>   <p>The data context of this instance's latest invocation.</p>    <p>This property provides access to the data context at the top level of the template. It is updated each time the template is re-rendered. Access is read-only and non-reactive.</p>  <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-autorun\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#autorun(runFunc)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L324\" target=\"_blank\"> (blaze/template.js, line 324) </a> </div> </h3>   <p>A version of <a href=\"#tracker_autorun\">Tracker.autorun</a> that is stopped when the template is destroyed.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>runFunc</code> <span class=\"type\">Function</span> </dt> <dd> <p>The function to run. It receives one argument: a Tracker.Computation object.</p> </dd> </dl>   <p>You can use <code>this.autorun</code> from an <a href=\"#template_onCreated\"><code>onCreated</code></a> or <a href=\"#template_onRendered\"><code>onRendered</code></a> callback to reactively update the DOM or the template instance. You can use <code>Template.currentData()</code> inside of this callback to access reactive data context of the template instance. The Computation is automatically stopped when the template is destroyed.</p> <p>Alias for <code>template.view.autorun</code>.</p>  <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-subscribe\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#subscribe(name, [arg1, arg2...], [options])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L347\" target=\"_blank\"> (blaze/template.js, line 347) </a> </div> </h3>   <p>A version of <a href=\"#meteor_subscribe\">Meteor.subscribe</a> that is stopped when the template is destroyed.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>Name of the subscription. Matches the name of the server's <code>publish()</code> call.</p> </dd> <dt> <code>arg1, arg2...</code> <span class=\"type\">Any</span> </dt> <dd> <p>Optional arguments passed to publisher function on server.</p> </dd> </dl> <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>onReady</code> <span class=\"type\">Function</span> </dt> <dd> <p>Passed to <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>.</p> </dd> <dt> <code>onStop</code> <span class=\"type\">Function</span> </dt> <dd> <p>Passed to <a href=\"#meteor_subscribe\"><code>Meteor.subscribe</code></a>.</p> </dd> <dt> <code>connection</code> <span class=\"type\"><a href=\"#ddp_connect\">DDP Connection</a></span> </dt> <dd> <p>The connection on which to make the subscription.</p> </dd> </dl>   <p>You can use <code>this.subscribe</code> from an <a href=\"#template_onCreated\"><code>onCreated</code></a> callback to specify which data publications this template depends on. The subscription is automatically stopped when the template is destroyed.</p> <p>There is a complementary function <code>Template.instance().subscriptionsReady()</code> which returns true when all of the subscriptions called with <code>this.subscribe</code> are ready.</p> <p>Inside the template’s HTML, you can use the built-in helper <code>Template.subscriptionsReady</code>, which is an easy pattern for showing loading indicators in your templates when they depend on data loaded from subscriptions.</p> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">Template.notifications.onCreated(function () {\n  // Use this.subscribe inside onCreated callback\n\n  this.subscribe(\"notifications\");\n});</pre> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"notifications\"&gt;\n  {{#if Template.subscriptionsReady}}\n    &lt;!-- This is displayed when all data is ready. --&gt;\n\n    {{#each notifications}}\n      {{&gt; notification}}\n    {{/each}}\n  {{else}}\n    Loading...\n  {{/if}}\n&lt;/template&gt;</pre> <p>Another example where the subscription depends on the data context:</p> <pre class=\"highlight js\" data-language=\"js\">Template.comments.onCreated(function () {\n  // Use this.subscribe with the data context reactively\n\n  this.autorun(() =&gt; {\n    var dataContext = Template.currentData();\n    this.subscribe(\"comments\", dataContext.postId);\n  });\n});</pre> <pre class=\"highlight html\" data-language=\"html\">{{#with post}}\n  {{&gt; comments postId=_id}}\n{{/with}}</pre> <p>Another example where you want to initialize a plugin when the subscription is done:</p> <pre class=\"highlight js\" data-language=\"js\">Template.listing.onRendered(function () {\n  var template = this;\n\n  template.subscribe('listOfThings', () =&gt; {\n    // Wait for the data to load using the callback\n\n    Tracker.afterFlush(() =&gt; {\n      // Use Tracker.afterFlush to wait for the UI to re-render\n\n      // then use highlight.js to highlight a code snippet\n\n      highlightBlock(template.find('.code'));\n    });\n  });\n});</pre>  <h3 class=\"api-heading\" id=\"Blaze-TemplateInstance-view\"> <div class=\"locus\"> Client </div> <code>Blaze.TemplateInstance#view</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L243\" target=\"_blank\"> (blaze/template.js, line 243) </a> </div> </h3>   <p>The <a href=\"#blaze_view\">View</a> object for this invocation of the template.</p>     <h2 class=\"api-heading\" id=\"Template-registerHelper\"> <div class=\"locus\"> Client </div> <code>Template.registerHelper(name, function)</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L556\" target=\"_blank\"> (blaze/template.js, line 556) </a> </div> </h2>   <p>Defines a <a href=\"#template_helpers\">helper function</a> which can be used from all templates.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>name</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the helper function you are defining.</p> </dd> <dt> <code>function</code> <span class=\"type\">Function</span> </dt> <dd> <p>The helper function itself.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Template-instance\"> <div class=\"locus\"> Client </div> <code>Template.instance()</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L505\" target=\"_blank\"> (blaze/template.js, line 505) </a> </div> </h2>   <p>The <a href=\"#template_inst\">template instance</a> corresponding to the current template helper, event handler, callback, or autorun. If there isn't one, <code>null</code>.</p>     <h2 class=\"api-heading\" id=\"Template-currentData\"> <div class=\"locus\"> Client </div> <code>Template.currentData()</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L537\" target=\"_blank\"> (blaze/template.js, line 537) </a> </div> </h2>   <ul> <li>Inside an <code>onCreated</code>, <code>onRendered</code>, or <code>onDestroyed</code> callback, returns the data context of the template.</li> <li>Inside an event handler, returns the data context of the template on which this event handler was defined.</li> <li>Inside a helper, returns the data context of the DOM node where the helper was used.</li> </ul> <p>Establishes a reactive dependency on the result.</p>     <h2 class=\"api-heading\" id=\"Template-parentData\"> <div class=\"locus\"> Client </div> <code>Template.parentData([numLevels])</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/blaze/template.js#L546\" target=\"_blank\"> (blaze/template.js, line 546) </a> </div> </h2>   <p>Accesses other data contexts that enclose the current data context.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>numLevels</code> <span class=\"type\">Integer</span> </dt> <dd> <p>The number of levels beyond the current data context to look. Defaults to 1.</p> </dd> </dl>   <p>For example, <code>Template.parentData(0)</code> is equivalent to <code>Template.currentData()</code>. <code>Template.parentData(2)</code> is equivalent to <code>{{../..}}</code> in a template.</p>  <h2 class=\"api-heading\" id=\"Template-body\"> <div class=\"locus\"> Client </div> <code>Template.body</code> <div class=\"subtext-api\"> <code>import { Template } from 'meteor/templating'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/templating/templating.js#L47\" target=\"_blank\"> (templating/templating.js, line 47) </a> </div> </h2>   <p>The <a href=\"#templates_api\">template object</a> representing your <code>&lt;body&gt;</code> tag.</p>    <p>You can define helpers and event maps on <code>Template.body</code> just like on any <code>Template.myTemplate</code> object.</p> <p>Helpers on <code>Template.body</code> are only available in the <code>&lt;body&gt;</code> tags of your app. To register a global helper, use <a href=\"#template_registerhelper\">Template.registerHelper</a>. Event maps on <code>Template.body</code> don’t apply to elements added to the body via <code>Blaze.render</code>, jQuery, or the DOM API, or to the body element itself. To handle events on the body, window, or document, use jQuery or the DOM API.</p>  <h2 class=\"api-heading\" id=\"Template-dynamic\"> <div class=\"locus\"> Templates </div> <code>{{&gt; Template.dynamic template=template [data=data] }}</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/templating/dynamic.js#L3\" target=\"_blank\"> (templating/dynamic.js, line 3) </a> </div> </h2>   <p>Choose a template to include dynamically, by name.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>template</code> <span class=\"type\">String</span> </dt> <dd> <p>The name of the template to include.</p> </dd> <dt> <code>data</code> <span class=\"type\">Object</span> </dt> <dd> <p>Optional. The data context in which to include the template.</p> </dd> </dl>   <p><code>Template.dynamic</code> allows you to include a template by name, where the name may be calculated by a helper and may change reactively. The <code>data</code> argument is optional, and if it is omitted, the current data context is used. It’s also possible, to use <code>Template.dynamic</code> as a block helper (<code>{{#Template.dynamic}} ... {{/Template.dynamic}}</code>)</p> <p>For example, if there is a template named “foo”, <code>{{&gt; Template.dynamic\ntemplate=\"foo\"}}</code> is equivalent to <code>{{&gt; foo}}</code> and <code>{{#Template.dynamic template=\"foo\"}} ... {{/Template.dynamic}}</code> is equivalent to <code>{{#foo}} ... {{/foo}}</code>.</p> <h2 id=\"eventmaps\">Event Maps</h2> <p>An event map is an object where the properties specify a set of events to handle, and the values are the handlers for those events. The property can be in one of several forms:</p> <dl> <dt><span class=\"name\"><em>eventtype</em></span></dt>\n<dd>\n<p>Matches a particular type of event, such as ‘click’.</p> </dd> <dt><span class=\"name\"><em>eventtype selector</em></span></dt>\n<dd>\n<p>Matches a particular type of event, but only when it appears on an element that matches a certain CSS selector.</p> </dd> <dt><span class=\"name\"><em>event1, event2</em></span></dt>\n<dd>\n<p>To handle more than one type of event with the same function, use a comma-separated list.</p> </dd> </dl> <p>The handler function receives two arguments: <code>event</code>, an object with information about the event, and <code>template</code>, a <a href=\"#template_inst\">template instance</a> for the template where the handler is defined. The handler also receives some additional context data in <code>this</code>, depending on the context of the current element handling the event. In a template, an element’s context is the data context where that element occurs, which is set by block helpers such as <code>#with</code> and <code>#each</code>.</p> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">{\n  // Fires when any element is clicked\n\n  'click'(event) { ... },\n\n  // Fires when any element with the 'accept' class is clicked\n\n  'click .accept'(event) { ... },\n\n  // Fires when 'accept' is clicked or focused, or a key is pressed\n\n  'click .accept, focus .accept, keypress'(event) { ... }\n}</pre> <p>Most events bubble up the document tree from their originating element. For example, <code>'click p'</code> catches a click anywhere in a paragraph, even if the click originated on a link, span, or some other element inside the paragraph. The originating element of the event is available as the <code>target</code> property, while the element that matched the selector and is currently handling it is called <code>currentTarget</code>.</p> <pre class=\"highlight js\" data-language=\"js\">{\n  'click p'(event) {\n    var paragraph = event.currentTarget; // always a P\n\n    var clickedElement = event.target; // could be the P or a child element\n\n  }\n}</pre> <p>If a selector matches multiple elements that an event bubbles to, it will be called multiple times, for example in the case of <code>'click\ndiv'</code> or <code>'click *'</code>. If no selector is given, the handler will only be called once, on the original target element.</p> <p>The following properties and methods are available on the event object passed to handlers:</p> <dl class=\"objdesc\"> <dt>\n<span class=\"name\">type</span><span class=\"type\">String</span>\n</dt>\n<dd>\n<p>The event’s type, such as “click”, “blur” or “keypress”.</p> </dd> <dt>\n<span class=\"name\">target</span><span class=\"type\">DOM Element</span>\n</dt>\n<dd>\n<p>The element that originated the event.</p> </dd> <dt>\n<span class=\"name\">currentTarget</span><span class=\"type\">DOM Element</span>\n</dt>\n<dd>\n<p>The element currently handling the event. This is the element that matched the selector in the event map. For events that bubble, it may be <code>target</code> or an ancestor of <code>target</code>, and its value changes as the event bubbles.</p> </dd> <dt>\n<span class=\"name\">which</span><span class=\"type\">Number</span>\n</dt>\n<dd>\n<p>For mouse events, the number of the mouse button (1=left, 2=middle, 3=right). For key events, a character or key code.</p> </dd> <dt><span class=\"name\">stopPropagation()</span></dt>\n<dd>\n<p>Prevent the event from propagating (bubbling) up to other elements. Other event handlers matching the same element are still fired, in this and other event maps.</p> </dd> <dt><span class=\"name\">stopImmediatePropagation()</span></dt>\n<dd>\n<p>Prevent all additional event handlers from being run on this event, including other handlers in this event map, handlers reached by bubbling, and handlers in other event maps.</p> </dd> <dt><span class=\"name\">preventDefault()</span></dt>\n<dd>\n<p>Prevents the action the browser would normally take in response to this event, such as following a link or submitting a form. Further handlers are still called, but cannot reverse the effect.</p> </dd> <dt><span class=\"name\">isPropagationStopped()</span></dt>\n<dd>\n<p>Returns whether <code>stopPropagation()</code> has been called for this event.</p> </dd> <dt><span class=\"name\">isImmediatePropagationStopped()</span></dt>\n<dd>\n<p>Returns whether <code>stopImmediatePropagation()</code> has been called for this event.</p> </dd> <dt><span class=\"name\">isDefaultPrevented()</span></dt>\n<dd>\n<p>Returns whether <code>preventDefault()</code> has been called for this event.</p> </dd> </dl> <p>Returning <code>false</code> from a handler is the same as calling both <code>stopImmediatePropagation</code> and <code>preventDefault</code> on the event.</p> <p>Event types and their uses include:</p> <dl class=\"objdesc\"> <dt><span class=\"name\"><code>click</code></span></dt>\n<dd>\n<p>Mouse click on any element, including a link, button, form control, or div. Use <code>preventDefault()</code> to prevent a clicked link from being followed. Some ways of activating an element from the keyboard also fire <code>click</code>.</p> </dd> <dt><span class=\"name\"><code>dblclick</code></span></dt>\n<dd>\n<p>Double-click.</p> </dd> <dt><span class=\"name\"><code>focus, blur</code></span></dt>\n<dd>\n<p>A text input field or other form control gains or loses focus. You can make any element focusable by giving it a <code>tabindex</code> property. Browsers differ on whether links, checkboxes, and radio buttons are natively focusable. These events do not bubble.</p> </dd> <dt><span class=\"name\"><code>change</code></span></dt>\n<dd>\n<p>A checkbox or radio button changes state. For text fields, use <code>blur</code> or key events to respond to changes.</p> </dd> <dt><span class=\"name\"><code>mouseenter, mouseleave</code></span></dt>\n<dd>\n<p> The pointer enters or leaves the bounds of an element. These events do not bubble.</p> </dd> <dt><span class=\"name\"><code>mousedown, mouseup</code></span></dt>\n<dd>\n<p>The mouse button is newly down or up.</p> </dd> <dt><span class=\"name\"><code>keydown, keypress, keyup</code></span></dt>\n<dd>\n<p>The user presses a keyboard key. <code>keypress</code> is most useful for catching typing in text fields, while <code>keydown</code> and <code>keyup</code> can be used for arrow keys or modifier keys.</p> </dd> </dl> <p>Other DOM events are available as well, but for the events above, Meteor has taken some care to ensure that they work uniformly in all browsers.</p> <h2 id=\"spacebars\">Spacebars</h2> <p>Spacebars is the language used to write Meteor templates. It is inspired by <a href=\"http://handlebarsjs.com/\" target=\"_blank\" rel=\"external\">Handlebars</a>. It shares some of the spirit and syntax of Handlebars, but has been tailored to produce reactive Meteor templates when compiled.</p> <p>For more information about Spacebars, see the <a href=\"#pkg_spacebars\">Spacebars README</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/templates.html\" class=\"_attribution-link\">https://docs.meteor.com/api/templates.html</a>\n  </p>\n</div>\n","packages/coffeescript":"<h1 class=\"title-page\">coffeescript</h1> <div class=\"subtitle-page\">Documentation of Meteor's `coffeescript` package.</div>    <p><a href=\"http://coffeescript.org/\" target=\"_blank\" rel=\"external\">CoffeeScript</a> is a little language that compiles into JavaScript. It provides a simple syntax without lots of braces and parentheses. The code compiles one-to-one into the equivalent JS, and there is no interpretation at runtime.</p> <p>CoffeeScript is supported on both the client and the server. Files ending with <code>.coffee</code>, <code>.litcoffee</code>, or <code>.coffee.md</code> are automatically compiled to JavaScript.</p> <h3 id=\"Namespacing-and-CoffeeScript\">\nNamespacing and CoffeeScript</h3>\n<p>Here’s how CoffeeScript works with Meteor’s namespacing.</p> <ul> <li>\n<p>Per the usual CoffeeScript convention, CoffeeScript variables are file-scoped by default (visible only in the <code>.coffee</code> file where they are defined.)</p> </li> <li>\n<p>When writing a package, CoffeeScript-defined variables can be exported like any other variable (see <a href=\"../api/packagejs\">Package.js</a>). Exporting a variable pulls it up to package scope, meaning that it will be visible to all of the code in your app or package (both <code>.js</code> and <code>.coffee</code> files).</p> </li> <li>\n<p>Package-scope variables declared in <code>.js</code> files are visible in any <code>.coffee</code> files in the same app or project.</p> </li> <li>\n<p>There is no way to make a package-scope variable from a <code>.coffee</code> file other than exporting it. We couldn’t figure out a way to make this fit naturally inside the CoffeeScript language. If you want to use package-scope variables with CoffeeScript, one way is to make a short <code>.js</code> file that declares all of your package-scope variables. They can then be used and assigned to from <code>.coffee</code> files.</p> </li> <li>\n<p>If you want to share variables between <code>.coffee</code> files in the same package, and don’t want to separately declare them in a <code>.js</code> file, we have an experimental feature that you may like. An object called <code>share</code> is visible in CoffeeScript code and is shared across all <code>.coffee</code> files in the same package. So, you can write <code>share.foo</code> for a value that is shared between all CoffeeScript code in a package, but doesn’t escape that package.</p> </li> </ul> <p>Heavy CoffeeScript users, please let us know how this arrangement works for you, whether <code>share</code> is helpful for you, and anything else you’d like to see changed.</p> <h3 id=\"Modules-and-CoffeeScript\">\nModules and CoffeeScript</h3>\n<p>See <a href=\"modules#CoffeeScript\">Modules » Syntax » CoffeeScript</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/coffeescript.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/coffeescript.html</a>\n  </p>\n</div>\n","api/accounts-multi":"<h1 class=\"title-page\">Accounts (multi-server)</h1> <div class=\"subtitle-page\">Documentation of how to use the Accounts client to connect to other servers.</div>    <p>The <code>accounts-base</code> package exports two constructors, called <code>AccountsClient</code> and <code>AccountsServer</code>, which are used to create the <code>Accounts</code> object that is available on the client and the server, respectively.</p> <p>This predefined <code>Accounts</code> object (along with similar convenience methods of <code>Meteor</code>, such as <a href=\"#meteor_logout\"><code>Meteor.logout</code></a>) is sufficient to implement most accounts-related logic in Meteor apps. Nevertheless, these two constructors can be instantiated more than once, to create multiple independent connections between different accounts servers and their clients, in more complicated authentication situations.</p>  <h2 class=\"api-heading\" id=\"AccountsCommon\"> <div class=\"locus\"> Anywhere </div> <code>new AccountsCommon(options)</code> <div class=\"subtext-api\"> <code>import { AccountsCommon } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L1\" target=\"_blank\"> (accounts-base/accounts_common.js, line 1) </a> </div> </h2>   <p>Super-constructor for AccountsClient and AccountsServer.</p>    <p>The <code>AccountsClient</code> and <code>AccountsServer</code> classes share a common superclass, <code>AccountsCommon</code>. Methods defined on <code>AccountsCommon.prototype</code> will be available on both the client and the server, via the predefined <code>Accounts</code> object (most common) or any custom <code>accountsClientOrServer</code> object created using the <code>AccountsClient</code> or <code>AccountsServer</code> constructors (less common).</p> <p>Here are a few of those methods:</p>  <h3 class=\"api-heading\" id=\"AccountsCommon-userId\"> <div class=\"locus\"> Anywhere but publish functions </div> <code>AccountsCommon#userId()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L49\" target=\"_blank\"> (accounts-base/accounts_common.js, line 49) </a> </div> </h3>   <p>Get the current user id, or <code>null</code> if no user is logged in. A reactive data source.</p>     <h3 class=\"api-heading\" id=\"AccountsCommon-user\"> <div class=\"locus\"> Anywhere but publish functions </div> <code>AccountsCommon#user()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L57\" target=\"_blank\"> (accounts-base/accounts_common.js, line 57) </a> </div> </h3>   <p>Get the current user record, or <code>null</code> if no user is logged in. A reactive data source.</p>     <h3 class=\"api-heading\" id=\"AccountsCommon-config\"> <div class=\"locus\"> Anywhere </div> <code>AccountsCommon#config(options)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L97\" target=\"_blank\"> (accounts-base/accounts_common.js, line 97) </a> </div> </h3>   <p>Set global accounts options.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>sendVerificationEmail</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>New users with an email address will receive an address verification email.</p> </dd> <dt> <code>forbidClientAccountCreation</code> <span class=\"type\">Boolean</span> </dt> <dd> <p>Calls to <a href=\"#accounts_createuser\"><code>createUser</code></a> from the client will be rejected. In addition, if you are using <a href=\"#accountsui\">accounts-ui</a>, the \"Create account\" link will not be available.</p> </dd> <dt> <code>restrictCreationByEmailDomain</code> <span class=\"type\">String or Function</span> </dt> <dd> <p>If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true. The function is passed the full email address of the proposed new user. Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: <code>Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })</code>.</p> </dd> <dt> <code>loginExpirationInDays</code> <span class=\"type\">Number</span> </dt> <dd> <p>The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to <code>null</code> to disable login expiration.</p> </dd> <dt> <code>oauthSecretKey</code> <span class=\"type\">String</span> </dt> <dd> <p>When using the <code>oauth-encryption</code> package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64. This option may only be specifed on the server. See packages/oauth-encryption/README.md for details.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"AccountsCommon-onLogin\"> <div class=\"locus\"> Anywhere </div> <code>AccountsCommon#onLogin(func)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L151\" target=\"_blank\"> (accounts-base/accounts_common.js, line 151) </a> </div> </h3>   <p>Register a callback to be called after a login attempt succeeds.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>The callback to be called when login is successful.</p> </dd> </dl>   <p>See description of <a href=\"#accounts_onloginfailure\">AccountsCommon#onLoginFailure</a> for details.</p>  <h3 class=\"api-heading\" id=\"AccountsCommon-onLoginFailure\"> <div class=\"locus\"> Anywhere </div> <code>AccountsCommon#onLoginFailure(func)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L160\" target=\"_blank\"> (accounts-base/accounts_common.js, line 160) </a> </div> </h3>   <p>Register a callback to be called after a login attempt fails.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>The callback to be called after the login has failed.</p> </dd> </dl>   <p>Either the <code>onLogin</code> or the <code>onLoginFailure</code> callbacks will be called for each login attempt. The <code>onLogin</code> callbacks are called after the user has been successfully logged in. The <code>onLoginFailure</code> callbacks are called after a login attempt is denied.</p> <p>These functions return an object with a single method, <code>stop</code>. Calling <code>stop()</code> unregisters the callback.</p> <p>On the server, the callbacks get a single argument, the same attempt info object as <a href=\"#accounts_validateloginattempt\"><code>validateLoginAttempt</code></a>. On the client, no arguments are passed.</p>  <h3 class=\"api-heading\" id=\"AccountsCommon-onLogout\"> <div class=\"locus\"> Anywhere </div> <code>AccountsCommon#onLogout(func)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_common.js#L169\" target=\"_blank\"> (accounts-base/accounts_common.js, line 169) </a> </div> </h3>   <p>Register a callback to be called after a logout attempt succeeds.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>The callback to be called when logout is successful.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"AccountsClient\"> <div class=\"locus\"> Client </div> <code>new AccountsClient(options)</code> <div class=\"subtext-api\"> <code>import { AccountsClient } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L3\" target=\"_blank\"> (accounts-base/accounts_client.js, line 3) </a> </div> </h2>   <p>Constructor for the <code>Accounts</code> object on the client.</p>  <h4 class=\"subheading\">Options</h4> <dl class=\"args\"> <dt> <code>connection</code> <span class=\"type\">Object</span> </dt> <dd> <p>Optional DDP connection to reuse.</p> </dd> <dt> <code>ddpUrl</code> <span class=\"type\">String</span> </dt> <dd> <p>Optional URL for creating a new DDP connection.</p> </dd> </dl>   <p>At most one of <code>options.connection</code> and <code>options.ddpUrl</code> should be provided in any instantiation of <code>AccountsClient</code>. If neither is provided, <code>Meteor.connection</code> will be used as the <code>.connection</code> property of the <code>AccountsClient</code> instance.</p> <p>Note that <code>AccountsClient</code> is currently available only on the client, due to its use of browser APIs such as <code>window.localStorage</code>. In principle, though, it might make sense to establish a client connection from one server to another remote accounts server. Please <a href=\"https://github.com/meteor/meteor/wiki/Contributing-to-Meteor#feature-requests\" target=\"_blank\" rel=\"external\">let us know</a> if you find yourself needing this server-to-server functionality.</p> <p>These methods are defined on <code>AccountsClient.prototype</code>, and are thus available only on the client:</p>  <h3 class=\"api-heading\" id=\"AccountsClient-loggingIn\"> <div class=\"locus\"> Client </div> <code>AccountsClient#loggingIn()</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L56\" target=\"_blank\"> (accounts-base/accounts_client.js, line 56) </a> </div> </h3>   <p>True if a login method (such as <code>Meteor.loginWithPassword</code>, <code>Meteor.loginWithFacebook</code>, or <code>Accounts.createUser</code>) is currently in progress. A reactive data source.</p>     <h3 class=\"api-heading\" id=\"AccountsClient-logout\"> <div class=\"locus\"> Client </div> <code>AccountsClient#logout([callback])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L66\" target=\"_blank\"> (accounts-base/accounts_client.js, line 66) </a> </div> </h3>   <p>Log the user out.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl>    <h3 class=\"api-heading\" id=\"AccountsClient-logoutOtherClients\"> <div class=\"locus\"> Client </div> <code>AccountsClient#logoutOtherClients([callback])</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_client.js#L85\" target=\"_blank\"> (accounts-base/accounts_client.js, line 85) </a> </div> </h3>   <p>Log out other clients logged in as the current user, but does not log out the client that calls this function.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>callback</code> <span class=\"type\">Function</span> </dt> <dd> <p>Optional callback. Called with no arguments on success, or with a single <code>Error</code> argument on failure.</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"AccountsServer\"> <div class=\"locus\"> Server </div> <code>new AccountsServer(server)</code> <div class=\"subtext-api\"> <code>import { AccountsServer } from 'meteor/accounts-base'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_server.js#L5\" target=\"_blank\"> (accounts-base/accounts_server.js, line 5) </a> </div> </h2>   <p>Constructor for the <code>Accounts</code> namespace on the server.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>server</code> <span class=\"type\">Object</span> </dt> <dd> <p>A server object such as <code>Meteor.server</code>.</p> </dd> </dl>   <p>These methods are defined on <code>AccountsServer.prototype</code>, and are thus available only on the server:</p>  <h3 class=\"api-heading\" id=\"AccountsServer-validateNewUser\"> <div class=\"locus\"> Server </div> <code>AccountsServer#validateNewUser(func)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_server.js#L105\" target=\"_blank\"> (accounts-base/accounts_server.js, line 105) </a> </div> </h3>   <p>Set restrictions on new user creation.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.</p> </dd> </dl>   <p>This can be called multiple times. If any of the functions return <code>false</code> or throw an error, the new user creation is aborted. To set a specific error message (which will be displayed by <a href=\"#accountsui\"><code>accounts-ui</code></a>), throw a new <a href=\"#meteor_error\"><code>Meteor.Error</code></a>.</p> <p>Example:</p> <pre class=\"highlight js\" data-language=\"js\">// Validate username, sending a specific error message on failure.\nAccounts.validateNewUser(function (user) {\n  if (user.username &amp;&amp; user.username.length &gt;= 3)\n    return true;\n  throw new Meteor.Error(403, \"Username must have at least 3 characters\");\n});\n// Validate username, without a specific error message.\nAccounts.validateNewUser(function (user) {\n  return user.username !== \"root\";\n});</pre> <p>If the user is being created as part of a login attempt from a client (eg, calling <a href=\"#accounts_createuser\"><code>Accounts.createUser</code></a> from the client, or <a href=\"#meteor_loginwithexternalservice\">logging in for the first time with an external service</a>), these callbacks are called <em>before</em> the <a href=\"#accounts_validateloginattempt\"><code>Accounts.validateLoginAttempt</code></a> callbacks. If these callbacks succeed but those fail, the user will still be created but the connection will not be logged in as that user.</p>  <h3 class=\"api-heading\" id=\"AccountsServer-onCreateUser\"> <div class=\"locus\"> Server </div> <code>AccountsServer#onCreateUser(func)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_server.js#L118\" target=\"_blank\"> (accounts-base/accounts_server.js, line 118) </a> </div> </h3>   <p>Customize new user creation.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>Called whenever a new user is created. Return the new user object, or throw an <code>Error</code> to abort the creation.</p> </dd> </dl>   <p>Use this when you need to do more than simply accept or reject new user creation. With this function you can programatically control the contents of new user documents.</p> <p>The function you pass will be called with two arguments: <code>options</code> and <code>user</code>. The <code>options</code> argument comes from <a href=\"#accounts_createuser\"><code>Accounts.createUser</code></a> for password-based users or from an external service login flow. <code>options</code> may come from an untrusted client so make sure to validate any values you read from it. The <code>user</code> argument is created on the server and contains a proposed user object with all the automatically generated fields required for the user to log in, including the <code>_id</code>.</p> <p>The function should return the user document (either the one passed in or a newly-created object) with whatever modifications are desired. The returned document is inserted directly into the <a href=\"#meteor_users\"><code>Meteor.users</code></a> collection.</p> <p>The default create user function simply copies <code>options.profile</code> into the new user document. Calling <code>onCreateUser</code> overrides the default hook. This can only be called once.</p> <p>Example:</p>  <pre class=\"highlight js\" data-language=\"js\">// Support for playing D&amp;D: Roll 3d6 for dexterity\nAccounts.onCreateUser(function(options, user) {\n  var d6 = function () { return Math.floor(Random.fraction() * 6) + 1; };\n  user.dexterity = d6() + d6() + d6();\n  // We still want the default hook's 'profile' behavior.\n\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n});</pre>  <h3 class=\"api-heading\" id=\"AccountsServer-validateLoginAttempt\"> <div class=\"locus\"> Server </div> <code>AccountsServer#validateLoginAttempt(func)</code> <div class=\"subtext-api\"> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/accounts-base/accounts_server.js#L95\" target=\"_blank\"> (accounts-base/accounts_server.js, line 95) </a> </div> </h3>   <p>Validate login attempts.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>func</code> <span class=\"type\">Function</span> </dt> <dd> <p>Called whenever a login is attempted (either successful or unsuccessful). A login can be aborted by returning a falsy value or throwing an exception.</p> </dd> </dl>   <p>Call <code>validateLoginAttempt</code> with a callback to be called on login attempts. It returns an object with a single method, <code>stop</code>. Calling <code>stop()</code> unregisters the callback.</p> <p>When a login attempt is made, the registered validate login callbacks are called with a single argument, the attempt info object:</p> <dl class=\"objdesc\"> <dt>\n<span class=\"name\">type</span><span class=\"type\">String</span>\n</dt>\n<dd>\n<p>The service name, such as “password” or “twitter”.</p> </dd> <dt>\n<span class=\"name\">allowed</span><span class=\"type\">Boolean</span>\n</dt>\n<dd>\n<p>Whether this login is allowed and will be successful (if not aborted by any of the validateLoginAttempt callbacks). False if the login will not succeed (for example, an invalid password or the login was aborted by a previous validateLoginAttempt callback).</p> </dd> <dt>\n<span class=\"name\">error</span><span class=\"type\">Exception</span>\n</dt>\n<dd>\n<p>When <code>allowed</code> is false, the exception describing why the login failed. It will be a <code>Meteor.Error</code> for failures reported to the user (such as invalid password), and can be a another kind of exception for internal errors.</p> </dd> <dt>\n<span class=\"name\">user</span><span class=\"type\">Object</span>\n</dt>\n<dd>\n<p>When it is known which user was attempting to login, the Meteor user object. This will always be present for successful logins.</p> </dd> <dt>\n<span class=\"name\">connection</span><span class=\"type\">Object</span>\n</dt>\n<dd>\n<p>The <code>connection</code> object the request came in on. See <a href=\"#meteor_onconnection\"><code>Meteor.onConnection</code></a> for details.</p> </dd> <dt>\n<span class=\"name\">methodName</span><span class=\"type\">String</span>\n</dt>\n<dd>\n<p>The name of the Meteor method being used to login.</p> </dd> <dt>\n<span class=\"name\">methodArguments</span><span class=\"type\">Array</span>\n</dt>\n<dd>\n<p>An array of the arguments passed to the login method.</p> </dd> </dl> <p>A validate login callback must return a truthy value for the login to proceed. If the callback returns a falsy value or throws an exception, the login is aborted. Throwing a <code>Meteor.Error</code> will report the error reason to the user.</p> <p>All registered validate login callbacks are called, even if one of the callbacks aborts the login. The later callbacks will see the <code>allowed</code> field set to <code>false</code> since the login will now not be successful. This allows later callbacks to override an error from a previous callback; for example, you could override the “Incorrect password” error with a different message.</p> <p>Validate login callbacks that aren’t explicitly trying to override a previous error generally have no need to run if the attempt has already been determined to fail, and should start with</p> <pre class=\"highlight js\" data-language=\"js\">\nif (!attempt.allowed)\n  return false;</pre> <h2 id=\"accounts_rate_limit\">Rate Limiting</h2> <p>By default, there are rules added to the <a href=\"#ddpratelimiter\"><code>DDPRateLimiter</code></a> that rate limit logins, new user registration and password reset calls to a limit of 5 requests per 10 seconds per session. These are a basic solution to dictionary attacks where a malicious user attempts to guess the passwords of legitimate users by attempting all possible passwords.</p> <p>These rate limiting rules can be removed by calling <code>Accounts.removeDefaultRateLimit()</code>. Please see the <a href=\"#ddpratelimiter\"><code>DDPRateLimiter</code></a> docs for more information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/api/accounts-multi.html\" class=\"_attribution-link\">https://docs.meteor.com/api/accounts-multi.html</a>\n  </p>\n</div>\n","packages/jquery":"<h1 class=\"title-page\">jquery</h1> <div class=\"subtitle-page\">Documentation of Meteor's `jquery` package.</div>    <p><a href=\"http://jquery.com/\" target=\"_blank\" rel=\"external\">jQuery</a> is a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development.</p> <p>The <code>jquery</code> package adds the jQuery library to the client JavaScript bundle. It has no effect on the server.</p> <p>In addition to the <code>jquery</code> package, Meteor provides several jQuery plugins as separate packages. These include:</p> <ul> <li><a href=\"https://github.com/balupton/history.js\" target=\"_blank\" rel=\"external\"><code>jquery-history</code></a></li> <li><a href=\"http://layout.jquery-dev.net/\" target=\"_blank\" rel=\"external\"><code>jquery-layout</code></a></li> <li><a href=\"http://imakewebthings.com/jquery-waypoints/\" target=\"_blank\" rel=\"external\"><code>jquery-waypoints</code></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/jquery.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/jquery.html</a>\n  </p>\n</div>\n","packages/less":"<h1 class=\"title-page\">less</h1> <div class=\"subtitle-page\">Documentation of Meteor's `less` package.</div>    <p><a href=\"http://lesscss.org/\" target=\"_blank\" rel=\"external\">LESS</a> extends CSS with dynamic behavior such as variables, mixins, operations and functions. It allows for more compact stylesheets and helps reduce code duplication in CSS files.</p> <p>With the <code>less</code> package installed, <code>.less</code> files in your application are automatically compiled to CSS and the results are included in the client CSS bundle.</p> <blockquote> <p>If you want to <code>@import</code> a file, give it the extension <code>.import.less</code> to prevent Meteor from processing it independently.</p> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/less.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/less.html</a>\n  </p>\n</div>\n","packages/underscore":"<h1 class=\"title-page\">underscore</h1> <div class=\"subtitle-page\">Documentation of Meteor's `underscore` package.</div>    <p><a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">Underscore</a> is a utility-belt library for JavaScript that provides support for functional programming. It is invaluable for writing clear, concise JavaScript in a functional style.</p> <p>The <code>underscore</code> package defines the <code>_</code> namespace on both the client and the server.</p> <blockquote class=\"pullquote warning\">\n<p>Currently, underscore is included in all projects, as the Meteor core depends on it. _ is available in the global namespace on both the client and the server even if you do not include this package. However if you do use underscore in your application, you should still add the package as we will remove the default underscore in the future.</p> </blockquote> <blockquote class=\"pullquote warning\">\n<p>We have slightly modified the way Underscore differentiates between objects and arrays in <a href=\"http://underscorejs.org/#each\" target=\"_blank\" rel=\"external\">collection functions</a>. The original Underscore logic is to treat any object with a numeric <code>length</code> property as an array (which helps it work properly on <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\" target=\"_blank\" rel=\"external\"><code>NodeList</code>s</a>). In Meteor’s version of Underscore, objects with a numeric <code>length</code> property are treated as objects if they have no prototype (specifically, if <code>x.constructor === Object</code>.</p> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/underscore.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/underscore.html</a>\n  </p>\n</div>\n","packages/markdown":"<h1 class=\"title-page\">markdown</h1> <div class=\"subtitle-page\">Documentation of Meteor's `markdown` package.</div>    <p>This package lets you use Markdown in your templates. It’s easy: just put your markdown inside <code>{{#markdown}} ... {{/markdown}}</code> tags. You can still use all of the usual Meteor template features inside a Markdown block, such as <code>{{#each}}</code>, and you still get reactivity.</p> <p>Example:</p> <pre class=\"highlight html\" data-language=\"html\">{{#markdown}}I am using __markdown__.{{/markdown}}</pre> <p>outputs</p> <pre class=\"highlight html\" data-language=\"html\">\n&lt;p&gt;I am using &lt;strong&gt;markdown&lt;/strong&gt;.&lt;/p&gt;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/markdown.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/markdown.html</a>\n  </p>\n</div>\n","packages/oauth-encryption":"<h1 class=\"title-page\">oauth-encryption</h1> <div class=\"subtitle-page\">Documentation of Meteor's `oauth-encryption` package.</div>    <p>Encrypts sensitive login secrets stored in the database such as a login service’s application secret key and users’ access tokens.</p> <h2 id=\"Generating-a-Key\">Generating a Key</h2>\n<p>The encryption key is 16 bytes, encoded in base64.</p> <p>To generate a key:</p> <pre class=\"highlight bash\" data-language=\"bash\">$ ~/.meteor/tools/latest/bin/node -e 'console.log(require(\"crypto\").randomBytes(16).toString(\"base64\"))'\n</pre> <h2 id=\"Using-oauth-encryption-with-accounts\">Using oauth-encryption with accounts</h2>\n<p>On the server only, use the <code>oauthSecretKey</code> option to <code>Accounts.config</code>:</p> <pre class=\"highlight js\" data-language=\"js\">Accounts.config({oauthSecretKey: \"onsqJ+1e4iGFlV0nhZYobg==\"});</pre> <p>This call to <code>Accounts.config</code> should be made at load time (place at the top level of your source file), not called from inside of a <code>Meteor.startup</code> block.</p> <p>To avoid storing the secret key in your application’s source code, you can use <a href=\"http://docs.meteor.com/#meteor_settings\"><code>Meteor.settings</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">Accounts.config({oauthSecretKey: Meteor.settings.oauthSecretKey});</pre> <h2 id=\"Migrating-unencrypted-user-tokens\">Migrating unencrypted user tokens</h2>\n<p>This example for Twitter shows how existing unencrypted user tokens can be encrypted. The query finds user documents which have a Twitter access token but not the <code>algorithm</code> field which is created when the token is encrypted. The relevant fields in the service data are then encrypted.</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.users.find({ $and: [\n    { 'services.twitter.accessToken': {$exists: true} },\n    { 'services.twitter.accessToken.algorithm': {$exists: false} }\n  ] }).\nforEach(function (userDoc) {\n  var set = {};\n  _.each(['accessToken', 'accessTokenSecret', 'refreshToken'], function (field) {\n    var plaintext = userDoc.services.twitter[field];\n    if (!_.isString(plaintext))\n      return;\n    set['services.twitter.' + field] = OAuthEncryption.seal(\n      userDoc.services.twitter[field],\n      userDoc._id\n    );\n  });\n  Meteor.users.update(userDoc._id, {$set: set});\n});</pre> <h2 id=\"Using-oauth-encryption-without-accounts\">Using oauth-encryption without accounts</h2>\n<p>If you’re using the oauth packages directly instead of through the Meteor accounts packages, you can load the OAuth encryption key directly using <code>OAuthEncryption.loadKey</code>:</p> <pre class=\"highlight js\" data-language=\"js\">OAuthEncryption.loadKey(\"onsqJ+1e4iGFlV0nhZYobg==\");</pre> <p>If you call <code>retrieveCredential</code> (such as <code>Twitter.retrieveCredential</code>) as part of your process, you’ll find when using oauth-encryption that the sensitive service data fields will be encrypted.</p> <p>You can decrypt them using <code>OAuth.openSecrets</code>:</p> <pre class=\"highlight js\" data-language=\"js\">\nvar credentials = Twitter.retrieveCredential(token);\n\nvar serviceData = OAuth.openSecrets(credentials.serviceData);</pre> <h2 id=\"Using-oauth-encryption-on-Windows\">Using oauth-encryption on Windows</h2>\n<p>This package depends on <a href=\"https://github.com/meteor/meteor/tree/devel/packages/non-core/npm-node-aes-gcm\" target=\"_blank\" rel=\"external\">npm-node-aes-gcm</a>, which requires you to have OpenSSL installed on your system to run. To install OpenSSL on Windows, use one of the binaries on <a href=\"http://slproweb.com/products/Win32OpenSSL.html\" target=\"_blank\" rel=\"external\">this page</a>. Don’t forget to install the Visual Studio 2008 redistributables if you don’t have them yet.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/oauth-encryption.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/oauth-encryption.html</a>\n  </p>\n</div>\n","packages/webapp":"<h1 class=\"title-page\">webapp</h1> <div class=\"subtitle-page\">Documentation of Meteor's `webapp` package.</div>    <p>The <code>webapp</code> package is what lets your Meteor app serve content to a web browser. It is included in the <code>meteor-base</code> set of packages that is automatically added when you run <code>meteor create</code>. You can easily build a Meteor app without it - for example if you wanted to make a command-line tool that still used the Meteor package system and DDP.</p> <p>This package also allows you to add handlers for HTTP requests. This lets other services access your app’s data through an HTTP API, allowing it to easily interoperate with tools and frameworks that don’t yet support DDP.</p> <p><code>webapp</code> exposes the <a href=\"https://github.com/senchalabs/connect\" target=\"_blank\" rel=\"external\">connect</a> API for handling requests through <code>WebApp.connectHandlers</code>. Here’s an example that will let you handle a specific URL:</p> <pre class=\"highlight js\" data-language=\"js\">// Listen to incoming HTTP requests, can only be used on the server\nWebApp.connectHandlers.use(\"/hello\", function(req, res, next) {\n  res.writeHead(200);\n  res.end(\"Hello world from: \" + Meteor.release);\n});</pre> <p><code>WebApp.connectHandlers.use([path], handler)</code> has two arguments:</p> <p><strong>path</strong> - an optional path field. This handler will only be called on paths that match this string. The match has to border on a <code>/</code> or a <code>.</code>. For example, <code>/hello</code> will match <code>/hello/world</code> and <code>/hello.world</code>, but not <code>/hello_world</code>.</p> <p><strong>handler</strong> - this is a function that takes three arguments:</p> <ul> <li>\n<strong>req</strong> - a Node.js <a href=\"https://nodejs.org/api/http.html#http_class_http_incomingmessage\" target=\"_blank\" rel=\"external\">IncomingMessage</a> object with some extra properties. This argument can be used to get information about the incoming request.</li> <li>\n<strong>res</strong> - a Node.js <a href=\"http://nodejs.org/api/http.html#http_class_http_serverresponse\" target=\"_blank\" rel=\"external\">ServerResponse</a> object. Use this to write data that should be sent in response to the request, and call <code>res.end()</code> when you are done.</li> <li>\n<strong>next</strong> - a function. Calling this function will pass on the handling of this request to the next relevant handler.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/webapp.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/webapp.html</a>\n  </p>\n</div>\n","packages/ecmascript":"<h1 class=\"title-page\">ecmascript</h1> <div class=\"subtitle-page\">Documentation of Meteor's `ecmascript` package.</div>    <p>This package lets you use new JavaScript language features that are part of the <a href=\"http://www.ecma-international.org/ecma-262/6.0/\" target=\"_blank\" rel=\"external\">ECMAScript 2015 specification</a> but are not yet supported by all engines or browsers. Unsupported syntax is automatically translated into standard JavaScript that behaves the same way.</p> <p><a href=\"https://www.youtube.com/watch?v=05Z6YGiZKmE\" target=\"_blank\" rel=\"external\">This video</a> from the July 2015 Meteor Devshop gives an overview of how the package works, and what it provides.</p> <h2 id=\"Usage\">Usage</h2>\n<p>The <code>ecmascript</code> package registers a compiler plugin that transpiles ECMAScript 2015+ to ECMAScript 5 (standard JS) in all <code>.js</code> files. By default, this package is pre-installed for all new apps and packages.</p> <p>To add this package to an existing app, run the following command from your app directory:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add ecmascript</pre> <p>To add the <code>ecmascript</code> package to an existing package, include the statement <code>api.use('ecmascript');</code> in the <code>Package.onUse</code> callback in your <code>package.js</code> file:</p> <pre class=\"highlight js\" data-language=\"js\">Package.onUse(function (api) {\n  api.use('ecmascript');\n});</pre> <h2 id=\"Supported-ES2015-Features\">Supported ES2015 Features</h2>\n<h3 id=\"Syntax\">\nSyntax</h3>\n<p>The <code>ecmascript</code> package uses <a href=\"http://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a> to compile ES2015 syntax to ES5 syntax. Many but not all ES2015 features can be simulated by Babel, and <code>ecmascript</code> enables most of the features supported by Babel.</p> <p>Here is a list of the Babel transformers that are currently enabled:</p> <ul> <li>\n<p><a href=\"https://babeljs.io/docs/advanced/transformers/es3/property-literals/\" target=\"_blank\" rel=\"external\"><code>es3.propertyLiterals</code></a><br> Makes it safe to use reserved keywords like <code>catch</code> as unquoted keys in object literals. For example, <code>{ catch: 123 }</code> is translated to <code>{ \"catch\": 123 }</code>.</p> </li> <li>\n<p><a href=\"https://babeljs.io/docs/advanced/transformers/es3/member-expression-literals/\" target=\"_blank\" rel=\"external\"><code>es3.memberExpressionLiterals</code></a><br> Makes it safe to use reserved keywords as property names. For example, <code>object.catch</code> is translated to <code>object[\"catch\"]</code>.</p> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#arrows\" target=\"_blank\" rel=\"external\"><code>es6.arrowFunctions</code></a><br> Provides a shorthand for function expressions. For example, <code>[1, 2, 3].map(x =&gt; x + 1)</code> evaluates to <code>[2, 3, 4]</code>. If <code>this</code> is used in the body of the arrow function, it will be automatically bound to the value of <code>this</code> in the enclosing scope.</p> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#binary-and-octal-literals\" target=\"_blank\" rel=\"external\"><code>es6.literals</code></a><br> Adds support for binary and octal numeric literals. For example, <code>0b111110111 === 503</code> and <code>0o767 === 503</code>.</p> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#template-strings\" target=\"_blank\" rel=\"external\"><code>es6.templateLiterals</code></a><br> Enables multi-line strings delimited by backticks instead of quotation marks, with variable interpolation:</p> <pre class=\"highlight js\" data-language=\"js\">\nvar name = \"Ben\";\n\nvar message = `My name is:\n\n\n${name}`;</pre> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#classes\" target=\"_blank\" rel=\"external\"><code>es6.classes</code></a><br> Enables <code>class</code> syntax:</p> <pre class=\"highlight js\" data-language=\"js\">\nclass Base {\n  constructor(a, b) {\n    this.value = a * b;\n  }\n}\n\n\nclass Derived extends Base {\n  constructor(a, b) {\n    super(a + 1, b + 1);\n  }\n}\n\n\nvar d = new Derived(2, 3);\nd.value; // 12\n</pre> </li> <li>\n<p><a href=\"https://babeljs.io/docs/learn-es2015/#let-const\" target=\"_blank\" rel=\"external\"><code>es6.constants</code></a><br> Allows defining block-scoped variables that are not allowed to be redefined:</p> <pre class=\"highlight js\" data-language=\"js\">\nconst GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2;\n\n// This reassignment will be forbidden by the compiler:\nGOLDEN_RATIO = \"new value\";</pre> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#let-const\" target=\"_blank\" rel=\"external\"><code>es6.blockScoping</code></a><br> Enables the <code>let</code> and <code>const</code> keywords as alternatives to <code>var</code>. The key difference is that variables defined using <code>let</code> or <code>const</code> are visible only within the block where they are declared, rather than being visible anywhere in the enclosing function. For example:</p> <pre class=\"highlight js\" data-language=\"js\">\nfunction example(condition) {\n  let x = 0;\n  if (condition) {\n    let x = 1;\n    console.log(x);\n  } else {\n    console.log(x);\n    x = 2;\n  }\n  return x;\n}\n\nexample(true); // logs 1, returns 0\n\nexample(false); // logs 0, returns 2\n</pre> </li> <li>\n<p><a href=\"https://babeljs.io/docs/learn-es2015/#enhanced-object-literals\" target=\"_blank\" rel=\"external\"><code>es6.properties.shorthand</code></a><br> Allows omitting the value of an object literal property when the desired value is held by a variable that has the same name as the property key. For example, instead of writing <code>{ x: x, y: y, z: \"asdf\" }</code> you can just write <code>{ x, y, z: \"asdf\" }</code>. Methods can also be written without the <code>: function</code> property syntax:</p> <pre class=\"highlight js\" data-language=\"js\">\nvar obj = {\n  oldWay: function (a, b) { ... },\n  newWay(a, b) { ... }\n};</pre> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#enhanced-object-literals\" target=\"_blank\" rel=\"external\"><code>es6.properties.computed</code></a><br> Allows object literal properties with dynamically computed keys:</p> <pre class=\"highlight js\" data-language=\"js\">\nvar counter = 0;\n\nfunction getKeyName() {\n  return \"key\" + counter++;\n}\n\n\nvar obj = {\n  [getKeyName()]: \"zero\",\n  [getKeyName()]: \"one\",\n};\n\nobj.key0; // \"zero\"\n\nobj.key1; // \"one\"\n</pre> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#default-rest-spread\" target=\"_blank\" rel=\"external\"><code>es6.parameters</code></a><br> Default expressions for function parameters, evaluated whenever the parameter is <code>undefined</code>, <code>...rest</code> parameters for capturing remaining arguments without using the <code>arguments</code> object:</p> <pre class=\"highlight js\" data-language=\"js\">\nfunction add(a = 0, ...rest) {\n  rest.forEach(n =&gt; a += n);\n  return a;\n}\n\nadd(); // 0\n\nadd(1, 2, 3); // 6\n</pre> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#default-rest-spread\" target=\"_blank\" rel=\"external\"><code>es6.spread</code></a><br> Allows an array of arguments to be interpolated into a list of arguments to a function call, <code>new</code> expression, or array literal, without using <code>Function.prototype.apply</code>:</p> <pre class=\"highlight js\" data-language=\"js\">add(1, ...[2, 3, 4], 5); // 15\n\n\nnew Node(\"name\", ...children);\n[1, ...[2, 3, 4], 5]; // [1, 2, 3, 4, 5]\n</pre> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#iterators-for-of\" target=\"_blank\" rel=\"external\"><code>es6.forOf</code></a><br> Provides an easy way to iterate over the elements of a collection:</p> <pre class=\"highlight js\" data-language=\"js\">\nlet sum = 0;\n\nfor (var x of [1, 2, 3]) {\n  sum += x;\n}\nx; // 6\n</pre> </li> <li>\n<p><a href=\"http://babeljs.io/docs/learn-es2015/#destructuring\" target=\"_blank\" rel=\"external\"><code>es6.destructuring</code></a><br> Destructuring is the technique of using an array or object pattern on the left-hand side of an assignment or declaration, in place of the usual variable or parameter, so that certain sub-properties of the value on the right-hand side will be bound to identifiers that appear within the pattern. Perhaps the simplest example is swapping two variables without using a temporary variable:</p> <pre class=\"highlight js\" data-language=\"js\">[a, b] = [b, a];</pre> <p>Extracting a specific property from an object:</p> <pre class=\"highlight js\" data-language=\"js\">\nlet { username: name } = user;\n// is equivalent to\n\nlet name = user.username;</pre> <p>Instead of taking a single opaque <code>options</code> parameter, a function can use an object destructuring pattern to name the expected options:</p> <pre class=\"highlight js\" data-language=\"js\">\nfunction run({ command, args, callback }) { ... }\n\nrun({\n  command: \"git\",\n  args: [\"status\", \".\"],\n  callback(error, status) { ... },\n  unused: \"whatever\"\n\n});</pre> </li> <li>\n<p><a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread\" target=\"_blank\" rel=\"external\"><code>es7.objectRestSpread</code></a><br> Supports catch-all <code>...rest</code> properties in object literal declarations and assignments:</p> <pre class=\"highlight js\" data-language=\"js\">\nlet { x, y, ...rest } = { x: 1, y: 2, a: 3, b: 4 };\nx; // 1\n\ny; // 2\n\nrest; // { a: 3, b: 4 }\n</pre> <p>Also enables <code>...spread</code> properties in object literal expressions:</p> <pre class=\"highlight js\" data-language=\"js\">\nlet n = { x, y, ...rest };\nn; // { x: 1, y: 2, a: 3, b: 4 }\n</pre> </li> <li>\n<p><a href=\"https://github.com/jeffmo/es-trailing-function-commas\" target=\"_blank\" rel=\"external\"><code>es7.trailingFunctionCommas</code></a><br> Allows the final parameter of a function to be followed by a comma, provided that parameter is not a <code>...rest</code> parameter.</p> </li> <li>\n<p><a href=\"https://babeljs.io/docs/advanced/transformers/other/flow/\" target=\"_blank\" rel=\"external\"><code>flow</code></a><br> Permits the use of <a href=\"http://flowtype.org/\" target=\"_blank\" rel=\"external\">Flow</a> type annotations. These annotations are simply stripped from the code, so they have no effect on the code’s behavior, but you can run the <code>flow</code> tool over your code to check the types if desired.</p> </li> </ul> <h3 id=\"Polyfills\">\nPolyfills</h3>\n<p>The ECMAScript 2015 standard library has grown to include new APIs and data structures, some of which can be implemented (“polyfilled”) using JavaScript that runs in all engines and browsers today. Here are three new constructors that are guaranteed to be available when the <code>ecmascript</code> package is installed:</p> <ul> <li>\n<p><a href=\"https://github.com/meteor/promise\" target=\"_blank\" rel=\"external\"><code>Promise</code></a><br> A <code>Promise</code> allows its owner to wait for a value that might not be available yet. See <a href=\"https://www.promisejs.org/\" target=\"_blank\" rel=\"external\">this tutorial</a> for more details about the API and motivation. The Meteor <code>Promise</code> implementation is especially useful because it runs all callback functions in recycled <code>Fiber</code>s, so you can use any Meteor API, including those that yield (e.g. <code>HTTP.get</code>, <code>Meteor.call</code>, or <code>MongoCollection</code>), and you never have to call <code>Meteor.bindEnvironment</code>.</p> </li> <li>\n<p><a href=\"https://github.com/zloirock/core-js#map\" target=\"_blank\" rel=\"external\"><code>Map</code></a><br> An associative key-value data structure where the keys can be any JavaScript value (not just strings). Lookup and insertion take constant time.</p> </li> <li>\n<p><a href=\"https://github.com/zloirock/core-js#set\" target=\"_blank\" rel=\"external\"><code>Set</code></a><br> A collection of unique JavaScript values of any type. Lookup and insertion take constant time.</p> </li> <li>\n<p><a href=\"https://github.com/zloirock/core-js#ecmascript-6-symbol\" target=\"_blank\" rel=\"external\"><code>Symbol</code></a><br> An implementation of the global <a href=\"http://www.2ality.com/2014/12/es6-symbols.html\" target=\"_blank\" rel=\"external\"><code>Symbol</code></a>s namespace that enables a number of other ES2015 features, such as <code>for</code>-<code>of</code> loops and <code>Symbol.iterator</code> methods: <code>[1,2,3][Symbol.iterator]()</code>.</p> </li> <li>\n<p>Polyfills for the following <a href=\"https://github.com/zloirock/core-js#ecmascript-6-object\" target=\"_blank\" rel=\"external\"><code>Object</code></a>-related methods:</p> <ul> <li><code>Object.assign</code></li> <li><code>Object.is</code></li> <li><code>Object.setPrototypeOf</code></li> <li>\n<code>Object.prototype.toString</code> (fixes <code>@@toStringTag</code> support)<br>\n</li> </ul> <p>Complete reference <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"external\">here</a>.</p> </li> <li>\n<p>Polyfills for the following <a href=\"https://github.com/zloirock/core-js#ecmascript-6-string\" target=\"_blank\" rel=\"external\"><code>String</code></a>-related methods:</p> <ul> <li><code>String.fromCodePoint</code></li> <li><code>String.raw</code></li> <li><code>String.prototype.includes</code></li> <li><code>String.prototype.startsWith</code></li> <li><code>String.prototype.endsWith</code></li> <li><code>String.prototype.repeat</code></li> <li><code>String.prototype.codePointAt</code></li> <li>\n<code>String.prototype.trim</code><br>\n</li> </ul> <p>Complete reference <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"external\">here</a>.</p> </li> <li>\n<p>Polyfills for the following <a href=\"https://github.com/zloirock/core-js#ecmascript-6-array\" target=\"_blank\" rel=\"external\"><code>Array</code></a>-related methods:</p> <ul> <li><code>Array.from</code></li> <li><code>Array.of</code></li> <li><code>Array.prototype.copyWithin</code></li> <li><code>Array.prototype.fill</code></li> <li><code>Array.prototype.find</code></li> <li><code>Array.prototype.findIndex</code></li> </ul> <p>Complete reference <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">here</a>.</p> </li> <li>\n<p>Polyfills for the following <a href=\"https://github.com/zloirock/core-js#ecmascript-6-function\" target=\"_blank\" rel=\"external\"><code>Function</code></a>-related properties:</p> <ul> <li>\n<code>Function.prototype.name</code> (fixes IE9+)</li> <li>\n<code>Function.prototype[Symbol.hasInstance]</code> (fixes IE9+)</li> </ul> <p>Complete reference <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"external\">here</a>.</p> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/ecmascript.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/ecmascript.html</a>\n  </p>\n</div>\n","packages/modules":"<h1 class=\"title-page\">modules</h1> <div class=\"subtitle-page\">Documentation of Meteor's `modules` package.</div>    <p>Though Meteor 1.2 introduced support for <a href=\"https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#supported-es2015-features\" target=\"_blank\" rel=\"external\">many new ECMAScript 2015 features</a>, one of the most notable omissions was <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"external\">ES2015 <code>import</code> and <code>export</code> syntax</a>. Meteor 1.3 fills that gap with a fully standards-compliant module system that works on both the client and the server, solves multiple long-standing problems for Meteor applications (such as controlling file load order), and yet maintains full backwards compatibility with existing Meteor code. This document explains the usage and key features of the new module system.</p> <h2 id=\"Enabling-modules\">Enabling modules</h2>\n<p>We think you’re going to love the new module system, and that’s why it will be installed by default for all new apps and packages. Nevertheless, the <code>modules</code> package is totally optional, and it will be up to you to add it to existing apps and/or packages.</p> <p>For apps, this is as easy as <code>meteor add modules</code>, or (even better) <code>meteor add ecmascript</code>, since the <code>ecmascript</code> package <em>implies</em> the <code>modules</code> package.</p> <p>For packages, you can enable <code>modules</code> by adding <code>api.use(\"modules\")</code> to the <code>Package.onUse</code> or <code>Package.onTest</code> sections of your <code>package.js</code> file.</p> <p>Now, you might be wondering what good the <code>modules</code> package is without the <code>ecmascript</code> package, since <code>ecmascript</code> enables <code>import</code> and <code>export</code> syntax. By itself, the <code>modules</code> package provides the CommonJS <code>require</code> and <code>exports</code> primitives that may be familiar if you’ve ever written Node code, and the <code>ecmascript</code> package simply compiles <code>import</code> and <code>export</code> statements to CommonJS. The <code>require</code> and <code>export</code> primitives also allow Node modules to run within Meteor application code without modification. Furthermore, keeping <code>modules</code> separate allows us to use <code>require</code> and <code>exports</code> in places where using <code>ecmascript</code> is tricky, such as the implementation of the <code>ecmascript</code> package itself.</p> <p>While the <code>modules</code> package is useful by itself, we very much encourage using the <code>ecmascript</code> package (and thus <code>import</code> and <code>export</code>) instead of using <code>require</code> and <code>exports</code> directly. If you need convincing, here’s a presentation that explains the differences: <a href=\"http://benjamn.github.io/empirenode-2015\" target=\"_blank\" rel=\"external\">http://benjamn.github.io/empirenode-2015</a></p> <h2 id=\"Basic-syntax\">Basic syntax</h2>\n<h3 id=\"ES2015\">\nES2015</h3>\n<p>Although there are a number of different variations of <code>import</code> and <code>export</code> syntax, this section describes the essential forms that everyone should know.</p> <p>First, you can <code>export</code> any named declaration on the same line where it was declared:</p> <pre class=\"highlight js\" data-language=\"js\">// exporter.js\n\nexport var a = ...;\n\nexport let b = ...;\n\nexport const c = ...;\n\nexport function d() {...}\n\nexport function* e() {...}\n\nexport class F {...}</pre> <p>These declarations make the variables <code>a</code>, <code>b</code>, <code>c</code> (and so on) available not only within the scope of the <code>exporter.js</code> module, but also to other modules that <code>import</code> from <code>exporter.js</code>.</p> <p>If you prefer, you can <code>export</code> variables by name, rather than prefixing their declarations with the <code>export</code> keyword:</p> <pre class=\"highlight js\" data-language=\"js\">// exporter.js\n\nfunction g() {...}\n\nlet h = g();\n\n// at the end of the file\n\nexport {g, h};</pre> <p>All of these exports are <em>named</em>, which means other modules can import them using those names:</p> <pre class=\"highlight js\" data-language=\"js\">// importer.js\n\nimport {a, c, F, h} from \"./exporter\";\n\nnew F(a, c).method(h);</pre> <p>If you’d rather use different names, you’ll be glad to know <code>export</code> and <code>import</code> statements can rename their arguments:</p> <pre class=\"highlight js\" data-language=\"js\">// exporter.js\n\nexport {g as x};\ng(); // same as calling y() in importer.js\n</pre> <pre class=\"highlight js\" data-language=\"js\">// importer.js\n\nimport {x as y} from \"./exporter\";\ny(); // same as calling g() in exporter.js\n</pre> <p>As with CommonJS <code>module.exports</code>, it is possible to define a single <em>default</em> export:</p> <pre class=\"highlight js\" data-language=\"js\">// exporter.js\n\nexport default any.arbitrary(expression);</pre> <p>This default export may then be imported without curly braces, using any name the importing module chooses:</p> <pre class=\"highlight js\" data-language=\"js\">// importer.js\n\nimport Value from \"./exporter\";\n// Value is identical to the exported expression</pre> <p>Unlike CommonJS <code>module.exports</code>, the use of default exports does not prevent the simultaneous use of named exports. Here is how you can combine them:</p> <pre class=\"highlight js\" data-language=\"js\">// importer.js\n\nimport Value, {a, F} from \"./exporter\";</pre> <p>In fact, the default export is conceptually just another named export whose name happens to be “default”:</p> <pre class=\"highlight js\" data-language=\"js\">// importer.js\n\nimport {default as Value, a, F} from \"./exporter\";</pre> <p>These examples should get you started with <code>import</code> and <code>export</code> syntax. For further reading, here is a very detailed <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\" target=\"_blank\" rel=\"external\">explanation</a> by <a href=\"https://twitter.com/rauschma\" target=\"_blank\" rel=\"external\">Axel Rauschmayer</a> of every variation of <code>import</code> and <code>export</code> syntax.</p> <h3 id=\"CommonJS\">\nCommonJS</h3>\n<p>You don’t need to use the <code>ecmascript</code> package or ES2015 syntax in order to use modules. Just like Node.js in the pre-ES2015 days, you can use <code>require</code> and <code>module.exports</code>—that’s what the <code>import</code> and <code>export</code> statements are compiling into, anyway.</p> <p>ES2015 <code>import</code> lines like these:</p> <pre class=\"highlight js\" data-language=\"js\">\nimport { AccountsTemplates } from 'meteor/useraccounts:core';\n\nimport '../imports/startup/client/routes.js';</pre> <p>can be written with CommonJS like this:</p> <pre class=\"highlight js\" data-language=\"js\">\nvar UserAccountsCore = require('meteor/useraccounts:core');\n\nrequire('../imports/startup/client/routes.js');</pre> <p>and you can access <code>AccountsTemplates</code> via <code>UserAccountsCore.AccountsTemplates</code>.</p> <p>Note that files don’t need a <code>module.exports</code> if they’re required like <code>routes.js</code> is in this example, without assignment to any variable. The code in <code>routes.js</code> will simply be included and executed in place of the above <code>require</code> statement.</p> <p>ES2015 <code>export</code> statements like these:</p> <pre class=\"highlight js\" data-language=\"js\">\nexport const insert = new ValidatedMethod({ // ...\n\n\nexport default incompleteCountDenormalizer;</pre> <p>can be rewritten to use CommonJS <code>module.exports</code>:</p> <pre class=\"highlight js\" data-language=\"js\">\nmodule.exports.insert = new ValidatedMethod({ // ...\n\n\nmodule.exports.default = incompleteCountDenormalizer;</pre> <p>You can also simply write <code>exports</code> instead of <code>module.exports</code> if you prefer. If you need to <code>require</code> from an ES2015 module with a <code>default</code> export, you can access the export with <code>require(\"package\").default</code>.</p> <p>There is a case where you might <em>need</em> to use CommonJS, even if your project has the <code>ecmascript</code> package: if you want to conditionally include a module. <code>import</code> statements must be at top-level scope, so they cannot be within an <code>if</code> block. If you’re writing a common file, loaded on both client and server, you might want to import a module in only one or the other environment:</p> <pre class=\"highlight js\" data-language=\"js\">\nif (Meteor.isClient) {\n  require('./client-only-file.js');\n}</pre> <p>Note that dynamic calls to <code>require()</code> (where the name being required can change at runtime) cannot be analyzed correctly and may result in broken client bundles. This is also discussed in <a href=\"http://guide.meteor.com/structure.html#using-require\" target=\"_blank\" rel=\"external\">the guide</a>.</p> <h3 id=\"CoffeeScript\">\nCoffeeScript</h3>\n<p>CoffeeScript has been a first-class supported language since Meteor’s early days. Even though today we recommend ES2015, we still intend to support CoffeeScript fully.</p> <p>CoffeeScript lacks support for <code>import</code> and <code>export</code>, though <a href=\"https://github.com/jashkenas/coffeescript/issues/4078\" target=\"_blank\" rel=\"external\">the project maintainers are in the early stages of working to change that</a>. In the meantime, CoffeeScript users can enjoy Meteor’s new modules support by using CommonJS syntax. If you use CoffeeScript’s <a href=\"http://coffeescript.org/#destructuring\" target=\"_blank\" rel=\"external\">destructuring</a>, the syntax is remarkably similar to the ES2015 examples you see above. For example, ES2015 <code>import</code> lines like these:</p> <pre class=\"highlight js\" data-language=\"js\">\nimport { AccountsTemplates } from 'meteor/useraccounts:core';\n\nimport '../imports/startup/client/routes.js';</pre> <p>can be written in CoffeeScript using CommonJS <code>require</code> like this:</p> <pre class=\"highlight coffeescript\" data-language=\"coffeescript\">{ AccountsTemplates } = require 'meteor/useraccounts:core'\n\n\nrequire '../imports/startup/client/routes.coffee'\n</pre> <p>(assuming you rename <code>routes.js</code> to <code>routes.coffee</code>). Note that files don’t need a <code>module.exports</code> if they’re required like <code>routes.coffee</code> is in this example, without assignment to any variable. The code in <code>routes.coffee</code> will simply be included and executed in place of the above <code>require</code> statement.</p> <p>ES2015 <code>export</code> statements like these:</p> <pre class=\"highlight js\" data-language=\"js\">\nexport const insert = new ValidatedMethod({ // ...\n\n\nexport default incompleteCountDenormalizer;</pre> <p>can be rewritten to use CommonJS <code>module.exports</code>:</p> <pre class=\"highlight coffeescript\" data-language=\"coffeescript\">\nmodule.exports.insert = new ValidatedMethod # ...\n\n\nmodule.exports = incompleteCountDenormalizer</pre> <p>You can also simply write <code>exports</code> instead of <code>module.exports</code> if you prefer.</p> <p>As of Meteor 1.3.3, you can also enclose ES2015 code in <a href=\"http://coffeescript.org/#embedded\" target=\"_blank\" rel=\"external\">backticks</a>.</p> <h2 id=\"Modular-application-structure\">Modular application structure</h2>\n<p>Before the release of Meteor 1.3, the only way to share values between files in an application was to assign them to global variables or communicate through shared variables like <code>Session</code> (variables which, while not technically global, sure do feel syntactically identical to global variables). With the introduction of modules, one module can refer precisely to the exports of any other specific module, so global variables are no longer necessary.</p> <p>If you are familiar with modules in Node, you might expect modules not to be evaluated until the first time you import them. However, because earlier versions of Meteor evaluated all of your code when the application started, and we care about backwards compatibility, eager evaluation is still the default behavior.</p> <p>If you would like a module to be evaluated <em>lazily</em> (in other words: on demand, the first time you import it, just like Node does it), then you should put that module in an <code>imports/</code> directory (anywhere in your app, not just the root directory), and include that directory when you import the module: <code>import {stuff} from \"./imports/lazy\"</code>. Note: files contained by <code>node_modules/</code> directories will also be evaluated lazily (more on that below).</p> <p>Lazy evaluation will very likely become the default behavior in a future version of Meteor, but if you want to embrace it as fully as possible in the meantime, we recommend putting all your modules inside either <code>client/imports/</code> or <code>server/imports/</code> directories, with just a single entry point for each architecture: <code>client/main.js</code> and <code>server/main.js</code>. The <code>main.js</code> files will be evaluated eagerly, giving your application a chance to import modules from the <code>imports/</code> directories.</p> <h2 id=\"Modular-package-structure\">Modular package structure</h2>\n<p>If you are a package author, in addition to putting <code>api.use(\"modules\")</code> or <code>api.use(\"ecmascript\")</code> in the <code>Package.onUse</code> section of your <code>package.js</code> file, you can also use a new API called <code>api.mainModule</code> to specify the main entry point for your package:</p> <pre class=\"highlight js\" data-language=\"js\">Package.describe({\n  name: \"my-modular-package\"\n\n});\n\nNpm.depends({\n  moment: \"2.10.6\"\n\n});\n\nPackage.onUse(function (api) {\n  api.use(\"modules\");\n  api.mainModule(\"server.js\", \"server\");\n  api.mainModule(\"client.js\", \"client\");\n  api.export(\"Foo\");\n});</pre> <p>Now <code>server.js</code> and <code>client.js</code> can import other files from the package source directory, even if those files have not been added using the <code>api.addFiles</code> function.</p> <p>When you use <code>api.mainModule</code>, the exports of the main module are exposed globally as <code>Package[\"my-modular-package\"]</code>, along with any symbols exported by <code>api.export</code>, and thus become available to any code that imports the package. In other words, the main module gets to decide what value of <code>Foo</code> will be exported by <code>api.export</code>, as well as providing other properties that can be explicitly imported from the package:</p> <pre class=\"highlight js\" data-language=\"js\">// In an application that uses my-modular-package:\n\nimport {Foo as ExplicitFoo, bar} from \"meteor/my-modular-package\";\n\nconsole.log(Foo); // Auto-imported because of api.export.\n\n\nconsole.log(ExplicitFoo); // Explicitly imported, but identical to Foo.\n\n\nconsole.log(bar); // Exported by server.js or client.js, but not auto-imported.\n</pre> <p>Note that the <code>import</code> is <code>from \"meteor/my-modular-package\"</code>, not <code>from \"my-modular-package\"</code>. Meteor package identifier strings must include the prefix <code>meteor/...</code> to disambiguate them from npm packages.</p> <p>Finally, since this package is using the new <code>modules</code> package, and the package <code>Npm.depends</code> on the “moment” npm package, modules within the package can <code>import moment from \"moment\"</code> on both the client and the server. This is great news, because previous versions of Meteor allowed npm imports only on the server, via <code>Npm.require</code>.</p> <h2 id=\"Local-node-modules\">Local <code>node_modules</code>\n</h2>\n<p>Before Meteor 1.3, the contents of <code>node_modules</code> directories in Meteor application code were completely ignored. When you enable <code>modules</code>, those useless <code>node_modules</code> directories suddenly become infinitely more useful:</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor create modular-app\n\ncd modular-app\nmkdir node_modules\nnpm install moment\n\necho 'import moment from \"moment\";' &gt;&gt; modular-app.js\n\necho 'console.log(moment().calendar());' &gt;&gt; modular-app.js\nmeteor</pre> <p>When you run this app, the <code>moment</code> library will be imported on both the client and the server, and both consoles will log output similar to: <code>Today at 7:51 PM</code>. Our hope is that the possibility of installing Node modules directly within an app will reduce the need for npm wrapper packages such as <a href=\"https://atmospherejs.com/momentjs/moment\" target=\"_blank\" rel=\"external\">https://atmospherejs.com/momentjs/moment</a>.</p> <p>A version of the <code>npm</code> command comes bundled with every Meteor installation, and (as of Meteor 1.3) it’s quite easy to use: <code>meteor npm ...</code> is synonymous with <code>npm ...</code>, so <code>meteor npm install moment</code> will work in the example above. (Likewise, if you don’t have a version of <code>node</code> installed, or you want to be sure you’re using the exact same version of <code>node</code> that Meteor uses, <code>meteor node ...</code> is a convenient shortcut.) That said, you can use any version of <code>npm</code> that you happen to have available. Meteor’s module system only cares about the files installed by <code>npm</code>, not the details of how <code>npm</code> installs those files.</p> <h2 id=\"File-load-order\">File load order</h2>\n<p>Before Meteor 1.3, the order in which application files were evaluated was dictated by a set of rules described in the <a href=\"http://guide.meteor.com/structure.html#load-order\" target=\"_blank\" rel=\"external\">Application Structure - Default file load order</a> section of the Meteor Guide. These rules could become frustrating when one file depended on a variable defined by another file, particularly when the first file was evaluated after the second file.</p> <p>Thanks to modules, any load-order dependency you might imagine can be resolved by adding an <code>import</code> statement. So if <code>a.js</code> loads before <code>b.js</code> because of their file names, but <code>a.js</code> needs something defined by <code>b.js</code>, then <code>a.js</code> can simply <code>import</code> that value from <code>b.js</code>:</p> <pre class=\"highlight js\" data-language=\"js\">// a.js\n\nimport {bThing} from \"./b\";\n\nconsole.log(bThing, \"in a.js\");</pre> <pre class=\"highlight js\" data-language=\"js\">// b.js\n\nexport var bThing = \"a thing defined in b.js\";\n\nconsole.log(bThing, \"in b.js\");</pre> <p>Sometimes a module doesn’t actually need to import anything from another module, but you still want to be sure the other module gets evaluated first. In such situations, you can use an even simpler <code>import</code> syntax:</p> <pre class=\"highlight js\" data-language=\"js\">// c.js\n\nimport \"./a\";\n\nconsole.log(\"in c.js\");</pre> <p>No matter which of these modules is imported first, the order of the <code>console.log</code> calls will always be:</p> <pre class=\"highlight js\" data-language=\"js\">\nconsole.log(bThing, \"in b.js\");\n\nconsole.log(bThing, \"in a.js\");\n\nconsole.log(\"in c.js\");</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/modules.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/modules.html</a>\n  </p>\n</div>\n","packages/random":"<h1 class=\"title-page\">random</h1> <div class=\"subtitle-page\">Documentation of Meteor's `random` package.</div>    <p>The <code>random</code> package provides several functions for generating random numbers. It uses a cryptographically strong pseudorandom number generator when possible, but falls back to a weaker random number generator when cryptographically strong randomness is not available (on older browsers or on servers that don’t have enough entropy to seed the cryptographically strong generator).</p>  <h2 class=\"api-heading\" id=\"Random-id\"> <div class=\"locus\"> Anywhere </div> <code>Random.id</code> <div class=\"subtext-api\"> <code>import { Random } from 'meteor/random'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/random/random.js#L191\" target=\"_blank\"> (random/random.js, line 191) </a> </div> </h2>   <p>Return a unique identifier, such as <code>\"Jjwjg6gouWLXhMGKW\"</code>, that is likely to be unique in the whole world.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>n</code> <span class=\"type\">Number</span> </dt> <dd> <p>Optional length of the identifier in characters (defaults to 17)</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Random-secret\"> <div class=\"locus\"> Anywhere </div> <code>Random.secret</code> <div class=\"subtext-api\"> <code>import { Random } from 'meteor/random'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/random/random.js#L209\" target=\"_blank\"> (random/random.js, line 209) </a> </div> </h2>   <p>Return a random string of printable characters with 6 bits of entropy per character. Use <code>Random.secret</code> for security-critical secrets that are intended for machine, rather than human, consumption.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>n</code> <span class=\"type\">Number</span> </dt> <dd> <p>Optional length of the secret string (defaults to 43 characters, or 256 bits of entropy)</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Random-fraction\"> <div class=\"locus\"> Anywhere </div> <code>Random.fraction</code> <div class=\"subtext-api\"> <code>import { Random } from 'meteor/random'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/random/random.js#L132\" target=\"_blank\"> (random/random.js, line 132) </a> </div> </h2>   <p>Return a number between 0 and 1, like <code>Math.random</code>.</p>     <h2 class=\"api-heading\" id=\"Random-choice\"> <div class=\"locus\"> Anywhere </div> <code>Random.choice</code> <div class=\"subtext-api\"> <code>import { Random } from 'meteor/random'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/random/random.js#L227\" target=\"_blank\"> (random/random.js, line 227) </a> </div> </h2>   <p>Return a random element of the given array or string.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>arrayOrString</code> <span class=\"type\">Array or String</span> </dt> <dd> <p>Array or string to choose from</p> </dd> </dl>    <h2 class=\"api-heading\" id=\"Random-hexString\"> <div class=\"locus\"> Anywhere </div> <code>Random.hexString</code> <div class=\"subtext-api\"> <code>import { Random } from 'meteor/random'</code> <a class=\"src-code link secondary\" href=\"https://github.com/meteor/meteor/blob/master/packages/random/random.js#L153\" target=\"_blank\"> (random/random.js, line 153) </a> </div> </h2>   <p>Return a random string of <code>n</code> hexadecimal digits.</p>  <h4 class=\"subheading\">Arguments</h4> <dl class=\"args\"> <dt> <code>n</code> <span class=\"type\">Number</span> </dt> <dd> <p>Length of the string</p> </dd> </dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/random.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/random.html</a>\n  </p>\n</div>\n","code-style":"<h1 class=\"title-page\">Code Style</h1> <div class=\"subtitle-page\">Suggested style guidelines for your code.</div>    <p>After reading this article, you’ll know:</p> <ol> <li>Why it’s a good idea to have consistent code style</li> <li>Which style guide we recommend for JavaScript code</li> <li>How to set up ESLint to check code style automatically</li> <li>Style suggestions for Meteor-specific patterns, such as Methods, publications, and more</li> </ol> <h2 id=\"benefits-style\">Benefits of consistent style</h2> <p>Countless hours have been spent by developers throughout the years arguing over single vs. double quotes, where to put brackets, how many spaces to type, and all kinds of other cosmetic code style questions. These are all questions that have at best a tangential relationship to code quality, but are very easy to have opinions about because they are so visual.</p> <p>While it’s not necessarily important whether your code base uses single or double quotes for string literals, there are huge benefits to making that decision once and having it be consistent across your organization. These benefits also apply to the Meteor and JavaScript development communities as a whole.</p> <h3 id=\"easy-to-read\">Easy to read code</h3> <p>The same way that you don’t read English sentences one word at a time, you don’t read code one token at a time. Mostly you just look at the shape of a certain expression, or the way it highlights in your editor, and assume what it does. If the style of every bit of code is consistent, that ensures that bits of code that look the same actually <em>are</em> the same - there isn’t any hidden punctuation or gotchas that you don’t expect, so you can focus on understanding the logic instead of the symbols. One example of this is indentation - while in JavaScript, indentation is not meaningful, it’s helpful to have all of your code consistently indented so that you don’t need to read all of the brackets in detail to see what is going on.</p> <pre class=\"highlight js\" data-language=\"js\">// This code is misleading because it looks like both statements\n// are inside the conditional.\nif (condition)\n  firstStatement();\n  secondStatement();\n</pre> <pre class=\"highlight js\" data-language=\"js\">// Much clearer!\nif (condition) {\n  firstStatement();\n}\n\nsecondStatement();\n</pre> <h3 id=\"automatic-error-checking\">Automatic error checking</h3> <p>Having a consistent style means that it’s easier to adopt standard tools for error checking. For example, if you adopt a convention that you must always use <code>let</code> or <code>const</code> instead of <code>var</code>, you can now use a tool to ensure all of your variables are scoped the way you expect. That means you can avoid bugs where variables act in unexpected ways. Also, by enforcing that all variables are declared before use, you can easily catch typos before even running any code!</p> <h3 id=\"deeper-understanding\">Deeper understanding</h3> <p>It’s hard to learn everything about a programming language at once. For example, programmers new to JavaScript often struggle with the <code>var</code> keyword and function scope. Using a community-recommended coding style with automatic linting can warn you about these pitfalls proactively. This means you can jump right into coding without learning about all of the edge cases of JavaScript ahead of time.</p> <p>As you write more code and come up against the recommended style rules, you can take that as an opportunity to learn more about your programming language and how different people prefer to use it.</p> <h2 id=\"javascript\">JavaScript style guide</h2> <p>Here at Meteor, we strongly believe that JavaScript is the best language to build web applications, for a variety of reasons. JavaScript is constantly improving, and the standards around ES2015 have really brought together the JavaScript community. Here are our recommendations about how to use ES2015 JavaScript in your app today.</p> <p><img src=\"https://guide.meteor.com/images/ben-es2015-demo.gif\" alt=\"\"></p> <blockquote> <p>An example of refactoring from JavaScript to ES2015</p> </blockquote> <h3 id=\"ecmascript\">Use the <code>ecmascript</code> package</h3> <p>ECMAScript, the language standard on which every browser’s JavaScript implementation is based, has moved to yearly standards releases. The newest complete standard is ES2015, which includes some long-awaited and very significant improvements to the JavaScript language. Meteor’s <code>ecmascript</code> package compiles this standard down to regular JavaScript that all browsers can understand using the <a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">popular Babel compiler</a>. It’s fully backwards compatible to “regular” JavaScript, so you don’t have to use any new features if you don’t want to. We’ve put a lot of effort into making advanced browser features like source maps work great with this package, so that you can debug your code using your favorite developer tools without having to see any of the compiled output.</p> <p>The <code>ecmascript</code> package is included in all new apps and packages by default, and compiles all files with the <code>.js</code> file extension automatically. See the <a href=\"https://docs.meteor.com/packages/ecmascript.html#Supported-ES2015-Features\" target=\"_blank\" rel=\"external\">list of all ES2015 features supported by the ecmascript package</a>.</p> <p>To get the full experience, you should also use the <code>es5-shim</code> package which is included in all new apps by default. This means you can rely on runtime features like <code>Array#forEach</code> without worrying about which browsers support them.</p> <p>All of the code samples in this guide and future Meteor tutorials will use all of the new ES2015 features. You can also read more about ES2015 and how to get started with it on the Meteor Blog:</p> <ul> <li><a href=\"http://info.meteor.com/blog/es2015-get-started\" target=\"_blank\" rel=\"external\">Getting started with ES2015 and Meteor</a></li> <li><a href=\"http://info.meteor.com/blog/set-up-sublime-text-for-meteor-es6-es2015-and-jsx-syntax-and-linting\" target=\"_blank\" rel=\"external\">Set up Sublime Text for ES2015</a></li> <li><a href=\"http://info.meteor.com/blog/how-much-does-es2015-cost\" target=\"_blank\" rel=\"external\">How much does ES2015 cost?</a></li> </ul> <h3 id=\"style-guide\">Follow a JavaScript style guide</h3> <p>We recommend choosing and sticking to a JavaScript style guide and enforcing it with tools. A popular option that we recommend is the <a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"external\">Airbnb style guide</a> with the ES6 extensions (and optionally React extensions).</p> <h2 id=\"eslint\">Check your code with ESLint</h2> <p>“Code linting” is the process of automatically checking your code for common errors or style problems. For example, ESLint can determine if you have made a typo in a variable name, or some part of your code is unreachable because of a poorly written <code>if</code> condition.</p> <p>We recommend using the <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\" target=\"_blank\" rel=\"external\">Airbnb eslint configuration</a> which verifies the Airbnb styleguide.</p> <p>Below, you can find directions for setting up automatic linting at many different stages of development. In general, you want to run the linter as often as possible, because it’s the fastest and easiest way to identify typos and small errors.</p> <h3 id=\"eslint-installing\">Installing and running ESLint</h3> <p>To setup ESLint in your application, you can install the following <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" target=\"_blank\" rel=\"external\">npm</a> packages:</p> <pre class=\"highlight stata\" data-language=\"stata\">meteor npm install --save-dev babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-meteor eslint-plugin-react eslint-plugin-jsx-a11y eslint-import-resolver-meteor eslint\n</pre> <blockquote> <p>Meteor comes with npm bundled so that you can type meteor npm without worrying about installing it yourself. If you like, you can also use a globally installed npm command.</p> </blockquote> <p>You can also add a <code>eslintConfig</code> section to your <code>package.json</code> to specify that you’d like to use the Airbnb config, and to enable <a href=\"https://github.com/dferber90/eslint-plugin-meteor\" target=\"_blank\" rel=\"external\">ESLint-plugin-Meteor</a>. You can also setup any extra rules you want to change, as well as adding a lint npm command:</p> <pre class=\"highlight clojure\" data-language=\"clojure\">{\n  ...\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"pretest\": \"npm run lint --silent\"\n  },\n  \"eslintConfig\": {\n    \"parser\": \"babel-eslint\",\n    \"parserOptions\": {\n      \"allowImportExportEverywhere\": true\n    },\n    \"plugins\": [\n      \"meteor\"\n    ],\n    \"extends\": [\n      \"airbnb\",\n      \"plugin:meteor/recommended\"\n    ],\n    \"settings\": {\n      \"import/resolver\": \"meteor\"\n    },\n    \"rules\": {}\n  }\n}\n</pre> <p>To run the linter, you can now simply type:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor npm run lint\n</pre> <p>For more details, read the <a href=\"http://eslint.org/docs/user-guide/getting-started\" target=\"_blank\" rel=\"external\">Getting Started</a> directions from the ESLint website.</p> <h3 id=\"eslint-editor\">Integrating with your editor</h3> <p>Linting is the fastest way to find potential bugs in your code. Running a linter is usually faster than running your app or your unit tests, so it’s a good idea to run it all the time. Setting up linting in your editor can seem annoying at first since it will complain often when you save poorly-formatted code, but over time you’ll develop the muscle memory to just write well-formatted code in the first place. Here are some directions for setting up ESLint in different editors:</p> <h4 id=\"eslint-sublime\">Sublime Text</h4> <p>You can install the Sublime Text packages that integrate them into the text editor. It’s generally recommended to use Package Control to add these packages. If you already have that setup, you can just add the these packages by name; if not, click the instructions links:</p> <ul> <li>Babel (for syntax highlighting – <a href=\"https://github.com/babel/babel-sublime#installation\" target=\"_blank\" rel=\"external\">full instructions</a>)</li> <li>SublimeLinter (<a href=\"http://sublimelinter.readthedocs.org/en/latest/installation.html\" target=\"_blank\" rel=\"external\">full instructions</a>)</li> <li>SublimeLinter-contrib-eslint (<a href=\"https://github.com/roadhump/SublimeLinter-eslint#plugin-installation\" target=\"_blank\" rel=\"external\">full instructions</a>)</li> </ul> <p>To get proper syntax highlighting, go to a .js file, then select the following through the <em>View</em> dropdown menu: <em>Syntax</em> -&gt; <em>Open all with current extension as…</em> -&gt; <em>Babel</em> -&gt; <em>JavaScript (Babel)</em>. If you are using React .jsx files, do the same from a .jsx file. If it’s working, you will see “JavaScript (Babel)” in the lower right hand corner of the window when you are on one of these files. Refer to the <a href=\"https://github.com/babel/babel-sublime\" target=\"_blank\" rel=\"external\">package readme</a> for information on compatible color schemes.</p> <p>A side note for Emmet users: You can use <em>\\<ctrl-e></ctrl-e></em> to expand HTML tags in .jsx files, and it will correctly expand classes to React’s “className” property. You can bind to the tab key for this, but <a href=\"https://github.com/sergeche/emmet-sublime/issues/548\" target=\"_blank\" rel=\"external\">you may not want to</a>.</p> <h4 id=\"eslint-atom\">Atom</h4> <p>Using ESLint with Atom is simple. Just install these three packages:</p> <pre class=\"highlight bash\" data-language=\"bash\">apm install language-babel\napm install linter\napm install linter-eslint\n</pre> <p>Then <strong>restart</strong> (or <strong>reload</strong> by pressing Ctrl+Alt+R / Cmd+Opt+R) Atom to activate linting.</p> <h4 id=\"eslint-webstorm\">WebStorm</h4> <p>WebStorm provides <a href=\"https://www.jetbrains.com/webstorm/help/eslint.html\" target=\"_blank\" rel=\"external\">these instructions for using ESLint</a>. After you install the ESLint Node packages and set up your <code>package.json</code>, just enable ESLint and click “Apply”. You can configure how WebStorm should find your <code>.eslintrc</code> file, but on my machine it worked without any changes. It also automatically suggested switching to “JSX Harmony” syntax highlighting.</p> <p><img src=\"https://guide.meteor.com/images/webstorm-configuration.png\" alt=\"Enable ESLint here.\"></p> <p>Linting can be activated on WebStorm on a project-by-project basis, or you can set ESLint as a default under Editor &gt; Inspections, choosing the Default profile, checking “ESLint”, and applying.</p> <h4 id=\"eslint-vscode\">Visual Studio Code</h4> <p>Using ESLint in VS Code requires installation of the 3rd party <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"external\">ESLint</a> extension. In order to install the extension, follow these steps:</p> <ol> <li>Launch VS Code and open the quick open menu by typing <code>Ctrl+P</code>\n</li> <li>Paste <code>ext install vscode-eslint</code> in the command window and press <code>Enter</code>\n</li> <li>Restart VS Code</li> </ol> <h2 id=\"meteor-features\">Meteor code style</h2> <p>The section above talked about JavaScript code in general - you can easily apply it in any JavaScript application, not just with Meteor apps. However, there are some style questions that are Meteor-specific, in particular how to name and structure all of the different components of your app.</p> <h3 id=\"collections\">Collections</h3> <p>Collections should be named as a plural noun, in <a href=\"https://en.wikipedia.org/wiki/PascalCase\" target=\"_blank\" rel=\"external\">PascalCase</a>. The name of the collection in the database (the first argument to the collection constructor) should be the same as the name of the JavaScript symbol.</p> <pre class=\"highlight js\" data-language=\"js\">// Defining a collection\nLists = new Mongo.Collection('Lists');\n</pre> <p>Fields in the database should be camelCased just like your JavaScript variable names.</p> <pre class=\"highlight js\" data-language=\"js\">// Inserting a document with camelCased field names\nWidgets.insert({\n  myFieldName: 'Hello, world!',\n  otherFieldName: 'Goodbye.'\n});\n</pre> <h3 id=\"methods-and-publications\">Methods and publications</h3> <p>Method and publication names should be camelCased, and namespaced to the module they are in:</p> <pre class=\"highlight js\" data-language=\"js\">// in imports/api/todos/methods.js\nupdateText = new ValidatedMethod({\n  name: 'todos.updateText',\n  // ...\n});\n</pre> <p>Note that this code sample uses the <a href=\"methods#validated-method\">ValidatedMethod package recommended in the Methods article</a>. If you aren’t using that package, you can use the name as the property passed to <code>Meteor.methods</code>.</p> <p>Here’s how this naming convention looks when applied to a publication:</p> <pre class=\"highlight js\" data-language=\"js\">// Naming a publication\nMeteor.publish('lists.public', function listsPublic() {\n  // ...\n});\n</pre> <h3 id=\"files-and-exports\">Files, exports, and packages</h3> <p>You should use the ES2015 <code>import</code> and <code>export</code> features to manage your code. This will let you better understand the dependencies between different parts of your code, and it will be easy to know where to look if you need to read the source code of a dependency.</p> <p>Each file in your app should represent one logical module. Avoid having catch-all utility modules that export a variety of unrelated functions and symbols. Often, this can mean that it’s good to have one class, UI component, or collection per file, but there are cases where it is OK to make an exception, for example if you have a UI component with a small sub-component that isn’t used outside of that file.</p> <p>When a file represents a single class or UI component, the file should be named the same as the thing it defines, with the same capitalization. So if you have a file that exports a class:</p> <pre class=\"highlight js\" data-language=\"js\">export default class ClickCounter { ... }\n</pre> <p>This class should be defined inside a file called <code>ClickCounter.js</code>. When you import it, it’ll look like this:</p> <pre class=\"highlight js\" data-language=\"js\">import ClickCounter from './ClickCounter.js';\n</pre> <p>Note that imports use relative paths, and include the file extension at the end of the file name.</p> <p>For <a href=\"https://guide.meteor.com/using-packages.html\">Atmosphere packages</a>, as the older pre-1.3 <code>api.export</code> syntax allowed more than one export per package, you’ll tend to see non-default exports used for symbols. For instance:</p> <pre class=\"highlight js\" data-language=\"js\">// You'll need to destructure here, as Meteor could export more symbols\nimport { Meteor } from 'meteor/meteor';\n\n// This will not work\nimport Meteor from 'meteor/meteor';\n</pre> <h3 id=\"templates-and-components\">Templates and components</h3> <p>Since Spacebars templates are always global, can’t be imported and exported as modules, and need to have names that are completely unique across the whole app, we recommend naming your Blaze templates with the full path to the namespace, separated by underscores. Underscores are a great choice in this case because then you can easily type the name of the template as one symbol in JavaScript.</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Lists_show\"&gt;\n  ...\n&lt;/template&gt;\n</pre> <p>If this template is a “smart” component that loads server data and accesses the router, append <code>_page</code> to the name:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Lists_show_page\"&gt;\n  ...\n&lt;/template&gt;\n</pre> <p>Often when you are dealing with templates or UI components, you’ll have several closely coupled files to manage. They could be two or more of HTML, CSS, and JavaScript files. In this case, we recommend putting these together in the same directory with the same name:</p> <pre class=\"highlight nsis\" data-language=\"nsis\"># The Lists_show template from the Todos example app has 3 files:\nshow.html\nshow.js\nshow.less\n</pre> <p>The whole directory or path should indicate that these templates are related to the <code>Lists</code> module, so it’s not necessary to reproduce that information in the file name. Read more about directory structure <a href=\"structure#javascript-structure\">above</a>.</p> <p>If you are writing your UI in React, you don’t need to use the underscore-split names because you can import and export your components using the JavaScript module system.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/code-style.html\" class=\"_attribution-link\">https://guide.meteor.com/code-style.html</a>\n  </p>\n</div>\n","packages/spacebars":"<h1 class=\"title-page\">spacebars</h1> <div class=\"subtitle-page\">Documentation of Meteor's `spacebars` package.</div>    <p>Spacebars is a Meteor template language inspired by <a href=\"http://handlebarsjs.com/\" target=\"_blank\" rel=\"external\">Handlebars</a>. It shares some of the spirit and syntax of Handlebars, but it has been tailored to produce reactive Meteor templates when compiled.</p> <h2 id=\"Getting-Started\">Getting Started</h2>\n<p>A Spacebars template consists of HTML interspersed with template tags, which are delimited by <code>{{</code> and <code>}}</code> (two curly braces).</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"myPage\"&gt;\n  &lt;h1&gt;{{pageTitle}}&lt;/h1&gt;\n\n\n  {{&gt; nav}}\n\n  {{#each posts}}\n    &lt;div class=\"post\"&gt;\n\n      &lt;h3&gt;{{title}}&lt;/h3&gt;\n\n      &lt;div class=\"post-content\"&gt;\n\n        {{{content}}}\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n\n  {{/each}}\n&lt;/template&gt;</pre> <p>As illustrated by the above example, there are four major types of template tags:</p> <ul> <li>\n<p><code>{{pageTitle}}</code> - Double-braced template tags are used to insert a string of text. The text is automatically made safe. It may contain any characters (like <code>&lt;</code>) and will never produce HTML tags.</p> </li> <li>\n<p><code>{{&gt; nav}}</code> - Inclusion template tags are used to insert another template by name.</p> </li> <li>\n<p><code>{{#each}}</code> - Block template tags are notable for having a block of content. The block tags <code>#if</code>, <code>#each</code>, <code>#with</code>, and <code>#unless</code> are built in, and it is also possible define custom ones. Some block tags, like <code>#each</code> and <code>#with</code>, establish a new data context for evaluating their contents. In the above example, <code>{{title}}</code> and <code>{{content}}</code> most likely refer to properties of the current post (though they could also refer to template helpers).</p> </li> <li>\n<p><code>{{{content}}}</code> - Triple-braced template tags are used to insert raw HTML. Be careful with these! It’s your job to make sure the HTML is safe, either by generating it yourself or sanitizing it if it came from a user input.</p> </li> </ul> <h2 id=\"Reactivity-Model\">Reactivity Model</h2>\n<p>Spacebars templates update reactively at a fine-grained level in response to changing data.</p> <p>Each template tag’s DOM is updated automatically when it evaluates to a new value, while avoiding unnecessary re-rendering as much as possible. For example, a double-braced tag replace its text node when its text value changes. An <code>#if</code> re-renders its contents only when the condition changes from truthy to falsy or vice versa.</p> <h2 id=\"Identifiers-and-Paths\">Identifiers and Paths</h2>\n<p>A Spacebars identifier is either a JavaScript identifier name or any string enclosed in square brackets (<code>[</code> and <code>]</code>). There are also the special identifiers <code>this</code> (or equivalently, <code>.</code>) and <code>..</code>. Brackets are required to use one of the following as the first element of a path: <code>else</code>, <code>this</code>, <code>true</code>, <code>false</code>, and <code>null</code>. Brackets are not required around JavaScript keywords and reserved words like <code>var</code> and <code>for</code>.</p> <p>A Spacebars path is a series of one or more identifiers separated by either <code>.</code> or <code>/</code>, such as <code>foo</code>, <code>foo.bar</code>, <code>this.name</code>, <code>../title</code>, or <code>foo.[0]</code> (numeric indices must be enclosed in brackets).</p> <h3 id=\"Name-Resolution\">\nName Resolution</h3>\n<p>The first identifier in a path is resolved in one of two ways:</p> <ul> <li>\n<p>Indexing the current data context. The identifier <code>foo</code> refers to the <code>foo</code> property of the current data context object.</p> </li> <li>\n<p>As a template helper. The identifier <code>foo</code> refers to a helper function (or constant value) that is accessible from the current template.</p> </li> </ul> <p>Template helpers take priority over properties of the data context.</p> <p>If a path starts with <code>..</code>, then the <em>enclosing</em> data context is used instead of the current one. The enclosing data context might be the one outside the current <code>#each</code>, <code>#with</code>, or template inclusion.</p> <h3 id=\"Path-Evaluation\">\nPath Evaluation</h3>\n<p>When evaluating a path, identifiers after the first are used to index into the object so far, like JavaScript’s <code>.</code>. However, an error is never thrown when trying to index into a non-object or an undefined value.</p> <p>In addition, Spacebars will call functions for you, so <code>{{foo.bar}}</code> may be taken to mean <code>foo().bar</code>, <code>foo.bar()</code>, or <code>foo().bar()</code> as appropriate.</p> <h2 id=\"Helper-Arguments\">Helper Arguments</h2>\n<p>An argument to a helper can be any path or identifier, or a string, boolean, or number literal, or null.</p> <p>Double-braced and triple-braced template tags take any number of positional and keyword arguments:</p> <pre class=\"highlight html\" data-language=\"html\">{{frob a b c verily=true}}</pre> <p>calls: <pre class=\"highlight js\" data-language=\"js\">frob(a, b, c, Spacebars.kw({verily: true}))</pre></p> <p><code>Spacebars.kw</code> constructs an object that is <code>instanceof Spacebars.kw</code> and whose <code>.hash</code> property is equal to its argument.</p> <p>The helper’s implementation can access the current data context as <code>this</code>.</p> <h2 id=\"Inclusion-and-Block-Arguments\">Inclusion and Block Arguments</h2>\n<p>Inclusion tags (<code>{{&gt; foo}}</code>) and block tags (<code>{{#foo}}</code>) take a single data argument, or no argument. Any other form of arguments will be interpreted as an <em>object specification</em> or a <em>nested helper</em>:</p> <ul> <li>\n<p><strong>Object specification</strong>: If there are only keyword arguments, as in <code>{{#with\n  x=1 y=2}}</code> or <code>{{&gt; prettyBox color=red}}</code>, the keyword arguments will be assembled into a data object with properties named after the keywords.</p> </li> <li>\n<p><strong>Nested Helper</strong>: If there is a positional argument followed by other (positional or keyword arguments), the first argument is called on the others using the normal helper argument calling convention.</p> </li> </ul> <h2 id=\"Template-Tag-Placement-Limitations\">Template Tag Placement Limitations</h2>\n<p>Unlike purely string-based template systems, Spacebars is HTML-aware and designed to update the DOM automatically. As a result, you can’t use a template tag to insert strings of HTML that don’t stand on their own, such as a lone HTML start tag or end tag, or that can’t be easily modified, such as the name of an HTML element.</p> <p>There are three main locations in the HTML where template tags are allowed:</p> <ul> <li>At element level (i.e. anywhere an HTML tag could go)</li> <li>In an attribute value</li> <li>In a start tag in place of an attribute name/value pair</li> </ul> <p>The behavior of a template tag is affected by where it is located in the HTML, and not all tags are allowed at all locations.</p> <h3 id=\"Double-braced-Tags\">\nDouble-braced Tags</h3>\n<p>A double-braced tag at element level or in an attribute value typically evalutes to a string. If it evalutes to something else, the value will be cast to a string, unless the value is <code>null</code>, <code>undefined</code>, or <code>false</code>, which results in nothing being displayed.</p> <p>Values returned from helpers must be pure text, not HTML. (That is, strings should have <code>&lt;</code>, not <code>&amp;lt;</code>.) Spacebars will perform any necessary escaping if a template is rendered to HTML.</p> <h3 id=\"SafeString\">\nSafeString</h3>\n<p>If a double-braced tag at element level evalutes to an object created with <code>Spacebars.SafeString(\"&lt;span&gt;Some HTML&lt;/span&gt;\")</code>, the HTML is inserted at the current location. The code that calls <code>SafeString</code> is asserting that this HTML is safe to insert.</p> <h2 id=\"In-Attribute-Values\">In Attribute Values</h2>\n<p>A double-braced tag may be part of, or all of, an HTML attribute value:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;input type=\"checkbox\" class=\"checky {{moreClasses}}\" checked={{isChecked}}&gt;</pre> <p>An attribute value that consists entirely of template tags that return <code>null</code>, <code>undefined</code>, or <code>false</code> is considered absent; otherwise, the attribute is considered present, even if its value is empty.</p> <h3 id=\"Dynamic-Attributes\">\nDynamic Attributes</h3>\n<p>A double-braced tag can be used in an HTML start tag to specify an arbitrary set of attributes:</p> <pre class=\"highlight html\" data-language=\"html\">\n&lt;div {{attrs}}&gt;...&lt;/div&gt;\n\n\n&lt;input type=checkbox {{isChecked}}&gt;</pre> <p>The tag must evaluate to an object that serves as a dictionary of attribute name and value strings. For convenience, the value may also be a string or null. An empty string or null expands to <code>{}</code>. A non-empty string must be an attribute name, and expands to an attribute with an empty value; for example, <code>\"checked\"</code> expands to <code>{checked: \"\"}</code> (which, as far as HTML is concerned, means the checkbox is checked).</p> <p>To summarize:</p> <table> <thead> <tr>\n<th>Return Value</th>\n<th>Equivalent HTML</th>\n</tr> </thead> <tbody> <tr><td>\n<code>“”</code> or <code>null</code> or <code>{}</code>\n</td></tr> <tr>\n<td>\n<code>“checked”</code> or <code>{checked: “”}</code>\n</td>\n<td><code>checked</code></td>\n</tr> <tr>\n<td><code>{checked: “”, ‘class’: “foo”}</code></td>\n<td><code>checked  class=foo</code></td>\n</tr> <tr>\n<td><code>“checked class=foo”</code></td>\n<td>ERROR, string is not an attribute name</td>\n</tr> </tbody> </table> <p>You can combine multiple dynamic attributes tags with other attributes:</p> <pre class=\"highlight html\" data-language=\"html\">\n&lt;div id=foo class={{myClass}} {{attrs1}} {{attrs2}}&gt;...&lt;/div&gt;\n</pre> <p>Attributes from dynamic attribute tags are combined from left to right, after normal attributes, with later attribute values overwriting previous ones. Multiple values for the same attribute are not merged in any way, so if <code>attrs1</code> specifies a value for the <code>class</code> attribute, it will overwrite <code>{{myClass}}</code>. As always, Spacebars takes care of recalculating the element’s attributes if any of <code>myClass</code>, <code>attrs1</code>, or <code>attrs2</code> changes reactively.</p> <h2 id=\"Triple-braced-Tags\">Triple-braced Tags</h2>\n<p>Triple-braced tags are used to insert raw HTML into a template:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;div class=\"snippet\"&gt;\n  {{{snippetBody}}}\n&lt;/div&gt;</pre> <p>The inserted HTML must consist of balanced HTML tags. You can’t, for example, insert <code>\"&lt;/div&gt;&lt;div&gt;\"</code> to close an existing div and open a new one.</p> <p>This template tag cannot be used in attributes or in an HTML start tag.</p> <h2 id=\"Inclusion-Tags\">Inclusion Tags</h2>\n<p>An inclusion tag takes the form <code>{{&gt; templateName}}</code> or <code>{{&gt; templateName\ndataObj}}</code>. Other argument forms are syntactic sugar for constructing a data object (see Inclusion and Block Arguments).</p> <p>An inclusion tag inserts an instantiation of the given template at the current location. If there is an argument, it becomes the data context, much as if the following code were used:</p> <pre class=\"highlight html\" data-language=\"html\">{{#with dataObj}}\n  {{&gt; templateName}}\n{{/with}}</pre> <p>Instead of simply naming a template, an inclusion tag can also specify a path that evalutes to a template object, or to a function that returns a template object.</p> <p>Note that the above two points interact in a way that can be surprising! If <code>foo</code> is a template helper function that returns another template, then <code>{{&gt;foo bar}}</code> will <em>first</em> push <code>bar</code> onto the data context stack <em>then</em> call <code>foo()</code>, due to the way this line is expanded as shown above. You will need to use <code>Template.parentData(1)</code> to access the original context. This differs from regular helper calls like <code>{{foo bar}}</code>, in which <code>bar</code> is passed as a parameter rather than pushed onto the data context stack.</p> <h2 id=\"Function-Returning-a-Template\">Function Returning a Template</h2>\n<p>If an inclusion tag resolves to a function, the function must return a template object or <code>null</code>. The function is reactively re-run, and if its return value changes, the template will be replaced.</p> <h2 id=\"Block-Tags\">Block Tags</h2>\n<p>Block tags invoke built-in directives or custom block helpers, passing a block of template content that may be instantiated once, more than once, or not at all by the directive or helper.</p> <pre class=\"highlight html\" data-language=\"html\">{{#block}}\n  &lt;p&gt;Hello&lt;/p&gt;\n\n{{/block}}</pre> <p>Block tags may also specify “else” content, separated from the main content by the special template tag <code>{{else}}</code>.</p> <p>A block tag’s content must consist of HTML with balanced tags.</p> <p>Block tags can be used inside attribute values:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;div class=\"{{#if done}}done{{else}}notdone{{/if}}\"&gt;\n  ...\n&lt;/div&gt;</pre> <h2 id=\"If-Unless\">If/Unless</h2>\n<p>An <code>#if</code> template tag renders either its main content or its “else” content, depending on the value of its data argument. Any falsy JavaScript value (including <code>null</code>, <code>undefined</code>, <code>0</code>, <code>\"\"</code>, and <code>false</code>) is considered false, as well as the empty array, while any other value is considered true.</p> <pre class=\"highlight html\" data-language=\"html\">{{#if something}}\n  &lt;p&gt;It's true&lt;/p&gt;\n\n{{else}}\n  &lt;p&gt;It's false&lt;/p&gt;\n\n{{/if}}</pre> <p><code>#unless</code> is just <code>#if</code> with the condition inverted.</p> <h2 id=\"With\">With</h2>\n<p>A <code>#with</code> template tag establishes a new data context object for its contents. The properties of the data context object are where Spacebars looks when resolving template tag names.</p> <pre class=\"highlight html\" data-language=\"html\">{{#with employee}}\n  &lt;div&gt;Name: {{name}}&lt;/div&gt;\n\n  &lt;div&gt;Age: {{age}}&lt;/div&gt;\n\n{{/with}}</pre> <p>We can take advantage of the object specification form of a block tag to define an object with properties we name:</p> <pre class=\"highlight html\" data-language=\"html\">{{#with x=1 y=2}}\n  {{{getHTMLForPoint this}}}\n{{/with}}</pre> <p>If the argument to <code>#with</code> is falsy (by the same rules as for <code>#if</code>), the content is not rendered. An “else” block may be provided, which will be rendered instead.</p> <p>If the argument to <code>#with</code> is a string or other non-object value, it may be promoted to a JavaScript wrapper object (also known as a boxed value) when passed to helpers, because JavaScript traditionally only allows an object for <code>this</code>. Use <code>String(this)</code> to get an unboxed string value or <code>Number(this)</code> to get an unboxed number value.</p> <h2 id=\"Each\">Each</h2>\n<p>An <code>#each</code> template tag takes a sequence argument and inserts its content for each item in the sequence, setting the data context to the value of that item:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;ul&gt;\n{{#each people}}\n  &lt;li&gt;{{name}}&lt;/li&gt;\n\n{{/each}}\n&lt;/ul&gt;</pre> <p>The newer variant of <code>#each</code> doesn’t change the data context but introduces a new variable that can be used in the body to refer to the current item:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;ul&gt;\n{{#each person in people}}\n  &lt;li&gt;{{person.name}}&lt;/li&gt;\n\n{{/each}}\n&lt;/ul&gt;</pre> <p>The argument is typically a Meteor cursor (the result of <code>collection.find()</code>, for example), but it may also be a plain JavaScript array, <code>null</code>, or <code>undefined</code>.</p> <p>An “else” section may be provided, which is used (with no new data context) if there are zero items in the sequence at any time.</p> <p>You can use a special variable <code>@index</code> in the body of <code>#each</code> to get the 0-based index of the currently rendered value in the sequence.</p> <h3 id=\"Reactivity-Model-for-Each\">\nReactivity Model for Each</h3>\n<p>When the argument to <code>#each</code> changes, the DOM is always updated to reflect the new sequence, but it’s sometimes significant exactly how that is achieved. When the argument is a Meteor live cursor, the <code>#each</code> has access to fine-grained updates to the sequence – add, remove, move, and change callbacks – and the items are all documents identified by unique ids. As long as the cursor itself remains constant (i.e. the query doesn’t change), it is very easy to reason about how the DOM will be updated as the contents of the cursor change. The rendered content for each document persists as long as the document is in the cursor, and when documents are re-ordered, the DOM is re-ordered.</p> <p>Things are more complicated if the argument to the <code>#each</code> reactively changes between different cursor objects, or between arrays of plain JavaScript objects that may not be identified clearly. The implementation of <code>#each</code> tries to be intelligent without doing too much expensive work. Specifically, it tries to identify items between the old and new array or cursor with the following strategy:</p> <ol> <li>For objects with an <code>_id</code> field, use that field as the identification key</li> <li>For objects with no <code>_id</code> field, use the array index as the identification key. In this case, appends are fast but prepends are slower.</li> <li>For numbers or strings, use their value as the identification key.</li> </ol> <p>In case of duplicate identification keys, all duplicates after the first are replaced with random ones. Using objects with unique <code>_id</code> fields is the way to get full control over the identity of rendered elements.</p> <h2 id=\"Let\">Let</h2>\n<p>The <code>#let</code> tag creates a new alias variable for a given expression. While it doesn’t change the data context, it allows to refer to an expression (helper, data context, another variable) with a short-hand within the template:</p> <pre class=\"highlight html\" data-language=\"html\">{{#let name=person.bio.firstName color=generateColor}}\n  &lt;div&gt;{{name}} gets a {{color}} card!&lt;/div&gt;\n\n{{/let}}</pre> <p>Variables introduced this way take precedence over names of templates, global helpers, fields of the current data context and previously introduced variables with the same name.</p> <h2 id=\"Custom-Block-Helpers\">Custom Block Helpers</h2>\n<p>To define your own block helper, simply declare a template, and then invoke it using <code>{{#someTemplate}}</code> (block) instead of <code>{{&gt; someTemplate}}</code> (inclusion) syntax.</p> <p>When a template is invoked as a block helper, it can use <code>{{&gt;\nTemplate.contentBlock}}</code> and <code>{{&gt; Template.elseBlock}}</code> to include the block content it was passed.</p> <p>Here is a simple block helper that wraps its content in a div:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"note\"&gt;\n  &lt;div class=\"note\"&gt;\n\n    {{&gt; Template.contentBlock}}\n  &lt;/div&gt;\n\n&lt;/template&gt;</pre> <p>You would invoke it as:</p> <pre class=\"highlight html\" data-language=\"html\">{{#note}}\n  Any content here\n{{/note}}</pre> <p>Here is an example of implementing <code>#unless</code> in terms of <code>#if</code> (ignoring for the moment that <code>unless</code> is a built-in directive):</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"unless\"&gt;\n  {{#if this}}\n    {{&gt; Template.elseBlock}}\n  {{else}}\n    {{&gt; Template.contentBlock}}\n  {{/if}}\n&lt;/template&gt;</pre> <p>Note that the argument to <code>#unless</code> (the condition) becomes the data context in the <code>unless</code> template and is accessed via <code>this</code>. However, it would not work very well if this data context was visible to <code>Template.contentBlock</code>, which is supplied by the user of <code>unless</code>.</p> <p>Therefore, when you include <code>{{&gt; Template.contentBlock}}</code>, Spacebars hides the data context of the calling template, and any data contexts established in the template by <code>#each</code> and <code>#with</code>. They are not visible to the content block, even via <code>..</code>. Put another way, it’s as if the <code>{{&gt; Template.contentBlock}}</code> inclusion occurred at the location where <code>{{#unless}}</code> was invoked, as far as the data context stack is concerned.</p> <p>You can pass an argument to <code>{{&gt; Template.contentBlock}}</code> or <code>{{&gt;\nTemplate.elseBlock}}</code> to invoke it with a data context of your choice. You can also use <code>{{#if Template.contentBlock}}</code> to see if the current template was invoked as a block helper rather than an inclusion.</p> <h2 id=\"Comment-Tags\">Comment Tags</h2>\n<p>Comment template tags begin with <code>{{!</code> and can contain any characters except for <code>}}</code>. Comments are removed upon compilation and never appear in the compiled template code or the generated HTML.</p> <pre class=\"highlight html\" data-language=\"html\">{{! Start of a section}}\n&lt;div class=\"section\"&gt;\n  ...\n&lt;/div&gt;</pre> <p>Comment tags also come in a “block comment” form. Block comments may contain <code>{{</code> and <code>}}</code>:</p> <pre class=\"highlight html\" data-language=\"html\">{{!-- This is a block comment.\nWe can write {{foo}} and it doesn't matter.\n{{#with x}}This code is commented out.{{/with}}\n--}}</pre> <p>Comment tags can be used wherever other template tags are allowed.</p> <h1 id=\"Nested-sub-expressions\">\nNested sub-expressions</h1>\n<p>Sometimes an argument to a helper call is best expressed as a return value of some other expression. For this and other cases, one can use parentheses to express the evaluation order of nested expressions.</p> <pre class=\"highlight html\" data-language=\"html\">{{capitalize (getSummary post)}}</pre> <p>In this example, the result of the <code>getSummary</code> helper call will be passed to the <code>capitalize</code> helper.</p> <p>Sub-expressions can be used to calculate key-word arguments, too:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; tmpl arg=(helper post)}}</pre> <h2 id=\"HTML-Dialect\">HTML Dialect</h2>\n<p>Spacebars templates are written in <a href=\"http://developers.whatwg.org/syntax.html\" target=\"_blank\" rel=\"external\">standard HTML</a> extended with additional syntax (i.e. template tags).</p> <p>Spacebars validates your HTML as it goes and will throw a compile-time error if you violate basic HTML syntax in a way that prevents it from determining the structure of your code.</p> <p>Spacebars is not lenient about malformed markup the way a web browser is. While the latest HTML spec standardizes how browsers should recover from parse errors, these cases are still not valid HTML. For example, a browser may recover from a bare <code>&lt;</code> that does not begin a well-formed HTML tag, while Spacebars will not. However, gone are the restrictions of the XHTML days; attribute values do not have to quoted, and tags are not case-sensitive, for example.</p> <p>You must close all HTML tags except the ones specified to have no end tag, like BR, HR, IMG and INPUT. You can write these tags as <code>&lt;br&gt;</code> or equivalently <code>&lt;br/&gt;</code>.</p> <p>The HTML spec allows omitting some additional end tags, such as P and LI, but Spacebars doesn’t currently support this.</p> <h2 id=\"Top-level-Elements-in-a-html-file\">Top-level Elements in a <code>.html</code> file</h2>\n<p>Technically speaking, the <code>&lt;template&gt;</code> element is not part of the Spacebars language. A <code>foo.html</code> template file in Meteor consists of one or more of the following elements:</p> <ul> <li>\n<p><code>&lt;template name=\"myName\"&gt;</code> - The <code>&lt;template&gt;</code> element contains a Spacebars template (as defined in the rest of this file) which will be compiled to the <code>Template.myName</code> component.</p> </li> <li>\n<p><code>&lt;head&gt;</code> - Static HTML that will be inserted into the <code>&lt;head&gt;</code> element of the default HTML boilerplate page. Cannot contain template tags. If <code>&lt;head&gt;</code> is used multiple times (perhaps in different files), the contents of all of the <code>&lt;head&gt;</code> elements are concatenated.</p> </li> <li>\n<p><code>&lt;body&gt;</code> - A template that will be inserted into the <code>&lt;body&gt;</code> of the main page. It will be compiled to the <code>Template.body</code> component. If <code>&lt;body&gt;</code> is used multiple times (perhaps in different files), the contents of all of the <code>&lt;body&gt;</code> elements are concatenated.</p> </li> </ul> <h2 id=\"Escaping-Curly-Braces\">Escaping Curly Braces</h2>\n<p>To insert a literal <code>{{</code>, <code>{{{</code>, or any number of curly braces, put a vertical bar after it. So <code>{{|</code> will show up as <code>{{</code>, <code>{{{|</code> will show up as <code>{{{</code>, and so on.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/packages/spacebars.html\" class=\"_attribution-link\">https://docs.meteor.com/packages/spacebars.html</a>\n  </p>\n</div>\n","commandline":"<h1 class=\"title-page\">Command Line</h1> <div class=\"subtitle-page\">Documentation of the various command line options of the Meteor tool.</div>    <p>The following are some of the more commonly used commands in the <code>meteor</code> command-line tool. This is just an overview and does not mention every command or every option to every command; for more details, use the <code>meteor help</code> command.</p>  <h2 id=\"meteorhelp\">meteor help</h2> <p>Get help on meteor command line usage. Running <code>meteor help</code> by itself will list the common meteor commands. Running <code>meteor help <i>command</i></code> will print detailed help about the command.</p> <h2 id=\"meteorrun\">meteor run</h2> <p>Run a meteor development server in the current project. Searches upward from the current directory for the root directory of a Meteor project. Whenever you change any of the application’s source files, the changes are automatically detected and applied to the running application.</p> <p>You can use the application by pointing your web browser at <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">localhost:3000</a>. No Internet connection is required.</p> <p>This is the default command. Simply running <code>meteor</code> is the same as <code>meteor run</code>.</p> <p>To pass additional options to Node.js use the <code>NODE_OPTIONS</code> environment variable. For example: <code>NODE_OPTIONS='--debug'</code> or <code>NODE_OPTIONS='--debug-brk'</code></p> <p>Run <code>meteor help run</code> to see the full list of options.</p> <h2 id=\"meteordebug\">meteor debug</h2> <p>Run the project, but suspend the server process for debugging.</p> <p>The server process will be suspended just before the first statement of server code that would normally execute. In order to continue execution of server code, use either the web-based Node Inspector or the command-line debugger (further instructions will be printed in the console).</p> <p>Breakpoints can be set using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\" target=\"_blank\"><code>debugger</code> keyword</a>, or through the web UI of Node Inspector (“Sources” tab).</p> <p>The server process debugger will listen for incoming connections from debugging clients, such as node-inspector, on port 5858 by default. To specify a different port use the <code>--debug-port &lt;port&gt;</code> option.</p> <p>The same debugging functionality can be achieved by adding the <code>--debug-port &lt;port&gt;</code> option to other <code>meteor</code> tool commands, such as <code>meteor run</code> and <code>meteor test-packages</code>.</p> <h2 id=\"meteorcreate\">meteor create <i>name</i>\n</h2> <p>Create a new Meteor project. By default, makes a subdirectory named <em>name</em> and copies in the template app. You can pass an absolute or relative path.</p> <p>You can use the <code>--package</code> option, to create a new package. If used in an existing app, this command will create a package in the packages directory.</p> <h2 id=\"meteorloginlogout\">meteor login / logout</h2> <p>Log in and out of your account using Meteor’s authentication system.</p> <p>You can pass <code>METEOR_SESSION_FILE=token.json</code> before <code>meteor login</code> to generate a login session token so you don’t have to share your login credentials with third-party service providers. You can revoke the token at any time from your <a href=\"https://www.meteor.com/account-settings/login-locations\" target=\"_blank\" rel=\"external\">accounts settings page</a>.</p> <p>Once you have your account you can log in and log out from the command line, and check your username with <code>meteor whoami</code>.</p> <h2 id=\"meteordeploy\">meteor deploy <i>site</i>\n</h2> <p>Deploy the project in your current directory to <a href=\"https://www.meteor.com/galaxy\" target=\"_blank\">Galaxy</a>.</p> <p>Use <code>--owner</code> to decide which organization or user account you’d like to deploy a new app to if you are a member of more than one Galaxy-enabled account.</p> <p>You can deploy in debug mode by passing <code>--debug</code>. This will leave your source code readable by your favorite in-browser debugger, just like it is in local development mode.</p> <p>To delete an application you’ve deployed, specify the <code>--delete</code> option along with the site.</p> <p>You can add information specific to a particular deployment of your application by using the <code>--settings</code> option. The argument to <code>--settings</code> is a file containing any JSON string. The object in your settings file will appear on the server side of your application in <a href=\"#meteor_settings\"><code>Meteor.settings</code></a>.</p> <p>Settings are persistent. When you redeploy your app, the old value will be preserved unless you explicitly pass new settings using the <code>--settings</code> option. To unset <code>Meteor.settings</code>, pass an empty settings file.</p> <h2 id=\"meteorupdate\">meteor update</h2> <p>Attempts to bring you to the latest version of Meteor, and then to upgrade your packages to their latest versions. By default, update will not break compatibility.</p> <p>For example, let’s say packages A and B both depend on version 1.1.0 of package X. If a new version of A depends on X@2.0.0, but there is no new version of package B, running <code>meteor update</code> will not update A, because doing so will break package B.</p> <p>You can pass in the flag <code>--packages-only</code> to update only the packages, and not the release itself. Similarly, you can pass in names of packages (<code>meteor update foo:kittens baz:cats</code>) to only update specific packages.</p> <p>Every project is pinned to a specific release of Meteor. You can temporarily try using your package with another release by passing the <code>--release</code> option to any command; <code>meteor update</code> changes the pinned release.</p> <p>Sometimes, Meteor will ask you to run <code>meteor update --patch</code>. Patch releases are special releases that contain only very minor changes (usually crucial bug fixes) from previous releases. We highly recommend that you always run <code>update\n--patch</code> when prompted.</p> <p>You may also pass the <code>--release</code> flag to act as an override to update to a specific release. This is an override: if it cannot find compatible versions of packages, it will log a warning, but perform the update anyway. This will only change your package versions if necessary.</p> <h2 id=\"meteoradd\">meteor add <i>package</i>\n</h2> <p>Add packages to your Meteor project. By convention, names of community packages include the name of the maintainer. For example: <code>meteor add iron:router</code>. You can add multiple packages with one command.</p> <p>Optionally, adds version constraints. Running <code>meteor add package@1.1.0</code> will add the package at version <code>1.1.0</code> or higher (but not <code>2.0.0</code> or higher). If you want to use version <code>1.1.0</code> exactly, use <code>meteor add package@=1.1.0</code>. You can also ‘or’ constraints together: for example, <code>meteor add 'package@=1.0.0 || =2.0.1'</code> means either 1.0.0 (exactly) or 2.0.1 (exactly).</p> <p>To remove a version constraint for a specific package, run <code>meteor add</code> again without specifying a version. For example above, to stop using version <code>1.1.0</code> exactly, run <code>meteor add package</code>.</p> <h2 id=\"meteorremove\">meteor remove <i>package</i>\n</h2> <p>Removes a package previously added to your Meteor project. For a list of the packages that your application is currently using, run <code>meteor list</code>.</p> <p>This removes the package entirely. To continue using the package, but remove its version constraint, use <a href=\"#meteoradd\"><code>meteor add</code></a>.</p> <p>Meteor does not downgrade transitive dependencies unless it’s necessary. This means that if running <code>meteor add A</code> upgrades A’s parent package X to a new version, your project will continue to use X at the new version even after you run <code>meteor remove A</code>.</p> <h2 id=\"meteorlist\">meteor list</h2> <p>Lists all the packages that you have added to your project. For each package, lists the version that you are using. Lets you know if a newer version of that package is available.</p> <h2 id=\"meteoraddplatform\">meteor add-platform <i>platform</i>\n</h2> <p>Adds platforms to your Meteor project. You can add multiple platforms with one command. Once a platform has been added, you can use ‘meteor run <i>platform</i>‘ to run on the platform, and <code>meteor build</code> to build the Meteor project for every added platform.</p> <h2 id=\"meteorremoveplatform\">meteor remove-platform <i>platform</i>\n</h2> <p>Removes a platform previously added to your Meteor project. For a list of the platforms that your application is currently using, see <code>meteor list-platforms</code>.</p> <h2 id=\"meteorlistplatforms\">meteor list-platforms</h2> <p>Lists all of the platforms that have been explicitly added to your project.</p> <h2 id=\"meteormongo\">meteor mongo</h2> <p>Open a MongoDB shell on your local development database, so that you can view or manipulate it directly.</p> <blockquote class=\"pullquote warning\">\n<p>For now, you must already have your application running locally with <code>meteor run</code>. This will be easier in the future.</p> </blockquote> <h2 id=\"meteorreset\">meteor reset</h2> <p>Reset the current project to a fresh state. Removes the local mongo database.</p> <blockquote class=\"pullquote warning\">\n<p>This deletes your data! Make sure you do not have any information you care about in your local mongo database by running <code>meteor mongo</code>. From the mongo shell, use <code>show collections</code> and <code>db.<i>collection</i>.find()</code> to inspect your data.</p> </blockquote> <blockquote class=\"pullquote warning\">\n<p>For now, you can not run this while a development server is running. Quit all running meteor applications before running this.</p> </blockquote> <h2 id=\"meteorbuild\">meteor build</h2> <p>Package this project up for deployment. The output is a directory with several build artifacts:</p> <ul>\n<li>a tarball that includes everything necessary to run the application server (see the <code>README</code> in the tarball for details)</li> <li>an unsigned <code>apk</code> bundle and a project source if Android is targetted as a mobile platform</li> <li>a directory with an Xcode project source if iOS is targetted as a mobile platform</li>\n</ul> <p>You can use the application server bundle to host a Meteor application on your own server, instead of deploying to Galaxy. You will have to deal with logging, monitoring, backups, load-balancing, etc, all of which we handle for you if you use Galaxy.</p> <p>The unsigned <code>apk</code> bundle and the outputted Xcode project can be used to deploy your mobile apps to Android Play Store and Apple App Store.</p> <p>By default, your application is bundled for your current architecture. This may cause difficulties if your app contains binary code due to, for example, npm packages. You can try to override that behavior with the <code>--architecture</code> flag.</p> <h2 id=\"meteorlint\">meteor lint</h2> <p>Run through the whole build process for the app and run all linters the app uses. Outputs all build errors or linting warnings to the standard output.</p> <h2 id=\"meteorsearch\">meteor search</h2> <p>Searches for Meteor packages and releases, whose names contain the specified regular expression.</p> <h2 id=\"meteorshow\">meteor show</h2> <p>Shows more information about a specific package or release: name, summary, the usernames of its maintainers, and, if specified, its homepage and git URL.</p> <h2 id=\"meteorpublish\">meteor publish</h2> <p>Publishes your package. To publish, you must <code>cd</code> into the package directory, log in with your Meteor Developer Account and run <code>meteor publish</code>. By convention, published package names must begin with the maintainer’s Meteor Developer Account username and a colon, like so: <code>iron:router</code>.</p> <p>To publish a package for the first time, use <code>meteor publish --create</code>.</p> <p>Sometimes packages may contain binary code specific to an architecture (for example, they may use an npm package). In that case, running publish will only upload the build to the architecture that you were using to publish it. You can use <code>publish-for-arch</code> to upload a build to a different architecture from a different machine.</p> <h2 id=\"meteorpublishforarch\">meteor publish-for-arch</h2> <p>Publishes a build of an existing package version from a different architecture.</p> <p>Some packages contain code specific to an architecture. Running <code>publish</code> by itself, will upload the build to the architecture that you were using to publish. You need to run <code>publish-for-arch</code> from a different architecture to upload a different build.</p> <p>For example, let’s say you published name:cool-binary-blob from a Mac. If you want people to be able to use cool-binary-blob from Linux, you should log into a Linux machine and then run <code>meteor publish-for-arch name:cool-binary-blob@version</code>. It will notice that you are on a linux machine, and that there is no Linux-compatible build for your package and publish one.</p> <p>Currently, the supported architectures for Meteor are 32-bit Linux, 64-bit Linux and Mac OS. Galaxy’s servers run 64-bit Linux.</p> <h2 id=\"meteorpublishrelease\">meteor publish-release</h2> <p>Publishes a release of Meteor. Takes in a JSON configuration file.</p> <p>Meteor releases are divided into tracks. While only MDG members can publish to the default Meteor track, anyone can create a track of their own and publish to it. Running <code>meteor update</code> without specifying the <code>--release</code> option will not cause the user to switch tracks.</p> <p>To publish to a release track for the first time, use the <code>--create-track</code> flag.</p> <p>The JSON configuration file must contain the name of the release track (<code>track</code>), the release version (<code>version</code>), various metadata, the packages specified by the release as mapped to versions (<code>packages</code>), and the package &amp; version of the Meteor command-line tool (<code>tool</code>). Note that this means that forks of the meteor tool can be published as packages and people can use them by switching to a corresponding release. For more information, run <code>meteor help publish-release</code>.</p> <h2 id=\"meteortestpackages\">meteor test-packages</h2> <p>Test Meteor packages, either by name, or by directory. Not specifying an argument will run tests for all local packages. The results are displayed in an app that runs at <code>localhost:3000</code> by default. If you need to, you can pass the <code>--settings</code> and <code>--port</code> arguments.</p> <h2 id=\"meteoradmin\">meteor admin</h2> <p>Catch-all for miscellaneous commands that require authorization to use.</p> <p>Some example uses of <code>meteor admin</code> include adding and removing package maintainers and setting a homepage for a package. It also includes various helpful functions for managing a Meteor release. Run <code>meteor help admin</code> for more information.</p> <h2 id=\"meteorshell\">meteor shell</h2> <p>When <code>meteor shell</code> is executed in an application directory where a server is already running, it connects to the server and starts an interactive shell for evaluating server-side code.</p> <p>Multiple shells can be attached to the same server. If no server is currently available, <code>meteor shell</code> will keep trying to connect until it succeeds.</p> <p>Exiting the shell does not terminate the server. If the server restarts because a change was made in server code, or a fatal exception was encountered, the shell will restart along with the server. This behavior can be simulated by typing <code>.reload</code> in the shell.</p> <p>The shell supports tab completion for global variables like <code>Meteor</code>, <code>Mongo</code>, and <code>Package</code>. Try typing <code>Meteor.is</code> and then pressing tab.</p> <p>The shell maintains a persistent history across sessions. Previously-run commands can be accessed by pressing the up arrow.</p> <h2 id=\"meteornpm\">meteor npm</h2> <p>Calling <code>meteor npm</code> calls the <code>npm</code> command bundled with meteor. </p> <p>Pass additional arguments as you would to <code>npm</code>.</p> <p>For example, executing <code>meteor npm install bootstrap</code> would install bootstrap from npm, to your <code>node_modules</code> dir.</p> <p>This is useful for ensuring that you install dependencies with npm v3, as expected by meteor since <a href=\"https://github.com/meteor/meteor/blob/devel/History.md#v134\" target=\"_blank\" rel=\"external\">v1.3.4</a></p> <h2 id=\"meteornode\">meteor node</h2> <p>Calling <code>meteor node</code> calls the <code>node</code> command bundled with meteor. </p> <p>Pass additional arguments as you would to <code>node</code>.</p> <p>For example, executing <code>meteor node -e \"console.log(process.versions)\"</code> would run <code>console.log(process.versions)</code> in the version of <code>node</code> bundled with Meteor.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://docs.meteor.com/commandline.html\" class=\"_attribution-link\">https://docs.meteor.com/commandline.html</a>\n  </p>\n</div>\n","1.4-migration":"<h1 class=\"title-page\">Migrating to Meteor 1.4</h1> <div class=\"subtitle-page\">How to migrate your application to use recommended best practice as of Meteor 1.4.</div>    <h2 id=\"breaking-changes\">Breaking changes</h2> <p>These are all the <em>breaking changes</em> — that is, changes you absolutely have to worry about if you are updating your app from 1.3.x to 1.4. However, we recommend that you also consider the <em>recommended</em> changes <a href=\"#recommend-changes\">listed below</a>.</p> <h3 id=\"binary-packages-require-build-toolchain\">Binary Packages require a Build Toolchain</h3> <p>The headline feature of Meteor 1.4 is the upgrade to Node version 4.4.7. Node 4 includes a changed ABI (application binary interface), which means that <em>binary npm packages</em> that your application uses will need to be recompiled.</p> <p>Some very common binary packages (such as <code>npm-bcrypt</code>) will already have been republished for the Node 4 platform, so if you are using a limited set of packages, this may not affect you; however if you are using less common dependencies, this may be an issue.</p> <p>If you have binary npm packages in your application <code>node_modules</code> directory, you should run <code>meteor npm rebuild</code> (after <code>meteor update</code>) in your application directory to recompile those packages.</p> <p>Meteor will automatically recompile any binary npm dependencies of Meteor packages, if they were not already compiled with the correct ABI. This will typically happen the first time you start your application after updating to 1.4, but it may also happen when you <code>meteor add some:package</code> that was published using a different version of Meteor and/or Node.</p> <p>In order for this rebuilding to work, you will need to install a basic compiler toolchain on your development machine. Specifically,</p> <ul> <li>\n<p>OS X users should install the <a href=\"http://railsapps.github.io/xcode-command-line-tools.html\" target=\"_blank\" rel=\"external\">commandline tools</a> (in short, run <code>xcode-select --install</code>).</p> </li> <li>\n<p>Windows users should install the <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48159\" target=\"_blank\" rel=\"external\">MS Build Tools</a>.</p> </li> <li>\n<p>Linux users should ensure they have Python 2.7, <code>make</code> and a C compiler installed.</p> </li> </ul> <p>To test that your compiler toolchain is installed and working properly, try installing any binary npm package in your application using <code>meteor npm</code>. For example, run <code>meteor npm install bcrypt</code> then <code>meteor node</code>, then try calling <code>require(\"bcrypt\")</code> from the Node shell.</p> <h3 id=\"update-from-mongo-2_4\">Update from MongoDB 2.4</h3> <p>Meteor has been updated to use version 2.2.4 of the node MongoDB driver. This means Meteor now ships with full support for MongoDB 3.2 (the latest stable version) and the WiredTiger storage engine. <a href=\"#update-to-mongo-3_2\">We recommend</a> you update your application to MongoDB 3.2.</p> <p>If you are currently using MongoDB 2.4, please note that the version has reached <a href=\"https://www.mongodb.com/support-policy\" target=\"_blank\" rel=\"external\">end-of-life</a> and you should at the least update to version 2.6. Version 2.6 is the minimum version supported by Meteor 1.4.</p> <p>Updating your database to 2.6 is generally pretty painless. Please consult the <a href=\"https://docs.mongodb.com/manual/release-notes/2.6-upgrade/\" target=\"_blank\" rel=\"external\">MongoDB documentation</a> for details about how to do so.</p> <blockquote> <p>As of 1.4, you must ensure your <code>MONGO_OPLOG_URL</code> contains a <code>replicaSet</code> argument (see <a href=\"https://github.com/meteor/meteor/blob/devel/History.md#v14\" target=\"_blank\" rel=\"external\">the changelog</a> and <a href=\"https://github.com/meteor/docs/blob/master/long-form/oplog-observe-driver.md#oplogobservedriver-in-production\" target=\"_blank\" rel=\"external\">the oplog documentation</a>).</p> <p>NOTE: Some MongoDB hosting providers may have a deployment setup that doesn’t require you to use a <code>replicaSet</code> argument. For example, <a href=\"https://www.compose.io/\" target=\"_blank\" rel=\"external\">Compose.io</a> has two types of deployments, MongoDB Classic and MongoDB+. The new MongoDB+ offering is a sharded setup and not a true replica set (despite the shard being implemented as a replica set) so it does not require the <code>replicaSet</code> parameter and Meteor will throw an error if you add it to your connection strings.</p> <p>If you see a failed authentication you may need to upgrade to <a href=\"https://docs.mongodb.com/manual/release-notes/3.0-scram/#upgrade-mongodb-cr-to-scram\" target=\"_blank\" rel=\"external\">SCRAM-SHA-1</a>, essentially: <code>use admin, db.adminCommand({authSchemaUpgrade: 1});</code>. You may need to delete and re-add your oplog reader user.</p> </blockquote> <h3 id=\"debugger\">Remove debugger statements</h3>\n<br>Due to changes in Node 4, if you have <code>debugger</code> statements in your code they will now hit the breakpoint even without a debugger attached. This also means you can now debug without using the <code>--debug-brk</code> option.<br><br><h2 id=\"recommendations\">Recommendations</h2>\n<br><br><h3 id=\"update-to-1_3_5_1-first\">Update to Meteor 1.3.5.1 first</h3> <p>Though not mandatory, it may be helpful to update your apps to Meteor 1.3.5.1 before updating to 1.4, since 1.3.5.1 is the most recent release before 1.4, and contains much of the same code as 1.4. To update an app to 1.3.5.1, run <code>meteor update --release 1.3.5.1</code> in the app directory. When you are confident the app is working correctly, <code>meteor update</code> will take you all the way to Meteor 1.4.</p> <h3 id=\"update-to-mongo-3_2\">Update to MongoDB 3.2</h3> <p>Although Meteor 1.4 supports MongoDB 2.6 and up, as well as the older MMAPv1 storage engine, we recommend you update your database to use the new WiredTiger storage engine and use MongoDB 3.2.</p> <p>To update your production database to version 3.2 you should follow the steps listed in the <a href=\"https://docs.mongodb.com/manual/release-notes/3.2-upgrade/\" target=\"_blank\" rel=\"external\">MongoDB documentation</a>. To update your storage engine, you should ensure you follow the <a href=\"https://docs.mongodb.com/v3.0/release-notes/3.0-upgrade/#change-storage-engine-to-wiredtiger\" target=\"_blank\" rel=\"external\">“Change Storage Engine to WiredTiger”</a> instructions in the 3.0 upgrade documentation.</p> <p>You can update your development database in a similar way (if you are running <code>meteor</code> as usual, you can connect to the development database at <code>localhost:3001/meteor</code>). However, if you are not concerned about the data in your development database, the easiest thing to do is to remove all local data (including your development database) with <code>meteor reset</code>. When you next start <code>meteor</code>, the database will be recreated with a 3.2 WiredTiger engine.</p> <h3 id=\"nested-imports\">Use Nested Imports</h3> <p>Thanks to the use of the <a href=\"https://www.npmjs.com/package/reify\" target=\"_blank\" rel=\"external\">reify</a> library, Meteor now fully supports nested <code>import</code> declarations in both application and package modules, whereas previously they were only allowed in application code:</p> <pre class=\"highlight js\" data-language=\"js\">if (Meteor.isClient) {\n  import { symbol } from './client-only/file';\n}\n</pre> <p>One place this is particularly useful is in <a href=\"https://github.com/meteor/todos/commit/3963a65d96cd7ef235a95d5e3a331d6f0606f70f\" target=\"_blank\" rel=\"external\">test files that are only intended to run on the client or the server</a> — you can now use <code>import</code> wherever you like, without having to organize your tests in <code>client</code> or <code>server</code> directories.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/1.4-migration.html\" class=\"_attribution-link\">https://guide.meteor.com/1.4-migration.html</a>\n  </p>\n</div>\n","1.3-migration":"<h1 class=\"title-page\">Migrating to Meteor 1.3</h1> <div class=\"subtitle-page\">How to migrate your application to use recommended best practice as of Meteor 1.3.</div>    <h2 id=\"breaking-changes\">Breaking changes</h2> <p>These are all the <em>breaking changes</em> – that is changes that you absolutely have to worry about if you are updating your app from 1.2.x to 1.3. However, we recommend that you also consider the <em>recommended</em> changes listed in the other sections below.</p> <ul> <li>\n<p>Files in a directory named <code>imports/</code> will no longer load eagerly. (You should probably rename such a directory as it the basis of our new <a href=\"#modules\">module system</a>).</p> </li> <li>\n<p>Files within your app named <code>*.test[s].*</code>, <code>*.app-test[s].*</code>, <code>*.spec[s].*</code> and <code>*.app-spec[s].*</code> will no longer load eagerly (you should probably rename such a file if it doesn’t contain tests, as it will be eagerly loaded by our new <a href=\"#testing\">app testing modes</a>).</p> </li> <li>\n<p>If you are using React you will now need to install a set of React npm packages in your app. See the <a href=\"#react\">recommendations for React</a> below for more details.</p> </li> </ul> <h3 id=\"breaking-changes-mobile\">Mobile</h3> <ul> <li>\n<p>iOS apps now require iOS 8 or higher, and building for iOS requires Xcode 7.2 or higher to be installed.</p> </li> <li>\n<p>Building for Android now requires Android SDK 23 to be installed. You may also need to create a new AVD for the emulator.</p> </li> <li>\n<p>Cordova has been upgraded to the most recent versions (Cordova 6.0.0, Cordova iOS 4.0.1 and Cordova Android 5.1.0). This may require you to upgrade your plugin versions. We pin core Cordova plugins to versions known to be compatible and warn about this during build, but you may encounter compile time or runtime errors with third party plugins. Upgrading to newer versions of these plugins may help if they have been updated to work with recent versions of Cordova.</p> </li> <li>\n<p>The plugin used to serve your app’s files and support hot code push has been completely rewritten. As a result, files are now served from <code>localhost</code> instead of <code>meteor.local</code>, with a fixed port number derived from your <code>appId</code>. You may have to update OAuth redirect URLs to point to the new local domain and port.</p> </li> </ul> <h2 id=\"modules\">Recommendations: modules</h2> <p>The biggest new feature in Meteor 1.3 is support for <a href=\"https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import\" target=\"_blank\" rel=\"external\">ES2015 modules</a> on the client and the server. Using modules you can declare dependencies between files, control load order, and use npm packages on the client and server easily.</p> <ul> <li>You should load all Meteor “pseudo-globals” using the `import { Name } from ‘meteor/package’ syntax. For instance:</li> </ul> <pre class=\"highlight js\" data-language=\"js\">import { Meteor } from 'meteor/meteor';\nimport { EJSON } from 'meteor/ejson';\n</pre> <ul> <li>You should consider installing the <code>meteor-node-stubs</code> npm package to allow using npm packages written for <code>node</code> on the browser:</li> </ul> <pre class=\"highlight bash\" data-language=\"bash\">meteor npm install --save meteor-node-stubs\n</pre> <ul> <li>If you are using app-local packages to control load order and write unit tests for your application, we recommend you switch to using modules:<ul> <li>Remove code related to the <a href=\"http://docs.meteor.com/#/full/packagejs\" target=\"_blank\" rel=\"external\">Package API</a> from the <code>package.js</code> files and rename them to <code>index.js</code>,</li> <li>Move your local packages to the <code>imports/</code> directory.</li> <li>Add the necessary <code>import</code> statements to each of the modules in your packages.</li> <li>Add <code>export</code> statements to each of your packages exports.</li> </ul> </li> </ul> <pre class=\"highlight js\" data-language=\"js\">api.addFiles('file.js');\n// For files that are not imported elsewhere, this turns into\nimport './file.js';\n\n// Remove from package.js\napi.export('Foo');\n\n// localPackage/foo.js\n// Foo must be explicitly exported\nexport default Foo;\n\n// client/main.js\nimport '/imports/localPackage';\n</pre> <ul> <li>\n<p>You can read about our recommended structure for applications and modules in the <a href=\"structure\">Application Structure article</a> of the Meteor Guide, and how to test them in the <a href=\"testing\">Testing article</a>.</p> </li> <li>\n<p>If you are using Atmosphere packages which simply wrap npm packages, both on the client and server, it is now recommended that you simply install them using npm. Run <code>npm init</code> to initialize your <code>package.json</code> and install packages with <code>npm install --save</code> (or <code>npm install --save-dev</code> if it’s development dependency for testing etc.). We have <a href=\"https://guide.meteor.com/using-packages.html#async-callbacks\">some tips</a> about how to use npm packages written in an asynchronous style.</p> </li> </ul> <p>Also, you should no longer need to use the <a href=\"https://atmospherejs.com/meteorhacks/npm\" target=\"_blank\" rel=\"external\"><code>meteorhacks:npm</code></a> package. To migrate, follow the following steps:</p> <ol> <li>Remove packages from your app: <code>meteor remove meteorhacks:npm npm-container</code>.</li> <li>Remove the generated <code>npm-container</code> package: <code>rm -r packages/npm-container</code>.</li> <li>Move the contents of <code>packages.json</code> to the <code>dependencies</code> section of your <code>package.json</code> (you may need to create one with <code>meteor npm init</code>).</li> <li>Simply use <a href=\"structure#intro-to-import-export\"><code>import</code></a> instead of <code>Npm.require()</code>.</li> </ol> <h2 id=\"packages\">Recommendations: package authors</h2> <p>Package authors are recommended to:</p> <ul> <li>\n<p>No longer publish wrapper packages that do no more than include an npm package / client side lib. If your package adds significant wrappers around the npm package, it might make sense however.</p> </li> <li>\n<p>Publish to npm when appropriate, especially if your package can be used by the wider JS community!</p> </li> <li>\n<p>Use <a href=\"http://1.3-docs.meteorapp.com/#/full/modularpackagestructure\" target=\"_blank\" rel=\"external\"><code>api.mainModule()</code></a> and <code>export</code> from your main module rather than <code>api.exports()</code> in Atmosphere packages.</p> </li> <li>\n<p>If you depend (directly or transitively) on a client side npm package that is large or problematic if installed twice (e.g. React), use <a href=\"https://github.com/tmeasday/check-npm-versions\" target=\"_blank\" rel=\"external\"><code>tmeasday:check-npm-versions</code></a> to declare “peer” dependencies. If the client side npm package you depend on is <code>angular</code>, you can support both Meteor 1.2 and 1.3 using <a href=\"#angular-meteor-packages\">this solution</a>. Read more about this in the <a href=\"https://guide.meteor.com/writing-packages.html#peer-npm-dependencies\">Writing Packages article</a>.</p> </li> </ul> <h2 id=\"testing\">Recommendations: Testing</h2> <p>Meteor 1.3 includes a new command <code>meteor test</code>, which can be used to run tests against your app, in two modalities. You can read about these features in much more detail in the <a href=\"testing\">Testing Guide Article</a>.</p> <h3 id=\"full-app-testing\">Full app testing</h3> <p>If you were previously using <a href=\"http://velocity.meteor.com\" target=\"_blank\" rel=\"external\">Velocity</a> to run tests against your running Meteor app, the full app test mode should allow you to run your tests against 1.3, with some small changes.</p> <ul> <li>\n<p>To convert tests, you’ll need to change or upgrade your test driver package to a 1.3 compatible package (as of this writing there is only one choice <a href=\"https://atmospherejs.com/practicalmeteor/mocha\" target=\"_blank\" rel=\"external\"><code>practicalmeteor:mocha</code></a> but we expect more to exist in the future). You should name your test files in the pattern <code>*.app-test[s].*</code> and place them <em>outside</em> of <code>tests/</code> directories. To run the tests you can run <code>meteor test --full-app --driver-package &lt;driver-package&gt;</code></p> </li> <li>\n<p>Note that full app test mode does not run the test reporter in a separate application to the app under test, and does not amalgamate results from multiple testing systems, as Velocity does. This effectively means if you are using more than one testing system, you will need to run <code>meteor test --full-app</code> multiple times.</p> </li> <li>\n<p>Also, it means certain types of tests are better off written as <a href=\"testing#acceptance-tests\"><em>acceptance tests</em></a> outside of the Meteor tool.</p> </li> </ul> <h3 id=\"module-testing\">Module testing</h3> <p>If you were previously using in-app packages in order to unit test your app, you should switch to a <a href=\"#modules\">modules-based approach</a> and test them using the normal test mode.</p> <ul> <li>\n<p>To convert your unit tests to run against the app, first upgrade your test driver (see <a href=\"#full-app-testing\">above</a>) and then place your test files alongside the modules they are testing with a name matching <code>*.tests.*</code>. Such files will automatically be added to your “test app” when you run <code>meteor test --driver-package &lt;driver-package&gt;</code>. You can <code>import</code> the modules that you need to test against within each test file.</p> </li> <li>\n<p>Some example tests can be seen the <a href=\"https://github.com/meteor/todos\" target=\"_blank\" rel=\"external\">Todos example app</a></p> </li> </ul> <h2 id=\"mobile\">Recommendations: Mobile</h2> <p>Alongside some of the breaking mobile changes <a href=\"#breaking-changes-mobile\">listed above</a>, there are some changes in the way the mobile integration works that you should consider:</p> <ul> <li>\n<p>Some low resolution app icon and launch images sizes for now unsupported devices have been deprecated. To avoid a deprecation warning during build, please remove the entries from your <code>mobile-config.js</code>. (You probably also want to remove the image files from your project.)</p> </li> <li>\n<p>The plugin now allows for local file access on both iOS and Android. You can construct file system URLs manually (<code>http://localhost:&lt;port&gt;/local-filesystem/&lt;path&gt;</code>) or use <code>WebAppLocalServer.localFileSystemUrl()</code> to convert a <code>file://</code> URL.</p> </li> </ul> <h2 id=\"react\">Install React from npm</h2> <p>In Meteor 1.3, we recommend installing <code>react</code> and <code>react-dom</code> <a href=\"react#using-with-meteor\">into your app using npm</a>, and importing them from your app code:</p> <pre class=\"highlight js\" data-language=\"js\">import React from 'react';\nimport ReactDOM from 'react-dom';\n</pre> <p>As mentioned in the <a href=\"#breaking-changes\">breaking changes</a>, the <code>react</code> Atmosphere package still works, but it now expects you to install the React npm packages it uses in your application (read the <a href=\"https://guide.meteor.com/using-packages.html\">Using Packages</a> article for more details about how to manage your npm dependencies):</p> <pre class=\"highlight armasm\" data-language=\"armasm\">npm install --save react react-dom react-addons-transition-group \\\n react-addons-css-transition-group react-addons-linked-state-mixin \\\n react-addons-create-fragment react-addons-update react-addons-pure-render-mixin \\\n react-addons-test-utils react-addons-perf\n</pre> <p><strong>However</strong>, we recommend that you should stop using the <code>react</code> or <code>react-runtime</code> Atmosphere packages and instead install React directly from npm (for more detail, see the <a href=\"react\">React article</a> of the guide). To make this change in an existing app, you can run:</p> <pre class=\"highlight cmake\" data-language=\"cmake\">meteor remove react\n\n# if you are using our data integration\nmeteor add react-meteor-data\n\nnpm install --save react react-dom react-addons-pure-render-mixin\n</pre> <p>Then, in your application, you should import React directly rather than <a href=\"#modules\">relying on a global React symbol</a>:</p> <pre class=\"highlight js\" data-language=\"js\">import React from 'react';\n</pre> <p>If you are using a package that depends on the <code>react</code> or <code>react-runtime</code> Atmosphere packages, you will still need to install the full list of npm React packages above, so we encourage package authors to update their packages to import React directly from npm.</p> <h3 id=\"react-meteor-data\">Loading data with React</h3> <p>The <code>react-meteor-data</code> has a <a href=\"react#data\">new <code>createContainer</code> syntax</a> for combining Meteor’s data system with React in an idiomatic way. We encourage you to use containers to separate your data loading concerns from your presentational components!</p> <h2 id=\"react\">Install Angular from npm</h2> <p>With an Angular Meteor app you can safely update to Meteor 1.3 without any changes to your code.<br>You just need to make sure you are using the latest <code>angular</code> Atmosphere package <code>1.3.9_2</code>.</p> <p>But, in Meteor 1.3, we recommend installing <code>angular</code> and <code>angular-meteor</code> into your app using npm:<br><pre class=\"highlight sql\" data-language=\"sql\">npm install --save angular angular-meteor\n</pre></p> <p>and importing them from your app code:<br><pre class=\"highlight js\" data-language=\"js\">import angular from 'angular';\nimport angular-meteor from 'angular-meteor';\n</pre></p> <p>Read the <a href=\"https://guide.meteor.com/using-packages.html\">Using Packages</a> article for more details about how to manage your npm dependencies.</p> <p>If you already using the Atmosphere packages and want to move to the npm packages, you will need to remove the Atmosphere packages first but keep the angular-templates Atmosphere package:</p> <pre class=\"highlight cmake\" data-language=\"cmake\">meteor remove angular\nmeteor add angular-templates\n\nnpm install --save angular angular-meteor\n</pre> <p>Then, in your application, you should import angular directly rather than <a href=\"#modules\">relying on global angular</a>:</p> <pre class=\"highlight js\" data-language=\"js\">import angular from 'angular';\nimport angular-meteor from 'angular-meteor';\n</pre> <h3 id=\"angular-meteor-packages\">Existing Angular Atmosphere packages</h3> <p>If you are a package author that depends on the <code>angular:angular</code> Atmosphere package, you can support both Meteor 1.2 and 1.3 so your users will have an easy and unbreaking update process:</p> <p>Change your <code>angular:angular</code> dependency into a weak dependency:<br><pre class=\"highlight js\" data-language=\"js\">api.use('angular:angular@1.5.3', 'client', { weak: true });\n</pre></p> <p>and then add a dependency check for both Meteor 1.2 and 1.3 before initializing your angular module:<br><pre class=\"highlight js\" data-language=\"js\">if (!window.angular) {\n  try {\n    if (Package['modules-runtime']) {\n      var require = Package['modules-runtime'].meteorInstall();\n      require('angular');\n    }\n  } catch(e) {\n    throw new Error('angular package is missing');\n  }\n}\n\nangular.module('your.module', []);\n</pre></p> <h2 id=\"guide\">New guide articles</h2> <p>As part of the 1.3 release, we have some new guide articles and updated sections of existing articles:</p> <ul> <li>\n<p>There’s a <a href=\"structure\">Application Structure</a> article which explains how to structure your files and use the module system.</p> </li> <li>\n<p>There’s a <a href=\"code-style\">Code Style</a> article that makes recommendations about how to ensure consistent formatting for your code.</p> </li> <li>\n<p>There’s a <a href=\"testing\">Testing</a> article which covers how to do various kinds of testing in Meteor.</p> </li> <li>\n<p>There’s a <a href=\"react\">React</a> article which explains how to best use React with Meteor</p> </li> <li>\n<p>There’s a <a href=\"mobile\">Mobile</a> article which covers how to best use our Cordova integration.</p> </li> <li>\n<p>There’s a <a href=\"https://guide.meteor.com/using-packages.html\">Using Packages</a> article which explains how best to use both npm and Atmosphere packages in your app.</p> </li> </ul> <ul> <li>\n<p>There’s a <a href=\"https://guide.meteor.com/writing-packages.html\">Writing Packages</a> article which explains practice for writing Atmosphere packages and using all kinds of dependencies within them.</p> </li> <li>\n<p>The UI/UX article has been updated to explain how to do <a href=\"ui-ux#i18n\">i18n</a> in Meteor applications.</p> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/1.3-migration.html\" class=\"_attribution-link\">https://guide.meteor.com/1.3-migration.html</a>\n  </p>\n</div>\n","structure":"<h1 class=\"title-page\">Application Structure</h1> <div class=\"subtitle-page\">How to structure your Meteor app with ES2015 modules, ship code to the client and server, and split your code into multiple apps.</div>    <p>After reading this article, you’ll know:</p> <ol> <li>How a Meteor application compares to other types of applications in terms of file structure.</li> <li>How to organize your application both for small and larger applications.</li> <li>How to format your code and name the parts of your application in consistent and maintainable ways.</li> </ol> <h2 id=\"meteor-structure\">Universal JavaScript</h2> <p>Meteor is a <em>full-stack</em> framework for building JavaScript applications. This means Meteor applications differ from most applications in that they include code that runs on the client, inside a web browser or Cordova mobile app, code that runs on the server, inside a <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Node.js</a> container, and <em>common</em> code that runs in both environments. The <a href=\"build-tool\">Meteor build tool</a> allows you to easily specify what JavaScript code, including any supporting UI templates, CSS rules, and static assets, to run in each environment using a combination of ES2015 <code>import</code> and <code>export</code> and the Meteor build system <a href=\"#load-order\">default file load order</a> rules.</p> <h3 id=\"es2015-modules\">ES2015 modules</h3> <p>As of version 1.3, Meteor ships with full support for <a href=\"https://developer.mozilla.org/en/docs/web/javascript/reference/statements/import\" target=\"_blank\" rel=\"external\">ES2015 modules</a>. The ES2015 module standard is the replacement for <a href=\"http://requirejs.org/docs/commonjs.html\" target=\"_blank\" rel=\"external\">CommonJS</a> and <a href=\"https://github.com/amdjs/amdjs-api\" target=\"_blank\" rel=\"external\">AMD</a>, which are commonly used JavaScript module format and loading systems.</p> <p>In ES2015, you can make variables available outside a file using the <code>export</code> keyword. To use the variables somewhere else, you must <code>import</code> them using the path to the source. Files that export some variables are called “modules”, because they represent a unit of reusable code. Explicitly importing the modules and packages you use helps you write your code in a modular way, avoiding the introduction of global symbols and “action at a distance”.</p> <p>Since this is a new feature introduced in Meteor 1.3, you will find a lot of code online that uses the older, more centralized conventions built around packages and apps declaring global symbols. This old system still works, so to opt-in to the new module system code must be placed inside the <code>imports/</code> directory in your application. We expect a future release of Meteor will turn on modules by default for all code, because this is more aligned with how developers in the wider JavaScript community write their code.</p> <p>You can read about the module system in detail in the <a href=\"https://docs.meteor.com/#/full/modules\" target=\"_blank\" rel=\"external\"><code>modules</code> package README</a>. This package is automatically included in every new Meteor app as part of the <a href=\"https://docs.meteor.com/#/full/ecmascript\" target=\"_blank\" rel=\"external\"><code>ecmascript</code> meta-package</a>, so most apps won’t need to do anything to start using modules right away.</p> <h3 id=\"intro-to-import-export\">Introduction to using <code>import</code> and <code>export</code>\n</h3> <p>Meteor allows you to <code>import</code> not only JavaScript in your application, but also CSS and HTML to control load order:</p> <pre class=\"highlight js\" data-language=\"js\">import '../../api/lists/methods.js';  // import from relative path\nimport '/imports/startup/client';     // import module with index.js from absolute path\nimport './loading.html';              // import Blaze compiled HTML from relative path\nimport '/imports/ui/style.css';       // import CSS from absolute path\n</pre> <blockquote> <p>For more ways to import styles, see the <a href=\"build-tool#css-importing\">Build System</a> article.</p> </blockquote> <p>Meteor also supports the standard ES2015 modules <code>export</code> syntax:</p> <pre class=\"highlight js\" data-language=\"js\">export const listRenderHold = LaunchScreen.hold();  // named export\nexport { Todos };                                   // named export\nexport default Lists;                               // default export\nexport default new Collection('lists');             // default export\n</pre> <h3 id=\"importing-from-packages\">Importing from packages</h3> <p>In Meteor, it is also simple and straightforward to use the <code>import</code> syntax to load npm packages on the client or server and access the package’s exported symbols as you would with any other module. You can also import from Meteor Atmosphere packages, but the import path must be prefixed with <code>meteor/</code> to avoid conflict with the npm package namespace. For example, to import <code>moment</code> from npm and <code>HTTP</code> from Atmosphere:</p> <pre class=\"highlight js\" data-language=\"js\">import moment from 'moment';          // default import from npm\nimport { HTTP } from 'meteor/http';   // named import from Atmosphere\n</pre> <p>For more details using <code>imports</code> with packages see <a href=\"https://guide.meteor.com/using-packages.html\">Using Packages</a> in the Meteor Guide.</p> <h3 id=\"using-require\">Using <code>require</code>\n</h3> <p>In Meteor, <code>import</code> statements compile to CommonJS <code>require</code> syntax. However, as a convention we encourage you to use <code>import</code>.</p> <p>With that said, in some situations you may need to call out to <code>require</code> directly. One notable example is when requiring client or server-only code from a common file. As <code>import</code>s must be at the top-level scope, you may not place them within an <code>if</code> statement, so you’ll need to write code like:</p> <pre class=\"highlight js\" data-language=\"js\">if (Meteor.isClient) {\n  require('./client-only-file.js');\n}\n</pre> <p>Note that dynamic calls to <code>require()</code> (where the name being required can change at runtime) cannot be analyzed correctly and may result in broken client bundles.</p> <p>If you need to <code>require</code> from an ES2015 module with a <code>default</code> export, you can grab the export with <code>require(\"package\").default</code>.</p> <p>Another situation where you’ll need to use <code>require</code> is in CoffeeScript files. As CS doesn’t support the <code>import</code> syntax yet, you should use <code>require</code>:</p> <pre class=\"highlight cs\" data-language=\"cs\">{ FlowRouter } = require 'meteor/kadira:flow-router'\nReact = require 'react'\n</pre> <h3 id=\"exporting-from-coffeescript\">Exporting with CoffeeScript</h3> <p>When using CoffeeScript, not only the syntax to import variables is different, but also the export has to be done in a different way. Variables to be exported are put in the <code>exports</code> object:</p> <pre class=\"highlight cs\" data-language=\"cs\">exports.Lists = ListsCollection 'Lists'\n</pre> <h2 id=\"javascript-structure\">File structure</h2> <p>To fully use the module system and ensure that our code only runs when we ask it to, we recommend that all of your application code should be placed inside the <code>imports/</code> directory. This means that the Meteor build system will only bundle and include that file if it is referenced from another file using an <code>import</code> (also called “lazy evaluation or loading”).</p> <p>Meteor will load all files outside of any directory named <code>imports/</code> in the application using the <a href=\"#load-order\">default file load order</a> rules (also called “eager evaluation or loading”). It is recommended that you create exactly two eagerly loaded files, <code>client/main.js</code> and <code>server/main.js</code>, in order to define explicit entry points for both the client and the server. Meteor ensures that any file in any directory named <code>server/</code> will only be available on the server, and likewise for files in any directory named <code>client/</code>. This also precludes trying to <code>import</code> a file to be used on the server from any directory named <code>client/</code> even if it is nested in an <code>imports/</code> directory and vice versa for importing client files from <code>server/</code>.</p> <p>These <code>main.js</code> files won’t do anything themselves, but they should import some <em>startup</em> modules which will run immediately, on client and server respectively, when the app loads. These modules should do any configuration necessary for the packages you are using in your app, and import the rest of your app’s code.</p> <h3 id=\"example-app-structure\">Example directory layout</h3> <p>To start, let’s look at our <a href=\"https://github.com/meteor/todos\" target=\"_blank\" rel=\"external\">Todos example application</a>, which is a great example to follow when structuring your app. Here’s an overview of its directory structure:</p> <pre class=\"highlight sh\" data-language=\"sh\">imports/\n  startup/\n    client/\n      index.js                 # import client startup through a single index entry point\n      routes.js                # set up all routes in the app\n      useraccounts-configuration.js # configure login templates\n    server/\n      fixtures.js              # fill the DB with example data on startup\n      index.js                 # import server startup through a single index entry point\n\n  api/\n    lists/                     # a unit of domain logic\n      server/\n        publications.js        # all list-related publications\n        publications.tests.js  # tests for the list publications\n      lists.js                 # definition of the Lists collection\n      lists.tests.js           # tests for the behavior of that collection\n      methods.js               # methods related to lists\n      methods.tests.js         # tests for those methods\n\n  ui/\n    components/                # all reusable components in the application\n                               # can be split by domain if there are many\n    layouts/                   # wrapper components for behaviour and visuals\n    pages/                     # entry points for rendering used by the router\n\nclient/\n  main.js                      # client entry point, imports all client code\n\nserver/\n  main.js                      # server entry point, imports all server code\n</pre> <h3 id=\"structuring-imports\">Structuring imports</h3> <p>Now that we have placed all files inside the <code>imports/</code> directory, let’s think about how best to organize our code using modules. It makes sense to put all code that runs when your app starts in an <code>imports/startup</code> directory. Another good idea is splitting data and business logic from UI rendering code. We suggest using directories called <code>imports/api</code> and <code>imports/ui</code> for this logical split.</p> <p>Within the <code>imports/api</code> directory, it’s sensible to split the code into directories based on the domain that the code is providing an API for — typically this corresponds to the collections you’ve defined in your app. For instance in the Todos example app, we have the <code>imports/api/lists</code> and <code>imports/api/todos</code> domains. Inside each directory we define the collections, publications and methods used to manipulate the relevant domain data.</p> <blockquote> <p>Note: in a larger application, given that the todos themselves are a part of a list, it might make sense to group both of these domains into a single larger “list” module. The Todos example is small enough that we need to separate these only to demonstrate modularity.</p> </blockquote> <p>Within the <code>imports/ui</code> directory it typically makes sense to group files into directories based on the type of UI side code they define, i.e. top level <code>pages</code>, wrapping <code>layouts</code>, or reusable <code>components</code>.</p> <p>For each module defined above, it makes sense to co-locate the various auxiliary files with the base JavaScript file. For instance, a Blaze UI component should have its template HTML, JavaScript logic, and CSS rules in the same directory. A JavaScript module with some business logic should be co-located with the unit tests for that module.</p> <h3 id=\"startup-files\">Startup files</h3> <p>Some of your code isn’t going to be a unit of business logic or UI, it’s just some setup or configuration code that needs to run in the context of the app when it starts up. In the Todos example app, the <code>imports/startup/client/useraccounts-configuration.js</code> file configures the <code>useraccounts</code> login templates (see the <a href=\"accounts\">Accounts</a> article for more information about <code>useraccounts</code>). The <code>imports/startup/client/routes.js</code> configures all of the routes and then imports <em>all</em> other code that is required on the client:</p> <pre class=\"highlight js\" data-language=\"js\">import { FlowRouter } from 'meteor/kadira:flow-router';\nimport { BlazeLayout } from 'meteor/kadira:blaze-layout';\nimport { AccountsTemplates } from 'meteor/useraccounts:core';\n\n// Import to load these templates\nimport '../../ui/layouts/app-body.js';\nimport '../../ui/pages/root-redirector.js';\nimport '../../ui/pages/lists-show-page.js';\nimport '../../ui/pages/app-not-found.js';\n\n// Import to override accounts templates\nimport '../../ui/accounts/accounts-templates.js';\n\n// Below here are the route definitions\n</pre> <p>We then import both of these files in <code>imports/startup/client/index.js</code>:</p> <pre class=\"highlight js\" data-language=\"js\">import './useraccounts-configuration.js';\nimport './routes.js';\n</pre> <p>This makes it easy to then import all the client startup code with a single import as a module from our main eagerly loaded client entry point <code>client/main.js</code>:</p> <pre class=\"highlight js\" data-language=\"js\">import '/imports/startup/client';\n</pre> <p>On the server, we use the same technique of importing all the startup code in <code>imports/startup/server/index.js</code>:</p> <pre class=\"highlight js\" data-language=\"js\">// This defines a starting set of data to be loaded if the app is loaded with an empty db.\nimport '../imports/startup/server/fixtures.js';\n\n// This file configures the Accounts package to define the UI of the reset password email.\nimport '../imports/startup/server/reset-password-email.js';\n\n// Set up some rate limiting and other important security settings.\nimport '../imports/startup/server/security.js';\n\n// This defines all the collections, publications and methods that the application provides\n// as an API to the client.\nimport '../imports/api/api.js';\n</pre> <p>Our main server entry point <code>server/main.js</code> then imports this startup module. You can see that here we don’t actually import any variables from these files - we just import them so that they execute in this order.</p> <h3 id=\"importing-meteor-globals\">Importing Meteor “pseudo-globals”</h3> <p>For backwards compatibility Meteor 1.3 still provides Meteor’s global namespacing for the Meteor core package as well as for other Meteor packages you include in your application. You can also still directly call functions such as <a href=\"http://docs.meteor.com/#/full/meteor_publish\" target=\"_blank\" rel=\"external\"><code>Meteor.publish</code></a>, as in previous versions of Meteor, without first importing them. However, it is recommended best practice that you first load all the Meteor “pseudo-globals” using the <code>import { Name } from 'meteor/package'</code> syntax before using them. For instance:</p> <pre class=\"highlight js\" data-language=\"js\">import { Meteor } from 'meteor/meteor';\nimport { EJSON } from 'meteor/ejson';\n</pre> <h2 id=\"load-order\">Default file load order</h2> <p>Even though it is recommended that you write your application to use ES2015 modules and the <code>imports/</code> directory, Meteor 1.3 continues to support eager loading of files, using these default load order rules, to provide backwards compatibility with applications written for Meteor 1.2 and earlier. You may combine both eager loading and lazy loading using <code>import</code> in a single app. Any import statements are evaluated in the order they are listed in a file when that file is loaded and evaluated using these rules.</p> <p>There are several load order rules. They are <em>applied sequentially</em> to all applicable files in the application, in the priority given below:</p> <ol> <li>HTML template files are <strong>always</strong> loaded before everything else</li> <li>Files beginning with <code>main.</code> are loaded <strong>last</strong>\n</li> <li>Files inside <strong>any</strong> <code>lib/</code> directory are loaded next</li> <li>Files with deeper paths are loaded next</li> <li>Files are then loaded in alphabetical order of the entire path</li> </ol> <pre class=\"highlight js\" data-language=\"js\">nav.html\nmain.html\nclient/lib/methods.js\nclient/lib/styles.js\nlib/feature/styles.js\nlib/collections.js\nclient/feature-y.js\nfeature-x.js\nclient/main.js\n</pre> <p>For example, the files above are arranged in the correct load order. <code>main.html</code> is loaded second because HTML templates are always loaded first, even if it begins with <code>main.</code>, since rule 1 has priority over rule 2. However, it will be loaded after <code>nav.html</code> because rule 2 has priority over rule 5.</p> <p><code>client/lib/styles.js</code> and <code>lib/feature/styles.js</code> have identical load order up to rule 4; however, since <code>client</code> comes before <code>lib</code> alphabetically, it will be loaded first.</p> <blockquote> <p>You can also use <a href=\"http://docs.meteor.com/#/full/meteor_startup\" target=\"_blank\" rel=\"external\">Meteor.startup</a> to control when run code is run on both the server and the client.</p> </blockquote> <h3 id=\"special-directories\">Special directories</h3> <p>By default, any JavaScript files in your Meteor application folder are bundled and loaded on both the client and the server. However, the names of the files and directories inside your project can affect their load order, where they are loaded, and some other characteristics. Here is a list of file and directory names that are treated specially by Meteor:</p> <ul> <li>\n<p><strong>imports</strong></p> <p> Any directory named <code>imports/</code> is not loaded anywhere and files must be imported using <code>import</code>.</p> </li> <li>\n<p><strong>node_modules</strong></p> <p> Any directory named <code>node_modules/</code> is not loaded anywhere. node.js packages installed into <code>node_modules</code> directories must be imported using <code>import</code> or by using <code>Npm.depends</code> in <code>package.js</code>.</p> </li> <li>\n<p><strong>client</strong></p> <p> Any directory named <code>client/</code> is not loaded on the server. Similar to wrapping your code in <code>if (Meteor.isClient) { ... }</code>. All files loaded on the client are automatically concatenated and minified when in production mode. In development mode, JavaScript and CSS files are not minified, to make debugging easier. CSS files are still combined into a single file for consistency between production and development, because changing the CSS file’s URL affects how URLs in it are processed.</p> <blockquote> <p>HTML files in a Meteor application are treated quite a bit differently from a server-side framework. Meteor scans all the HTML files in your directory for three top-level elements: <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code>, and <code>&lt;template&gt;</code>. The head and body sections are separately concatenated into a single head and body, which are transmitted to the client on initial page load.</p> </blockquote> </li> <li>\n<p><strong>server</strong></p> <p> Any directory named <code>server/</code> is not loaded on the client. Similar to wrapping your code in <code>if (Meteor.isServer) { ... }</code>, except the client never even receives the code. Any sensitive code that you don’t want served to the client, such as code containing passwords or authentication mechanisms, should be kept in the <code>server/</code> directory.</p> <p> Meteor gathers all your JavaScript files, excluding anything under the <code>client</code>, <code>public</code>, and <code>private</code> subdirectories, and loads them into a Node.js server instance. In Meteor, your server code runs in a single thread per request, not in the asynchronous callback style typical of Node.</p> </li> <li>\n<p><strong>public</strong></p> <p> All files inside a top-level directory called <code>public/</code> are served as-is to the client. When referencing these assets, do not include <code>public/</code> in the URL, write the URL as if they were all in the top level. For example, reference <code>public/bg.png</code> as <code>&lt;img src='/bg.png' /&gt;</code>. This is the best place for <code>favicon.ico</code>, <code>robots.txt</code>, and similar files.</p> </li> <li>\n<p><strong>private</strong></p> <p> All files inside a top-level directory called <code>private/</code> are only accessible from server code and can be loaded via the <a href=\"http://docs.meteor.com/#/full/assets_getText\" target=\"_blank\" rel=\"external\"><code>Assets</code></a> API. This can be used for private data files and any files that are in your project directory that you don’t want to be accessible from the outside.</p> </li> <li>\n<p><strong>client/compatibility</strong></p> <p> This folder is for compatibility with JavaScript libraries that rely on variables declared with var at the top level being exported as globals. Files in this directory are executed without being wrapped in a new variable scope. These files are executed before other client-side JavaScript files.</p> <blockquote> <p>It is recommended to use npm for 3rd party JavaScript libraries and use <code>import</code> to control when files are loaded.</p> </blockquote> </li> <li>\n<p><strong>tests</strong></p> <p> Any directory named <code>tests/</code> is not loaded anywhere. Use this for any test code you want to run using a test runner outside of <a href=\"testing\">Meteor’s built-in test tools</a>.</p> </li> </ul> <p>The following directories are also not loaded as part of your app code:</p> <ul> <li>Files/directories whose names start with a dot, like <code>.meteor</code> and <code>.git</code>\n</li> <li>\n<code>packages/</code>: Used for local packages</li> <li>\n<code>cordova-build-override/</code>: Used for <a href=\"mobile#advanced-build\">advanced mobile build customizations</a>\n</li> <li>\n<code>programs</code>: For legacy reasons</li> </ul> <h3 id=\"files-outside\">Files outside special directories</h3> <p>All JavaScript files outside special directories are loaded on both the client and the server. Meteor provides the variables <a href=\"http://docs.meteor.com/#/full/meteor_isserver\" target=\"_blank\" rel=\"external\"><code>Meteor.isClient</code></a> and <a href=\"http://docs.meteor.com/#/full/meteor_isserver\" target=\"_blank\" rel=\"external\"><code>Meteor.isServer</code></a> so that your code can alter its behavior depending on whether it’s running on the client or the server.</p> <p>CSS and HTML files outside special directories are loaded on the client only and cannot be used from server code.</p> <h2 id=\"splitting-your-app\">Splitting into multiple apps</h2> <p>If you are writing a sufficiently complex system, there can come a time where it makes sense to split your code up into multiple applications. For example you may want to create a separate application for the administration UI (rather than checking permissions all through the admin part of your site, you can check once), or separate the code for the mobile and desktop versions of your app.</p> <p>Another very common use case is splitting a worker process away from your main application so that expensive jobs do not impact the user experience of your visitors by locking up a single web server.</p> <p>There are some advantages of splitting your application in this way:</p> <ul> <li>\n<p>Your client JavaScript bundle can be significantly smaller if you separate out code that a specific type of user will never use.</p> </li> <li>\n<p>You can deploy the different applications with different scaling setups and secure them differently (for instance you might restrict access to your admin application to users behind a firewall).</p> </li> <li>\n<p>You can allow different teams at your organization to work on the different applications independently.</p> </li> </ul> <p>However there are some challenges to splitting your code in this way that should be considered before jumping in.</p> <h3 id=\"sharing-code\">Sharing code</h3> <p>The primary challenge is properly sharing code between the different applications you are building. The simplest approach to deal with this issue is to simply deploy the <em>same</em> application on different web servers, controlling the behavior via different <a href=\"deployment#environment\">settings</a>. This approach allows you to easily deploy different versions with different scaling behavior but doesn’t enjoy most of the other advantages stated above.</p> <p>If you want to create Meteor applications with separate code, you’ll have some modules that you’d like to share between them. If those modules are something the wider world could use, you should consider <a href=\"https://guide.meteor.com/writing-packages.html\">publishing them to a package system</a>, either npm or Atmosphere, depending on whether the code is Meteor-specific or otherwise.</p> <p>If the code is private, or of no interest to others, it typically makes sense to simply include the same module in both applications (you <em>can</em> do this with <a href=\"https://www.npmjs.com/private-modules\" target=\"_blank\" rel=\"external\">private npm modules</a>). There are several ways to do this:</p> <ul> <li>\n<p>a straightforward approach is simply to include the common code as a <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\" target=\"_blank\" rel=\"external\">git submodule</a> of both applications.</p> </li> <li>\n<p>alternatively, if you include both applications in a single repository, you can use symbolic links to include the common module inside both apps.</p> </li> </ul> <h3 id=\"sharing-data\">Sharing data</h3> <p>Another important consideration is how you’ll share the data between your different applications.</p> <p>The simplest approach is to point both applications at the same <code>MONGO_URL</code> and allow both applications to read and write from the database directly. This works well thanks to Meteor’s support for reactivity through the database. When one app changes some data in MongoDB, users of any other app connected to the database will see the changes immediately thanks to Meteor’s livequery.</p> <p>However, in some cases it’s better to allow one application to be the master and control access to the data for other applications via an API. This can help if you want to deploy the different applications on different schedules and need to be conservative about how the data changes.</p> <p>The simplest way to provide a server-server API is to use Meteor’s built-in DDP protocol directly. This is the same way your Meteor client gets data from your server, but you can also use it to communicate between different applications. You can use <a href=\"http://docs.meteor.com/#/full/ddp_connect\" target=\"_blank\" rel=\"external\"><code>DDP.connect()</code></a> to connect from a “client” server to the master server, and then use the connection object returned to make method calls and read from publications.</p> <h3 id=\"sharing-accounts\">Sharing accounts</h3> <p>If you have two servers that access the same database and you want authenticated users to make DDP calls across the both of them, you can use the <em>resume token</em> set on one connection to login on the other.</p> <p>If your user has connected to server A, then you can use <code>DDP.connect()</code> to open a connection to server B, and pass in server A’s resume token to authenticate on server B. As both servers are using the same DB, the same server token will work in both cases. The code to authenticate looks like this:</p> <pre class=\"highlight js\" data-language=\"js\">// This is server A's token as the default `Accounts` points at our server\nconst token = Accounts._storedLoginToken();\n\n// We create a *second* accounts client pointing at server B\nconst app2 = DDP.connect('url://of.server.b');\nconst accounts2 = new AccountsClient({ connection: app2 });\n\n// Now we can login with the token. Further calls to `accounts2` will be authenticated\naccounts2.loginWithToken(token);\n</pre> <p>You can see a proof of concept of this architecture in an <a href=\"https://github.com/tmeasday/multi-app-accounts\" target=\"_blank\" rel=\"external\">example repository</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/structure.html\" class=\"_attribution-link\">https://guide.meteor.com/structure.html</a>\n  </p>\n</div>\n","collections":"<h1 class=\"title-page\">Collections and Schemas</h1> <div class=\"subtitle-page\">How to define, use, and maintain MongoDB collections in Meteor.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>The different types of MongoDB collections in Meteor, and how to use them.</li> <li>How to define a schema for a collection to control its content.</li> <li>What to consider when defining your collection’s schema.</li> <li>How to enforce the schema when writing to a collection.</li> <li>How to carefully change the schema of your collection.</li> <li>How to deal with associations between records.</li> </ol> <h2 id=\"mongo-collections\">MongoDB collections in Meteor</h2> <p>At its core, a web application offers its users a view into, and a way to modify, a persistent set of data. Whether managing a list of todos, or ordering a car to pick you up, you are interacting with a permanent but constantly changing data layer.</p> <p>In Meteor, that data layer is typically stored in MongoDB. A set of related data in MongoDB is referred to as a “collection”. In Meteor you access MongoDB through <a href=\"http://docs.meteor.com/api/collections.html#Mongo-Collection\" target=\"_blank\" rel=\"external\">collections</a>, making them the primary persistence mechanism for your app data.</p> <p>However, collections are a lot more than a way to save and retrieve data. They also provide the core of the interactive, connected user experience that users expect from the best applications. Meteor makes this user experience easy to implement.</p> <p>In this article, we’ll look closely at how collections work in various places in the framework, and how to get the most out of them.</p> <h3 id=\"server-collections\">Server-side collections</h3> <p>When you create a collection on the server:</p> <pre class=\"highlight js\" data-language=\"js\">Todos = new Mongo.Collection('Todos');\n</pre> <p>You are creating a collection within MongoDB, and an interface to that collection to be used on the server. It’s a fairly straightforward layer on top of the underlying Node MongoDB driver, but with a synchronous API:</p> <pre class=\"highlight js\" data-language=\"js\">// This line won't complete until the insert is done\nTodos.insert({_id: 'my-todo'});\n// So this line will return something\nconst todo = Todos.findOne({_id: 'my-todo'});\n// Look ma, no callbacks!\nconsole.log(todo);\n</pre> <h3 id=\"client-collections\">Client-side collections</h3> <p>On the client, when you write the same line:</p> <pre class=\"highlight js\" data-language=\"js\">Todos = new Mongo.Collection('Todos');\n</pre> <p>It does something totally different!</p> <p>On the client, there is no direct connection to the MongoDB database, and in fact a synchronous API to it is not possible (nor probably what you want). Instead, on the client, a collection is a client side <em>cache</em> of the database. This is achieved thanks to the <a href=\"https://www.meteor.com/mini-databases\" target=\"_blank\" rel=\"external\">Minimongo</a> library—an in-memory, all JS, implementation of the MongoDB API. What this means is that on the client, when you write:</p> <pre class=\"highlight js\" data-language=\"js\">// This line is changing an in-memory Minimongo data structure\nTodos.insert({_id: 'my-todo'});\n// And this line is querying it\nconst todo = Todos.findOne({_id: 'my-todo'});\n// So this happens right away!\nconsole.log(todo);\n</pre> <p>The way that you move data from the server (and MongoDB-backed) collection into the client (in-memory) collection is the subject of the <a href=\"data-loading\">data loading article</a>. Generally speaking, you <em>subscribe</em> to a <em>publication</em>, which pushes data from the server to the client. Usually, you can assume that the client contains an up-to-date copy of some subset of the full MongoDB collection.</p> <p>To write data back to the server, you use a <em>Method</em>, the subject of the <a href=\"methods\">methods article</a>.</p> <h3 id=\"local-collections\">Local collections</h3> <p>There is a third way to use a collection in Meteor. On the client or server, if you create a collection but pass <code>null</code> instead of a name:</p> <pre class=\"highlight js\" data-language=\"js\">SelectedTodos = new Mongo.Collection(null);\n</pre> <p>This creates a <em>local collection</em>. This is a Minimongo collection that has no database connection (ordinarily a named collection would either be directly connected to the database on the server, or via a subscription on the client).</p> <p>A local collection is a convenient way to use the full power of the Minimongo library for in-memory storage. For instance, you might use it instead of a simple array if you need to execute complex queries over your data. Or you may want to take advantage of its <em>reactivity</em> on the client to drive some UI in a way that feels natural in Meteor.</p> <h2 id=\"schemas\">Defining a schema</h2> <p>Although MongoDB is a schema-less database, which allows maximum flexibility in data structuring, it is generally good practice to use a schema to constrain the contents of your collection to conform to a known format. If you don’t, then you tend to end up needing to write defensive code to check and confirm the structure of your data as it <em>comes out</em> of the database, instead of when it <em>goes into</em> the database. As in most things, you tend to <em>read data more often than you write it</em>, and so it’s usually easier, and less buggy to use a schema when writing.</p> <p>In Meteor, the pre-eminent schema package is <a href=\"https://atmospherejs.com/aldeed/simple-schema\" target=\"_blank\" rel=\"external\">aldeed:simple-schema</a>. It’s an expressive, MongoDB based schema that’s used to insert and update documents. Another alternative is <a href=\"https://atmospherejs.com/jagi/astronomy\" target=\"_blank\" rel=\"external\">jagi:astronomy</a> which is a full Object Model (OM) layer offering schema definition, server/client side validators, object methods and event handlers.</p> <p>To write a schema using <code>simple-schema</code>, you can simply create a new instance of the <code>SimpleSchema</code> class:</p> <pre class=\"highlight js\" data-language=\"js\">Lists.schema = new SimpleSchema({\n  name: {type: String},\n  incompleteCount: {type: Number, defaultValue: 0},\n  userId: {type: String, regEx: SimpleSchema.RegEx.Id, optional: true}\n});\n</pre> <p>This example from the Todos app defines a schema with a few simple rules:</p> <ol> <li>We specify that the <code>name</code> field of a list is required and must be a string.</li> <li>We specify the <code>incompleteCount</code> is a number, which on insertion is set to <code>0</code> if not otherwise specified.</li> <li>We specify that the <code>userId</code>, which is optional, must be a string that looks like the ID of a user document.</li> </ol> <p>We attach the schema to the namespace of <code>Lists</code> directly, which allows us to check objects against this schema directly whenever we want, such as in a form or <a href=\"methods\">Method</a>. In the <a href=\"#schemas-on-write\">next section</a> we’ll see how to use this schema automatically when writing to the collection.</p> <p>You can see that with relatively little code we’ve managed to restrict the format of a list significantly. You can read more about more complex things that can be done with schemas in the <a href=\"http://atmospherejs.com/aldeed/simple-schema\" target=\"_blank\" rel=\"external\">Simple Schema docs</a>.</p> <h3 id=\"validating-schemas\">Validating against a schema</h3> <p>Now we have a schema, how do we use it?</p> <p>It’s pretty straightforward to validate a document with a schema. We can write:</p> <pre class=\"highlight js\" data-language=\"js\">const list = {\n  name: 'My list',\n  incompleteCount: 3\n};\n\nLists.schema.validate(list);\n</pre> <p>In this case, as the list is valid according to the schema, the <code>validate()</code> line will run without problems. If however, we wrote:</p> <pre class=\"highlight js\" data-language=\"js\">const list = {\n  name: 'My list',\n  incompleteCount: 3,\n  madeUpField: 'this should not be here'\n};\n\nLists.schema.validate(list);\n</pre> <p>Then the <code>validate()</code> call will throw a <code>ValidationError</code> which contains details about what is wrong with the <code>list</code> document.</p> <h3 id=\"validation-error\">The <code>ValidationError</code>\n</h3> <p>What is a <a href=\"https://github.com/meteor/validation-error/\" target=\"_blank\" rel=\"external\"><code>ValidationError</code></a>? It’s a special error that is used in Meteor to indicate a user-input based error in modifying a collection. Typically, the details on a <code>ValidationError</code> are used to mark up a form with information about what inputs don’t match the schema. In the <a href=\"methods#validation-error\">methods article</a>, we’ll see more about how this works.</p> <h2 id=\"schema-design\">Designing your data schema</h2> <p>Now that you are familiar with the basic API of Simple Schema, it’s worth considering a few of the constraints of the Meteor data system that can influence the design of your data schema. Although generally speaking you can build a Meteor data schema much like any MongoDB data schema, there are some important details to keep in mind.</p> <p>The most important consideration is related to the way DDP, Meteor’s data loading protocol, communicates documents over the wire. The key thing to realize is that DDP sends changes to documents at the level of top-level document <em>fields</em>. What this means is that if you have large and complex subfields on document that change often, DDP can send unnecessary changes over the wire.</p> <p>For instance, in “pure” MongoDB you might design the schema so that each list document had a field called <code>todos</code> which was an array of todo items:</p> <pre class=\"highlight js\" data-language=\"js\">Lists.schema = new SimpleSchema({\n  name: {type: String},\n  todos: {type: [Object]}\n});\n</pre> <p>The issue with this schema is that due to the DDP behavior just mentioned, each change to <em>any</em> todo item in a list will require sending the <em>entire</em> set of todos for that list over the network. This is because DDP has no concept of “change the <code>text</code> field of the 3rd item in the field called <code>todos</code>“, simply “change the field called <code>todos</code> to a totally new array”.</p> <h3 id=\"denormalization\">Denormalization and multiple collections</h3> <p>The implication of the above is that we need to create more collections to contain sub-documents. In the case of the Todos application, we need both a <code>Lists</code> collection and a <code>Todos</code> collection to contain each list’s todo items. Consequently we need to do some things that you’d typically associate with a SQL database, like using foreign keys (<code>todo.listId</code>) to associate one document with another.</p> <p>In Meteor, it’s often less of a problem doing this than it would be in a typical MongoDB application, as it’s easy to publish overlapping sets of documents (we might need one set of users to render one screen of our app, and an intersecting set for another), which may stay on the client as we move around the application. So in that scenario there is an advantage to separating the subdocuments from the parent.</p> <p>However, given that MongoDB prior to version 3.2 doesn’t support queries over multiple collections (“joins”), we typically end up having to denormalize some data back onto the parent collection. Denormalization is the practice of storing the same piece of information in the database multiple times (as opposed to a non-redundant “normal” form). MongoDB is a database where denormalizing is encouraged, and thus optimized for this practice.</p> <p>In the case of the Todos application, as we want to display the number of unfinished todos next to each list, we need to denormalize <code>list.incompleteTodoCount</code>. This is an inconvenience but typically reasonably easy to do as we’ll see in the section on <a href=\"#abstracting-denormalizers\">abstracting denormalizers</a> below.</p> <p>Another denormalization that this architecture sometimes requires can be from the parent document onto sub-documents. For instance, in Todos, as we enforce privacy of the todo lists via the <code>list.userId</code> attribute, but we publish the todos separately, it might make sense to denormalize <code>todo.userId</code> also. To do this, we’d need to be careful to take the <code>userId</code> from the list when creating the todo, and updating all relevant todos whenever a list’s <code>userId</code> changed.</p> <h3 id=\"designing-for-future\">Designing for the future</h3> <p>An application, especially a web application, is rarely finished, and it’s useful to consider potential future changes when designing your data schema. As in most things, it’s rarely a good idea to add fields before you actually need them (often what you anticipate doesn’t actually end up happening, after all).</p> <p>However, it’s a good idea to think ahead to how the schema may change over time. For instance, you may have a list of strings on a document (perhaps a set of tags). Although it’s tempting to leave them as a subfield on the document (assuming they don’t change much), if there’s a good chance that they’ll end up becoming more complicated in the future (perhaps tags will have a creator, or subtags later on?), then it might be easier in the long run to make a separate collection from the beginning.</p> <p>The amount of foresight you bake into your schema design will depend on your app’s individual constraints, and will need to be a judgement call on your part.</p> <h3 id=\"schemas-on-write\">Using schemas on write</h3> <p>Although there are a variety of ways that you can run data through a Simple Schema before sending it to your collection (for instance you could check a schema in every method call), the simplest and most reliable is to use the <a href=\"https://atmospherejs.com/aldeed/collection2\" target=\"_blank\" rel=\"external\"><code>aldeed:collection2</code></a> package to run every mutator (<code>insert/update/upsert</code> call) through the schema.</p> <p>To do so, we use <code>attachSchema()</code>:</p> <pre class=\"highlight js\" data-language=\"js\">Lists.attachSchema(Lists.schema);\n</pre> <p>What this means is that now every time we call <code>Lists.insert()</code>, <code>Lists.update()</code>, <code>Lists.upsert()</code>, first our document or modifier will be automatically checked against the schema (in subtly different ways depending on the exact mutator).</p> <h3 id=\"default-value\">\n<code>defaultValue</code> and data cleaning</h3> <p>One thing that Collection2 does is <a href=\"https://github.com/aldeed/meteor-simple-schema#cleaning-data\" target=\"_blank\" rel=\"external\">“clean” the data</a> before sending it to the database. This includes but is not limited to:</p> <ol> <li>Coercing types - converting strings to numbers</li> <li>Removing attributes not in the schema</li> <li>Assigning default values based on the <code>defaultValue</code> in the schema definition</li> </ol> <p>However, sometimes it’s useful to do more complex initialization to documents before inserting them into collections. For instance, in the Todos app, we want to set the name of new lists to be <code>List X</code> where <code>X</code> is the next available unique letter.</p> <p>To do so, we can subclass <code>Mongo.Collection</code> and write our own <code>insert()</code> method:</p> <pre class=\"highlight js\" data-language=\"js\">class ListsCollection extends Mongo.Collection {\n  insert(list, callback) {\n    if (!list.name) {\n      let nextLetter = 'A';\n      list.name = `List ${nextLetter}`;\n\n      while (!!this.findOne({name: list.name})) {\n        // not going to be too smart here, can go past Z\n        nextLetter = String.fromCharCode(nextLetter.charCodeAt(0) + 1);\n        list.name = `List ${nextLetter}`;\n      }\n    }\n\n    // Call the original `insert` method, which will validate\n    // against the schema\n    return super.insert(list, callback);\n  }\n}\n\nLists = new ListsCollection('Lists');\n</pre> <h3 id=\"hooks\">Hooks on insert/update/remove</h3> <p>The technique above can also be used to provide a location to “hook” extra functionality into the collection. For instance, when removing a list, we <em>always</em> want to remove all of its todos at the same time.</p> <p>We can use a subclass for this case as well, overriding the <code>remove()</code> method:</p> <pre class=\"highlight js\" data-language=\"js\">class ListsCollection extends Mongo.Collection {\n  // ...\n  remove(selector, callback) {\n    Package.todos.Todos.remove({listId: selector});\n    return super.remove(selector, callback);\n  }\n}\n</pre> <p>This technique has a few disadvantages:</p> <ol> <li>Mutators can get very long when you want to hook in multiple times.</li> <li>Sometimes a single piece of functionality can be spread over multiple mutators.</li> <li>It can be a challenge to write a hook in a completely general way (that covers every possible selector and modifier), and it may not be necessary for your application (because perhaps you only ever call that mutator in one way).</li> </ol> <p>A way to deal with points 1. and 2. is to separate out the set of hooks into their own module, and simply use the mutator as a point to call out to that module in a sensible way. We’ll see an example of that <a href=\"#abstracting-denormalizers\">below</a>.</p> <p>Point 3. can usually be resolved by placing the hook in the <em>Method</em> that calls the mutator, rather than the hook itself. Although this is an imperfect compromise (as we need to be careful if we ever add another Method that calls that mutator in the future), it is better than writing a bunch of code that is never actually called (which is guaranteed to not work!), or giving the impression that your hook is more general that it actually is.</p> <h3 id=\"abstracting-denormalizers\">Abstracting denormalizers</h3> <p>Denormalization may need to happen on various mutators of several collections. Therefore, it’s sensible to define the denormalization logic in one place, and hook it into each mutator with one line of code. The advantage of this approach is that the denormalization logic is one place rather than spread over many files, but you can still examine the code for each collection and fully understand what happens on each update.</p> <p>In the Todos example app, we build a <code>incompleteCountDenormalizer</code> to abstract the counting of incomplete todos on the lists. This code needs to run whenever a todo item is inserted, updated (checked or unchecked), or removed. The code looks like:</p> <pre class=\"highlight js\" data-language=\"js\">const incompleteCountDenormalizer = {\n  _updateList(listId) {\n    // Recalculate the correct incomplete count direct from MongoDB\n    const incompleteCount = Todos.find({\n      listId,\n      checked: false\n    }).count();\n\n    Lists.update(listId, {$set: {incompleteCount}});\n  },\n  afterInsertTodo(todo) {\n    this._updateList(todo.listId);\n  },\n  afterUpdateTodo(selector, modifier) {\n    // We only support very limited operations on todos\n    check(modifier, {$set: Object});\n\n    // We can only deal with $set modifiers, but that's all we do in this app\n    if (_.has(modifier.$set, 'checked')) {\n      Todos.find(selector, {fields: {listId: 1}}).forEach(todo =&gt; {\n        this._updateList(todo.listId);\n      });\n    }\n  },\n  // Here we need to take the list of todos being removed, selected *before* the update\n  // because otherwise we can't figure out the relevant list id(s) (if the todo has been deleted)\n  afterRemoveTodos(todos) {\n    todos.forEach(todo =&gt; this._updateList(todo.listId));\n  }\n};\n</pre> <p>We are then able to wire in the denormalizer into the mutations of the <code>Todos</code> collection like so:</p> <pre class=\"highlight js\" data-language=\"js\">class TodosCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.createdAt = doc.createdAt || new Date();\n    const result = super.insert(doc, callback);\n    incompleteCountDenormalizer.afterInsertTodo(doc);\n    return result;\n  }\n}\n</pre> <p>Note that we only handled the mutators we actually use in the application—we don’t deal with all possible ways the todo count on a list could change. For example, if you changed the <code>listId</code> on a todo item, it would need to change the <code>incompleteCount</code> of <em>two</em> lists. However, since our application doesn’t do this, we don’t handle it in the denormalizer.</p> <p>Dealing with every possible MongoDB operator is difficult to get right, as MongoDB has a rich modifier language. Instead we focus on just dealing with the modifiers we know we’ll see in our app. If this gets too tricky, then moving the hooks for the logic into the Methods that actually make the relevant modifications could be sensible (although you need to be diligent to ensure you do it in <em>all</em> the relevant places, both now and as the app changes in the future).</p> <p>It could make sense for packages to exist to completely abstract some common denormalization techniques and actually attempt to deal with all possible modifications. If you write such a package, please let us know!</p> <h2 id=\"migrations\">Migrating to a new schema</h2> <p>As we discussed above, trying to predict all future requirements of your data schema ahead of time is impossible. Inevitably, as a project matures, there will come a time when you need to change the schema of the database. You need to be careful about how you make the migration to the new schema to make sure your app works smoothly during and after the migration.</p> <h3 id=\"writing-migrations\">Writing migrations</h3> <p>A useful package for writing migrations is <a href=\"https://atmospherejs.com/percolate/migrations\" target=\"_blank\" rel=\"external\"><code>percolate:migrations</code></a>, which provides a nice framework for switching between different versions of your schema.</p> <p>Suppose, as an example, that we wanted to add a <code>list.todoCount</code> field, and ensure that it was set for all existing lists. Then we might write the following in server-only code (e.g. <code>/server/migrations.js</code>):</p> <pre class=\"highlight js\" data-language=\"js\">Migrations.add({\n  version: 1,\n  up() {\n    Lists.find({todoCount: {$exists: false}}).forEach(list =&gt; {\n      const todoCount = Todos.find({listId: list._id}).count();\n      Lists.update(list._id, {$set: {todoCount}});\n    });\n  },\n  down() {\n    Lists.update({}, {$unset: {todoCount: true}});\n  }\n});\n</pre> <p>This migration, which is sequenced to be the first migration to run over the database, will, when called, bring each list up to date with the current todo count.</p> <p>To find out more about the API of the Migrations package, refer to <a href=\"https://atmospherejs.com/percolate/migrations\" target=\"_blank\" rel=\"external\">its documentation</a>.</p> <h3 id=\"bulk-data-changes\">Bulk changes</h3> <p>If your migration needs to change a lot of data, and especially if you need to stop your app server while it’s running, it may be a good idea to use a <a href=\"https://docs.mongodb.org/v3.0/core/bulk-write-operations/\" target=\"_blank\" rel=\"external\">MongoDB Bulk Operation</a>.</p> <p>The advantage of a bulk operation is that it only requires a single round trip to MongoDB for the write, which usually means it is a <em>lot</em> faster. The downside is that if your migration is complex (which it usually is if you can’t just do an <code>.update(.., .., {multi: true})</code>), it can take a significant amount of time to prepare the bulk update.</p> <p>What this means is if users are accessing the site whilst the update is being prepared, it will likely go out of date! Also, a bulk update will lock the entire collection while it is being applied, which can cause a significant blip in your user experience if it takes a while. For these reason, you often need to stop your server and let your users know you are performing maintenance while the update is happening.</p> <p>We could write our above migration like so (note that you must be on MongoDB 2.6 or later for the bulk update operations to exist). We can access the native MongoDB API via <a href=\"http://docs.meteor.com/api/collections.html#Mongo-Collection-rawCollection\" target=\"_blank\" rel=\"external\"><code>Collection#rawCollection()</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">Migrations.add({\n  version: 1,\n  up() {\n    // This is how to get access to the raw MongoDB node collection that the Meteor server collection wraps\n    const batch = Lists.rawCollection().initializeUnorderedBulkOp();\n    Lists.find({todoCount: {$exists: false}}).forEach(list =&gt; {\n      const todoCount = Todos.find({listId: list._id}).count();\n      // We have to use pure MongoDB syntax here, thus the `{_id: X}`\n      batch.find({_id: list._id}).updateOne({$set: {todoCount}});\n    });\n\n    // We need to wrap the async function to get a synchronous API that migrations expects\n    const execute = Meteor.wrapAsync(batch.execute, batch);\n    return execute();\n  },\n  down() {\n    Lists.update({}, {$unset: {todoCount: true}});\n  }\n});\n</pre> <p>Note that we could make this migration faster by using an <a href=\"https://docs.mongodb.org/v2.6/aggregation/\" target=\"_blank\" rel=\"external\">Aggregation</a> to gather the initial set of todo counts.</p> <h3 id=\"running-migrations\">Running migrations</h3> <p>To run a migration against your development database, it’s easiest to use the Meteor shell:</p> <pre class=\"highlight js\" data-language=\"js\">// After running `meteor shell` on the command line:\nMigrations.migrateTo('latest');\n</pre> <p>If the migration logs anything to the console, you’ll see it in the terminal window that is running the Meteor server.</p> <p>To run a migration against your production database, run your app locally in production mode (with production settings and environment variables, including database settings), and use the Meteor shell in the same way. What this does is run the <code>up()</code> function of all outstanding migrations, against your production database. In our case, it should ensure all lists have a <code>todoCount</code> field set.</p> <p>A good way to do the above is to spin up a virtual machine close to your database that has Meteor installed and SSH access (a special EC2 instance that you start and stop for the purpose is a reasonable option), and running the command after shelling into it. That way any latencies between your machine and the database will be eliminated, but you still can be very careful about how the migration is run.</p> <p><strong>Note that you should always take a database backup before running any migration!</strong></p> <h3 id=\"breaking-changes\">Breaking schema changes</h3> <p>Sometimes when we change the schema of an application, we do so in a breaking way – so that the old schema doesn’t work properly with the new code base. For instance, if we had some UI code that heavily relied on all lists having a <code>todoCount</code> set, there would be a period, before the migration runs, in which the UI of our app would be broken after we deployed.</p> <p>The simple way to work around the problem is to take the application down for the period in between deployment and completing the migration. This is far from ideal, especially considering some migrations can take hours to run (although using <a href=\"#bulk-data-changes\">Bulk Updates</a> probably helps a lot here).</p> <p>A better approach is a multi-stage deployment. The basic idea is that:</p> <ol> <li>Deploy a version of your application that can handle both the old and the new schema. In our case, it’d be code that doesn’t expect the <code>todoCount</code> to be there, but which correctly updates it when new todos are created.</li> <li>Run the migration. At this point you should be confident that all lists have a <code>todoCount</code>.</li> <li>Deploy the new code that relies on the new schema and no longer knows how to deal with the old schema. Now we are safe to rely on <code>list.todoCount</code> in our UI.</li> </ol> <p>Another thing to be aware of, especially with such multi-stage deploys, is that being prepared to rollback is important! For this reason, the migrations package allows you to specify a <code>down()</code> function and call <code>Migrations.migrateTo(x)</code> to migrate <em>back</em> to version <code>x</code>.</p> <p>So if we wanted to reverse our migration above, we’d run<br><pre class=\"highlight js\" data-language=\"js\">// The \"0\" migration is the unmigrated (before the first migration) state\nMigrations.migrateTo(0);\n</pre></p> <p>If you find you need to roll your code version back, you’ll need to be careful about the data, and step carefully through your deployment steps in reverse.</p> <h3 id=\"migration-caveats\">Caveats</h3> <p>Some aspects of the migration strategy outlined above are possibly not the most ideal way to do things (although perhaps appropriate in many situations). Here are some other things to be aware of:</p> <ol> <li>\n<p>Usually it is better to not rely on your application code in migrations (because the application will change over time, and the migrations should not). For instance, having your migrations pass through your Collection2 collections (and thus check schemas, set autovalues etc) is likely to break them over time as your schemas change over time.</p> <p>One way to avoid this problem is simply to not run old migrations on your database. This is a little bit limiting but can be made to work.</p> </li> <li>\n<p>Running the migration on your local machine will probably make it take a lot longer as your machine isn’t as close to the production database as it could be.</p> </li> </ol> <p>Deploying a special “migration application” to the same hardware as your real application is probably the best way to solve the above issues. It’d be amazing if such an application kept track of which migrations ran when, with logs and provided a UI to examine and run them. Perhaps a boilerplate application to do so could be built (if you do so, please let us know and we’ll link to it here!).</p> <h2 id=\"associations\">Associations between collections</h2> <p>As we discussed earlier, it’s very common in Meteor applications to have associations between documents in different collections. Consequently, it’s also very common to need to write queries fetching related documents once you have a document you are interested in (for instance all the todos that are in a single list).</p> <p>To make this easier, we can attach functions to the prototype of the documents that belong to a given collection, to give us “methods” on the documents (in the object oriented sense). We can then use these methods to create new queries to find related documents.</p> <h3 id=\"collection-helpers\">Collection helpers</h3> <p>We can use the <a href=\"https://atmospherejs.com/dburles/collection-helpers\" target=\"_blank\" rel=\"external\"><code>dburles:collection-helpers</code></a> package to easily attach such methods (or “helpers”) to documents. For instance:</p> <pre class=\"highlight js\" data-language=\"js\">Lists.helpers({\n  // A list is considered to be private if it has a userId set\n  isPrivate() {\n    return !!this.userId;\n  }\n});\n</pre> <p>Once we’ve attached this helper to the <code>Lists</code> collection, every time we fetch a list from the database (on the client or server), it will have a <code>.isPrivate()</code> function available:</p> <pre class=\"highlight js\" data-language=\"js\">const list = Lists.findOne();\nif (list.isPrivate()) {\n  console.log('The first list is private!');\n}\n</pre> <h3 id=\"association-helpers\">Association helpers</h3> <p>Now we can attach helpers to documents, it’s simple to define a helper that fetches related documents</p> <pre class=\"highlight js\" data-language=\"js\">Lists.helpers({\n  todos() {\n    return Todos.find({listId: this._id}, {sort: {createdAt: -1}});\n  }\n});\n</pre> <p>Now we can easily find all the todos for a list:</p> <pre class=\"highlight js\" data-language=\"js\">const list = Lists.findOne();\nconsole.log(`The first list has ${list.todos().count()} todos`);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/collections.html\" class=\"_attribution-link\">https://guide.meteor.com/collections.html</a>\n  </p>\n</div>\n","react":"<h1 class=\"title-page\">React</h1> <div class=\"subtitle-page\">How to use React, Facebook's frontend rendering library, with Meteor.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>What React is, and why you would consider using it with Meteor.</li> <li>How to install React in your Meteor application, and how to use it correctly.</li> <li>How to integrate React with Meteor’s realtime data layer.</li> <li>How to route in a React/Meteor application.</li> </ol> <h2 id=\"introduction\">Introduction</h2> <p><a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">React</a> is a JavaScript library for building reactive user interfaces developed and distributed by the Facebook team. React is one of the three rendering libraries supported by Meteor; the alternatives are <a href=\"blaze\">Blaze</a> and <a href=\"angular\">Angular</a>. <a href=\"ui-ux#view-layers\">Here’s a comparison</a> of all three.</p> <p>React has a vibrant and growing ecosystem and is used widely in production in a variety of combinations with different frameworks.</p> <p>To learn more about using React in general and coming up to speed with the library, you should check out the <a href=\"https://facebook.github.io/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">React documentation</a>, especially the <a href=\"https://facebook.github.io/react/docs/thinking-in-react.html\" target=\"_blank\" rel=\"external\">thinking in React</a> post, which explains the React philosophy well.</p> <p>To get started with React in Meteor, you can follow along the <a href=\"https://www.meteor.com/tutorials/react/creating-an-app\" target=\"_blank\" rel=\"external\">React tutorial</a>. To see an example of a more complete Meteor application built with React, check out the <a href=\"https://github.com/meteor/todos/tree/react\" target=\"_blank\" rel=\"external\"><code>react</code> branch</a> of the Todos example application. Where applicable, code examples in this article will reference that app.</p> <h3 id=\"using-with-meteor\">Installing and using React</h3> <p>To install React in Meteor 1.3 you should simply add it as an npm dependency:</p> <pre class=\"highlight sh\" data-language=\"sh\">npm install --save react react-dom\n</pre> <p>This will install <code>react</code> into your project and allow you to access it within your files with <code>import React from 'react'</code>. Most React code is written in <a href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">JSX</a>, which you can use by <a href=\"http://guide.meteor.com/build-tool.html#react-jsx\">default in Meteor</a> if you include the <code>ecmascript</code> package (which is installed in all Meteor apps by default).</p> <pre class=\"highlight\" data-language=\"highlight\">import React from 'react';\n\nexport default class HelloWorld extends React.Component {\n  render() {\n    return (\n      &lt;h1&gt;Hello World&lt;/h1&gt;\n    );\n  }\n}\n</pre> <p>You can render a component heirarchy to the DOM using the <code>react-dom</code> package:</p> <pre class=\"highlight\" data-language=\"highlight\">import { Meteor } from 'meteor/meteor';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport HelloWorld from './HelloWorld.js';\n\nMeteor.startup(() =&gt; {\n  render(&lt;HelloWorld /&gt;, document.getElementById('app'));\n});\n</pre> <p>You need to include a <code>&lt;div id=\"app\"&gt;&lt;/div&gt;</code> in your body’s HTML somewhere of course.</p> <p>Every new Meteor app includes Blaze, Meteor’s default templating system, by default. If you are not planning on <a href=\"#using-with-blaze\">using React and Blaze together</a>, you can remove Blaze from your project by running:</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor remove blaze-html-templates\nmeteor add static-html\n</pre> <h3 id=\"using-third-party-npm-packages\">Using 3rd party packages</h3> <p>If you’d like to use a third party React component that has been <a href=\"https://www.npmjs.com/search?q=react\" target=\"_blank\" rel=\"external\">published on npm</a>, you can <code>npm install --save</code> them and <code>import</code> from within your app.</p> <p>For example, to use the excellent <a href=\"http://griddlegriddle.github.io/Griddle/\" target=\"_blank\" rel=\"external\">Griddle</a> React package for making tables, you could run</p> <pre class=\"highlight sh\" data-language=\"sh\">npm install --save griddle-react\n</pre> <p>Then, like with any other <a href=\"https://guide.meteor.com/using-packages.html#npm\">npm package</a>, you can import the component in your application:</p> <pre class=\"highlight\" data-language=\"highlight\">import React from 'react';\nimport Griddle from 'griddle-react';\n\nexport default class MyGriddler extends React.Component {\n  render() {\n    return (&lt;Griddle ..../&gt;);\n  }\n}\n</pre> <p>If you are looking to write an Atmosphere package that wraps such a component, you need to take some <a href=\"#atmosphere-packages\">further steps</a>.</p>  <h3 id=\"react-in-blaze\">React Components in Blaze</h3> <p>If you’d like to use React within a larger app built with <a href=\"#blaze.html\">Blaze</a> (which is a good strategy if you’d like to incrementally migrate an app from Blaze to React), you can use the <a href=\"https://atmospherejs.com/meteor/react-template-helper\" target=\"_blank\" rel=\"external\"><code>react-template-helper</code></a> component which renders a react component inside a Blaze template. First run <code>meteor add react-template-helper</code>, then use the <code>React</code> helper in your template:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"userDisplay\"&gt;\n  &lt;div&gt;Hello, {{username}}&lt;/div&gt;\n  &lt;div&gt;{{&gt; React component=UserAvatar userId=_id}}&lt;/div&gt;\n&lt;/template&gt;\n</pre> <p>You will need to pass in the component class with a helper:</p> <pre class=\"highlight js\" data-language=\"js\">import { Template } from 'meteor/templating';\n\nimport './userDisplay.html';\nimport UserAvatar from './UserAvatar.js';\n\nTemplate.userDisplay.helpers({\n  UserAvatar() {\n    return UserAvatar;\n  }\n})\n</pre> <p>The <code>component</code> argument is the React component to include, which should be passed in with a helper.</p> <p>Every other argument is passed as a prop to the component when it is rendered.</p> <p>Note that there a few caveats:</p> <ul> <li>\n<p>React components must be the only thing in the wrapper element. Due to a limitation of React (see facebook/react <a href=\"https://github.com/facebook/react/issues/1970\" target=\"_blank\" rel=\"external\">#1970</a>, <a href=\"https://github.com/facebook/react/issues/2484\" target=\"_blank\" rel=\"external\">#2484</a>), a React component must be rendered as the only child of its parent node, meaning it cannot have any siblings.</p> </li> <li>\n<p>This means a React component also can’t be the only thing in a Blaze template, because it’s impossible to tell where the template will be used.</p> </li> </ul> <h4 id=\"passing-callbacks-from-blaze\">Passing callbacks to a React component</h4> <p>To pass a callback to a React component that you are including with this helper, simply make a <a href=\"http://guide.meteor.com/blaze.html#pass-callbacks\">template helper that returns a function</a>, and pass it in as a prop, like so:</p> <pre class=\"highlight js\" data-language=\"js\">Template.userDisplay.helpers({\n  onClick() {\n    const instance = Template.instance();\n\n    // Return a function from this helper, where the template instance is in\n    // a closure\n    return () =&gt; {\n      instance.hasBeenClicked.set(true)\n    }\n  }\n});\n</pre> <p>To use it in Blaze:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"userDisplay\"&gt;\n  &lt;div&gt;\n    {{&gt; React component=UserAvatar userId=_id onClick=onClick}}\n  &lt;/div&gt;\n&lt;/template&gt;\n</pre> <h3 id=\"blaze-in-react\">Blaze Templates in React</h3> <p>Just like we can use React components in Blaze templates, we can also use Blaze templates in React components. This is similarly useful for a gradual transition strategy; but more importantly, it allows us to continue to use the multitude of Atmosphere packages built for Blaze in our React projects, as well as core packages like <code>accounts-ui</code>.</p> <p>One easy way to do this is with the <a href=\"https://atmospherejs.com/gadicc/blaze-react-component\" target=\"_blank\" rel=\"external\"><code>gadicc:blaze-react-component</code></a> package. First run <code>meteor add gadicc:blaze-react-component</code>, then import and use it in your components as follows:</p> <pre class=\"highlight\" data-language=\"highlight\">import React from 'react';\nimport Blaze from 'meteor/gadicc:blaze-react-component';\n\nconst App = () =&gt; (\n  &lt;div&gt;\n    &lt;Blaze template=\"itemsList\" items={items} /&gt;\n  &lt;/div&gt;\n);\n</pre> <p>The <code>&lt;Blaze template=\"itemsList\" items={items} /&gt;</code> line is the same as if you had written <code>{{&gt; itemsList items=items}}</code> inside of a Blaze template. For other options and further information, see the package’s <a href=\"https://github.com/gadicc/meteor-blaze-react-component\" target=\"_blank\" rel=\"external\">project page</a>.</p> <h2 id=\"data\">Using Meteor’s data system</h2> <p>React is a front-end rendering library and as such doesn’t concern itself with how data gets into and out of components. On the other hand, Meteor has strong opinions about data! Meteor operates in terms of <a href=\"data-loading\">publications</a> and <a href=\"methods\">methods</a>, used to subscribe to and modify the data in your application.</p> <p>To integrate the two systems, we’ve developed a <a href=\"https://atmospherejs.com/meteor/react-meteor-data\" target=\"_blank\" rel=\"external\"><code>react-meteor-data</code></a> package which allows React components to respond to data changes via Meteor’s <a href=\"https://www.meteor.com/tracker\" target=\"_blank\" rel=\"external\">Tracker</a> reactivity system.</p> <h3 id=\"using-createContainer\">Using <code>createContainer</code>\n</h3> <p>Once you’ve run <code>meteor add react-meteor-data</code>, you’ll be able to import the <code>createContainer</code> function, which allows you to create a <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.by86emv9b\" target=\"_blank\" rel=\"external\">container component</a> which provides data to your presentational components.</p> <blockquote> <p>Note that “container components” are analogous to the “smart components” and “presentational components” to the “reusable components” in the pattern we document in the <a href=\"http://guide.meteor.com/ui-ux.html#components\">UI/UX article</a>, if you’d like to read more about how this philosophy relates to Meteor.</p> </blockquote> <p>For example, in the Todos example app, we have a <code>ListPage</code> component, which renders list metadata and the tasks in the list. In order to do so, it needs to <a href=\"data-loading#subscriptions\">subscribe</a> to the <code>todos.inList</code> publication, check that subscription’s readiness, then fetch the list of todos from the <code>Todos</code> collection.</p> <p>It also needs to be responsive to reactive changes in the state of those actions (for instance if a todo changes due to the action of another user). All this data loading complexity is a typical use-case for a container-presentational component split, and the <code>createContainer()</code> function makes it simple to do this.</p> <p>We simply define the <code>ListPage</code> component as a presentational component that expects its data to be passed in using React <code>props</code>:</p> <pre class=\"highlight\" data-language=\"highlight\">import React from 'react';\n\nexport default class ListPage extends React.Component {\n  ...\n}\n\nListPage.propTypes = {\n  list: React.PropTypes.object,\n  todos: React.PropTypes.array,\n  loading: React.PropTypes.bool,\n  listExists: React.PropTypes.bool,\n};\n</pre> <p>Then we create a <code>ListPageContainer</code> container component which wraps it and provides a data source:</p> <pre class=\"highlight js\" data-language=\"js\">import { Meteor } from 'meteor/meteor';\nimport { Lists } from '../../api/lists/lists.js';\nimport { createContainer } from 'meteor/react-meteor-data';\nimport ListPage from '../pages/ListPage.js';\n\nexport default ListPageContainer = createContainer(({ params }) =&gt; {\n  const { id } = params;\n  const todosHandle = Meteor.subscribe('todos.inList', id);\n  const loading = !todosHandle.ready();\n  const list = Lists.findOne(id);\n  const listExists = !loading &amp;&amp; !!list;\n  return {\n    loading,\n    list,\n    listExists,\n    todos: listExists ? list.todos().fetch() : [],\n  };\n}, ListPage);\n</pre> <p>It’s a good habit to name your container exactly like the component that it wraps, with the word “Container” tacked onto the end. This way, when you’re attempting to track down issues in your code, it makes it much easier to locate the appropriate files/classes.</p> <p>The container component created by <code>createContainer()</code> will reactively rerender the wrapped component in response to any changes to <a href=\"https://atmospherejs.com/meteor/tracker\" target=\"_blank\" rel=\"external\">reactive data sources</a> accessed from inside the function provided to it.</p> <p>Although this <code>ListPageContainer</code> container is intended to be instantiated by the React Router (which passes in the props automatically), if we did ever want to create one manually, we would need to pass in the props to the container component (which then get passed into our data function above):</p> <pre class=\"highlight\" data-language=\"highlight\">&lt;ListPageContainer params={{id: '7'}}/&gt;\n</pre> <h3 id=\"preventing-rerenders\">Preventing re-renders</h3> <p>Sometimes changes in your data can trigger re-computations which you know won’t affect your UI. Although React is in general quite efficient in the face of unnecessary re-renders, if you need to control re-rendering, the above pattern allows you to easily use React’s <a href=\"https://facebook.github.io/react/docs/component-specs.html#updating-shouldcomponentupdate\" target=\"_blank\" rel=\"external\"><code>shouldComponentUpdate</code></a> on the presentational component to avoid re-renders.</p> <h2 id=\"routing\">Routing</h2> <p>There are two main options for routing with Meteor and React. Either way, we recommend consulting our <a href=\"routing\">Routing article</a> for some general principles of routing in Meteor before writing your app.</p> <ul> <li>\n<p><a href=\"https://atmospherejs.com/kadira/flow-router\" target=\"_blank\" rel=\"external\"><code>kadira:flow-router</code></a> is a Meteor specific router that can be used both with React and Blaze. It is documented in detail in the <a href=\"routing\">Routing article</a>.</p> </li> <li>\n<p><a href=\"https://www.npmjs.com/package/react-router\" target=\"_blank\" rel=\"external\"><code>react-router</code></a> is a React-specific router very popular in the React community. It can also be used easily with Meteor.</p> </li> </ul> <h3 id=\"using-flow-router\">Flow Router</h3> <p>Using Flow Router with React is very similar to using it with Blaze. The only difference is that in your route actions, you should use the <a href=\"https://www.npmjs.com/package/react-mounter\" target=\"_blank\" rel=\"external\"><code>react-mounter</code></a> package to mount components with a layout. Once you <code>npm install --save react-mounter</code>, you can do the following:</p> <pre class=\"highlight js\" data-language=\"js\">import React from 'react';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport { mount } from 'react-mounter';\n\nimport AppContainer from '../../ui/containers/AppContainer.js';\nimport ListPageContainer from '../../ui/containers/ListPageContainer.js';\n\n\nFlowRouter.route('/lists/:_id', {\n  name: 'Lists.show',\n  action() {\n    mount(AppContainer, {\n      main: &lt;ListPageContainer/&gt;,\n    });\n  },\n});\n</pre> <p>Note that <code>react-mounter</code> automatically mounts the layout component on a <code>#react-root</code> node, which you can change by using the <code>withOptions()</code> function.</p> <p>In the below example, your <code>App</code> component would receive a <code>main</code> prop with a instantiated React Element to render:</p> <pre class=\"highlight js\" data-language=\"js\">const App = (props) =&gt; (\n  &lt;div&gt;\n    &lt;section id=\"menu\"&gt;&lt;..&gt;&lt;/section&gt;\n    {props.main}\n  &lt;/div&gt;\n);\n\nexport default AppContainer = createContainer(props =&gt; {\n  // props here will have `main`, passed from the router\n  // anything we return from this function will be *added* to it\n  return {\n    user: Meteor.user(),\n  };\n}, App);\n</pre> <h3 id=\"using-react-router\">React Router</h3> <p>Using React Router is also straightforward. Once you <code>npm install --save react-router</code>, you can simply export a list of nested routes as you would in any other React Router driven React application:</p> <pre class=\"highlight js\" data-language=\"js\">import React from 'react';\nimport { Router, Route, browserHistory } from 'react-router';\n\n// route components\nimport AppContainer from '../../ui/containers/AppContainer.js';\nimport ListPageContainer from '../../ui/containers/ListPageContainer.js';\nimport AuthPageSignIn from '../../ui/pages/AuthPageSignIn.js';\nimport AuthPageJoin from '../../ui/pages/AuthPageJoin.js';\nimport NotFoundPage from '../../ui/pages/NotFoundPage.js';\n\nexport const renderRoutes = () =&gt; (\n  &lt;Router history={browserHistory}&gt;\n    &lt;Route path=\"/\" component={AppContainer}&gt;\n      &lt;Route path=\"lists/:id\" component={ListPageContainer}/&gt;\n      &lt;Route path=\"signin\" component={AuthPageSignIn}/&gt;\n      &lt;Route path=\"join\" component={AuthPageJoin}/&gt;\n      &lt;Route path=\"*\" component={NotFoundPage}/&gt;\n    &lt;/Route&gt;\n  &lt;/Router&gt;\n);\n</pre> <p>With React Router, you’ll also need to explicity render the exported routes in a startup function:</p> <pre class=\"highlight js\" data-language=\"js\">import { Meteor } from 'meteor/meteor';\nimport { render } from 'react-dom';\nimport { renderRoutes } from '../imports/startup/client/routes.js';\n\nMeteor.startup(() =&gt; {\n  render(renderRoutes(), document.getElementById('app'));\n});\n</pre> <p>When using React Router in Meteor, you can follow roughly the <a href=\"routing\">same principles</a> as when using Flow Router, but you should also consider the idioms outlined in React Router’s own <a href=\"https://github.com/reactjs/react-router/blob/latest/docs/Introduction.md\" target=\"_blank\" rel=\"external\">documentation</a>.</p> <p>These include some notable differences like:</p> <ul> <li>React Router encourages you to couple your URL design and layout hierarchy in the route definition. Flow Router is more flexible, although it can involve much more boilerplate as a result.</li> <li>React Router embraces React-specific functionality like the use of <a href=\"https://facebook.github.io/react/docs/context.html\" target=\"_blank\" rel=\"external\">context</a>, although you can also explicitly pass your FlowRouter instance around in context if you’d like (in fact this is probably the best thing to do).</li> </ul> <h2 id=\"meteor-and-react\">Meteor and React</h2> <h3 id=\"atmosphere-packages\">Using React in Atmosphere Packages</h3> <p>If you are writing an Atmosphere package and want to depend on React or an npm package that itself depends on React, you can’t use <code>Npm.depends()</code> and <code>Npm.require()</code>, as this will result in <em>2</em> copies of React being installed into the application (and besides <code>Npm.require()</code> only works on the server).</p> <p>Instead, you need to ask your users to install the correct npm packages in the application itself. This will ensure that only one copy of React is shipped to the client and there are no version conflicts.</p> <p>In order to check that a user has installed the correct versions of npm packages, you can use the <a href=\"https://atmospherejs.com/tmeasday/check-npm-versions\" target=\"_blank\" rel=\"external\"><code>tmeasday:check-npm-versions</code></a> package to check dependency versions at runtime.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/react.html\" class=\"_attribution-link\">https://guide.meteor.com/react.html</a>\n  </p>\n</div>\n","methods":"<h1 class=\"title-page\">Methods</h1> <div class=\"subtitle-page\">How to use Methods, Meteor's remote procedure call system, to write to the database.</div>    <p>After reading this article, you’ll know:</p> <ol> <li>What Methods are in Meteor and how they work in detail.</li> <li>Best practices for defining and calling Methods.</li> <li>How to throw and handle errors with Methods.</li> <li>How to call a Method from a form.</li> </ol> <h2 id=\"what-is-a-method\">What is a Method?</h2> <p>Methods are Meteor’s remote procedure call (RPC) system, used to save user input events and data that come from the client. If you’re familiar with REST APIs or HTTP, you can think of them like POST requests to your server, but with many nice features optimized for building a modern web application. Later on in this article, we’ll go into detail about some of the benefits you get from Methods that you wouldn’t get from an HTTP endpoint.</p> <p>At its core, a Method is an API endpoint for your server; you can define a Method on the server and its counterpart on the client, then call it with some data, write to the database, and get the return value in a callback. Meteor Methods are also tightly integrated with the pub/sub and data loading systems of Meteor to allow for <a href=\"http://info.meteor.com/blog/optimistic-ui-with-meteor-latency-compensation\" target=\"_blank\" rel=\"external\">Optimistic UI</a> - the ability to simulate server-side actions on the client to make your app feel faster than it actually is.</p> <p>We’ll be referring to Meteor Methods with a capital M to differentiate them from class methods in JavaScript.</p> <h2 id=\"defining-and-calling\">Defining and calling Methods</h2> <h3 id=\"basic\">Basic Method</h3> <p>In a basic app, defining a Meteor Method is as simple as defining a function. In a complex app, you want a few extra features to make Methods more powerful and easily testable. First, we’re going to go over how to define a Method using the Meteor core API, and in a later section we’ll go over how to use a helpful wrapper package we’ve created to enable a more powerful Method workflow.</p> <h4 id=\"basic-defining\">Defining</h4> <p>Here’s how you can use the built-in <a href=\"http://docs.meteor.com/#/full/meteor_methods\" target=\"_blank\" rel=\"external\"><code>Meteor.methods</code> API</a> to define a Method. Note that Methods should always be defined in common code loaded on the client and the server to enable Optimistic UI. If you have some secret code in your Method, consult the <a href=\"security#secret-code\">Security article</a> for how to hide it from the client.</p> <p>This example uses the <code>aldeed:simple-schema</code> package, which is recommended in several other articles, to validate the Method arguments.</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.methods({\n  'todos.updateText'({ todoId, newText }) {\n    new SimpleSchema({\n      todoId: { type: String },\n      newText: { type: String }\n    }).validate({ todoId, newText });\n\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  }\n});\n</pre> <h4 id=\"basic-calling\">Calling</h4> <p>This Method is callable from the client and server using <a href=\"http://docs.meteor.com/#/full/meteor_call\" target=\"_blank\" rel=\"external\"><code>Meteor.call</code></a>. Note that you should only use a Method in the case where some code needs to be callable from the client; if you just want to modularize code that is only going to be called from the server, use a regular JavaScript function, not a Method.</p> <p>Here’s how you can call this Method from the client:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.call('todos.updateText', {\n  todoId: '12345',\n  newText: 'This is a todo item.'\n}, (err, res) =&gt; {\n  if (err) {\n    alert(err);\n  } else {\n    // success!\n  }\n});\n</pre> <p>If the Method throws an error, you get that in the first argument of the callback. If the Method succeeds, you get the result in the second argument and the first argument <code>err</code> will be <code>undefined</code>. For more information about errors, see the section below about error handling.</p> <h3 id=\"advanced-boilerplate\">Advanced Method boilerplate</h3> <p>Meteor Methods have several features which aren’t immediately obvious, but every complex app will need them at some point. These features were added incrementally over several years in a backwards-compatible fashion, so unlocking the full capabilities of Methods requires a good amount of boilerplate. In this article we will first show you all of the code you need to write for each feature, then the next section will talk about a Method wrapper package we have developed to make it easier.</p> <p>Here’s some of the functionality an ideal Method would have:</p> <ol> <li>Run validation code by itself without running the Method body.</li> <li>Easily override the Method for testing.</li> <li>Easily call the Method with a custom user ID, especially in tests (as recommended by the <a href=\"https://www.discovermeteor.com/blog/meteor-pattern-two-tiered-methods/\" target=\"_blank\" rel=\"external\">Discover Meteor two-tiered methods pattern</a>).</li> <li>Refer to the Method via JS module rather than a magic string.</li> <li>Get the Method simulation return value to get IDs of inserted documents.</li> <li>Avoid calling the server-side Method if the client-side validation failed, so we don’t waste server resources.</li> </ol> <h4 id=\"advanced-boilerplate-defining\">Defining</h4> <pre class=\"highlight js\" data-language=\"js\">export const updateText = {\n  name: 'todos.updateText',\n\n  // Factor out validation so that it can be run independently (1)\n  validate(args) {\n    new SimpleSchema({\n      todoId: { type: String },\n      newText: { type: String }\n    }).validate(args)\n  },\n\n  // Factor out Method body so that it can be called independently (3)\n  run({ todoId, newText }) {\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  },\n\n  // Call Method by referencing the JS object (4)\n  // Also, this lets us specify Meteor.apply options once in\n  // the Method implementation, rather than requiring the caller\n  // to specify it at the call site.\n  call(args, callback) {\n    const options = {\n      returnStubValue: true,     // (5)\n      throwStubExceptions: true  // (6)\n    }\n\n    Meteor.apply(this.name, [args], options, callback);\n  }\n};\n\n// Actually register the method with Meteor's DDP system\nMeteor.methods({\n  [updateText.name]: function (args) {\n    updateText.validate.call(this, args);\n    updateText.run.call(this, args);\n  }\n})\n</pre> <h4 id=\"advanced-boilerplate-calling\">Calling</h4> <p>Now calling the Method is as simple as calling a JavaScript function:</p> <pre class=\"highlight js\" data-language=\"js\">import { updateText } from './path/to/methods.js';\n\n// Call the Method\nupdateText.call({\n  todoId: '12345',\n  newText: 'This is a todo item.'\n}, (err, res) =&gt; {\n  if (err) {\n    alert(err);\n  } else {\n    // success!\n  }\n});\n\n// Call the validation only\nupdateText.validate({ wrong: 'args'});\n\n// Call the Method with custom userId in a test\nupdateText.run.call({ userId: 'abcd' }, {\n  todoId: '12345',\n  newText: 'This is a todo item.'\n});\n</pre> <p>As you can see, this approach to calling Methods results in a better development workflow - you can more easily deal with the different parts of the Method separately and test your code more easily without having to deal with Meteor internals. But this approach requires you to write a lot of boilerplate on the Method definition side.</p> <h3 id=\"validated-method\">Advanced Methods with mdg:validated-method</h3> <p>To alleviate some of the boilerplate that’s involved in correct Method definitions, we’ve published a wrapper package called <code>mdg:validated-method</code> that does most of this for you. Here’s the same Method as above, but defined with the package:</p> <pre class=\"highlight js\" data-language=\"js\">export const updateText = new ValidatedMethod({\n  name: 'todos.updateText',\n  validate: new SimpleSchema({\n    todoId: { type: String },\n    newText: { type: String }\n  }).validator(),\n  run({ todoId, newText }) {\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  }\n});\n</pre> <p>You call it the same way you call the advanced Method above, but the Method definition is significantly simpler. We believe this style of Method lets you clearly see the important parts - the name of the Method sent over the wire, the format of the expected arguments, and the JavaScript namespace by which the Method can be referenced.</p> <h2 id=\"errors\">Error handling</h2> <p>In regular JavaScript functions, you indicate errors by throwing an <code>Error</code> object. Throwing errors from Meteor Methods works almost the same way, but a bit of complexity is introduced by the fact that in some cases the error object will be sent over a websocket back to the client.</p> <h3 id=\"throwing-errors\">Throwing errors from a Method</h3> <p>Meteor introduces two new types of JavaScript errors: <a href=\"http://docs.meteor.com/#/full/meteor_error\" target=\"_blank\" rel=\"external\"><code>Meteor.Error</code></a> and <a href=\"https://atmospherejs.com/mdg/validation-error\" target=\"_blank\" rel=\"external\"><code>ValidationError</code></a>. These and the regular JavaScript <code>Error</code> type should be used in different situations:</p> <h4 id=\"internal-server-errors\">Regular <code>Error</code> for internal server errors</h4> <p>When you have an error that doesn’t need to be reported to the client, but is internal to the server, throw a regular JavaScript error object. This will be reported to the client as a totally opaque internal server error with no details.</p> <h4 id=\"meteor-error\">Meteor.Error for general runtime errors</h4> <p>When the server was not able to complete the user’s desired action because of a known condition, you should throw a descriptive <code>Meteor.Error</code> object to the client. In the Todos example app, we use these to report situations where the current user is not authorized to complete a certain action, or where the action is not allowed within the app - for example, deleting the last public list.</p> <p><code>Meteor.Error</code> takes three arguments: <code>error</code>, <code>reason</code>, and <code>details</code>.</p> <ol> <li>\n<code>error</code> should be a short, unique, machine-readable error code string that the client can interpret to understand what happened. It’s good to prefix this with the name of the Method for easy internationalization, for example: <code>'todos.updateText.unauthorized'</code>.</li> <li>\n<code>reason</code> should be a short description of the error for the developer. It should give your coworker enough information to be able to debug the error. The <code>reason</code> parameter should not be printed to the end user directly, since this means you now have to do internationalization on the server before sending the error message, and the UI developer has to worry about the Method implementation when thinking about what will be displayed in the UI.</li> <li>\n<code>details</code> is optional, and can be used where extra data will help the client understand what is wrong. In particular, it can be combined with the <code>error</code> field to print a more helpful error message to the end user.</li> </ol> <h4 id=\"validation-error\">ValidationError for argument validation errors</h4> <p>When a Method call fails because the arguments are of the wrong type, it’s good to throw a <code>ValidationError</code>. This works just like <code>Meteor.Error</code>, but is a custom constructor that enforces a standard error format that can be read by different form and validation libraries. In particular, if you are calling this Method from a form, throwing a <code>ValidationError</code> will make it easy to display nice error messages next to particular fields in the form.</p> <p>When you use <code>mdg:validated-method</code> with <code>aldeed:simple-schema</code> as demonstrated above, this type of error is thrown for you.</p> <p>Read more about the error format in the <a href=\"https://atmospherejs.com/mdg/validation-error\" target=\"_blank\" rel=\"external\"><code>mdg:validation-error</code> docs</a>.</p> <h3 id=\"handling-errors\">Handling errors</h3> <p>When you call a Method, any errors thrown by it will be returned in the callback. At this point, you should identify which error type it is and display the appropriate message to the user. In this case, it is unlikely that the Method will throw a <code>ValidationError</code> or an internal server error, so we will only handle the unauthorized error:</p> <pre class=\"highlight js\" data-language=\"js\">// Call the Method\nupdateText.call({\n  todoId: '12345',\n  newText: 'This is a todo item.'\n}, (err, res) =&gt; {\n  if (err) {\n    if (err.error === 'todos.updateText.unauthorized') {\n      // Displaying an alert is probably not what you would do in\n      // a real app; you should have some nice UI to display this\n      // error, and probably use an i18n library to generate the\n      // message from the error code.\n      alert('You aren\\'t allowed to edit this todo item');\n    } else {\n      // Unexpected error, handle it in the UI somehow\n    }\n  } else {\n    // success!\n  }\n});\n</pre> <p>We’ll talk about how to handle the <code>ValidationError</code> in the section on forms below.</p> <h3 id=\"throw-stub-exceptions\">Errors in Method simulation</h3> <p>When a Method is called, it usually runs twice—once on the client to simulate the result for Optimistic UI, and again on the server to make the actual change to the database. This means that if your Method throws an error, it will likely fail on the client <em>and</em> the server. For this reason, <code>ValidatedMethod</code> turns on undocumented option in Meteor to avoid calling the server-side implementation if the simulation throws an error.</p> <p>While this behavior is good for saving server resources in cases where a Method will certainly fail, it’s important to make sure that the simulation doesn’t throw an error in cases where the server Method would have succeeded (for example, if you didn’t load some data on the client that the Method needs to do the simulation properly). In this case, you can wrap server-side-only logic in a block that checks for a method simulation:</p> <pre class=\"highlight js\" data-language=\"js\">if (!this.isSimulation) {\n  // Logic that depends on server environment here\n}\n</pre> <h2 id=\"method-form\">Calling a Method from a form</h2> <p>The main thing enabled by the <code>ValidationError</code> convention is simple integration between Methods and the forms that call them. In general, your app is likely to have a one-to-one mapping of forms in the UI to Methods. First, let’s define a Method for our business logic:</p> <pre class=\"highlight js\" data-language=\"js\">// This Method encodes the form validation requirements.\n// By defining them in the Method, we do client and server-side\n// validation in one place.\nexport const insert = new ValidatedMethod({\n  name: 'Invoices.methods.insert',\n  validate: new SimpleSchema({\n    email: { type: String, regEx: SimpleSchema.RegEx.Email },\n    description: { type: String, min: 5 },\n    amount: { type: String, regEx: /^\\d*\\.(\\d\\d)?$/ }\n  }).validator(),\n  run(newInvoice) {\n    // In here, we can be sure that the newInvoice argument is\n    // validated.\n\n    if (!this.userId) {\n      throw new Meteor.Error('Invoices.methods.insert.not-logged-in',\n        'Must be logged in to create an invoice.');\n    }\n\n    Invoices.insert(newInvoice)\n  }\n});\n</pre> <p>Let’s define a simple HTML form:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Invoices_newInvoice\"&gt;\n  &lt;form class=\"Invoices_newInvoice\"&gt;\n    &lt;label for=\"email\"&gt;Recipient email&lt;/label&gt;\n    &lt;input type=\"email\" name=\"email\" /&gt;\n    {{#each error in errors \"email\"}}\n      &lt;div class=\"form-error\"&gt;{{error}}&lt;/div&gt;\n    {{/each}}\n\n    &lt;label for=\"description\"&gt;Item description&lt;/label&gt;\n    &lt;input type=\"text\" name=\"description\" /&gt;\n    {{#each error in errors \"description\"}}\n      &lt;div class=\"form-error\"&gt;{{error}}&lt;/div&gt;\n    {{/each}}\n\n    &lt;label for=\"amount\"&gt;Amount owed&lt;/label&gt;\n    &lt;input type=\"text\" name=\"amount\" /&gt;\n    {{#each error in errors \"amount\"}}\n      &lt;div class=\"form-error\"&gt;{{error}}&lt;/div&gt;\n    {{/each}}\n  &lt;/form&gt;\n&lt;/template&gt;\n</pre> <p>Now, let’s write some JavaScript to handle this form nicely:</p> <pre class=\"highlight js\" data-language=\"js\">import { insert } from '../api/invoices/methods.js';\n\nTemplate.Invoices_newInvoice.onCreated(function() {\n  this.errors = new ReactiveDict();\n});\n\nTemplate.Invoices_newInvoice.helpers({\n  errors(fieldName) {\n    return this.errors.get(fieldName);\n  }\n});\n\nTemplate.Invoices_newInvoice.events({\n  'submit .Invoices_newInvoice'(event, instance) {\n    const data = {\n      email: event.target.email.value,\n      description: event.target.description.value,\n      amount: event.target.amount.value\n    };\n\n    insert.call(data, (err, res) =&gt; {\n      if (err) {\n        if (err.error === 'validation-error') {\n          // Initialize error object\n          const errors = {\n            email: [],\n            description: [],\n            amount: []\n          };\n\n          // Go through validation errors returned from Method\n          err.details.forEach((fieldError) =&gt; {\n            // XXX i18n\n            errors[fieldError.name].push(fieldError.type);\n          });\n\n          // Update ReactiveDict, errors will show up in the UI\n          instance.errors.set(errors);\n        }\n      }\n    });\n  }\n});\n</pre> <p>As you can see, there is a fair amount of boilerplate to handle errors nicely in a form, but most of it can be easily abstracted by an off-the-shelf form framework or a simple application-specific wrapper of your own design.</p> <h2 id=\"loading-data\">Loading data with Methods</h2> <p>Since Methods can work as general purpose RPCs, they can also be used to fetch data instead of publications. There are some advantages and some disadvantages to this approach compared with loading data through publications, and at the end of the day we recommend always using publications to load data.</p> <p>Methods can be useful to fetch the result of a complex computation from the server that doesn’t need to update when the server data changes. The biggest disadvantage of fetching data through Methods is that the data won’t be automatically loaded into Minimongo, Meteor’s client-side data cache, so you’ll need to manage the lifecycle of that data manually.</p> <h4 id=\"local-collection\">Using a local collection to store and display data fetched from a Method</h4> <p>Collections are a very convenient way of storing data on the client side. If you’re fetching data using something other than subscriptions, you can put it in a collection manually. Let’s look at an example where we have a complex algorithm for calculating average scores from a series of games for a number of players. We don’t want to use a publication to load this data because we want to control exactly when it runs, and don’t want the data to be cached automatically.</p> <p>First, you need to create a <em>local collection</em> - this is a collection that exists only on the client side and is not tied to a database collection on the server. Read more in the <a href=\"http://guide.meteor.com/collections.html#local-collections\">Collections article</a>.</p> <pre class=\"highlight js\" data-language=\"js\">// In client-side code, declare a local collection\n// by passing `null` as the argument\nScoreAverages = new Mongo.Collection(null);\n</pre> <p>Now, if you fetch data using a Method, you can put into this collection:</p> <pre class=\"highlight js\" data-language=\"js\">import { calculateAverages } from '../api/games/methods.js';\n\nfunction updateAverages() {\n  // Clean out result cache\n  ScoreAverages.remove({});\n\n  // Call a Method that does an expensive computation\n  calculateAverages.call((err, res) =&gt; {\n    res.forEach((item) =&gt; {\n      ScoreAverages.insert(item);\n    });\n  });\n}\n</pre> <p>We can now use the data from the local collection <code>ScoreAverages</code> inside a UI component exactly the same way we would use a regular MongoDB collection. Instead of it updating automatically, we’ll need to call <code>updateAverages</code> every time we need new results.</p> <h2 id=\"advanced\">Advanced concepts</h2> <p>While you can easily use Methods in a simple app by following the Meteor introductory tutorial, it’s important to understand exactly how they work to use them effectively in a production app. One of the downsides of using a framework like Meteor that does a lot for you under the hood is that you don’t always understand what is going on, so it’s good to learn some of the core concepts.</p> <h3 id=\"call-lifecycle\">Method call lifecycle</h3> <p>Here’s exactly what happens, in order, when a Method is called:</p> <h4 id=\"lifecycle-simulation\">1. Method simulation runs on the client</h4> <p>If we defined this Method in client and server code, as all Methods should be, a Method simulation is executed in the client that called it.</p> <p>The client enters a special mode where it tracks all changes made to client-side collections, so that they can be rolled back later. When this step is complete, the user of your app sees their UI update instantly with the new content of the client-side database, but the server hasn’t received any data yet.</p> <p>If an exception is thrown from the Method simulation, then by default Meteor ignores it and continues to step (2). If you are using <code>ValidatedMethod</code> or pass a special <code>throwStubExceptions</code> option to <code>Meteor.apply</code>, then an exception thrown from the simulation will stop the server-side Method from running at all.</p> <p>The return value of the Method simulation is discarded, unless the <code>returnStubValue</code> option is passed when calling the Method, in which case it is returned to the Method caller. ValidatedMethod passes this option by default.</p> <h4 id=\"lifecycle-ddp-message\">2. A <code>method</code> DDP message is sent to the server</h4> <p>The Meteor client constructs a DDP message to send to the server. This includes the Method name, arguments, and an automatically generated Method ID that represents this particular Method invocation.</p> <h4 id=\"lifecycle-server\">3. Method runs on the server</h4> <p>When the server receives the message, it executes the Method code again on the server. The client side version was a simulation that will be rolled back later, but this time it’s the real version that is writing to the actual database. Running the actual Method logic on the server is crucial because the server is a trusted environment where we know that security-critical code will run the way we expect.</p> <h4 id=\"lifecycle-result\">4. Return value is sent to the client</h4> <p>Once the Method has finished running on the server, it sends a <code>result</code> message to the client with the Method ID generated in step 2, and the return value itself. The client stores this for later use, but <em>doesn’t call the Method callback yet</em>. If you pass the <a href=\"http://docs.meteor.com/#/full/meteor_apply\" target=\"_blank\" rel=\"external\"><code>onResultReceived</code> option to <code>Meteor.apply</code></a>, that callback is fired.</p> <h4 id=\"lifecycle-publications\">5. Any DDP publications affected by the Method are updated</h4> <p>If we have any publications on the page that have been affected by the database writes from this Method, the server sends the appropriate updates to the client. Note that the client data system doesn’t reveal these updates to the app UI until the next step.</p> <h4 id=\"lifecycle-updated\">6. <code>updated</code> message sent to the client, data replaced with server result, Method callback fires</h4> <p>After the relevant data updates have been sent to the correct client, the server sends back the last message in the Method life cycle - the DDP <code>updated</code> message with the relevant Method ID. The client rolls back any changes to client side data made in the Method simulation in step 1, and replaces them with the actual changes sent from the server in step 5.</p> <p>Lastly, the callback passed to <code>Meteor.call</code> actually fires with the return value from step 4. It’s important that the callback waits until the client is up to date, so that your Method callback can assume that the client state reflects any changes done inside the Method.</p> <h4 id=\"lifecycle-error\">Error case</h4> <p>In the list above, we didn’t cover the case when the Method execution on the server throws an error. In that case, there is no return value, and the client gets an error instead. The Method callback is fired instantly with the returned error as the first argument. Read more about error handling in the section about errors below.</p> <h3 id=\"methods-vs-rest\">Benefits of Methods over REST</h3> <p>We believe Methods provide a much better primitive for building modern applications than REST endpoints built on HTTP. Let’s go over some of the things you get for free with Methods that you would have to worry about if using HTTP. The purpose of this section is not to convince you that REST is bad - it’s just to remind you that you don’t need to handle these things yourself in a Meteor app.</p> <h4 id=\"non-blocking\">Methods use synchronous-style APIs, but are non-blocking</h4> <p>You may notice in the example Method above, we didn’t need to write any callbacks when interacting with MongoDB, but the Method still has the non-blocking properties that people associate with Node.js and callback-style code. Meteor uses a coroutine library called <a href=\"https://github.com/laverdet/node-fibers\" target=\"_blank\" rel=\"external\">Fibers</a> to enable you to write code that uses return values and throws errors, and avoid dealing with lots of nested callbacks.</p> <h4 id=\"ordered\">Methods always run and return in order</h4> <p>When accessing a REST API, you will sometimes run into a situation where you make two requests one after the other, but the results arrive out of order. Meteor’s underlying machinery makes sure this never happens with Methods. When multiple Method calls are received <em>from the same client</em>, Meteor runs each Method to completion before starting the next one. If you need to disable this functionality for one particularly long-running Method, you can use <a href=\"http://docs.meteor.com/#/full/method_unblock\" target=\"_blank\" rel=\"external\"><code>this.unblock()</code></a> to allow the next Method to run while the current one is still in progress. Also, since Meteor is based on Websockets instead of HTTP, all Method calls and results are guaranteed to arrive in the order they are sent. You can also pass a special option <code>wait: true</code> to <code>Meteor.apply</code> to wait to send a particular Method until all others have returned, and not send any other Methods until this one returns.</p> <h4 id=\"change-tracking\">Change tracking for Optimistic UI</h4> <p>When Method simulations and server-side executions run, Meteor tracks any resulting changes to the database. This is what lets the Meteor data system roll back the changes from the Method simulation and replace them with the actual writes from the server. Without this automatic database tracking, it would be very difficult to implement a correct Optimistic UI system.</p> <h3 id=\"calling-method-from-method\">Calling a Method from another Method</h3> <p>Sometimes, you’ll want to call a Method from another Method. Perhaps you already have some functionality implemented and you want to add a wrapper that fills in some of the arguments automatically. This is a totally fine pattern, and Meteor does some nice things for you:</p> <ol> <li>Inside a client-side Method simulation, calling another Method doesn’t fire off an extra request to the server - the assumption is that the server-side implementation of the Method will do it. However, it does run the <em>simulation</em> of the called Method, so that the simulation on the client closely matches what will happen on the server.</li> <li>Inside a Method execution on the server, calling another Method runs that Method as if it were called by the same client. That means the Method runs as usual, and the context - <code>userId</code>, <code>connection</code>, etc - are taken from the original Method call.</li> </ol> <h3 id=\"consistent-id-generation\">Consistent ID generation and optimistic UI</h3> <p>When you insert documents into Minimongo from the client-side simulation of a Method, the <code>_id</code> field of each document is a random string. When the Method call is executed on the server, the IDs are generated again before being inserted into the database. If it were implemented naively, it could mean that the IDs generated on the server are different, which would cause undesirable flickering and re-renders in the UI when the Method simulation was rolled back and replaced with the server data. But this is not the case in Meteor!</p> <p>Each Meteor Method invocation shares a random generator seed with the client that called the Method, so any IDs generated by the client and server Methods are guaranteed to be the same. This means you can safely use the IDs generated on the client to do things while the Method is being sent to the server, and be confident that the IDs will be the same when the Method finishes. One case where this is particularly useful is if you want to create a new document in the database, then immediately redirect to a URL that contains that new document’s ID.</p> <h3 id=\"retries\">Method retries</h3> <p>If you call a Method from the client, and the user’s Internet connection disconnects before the result is received, Meteor assumes that the Method didn’t actually run. When the connection is re-established, the Method call will be sent again. This means that, in certain situations, Methods can be sent more than once. This should only happen very rarely, but in the case where an extra Method call could have negative consequences it is worth putting in extra effort to ensure that Methods are idempotent - that is, calling them multiple times doesn’t result in additional changes to the database.</p> <p>Many Method operations are idempotent by default. Inserts will throw an error if they happen twice because the generated ID will conflict. Removes on collections won’t do anything the second time, and most update operators like <code>$set</code> will have the same result if run again. The only places you need to worry about code running twice are MongoDB update operators that stack, like <code>$inc</code> and <code>$push</code>, and calls to external APIs.</p> <h3 id=\"comparison-with-allow-deny\">Historical comparison with allow/deny</h3> <p>The Meteor core API includes an alternative to Methods for manipulating data from the client. Instead of explicitly defining Methods with specific arguments, you can instead call <code>insert</code>, <code>update</code>, and <code>remove</code> directly from the client and specify security rules with <a href=\"http://docs.meteor.com/#/full/allow\" target=\"_blank\" rel=\"external\"><code>allow</code></a> and <a href=\"http://docs.meteor.com/#/full/deny\" target=\"_blank\" rel=\"external\"><code>deny</code></a>. In the Meteor Guide, we are taking a strong position that this feature should be avoided and Methods used instead. Read more about the problems with allow/deny in the <a href=\"security#allow-deny\">Security article</a>.</p> <p>Historically, there have been some misconceptions about the features of Meteor Methods as compared with the allow/deny feature, including that it was more difficult to achieve Optimistic UI when using Methods. However, the client-side <code>insert</code>, <code>update</code>, and <code>remove</code> feature is actually implemented <em>on top of</em> Methods, so Methods are strictly more powerful. You get great default Optimistic UI just by defining your Method code on the client and the server, as described in the Method lifecycle section above.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/methods.html\" class=\"_attribution-link\">https://guide.meteor.com/methods.html</a>\n  </p>\n</div>\n","data-loading":"<h1 class=\"title-page\">Publications and Data Loading</h1> <div class=\"subtitle-page\">How and where to load data in your Meteor app using publications and subscriptions.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>What publications and subscriptions are in the Meteor platform.</li> <li>How to define a publication on the server.</li> <li>Where to subscribe on the client and in which templates.</li> <li>Useful patterns for managing subscriptions.</li> <li>How to reactively publish related data.</li> <li>How to ensure your publication is secure in the face of reactive changes.</li> <li>How to use the low-level publish API to publish anything.</li> <li>What happens when you subscribe to a publication.</li> <li>How to turn a 3rd-party REST endpoint into a publication.</li> <li>How to turn a publication in your app into a REST endpoint.</li> </ol> <h2 id=\"publications-and-subscriptions\">Publications and subscriptions</h2> <p>In a traditional, HTTP-based web application, the client and server communicate in a “request-response” fashion. Typically the client makes RESTful HTTP requests to the server and receives HTML or JSON data in response, and there’s no way for the server to “push” data to the client when changes happen at the backend.</p> <p>Meteor is built from the ground up on the Distributed Data Protocol (DDP) to allow data transfer in both directions. Building a Meteor app doesn’t require you to set up REST endpoints to serialize and send data. Instead you create <em>publication</em> endpoints that can push data from server to client.</p> <p>In Meteor a <strong>publication</strong> is a named API on the server that constructs a set of data to send to a client. A client initiates a <strong>subscription</strong> which connects to a publication, and receives that data. That data consists of a first batch sent when the subscription is initialized and then incremental updates as the published data changes.</p> <p>So a subscription can be thought of as a set of data that changes over time. Typically, the result of this is that a subscription “bridges” a <a href=\"collections#server-collections\">server-side MongoDB collection</a>, and the <a href=\"collections#client-collections\">client side Minimongo cache</a> of that collection. You can think of a subscription as a pipe that connects a subset of the “real” collection with the client’s version, and constantly keeps it up to date with the latest information on the server.</p> <h2 id=\"publications\">Defining a publication</h2> <p>A publication should be defined in a server-only file. For instance, in the Todos example app, we want to publish the set of public lists to all users:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('lists.public', function() {\n  return Lists.find({\n    userId: {$exists: false}\n  }, {\n    fields: Lists.publicFields\n  });\n});\n</pre> <p>There are a few things to understand about this code block. First, we’ve named the publication with the unique string <code>lists.public</code>, and that will be how we access it from the client. Second, we are simply returning a Mongo <em>cursor</em> from the publication function. Note that the cursor is filtered to only return certain fields from the collection, as detailed in the <a href=\"security#fields\">Security article</a>.</p> <p>What that means is that the publication will simply ensure the set of data matching that query is available to any client that subscribes to it. In this case, all lists that do not have a <code>userId</code> setting. So the collection named <code>Lists</code> on the client will have all of the public lists that are available in the server collection named <code>Lists</code> while that subscription is open. In this particular example in the Todos application, the subscription is initialized when the app starts and never stopped, but a later section will talk about <a href=\"data-loading#patterns\">subscription life cycle</a>.</p> <p>Every publication takes two types of parameters:</p> <ol> <li>The <code>this</code> context, which has information about the current DDP connection. For example, you can access the current user’s <code>_id</code> with <code>this.userId</code>.</li> <li>The arguments to the publication, which can be passed in when calling <code>Meteor.subscribe</code>.</li> </ol> <blockquote> <p>Note: Since we need to access context on <code>this</code> we need to use the <code>function() {}</code> form for publications rather than the ES2015 <code>() =&gt; {}</code>. You can disable the arrow function linting rule for publication files with <code>eslint-disable prefer-arrow-callback</code>. A future version of the publication API will work more nicely with ES2015.</p> </blockquote> <p>In this publication, which loads private lists, we need to use <code>this.userId</code> to get only the todo lists that belong to a specific user.</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('lists.private', function() {\n  if (!this.userId) {\n    return this.ready();\n  }\n\n  return Lists.find({\n    userId: this.userId\n  }, {\n    fields: Lists.publicFields\n  });\n});\n</pre> <p>Thanks to the guarantees provided by DDP and Meteor’s accounts system, the above publication can be confident that it will only ever publish private lists to the user that they belong to. Note that the publication will re-run if the user logs out (or back in again), which means that the published set of private lists will change as the active user changes.</p> <p>In the case of a logged-out user, we explicitly call <code>this.ready()</code>, which indicates to the subscription that we’ve sent all the data we are initially going to send (in this case none). It’s important to know that if you don’t return a cursor from the publication or call <code>this.ready()</code>, the user’s subscription will never become ready, and they will likely see a loading state forever.</p> <p>Here’s an example of a publication which takes a named argument. Note that it’s important to check the types of arguments that come in over the network.</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('todos.inList', function(listId) {\n  // We need to check the `listId` is the type we expect\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  // ...\n});\n</pre> <p>When we subscribe to this publication on the client, we can provide this argument via the <code>Meteor.subscribe()</code> call:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.subscribe('todos.inList', list._id);\n</pre> <h3 id=\"organization-publications\">Organizing publications</h3> <p>It makes sense to place a publication alongside the feature that it’s targeted for. For instance, sometimes publications provide very specific data that’s only really useful for the view for which they were developed. In that case, placing the publication in the same module or directory as the view code makes perfect sense.</p> <p>Often, however, a publication is more general. For example in the Todos example application, we create a <code>todos.inList</code> publication, which publishes all the todos in a list. Although in the application we only use this in one place (in the <code>Lists_show</code> template), in a larger app, there’s a good chance we might need to access all the todos for a list in other places. So putting the publication in the <code>todos</code> package is a sensible approach.</p> <h2 id=\"subscriptions\">Subscribing to data</h2> <p>To use publications, you need to create a subscription to it on the client. To do so, you call <code>Meteor.subscribe()</code> with the name of the publication. When you do this, it opens up a subscription to that publication, and the server starts sending data down the wire to ensure that your client collections contain up to date copies of the data specified by the publication.</p> <p><code>Meteor.subscribe()</code> also returns a “subscription handle” with a property called <code>.ready()</code>. This is a reactive function that returns <code>true</code> when the publication is marked ready (either you call <code>this.ready()</code> explicitly, or the initial contents of a returned cursor are sent over).</p> <pre class=\"highlight js\" data-language=\"js\">const handle = Meteor.subscribe('lists.public');\n</pre> <h3 id=\"stopping-subscriptions\">Stopping Subscriptions</h3> <p>The subscription handle also has another important property, the <code>.stop()</code> method. When you are subscribing, it is very important to ensure that you always call <code>.stop()</code> on the subscription when you are done with it. This ensures that the documents sent by the subscription are cleared from your local Minimongo cache and the server stops doing the work required to service your subscription. If you forget to call stop, you’ll consume unnecessary resources both on the client and the server.</p> <p><em>However</em>, if you call <code>Meteor.subscribe()</code> conditionally inside a reactive context (such as an <code>autorun</code>, or <code>getMeteorData</code> in React) or via <code>this.subscribe()</code> in a Blaze component, then Meteor’s reactive system will automatically call <code>this.stop()</code> for you at the appropriate time.</p> <h3 id=\"organizing-subscriptions\">Subscribe in UI components</h3> <p>It is best to place the subscription as close as possible to the place where the data from the subscription is needed. This reduces “action at a distance” and makes it easier to understand the flow of data through your application. If the subscription and fetch are separated, then it’s not always clear how and why changes to the subscriptions (such as changing arguments), will affect the contents of the cursor.</p> <p>What this means in practice is that you should place your subscription calls in <em>components</em>. In Blaze, it’s best to do this in the <code>onCreated()</code> callback:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.onCreated(function() {\n  this.getListId = () =&gt; FlowRouter.getParam('_id');\n\n  this.autorun(() =&gt; {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n</pre> <p>In this code snippet we can see two important techniques for subscribing in Blaze templates:</p> <ol> <li>\n<p>Calling <code>this.subscribe()</code> (rather than <code>Meteor.subscribe</code>), which attaches a special <code>subscriptionsReady()</code> function to the template instance, which is true when all subscriptions made inside this template are ready.</p> </li> <li>\n<p>Calling <code>this.autorun</code> sets up a reactive context which will re-initialize the subscription whenever the reactive function <code>this.getListId()</code> changes.</p> </li> </ol> <p>Read more about Blaze subscriptions in the <a href=\"blaze#subscribing\">Blaze article</a>, and about tracking loading state inside UI components in the <a href=\"ui-ux#subscription-readiness\">UI article</a>.</p> <h3 id=\"fetching\">Fetching data</h3> <p>Subscribing to data puts it in your client-side collection. To use the data in your user interface, you need to query your client-side collection. There are a couple of important rules to follow when doing this.</p> <h4 id=\"specific-queries\">Always use specific queries to fetch data</h4> <p>If you’re publishing a subset of your data, it might be tempting to simply query for all data available in a collection (i.e. <code>Lists.find()</code>) in order to get that subset on the client, without re-specifying the Mongo selector you used to publish that data in the first place.</p> <p>But if you do this, then you open yourself up to problems if another subscription pushes data into the same collection, since the data returned by <code>Lists.find()</code> might not be what you expected anymore. In an actively developed application, it’s often hard to anticipate what may change in the future and this can be a source of hard to understand bugs.</p> <p>Also, when changing between subscriptions, there is a brief period where both subscriptions are loaded (see <a href=\"#publication-behavior-with-arguments\">Publication behavior when changing arguments</a> below), so when doing things like pagination, it’s exceedingly likely that this will be the case.</p> <h4 id=\"fetch-near-subscribe\">Fetch the data nearby where you subscribed to it</h4> <p>We do this for the same reason we subscribe in the component in the first place—to avoid action at a distance and to make it easier to understand where data comes from. A common pattern is to fetch the data in a parent template, and then pass it into a “pure” child component, as we’ll see it in the <a href=\"ui-ux#components\">UI Article</a>.</p> <p>Note that there are some exceptions to this second rule. A common one is <code>Meteor.user()</code>—although this is strictly speaking subscribed to (automatically usually), it’s typically over-complicated to pass it through the component hierarchy as an argument to each component. However keep in mind it’s best not to use it in too many places as it makes components harder to test.</p> <h3 id=\"global-subscriptions\">Global subscriptions</h3> <p>One place where you might be tempted to not subscribe inside a component is when it accesses data that you know you <em>always</em> need. For instance, a subscription to extra fields on the user object (see the <a href=\"accounts\">Accounts Article</a>) that you need on every screen of your app.</p> <p>However, it’s generally a good idea to use a layout component (which you wrap all your components in) to subscribe to this subscription anyway. It’s better to be consistent about such things, and it makes for a more flexible system if you ever decide you have a screen that <em>doesn’t</em> need that data.</p> <h2 id=\"patterns\">Patterns for data loading</h2> <p>Across Meteor applications, there are some common patterns of data loading and management on the client side that are worth knowing. We’ll go into more detail about some of these in the <a href=\"ui-ux\">UI/UX Article</a>.</p> <h3 id=\"readiness\">Subscription readiness</h3> <p>It is key to understand that a subscription will not instantly provide its data. There will be a latency between subscribing to the data on the client and it arriving from the publication on the server. You should also be aware that this delay may be a lot longer for your users in production that for you locally in development!</p> <p>Although the Tracker system means you often don’t <em>need</em> to think too much about this in building your apps, usually if you want to get the user experience right, you’ll need to know when the data is ready.</p> <p>To find that out, <code>Meteor.subscribe()</code> and (<code>this.subscribe()</code> in Blaze components) returns a “subscription handle”, which contains a reactive data source called <code>.ready()</code>:</p> <pre class=\"highlight js\" data-language=\"js\">const handle = Meteor.subscribe('lists.public');\nTracker.autorun(() =&gt; {\n  const isReady = handle.ready();\n  console.log(`Handle is ${isReady ? 'ready' : 'not ready'}`);  \n});\n</pre> <p>We can use this information to be more subtle about when we try and show data to users, and when we show a loading screen.</p> <h3 id=\"changing-arguments\">Reactively changing subscription arguments</h3> <p>We’ve already seen an example of using an <code>autorun</code> to re-subscribe when the (reactive) arguments to a subscription change. It’s worth digging in a little more detail to understand what happens in this scenario.</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.onCreated(function() {\n  this.getListId = () =&gt; FlowRouter.getParam('_id');\n\n  this.autorun(() =&gt; {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n</pre> <p>In our example, the <code>autorun</code> will re-run whenever <code>this.getListId()</code> changes, (ultimately because <code>FlowRouter.getParam('_id')</code> changes), although other common reactive data sources are:</p> <ol> <li>Template data contexts (which you can access reactively with <code>Template.currentData()</code>).</li> <li>The current user status (<code>Meteor.user()</code> and <code>Meteor.loggingIn()</code>).</li> <li>The contents of other application specific client data stores.</li> </ol> <p>Technically, what happens when one of these reactive sources changes is the following:</p> <ol> <li>The reactive data source <em>invalidates</em> the autorun computation (marks it so that it re-runs in the next Tracker flush cycle).</li> <li>The subscription detects this, and given that anything is possible in next computation run, marks itself for destruction.</li> <li>The computation re-runs, with <code>.subscribe()</code> being re-called either with the same or different arguments.</li> <li>If the subscription is run with the <em>same arguments</em> then the “new” subscription discovers the old “marked for destruction” subscription that’s sitting around, with the same data already ready, and simply reuses that.</li> <li>If the subscription is run with <em>different arguments</em>, then a new subscription is created, which connects to the publication on the server.</li> <li>At the end of the flush cycle (i.e. after the computation is done re-running), the old subscription checks to see if it was re-used, and if not, sends a message to the server to tell the server to shut it down.</li> </ol> <p>Step 4 above is an important detail—that the system cleverly knows not to re-subscribe if the autorun re-runs and subscribes with the exact same arguments. This holds true even if the new subscription is set up somewhere else in the template hierarchy. For example, if a user navigates between two pages that both subscribe to the exact same subscription, the same mechanism will kick in and no unnecessary subscribing will happen.</p> <h3 id=\"publication-behavior-with-arguments\">Publication behavior when arguments change</h3> <p>It’s also worth knowing a little about what happens on the server when the new subscription is started and the old one is stopped.</p> <p>The server <em>explicitly</em> waits until all the data is sent down (the new subscription is ready) for the new subscription before removing the data from the old subscription. The idea here is to avoid flicker—you can, if desired, continue to show the old subscription’s data until the new data is ready, then instantly switch over to the new subscription’s complete data set.</p> <p>What this means is in general, when changing subscriptions, there’ll be a period where you are <em>over-subscribed</em> and there is more data on the client than you strictly asked for. This is one very important reason why you should always fetch the same data that you have subscribed to (don’t “over-fetch”).</p> <h3 id=\"pagination\">Paginating subscriptions</h3> <p>A very common pattern of data access is pagination. This refers to the practice of fetching an ordered list of data one “page” at a time—typically some number of items, say twenty.</p> <p>There are two styles of pagination that are commonly used, a “page-by-page” style—where you show only one page of results at a time, starting at some offset (which the user can control), and “infinite-scroll” style, where you show an increasing number of pages of items, as the user moves through the list (this is the typical “feed” style user interface).</p> <p>In this section, we’ll consider a publication/subscription technique for the second, infinite-scroll style pagination. The page-by-page technique is a little tricker to handle in Meteor, due to it being difficult to calculate the offset on the client. If you need to do so, you can follow many of the same techniques that we use here and use the <a href=\"https://atmospherejs.com/percolate/find-from-publication\" target=\"_blank\" rel=\"external\"><code>percolate:find-from-publication</code></a> package to keep track of which records have come from your publication.</p> <p>In an infinite scroll publication, we simply need to add a new argument to our publication controlling how many items to load. Suppose we wanted to paginate the todo items in our Todos example app:</p> <pre class=\"highlight js\" data-language=\"js\">const MAX_TODOS = 1000;\n\nMeteor.publish('todos.inList', function(listId, limit) {\n  new SimpleSchema({\n    listId: { type: String },\n    limit: { type: Number }\n  }).validate({ listId, limit });\n\n  const options = {\n    sort: {createdAt: -1},\n    limit: Math.min(limit, MAX_TODOS)\n  };\n\n  // ...\n});\n</pre> <p>It’s important that we set a <code>sort</code> parameter on our query (to ensure a repeatable order of list items as more pages are requested), and that we set an absolute maximum on the number of items a user can request (at least in the case where lists can grow without bound).</p> <p>Then on the client side, we’d set some kind of reactive state variable to control how many items to request:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.onCreated(function() {\n  this.getListId = () =&gt; FlowRouter.getParam('_id');\n\n  this.autorun(() =&gt; {\n    this.subscribe('todos.inList',\n      this.getListId(), this.state.get('requestedTodos'));\n  });\n});\n</pre> <p>We’d increment that <code>requestedTodos</code> variable when the user clicks “load more” (or perhaps just when they scroll to the bottom of the page).</p> <p>One piece of information that’s very useful to know when paginating data is the <em>total number of items</em> that you could see. The <a href=\"https://atmospherejs.com/tmeasday/publish-counts\" target=\"_blank\" rel=\"external\"><code>tmeasday:publish-counts</code></a> package can be useful to publish this. We could add a <code>Lists.todoCount</code> publication like so</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('Lists.todoCount', function({ listId }) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  Counts.publish(this, `Lists.todoCount.${listId}`, Todos.find({listId}));\n});\n</pre> <p>Then on the client, after subscribing to that publication, we can access the count with</p> <pre class=\"highlight js\" data-language=\"js\">Counts.get(`Lists.todoCount.${listId}`)\n</pre> <h2 id=\"stores\">Client-side data with reactive stores</h2> <p>In Meteor, persistent or shared data comes over the wire on publications. However, there are some types of data which doesn’t need to be persistent or shared between users. For instance, the “logged-in-ness” of the current user, or the route they are currently viewing.</p> <p>Although client-side state is often best contained as state of an individual template (and passed down the template hierarchy as arguments where necessary), sometimes you have a need for “global” state that is shared between unrelated sections of the template hierarchy.</p> <p>Usually such state is stored in a <em>global singleton</em> object which we can call a store. A singleton is a data structure of which only a single copy logically exists. The current user and the router from above are typical examples of such global singletons.</p> <h3 id=\"store-types\">Types of stores</h3> <p>In Meteor, it’s best to make stores <em>reactive data</em> sources, as that way they tie most naturally into the rest of the ecosystem. There are a few different packages you can use for stores.</p> <p>If the store is single-dimensional, you can probably use a <code>ReactiveVar</code> to store it (provided by the <a href=\"https://atmospherejs.com/meteor/reactive-var\" target=\"_blank\" rel=\"external\"><code>reactive-var</code></a> package). A <code>ReactiveVar</code> has two properties, <code>get()</code> and <code>set()</code>:</p> <pre class=\"highlight js\" data-language=\"js\">DocumentHidden = new ReactiveVar(document.hidden);\n$(window).on('visibilitychange', (event) =&gt; {\n  DocumentHidden.set(document.hidden);\n});\n</pre> <p>If the store is multi-dimensional, you may want to use a <code>ReactiveDict</code> (from the <a href=\"https://atmospherejs.com/meteor/reactive-dict\" target=\"_blank\" rel=\"external\"><code>reactive-dict</code></a> package):</p> <pre class=\"highlight js\" data-language=\"js\">const $window = $(window);\nfunction getDimensions() {\n  return {\n    width: $window.width(),\n    height: $window.height()\n  };\n};\n\nWindowSize = new ReactiveDict();\nWindowSize.set(getDimensions());\n$window.on('resize', () =&gt; {\n  WindowSize.set(getDimensions());\n});\n</pre> <p>The advantage of a <code>ReactiveDict</code> is you can access each property individually (<code>WindowSize.get('width')</code>), and the dict will diff the field and track changes on it individually (so your template will re-render less often for instance).</p> <p>If you need to query the store, or store many related items, it’s probably a good idea to use a Local Collection (see the <a href=\"collections#local-collections\">Collections Article</a>).</p> <h3 id=\"accessing-stores\">Accessing stores</h3> <p>You should access stores in the same way you’d access other reactive data in your templates—that means centralizing your store access, much like you centralize your subscribing and data fetch. For a Blaze template, that’s either in a helper, or from within a <code>this.autorun()</code> inside an <code>onCreated()</code> callback.</p> <p>This way you get the full reactive power of the store.</p> <h3 id=\"updating-stores\">Updating stores</h3> <p>If you need to update a store as a result of user action, you’d update the store from an event handler, just like you call <a href=\"methods\">Methods</a>.</p> <p>If you need to perform complex logic in the update (e.g. not just call <code>.set()</code> etc), it’s a good idea to define a mutator on the store. As the store is a singleton, you can just attach a function to the object directly:</p> <pre class=\"highlight js\" data-language=\"js\">WindowSize.simulateMobile = (device) =&gt; {\n  if (device === 'iphone6s') {\n    this.set({width: 750, height: 1334});\n  }\n}\n</pre> <h2 id=\"advanced-publications\">Advanced publications</h2> <p>Sometimes, the simple mechanism of returning a query from a publication function won’t cover your needs. In those situations, there are some more powerful publication patterns that you can use.</p> <h3 id=\"publishing-relations\">Publishing relational data</h3> <p>It’s common to need related sets of data from multiple collections on a given page. For instance, in the Todos app, when we render a todo list, we want the list itself, as well as the set of todos that belong to that list.</p> <p>One way you might do this is to return more than one cursor from your publication function:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('todos.inList', function(listId) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  const list = Lists.findOne(listId);\n\n  if (list &amp;&amp; (!list.userId || list.userId === this.userId)) {\n    return [\n      Lists.find(listId),\n      Todos.find({listId})\n    ];\n  } else {\n    // The list doesn't exist, or the user isn't allowed to see it.\n    // In either case, make it appear like there is no list.\n    return this.ready();\n  }\n});\n</pre> <p>However, this example will not work as you might expect. The reason is that reactivity doesn’t work in the same way on the server as it does on the client. On the client, if <em>anything</em> in a reactive function changes, the whole function will re-run, and the results are fairly intuitive.</p> <p>On the server however, the reactivity is limited to the behavior of the cursors you return from your publish functions. You’ll see any changes to the data that matches their queries, but <em>their queries will never change</em>.</p> <p>So in the case above, if a user subscribes to a list that is later made private by another user, although the <code>list.userId</code> will change to a value that no longer passes the condition, the body of the publication will not re-run, and so the query to the <code>Todos</code> collection (<code>{listId}</code>) will not change. So the first user will continue to see items they shouldn’t.</p> <p>However, we can write publications that are properly reactive to changes across collections. To do this, we use the <a href=\"https://atmospherejs.com/reywood/publish-composite\" target=\"_blank\" rel=\"external\"><code>reywood:publish-composite</code></a> package.</p> <p>The way this package works is to first establish a cursor on one collection, and then explicitly set up a second level of cursors on a second collection with the results of the first cursor. The package uses a query observer behind the scenes to trigger the subscription to change and queries to re-run whenever the source data changes.</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publishComposite('todos.inList', function(listId) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  const userId = this.userId;\n\n  return {\n    find() {\n      const query = {\n        _id: listId,\n        $or: [{userId: {$exists: false}}, {userId}]\n      };\n\n      // We only need the _id field in this query, since it's only\n      // used to drive the child queries to get the todos\n      const options = {\n        fields: { _id: 1 }\n      };\n\n      return Lists.find(query, options);\n    },\n\n    children: [{\n      find(list) {\n        return Todos.find({ listId: list._id }, { fields: Todos.publicFields });\n      }\n    }]\n  };\n});\n</pre> <p>In this example, we write a complicated query to make sure that we only ever find a list if we are allowed to see it, then, once per list we find (which can be one or zero times depending on access), we publish the todos for that list. Publish Composite takes care of stopping and starting the dependent cursors if the list stops matching the original query or otherwise.</p> <h3 id=\"complex-auth\">Complex authorization</h3> <p>We can also use <code>publish-composite</code> to perform complex authorization in publications. For instance, consider if we had a <code>Todos.admin.inList</code> publication that allowed an admin to bypass default publication’s security for users with an <code>admin</code> flag set.</p> <p>We might want to write:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('Todos.admin.inList', function({ listId }) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  const user = Meteor.users.findOne(this.userId);\n\n  if (user &amp;&amp; user.admin) {\n    // We don't need to worry about the list.userId changing this time\n    return [\n      Lists.find(listId),\n      Todos.find({listId})\n    ];\n  } else {\n    return this.ready();\n  }\n});\n</pre> <p>However, due to the same reasons discussed above, the publication <em>will not re-run</em> if the user’s <code>admin</code> status changes. If this is something that is likely to happen and reactive changes are needed, then we’ll need to make the publication reactive. We can do this via the same technique as above however:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publishComposite('Todos.admin.inList', function(listId) {\n  new SimpleSchema({\n    listId: {type: String}\n  }).validate({ listId });\n\n  const userId = this.userId;\n  return {\n    find() {\n      return Meteor.users.find({userId, admin: true});\n    },\n    children: [{\n      find() {\n        // We don't need to worry about the list.userId changing this time\n        return [\n          Lists.find(listId),\n          Todos.find({listId})\n        ];\n      }  \n    }]\n  };\n});\n</pre> <h3 id=\"custom-publication\">Custom publications with the low level API</h3> <p>In all of our examples so far (outside of using<code>Meteor.publishComposite()</code>) we’ve returned a cursor from our <code>Meteor.publish()</code> handlers. Doing this ensures Meteor takes care of the job of keeping the contents of that cursor in sync between the server and the client. However, there’s another API you can use for publish functions which is closer to the way the underlying Distributed Data Protocol (DDP) works.</p> <p>DDP uses three main messages to communicate changes in the data for a publication: the <code>added</code>, <code>changed</code> and <code>removed</code> messages. So, we can similarly do the same for a publication:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('custom-publication', function() {\n  // We can add documents one at a time\n  this.added('collection-name', 'id', {field: 'values'});\n\n  // We can call ready to indicate to the client that the initial document sent has been sent\n  this.ready();\n\n  // We may respond to some 3rd party event and want to send notifications\n  Meteor.setTimeout(() =&gt; {\n    // If we want to modify a document that we've already added\n    this.changed('collection-name', 'id', {field: 'new-value'});\n\n    // Or if we don't want the client to see it any more\n    this.removed('collection-name', 'id');\n  });\n\n  // It's very important to clean up things in the subscription's onStop handler\n  this.onStop(() =&gt; {\n    // Perhaps kill the connection with the 3rd party server\n  });\n});\n</pre> <p>From the client’s perspective, data published like this doesn’t look any different—there’s actually no way for the client to know the difference as the DDP messages are the same. So even if you are connecting to, and mirroring, some esoteric data source, on the client it’ll appear like any other Mongo collection.</p> <p>One point to be aware of is that if you allow the user to <em>modify</em> data in the “pseudo-collection” you are publishing in this fashion, you’ll want to be sure to re-publish the modifications to them via the publication, to achieve an optimistic user experience.</p> <h3 id=\"lifecycle\">Subscription lifecycle</h3> <p>Although you can use publications and subscriptions in Meteor via an intuitive understanding, sometimes it’s useful to know exactly what happens under the hood when you subscribe to data.</p> <p>Suppose you have a simple publication of the following form:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('Posts.all', function() {\n  return Posts.find({}, {limit: 10});\n});\n</pre> <p>Then when a client calls <code>Meteor.subscribe('Posts.all')</code> the following things happen inside Meteor:</p> <ol> <li>\n<p>The client sends a <code>sub</code> message with the name of the subscription over DDP.</p> </li> <li>\n<p>The server starts up the subscription by running the publication handler function.</p> </li> <li>\n<p>The publication handler identifies that the return value is a cursor. This enables a convenient mode for publishing cursors.</p> </li> <li>\n<p>The server sets up a query observer on that cursor, unless such an observer already exists on the server (for any user), in which case that observer is re-used.</p> </li> <li>\n<p>The observer fetches the current set of documents matching the cursor, and passes them back to the subscription (via the <code>this.added()</code> callback).</p> </li> <li>\n<p>The subscription passes the added documents to the subscribing client’s connection <em>mergebox</em>, which is an on-server cache of the documents that have been published to this particular client. Each document is merged with any existing version of the document that the client knows about, and an <code>added</code> (if the document is new to the client) or <code>changed</code> (if it is known but this subscription is adding or changing fields) DDP message is sent.</p> <p>Note that the mergebox operates at the level of top-level fields, so if two subscriptions publish nested fields (e.g. sub1 publishes <code>doc.a.b = 7</code> and sub2 publishes <code>doc.a.c = 8</code>), then the “merged” document might not look as you expect (in this case <code>doc.a = {c: 8}</code>, if sub2 happens second).</p> </li> <li>\n<p>The publication calls the <code>.ready()</code> callback, which sends the DDP <code>ready</code> message to the client. The subscription handle on the client is marked as ready.</p> </li> <li>\n<p>The observer observes the query. Typically, it <a href=\"https://github.com/meteor/meteor/wiki/Oplog-Observe-Driver\" target=\"_blank\" rel=\"external\">uses MongoDB’s Oplog</a> to notice changes that affect the query. If it sees a relevant change, like a new matching document or a change in a field on a matching document, it calls into the subscription (via <code>.added()</code>, <code>.changed()</code> or <code>.removed()</code>), which again sends the changes to the mergebox, and then to the client via DDP.</p> </li> </ol> <p>This continues until the client <a href=\"#stopping-subscriptions\">stops</a> the subscription, triggering the following behavior:</p> <ol> <li>\n<p>The client sends the <code>unsub</code> DDP message.</p> </li> <li>\n<p>The server stops its internal subscription object, triggering the following effects:</p> </li> <li>\n<p>Any <code>this.onStop()</code> callbacks setup by the publish handler run. In this case, it is a single automatic callback setup when returning a cursor from the handler, which stops the query observer and cleans it up if necessary.</p> </li> <li>\n<p>All documents tracked by this subscription are removed from the mergebox, which may or may not mean they are also removed from the client.</p> </li> <li>\n<p>The <code>nosub</code> message is sent to the client to indicate that the subscription has stopped.</p> </li> </ol> <h2 id=\"rest-interop\">Working with REST APIs</h2> <p>Publications and subscriptions are the primary way of dealing with data in Meteor’s DDP protocol, but lots of data sources use the popular REST protocol for their API. It’s useful to be able to convert between the two.</p> <h3 id=\"loading-from-rest\">Loading data from a REST endpoint with a publication</h3> <p>As a concrete example of using the <a href=\"#custom-publication\">low-level API</a>, consider the situation where you have some 3rd party REST endpoint which provides a changing set of data that’s valuable to your users. How do you make that data available?</p> <p>One option would be to provide a Method that simply proxies through to the endpoint, for which it’s the client’s responsibility to poll and deal with the changing data as it comes in. So then it’s the clients problem to deal with keeping a local data cache of the data, updating the UI when changes happen, etc. Although this is possible (you could use a Local Collection to store the polled data, for instance), it’s simpler, and more natural to create a publication that does this polling for the client.</p> <p>A pattern for turning a polled REST endpoint looks something like this:</p> <pre class=\"highlight js\" data-language=\"js\">const POLL_INTERVAL = 5000;\n\nMeteor.publish('polled-publication', function() {\n  const publishedKeys = {};\n\n  const poll = () =&gt; {\n    // Let's assume the data comes back as an array of JSON documents, with an _id field, for simplicity\n    const data = HTTP.get(REST_URL, REST_OPTIONS);\n\n    data.forEach((doc) =&gt; {\n      if (publishedKeys[doc._id]) {\n        this.changed(COLLECTION_NAME, doc._id, doc);\n      } else {\n        publishedKeys[doc._id] = true;\n        this.added(COLLECTION_NAME, doc._id, doc);\n      }\n    });\n  };\n\n  poll();\n  this.ready();\n\n  const interval = Meteor.setInterval(poll, POLL_INTERVAL);\n\n  this.onStop(() =&gt; {\n    Meteor.clearInterval(interval);\n  });\n});\n</pre> <p>Things can get more complicated; for instance you may want to deal with documents being removed, or share the work of polling between multiple users (in a case where the data being polled isn’t private to that user), rather than doing the exact same poll for each interested user.</p> <h3 id=\"publications-as-rest\">Accessing a publication as a REST endpoint</h3> <p>The opposite scenario occurs when you want to publish data to be consumed by a 3rd party, typically over REST. If the data we want to publish is the same as what we already publish via a publication, then we can use the <a href=\"https://atmospherejs.com/simple/rest\" target=\"_blank\" rel=\"external\">simple:rest</a> package to do this really easily.</p> <p>In the Todos example app, we have done this, and you can now access our publications over HTTP:</p> <pre class=\"highlight bash\" data-language=\"bash\">$ curl localhost:3000/publications/lists.public\n{\n  \"Lists\": [\n    {\n      \"_id\": \"rBt5iZQnDpRxypu68\",\n      \"name\": \"Meteor Principles\",\n      \"incompleteCount\": 7\n    },\n    {\n      \"_id\": \"Qzc2FjjcfzDy3GdsG\",\n      \"name\": \"Languages\",\n      \"incompleteCount\": 9\n    },\n    {\n      \"_id\": \"TXfWkSkoMy6NByGNL\",\n      \"name\": \"Favorite Scientists\",\n      \"incompleteCount\": 6\n    }\n  ]\n}\n</pre> <p>You can also access authenticated publications (such as <code>lists.private</code>). Suppose we’ve signed up (via the web UI) as <code>user@example.com</code>, with the password <code>password</code>, and created a private list. Then we can access it as follows:</p> <pre class=\"highlight bash\" data-language=\"bash\"># First, we need to \"login\" on the commandline to get an access token\n$ curl localhost:3000/users/login  -H \"Content-Type: application/json\" --data '{\"email\": \"user@example.com\", \"password\": \"password\"}'\n{\n  \"id\": \"wq5oLMLi2KMHy5rR6\",\n  \"token\": \"6PN4EIlwxuVua9PFoaImEP9qzysY64zM6AfpBJCE6bs\",\n  \"tokenExpires\": \"2016-02-21T02:27:19.425Z\"\n}\n\n# Then, we can make an authenticated API call\n$ curl localhost:3000/publications/lists.private -H \"Authorization: Bearer 6PN4EIlwxuVua9PFoaImEP9qzysY64zM6AfpBJCE6bs\"\n{\n  \"Lists\": [\n    {\n      \"_id\": \"92XAn3rWhjmPEga4P\",\n      \"name\": \"My Private List\",\n      \"incompleteCount\": 5,\n      \"userId\": \"wq5oLMLi2KMHy5rR6\"\n    }\n  ]\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/data-loading.html\" class=\"_attribution-link\">https://guide.meteor.com/data-loading.html</a>\n  </p>\n</div>\n","angular":"<h1 class=\"title-page\">Angular</h1> <div class=\"subtitle-page\">The correct place to find details about using Angular with Meteor</div>    <p>Angular is a frontend rendering library that is officially supported by Meteor. The best place to read about how to use both Angular 1 and Angular 2 in Meteor is the <a href=\"http://www.angular-meteor.com\" target=\"_blank\" rel=\"external\">Angular-Meteor</a> site.</p> <p>The two alteratives to Angular are <a href=\"blaze\">Blaze</a> and <a href=\"react\">React</a>. <a href=\"ui-ux#view-layers\">Here’s a comparison</a> of all three.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/angular.html\" class=\"_attribution-link\">https://guide.meteor.com/angular.html</a>\n  </p>\n</div>\n","atmosphere-vs-npm":"<h1 class=\"title-page\">Atmosphere vs. npm</h1>    <p>Building an application completely from scratch is a tall order. This is one of the main reasons you might consider using Meteor in the first place - you can focus on writing the code that is specific to your app, instead of reinventing wheels like user login and data synchronization. To streamline your workflow even further, it makes sense to use community packages from <a href=\"https://www.npmjs.com\" target=\"_blank\" rel=\"external\">npm</a> and <a href=\"https://atmospherejs.com\" target=\"_blank\" rel=\"external\">Atmosphere</a>. Many of these packages are recommended in the guide, and you can find more in the online directories.</p> <p><strong>With the release of version 1.3, Meteor has full support for npm. In the future, there will be a time when all packages will be migrated to npm, but currently there are benefits to both systems.</strong></p> <h2 id=\"when-atmosphere\">When to use Atmosphere packages</h2> <p>Atmosphere packages are packages written specifically for Meteor and have several advantages over npm when used with Meteor. In particular, Atmosphere packages can:</p> <ul> <li>Depend on core Meteor packages, such as <code>ddp</code> and <code>blaze</code>\n</li> <li>Explicitly include non-javascript files including CSS, Less, Sass, Stylus and static assets</li> <li>Take advantage of Meteor’s <a href=\"build-tool\">build system</a> to be automatically transpiled from languages like CoffeeScript</li> <li>Have a well defined way to ship different code for client and server, enabling different behavior in each context</li> <li>Get direct access to Meteor’s <a href=\"using-atmosphere-packages.md#package-namespacing\">package namespacing</a> and package global exports without having to explicitly use ES2015 <code>import</code>\n</li> <li>Enforce exact version dependencies between packages using Meteor’s <a href=\"writing-atmosphere-packages.md#version-constraints\">constraint resolver</a>\n</li> <li>Include <a href=\"build-tool#compiles-with-build-plugins\">build plugins</a> for Meteor’s build system</li> <li>Include pre-built binary code for different server architectures, such as Linux or Windows</li> </ul> <p>If your package depends on an Atmosphere package (which, in Meteor 1.3, includes the Meteor core packages), or needs to take advantage of Meteor’s <a href=\"build-tool\">build system</a>, writing an Atmosphere package might be the best option for now.</p> <h2 id=\"when-npm\">When to use npm packages</h2> <p>npm is a repository of general JavaScript packages. These packages were originally intended solely for the Node.js server-side environment, but as the JavaScript ecosystem matured, solutions arose to enable the use of npm packages in other environments such as the browser. Today, npm is used for all types of JavaScript packages.</p> <p>If you want to distribute and reuse code that you’ve written for a Meteor application, then you should consider publishing that code on npm if it’s general enough to be consumed by a wider JavaScript audience. It’s simple to <a href=\"using-npm-packages#using-npm\">use npm packages in Meteor applications</a>, and possible to <a href=\"writing-atmosphere-packages#npm-dependencies\">use npm packages within Atmosphere packages</a>, so even if your main audience is Meteor developers, npm might be the best choice.</p> <blockquote> <p>Meteor comes with npm bundled so that you can type <code>meteor npm</code> without worrying about installing it yourself. If you like, you can also use a globally installed npm to manage your packages.</p> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/atmosphere-vs-npm.html\" class=\"_attribution-link\">https://guide.meteor.com/atmosphere-vs-npm.html</a>\n  </p>\n</div>\n","writing-npm-packages":"<h1 class=\"title-page\">Writing npm Packages</h1>    <p>To create a new npm package:</p> <pre class=\"highlight bash\" data-language=\"bash\">mkdir my-package\ncd my-package/\nmeteor npm init\n</pre> <p>The last command creates a <code>package.json</code> file and prompts you for the package information. You may skip everything but <code>name</code>, <code>version</code>, and <code>entry point</code>. You can use the default <code>index.js</code> for <code>entry point</code>. This file is where you set your package’s exports:</p> <pre class=\"highlight js\" data-language=\"js\">// my-package/index.js\nexports.myPackageLog = function() {\n  console.log(\"logged from my-package\");\n};\n</pre> <p>Now apps that include this package can do:</p> <pre class=\"highlight js\" data-language=\"js\">import { myPackageLog } from 'my-package'\n\nmyPackageLog(); // &gt; \"logged from my-package\"\n</pre> <p>When choosing a name for your npm package, be sure to follow the <a href=\"https://docs.npmjs.com/files/package.json#name\" target=\"_blank\" rel=\"external\">npm guidelines</a>.</p> <h2 id=\"including-in-app\">Including in your app</h2> <p>When you are developing a new npm package for your app, there are a couple methods for including the package in your app:</p> <ul> <li>\n<strong>Inside node_modules</strong>: Place the package in your app’s <code>node_modules/</code> directory, and add the package to source control. Do this when you want everything in a single repository.</li> </ul> <pre class=\"highlight bash\" data-language=\"bash\">cd my-app/node_modules/\nmkdir my-package\ncd my-package/\nmeteor npm init\ngit add -f ./ # or use a git submodule\n</pre> <ul> <li>\n<strong>npm link</strong>: Place the package outside your app’s directory in a separate repository and use <a href=\"https://docs.npmjs.com/cli/link\" target=\"_blank\" rel=\"external\"><code>npm link</code></a>. Do this when you want to use the package in multiple apps.</li> </ul> <pre class=\"highlight bash\" data-language=\"bash\">cd ~/\nmkdir my-package\ncd my-package/\nmeteor npm init\ncd ~/my-app/\nmeteor npm link ~/my-package\n</pre> <p>Other developers will also need to run the <code>npm link</code> command.</p> <p>After either method, edit the <code>dependencies</code> attribute of <code>my-app/package.json</code>, adding <code>\"my-package\": \"1.0.0\"</code> (use the same version number you chose during <code>meteor npm init</code>).</p> <h2 id=\"publishing-npm\">Publishing your package</h2> <p>You can share your package with others by publishing it to the npm registry. While most packages are public, you can control who may view and use your package with <a href=\"https://docs.npmjs.com/private-modules/intro\" target=\"_blank\" rel=\"external\">private modules</a>).</p> <p>To publish publicly, <a href=\"https://docs.npmjs.com/getting-started/publishing-npm-packages\" target=\"_blank\" rel=\"external\">follow these instructions</a>. When you’re done, anyone can add your package to their app with <code>npm install --save your-package</code>.</p> <p>If you want to share packages during development, we recommend using the <a href=\"#including-in-app\">above methods</a> instead of the registry. If you use the registry, then every time you change the package, you need to increment the version number, publish, and then <code>npm update my-package</code> inside your app.</p> <h2 id=\"overriding-npm-packages\">Overriding packages with a local version</h2> <p>If you need to modify a package to do something that the published version doesn’t do, you can edit a local version of the package on your computer.</p> <p>Let’s say you want to modify the <code>left-pad</code> npm package. If you haven’t already, run inside your app directory:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor npm install --save left-pad\n</pre> <p>Now <code>left-pad</code> is included in your <code>package.json</code>, and the code has been downloaded to <code>node_modules/left_pad/</code>. Add the new directory to source control with:</p> <pre class=\"highlight bash\" data-language=\"bash\">git add -f node_modules/left_pad/\n</pre> <p>Now you can edit the package, commit, and push, and your teammates will get your version of the package. To ensure that your package doesn’t get overwritten during an <code>npm update</code>, change the default <a href=\"https://docs.npmjs.com/misc/semver#caret-ranges-123-025-004\" target=\"_blank\" rel=\"external\">caret version range</a> in your <code>package.json</code> to an exact version.</p> <p>Before:</p> <pre class=\"highlight\" data-language=\"highlight\">\"left-pad\": \"^1.0.2\",\n</pre> <p>After:</p> <pre class=\"highlight\" data-language=\"highlight\">\"left-pad\": \"1.0.2\",\n</pre> <p>An alternative method is maintaining a separate repository for the package and changing the <code>package.json</code> version number <a href=\"http://debuggable.com/posts/how-to-fork-patch-npm-modules:4e2eb9f3-e584-44be-b1a9-3db7cbdd56cb\" target=\"_blank\" rel=\"external\">to a git URL or tarball</a>, but every time you edit the separate repo, you’ll need to commit, push, and <code>npm update left-pad</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/writing-npm-packages.html\" class=\"_attribution-link\">https://guide.meteor.com/writing-npm-packages.html</a>\n  </p>\n</div>\n","accounts":"<h1 class=\"title-page\">Users and Accounts</h1> <div class=\"subtitle-page\">How to build user login functionality into a Meteor app. Let your users log in with passwords, Facebook, Google, GitHub, and more.</div>    <p>After reading this article, you’ll know:</p> <ol> <li>What features in core Meteor enable user accounts</li> <li>How to use accounts-ui for a quick prototype</li> <li>How to use the useraccounts family of packages to build your login UI</li> <li>How to build a fully-featured password login experience</li> <li>How to enable login through OAuth providers like Facebook</li> <li>How to add custom data to Meteor’s users collection</li> <li>How to manage user roles and permissions</li> </ol> <h2 id=\"core-meteor\">Features in core Meteor</h2> <p>Before we get into all of the different user-facing accounts functionality you can add with Meteor, let’s go over some of the features built into the Meteor DDP protocol and <code>accounts-base</code> package. These are the parts of Meteor that you’ll definitely need to be aware of if you have any user accounts in your app; most of everything else is optional and added/removed via packages.</p> <h3 id=\"userid-ddp\">userId in DDP</h3> <p>DDP is Meteor’s built-in pub/sub and RPC protocol. You can read about how to use it in the <a href=\"data-loading\">Data Loading</a> and <a href=\"methods\">Methods</a> articles. In addition to the concepts of data loading and method calls, DDP has one more feature built in - the idea of a <code>userId</code> field on a connection. This is the place where login state is tracked, regardless of which accounts UI package or login service you are using.</p> <p>This built-in feature means that you always get <code>this.userId</code> inside Methods and Publications, and can access the user ID on the client. This is a great starting point for building your own custom accounts system, but most developers won’t need to worry about the mechanics, since you’ll mostly be interacting with the <code>accounts-base</code> package instead.</p> <h3 id=\"accounts-base\"><code>accounts-base</code></h3> <p>This package is the core of Meteor’s developer-facing user accounts functionality. This includes:</p> <ol> <li>A users collection with a standard schema, accessed through <a href=\"http://docs.meteor.com/#/full/meteor_users\" target=\"_blank\" rel=\"external\"><code>Meteor.users</code></a>, and the client-side singletons <a href=\"http://docs.meteor.com/#/full/meteor_userid\" target=\"_blank\" rel=\"external\"><code>Meteor.userId()</code></a> and <a href=\"http://docs.meteor.com/#/full/meteor_user\" target=\"_blank\" rel=\"external\"><code>Meteor.user()</code></a>, which represent the login state on the client.</li> <li>A variety of helpful other generic methods to keep track of login state, log out, validate users, etc. Visit the <a href=\"http://docs.meteor.com/#/full/accounts_api\" target=\"_blank\" rel=\"external\">Accounts section of the docs</a> to find a complete list.</li> <li>An API for registering new login handlers, which is used by all of the other accounts packages to integrate with the accounts system. There isn’t any official documentation for this API, but you can <a href=\"https://meteorhacks.com/extending-meteor-accounts\" target=\"_blank\" rel=\"external\">read more about it on the MeteorHacks blog</a>.</li> </ol> <p>Usually, you don’t need to include <code>accounts-base</code> yourself since it’s added for you if you use <code>accounts-password</code> or similar, but it’s good to be aware of what is what.</p> <h2 id=\"accounts-ui\">Fast prototyping with <code>accounts-ui</code>\n</h2> <p>Often, a complicated accounts system is not the first thing you want to build when you’re starting out with a new app, so it’s useful to have something you can just drop in quickly. This is where <code>accounts-ui</code> comes in - it’s just one line that you drop into your app to get an accounts system. To add it:</p> <pre class=\"highlight js\" data-language=\"js\">meteor add accounts-ui\n</pre> <p>Then just include it anywhere in a Blaze template:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; loginButtons}}\n</pre> <p>Then, make sure to pick a login provider; they will automatically integrate with <code>accounts-ui</code>:</p> <pre class=\"highlight sh\" data-language=\"sh\"># pick one or more of the below\nmeteor add accounts-password\nmeteor add accounts-facebook\nmeteor add accounts-google\nmeteor add accounts-github\nmeteor add accounts-twitter\nmeteor add accounts-meetup\nmeteor add accounts-meteor-developer\n</pre> <p>Now just open your app, follow the configuration steps, and you’re good to go - if you’ve done the <a href=\"https://www.meteor.com/tutorials/blaze/adding-user-accounts\" target=\"_blank\" rel=\"external\">Meteor tutorial</a>, you’ve already seen this in action. Of course, in a production application, you probably want a more custom user interface and some logic to have a more tailored UX, but that’s why we have the rest of this guide.</p> <p>Here are a couple of screenshots of <code>accounts-ui</code> so you know what to expect:</p> <p><img src=\"https://guide.meteor.com/images/accounts-ui.png\"></p> <h2 id=\"useraccounts\">Customizable UI: useraccounts</h2> <p>Once you’ve gotten your initial prototype up and running with <code>accounts-ui</code>, you’ll want to move to something more powerful and configurable so that you can better integrate your login flow with the rest of your app. The <a href=\"https://github.com/meteor-useraccounts/core/blob/master/Guide.md\" target=\"_blank\" rel=\"external\"><code>useraccounts</code> family of packages</a> is the most powerful set of accounts management UI controls available for Meteor today. If you need even more customization, you can also roll your own system, but it’s worth trying <code>useraccounts</code> first.</p> <h3 id=\"useraccounts-flexibility\">Use any router or UI framework</h3> <p>The first thing to understand about <code>useraccounts</code> is that the core accounts management logic is independent of the HTML templates and routing packages. This means you can use <a href=\"https://atmospherejs.com/useraccounts/core\" target=\"_blank\" rel=\"external\"><code>useraccounts:core</code></a> to build your own set of login templates. Generally, you’ll want to pick one login template package and one login routing package. The options for templates include:</p> <ul> <li>\n<a href=\"https://atmospherejs.com/useraccounts/unstyled\" target=\"_blank\" rel=\"external\"><code>useraccounts:unstyled</code></a> which lets you bring your own CSS; this one is used in the Todos example app to make the login UI blend seamlessly with the rest of the app.</li> <li>Pre-built templates for <a href=\"https://github.com/meteor-useraccounts/core/blob/master/Guide.md#available-versions\" target=\"_blank\" rel=\"external\">Bootstrap, Semantic UI, Materialize, and more</a>. These templates don’t come with the actual CSS framework, so you can pick your favorite Bootstrap package, for example.</li> </ul> <p>While it’s optional and the basic functionality will work without it, it’s also a good idea to pick a router integration:</p> <ul> <li>\n<a href=\"https://atmospherejs.com/useraccounts/flow-routing\" target=\"_blank\" rel=\"external\">Flow Router</a>, the router <a href=\"routing\">recommended in this guide</a>.</li> <li>\n<a href=\"https://atmospherejs.com/useraccounts/iron-routing\" target=\"_blank\" rel=\"external\">Iron Router</a>, another popular router in the Meteor community.</li> </ul> <p>In the example app we are using the Flow Router integration with great success. Some of the later sections will cover how to customize the routes and templates to fit your app better.</p> <h3 id=\"useraccounts-drop-in\">Drop-in UI without routing</h3> <p>If you don’t want to configure routing for your login flow, you can just drop in a self-managing accounts screen. Wherever you want the accounts UI template to render, just include the <code>atForm</code> template, like so:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; atForm}}\n</pre> <p>Once you configure routing according to <a href=\"#useraccounts-customizing-routes\">the section below</a>, you’ll want to remove this inclusion.</p> <h3 id=\"useraccounts-customizing-templates\">Customizing templates</h3> <p>For some apps, the off-the-shelf login templates provided by the various <code>useraccounts</code> UI packages will work as-is, but most apps will want to customize some of the presentation. There’s a simple way to do that using the template replacement functionality of the <code>aldeed:template-extension</code> package.</p> <p>First, figure out which template you want to replace by looking at the source code of the package. For example, in the <code>useraccounts:unstyled</code> package, the templates are listed <a href=\"https://github.com/meteor-useraccounts/unstyled/tree/master/lib\" target=\"_blank\" rel=\"external\">in this directory on GitHub</a>. By squinting at the file names and looking for some of the HTML strings, we can figure out that we might be interested in replacing the <code>atPwdFormBtn</code> template. Let’s take a look at the original template:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"atPwdFormBtn\"&gt;\n  &lt;button type=\"submit\" class=\"at-btn submit {{submitDisabled}}\" id=\"at-btn\"&gt;\n    {{buttonText}}\n  &lt;/button&gt;\n&lt;/template&gt;\n</pre> <p>Once you’ve identified which template you need to replace, define a new template. In this case, we want to modify the class on the button to work with the CSS for the rest of the app. There are a few things to keep in mind when overriding a template:</p> <ol> <li>Render the helpers in the same way the previous template did. In this case we are using <code>buttonText</code>.</li> <li>Keep any <code>id</code> attributes, like <code>at-btn</code>, since those are used for event handling.</li> </ol> <p>Here’s what our new override template looks like:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"override-atPwdFormBtn\"&gt;\n  &lt;button type=\"submit\" class=\"btn-primary\" id=\"at-btn\"&gt;\n    {{buttonText}}\n  &lt;/button&gt;\n&lt;/template&gt;\n</pre> <p>Then, use the <code>replaces</code> function on the template to override the existing template from <code>useraccounts</code>:</p> <pre class=\"highlight js\" data-language=\"js\">Template['override-atPwdFormBtn'].replaces('atPwdFormBtn');\n</pre> <h3 id=\"useraccounts-customizing-routes\">Customizing routes</h3> <p>In addition to having control over the templates, you’ll want to be able to control the routing and URLs for the different views offered by <code>useraccounts</code>. Since Flow Router is the officially recommended routing option for Meteor, we’ll go over that in particular.</p> <p>First, we need to configure the layout we want to use when rendering the accounts templates:</p> <pre class=\"highlight js\" data-language=\"js\">AccountsTemplates.configure({\n  defaultTemplate: 'Auth_page',\n  defaultLayout: 'App_body',\n  defaultContentRegion: 'main',\n  defaultLayoutRegions: {}\n});\n</pre> <p>In this case, we want to use the <code>App_body</code> layout template for all of the accounts-related pages. This template has a content region called <code>main</code>. Now, let’s configure some routes:</p> <pre class=\"highlight js\" data-language=\"js\">// Define these routes in a file loaded on both client and server\nAccountsTemplates.configureRoute('signIn', {\n  name: 'signin',\n  path: '/signin'\n});\n\nAccountsTemplates.configureRoute('signUp', {\n  name: 'join',\n  path: '/join'\n});\n\nAccountsTemplates.configureRoute('forgotPwd');\n\nAccountsTemplates.configureRoute('resetPwd', {\n  name: 'resetPwd',\n  path: '/reset-password'\n});\n</pre> <p>Now, we can easily render links to our login page like so:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;div class=\"btns-group\"&gt;\n  &lt;a href=\"{{pathFor 'signin'}}\" class=\"btn-secondary\"&gt;Sign In&lt;/a&gt;\n  &lt;a href=\"{{pathFor 'join'}}\" class=\"btn-secondary\"&gt;Join&lt;/a&gt;\n&lt;/div&gt;\n</pre> <p>Note that we have specified a password reset route. Normally, we would have to configure Meteor’s accounts system to send this route in password reset emails, but the <code>useraccounts:flow-routing</code> package does it for us. <a href=\"#email-flows\">Read more about configuring email flows below.</a></p> <p>You can find a complete list of different available routes in the <a href=\"https://github.com/meteor-useraccounts/flow-routing#routes\" target=\"_blank\" rel=\"external\">documentation the <code>useraccounts:flow-routing</code></a>.</p> <h3 id=\"useraccounts-further-customization\">Further customization</h3> <p><code>useraccounts</code> offers many other customization options beyond templates and routing. Read the <a href=\"https://github.com/meteor-useraccounts/core/blob/master/Guide.md\" target=\"_blank\" rel=\"external\"><code>useraccounts</code> guide</a> to learn about all of the other options.</p> <h2 id=\"accounts-password\">Password login</h2> <p>Meteor comes with a secure and fully-featured password login system out of the box. To use it, add the package:</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor add accounts-password\n</pre> <p>To see what options are available to you, read the complete description of the <a href=\"http://docs.meteor.com/#/full/accounts_passwords\" target=\"_blank\" rel=\"external\"><code>accounts-password</code> API in the Meteor docs</a>.</p> <h3 id=\"requiring-username-email\">Requiring username or email</h3> <blockquote> <p>Note: You don’t have to do this if you’re using <code>useraccounts</code>. It disables the regular Meteor client-side account creation functions for you and does custom validation.</p> </blockquote> <p>By default, the <code>Accounts.createUser</code> function provided by <code>accounts-password</code> allows you to create an account with a username, email, or both. Most apps expect a specific combination of the two, so you will certainly want to validate the new user creation:</p> <pre class=\"highlight js\" data-language=\"js\">// Ensuring every user has an email address, should be in server-side code\nAccounts.validateNewUser((user) =&gt; {\n  new SimpleSchema({\n    _id: { type: String },\n    emails: { type: Array },\n    'emails.$': { type: Object },\n    'emails.$.address': { type: String },\n    'emails.$.verified': { type: Boolean },\n    createdAt: { type: Date },\n    services: { type: Object, blackbox: true }\n  }).validate(user);\n\n  // Return true to allow user creation to proceed\n  return true;\n});\n</pre> <h3 id=\"multiple-emails\">Multiple emails</h3> <p>Often, users might want to associate multiple email addresses with the same account. <code>accounts-password</code> addresses this case by storing the email addresses as an array in the user collection. There are some handy API methods to deal with <a href=\"http://docs.meteor.com/api/passwords.html#Accounts-addEmail\" target=\"_blank\" rel=\"external\">adding</a>, <a href=\"http://docs.meteor.com/api/passwords.html#Accounts-removeEmail\" target=\"_blank\" rel=\"external\">removing</a>, and <a href=\"http://docs.meteor.com/api/passwords.html#Accounts-verifyEmail\" target=\"_blank\" rel=\"external\">verifying</a> emails.</p> <p>One useful thing to add for your app can be the concept of a “primary” email address. This way, if the user has added multiple emails, you know where to send confirmation emails and similar.</p> <h3 id=\"case-sensitivity\">Case sensitivity</h3> <p>Before Meteor 1.2, all email addresses and usernames in the database were considered to be case-sensitive. This meant that if you registered an account as <code>AdaLovelace@example.com</code>, and then tried to log in with <code>adalovelace@example.com</code>, you’d see an error indicating that no user with that email exists. Of course, this can be quite confusing, so we decided to improve things in Meteor 1.2. But the situation was not as simple as it seemed; since MongoDB doesn’t have a concept of case-insensitive indexes, it was impossible to guarantee unique emails at the database level. For this reason, we have some special APIs for querying and updating users which manage the case-sensitivity problem at the application level.</p> <h4 id=\"case-sensitivity-in-my-app\">What does this mean for my app?</h4> <p>Just follow one simple rule: don’t query the database by <code>username</code> or <code>email</code> directly. Instead, use the <a href=\"http://docs.meteor.com/api/passwords.html#Accounts-findUserByUsername\" target=\"_blank\" rel=\"external\"><code>Accounts.findUserByUsername</code></a> and <a href=\"http://docs.meteor.com/api/passwords.html#Accounts-findUserByEmail\" target=\"_blank\" rel=\"external\"><code>Accounts.findUserByEmail</code></a> methods provided by Meteor. This will run a query for you that is case-insensitive, so you will always find the user you are looking for.</p> <h3 id=\"email-flows\">Email flows</h3> <p>When you have a login system for your app based on user emails, that opens up the possibility for email-based account flows. The common thing between all of these workflows is that they involve sending a unique link to the user’s email address, which does something special when it is clicked. Let’s look at some common examples that Meteor’s <code>accounts-password</code> package supports out of the box:</p> <ol> <li>\n<strong>Password reset.</strong> When the user clicks the link in their email, they are taken to a page where they can enter a new password for their account.</li> <li>\n<strong>User enrollment.</strong> A new user is created by an administrator, but no password is set. When the user clicks the link in their email, they are taken to a page where they can set a new password for their account. Very similar to password reset.</li> <li>\n<strong>Email verification.</strong> When the user clicks the link in their email, the application records that this email does indeed belong to the correct user.</li> </ol> <p>Here, we’ll talk about how to manage the whole process manually from start to finish.</p> <h4 id=\"default-email-flow\">Email works out of the box with accounts UI packages</h4> <p>If you want something that just works out of the box, you can use <code>accounts-ui</code> or <code>useraccounts</code> which basically do everything for you. Only follow the directions below if you definitely want to build all parts of the email flow yourself.</p> <h4 id=\"sending-email\">Sending the email</h4> <p><code>accounts-password</code> comes with handy functions that you can call from the server to send an email. They are named for exactly what they do:</p> <ol> <li><a href=\"http://docs.meteor.com/#/full/accounts_sendresetpasswordemail\" target=\"_blank\" rel=\"external\"><code>Accounts.sendResetPasswordEmail</code></a></li> <li><a href=\"http://docs.meteor.com/#/full/accounts_sendenrollmentemail\" target=\"_blank\" rel=\"external\"><code>Accounts.sendEnrollmentEmail</code></a></li> <li><a href=\"http://docs.meteor.com/#/full/accounts_sendverificationemail\" target=\"_blank\" rel=\"external\"><code>Accounts.sendVerificationEmail</code></a></li> </ol> <p>The email is generated using the email templates from <a href=\"http://docs.meteor.com/#/full/accounts_emailtemplates\" target=\"_blank\" rel=\"external\">Accounts.emailTemplates</a>, and include links generated with <code>Accounts.urls</code>. We’ll go into more detail about customizing the email content and URL later.</p> <h4 id=\"identifying-link-click\">Identifying when the link is clicked</h4> <p>When the user receives the email and clicks the link inside, their web browser will take them to your app. Now, you need to be able to identify these special links and act appropriately. If you haven’t customized the link URL, then you can use some built-in callbacks to identify when the app is in the middle of an email flow.</p> <p>Normally, when the Meteor client connects to the server, the first thing it does is pass the <em>login resume token</em> to re-establish a previous login. However, when these callbacks from the email flow are triggered, the resume token is not sent until your code signals that it has finished handling the request by calling the <code>done</code> function that is passed into the registered callback. This means that if you were previously logged in as user A, and then you clicked the reset password link for user B, but then you cancelled the password reset flow by calling <code>done()</code>, the client would log in as A again.</p> <ol> <li><a href=\"http://docs.meteor.com/#/full/Accounts-onResetPasswordLink\" target=\"_blank\" rel=\"external\"><code>Accounts.onResetPasswordLink</code></a></li> <li><a href=\"http://docs.meteor.com/#/full/Accounts-onEnrollmentLink\" target=\"_blank\" rel=\"external\"><code>Accounts.onEnrollmentLink</code></a></li> <li><a href=\"http://docs.meteor.com/#/full/Accounts-onEmailVerificationLink\" target=\"_blank\" rel=\"external\"><code>Accounts.onEmailVerificationLink</code></a></li> </ol> <p>Here’s how you would use one of these functions:</p> <pre class=\"highlight js\" data-language=\"js\">Accounts.onResetPasswordLink((token, done) =&gt; {\n  // Display the password reset UI, get the new password...\n\n  Accounts.resetPassword(token, newPassword, (err) =&gt; {\n    if (err) {\n      // Display error\n    } else {\n      // Resume normal operation\n      done();\n    }\n  });\n})\n</pre> <p>If you want a different URL for your reset password page, you need to customize it using the <code>Accounts.urls</code> option:</p> <pre class=\"highlight js\" data-language=\"js\">Accounts.urls.resetPassword = (token) =&gt; {\n  return Meteor.absoluteUrl(`reset-password/${token}`);\n};\n</pre> <p>If you have customized the URL, you will need to add a new route to your router that handles the URL you have specified, and the default <code>Accounts.onResetPasswordLink</code> and friends won’t work for you.</p> <h4 id=\"completing-email-flow\">Displaying an appropriate UI and completing the process</h4> <p>Now that you know that the user is attempting to reset their password, set an initial password, or verify their email, you should display an appropriate UI to allow them to do so. For example, you might want to show a page with a form for the user to enter their new password.</p> <p>When the user submits the form, you need to call the appropriate function to commit their change to the database. Each of these functions takes the new value and the token you got from the event in the previous step.</p> <ol> <li>\n<a href=\"http://docs.meteor.com/#/full/accounts_resetpassword\" target=\"_blank\" rel=\"external\"><code>Accounts.resetPassword</code></a> - this one should be used both for resetting the password, and enrolling a new user; it accepts both kinds of tokens.</li> <li><a href=\"http://docs.meteor.com/#/full/accounts_verifyemail\" target=\"_blank\" rel=\"external\"><code>Accounts.verifyEmail</code></a></li> </ol> <p>After you have called one of the two functions above or the user has cancelled the process, call the <code>done</code> function you got in the link callback. This will tell Meteor to get out of the special state it enters when you’re doing one of the email account flows.</p> <h3 id=\"customizing-emails\">Customizing accounts emails</h3> <p>You will probably want to customize the emails <code>accounts-password</code> will send on your behalf. This can be easily done through the <a href=\"http://docs.meteor.com/#/full/accounts_emailtemplates\" target=\"_blank\" rel=\"external\"><code>Accounts.emailTemplates</code> API</a>. Below is some example code from the Todos app:</p> <pre class=\"highlight js\" data-language=\"js\">Accounts.emailTemplates.siteName = \"Meteor Guide Todos Example\";\nAccounts.emailTemplates.from = \"Meteor Todos Accounts &lt;accounts@example.com&gt;\";\n\nAccounts.emailTemplates.resetPassword = {\n  subject(user) {\n    return \"Reset your password on Meteor Todos\";\n  },\n  text(user, url) {\n    return `Hello!\nClick the link below to reset your password on Meteor Todos.\n${url}\nIf you didn't request this email, please ignore it.\nThanks,\nThe Meteor Todos team\n`\n  },\n  html(user, url) {\n    // This is where HTML email content would go.\n    // See the section about html emails below.\n  }\n};\n</pre> <p>As you can see, we can use the ES2015 template string functionality to generate a multi-line string that includes the password reset URL. We can also set a custom <code>from</code> address and email subject.</p> <h4 id=\"html-emails\">HTML emails</h4> <p>If you’ve ever needed to deal with sending pretty HTML emails from an app, you know that it can quickly become a nightmare. Compatibility of popular email clients with basic HTML features like CSS is notoriously spotty, so it is hard to author something that works at all. Start with a <a href=\"https://github.com/leemunroe/responsive-html-email-template\" target=\"_blank\" rel=\"external\">responsive email template</a> or <a href=\"http://foundation.zurb.com/emails/email-templates.html\" target=\"_blank\" rel=\"external\">framework</a>, and then use a tool to convert your email content into something that is compatible with all email clients. <a href=\"http://blog.mailgun.com/transactional-html-email-templates/\" target=\"_blank\" rel=\"external\">This blog post by Mailgun covers some of the main issues with HTML email.</a> In theory, a community package could extend Meteor’s build system to do the email compilation for you, but at the time of writing we were not aware of any such packages.</p> <h2 id=\"oauth\">OAuth login</h2> <p>In the distant past, it could have been a huge headache to get Facebook or Google login to work with your app. Thankfully, most popular login providers have standardized around some version of <a href=\"https://en.wikipedia.org/wiki/OAuth\" target=\"_blank\" rel=\"external\">OAuth</a>, and Meteor supports some of the most popular login services out of the box.</p> <h3 id=\"supported-login-services\">Facebook, Google, and more</h3> <p>Here’s a complete list of login providers for which Meteor actively maintains core packages:</p> <ol> <li>Facebook with <code>accounts-facebook</code>\n</li> <li>Google with <code>accounts-google</code>\n</li> <li>GitHub with <code>accounts-github</code>\n</li> <li>Twitter with <code>accounts-twitter</code>\n</li> <li>Meetup with <code>accounts-meetup</code>\n</li> <li>Meteor Developer Accounts with <code>accounts-meteor-developer</code>\n</li> </ol> <p>There is a package for logging in with Weibo, but it is no longer being actively maintained.</p> <h3 id=\"oauth-logging-in\">Logging in</h3> <p>If you are using an off-the-shelf login UI like <code>accounts-ui</code> or <code>useraccounts</code>, you don’t need to write any code after adding the relevant package from the list above. If you are building a login experience from scratch, you can log in programmatically using the <a href=\"http://docs.meteor.com/#/full/meteor_loginwithexternalservice\" target=\"_blank\" rel=\"external\"><code>Meteor.loginWith&lt;Service&gt;</code></a> function. It looks like this:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.loginWithFacebook({\n  requestPermissions: ['user_friends', 'public_profile', 'email']\n}, (err) =&gt; {\n  if (err) {\n    // handle error\n  } else {\n    // successful login!\n  }\n});\n</pre> <h3 id=\"oauth-configuration\">Configuring OAuth</h3> <p>There are a few points to know about configuring OAuth login:</p> <ol> <li>\n<strong>Client ID and secret.</strong> It’s best to keep your OAuth secret keys outside of your source code, and pass them in through Meteor.settings. Read how in the <a href=\"security#api-keys-oauth\">Security article</a>.</li> <li>\n<strong>Redirect URL.</strong> On the OAuth provider’s side, you’ll need to specify a <em>redirect URL</em>. The URL will look like: <code>https://www.example.com/_oauth/facebook</code>. Replace <code>facebook</code> with the name of the service you are using. Note that you will need to configure two URLs - one for your production app, and one for your development environment, where the URL might be something like <code>http://localhost:3000/_oauth/facebook</code>.</li> <li>\n<strong>Permissions.</strong> Each login service provider should have documentation about which permissions are available. For example, <a href=\"https://developers.facebook.com/docs/facebook-login/permissions\" target=\"_blank\" rel=\"external\">here is the page for Facebook</a>. If you want additional permissions to the user’s data when they log in, pass some of these strings in the <code>requestPermissions</code> option to <code>Meteor.loginWithFacebook</code> or <a href=\"http://docs.meteor.com/#/full/accounts_ui_config\" target=\"_blank\" rel=\"external\"><code>Accounts.ui.config</code></a>. In the next section we’ll talk about how to retrieve that data.</li> </ol> <h3 id=\"oauth-calling-api\">Calling service API for more data</h3> <p>If your app supports or even requires login with an external service such as Facebook, it’s natural to also want to use that service’s API to request additional data about that user. For example, you might want to get a list of a Facebook user’s photos.</p> <p>First, you’ll need to request the relevant permissions when logging in the user. See the <a href=\"#oauth-configuration\">section above</a> for how to pass those options.</p> <p>Then, you need to get the user’s access token. You can find this token in the <code>Meteor.users</code> collection under the <code>services</code> field. For example, if you wanted to get a particular user’s Facebook access token:</p> <pre class=\"highlight js\" data-language=\"js\">// Given a userId, get the user's Facebook access token\nconst user = Meteor.users.findOne(userId);\nconst fbAccessToken = user.services.facebook.accessToken;\n</pre> <p>For more details about the data stored in the user database, read the section below about accessing user data.</p> <p>Now that you have the access token, you need to actually make a request to the appropriate API. Here you have two options:</p> <ol> <li>Use the <a href=\"http://docs.meteor.com/#/full/http\" target=\"_blank\" rel=\"external\"><code>http</code> package</a> to access the service’s API directly. You’ll probably need to pass the access token from above in a header. For details you’ll need to search the API documentation for the service.</li> <li>Use a package from Atmosphere or npm that wraps the API into a nice JavaScript interface. For example, if you’re trying to load data from Facebook you could use the <a href=\"https://www.npmjs.com/package/fbgraph\" target=\"_blank\" rel=\"external\">fbgraph</a> npm package. Read more about how to use npm with your app in the <a href=\"build-tool#npm\">Build System article</a>.</li> </ol> <h2 id=\"displaying-user-data\">Loading and displaying user data</h2> <p>Meteor’s accounts system, as implemented in <code>accounts-base</code>, also includes a database collection and generic functions for getting data about users.</p> <h3 id=\"current-user\">Currently logged in user</h3> <p>Once a user is logged into your app with one of the methods described above, it is useful to be able to identify which user is logged in, and get the data provided during the registration process.</p> <h4 id=\"current-user-client\">On the client: Meteor.userId()</h4> <p>For code that runs on the client, the global <code>Meteor.userId()</code> reactive function will give you the ID of the currently logged in user.</p> <p>In addition to that core API, there are some helpful shorthand helpers: <code>Meteor.user()</code>, which is exactly equal to calling <code>Meteor.users.findOne(Meteor.userId())</code>, and the <code>{{currentUser}}</code> Blaze helper that returns the value of <code>Meteor.user()</code>.</p> <p>Note that there is a benefit to restricting the places you access the current user to make your UI more testable and modular. Read more about this in the <a href=\"ui-ux#global-stores\">UI article</a>.</p> <h4 id=\"current-user-server\">On the server: this.userId</h4> <p>On the server, each connection has a different logged in user, so there is no global logged-in user state by definition. Since Meteor tracks the environment for each Method call, you can still use the <code>Meteor.userId()</code> global, which returns a different value depending on which Method you call it from, but you can run into edge cases when dealing with asynchronous code. Also, <code>Meteor.userId()</code> won’t work inside publications.</p> <p>We suggest using the <code>this.userId</code> property on the context of Methods and publications instead, and passing that around through function arguments to wherever you need it.</p> <pre class=\"highlight js\" data-language=\"js\">// Accessing this.userId inside a publication\nMeteor.publish('lists.private', function() {\n  if (!this.userId) {\n    return this.ready();\n  }\n\n  return Lists.find({\n    userId: this.userId\n  }, {\n    fields: Lists.publicFields\n  });\n});\n</pre> <pre class=\"highlight js\" data-language=\"js\">// Accessing this.userId inside a Method\nMeteor.methods({\n  'todos.updateText'({ todoId, newText }) {\n    new SimpleSchema({\n      todoId: { type: String },\n      newText: { type: String }\n    }).validate({ todoId, newText }),\n\n    const todo = Todos.findOne(todoId);\n\n    if (!todo.editableBy(this.userId)) {\n      throw new Meteor.Error('todos.updateText.unauthorized',\n        'Cannot edit todos in a private list that is not yours');\n    }\n\n    Todos.update(todoId, {\n      $set: { text: newText }\n    });\n  }\n});\n</pre> <h3 id=\"meteor-users-collection\">The Meteor.users collection</h3> <p>Meteor comes with a default MongoDB collection for user data. It’s stored in the database under the name <code>users</code>, and is accessible in your code through <code>Meteor.users</code>. The schema of a user document in this collection will depend on which login service was used to create the account. Here’s an example of a user that created their account with <code>accounts-password</code>:</p> <pre class=\"highlight js\" data-language=\"js\">{\n  \"_id\": \"DQnDpEag2kPevSdJY\",\n  \"createdAt\": \"2015-12-10T22:34:17.610Z\",\n  \"services\": {\n    \"password\": {\n      \"bcrypt\": \"XXX\"\n    },\n    \"resume\": {\n      \"loginTokens\": [\n        {\n          \"when\": \"2015-12-10T22:34:17.615Z\",\n          \"hashedToken\": \"XXX\"\n        }\n      ]\n    }\n  },\n  \"emails\": [\n    {\n      \"address\": \"ada@lovelace.com\",\n      \"verified\": false\n    }\n  ]\n}\n</pre> <p>Here’s what the same user would look like if they instead logged in with Facebook:</p> <pre class=\"highlight js\" data-language=\"js\">{\n  \"_id\": \"Ap85ac4r6Xe3paeAh\",\n  \"createdAt\": \"2015-12-10T22:29:46.854Z\",\n  \"services\": {\n    \"facebook\": {\n      \"accessToken\": \"XXX\",\n      \"expiresAt\": 1454970581716,\n      \"id\": \"XXX\",\n      \"email\": \"ada@lovelace.com\",\n      \"name\": \"Ada Lovelace\",\n      \"first_name\": \"Ada\",\n      \"last_name\": \"Lovelace\",\n      \"link\": \"https://www.facebook.com/app_scoped_user_id/XXX/\",\n      \"gender\": \"female\",\n      \"locale\": \"en_US\",\n      \"age_range\": {\n        \"min\": 21\n      }\n    },\n    \"resume\": {\n      \"loginTokens\": [\n        {\n          \"when\": \"2015-12-10T22:29:46.858Z\",\n          \"hashedToken\": \"XXX\"\n        }\n      ]\n    }\n  },\n  \"profile\": {\n    \"name\": \"Sashko Stubailo\"\n  }\n}\n</pre> <p>Note that the schema is different when users register with different login services. There are a few things to be aware of when dealing with this collection:</p> <ol> <li>User documents in the database have secret data like access keys and hashed passwords. When <a href=\"#publish-custom-data\">publishing user data to the client</a>, be extra careful not to include anything that client shouldn’t be able to see.</li> <li>DDP, Meteor’s data publication protocol, only knows how to resolve conflicts in top-level fields. This means that you can’t have one publication send <code>services.facebook.first_name</code> and another send <code>services.facebook.locale</code> - one of them will win, and only one of the fields will actually be available on the client. The best way to fix this is to denormalize the data you want onto custom top-level fields, as described in the section about <a href=\"#custom-user-data\">custom user data</a>.</li> <li>The OAuth login service packages populate <code>profile.name</code>. We don’t recommend using this but, if you plan to, make sure to deny client-side writes to <code>profile</code>. See the section about the <a href=\"dont-use-profile\"><code>profile</code> field on users</a>.</li> <li>When finding users by email or username, make sure to use the case-insensitive functions provided by <code>accounts-password</code>. See the <a href=\"#case-sensitivity\">section about case-sensitivity</a> for more details.</li> </ol> <h2 id=\"custom-user-data\">Custom data about users</h2> <p>As your app gets more complex, you will invariably need to store some data about individual users, and the most natural place to put that data is in additional fields on the <code>Meteor.users</code> collection described above. In a more normalized data situation it would be a good idea to keep Meteor’s user data and yours in two separate tables, but since MongoDB doesn’t deal well with data associations it makes sense to just use one collection.</p> <h3 id=\"top-level-fields\">Add top-level fields onto the user document</h3> <p>The best way to store your custom data onto the <code>Meteor.users</code> collection is to add a new uniquely-named top-level field on the user document. For example, if you wanted to add a mailing address to a user, you could do it like this:</p> <pre class=\"highlight js\" data-language=\"js\">// Using address schema from schema.org\n// https://schema.org/PostalAddress\nconst newMailingAddress = {\n  addressCountry: 'US',\n  addressLocality: 'Seattle',\n  addressRegion: 'WA',\n  postalCode: '98052',\n  streetAddress: \"20341 Whitworth Institute 405 N. Whitworth\"\n};\n\nMeteor.users.update(userId, {\n  $set: {\n    mailingAddress: newMailingAddress\n  }\n});\n</pre> <p>You can use any field name other than those <a href=\"http://docs.meteor.com/api/accounts.html#Meteor-users\" target=\"_blank\" rel=\"external\">used by the Accounts sytem</a>.</p> <h3 id=\"adding-fields-on-registration\">Adding fields on user registration</h3> <p>The code above is just code that you could run on the server inside a Meteor Method to set someone’s mailing address. Sometimes, you want to set a field when the user first creates their account, for example to initialize a default value or compute something from their social data. You can do this using <a href=\"http://docs.meteor.com/#/full/accounts_oncreateuser\" target=\"_blank\" rel=\"external\"><code>Accounts.onCreateUser</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">// Generate user initials after Facebook login\nAccounts.onCreateUser((options, user) =&gt; {\n  if (! user.services.facebook) {\n    throw new Error('Expected login with Facebook only.');\n  }\n\n  const { first_name, last_name } = user.services.facebook;\n  user.initials = first_name[0].toUpperCase() + last_name[0].toUpperCase();\n\n  // Don't forget to return the new user object at the end!\n  return user;\n});\n</pre> <p>Note that the <code>user</code> object provided doesn’t have an <code>_id</code> field yet. If you need to do something with the new user’s ID inside this function, a useful trick can be to generate the ID yourself:</p> <pre class=\"highlight js\" data-language=\"js\">// Generate a todo list for each new user\nAccounts.onCreateUser((options, user) =&gt; {\n  // Generate a user ID ourselves\n  user._id = Random.id(); // Need to add the `random` package\n\n  // Use the user ID we generated\n  Lists.createListForUser(user._id);\n\n  // Don't forget to return the new user object at the end!\n  return user;\n});\n</pre> <h3 id=\"dont-use-profile\">Don’t use profile</h3> <p>There’s a tempting existing field called <code>profile</code> that is added by default when a new user registers. This field was historically intended to be used as a scratch pad for user-specific data - maybe their image avatar, name, intro text, etc. Because of this, <strong>the <code>profile</code> field on every user is automatically writeable by that user from the client</strong>. It’s also automatically published to the client for that particular user.</p> <p>It turns out that having a field writeable by default without making that super obvious might not be the best idea. There are many stories of new Meteor developers storing fields such as <code>isAdmin</code> on <code>profile</code>… and then a malicious user can easily set that to true whenever they want, making themselves an admin. Even if you aren’t concerned about this, it isn’t a good idea to let malicious users store arbitrary amounts of data in your database.</p> <p>Rather than dealing with the specifics of this field, it can be helpful to just ignore its existence entirely. You can safely do that as long as you deny all writes from the client:</p> <pre class=\"highlight js\" data-language=\"js\">// Deny all client-side updates to user documents\nMeteor.users.deny({\n  update() { return true; }\n});\n</pre> <p>Even ignoring the security implications of <code>profile</code>, it isn’t a good idea to put all of your app’s custom data onto one field. As discussed in the <a href=\"collections#schema-design\">Collections article</a>, Meteor’s data transfer protocol doesn’t do deeply nested diffing of fields, so it’s a good idea to flatten out your objects into many top-level fields on the document.</p> <h3 id=\"publish-custom-data\">Publishing custom data</h3> <p>If you want to access the custom data you’ve added to the <code>Meteor.users</code> collection in your UI, you’ll need to publish it to the client. Mostly, you can just follow the advice in the <a href=\"data-loading#publications\">Data Loading</a> and <a href=\"security#publications\">Security</a> articles.</p> <p>The most important thing to keep in mind is that user documents are certain to contain private data about your users. In particular, the user document includes hashed password data and access keys for external APIs. This means it’s critically important to <a href=\"http://guide.meteor.com/security.html#fields\">filter the fields</a> of the user document that you send to any client.</p> <p>Note that in Meteor’s publication and subscription system, it’s totally fine to publish the same document multiple times with different fields - they will get merged internally and the client will see a consistent document with all of the fields together. So if you just added one custom field, you should just write a publication with that one field. Let’s look at an example of how we might publish the <code>initials</code> field from above:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('Meteor.users.initials', function ({ userIds }) {\n  // Validate the arguments to be what we expect\n  new SimpleSchema({\n    userIds: { type: [String] }\n  }).validate({ userIds });\n\n  // Select only the users that match the array of IDs passed in\n  const selector = {\n    _id: { $in: userIds }\n  };\n\n  // Only return one field, `initials`\n  const options = {\n    fields: { initials: 1 }\n  };\n\n  return Meteor.users.find(selector, options);\n});\n</pre> <p>This publication will let the client pass an array of user IDs it’s interested in, and get the initials for all of those users.</p> <h2 id=\"roles-and-permissions\">Roles and permissions</h2> <p>One of the main reasons you might want to add a login system to your app is to have permissions for your data. For example, if you were running a forum, you would want administrators or moderators to be able to delete any post, but normal users can only delete their own. This uncovers two different types of permissions:</p> <ol> <li>Role-based permissions</li> <li>Per-document permissions</li> </ol> <h3 id=\"alanning-roles\">alanning:roles</h3> <p>The most popular package for role-based permissions in Meteor is <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"external\"><code>alanning:roles</code></a>. For example, here is how you would make a user into an administrator, or a moderator:</p> <pre class=\"highlight js\" data-language=\"js\">// Give Alice the 'admin' role\nRoles.addUsersToRoles(aliceUserId, 'admin', Roles.GLOBAL_GROUP);\n\n// Give Bob the 'moderator' role for a particular category\nRoles.addUsersToRoles(bobsUserId, 'moderator', categoryId);\n</pre> <p>Now, let’s say you wanted to check if someone was allowed to delete a particular forum post:</p> <pre class=\"highlight js\" data-language=\"js\">const forumPost = Posts.findOne(postId);\n\nconst canDelete = Roles.userIsInRole(userId,\n  ['admin', 'moderator'], forumPost.categoryId);\n\nif (! canDelete) {\n  throw new Meteor.Error('unauthorized',\n    'Only admins and moderators can delete posts.');\n}\n\nPosts.remove(postId);\n</pre> <p>Note that we can check for multiple roles at once, and if someone has a role in the <code>GLOBAL_GROUP</code>, they are considered as having that role in every group. In this case, the groups were by category ID, but you could use any unique identifier to make a group.</p> <p>Read more in the <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"external\"><code>alanning:roles</code> package documentation</a>.</p> <h3 id=\"per-document-permissions\">Per-document permissions</h3> <p>Sometimes, it doesn’t make sense to abstract permissions into “groups” - you just want documents to have owners and that’s it. In this case, you can use a simpler strategy using collection helpers.</p> <pre class=\"highlight js\" data-language=\"js\">Lists.helpers({\n  // ...\n  editableBy(userId) {\n    if (!this.userId) {\n      return true;\n    }\n\n    return this.userId === userId;\n  },\n  // ...\n});\n</pre> <p>Now, we can call this simple function to determine if a particular user is allowed to edit this list:</p> <pre class=\"highlight js\" data-language=\"js\">const list = Lists.findOne(listId);\n\nif (! list.editableBy(userId)) {\n  throw new Meteor.Error('unauthorized',\n    'Only list owners can edit private lists.');\n}\n</pre> <p>Learn more about how to use collection helpers in the <a href=\"collections#collection-helpers\">Collections article</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/accounts.html\" class=\"_attribution-link\">https://guide.meteor.com/accounts.html</a>\n  </p>\n</div>\n","routing":"<h1 class=\"title-page\">URLs and Routing</h1> <div class=\"subtitle-page\">How to drive your Meteor app's UI using URLs with FlowRouter.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>The role URLs play in a client-rendered app, and how it’s different from a traditional server-rendered app.</li> <li>How to define client and server routes for your app using Flow Router.</li> <li>How to have your app display different content depending on the URL.</li> <li>How to construct links to routes and go to routes programmatically.</li> </ol> <h2 id=\"client-side\">Client-side Routing</h2> <p>In a web application, <em>routing</em> is the process of using URLs to drive the user interface (UI). URLs are a prominent feature in every single web browser, and have several main functions from the user’s point of view:</p> <ol> <li>\n<strong>Bookmarking</strong> - Users can bookmark URLs in their web browser to save content they want to come back to later.</li> <li>\n<strong>Sharing</strong> - Users can share content with others by sending a link to a certain page.</li> <li>\n<strong>Navigation</strong> - URLs are used to drive the web browser’s back/forward functions.</li> </ol> <p>In a traditional web application stack, where the server renders HTML one page at a time, the URL is the fundamental entry point for the user to access the application. Users navigate an application by clicking through URLs, which are sent to the server via HTTP, and the server responds appropriately via a server-side router.</p> <p>In contrast, Meteor operates on the principle of <em>data on the wire</em>, where the server doesn’t think in terms of URLs or HTML pages. The client application communicates with the server over DDP. Typically as an application loads, it initializes a series of <em>subscriptions</em> which fetch the data required to render the application. As the user interacts with the application, different subscriptions may load, but there’s no technical need for URLs to be involved in this process - you could easily have a Meteor app where the URL never changes.</p> <p>However, most of the user-facing features of URLs listed above are still relevant for typical Meteor applications. Since the server is not URL-driven, the URL just becomes a useful representation of the client-side state the user is currently looking at. However, unlike in a server-rendered application, it does not need to describe the entirety of the user’s current state; it simply needs to contain the parts that you want to be linkable. For example, the URL should contain any search filters applied on a page, but not necessarily the state of a dropdown menu or popup.</p> <h2 id=\"flow-router\">Using Flow Router</h2> <p>To add routing to your app, install the <a href=\"https://atmospherejs.com/kadira/flow-router\" target=\"_blank\" rel=\"external\"><code>kadira:flow-router</code></a> package:</p> <pre class=\"highlight vim\" data-language=\"vim\">meteor add kadira:flow-router\n</pre> <p>Flow Router is a community routing package for Meteor. At the time of writing this guide, it is at version 2.x. For detailed information about all of the features Flow Router has to offer, refer to the <a href=\"https://kadira.io/academy/meteor-routing-guide\" target=\"_blank\" rel=\"external\">Kadira Meteor routing guide</a>.</p> <h2 id=\"defining-routes\">Defining a simple route</h2> <p>The basic purpose of a router is to match certain URLs and perform actions as a result. This all happens on the client side, in the app user’s browser or mobile app container. Let’s take an example from the Todos example app:</p> <pre class=\"highlight js\" data-language=\"js\">FlowRouter.route('/lists/:_id', {\n  name: 'Lists.show',\n  action(params, queryParams) {\n    console.log(\"Looking at a list?\");\n  }\n});\n</pre> <p>This route handler will run in two situations: if the page loads initially at a URL that matches the URL pattern, or if the URL changes to one that matches the pattern while the page is open. Note that, unlike in a server-side-rendered app, the URL can change without any additional requests to the server.</p> <p>When the route is matched, the <code>action</code> method executes, and you can perform any actions you need to. The <code>name</code> property of the route is optional, but will let us refer to this route more conveniently later on.</p> <h3 id=\"url-pattern-matching\">URL pattern matching</h3> <p>Consider the following URL pattern, used in the code snippet above:</p> <pre class=\"highlight js\" data-language=\"js\">'/lists/:_id'\n</pre> <p>The above pattern will match certain URLs. You may notice that one segment of the URL is prefixed by <code>:</code> - this means that it is a <em>url parameter</em>, and will match any string that is present in that segment of the path. Flow Router will make that part of the URL available on the <code>params</code> property of the current route.</p> <p>Additionally, the URL could contain an HTTP <a href=\"https://en.wikipedia.org/wiki/Query_string\" target=\"_blank\" rel=\"external\"><em>query string</em></a> (the part after an optional <code>?</code>). If so, Flow Router will also split it up into named parameters, which it calls <code>queryParams</code>.</p> <p>Here are some example URLs and the resulting <code>params</code> and <code>queryParams</code>:</p> <table> <thead> <tr> <th>URL</th> <th>matches pattern?</th> <th>params</th> <th>queryParams</th> </tr> </thead> <tbody> <tr> <td>/</td> <td>no</td> <td></td> <td></td> </tr> <tr> <td>/about</td> <td>no</td> <td></td> <td></td> </tr> <tr> <td>/lists/</td> <td>no</td> <td></td> <td></td> </tr> <tr> <td>/lists/eMtGij5AFESbTKfkT</td> <td>yes</td> <td>{ _id: “eMtGij5AFESbTKfkT”}</td> <td>{ }</td> </tr> <tr> <td>/lists/1</td> <td>yes</td> <td>{ _id: “1”}</td> <td>{ }</td> </tr> <tr> <td>/lists/1?todoSort=top</td> <td>yes</td> <td>{ _id: “1”}</td> <td>{ todoSort: “top” }</td> </tr> </tbody> </table> <p>Note that all of the values in <code>params</code> and <code>queryParams</code> are always strings since URLs don’t have any way of encoding data types. For example, if you wanted a parameter to represent a number, you might need to use <code>parseInt(value, 10)</code> to convert it when you access it.</p> <h2 id=\"accessing-route-info\">Accessing Route information</h2> <p>In addition to passing in the parameters as arguments to the <code>action</code> function on the route, Flow Router makes a variety of information available via (reactive and otherwise) functions on the global singleton <code>FlowRouter</code>. As the user navigates around your app, the values of these functions will change (reactively in some cases) correspondingly.</p> <p>Like any other global singleton in your application (see the <a href=\"data-loading#stores\">data loading</a> for info about stores), it’s best to limit your access to <code>FlowRouter</code>. That way the parts of your app will remain modular and more independent. In the case of <code>FlowRouter</code>, it’s best to access it solely from the top of your component hierarchy, either in the “page” component, or the layouts that wrap it. Read more about accessing data in the <a href=\"ui-ux#components\">UI article</a>.</p> <h3 id=\"current-route\">The current route</h3> <p>It’s useful to access information about the current route in your code. Here are some reactive functions you can call:</p> <ul> <li>\n<code>FlowRouter.getRouteName()</code> gets the name of the route</li> <li>\n<code>FlowRouter.getParam(paramName)</code> returns the value of a single URL parameter</li> <li>\n<code>FlowRouter.getQueryParam(paramName)</code> returns the value of a single URL query parameter</li> </ul> <p>In our example of the list page from the Todos app, we access the current list’s id with <code>FlowRouter.getParam('_id')</code> (we’ll see more on this below).</p> <h3 id=\"active-route\">Highlighting the active route</h3> <p>One situation where it is sensible to access the global <code>FlowRouter</code> singleton to access the current route’s information deeper in the component hierarchy is when rendering links via a navigation component. It’s often required to highlight the “active” route in some way (this is the route or section of the site that the user is currently looking at).</p> <p>A convenient package for this is <a href=\"https://atmospherejs.com/zimme/active-route\" target=\"_blank\" rel=\"external\"><code>zimme:active-route</code></a>:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add zimme:active-route\n</pre> <p>In the Todos example app, we link to each list the user knows about in the <code>App_body</code> template:</p> <pre class=\"highlight html\" data-language=\"html\">{{#each list in lists}}\n  &lt;a class=\"list-todo {{activeListClass list}}\"&gt;\n    ...\n\n    {{list.name}}\n  &lt;/a&gt;\n{{/each}}\n</pre> <p>We can determine if the user is currently viewing the list with the <code>activeListClass</code> helper:</p> <pre class=\"highlight js\" data-language=\"js\">Template.App_body.helpers({\n  activeListClass(list) {\n    const active = ActiveRoute.name('Lists.show')\n      &amp;&amp; FlowRouter.getParam('_id') === list._id;\n\n    return active &amp;&amp; 'active';\n  }\n});\n</pre> <h2 id=\"rendering-routes\">Rendering based on the route</h2> <p>Now we understand how to define routes and access information about the current route, we are in a position to do what you usually want to do when a user accesses a route—render a user interface to the screen that represents it.</p> <p><em>In this section, we’ll discuss how to render routes using Blaze as the UI engine. If you are building your app with React or Angular, you will end up with similar concepts but the code will be a bit different.</em></p> <p>When using Flow Router, the simplest way to display different views on the page for different URLs is to use the complementary Blaze Layout package. First, make sure you have the Blaze Layout package installed:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add kadira:blaze-layout\n</pre> <p>To use this package, we need to define a “layout” component. In the Todos example app, that component is called <code>App_body</code>:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"App_body\"&gt;\n  ...\n  {{&gt; Template.dynamic template=main}}\n  ...\n&lt;/template&gt;\n</pre> <p>(This is not the entire <code>App_body</code> component, but we highlight the most important part here).<br>Here, we are using a Blaze feature called <code>Template.dynamic</code> to render a template which is attached to the <code>main</code> property of the data context. Using Blaze Layout, we can change that <code>main</code> property when a route is accessed.</p> <p>We do that in the <code>action</code> function of our <code>Lists.show</code> route definition:</p> <pre class=\"highlight js\" data-language=\"js\">FlowRouter.route('/lists/:_id', {\n  name: 'Lists.show',\n  action() {\n    BlazeLayout.render('App_body', {main: 'Lists_show_page'});\n  }\n});\n</pre> <p>What this means is that whenever a user visits a URL of the form <code>/lists/X</code>, the <code>Lists.show</code> route will kick in, triggering the <code>BlazeLayout</code> call to set the <code>main</code> property of the <code>App_body</code> component.</p> <h2 id=\"page-templates\">Components as pages</h2> <p>Notice that we called the component to be rendered <code>Lists_show_page</code> (rather than <code>Lists_show</code>). This indicates that this template is rendered directly by a Flow Router action and forms the ‘top’ of the rendering hierarchy for this URL.</p> <p>The <code>Lists_show_page</code> template renders <em>without</em> arguments—it is this template’s responsibility to collect information from the current route, and then pass this information down into its child templates. Correspondingly the <code>Lists_show_page</code> template is very tied to the route that rendered it, and so it needs to be a smart component. See the article on <a href=\"ui-ux\">UI/UX</a> for more about smart and reusable components.</p> <p>It makes sense for a “page” smart component like <code>Lists_show_page</code> to:</p> <ol> <li>Collect route information,</li> <li>Subscribe to relevant subscriptions,</li> <li>Fetch the data from those subscriptions, and</li> <li>Pass that data into a sub-component.</li> </ol> <p>In this case, the HTML template for <code>Lists_show_page</code> will look very simple, with most of the logic in the JavaScript code:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Lists_show_page\"&gt;\n  {{#each listId in listIdArray}}\n    {{&gt; Lists_show (listArgs listId)}}\n  {{else}}\n    {{&gt; App_notFound}}\n  {{/each}}\n&lt;/template&gt;\n</pre> <p>(The <code>{{#each listId in listIdArray}}}</code> is an animation technique for <a href=\"ui-ux#animating-page-changes\">page to page transitions</a>).</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.helpers({\n  // We use #each on an array of one item so that the \"list\" template is\n  // removed and a new copy is added when changing lists, which is\n  // important for animation purposes.\n  listIdArray() {\n    const instance = Template.instance();\n    const listId = instance.getListId();\n    return Lists.findOne(listId) ? [listId] : [];\n  },\n  listArgs(listId) {\n    const instance = Template.instance();\n    return {\n      todosReady: instance.subscriptionsReady(),\n      // We pass `list` (which contains the full list, with all fields, as a function\n      // because we want to control reactivity. When you check a todo item, the\n      // `list.incompleteCount` changes. If we didn't do this the entire list would\n      // re-render whenever you checked an item. By isolating the reactiviy on the list\n      // to the area that cares about it, we stop it from happening.\n      list() {\n        return Lists.findOne(listId);\n      },\n      // By finding the list with only the `_id` field set, we don't create a dependency on the\n      // `list.incompleteCount`, and avoid re-rendering the todos when it changes\n      todos: Lists.findOne(listId, {fields: {_id: true}}).todos()\n    };\n  }\n});\n</pre> <p>It’s the <code>listShow</code> component (a reusuable component) that actually handles the job of rendering the content of the page. As the page component is passing the arguments into the reusuable component, it is able to be quite mechanical and the concerns of talking to the router and rendering the page have been separated.</p> <h3 id=\"route-rendering-logic\">Changing page when logged out</h3> <p>There are types of rendering logic that appear related to the route but which also seem related to user interface rendering. A classic example is authorization; for instance, you may want to render a login form for some subset of your pages if the user is not yet logged in.</p> <p>It’s best to keep all logic around what to render in the component hierarchy (i.e. the tree of rendered components). So this authorization should happen inside a component. Suppose we wanted to add this to the <code>Lists_show_page</code> we were looking at above. We could do something like:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Lists_show_page\"&gt;\n  {{#if currentUser}}\n    {{#each listId in listIdArray}}\n      {{&gt; Lists_show (listArgs listId)}}\n    {{else}}\n      {{&gt; App_notFound}}\n    {{/each}}\n  {{else}}\n    Please log in to edit posts.\n  {{/if}}\n&lt;/template&gt;\n</pre> <p>Of course, we might find that we need to share this functionality between multiple pages of our app that require access control. We can easily share functionality between templates by wrapping them in a wrapper “layout” component which includes the behavior we want.</p> <p>You can create wrapper components by using the “template as block helper” ability of Blaze (see the <a href=\"blaze#block-helpers\">Blaze Article</a>). Here’s how we could write an authorization template:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"App_forceLoggedIn\"&gt;\n  {{#if currentUser}}\n    {{&gt; Template.contentBlock}}\n  {{else}}\n    Please log in see this page.\n  {{/if}}\n&lt;/template&gt;\n</pre> <p>Once that template exists, we can simply wrap our <code>Lists_show_page</code>:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Lists_show_page\"&gt;\n  {{#App_forceLoggedIn}}\n    {{#each listId in listIdArray}}\n      {{&gt; Lists_show (listArgs listId)}}\n    {{else}}\n      {{&gt; App_notFound}}\n    {{/each}}\n  {{/App_forceLoggedIn}}\n&lt;/template&gt;\n</pre> <p>The main advantage of this approach is that it is immediately clear when viewing the <code>Lists_show_page</code> what behavior will occur when a user visits the page.</p> <p>Multiple behaviors of this type can be composed by wrapping a template in multiple wrappers, or creating a meta-wrapper that combines multiple wrapper templates.</p> <h2 id=\"changing-routes\">Changing Routes</h2> <p>Rendering an updated UI when a user reaches a new route is not that useful without giving the user some way to reach a new route! The simplest way is with the trusty <code>&lt;a&gt;</code> tag and a URL. You can generate the URLs yourself using <code>FlowRouter.pathFor</code>, but it is more convenient to use the <a href=\"https://github.com/arillo/meteor-flow-router-helpers/\" target=\"_blank\" rel=\"external\"><code>arillo:flow-router-helpers</code></a> package that defines some helpers for you:</p> <pre class=\"highlight armasm\" data-language=\"armasm\">meteor add arillo:flow-router-helpers\n</pre> <p>Now that you have this package, you can use helpers in your templates to display a link to a certain route. For example, in the Todos example app, our nav links look like:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;a href=\"{{pathFor 'Lists.show' _id=list._id}}\" title=\"{{list.name}}\"\n    class=\"list-todo {{activeListClass list}}\"&gt;\n</pre> <h3 id=\"routing-programmatically\">Routing programmatically</h3> <p>In some cases you want to change routes based on user action outside of them clicking on a link. For instance, in the example app, when a user creates a new list, we want to route them to the list they just created. We do this by calling <code>FlowRouter.go()</code> once we know the id of the new list:</p> <pre class=\"highlight js\" data-language=\"js\">import { insert } from '../../api/lists/methods.js';\n\nTemplate.App_body.events({\n  'click .js-new-list'() {\n    const listId = insert.call();\n    FlowRouter.go('Lists.show', { _id: listId });\n  }\n});\n</pre> <p>You can also change only part of the URL if you want to, using the <code>FlowRouter.setParams()</code> and <code>FlowRouter.setQueryParams()</code>. For instance, if we were viewing one list and wanted to go to another, we could write:</p> <pre class=\"highlight js\" data-language=\"js\">FlowRouter.setParams({_id: newList._id});\n</pre> <p>Of course, calling <code>FlowRouter.go()</code>, will always work, so unless you are trying to optimize for a specific situation it’s better to use that.</p> <h3 id=\"storing-data-in-the-url\">Storing data in the URL</h3> <p>As we discussed in the introduction, the URL is really just a serialization of some part of the client-side state the user is looking at. Although parameters can only be strings, it’s possible to convert any type of data to a string by serializing it.</p> <p>In general if you want to store arbitrary serializable data in a URL param, you can use <a href=\"http://docs.meteor.com/#/full/ejson_stringify\" target=\"_blank\" rel=\"external\"><code>EJSON.stringify()</code></a> to turn it into a string. You’ll need to URL-encode the string using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" target=\"_blank\" rel=\"external\"><code>encodeURIComponent</code></a> to remove any characters that have meaning in a URL:</p> <pre class=\"highlight js\" data-language=\"js\">FlowRouter.setQueryParams({data: encodeURIComponent(EJSON.stringify(data))});\n</pre> <p>You can then get the data back out of Flow Router using <a href=\"http://docs.meteor.com/#/full/ejson_parse\" target=\"_blank\" rel=\"external\"><code>EJSON.parse()</code></a>. Note that Flow Router does the URL decoding for you automatically:</p> <pre class=\"highlight js\" data-language=\"js\">const data = EJSON.parse(FlowRouter.getQueryParam('data'));\n</pre> <h2 id=\"redirecting\">Redirecting</h2> <p>Sometimes, your users will end up on a page that isn’t a good place for them to be. Maybe the data they were looking for has moved, maybe they were on an admin panel page and logged out, or maybe they just created a new object and you want them to end up on the page for the thing they just created.</p> <p>Usually, we can redirect in response to a user’s action by calling <code>FlowRouter.go()</code> and friends, like in our list creation example above, but if a user browses directly to a URL that doesn’t exist, it’s useful to know how to redirect immediately.</p> <p>If a URL is simply out-of-date (sometimes you might change the URL scheme of an application), you can redirect inside the <code>action</code> function of the route:</p> <pre class=\"highlight js\" data-language=\"js\">FlowRouter.route('/old-list-route/:_id', {\n  action(params) {\n    FlowRouter.go('Lists.show', params);\n  }\n});\n</pre> <h3 id=\"redirecting-dynamically\">Redirecting dynamically</h3> <p>The above approach will only work for static redirects. However, sometimes you need to load some data to figure out where to redirect to. In this case you’ll need to render part of the component hierarchy to subscribe to the data you need. For example, in the Todos example app, we want to make the root (<code>/</code>) route redirect to the first known list. To achieve this, we need to render a special <code>App_rootRedirector</code> route:</p> <pre class=\"highlight js\" data-language=\"js\">FlowRouter.route('/', {\n  name: 'App.home',\n  action() {\n    BlazeLayout.render('App_body', {main: 'App_rootRedirector'});\n  }\n});\n</pre> <p>The <code>App_rootRedirector</code> component is rendered inside the <code>App_body</code> layout, which takes care of subscribing to the set of lists the user knows about <em>before</em> rendering its sub-component, and we are guaranteed there is at least one such list. This means that if the <code>App_rootRedirector</code> ends up being created, there’ll be a list loaded, so we can simply do:</p> <pre class=\"highlight js\" data-language=\"js\">Template.App_rootRedirector.onCreated(function rootRedirectorOnCreated() {\n  // We need to set a timeout here so that we don't redirect from inside a redirection\n  //   which is a limitation of the current version of FR.\n  Meteor.setTimeout(() =&gt; {\n    FlowRouter.go('Lists.show', Lists.findOne());\n  });\n});\n</pre> <p>If you need to wait on specific data that you aren’t already subscribed to at creation time, you can use an <code>autorun</code> and <code>subscriptionsReady()</code> to wait on that subscription:</p> <pre class=\"highlight js\" data-language=\"js\">Template.App_rootRedirector.onCreated(function rootRedirectorOnCreated() {\n  // If we needed to open this subscription here\n  this.subscribe('lists.public');\n\n  // Now we need to wait for the above subscription. We'll need the template to\n  // render some kind of loading state while we wait, too.\n  this.autorun(() =&gt; {\n    if (this.subscriptionsReady()) {\n      FlowRouter.go('Lists.show', Lists.findOne());\n    }\n  });\n});\n</pre> <h3 id=\"redirecting-after-user-action\">Redirecting after a user’s action</h3> <p>Often, you just want to go to a new route programmatically when a user has completed a certain action. Above we saw a case (creating a new list) when we wanted to do it <em>optimistically</em>—i.e. before we hear back from the server that the Method succeeded. We can do this because we reasonably expect that the Method will succeed in almost all cases (see the <a href=\"ui-ux#optimistic-ui\">UI/UX article</a> for further discussion of this).</p> <p>However, if we wanted to wait for the method to return from the server, we can put the redirection in the callback of the method:</p> <pre class=\"highlight js\" data-language=\"js\">Template.App_body.events({\n  'click .js-new-list'() {\n    lists.insert.call((err, listId) =&gt; {\n      if (!err) {\n        FlowRouter.go('Lists.show', { _id: listId });  \n      }\n    });\n  }\n});\n</pre> <p>You will also want to show some kind of indication that the method is working in between their click of the button and the redirect completing. Don’t forget to provide feedback if the method is returning an error.</p> <h2 id=\"advanced\">Advanced Routing</h2> <h3 id=\"404s\">Missing pages</h3> <p>If a user types an incorrect URL, chances are you want to show them some kind of amusing not-found page. There are actually two categories of not-found pages. The first is when the URL typed in doesn’t match any of your route definitions. You can use <code>FlowRouter.notFound</code> to handle this:</p> <pre class=\"highlight js\" data-language=\"js\">// the App_notFound template is used for unknown routes and missing lists\nFlowRouter.notFound = {\n  action() {\n    BlazeLayout.render('App_body', {main: 'App_notFound'});\n  }\n};\n</pre> <p>The second is when the URL is valid, but doesn’t actually match any data. In this case, the URL matches a route, but once the route has successfully subscribed, it discovers there is no data. It usually makes sense in this case for the page component (which subscribes and fetches the data) to render a not-found template instead of the usual template for the page:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Lists_show_page\"&gt;\n  {{#each listId in listIdArray}}\n    {{&gt; Lists_show (listArgs listId)}}\n  {{else}}\n    {{&gt; App_notFound}}\n  {{/each}}\n&lt;template&gt;\n</pre> <h3 id=\"analytics\">Analytics</h3> <p>It’s common to want to know which pages of your app are most commonly visited, and where users are coming from. You can read about how to set up Flow Router based analytics in the <a href=\"deployment#analytics\">Deployment Guide</a>.</p> <h3 id=\"server-side\">Server Side Routing</h3> <p>As we’ve discussed, Meteor is a framework for client rendered applications, but this doesn’t always remove the requirement for server rendered routes. There are two main use cases for server-side routing.</p> <h4 id=\"server-side-apis\">Server Routing for API access</h4> <p>Although Meteor allows you to <a href=\"http://docs.meteor.com/#/full/webapp\" target=\"_blank\" rel=\"external\">write low-level connect handlers</a> to create any kind of API you like on the server-side, if all you want to do is create a RESTful version of your Methods and Publications, you can often use the <a href=\"http://atmospherejs.com/simple/rest\" target=\"_blank\" rel=\"external\"><code>simple:rest</code></a> package to do this easily. See the <a href=\"data-loading#publications-as-rest\">Data Loading</a> and <a href=\"methods\">Methods</a> articles for more information.</p> <p>If you need more control, you can use the comprehensive <a href=\"https://atmospherejs.com/nimble/restivus\" target=\"_blank\" rel=\"external\"><code>nimble:restivus</code></a> package to create more or less whatever you need in whatever ontology you require.</p> <h4 id=\"server-side-rendering\">Server Rendering</h4> <p>The Blaze UI library does not have support for server-side rendering, so it’s not possible to render your pages on the server if you use Blaze. However, the React UI library does. This means it is possible to render HTML on the server if you use React as your rendering framework.</p> <p>Although Flow Router can be used to render React components more or less as we’ve described above for Blaze, at the time of this writing Flow Router’s support for SSR is <a href=\"https://kadira.io/blog/meteor/meteor-ssr-support-using-flow-router-and-react\" target=\"_blank\" rel=\"external\">still experimental</a>. However, it’s probably the best approach right now if you want to use SSR for Meteor.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/routing.html\" class=\"_attribution-link\">https://guide.meteor.com/routing.html</a>\n  </p>\n</div>\n","using-atmosphere-packages":"<h1 class=\"title-page\">Using Atmosphere Packages</h1>    <h2 id=\"atmosphere-searching\">Searching for packages</h2> <p>There are a few ways to search for Meteor packages published to Atmosphere:</p> <ol> <li>Search on the <a href=\"https://atmospherejs.com/\" target=\"_blank\" rel=\"external\">Atmosphere website</a>.</li> <li>Use <code>meteor search</code> from the command line.</li> <li>Use a community package search website like <a href=\"http://fastosphere.meteor.com/\" target=\"_blank\" rel=\"external\">Fastosphere</a>.</li> </ol> <p>The main Atmosphere website provides additional curation features like trending packages, package stars, and flags, but some of the other options can be faster if you’re trying to find a specific package. For example, you can use <code>meteor show kadira:flow-router</code> from the command line to see the description of that package and different available versions.</p> <h3 id=\"atmosphere-naming\">Package naming</h3> <p>You may notice that, with the exception of Meteor platform packages, all packages on Atmosphere have a name of the form <code>prefix:package-name</code>. The prefix is the Meteor Developer username of the organization or user that published the package. Meteor uses such a convention for package naming to make sure that it’s clear who has published a certain package, and to avoid an ad-hoc namespacing convention. Meteor platform packages do not have any <code>prefix:</code>.</p> <h2 id=\"installing-atmosphere\">Installing Atmosphere Packages</h2> <p>To install an Atmosphere package, you simply run <code>meteor add</code>:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add kadira:flow-router\n</pre> <p>This will add the newest version of the desired package that is compatible with the other packages in your app. If you want to specify a particular version, you can specify it by adding a suffix to the package name like: <code>meteor add kadira:flow-router@2.10.0</code>.</p> <p>Regardless of how you add the package to your app, its actual version will be tracked in the file at <code>.meteor/versions</code>. This means that anybody collaborating with you on the same app is guaranteed to have the same package versions as you. If you want to update to a newer version of a package after installing it, use <code>meteor update</code>. You can run <code>meteor update</code> without any arguments to update all packages and Meteor itself to their latest versions, or pass a specific package to update just that one, for example <code>meteor update kadira:flow-router</code>.</p> <p>If your app is running when you add a new package, Meteor will automatically download it and restart your app for you.</p> <blockquote> <p>The actual files for a given version of an Atmosphere package are stored in your local <code>~/.meteor/packages</code> directory.</p> </blockquote> <p>To see all the Atmosphere packages installed run:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor list\n</pre> <p>To remove an unwanted Atmosphere package run:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor remove kadira:flow-router\n</pre> <p>You can get more details on all the package commands in the <a href=\"http://docs.meteor.com/#/full/meteorhelp\" target=\"_blank\" rel=\"external\">Meteor Command line documentation</a>.</p> <h2 id=\"using-atmosphere\">Using Atmosphere Packages</h2> <p>To use an Atmosphere Package in your app you can import it with the <code>meteor/</code> prefix:</p> <pre class=\"highlight js\" data-language=\"js\">import { SimpleSchema } from 'meteor/aldeed:simple-schema';\n</pre> <p>Typically a package will export one or more symbols, which you’ll need to reference with the destructuring syntax. You can find these exported symbols by either looking in that package’s <code>package.js</code> file for <a href=\"http://docs.meteor.com/#/full/pack_export\" target=\"_blank\" rel=\"external\"><code>api.export</code></a> calls or by looking in that package’s main JavaScript file for ES2015 <code>export</code> calls like <code>export const packageName = 'package-name';</code>.</p> <p>Sometimes a package will have no exports and simply have side effects when included in your app. In such cases you don’t need to import the package at all after installing.</p> <blockquote> <p>For backwards compatibility with Meteor 1.2 and early releases, Meteor by default makes available directly to your app all symbols referenced in <code>api.export</code> in any packages you have installed. However, it is recommended that you import these symbols first before using them.</p> </blockquote> <h3 id=\"importing-atmosphere-styles\">Importing styles from Atmosphere packages</h3> <p>Using any of Meteor’s supported CSS pre-processors you can import other style files using the <code>{package-name}</code> syntax as long as those files are designated to be lazily evaluated as “import” files. To get more details on how to determine this see <a href=\"build-tool#css-source-vs-import\">CSS source versus import</a> files.</p> <pre class=\"highlight less\" data-language=\"less\">@import '{prefix:package-name}/buttons/styles.import.less';\n</pre> <blockquote> <p>CSS files in an Atmosphere package are declared with <code>api.addFiles</code>, and therefore will be eagerly evaluated by default, and then bundled with all the other CSS in your app.</p> </blockquote> <h3 id=\"peer-npm-dependencies\">Peer npm dependencies</h3> <p>Atmosphere packages can ship with contained <a href=\"https://guide.meteor.com/writing-packages.html#npm-dependencies\">npm dependencies</a>, in which case you don’t need to do anything to make them work. However, some Atmosphere packages will expect that you have installed certain “peer” npm dependencies in your application.</p> <p>Typically the package will warn you if you have not done so. For example, if you install the <a href=\"https://atmospherejs.com/meteor/react-meteor-data\" target=\"_blank\" rel=\"external\"><code>react-meteor-data</code></a> package into your app, you’ll also need to <a href=\"#installing-npm\">install</a> the <a href=\"https://www.npmjs.com/package/react\" target=\"_blank\" rel=\"external\"><code>react</code></a> and the <a href=\"https://www.npmjs.com/package/react-addons-pure-render-mixin\" target=\"_blank\" rel=\"external\"><code>react-addons-pure-render-mixin</code></a> packages:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor npm install --save react react-addons-pure-render-mixin\nmeteor add react-meteor-data\n</pre> <h2 id=\"package-namespacing\">Atmosphere package namespacing</h2> <p>Each Atmosphere package that you use in your app exists in its own separate namespace, meaning that it sees only its own global variables and any variables provided by the packages that it specifically uses. When a top-level variable is defined in a package, it is either declared with local scope or package scope.</p> <pre class=\"highlight js\" data-language=\"js\">/**\n * local scope - this variable is not visible outside of the block it is\n * declared in and other packages and your app won't see it\n */\nconst alicePerson = {name: \"alice\"};\n\n/**\n * package scope - this variable is visible to every file inside of the\n * package where it is declared and to your app\n */\nbobPerson = {name: \"bob\"};\n</pre> <p>Notice that this is just the normal JavaScript syntax for declaring a variable that is local or global. Meteor scans your source code for global variable assignments and generates a wrapper that makes sure that your globals don’t escape their appropriate namespace.</p> <p>In addition to local scope and package scope, there are also package exports. A package export is a “pseudo global” variable that a package makes available for you to use when you install that package. For example, the <code>email</code> package exports the <code>Email</code> variable. If your app uses the <code>email</code> package (and <em>only</em> if it uses the <code>email</code> package!) then your app can access the <code>Email</code> symbol and you can call <code>Email.send</code>. Most packages have only one export, but some packages might have two or three (for example, a package that provides several classes that work together).</p> <blockquote> <p>It is recommended that you use the <code>ecmascript</code> package and first call <code>import { Email } from 'meteor/email';</code> before calling <code>Email.send</code> in your app. It is also recommended that package developers now use ES2015 <code>export</code> from their main JavaScript file instead of <code>api.export</code>.</p> </blockquote> <p>Your app sees only the exports of the packages that you use directly. If you use package A, and package A uses package B, then you only see package A’s exports. Package B’s exports don’t “leak” into your namespace just because you used package A. Each app or package only sees their own globals plus the APIs of the packages that they specifically use and depend upon.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/using-atmosphere-packages.html\" class=\"_attribution-link\">https://guide.meteor.com/using-atmosphere-packages.html</a>\n  </p>\n</div>\n","using-npm-packages":"<h1 class=\"title-page\">Using npm Packages</h1>    <h2 id=\"npm-searching\">Searching for packages</h2> <p>The best way to find npm packages is by searching on <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">npmjs.com</a>. There are also some websites that have special search features specifically for certain kinds of packages, like the aptly named <a href=\"http://react-components.com/\" target=\"_blank\" rel=\"external\">react-components.com</a>.</p> <h2 id=\"client-npm\">npm on the client</h2> <p>Tools like <a href=\"http://browserify.org\" target=\"_blank\" rel=\"external\">browserify</a> and <a href=\"https://webpack.github.io\" target=\"_blank\" rel=\"external\">webpack</a> are designed to provide a Node-like environment on the client so that many npm packages, even ones originally intended for the server, can run unmodified. Meteor’s ES2015 module system does this for you out of the box with no additional configuration necessary. In most cases, you can simply import npm dependencies from a client file, just as you would on the server.</p> <blockquote> <p>When creating a new application Meteor installs the <code>meteor-node-stubs</code> npm package to help provide this client browser compatibility. If you are upgrading an application to Meteor 1.3 you may have to run <code>meteor npm install --save meteor-node-stubs</code> manually.</p> </blockquote> <h2 id=\"installing-npm\">Installing npm Packages</h2> <p>npm packages are configured in a <code>package.json</code> file at the root of your project. If you create a new Meteor project, you will have such a file created for you. If not you can run <code>meteor npm init</code> to create one.</p> <p>To install a package into your app you run the <code>npm install</code> command with the <code>--save</code> flag:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor npm install --save moment\n</pre> <p>This will both update your <code>package.json</code> with information about the dependency and download the package into your app’s local <code>node_modules/</code> directory. Typically, you don’t check the <code>node_modules/</code> directory into source control and your teammates run <code>meteor npm install</code> to get up to date when dependencies change:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor npm install\n</pre> <p>If the package is just a development dependency (i.e. it’s used for testing, linting or the like) then you should use <code>--save-dev</code>. That way if you have some kind of build script, it can do <code>npm install --production</code> and avoid installing packages it doesn’t need.</p> <p>For more information about <code>npm install</code>, check out the <a href=\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\" target=\"_blank\" rel=\"external\">official documentation</a>.</p> <blockquote> <p>Meteor comes with npm bundled so that you can type <code>meteor npm</code> without worrying about installing it yourself. If you like, you can also use a globally installed npm to manage your packages.</p> </blockquote> <h2 id=\"using-npm\">Using npm Packages</h2> <p>To use an npm package from a file in your application you simply <code>import</code> the name of the package:</p> <pre class=\"highlight js\" data-language=\"js\">import moment from 'moment';\n\n// this is equivalent to the standard node require:\nconst moment = require('moment');\n</pre> <p>This imports the default export from the package into the symbol <code>moment</code>.</p> <p>You can also import specific functions from a package using the destructuring syntax:</p> <pre class=\"highlight js\" data-language=\"js\">import { isArray } from 'lodash';\n</pre> <p>You can also import other files or JS entry points from a package:</p> <pre class=\"highlight js\" data-language=\"js\">import { parse } from 'graphql/language';\n</pre> <h3 id=\"npm-styles\">Importing styles from npm</h3> <p>Using any of Meteor’s <a href=\"build-tool#css\">supported CSS pre-processors</a> you can import other style files from both relative and absolute paths from an npm package.</p> <p>Importing styles from an npm package with an absolute path using the <code>{}</code> syntax, for instance with Less:</p> <pre class=\"highlight less\" data-language=\"less\">@import '{}/node_modules/npm-package-name/button.less';\n</pre> <p>Importing styles from an npm package with a relative path:</p> <pre class=\"highlight less\" data-language=\"less\">@import '../../node_modules/npm-package-name/colors.less';\n</pre> <p>You can also import CSS directly from a JavaScript file to control load order if you have the <code>ecmascript</code> package installed:</p> <pre class=\"highlight js\" data-language=\"js\">import 'npm-package-name/stylesheets/styles.css';\n</pre> <blockquote> <p>When importing CSS from a JavaScript file, that CSS is not bundled with the rest of the CSS processed with the Meteor Build tool, but instead is put in your app’s <code>&lt;head&gt;</code> tag inside <code>&lt;style&gt;...&lt;/style&gt;</code> after the main concatenated CSS file.</p> </blockquote> <h2 id=\"npm-shrinkwrap\">npm Shrinkwrap</h2> <p><code>package.json</code> typically encodes a version range, and so each <code>npm install</code> command can sometimes lead to a different result if new versions have been published in the meantime. In order to ensure that you and the rest of your team are using the same exact same version of each package, it’s a good idea to use <code>npm shrinkwrap</code> after making any dependency changes to <code>package.json</code>:</p> <pre class=\"highlight bash\" data-language=\"bash\"># after installing\nmeteor npm install --save moment\nmeteor npm shrinkwrap\n</pre> <p>This will create an <code>npm-shrinkwrap.json</code> file containing the exact versions of each dependency, and you should check this file into source control. For even more precision (the contents of a given version of a package <em>can</em> change), and to avoid a reliance on the npm server during deployment, you should consider using <a href=\"#npm-shrinkpack\"><code>npm shrinkpack</code></a>.</p> <h2 id=\"async-callbacks\">Asyncronous Callbacks</h2> <p>Many npm packages rely on an asynchronous, callback or promise-based coding style. For several reasons, Meteor is currently built around a synchronous-looking but still non-blocking style using <a href=\"https://github.com/laverdet/node-fibers\" target=\"_blank\" rel=\"external\">Fibers</a>.</p> <p>The global Meteor server context and every method and publication initialize a new fiber so that they can run concurrently. Many Meteor APIs, for example collections, rely on running inside a fiber. They also rely on an internal Meteor mechanism that tracks server “environment” state, like the currently executing method. This means you need to initialize your own fiber and environment to use asynchronous Node code inside a Meteor app. Let’s look at an example of some code that won’t work, using the code example from the <a href=\"https://github.com/mikedeboer/node-github\" target=\"_blank\" rel=\"external\">node-github repository</a>:</p> <pre class=\"highlight js\" data-language=\"js\">// Inside a Meteor method definition\nupdateGitHubFollowers() {\n  github.user.getFollowingFromUser({\n    user: 'stubailo'\n  }, (err, res) =&gt; {\n    // Using a collection here will throw an error\n    // because the asynchronous code is not in a fiber\n    Followers.insert(res);\n  });\n}\n</pre> <p>Let’s look at a few ways to resolve this issue.</p> <h3 id=\"bind-environment\"><code>Meteor.bindEnvironment</code></h3> <p>In most cases, simply wrapping the callback in <code>Meteor.bindEnvironment</code> will do the trick. This function both wraps the callback in a fiber, and does some work to maintain Meteor’s server-side environment tracking. Here’s the same code with <code>Meteor.bindEnvironment</code>:</p> <pre class=\"highlight js\" data-language=\"js\">// Inside a Meteor method definition\nupdateGitHubFollowers() {\n  github.user.getFollowingFromUser({\n    user: 'stubailo'\n  }, Meteor.bindEnvironment((err, res) =&gt; {\n    // Everything is good now\n    Followers.insert(res);\n  }));\n}\n</pre> <p>However, this won’t work in all cases - since the code runs asynchronously, we can’t use anything we got from an API in the method return value. We need a different approach that will convert the async API to a synchronous-looking one that will allow us to return a value.</p> <h3 id=\"wrap-async\"><code>Meteor.wrapAsync</code></h3> <p>Many npm packages adopt the convention of taking a callback that accepts <code>(err, res)</code> arguments. If your asynchronous function fits this description, like the one above, you can use <code>Meteor.wrapAsync</code> to convert to a fiberized API that uses return values and exceptions instead of callbacks, like so:</p> <pre class=\"highlight js\" data-language=\"js\">// Setup sync API\nconst getFollowingFromUserFiber =\n  Meteor.wrapAsync(github.user.getFollowingFromUser, github.user);\n\n// Inside a Meteor method definition\nupdateGitHubFollowers() {\n  const res = getFollowingFromUserFiber({\n    user: 'stubailo'\n  });\n\n  Followers.insert(res);\n\n  // Return how many followers we have\n  return res.length;\n}\n</pre> <p>If you wanted to refactor this and create a completely fiber-wrapper GitHub client, you could write some logic to loop over all of the methods available and call <code>Meteor.wrapAsync</code> on them, creating a new object with the same shape but with a more Meteor-compatible API.</p> <h3 id=\"promises\">Promises</h3> <p>Recently, a lot of npm packages have been moving to Promises instead of callbacks for their API. This means you actually get a return value from the asynchronous function, but it’s just an empty shell where the real value is filled in later.</p> <p>The good news is that Promises can be used with the new ES2015 <code>async/await</code> syntax (available in the <code>ecmascript</code> package since Meteor 1.3) in a natural and synchronous-looking style on both the client and the server.</p> <p>If you declare your function <code>async</code> (which ends up meaning it returns a Promise itself), then you can use the <code>await</code> keyword to wait on other promise inside. This makes it very easy to serially call Promise-based libraries:</p> <pre class=\"highlight js\" data-language=\"js\">async function sendTextMessage(user) {\n  const toNumber = await phoneLookup.findFromEmail(user.emails[0].address);\n  return await client.sendMessage({\n    to: toNumber,\n    from: '+14506667788',\n    body: 'Hello world!'\n  });\n}\n</pre> <h2 id=\"npm-shrinkpack\">Shrinkpack</h2> <p><a href=\"https://github.com/JamieMason/shrinkpack\" target=\"_blank\" rel=\"external\">Shrinkpack</a> is a tool that gives you more bulletproof and repeatable builds than you get by using <a href=\"#npm-shrinkwrap\"><code>npm shrinkwrap</code></a> alone.</p> <p>Essentially it copies a tarball of the contents of each of your npm dependencies into your application source repository. This is essentially a more robust version of the <code>npm-shrinkwrap.json</code> file that shrinkwrap creates, because it means your application’s npm dependencies can be assembled without the need or reliance on the npm servers being available or reliable. This is good for repeatable builds especially when deploying.</p> <p>To use shrinkpack, first globally install it:</p> <pre class=\"highlight bash\" data-language=\"bash\">npm install -g shrinkpack\n</pre> <p>Then use it directly after you shrinkwrap</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor npm install moment\nmeteor npm shrinkwrap\nshrinkpack\n</pre> <p>You should then check the generated <code>node_shrinkwrap/</code> directory into source control, but ensure it is ignored by your text editor.</p> <p><strong>NOTE</strong>: Although this is a good idea for projects with a lot of npm dependencies, it will not affect Atmosphere dependencies, even if they themselves have direct npm dependencies.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/using-npm-packages.html\" class=\"_attribution-link\">https://guide.meteor.com/using-npm-packages.html</a>\n  </p>\n</div>\n","security":"<h1 class=\"title-page\">Security</h1> <div class=\"subtitle-page\">How to secure your Meteor app.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>The security surface area of a Meteor app.</li> <li>How to secure Meteor Methods, publications, and source code.</li> <li>Where to store secret keys in development and production.</li> <li>How to follow a security checklist when auditing your app.</li> </ol> <h1 id=\"introduction\">Introduction</h1> <p>Securing a web application is all about understanding security domains and understanding the attack surface between these domains. In a Meteor app, things are pretty simple:</p> <ol> <li>Code that runs on the server can be trusted.</li> <li>Everything else: code that runs on the client, data sent through Method and publication arguments, etc, can’t be trusted.</li> </ol> <p>In practice, this means that you should do most of your security and validation on the boundary between these two domains. In simple terms:</p> <ol> <li>Validate and check all inputs that come from the client.</li> <li>Don’t leak any secret information to the client.</li> </ol> <h2 id=\"attack-surface\">Concept: Attack surface</h2> <p>Since Meteor apps are often written in a style that puts client and server code together, it’s extra important to be aware what is running on the client, what is running on the server, and what the boundaries are. Here’s a complete list of places security checks need to be done in a Meteor app:</p> <ol> <li>\n<strong>Methods</strong>: Any data that comes in through Method arguments needs to be validated, and Methods should not return data the user shouldn’t have access to.</li> <li>\n<strong>Publications</strong>: Any data that comes in through publication arguments needs to be validated, and publications should not return data the user shouldn’t have access to.</li> <li>\n<strong>Served files</strong>: You should make sure none of the source code or configuration files served to the client have secret data.</li> </ol> <p>Each of these points will have their own section below.</p> <h3 id=\"allow-deny\">Avoid allow/deny</h3> <p>In this guide, we’re going to take a strong position that using <a href=\"http://docs.meteor.com/#/full/allow\" target=\"_blank\" rel=\"external\">allow</a> or <a href=\"http://docs.meteor.com/#/full/deny\" target=\"_blank\" rel=\"external\">deny</a> to run MongoDB queries directly from the client is not a good idea. The main reason is that it is hard to follow the principles outlined above. It’s extremely difficult to validate the complete space of possible MongoDB operators, which could potentially grow over time with new versions of MongoDB.</p> <p>There have been several articles about the potential pitfalls of accepting MongoDB update operators from the client, in particular the <a href=\"https://www.discovermeteor.com/blog/allow-deny-security-challenge/\" target=\"_blank\" rel=\"external\">Allow &amp; Deny Security Challenge</a> and its <a href=\"https://www.discovermeteor.com/blog/allow-deny-challenge-results/\" target=\"_blank\" rel=\"external\">results</a>, both on the Discover Meteor blog.</p> <p>Given the points above, we recommend that all Meteor apps should use Methods to accept data input from the client, and restrict the arguments accepted by each Method as tightly as possible.</p> <p>Here’s a code snippet to add to your server code which disables client-side updates on a collection. This will make sure no other part of your app can use <code>allow</code>:</p> <pre class=\"highlight js\" data-language=\"js\">// Deny all client-side updates on the Lists collection\nLists.deny({\n  insert() { return true; },\n  update() { return true; },\n  remove() { return true; },\n});\n</pre> <h2 id=\"methods\">Methods</h2> <p>Methods are the way your Meteor server accepts inputs and data from the outside world, so it’s natural that they are the most important topic for security. If you don’t properly secure your Methods, users can end up modifying your database in unexpected ways - editing other people’s documents, deleting data, or messing up your database schema causing the app to crash.</p> <h3 id=\"validate-arguments\">Validate all arguments</h3> <p>It’s much easier to write clean code if you can assume your inputs are correct, so it’s valuable to validate all Method arguments before running any actual business logic. You don’t want someone to pass a data type you aren’t expecting and cause unexpected behavior.</p> <p>Consider that if you are writing unit tests for your Methods, you would need to test all possible kinds of input to the Method; validating the arguments restricts the space of inputs you need to unit test, reducing the amount of code you need to write overall. It also has the extra bonus of being self-documenting; someone else can come along and read the code to find out what kinds of parameters a Method is looking for.</p> <p>Just as an example, here’s a situation where not checking arguments can be disastrous:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.methods({\n  removeWidget(id) {\n    if (! this.userId) {\n      throw new Meteor.Error('removeWidget.unauthorized');\n    }\n\n    Widgets.remove(id);\n  }\n});\n</pre> <p>If someone comes along and passes a non-ID selector like <code>{}</code>, they will end up deleting the entire collection.</p> <h3 id=\"validated-method\">mdg:validated-method</h3> <p>To help you write good Methods that exhaustively validate their arguments, we’ve written a simple wrapper package for Methods that enforces argument validation. Read more about how to use it in the <a href=\"methods#validated-method\">Methods article</a>. The rest of the code samples in this article will assume that you are using this package. If you aren’t, you can still apply the same principles but the code will look a little different.</p> <h3 id=\"user-id-client\">Don’t pass userId from the client</h3> <p>The <code>this</code> context inside every Meteor Method has some useful information about the current connection, and the most useful is <a href=\"http://docs.meteor.com/#/full/method_userId\" target=\"_blank\" rel=\"external\"><code>this.userId</code></a>. This property is managed by the DDP login system, and is guaranteed by the framework itself to be secure following widely-used best practices.</p> <p>Given that the user ID of the current user is available through this context, you should never pass the ID of the current user as an argument to a Method. This would allow any client of your app to pass any user ID they want. Let’s look at an example:</p> <pre class=\"highlight js\" data-language=\"js\">// #1: Bad! The client could pass any user ID and set someone else's name\nsetName({ userId, newName }) {\n  Meteor.users.update(userId, {\n    $set: { name: newName }\n  });\n}\n\n// #2: Good, the client can only set the name on the currently logged in user\nsetName({ newName }) {\n  Meteor.users.update(this.userId, {\n    $set: { name: newName }\n  });\n}\n</pre> <p>The <em>only</em> times you should be passing any user ID as an argument are the following:</p> <ol> <li>This is a Method only accessible by admin users, who are allowed to edit other users. See the section about <a href=\"#\">user roles</a> to learn how to check that a user is in a certain role.</li> <li>This Method doesn’t modify the other user, but uses it as a target; for example, it could be a Method for sending a private message, or adding a user as a friend.</li> </ol> <h3 id=\"specific-action\">One Method per action</h3> <p>The best way to make your app secure is to understand all of the possible inputs that could come from an untrusted source, and make sure that they are all handled correctly. The easiest way to understand what inputs can come from the client is to restrict them to as small of a space as possible. This means your Methods should all be specific actions, and shouldn’t take a multitude of options that change the behavior in significant ways. The end goal is that you can easily look at each Method in your app and validate or test that it is secure. Here’s a secure example Method from the Todos example app:</p> <pre class=\"highlight js\" data-language=\"js\">export const makePrivate = new ValidatedMethod({\n  name: 'lists.makePrivate',\n  validate: new SimpleSchema({\n    listId: { type: String }\n  }).validator(),\n  run({ listId }) {\n    if (!this.userId) {\n      throw new Meteor.Error('lists.makePrivate.notLoggedIn',\n        'Must be logged in to make private lists.');\n    }\n\n    const list = Lists.findOne(listId);\n\n    if (list.isLastPublicList()) {\n      throw new Meteor.Error('lists.makePrivate.lastPublicList',\n        'Cannot make the last public list private.');\n    }\n\n    Lists.update(listId, {\n      $set: { userId: this.userId }\n    });\n\n    Lists.userIdDenormalizer.set(listId, this.userId);\n  }\n});\n</pre> <p>You can see that this Method does a <em>very specific thing</em> - it just makes a single list private. An alternative would have been to have a Method called <code>setPrivacy</code>, which could set the list to private or public, but it turns out that in this particular app the security considerations for the two related operations - <code>makePrivate</code> and <code>makePublic</code> - are very different. By splitting our operations into different Methods, we make each one much clearer. It’s obvious from the above Method definition which arguments we accept, what security checks we perform, and what operations we do on the database.</p> <p>However, this doesn’t mean you can’t have any flexibility in your Methods. Let’s look at an example:</p> <pre class=\"highlight js\" data-language=\"js\">const Meteor.users.methods.setUserData = new ValidatedMethod({\n  name: 'Meteor.users.methods.setUserData',\n  validate: new SimpleSchema({\n    fullName: { type: String, optional: true },\n    dateOfBirth: { type: Date, optional: true },\n  }).validator(),\n  run(fieldsToSet) {\n    Meteor.users.update(this.userId, {\n      $set: fieldsToSet\n    });\n  }\n});\n</pre> <p>The above Method is great because you can have the flexibility of having some optional fields and only passing the ones you want to change. In particular, what makes it possible for this Method is that the security considerations of setting one’s full name and date of birth are the same - we don’t have to do different security checks for different fields being set. Note that it’s very important that the <code>$set</code> query on MongoDB is generated on the server - we should never take MongoDB operators as-is from the client, since they are hard to validate and could result in unexpected side effects.</p> <h4 id=\"reusing-security-rules\">Refactoring to reuse security rules</h4> <p>You might run into a situation where many Methods in your app have the same security checks. This can be simplified by factoring out the security into a separate module, wrapping the Method body, or extending the <code>Mongo.Collection</code> class to do security inside the <code>insert</code>, <code>update</code>, and <code>remove</code> implementations on the server. However, implementing your client-server communication via specific Methods is still a good idea rather than sending arbitrary <code>update</code> operators from the client, since a malicious client can’t send an <code>update</code> operator that you didn’t test for.</p> <h3 id=\"rate-limiting\">Rate limiting</h3> <p>Just like REST endpoints, Meteor Methods can easily be called from anywhere - a malicious program, script in the browser console, etc. It is easy to fire many Method calls in a very short amount of time. This means it can be easy for an attacker to test lots of different inputs to find one that works. Meteor has built-in rate limiting for password login to stop password brute-forcing, but it’s up to you to define rate limits for your other Methods.</p> <p>In the Todos example app, we use the following code to set a basic rate limit on all Methods:</p> <pre class=\"highlight js\" data-language=\"js\">// Get list of all method names on Lists\nconst LISTS_METHODS = _.pluck([\n  insert,\n  makePublic,\n  makePrivate,\n  updateName,\n  remove,\n], 'name');\n\n// Only allow 5 list operations per connection per second\nDDPRateLimiter.addRule({\n  name(name) {\n    return _.contains(LISTS_METHODS, name);\n  },\n\n  // Rate limit per connection ID\n  connectionId() { return true; }\n}, 5, 1000);\n</pre> <p>This will make every Method only callable 5 times per second per connection. This is a rate limit that shouldn’t be noticeable by the user at all, but will prevent a malicious script from totally flooding the server with requests. You will need to tune the limit parameters to match your app’s needs.</p> <h2 id=\"publications\">Publications</h2> <p>Publications are the primary way a Meteor server can make data available to a client. While with Methods the primary concern was making sure users can’t modify the database in unexpected ways, with publications the main issue is filtering the data being returned so that a malicious user can’t get access to data they aren’t supposed to see.</p> <h4 id=\"You_can’t_do_security_at_the_rendering_layer\">You can’t do security at the rendering layer</h4>\n<p>In a server-side-rendered framework like Ruby on Rails, it’s sufficient to simply not display sensitive data in the returned HTML response. In Meteor, since the rendering is done on the client, an <code>if</code> statement in your HTML template is not secure; you need to do security at the data level to make sure that data is never sent in the first place.</p> <h3 id=\"method-rules\">Rules about Methods still apply</h3> <p>All of the points above about Methods apply to publications as well:</p> <ol> <li>Validate all arguments using <code>check</code> or <code>aldeed:simple-schema</code>.</li> <li>Never pass the current user ID as an argument.</li> <li>Don’t take generic arguments; make sure you know exactly what your publication is getting from the client.</li> <li>Use rate limiting to stop people from spamming you with subscriptions.</li> </ol> <h3 id=\"fields\">Always restrict fields</h3> <p><a href=\"http://docs.meteor.com/#/full/find\" target=\"_blank\" rel=\"external\"><code>Mongo.Collection#find</code> has an option called <code>fields</code></a> which lets you filter the fields on the fetched documents. You should always use this in publications to make sure you don’t accidentally publish secret fields.</p> <p>For example, you could write a publication, then later add a secret field to the published collection. Now, the publication would be sending that secret to the client. If you filter the fields on every publication when you first write it, then adding another field won’t automatically publish it.</p> <pre class=\"highlight js\" data-language=\"js\">// #1: Bad! If we add a secret field to Lists later, the client\n// will see it\nMeteor.publish('lists.public', function () {\n  return Lists.find({userId: {$exists: false}});\n});\n\n// #2: Good, if we add a secret field to Lists later, the client\n// will only publish it if we add it to the list of fields\nMeteor.publish('lists.public', function () {\n  return Lists.find({userId: {$exists: false}}, {\n    fields: {\n      name: 1,\n      incompleteCount: 1,\n      userId: 1\n    }\n  });\n});\n</pre> <p>If you find yourself repeating the fields often, it makes sense to factor out a dictionary of public fields that you can always filter by, like so:</p> <pre class=\"highlight js\" data-language=\"js\">// In the file where Lists is defined\nLists.publicFields = {\n  name: 1,\n  incompleteCount: 1,\n  userId: 1\n};\n</pre> <p>Now your code becomes a bit simpler:</p> <pre class=\"highlight js\" data-language=\"js\">Meteor.publish('lists.public', function () {\n  return Lists.find({userId: {$exists: false}}, {\n    fields: Lists.publicFields\n  });\n});\n</pre> <h3 id=\"publications-user-id\">Publications and userId</h3> <p>The data returned from publications will often be dependent on the currently logged in user, and perhaps some properties about that user - whether they are an admin, whether they own a certain document, etc.</p> <p>Publications are not reactive, and they only re-run when the currently logged in <code>userId</code> changes, which can be accessed through <code>this.userId</code>. Because of this, it’s easy to accidentally write a publication that is secure when it first runs, but doesn’t respond to changes in the app environment. Let’s look at an example:</p> <pre class=\"highlight js\" data-language=\"js\">// #1: Bad! If the owner of the list changes, the old owner will still see it\nMeteor.publish('list', function (listId) {\n  check(listId, String);\n\n  const list = Lists.findOne(listId);\n\n  if (list.userId !== this.userId) {\n    throw new Meteor.Error('list.unauthorized',\n      'This list doesn\\'t belong to you.');\n  }\n\n  return Lists.find(listId, {\n    fields: {\n      name: 1,\n      incompleteCount: 1,\n      userId: 1\n    }\n  });\n});\n\n// #2: Good! When the owner of the list changes, the old owner won't see it anymore\nMeteor.publish('list', function (listId) {\n  check(listId, String);\n\n  return Lists.find({\n    _id: listId,\n    userId: this.userId\n  }, {\n    fields: {\n      name: 1,\n      incompleteCount: 1,\n      userId: 1\n    }\n  });\n});\n</pre> <p>In the first example, if the <code>userId</code> property on the selected list changes, the query in the publication will still return the data, since the security check in the beginning will not re-run. In the second example, we have fixed this by putting the security check in the returned query itself.</p> <p>Unfortunately, not all publications are as simple to secure as the example above. For more tips on how to use <code>reywood:publish-composite</code> to handle reactive changes in publications, see the <a href=\"data-loading#complex-auth\">data loading article</a>.</p> <h3 id=\"publication-options\">Passing options</h3> <p>For certain applications, for example pagination, you’ll want to pass options into the publication to control things like how many documents should be sent to the client. There are some extra considerations to keep in mind for this particular case.</p> <ol> <li>\n<strong>Passing a limit</strong>: In the case where you are passing the <code>limit</code> option of the query from the client, make sure to set a maximum limit. Otherwise, a malicious client could request too many documents at once, which could raise performance issues.</li> <li>\n<strong>Passing in a filter</strong>: If you want to pass fields to filter on because you don’t want all of the data, for example in the case of a search query, make sure to use MongoDB <code>$and</code> to intersect the filter coming from the client with the documents that client should be allowed to see. Also, you should whitelist the keys that the client can use to filter - if the client can filter on secret data, it can run a search to find out what that data is.</li> <li>\n<strong>Passing in fields</strong>: If you want the client to be able to decide which fields of the collection should be fetched, make sure to intersect that with the fields that client is allowed to see, so that you don’t accidentally send secret data to the client.</li> </ol> <p>In summary, you should make sure that any options passed from the client to a publication can only restrict the data being requested, rather than extending it.</p> <h2 id=\"served-files\">Served files</h2> <p>Publications are not the only place the client gets data from the server. The set of source code files and static assets that are served by your application server could also potentially contain sensitive data:</p> <ol> <li>Business logic an attacker could analyze to find weak points.</li> <li>Secret algorithms that a competitor could steal.</li> <li>Secret API keys.</li> </ol> <h3 id=\"secret-code\">Secret server code</h3> <p>While the client-side code of your application is necessarily accessible by the browser, every application will have some secret code on the server that you don’t want to share with the world.</p> <p>Secret business logic in your app should be located in code that is only loaded on the server. This means it is in a <code>server/</code> directory of your app, in a package that is only included on the server, or in a file inside a package that was loaded only on the server.</p> <p>If you have a Meteor Method in your app that has secret business logic, you might want to split the Method into two functions - the optimistic UI part that will run on the client, and the secret part that runs on the server. Most of the time, putting the entire Method on the server doesn’t result in the best user experience. Let’s look at an example, where you have a secret algorithm for calculating someone’s MMR (ranking) in a game:</p> <pre class=\"highlight js\" data-language=\"js\">// In a server-only file\nMMR = {\n  updateWithSecretAlgorithm(userId) {\n    // your secret code here\n  }\n}\n</pre> <pre class=\"highlight js\" data-language=\"js\">// In a file loaded on client and server\nconst Meteor.users.methods.updateMMR = new ValidatedMethod({\n  name: 'Meteor.users.methods.updateMMR',\n  validate: null,\n  run() {\n    if (this.isSimulation) {\n      // Simulation code for the client (optional)\n    } else {\n      MMR.updateWithSecretAlgorithm(this.userId);\n    }\n  }\n});\n</pre> <p>Note that while the Method is defined on the client, the actual secret logic is only accessible from the server. Keep in mind that code inside <code>if (Meteor.isServer)</code> blocks is still sent to the client, it is just not executed. So don’t put any secret code in there.</p> <p>Secret API keys should never be stored in your source code at all, the next section will talk about how to handle them.</p> <h2 id=\"api-keys\">Securing API keys</h2> <p>Every app will have some secret API keys or passwords:</p> <ol> <li>Your database password.</li> <li>API keys for external APIs.</li> </ol> <p>These should never be stored as part of your app’s source code in version control, because developers might copy code around to unexpected places and forget that it contains secret keys. You can keep your keys separately in <a href=\"https://www.dropbox.com/\" target=\"_blank\" rel=\"external\">Dropbox</a>, <a href=\"https://lastpass.com\" target=\"_blank\" rel=\"external\">LastPass</a>, or another service, and then reference them when you need to deploy the app.</p> <p>You can pass settings to your app through a <em>settings file</em> or an <em>environment variable</em>. Most of your app settings should be in JSON files that you pass in when starting your app. You can start your app with a settings file by passing the <code>--settings</code> flag:</p> <pre class=\"highlight sh\" data-language=\"sh\"># Pass development settings when running your app locally\nmeteor --settings development.json\n\n# Pass production settings when deploying your app to Galaxy\nmeteor deploy myapp.com --settings production.json\n</pre> <p>Here’s what a settings file with some API keys might look like:</p> <pre class=\"highlight js\" data-language=\"js\">{\n  \"facebook\": {\n    \"appId\": \"12345\",\n    \"secret\": \"1234567\"\n  }\n}\n</pre> <p>In your app’s JavaScript code, these settings can be accessed from the variable <code>Meteor.settings</code>.</p> <p><a href=\"deployment#environment\">Read more about managing keys and settings in the Deployment article.</a></p> <h3 id=\"client-settings\">Settings on the client</h3> <p>In most normal situations, API keys from your settings file will only be used by the server, and by default the data passed in through <code>--settings</code> is only available on the server. However, if you put data under a special key called <code>public</code>, it will be available on the client. You might want to do this if, for example, you need to make an API call from the client and are OK with users knowing that key. Public settings will be available on the client under <code>Meteor.settings.public</code>.</p> <h3 id=\"api-keys-oauth\">API keys for OAuth</h3> <p>For the <code>accounts-facebook</code> package to pick up these keys, you need to add them to the service configuration collection in the database. Here’s how you do that:</p> <p>First, add the <code>service-configuration</code> package:</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor add service-configuration\n</pre> <p>Then, upsert into the <code>ServiceConfiguration</code> collection:</p> <pre class=\"highlight js\" data-language=\"js\">ServiceConfiguration.configurations.upsert({\n  service: \"facebook\"\n}, {\n  $set: {\n    appId: Meteor.settings.facebook.appId,\n    loginStyle: \"popup\",\n    secret: Meteor.settings.facebook.secret\n  }\n});\n</pre> <p>Now, <code>accounts-facebook</code> will be able to find that API key and Facebook login will work properly.</p> <h2 id=\"ssl\">SSL</h2> <p>This is a very short section, but it deserves its own place in the table of contents.</p> <p><strong>Every production Meteor app that handles user data should run with SSL.</strong></p> <p>For the uninitiated, this means all of your HTTP requests should go over HTTPS, and all websocket data should be sent over WSS.</p> <p>Yes, Meteor does hash your password or login token on the client before sending it over the wire, but that only prevents an attacker from figuring out your password - it doesn’t prevent them from logging in as you, since they could just send the hashed password to the server to log in! No matter how you slice it, logging in requires the client to send sensitive data to the server, and the only way to secure that transfer is by using SSL. Note that the same issue is present when using cookies for authentication in a normal HTTP web application, so any app that needs to reliably identify users should be running on SSL.</p> <p>You can ensure that any unsecured connection to your app redirects to a secure connection by adding the <code>force-ssl</code> package.</p> <h4 id=\"Setting_up_SSL\">Setting up SSL</h4>\n<ol> <li>On <a href=\"deployment#galaxy\">Galaxy</a>, most things are set up for you, but you need to add a certificate. <a href=\"http://galaxy-guide.meteor.com/encryption.html\" target=\"_blank\" rel=\"external\">See the help article about SSL on Galaxy</a>.</li> <li>If you are running on your own <a href=\"deployment#custom-deployment\">infrastructure</a>, there are a few options for setting up SSL, mostly through configuring a proxy web server. See the articles: <a href=\"http://joshowens.me/ssl-and-meteor-js/\" target=\"_blank\" rel=\"external\">Josh Owens on SSL and Meteor</a>, <a href=\"http://www.meteorpedia.com/read/SSL\" target=\"_blank\" rel=\"external\">SSL on Meteorpedia</a>, and <a href=\"https://www.digitalocean.com/community/tutorials/how-to-deploy-a-meteor-js-application-on-ubuntu-14-04-with-nginx\" target=\"_blank\" rel=\"external\">Digital Ocean tutorial with an Nginx config</a>.</li> </ol> <h2 id=\"checklist\">Security checklist</h2> <p>This is a collection of points to check about your app that might catch common errors. However, it’s not an exhaustive list yet—if we missed something, please let us know or file a pull request!</p> <ol> <li>Make sure your app doesn’t have the <code>insecure</code> or <code>autopublish</code> packages.</li> <li>Validate all Method and publication arguments, and include the <code>audit-argument-checks</code> to check this automatically.</li> <li><a href=\"accounts#dont-use-profile\">Deny writes to the <code>profile</code> field on user documents.</a></li> <li><a href=\"security#allow-deny\">Use Methods instead of client-side insert/update/remove and allow/deny.</a></li> <li>Use specific selectors and <a href=\"http://guide.meteor.com/security.html#fields\">filter fields</a> in publications.</li> <li>Don’t use <a href=\"blaze#rendering-html\">raw HTML inclusion in Blaze</a> unless you really know what you are doing.</li> <li><a href=\"security#api-keys\">Make sure secret API keys and passwords aren’t in your source code.</a></li> <li>Secure the data, not the UI - redirecting away from a client-side route does nothing for security, it’s just a nice UX feature.</li> <li>\n<a href=\"http://guide.meteor.com/security.html#user-id-client\">Don’t ever trust user IDs passed from the client.</a> Use <code>this.userId</code> inside Methods and publications.</li> <li>Set up <a href=\"https://atmospherejs.com/meteor/browser-policy\" target=\"_blank\" rel=\"external\">browser policy</a>, but know that not all browsers support it so it just provides an extra layer of security to users with modern browsers.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/security.html\" class=\"_attribution-link\">https://guide.meteor.com/security.html</a>\n  </p>\n</div>\n","blaze":"<h1 class=\"title-page\">Blaze</h1> <div class=\"subtitle-page\">How to use Blaze, Meteor's frontend rendering system, to build usable and maintainable user interfaces.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>How to use the Spacebars language to define templates rendered by the Blaze engine.</li> <li>Best practices for writing reusable components in Blaze.</li> <li>How the Blaze rendering engine works under the hood and some advanced techniques for using it.</li> <li>How to test Blaze templates.</li> </ol> <p>Blaze is Meteor’s built-in reactive rendering library. Usually, templates are written in <a href=\"https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md\" target=\"_blank\" rel=\"external\">Spacebars</a>, a variant of <a href=\"http://handlebarsjs.com\" target=\"_blank\" rel=\"external\">Handlebars</a> designed to take advantage of <a href=\"https://github.com/meteor/meteor/tree/devel/packages/tracker\" target=\"_blank\" rel=\"external\">Tracker</a>, Meteor’s reactivity system. These templates are compiled into JavaScript UI components that are rendered by the Blaze library.</p> <p>Blaze is not required to build applications in Meteor—you can also easily use <a href=\"http://react-in-meteor.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"external\">React</a> or <a href=\"http://www.angular-meteor.com\" target=\"_blank\" rel=\"external\">Angular</a> to develop your UI (<a href=\"ui-ux#view-layers\">here’s a comparison</a>). However, this particular article will take you through best practices in building an application in Blaze, which is used as the UI engine in all of the other articles.</p> <h2 id=\"spacebars\">Spacebars</h2> <p>Spacebars is a handlebars-like templating language, built on the concept of rendering a reactively changing <em>data context</em>. Spacebars templates look like simple HTML with special “mustache” tags delimited by curly braces: <code>{{ }}</code>.</p> <p>As an example, consider the <code>Todos_item</code> template from the Todos example app:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Todos_item\"&gt;\n  &lt;div class=\"list-item {{checkedClass todo}} {{editingClass editing}}\"&gt;\n    &lt;label class=\"checkbox\"&gt;\n      &lt;input type=\"checkbox\" checked={{todo.checked}} name=\"checked\"&gt;\n      &lt;span class=\"checkbox-custom\"&gt;&lt;/span&gt;\n    &lt;/label&gt;\n\n    &lt;input type=\"text\" value=\"{{todo.text}}\" placeholder=\"Task name\"&gt;\n    &lt;a class=\"js-delete-item delete-item\" href=\"#\"&gt;\n      &lt;span class=\"icon-trash\"&gt;&lt;/span&gt;\n    &lt;/a&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</pre> <p>This template expects to be rendered with an object with key <code>todo</code> as data context (we’ll see <a href=\"#validate-data-context\">below</a> how to enforce that). We access the properties of the <code>todo</code> using the mustache tag, such as <code>{{todo.text}}</code>. The default behavior is to render that property as a string; however for some attributes (such as <code>checked={{todo.checked}}</code>) it can be resolved as a boolean value.</p> <p>Note that simple string interpolations like this will always escape any HTML for you, so you don’t need to perform safety checks for XSS.</p> <p>Additionally we can see an example of a <em>template helper</em>—<code>{{checkedClass todo}}</code> calls out to a <code>checkedClass</code> helper defined in a separate JavaScript file. The HTML template and JavaScript file together define the <code>Todos_item</code> component:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Todos_item.helpers({\n  checkedClass(todo) {\n    return todo.checked &amp;&amp; 'checked';\n  }\n});\n</pre> <p>In the context of a Blaze helper, <code>this</code> is scoped to the current <em>data context</em> at the point the helper was used. This can be hard to reason about, so it’s often a good idea to instead pass the required data into the helper as an argument (as we do here).</p> <p>Apart from simple interpolation, mustache tags can be used for control flow in the template. For instance, in the <code>Lists_show</code> template, we render a list of todos like this:</p> <pre class=\"highlight html\" data-language=\"html\">{{#each todo in todos}}\n  {{&gt; Todos_item (todoArgs todo)}}\n{{else}}\n  &lt;div class=\"wrapper-message\"&gt;\n    &lt;div class=\"title-message\"&gt;No tasks here&lt;/div&gt;\n    &lt;div class=\"subtitle-message\"&gt;Add new tasks using the field above&lt;/div&gt;\n  &lt;/div&gt;\n{{/each}}\n</pre> <p>This snippet illustrates a few things:</p> <ul> <li>The <code>{{#each .. in}}</code> block helper which repeats a block of HTML for each element in an array or cursor, or renders the contents of the <code>{{else}}</code> block if no items exist.</li> <li>The template inclusion tag, <code>{{&gt; Todos_item (todoArgs todo)}}</code> which renders the <code>Todos_item</code> component with the data context returned from the <code>todosArg</code> helper.</li> </ul> <p>You can read about the full syntax <a href=\"https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md\" target=\"_blank\" rel=\"external\">in the Spacebars README</a>. In this section we’ll attempt to cover some of the important details beyond just the syntax.</p> <h3 id=\"data-contexts\">Data contexts and lookup</h3> <p>We’ve seen that <code>{{todo.title}}</code> accesses the <code>title</code> property of the <code>todo</code> item on the current data context. Additionally, <code>..</code> accesses the parent data context (rarely a good idea), <code>list.todos.[0]</code> accesses the first element of the <code>todos</code> array on <code>list</code>.</p> <p>Note that Spacebars is very forgiving of <code>null</code> values. It will not complain if you try to access a property on a <code>null</code> value (for instance <code>foo.bar</code> if <code>foo</code> is not defined), but instead simply treats it also as null. However there are exceptions to this—trying to call a <code>null</code> function, or doing the same <em>within</em> a helper will lead to exceptions.</p> <h3 id=\"helpers\">Calling helpers with arguments</h3> <p>You can provide arguments to a helper like <code>checkedClass</code> by simply placing the argument after the helper call, as in: <code>{{checkedClass todo true \"checked\"}}</code>. You can also provide a list of named keyword arguments to a helper with <code>{{checkedClass todo noClass=true classname=\"checked\"}}</code>. When you pass keyword arguments, you need to read them off of the <code>hash</code> property of the final argument. Here’s how it would look for the example we just saw:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Todos_item.helpers({\n  checkedClass(todo, options) {\n    const classname = options.hash.classname || 'checked';\n    if (todo.checked) {\n      return classname;\n    } else if (options.hash.noClass) {\n      return `no-${classname}`;\n    }\n  }\n});\n</pre> <p>Note that using keyword arguments to helpers is a little awkward, so in general it’s usually easier to avoid them. This feature was included for historical reasons to match the way keyword arguments work in Handlebars.</p> <p>You can also pass the output of a helper to a template inclusion or other helper. To do so, use parentheses to show precedence:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; Todos_item (todoArgs todo)}}\n</pre> <p>Here the <code>todo</code> is passed as argument to the <code>todoArgs</code> helper, then the output is passed into the <code>Todos_item</code> template.</p> <h3 id=\"inclusion\">Template inclusion</h3> <p>You “include” a sub-component with the <code>{{&gt; }}</code> syntax. By default, the sub-component will gain the data context of the caller, although it’s usually a good idea to be explicit. You can provide a single object which will become the entire data context (as we did with the object returned by the <code>todoArgs</code> helper above), or provide a list of keyword arguments which will be put together into one object, like so:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; subComponent arg1=\"value-of-arg1\" arg2=helperThatReturnsValueOfArg2}}\n</pre> <p>In this case, the <code>subComponent</code> component can expect a data context of the form:</p> <pre class=\"highlight js\" data-language=\"js\">{\n  arg1: ...,\n  arg2: ...\n}\n</pre> <h3 id=\"attribute-helpers\">Attribute Helpers</h3> <p>We saw above that using a helper (or data context lookup) in the form <code>checked={{todo.checked}}</code> will add the checked property to the HTML tag if <code>todo.checked</code> evaluates to true. Also, you can directly include an object in the attribute list of an HTML element to set multiple attributes at once:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;a {{attributes}}&gt;My Link&lt;/a&gt;\n</pre> <pre class=\"highlight\" data-language=\"highlight\">Template.foo.helpers({\n  attributes() {\n    return {\n      class: 'A class',\n      style: {background: 'blue'}\n    };\n  }\n});\n</pre> <h3 id=\"rendering-html\">Rendering raw HTML</h3> <p>Although by default a mustache tag will escape HTML tags to avoid <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\" target=\"_blank\" rel=\"external\">XSS</a>, you can render raw HTML with the triple-mustache: <code>{{{ }}}</code>.</p> <pre class=\"highlight html\" data-language=\"html\">{{{myHtml}}}\n</pre> <pre class=\"highlight js\" data-language=\"js\">Template.foo.helpers({\n  myHtml() {\n    return '&lt;h1&gt;This H1 will render&lt;/h1&gt;';\n  }\n});\n</pre> <p>You should be extremely careful about doing this, and always ensure you aren’t returning user-generated content (or escape it if you do!) from such a helper.</p> <h3 id=\"block-helpers\">Block Helpers</h3> <p>A block helper, called with <code>{{# }}</code> is a helper that takes (and may render) a block of HTML. For instance, we saw the <code>{{#each .. in}}</code> helper above which repeats a given block of HTML once per item in a list. You can also use a template as a block helper, rendering its content via the <code>Template.contentBlock</code> and <code>Template.elseBlock</code>. For instance, you could create your own <code>{{#if}}</code> helper with:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"myIf\"&gt;\n  {{#if condition}}\n    {{&gt; Template.contentBlock}}\n  {{else}}\n    {{&gt; Template.elseBlock}}\n  {{/if}}\n&lt;/template&gt;\n\n&lt;template name=\"caller\"&gt;\n  {{#myIf condition=true}}\n    &lt;h1&gt;I'll be rendered!&lt;/h1&gt;\n  {{else}}\n    &lt;h1&gt;I won't be rendered&lt;/h1&gt;    \n  {{/myIf}}\n&lt;/template&gt;\n</pre> <h3 id=\"builtin-block-helpers\">Built-in Block Helpers</h3> <p>There are a few built-in block helpers that are worth knowing about:</p> <h4 id=\"if-unless\">If / Unless</h4> <p>The <code>{{#if}}</code> and <code>{{#unless}}</code> helpers are fairly straightforward but invaluable for controlling the control flow of a template. Both operate by evaluating and checking their single argument for truthiness. In JS <code>null</code>, <code>undefined</code>, <code>0</code>, <code>''</code>, <code>[]</code>, and <code>false</code> are considered “falsy”, and all other values are “truthy”.</p> <pre class=\"highlight html\" data-language=\"html\">{{#if something}}\n  &lt;p&gt;It's true&lt;/p&gt;\n{{else}}\n  &lt;p&gt;It's false&lt;/p&gt;\n{{/if}}\n</pre> <h4 id=\"each-in\">Each-in</h4> <p>The <code>{{#each .. in}}</code> helper is a convenient way to step over a list while retaining the outer data context.</p> <pre class=\"highlight html\" data-language=\"html\">{{#each todo in todos}}\n  {{#each tag in todo.tags}}\n    &lt;!-- in here, both todo and tag are in scope --&gt;\n  {{/each}}\n{{/each}}\n</pre> <h4 id=\"let\">Let</h4> <p>The <code>{{#let}}</code> helper is useful to capture the output of a helper or document subproperty within a template. Think of it just like defining a variable using JavaScript <code>let</code>.</p> <pre class=\"highlight html\" data-language=\"html\">{{#let name=person.bio.firstName color=generateColor}}\n  &lt;div&gt;{{name}} gets a {{color}} card!&lt;/div&gt;\n{{/let}}\n</pre> <p>Note that <code>name</code> and <code>color</code> (and <code>todo</code> above) are only added to scope in the template; they <em>are not</em> added to the data context. Specifically this means that inside helpers and event handlers, you cannot access them with <code>this.name</code> or <code>this.color</code>. If you need to access them inside a helper, you should pass them in as an argument (like we do with <code>(todoArgs todo)</code> above).</p> <h4 id=\"each-and-with\">Each and With</h4> <p>There are also two Spacebars built-in helpers, <code>{{#each}}</code>, and <code>{{#with}}</code>, which we do not recommend using (see <a href=\"#use-each-in\">use each-in</a> above). These block helpers change the data context within a template, which can be difficult to reason about.</p> <p>Like <code>{{#each .. in}}</code>, <code>{{#each}}</code> iterates over an array or cursor, changing the data context within its content block to be the item in the current iteration. <code>{{#with}}</code> simply changes the data context inside itself to the provided object. In most cases it’s better to use <code>{{#each .. in}}</code> and <code>{{#let}}</code> instead, just like it’s better to declare a variable than use the JavaScript <code>with</code> keyword.</p> <h4 id=\"strictness\">Strictness</h4> <p>Spacebars has a very strict HTML parser. For instance, you can’t self-close a <code>div</code> (<code>&lt;div/&gt;</code>) in Spacebars, and you need to close some tags that a browser might not require you to (such as a <code>&lt;p&gt;</code> tag). Thankfully, the parser will warn you when it can’t understand your code with an exact line number for the error.</p> <h4 id=\"escaping\">Escaping</h4> <p>To insert literal curly braces: <code>{{ }}</code> and the like, add a pipe character, <code>|</code>, to the opening braces:</p> <pre class=\"highlight xml\" data-language=\"xml\">&lt;!-- will render as &lt;h1&gt;All about {{&lt;/h1&gt; --&gt;\n&lt;h1&gt;All about {{|&lt;/h1&gt;\n\n&lt;!-- will render as &lt;h1&gt;All about {{{&lt;/h1&gt; --&gt;\n&lt;h1&gt;All about {{{|&lt;/h1&gt;\n</pre> <h2 id=\"reusable-components\">Reusable components in Blaze</h2> <p>In <a href=\"ui-ux#smart-components\">UI/UX article</a> we discussed the merits of creating reusable components that interact with their environment in clear and minimal ways.</p> <p>Although Blaze, which is a simple template-based rendering engine, doesn’t enforce a lot of these principles (unlike other frameworks like React and Angular) you can enjoy most of the same benefits by following some conventions when writing your Blaze components. This section will outline some of these “best practices” for writing reusable Blaze components.</p> <p>Examples below will reference the <code>Lists_show</code> component from the Todos example app.</p> <h3 id=\"validate-data-context\">Validate data context</h3> <p>In order to ensure your component always gets the data you expect, you should validate the data context provided to it. This is just like validating the arguments to any Meteor Method or publication, and lets you write your validation code in one place and then assume that the data is correct.</p> <p>You can do this in a Blaze component’s <code>onCreated()</code> callback, like so:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show.onCreated(function() {\n  this.autorun(() =&gt; {\n    new SimpleSchema({\n      list: {type: Function},\n      todosReady: {type: Boolean},\n      todos: {type: Mongo.Cursor}\n    }).validate(Template.currentData());\n  });\n});\n</pre> <p>We use an <code>autorun()</code> here to ensure that the data context is re-validated whenever it changes.</p> <h3 id=\"name-data-contexts\">Name data contexts to template inclusions</h3> <p>It’s tempting to just provide the object you’re interested in as the entire data context of the template (like <code>{{&gt; Todos_item todo}}</code>). It’s better to explicitly give it a name (<code>{{&gt; Todos_item todo=todo}}</code>). There are two primary reasons for this:</p> <ol> <li>When using the data in the sub-component, it’s a lot clearer what you are accessing; <code>{{todo.title}}</code> is clearer than <code>{{title}}</code>.</li> <li>It’s more flexible, in case you need to give the component more arguments in the future.</li> </ol> <p>For instance, in the case of the <code>Todos_item</code> sub-component, we need to provide two extra arguments to control the editing state of the item, which would have been a hassle to add if the item was used with a single <code>todo</code> argument.</p> <p>Additionally, for better clarity, always explicitly provide a data context to an inclusion rather than letting it inherit the context of the template where it was rendered:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;!-- bad: inherits data context, who knows what is in there! --&gt;\n{{&gt; myTemplate}}\n\n&lt;!-- explicitly passes empty data context --&gt;\n{{&gt; myTemplate \"\"}}\n</pre> <h3 id=\"use-each-in\">Prefer <code>{{#each .. in}}</code>\n</h3> <p>For similar reasons to the above, it’s better to use <code>{{#each todo in todos}}</code> rather than the older <code>{{#each todos}}</code>. The second sets the entire data context of its children to a single <code>todo</code> object, and makes it difficult to access any context from outside of the block.</p> <p>The only reason not to use <code>{{#each .. in}}</code> would be because it makes it difficult to access the <code>todo</code> symbol inside event handlers. Typically the solution to this is to use a sub-component to render the inside of the loop:</p> <pre class=\"highlight html\" data-language=\"html\">{{#each todo in todos}}\n  {{&gt; Todos_item todo=todo}}\n{{/each}}\n</pre> <p>Now you can access <code>this.todo</code> inside <code>Todos_item</code> event handlers and helpers.</p> <h3 id=\"pass-data-into-helpers\">Pass data into helpers</h3> <p>Rather than accessing data in helpers via <code>this</code>, it’s better to pass the arguments in directly from the template. So our <code>checkedClass</code> helper takes the <code>todo</code> as an argument and inspects it directly, rather than implicitly using <code>this.todo</code>. We do this for similar reasons to why we always pass arguments to template inclusions, and because “template variables” (such as the iteratee of the <code>{{#each .. in}}</code> helper) are not available on <code>this</code>.</p> <h3 id=\"use-template-instance\">Use the template instance</h3> <p>Although Blaze’s simple API doesn’t necessarily encourage a componentized approach, you can use the <em>template instance</em> as a convenient place to store internal functionality and state. The template instance can be accessed via <code>this</code> inside Blaze’s lifecycle callbacks and as <code>Template.instance()</code> in event handlers and helpers. It’s also passed as the second argument to event handlers.</p> <p>We suggest a convention of naming it <code>instance</code> in these contexts and assigning it at the top of every relevant helper. For instance:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show.helpers({\n  todoArgs(todo) {\n    const instance = Template.instance();\n    return {\n      todo,\n      editing: instance.state.equals('editingTodo', todo._id),\n      onEditingChange(editing) {\n        instance.state.set('editingTodo', editing ? todo._id : false);\n      }\n    };\n  }\n});\n\nTemplate.Lists_show.events({\n  'click .js-cancel'(event, instance) {\n    instance.state.set('editingTodo', false);\n  }\n});\n</pre> <h3 id=\"reactive-dict-state\">Use a reactive dict for state</h3> <p>The <a href=\"https://atmospherejs.com/meteor/reactive-dict\" target=\"_blank\" rel=\"external\"><code>reactive-dict</code></a> package lets you define a simple reactive key-value dictionary. It’s a convenient way to attach internal state to a component. We create the <code>state</code> dictionary in the <code>onCreated</code> callback, and attach it to the template instance:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show.onCreated(function() {\n  this.state = new ReactiveDict();\n  this.state.setDefault({\n    editing: false,\n    editingTodo: false\n  });\n});\n</pre> <p>Once the state dictionary has been created we can access it from helpers and modify it in event handlers (see the code snippet above).</p> <h3 id=\"attach-functions-to-instance\">Attach functions to the instance</h3> <p>If you have common functionality for a template instance that needs to be abstracted or called from multiple event handlers, it’s sensible to attach it as functions directly to the template instance in the <code>onCreated()</code> callback:</p> <pre class=\"highlight js\" data-language=\"js\">import {\n  updateName,\n} from '../../api/lists/methods.js';\n\nTemplate.Lists_show.onCreated(function() {\n  this.saveList = () =&gt; {\n    this.state.set('editing', false);\n\n    updateName.call({\n      listId: this.data.list._id,\n      newName: this.$('[name=name]').val()\n    }, (err) =&gt; {\n      err &amp;&amp; alert(err.error);\n    });\n  };\n});\n</pre> <p>Then you can call that function from within an event handler:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show.events({\n  'submit .js-edit-form'(event, instance) {\n    event.preventDefault();\n    instance.saveList();\n  }\n});\n</pre> <h3 id=\"scope-dom-lookups-to-instance\">Scope DOM lookups to the template instance</h3> <p>It’s a bad idea to look up things directly in the DOM with jQuery’s global <code>$()</code>. It’s easy to select some element on the page that has nothing to do with the current component. Also, it limits your options on rendering <em>outside</em> of the main document (see testing section below).</p> <p>Instead, Blaze gives you a way to scope a lookup to within the current template instance. Typically you use this either from a <code>onRendered()</code> callback to setup jQuery plugins (called via <code>Template.instance().$()</code> or <code>this.$()</code>), or from event handlers to call DOM functions directly (called via <code>Template.instance().$()</code> or using the event handler’s second argument like <code>instance.$()</code>). For instance, when the user clicks the add todo button, we want to focus the <code>&lt;input&gt;</code> element:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show.events({\n  'click .js-todo-add'(event, instance) {\n    instance.$('.js-todo-new input').focus();\n  }\n});\n</pre> <h3 id=\"js-selectors-for-events\">Use <code>.js-</code> selectors for event maps</h3> <p>When you are setting up event maps in your JS files, you need to ‘select’ the element in the template that the event attaches to. Rather than using the same CSS class names that are used to style the elements, it’s better practice to use classnames that are specifically added for those event maps. A reasonable convention is a class starting with <code>js-</code> to indicate it is used by the JavaScript. For instance <code>.js-todo-add</code> above.</p> <h3 id=\"passing-template-content\">Passing HTML content as a template argument</h3> <p>If you need to pass in content to a sub-component (for instance the content of a modal dialog), you can use the <a href=\"#block-helpers\">custom block helper</a> to provide a block of content. If you need more flexibility, typically just providing the component name as an argument is the way to go. The sub-component can then just render that component with:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; Template.dynamic templateName dataContext}}\n</pre> <p>This is more or less the way that the <a href=\"https://atmospherejs.com/kadira/blaze-layout\" target=\"_blank\" rel=\"external\"><code>kadira:blaze-layout</code></a> package works.</p> <h3 id=\"pass-callbacks\">Pass callbacks</h3> <p>If you need to communicate <em>up</em> the component hierarchy, it’s best to pass a <em>callback</em> for the sub-component to call.</p> <p>For instance, only one todo item can be in the editing state at a time, so the <code>Lists_show</code> component manages the state of which is edited. When you focus on an item, that item needs to tell the list’s component to make it the “edited” one. To do that, we pass a callback into the <code>Todos_item</code> component, and the child calls it whenever the state needs to be updated in the parent:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; Todos_item (todoArgs todo)}}\n</pre> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show.helpers({\n  todoArgs(todo) {\n    const instance = Template.instance();\n    return {\n      todo,\n      editing: instance.state.equals('editingTodo', todo._id),\n      onEditingChange(editing) {\n        instance.state.set('editingTodo', editing ? todo._id : false);\n      }\n    };\n  }\n});\n\nTemplate.Todos_item.events({\n  'focus input[type=text]'() {\n    this.onEditingChange(true);\n  }\n});\n</pre> <h3 id=\"onrendered-for-libs\">Use <code>onRendered()</code> for 3rd party libraries</h3> <p>As we mentioned above, the <code>onRendered()</code> callback is typically the right spot to call out to third party libraries that expect a pre-rendered DOM (such as jQuery plugins). The <code>onRendered()</code> callback is triggered <em>once</em> after the component has rendered and attached to the DOM for the first time.</p> <p>Occasionally, you may need to wait for data to become ready before it’s time to attach the plugin (although typically it’s a better idea to use a sub-component in this use case). To do so, you can setup an <code>autorun</code> in the <code>onRendered()</code> callback. For instance, in the <code>Lists_show_page</code> component, we want to wait until the subscription for the list is ready (i.e. the todos have rendered) before we hide the launch screen:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.onRendered(function() {\n  this.autorun(() =&gt; {\n    if (this.subscriptionsReady()) {\n      // Handle for launch screen defined in app-body.js\n      AppLaunchScreen.listRender.release();\n    }\n  });\n});\n</pre> <h2 id=\"smart-components\">Writing smart components with Blaze</h2> <p>Some of your components will need to access state outside of their data context—for instance, data from the server via subscriptions or the contents of client-side store. As discussed in the <a href=\"data-loading#patterns\">data loading</a> and <a href=\"ui-ux#smart-components\">UI</a> articles, you should be careful and considered in how use such smart components.</p> <p>All of the suggestions about reusable components apply to smart components. In addition:</p> <h3 id=\"subscribing\">Subscribe from <code>onCreated</code>\n</h3> <p>You should subscribe to publications from the server from an <code>onCreated</code> callback (within an <code>autorun</code> block if you have reactively changing arguments). In the Todos example app, in the <code>Lists_show_page</code> template we subscribe to the <code>todos.inList</code> publication based on the current <code>_id</code> FlowRouter param:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.onCreated(function() {\n  this.getListId = () =&gt; FlowRouter.getParam('_id');\n\n  this.autorun(() =&gt; {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n</pre> <p>We use <code>this.subscribe()</code> as opposed to <code>Meteor.subscribe()</code> so that the component automatically keeps track of when the subscriptions are ready. We can use this information in our HTML template with the built-in <code>{{Template.subscriptionsReady}}</code> helper or within helpers using <code>instance.subscriptionsReady()</code>.</p> <p>Notice that in this component we are also accessing the global client-side state store <code>FlowRouter</code>, which we wrap in a instance method called <code>getListId()</code>. This instance method is called both from the <code>autorun</code> in <code>onCreated</code>, and from the <code>listIdArray</code> helper:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.helpers({\n  // We use #each on an array of one item so that the \"list\" template is\n  // removed and a new copy is added when changing lists, which is\n  // important for animation purposes.\n  listIdArray() {\n    const instance = Template.instance();\n    const listId = instance.getListId();\n    return Lists.findOne(listId) ? [listId] : [];\n  },\n});\n</pre> <h3 id=\"fetch-in-smart-components\">Fetch in helpers</h3> <p>As described in the <a href=\"ui-ux#smart-components\">UI/UX article</a>, you should fetch data in the same component where you subscribed to that data. In a Blaze smart component, it’s usually simplest to fetch the data in a helper, which you can then use to pass data into a reusable child component. For example, in the <code>Lists_show_page</code>:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; Lists_show (listArgs listId)}}\n</pre> <p>The <code>listArgs</code> helper fetches the data that we’ve subscribed to above:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.helpers({\n  listArgs(listId) {\n    const instance = Template.instance();\n    return {\n      todosReady: instance.subscriptionsReady(),\n      // We pass `list` (which contains the full list, with all fields, as a function\n      // because we want to control reactivity. When you check a todo item, the\n      // `list.incompleteCount` changes. If we didn't do this the entire list would\n      // re-render whenever you checked an item. By isolating the reactiviy on the list\n      // to the area that cares about it, we stop it from happening.\n      list() {\n        return Lists.findOne(listId);\n      },\n      // By finding the list with only the `_id` field set, we don't create a dependency on the\n      // `list.incompleteCount`, and avoid re-rendering the todos when it changes\n      todos: Lists.findOne(listId, {fields: {_id: true}}).todos()\n    };\n  }\n});\n</pre> <h2 id=\"reusing-code\">Reusing code in Blaze</h2> <p>It’s common to want to reuse code between two otherwise unrelated components. There are two main ways to do this in Blaze.</p> <h3 id=\"composition\">Composition</h3> <p>If possible, it’s usually best to try and abstract out the reusable part of the two components that need to share functionality into a new, smaller component. If you follow the patterns for <a href=\"#reusable-components\">reusable components</a>, it should be simple to reuse this sub-component everywhere you need this functionality.</p> <p>For instance, suppose you have many places in your application where you need an input to blur itself when you click the “esc” key. If you were building an autocomplete widget that also wanted this functionality, you could compose a <code>blurringInput</code> inside your <code>autocompleteInput</code>:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"autocompleteInput\"&gt;\n  {{&gt; blurringInput name=name value=currentValue onChange=onChange}}\n&lt;/template&gt;\n</pre> <pre class=\"highlight js\" data-language=\"js\">Template.autocompleteInput.helpers({\n  currentValue() {\n    // perform complex logic to determine the auto-complete's current text value\n  },\n  onChange() {\n    // This is the `autocompleteInput`'s template instance\n    const instance = Template.instance();\n    // The second argument to this function is the template instance of the `blurringInput`.\n    return (event) =&gt; {\n      // read the current value out of the input, potentially change the value\n    };\n  }\n});\n</pre> <p>By making the <code>blurringInput</code> flexible and reusable, we can avoid re-implementing functionality in the <code>autocompleteInput</code>.</p> <h3 id=\"libraries\">Libraries</h3> <p>It’s usually best to keep your view layer as thin as possible and contain a component to whatever specific task it specifically needs to do. If there’s heavy lifting involved (such as complicated data loading logic), it often makes sense to abstract it out into a library that simply deals with the logic alone and doesn’t deal with the Blaze system at all.</p> <p>For example, if a component requires a lot of complicated <a href=\"http://d3js.org\" target=\"_blank\" rel=\"external\">D3</a> code for drawing graphs, it’s likely that that code itself could live in a separate module that’s called by the component. That makes it easier to abstract the code later and share it between various components that need to all draw graphs.</p> <h3 id=\"global-helpers\">Global Helpers</h3> <p>Another way to share commonly used view code is a global Spacebars helper. You can define these with the <code>Template.registerHelper()</code> function. Typically you register helpers to do simple things (like rendering dates in a given format) which don’t justify a separate sub-component. For instance, you could do:</p> <pre class=\"highlight js\" data-language=\"js\">Template.registerHelper('shortDate', (date) =&gt; {\n  return moment(date).format(\"MMM do YY\");\n});\n</pre> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"myBike\"&gt;\n  &lt;dl&gt;\n   &lt;dt&gt;Date registered&lt;/dt&gt;\n   &lt;dd&gt;{{shortDate bike.registeredAt}}&lt;/dd&gt;\n &lt;/dl&gt;\n&lt;/template&gt;\n</pre> <h2 id=\"understanding-blaze\">Understanding Blaze</h2> <p>Although Blaze is a very intuitive rendering system, it does have some quirks and complexities that are worth knowing about when you are trying to do complex things.</p> <h3 id=\"re-rendering\">Re-rendering</h3> <p>Blaze is intentionally opaque about re-rendering. Tracker and Blaze are designed as “eventual consistency” systems that end up fully reflecting any data change eventually, but may take a few re-runs or re-renders in getting there, depending on how they are used. This can be frustrating if you are trying to carefully control when your component is re-rendered.</p> <p>The first thing to consider here is if you actually need to care about your component re-rendering. Blaze is optimized so that it typically doesn’t matter if a component is re-rendered even if it strictly shouldn’t. If you make sure that your helpers are cheap to run and consequently rendering is not expensive, then you probably don’t need to worry about this.</p> <p>The main thing to understand about how Blaze re-renders is that re-rendering happens at the level of helpers and template inclusions. Whenever the <em>data context</em> of a component changes, it necessarily must re-run <em>all</em> helpers and data accessors (as <code>this</code> within the helper is the data context and thus will have changed).</p> <p>Additionally, a helper will re-run if any <em>reactive data source</em> accessed from within <em>that specific helper</em> changes.</p> <p>You can often work out <em>why</em> a helper has re-run by tracing the source of the reactive invalidation:</p> <pre class=\"highlight js\" data-language=\"js\">Template.myTemplate.helpers({\n  helper() {\n    // When this helper is scheduled to re-run, the `console.trace` will log a stack trace of where\n    // the invalidation has come from (typically a `changed` message from some reactive variable).\n    Tracker.onInvalidate(() =&gt; console.trace());\n  }\n});\n</pre> <h3 id=\"controlling-re-rendering\">Controlling re-rendering</h3> <p>If your helper or sub-component is expensive to run, and often re-runs without any visible effect, you can short circuit unnecessary re-runs by using a more subtle reactive data source. The <a href=\"https://atmospherejs.com/peerlibrary/computed-field\" target=\"_blank\" rel=\"external\"><code>peerlibrary:computed-field</code></a> package helps achieve this pattern.</p> <h3 id=\"attribute-helpers\">Attribute helpers</h3> <p>Setting tag attributes via helpers (e.g. <code>&lt;div {{attributes}}&gt;</code>) is a neat tool and has some precedence rules that make it more useful. Specifically, when you use it more than once on a given element, the attributes are composed (rather than the second set of attributes simply replacing the first). So you can use one helper to set one set of attributes and a second to set another. For instance:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"myTemplate\"&gt;\n  &lt;div id=\"my-div\" {{classes 'foo' 'bar'}} {{backgroundImageStyle 'my-image.jpg'}}&gt;My div&lt;/div&gt;\n&lt;/template&gt;\n</pre> <pre class=\"highlight\" data-language=\"highlight\">Template.myTemplate.helpers({\n  classes(names) {\n    return {class: names.map(n =&gt; `my-template-${n}`)};\n  },\n  backgroundImageStyle(imageUrl) {\n    return {\n      style: {\n        backgroundImage: `url(${imageUrl})`\n      }\n    };\n  }\n});\n</pre> <h3 id=\"lookups\">Lookup order</h3> <p>Another complicated topic in Blaze is name lookups. In what order does Blaze look when you write <code>{{something}}</code>? It runs in the following order:</p> <ol> <li>Helper defined on the current component</li> <li>Binding (eg. from <code>{{#let}}</code> or <code>{{#each in}}</code>) in current scope</li> <li>Template name</li> <li>Global helper</li> <li>Field on the current data context</li> </ol> <h3 id=\"build-system\">Blaze and the build system</h3> <p>As mentioned in the <a href=\"build-tool#blaze\">build system article</a>, the <a href=\"https://atmospherejs.com/meteor/blaze-html-templates\" target=\"_blank\" rel=\"external\"><code>blaze-html-templates</code></a> package scans your source code for <code>.html</code> files, picks out <code>&lt;template name=\"templateName\"&gt;</code> tags, and compiles them into a JavaScript file that defines a function that implements the component in code, attached to the <code>Template.templateName</code> symbol.</p> <p>This means when you render a Blaze template, you are simply running a function on the client that corresponds to the Spacebars content you defined in the <code>.html</code> file.</p> <h3 id=\"views\">What is a view?</h3> <p>One of the most core concepts in Blaze is the “view”, which is a building block that represents a reactively rendering area of a template. The view is the machinery that works behind the scenes to track reactivity, do lookups, and re-render appropriately when data changes. The view is the unit of re-rendering in Blaze. You can even use the view tree to walk the rendered component hierarchy, but it’s better to avoid this in favor of communicating between components using callbacks, template arguments, or global data stores.</p> <p>You can read more about views in the <a href=\"http://docs.meteor.com/#/full/blaze_view\" target=\"_blank\" rel=\"external\">Blaze docs</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/blaze.html\" class=\"_attribution-link\">https://guide.meteor.com/blaze.html</a>\n  </p>\n</div>\n","writing-atmosphere-packages":"<h1 class=\"title-page\">Writing Atmosphere Packages</h1>    <p>To get started writing a package, use the Meteor command line tool:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor create --package my-package\n</pre> <blockquote> <p>It is required that your <code>my-package</code> name take the form of <code>username:my-package</code>, where <code>username</code> is your Meteor Developer username, if you plan to publish your package to Atmosphere.</p> </blockquote> <p>If you run this inside an app, it will place the newly generated package in that app’s <code>packages/</code> directory. Outside an app, it will just create a standalone package directory. The command also generates some boilerplate files for you:</p> <pre class=\"highlight\" data-language=\"highlight\">my-package\n├── README.md\n├── package.js\n├── my-package-tests.js\n└── my-package.js\n</pre> <p>The <code>package.js</code> file is the main file in every Meteor package. This is a JavaScript file that defines the metadata, files loaded, architectures, npm packages, and Cordova packages for your Meteor package.</p> <p>In this guide article, we will go over some important points for building packages, but we won’t explain every part of the <code>package.js</code> API. To learn about all of the options, <a href=\"http://docs.meteor.com/#/full/packagejs\" target=\"_blank\" rel=\"external\">read about the <code>package.js</code> API in the Meteor docs.</a></p> <blockquote> <p>Don’t forget to run <a href=\"http://docs.meteor.com/#/full/meteoradd\" target=\"_blank\" rel=\"external\"><code>meteor add [my-package]</code></a> once you have finished developing your package in order to use it; this applies if the package is a local package for internal use only or if you have published the package to Atmosphere.</p> </blockquote> <h2 id=\"adding-files\">Adding files and assets</h2> <p>The main function of an Atmosphere package is to contain source code (JS, CSS, and any transpiled languages) and assets (images, fonts, and more) that will be shared across different applications.</p> <h3 id=\"adding-javascript\">Adding JavaScript</h3> <p>To add JavaScript files to a package, specify an entrypoint with <a href=\"http://docs.meteor.com/#/full/pack_mainModule\" target=\"_blank\" rel=\"external\"><code>api.mainModule()</code></a> in the package’s <code>onUse</code> block (this will already have been done by <code>meteor create --package</code> above):</p> <pre class=\"highlight js\" data-language=\"js\">Package.onUse(function(api) {\n  api.mainModule('my-package.js');\n});\n</pre> <p>From that entrypoint, you can <code>import</code> other files within your package, <a href=\"structure\">just as you would in an application</a>.</p> <p>If you want to include different files on the client and server, you can specify multiple entry points using the second argument to the function:</p> <pre class=\"highlight js\" data-language=\"js\">Package.onUse(function(api) {\n  api.mainModule('my-package-client.js', 'client');\n  api.mainModule('my-package-server.js', 'server');\n});\n</pre> <p>You can also add any source file that would be compiled to a JS file (such as a CoffeeScript file) in a similar way, assuming you <a href=\"#dependencies\">depend</a> on an appropriate build plugin.</p> <h3 id=\"adding-css\">Adding CSS</h3> <p>To include CSS files with your package you can use <a href=\"http://docs.meteor.com/#/full/pack_addFiles\" target=\"_blank\" rel=\"external\"><code>api.addFiles()</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">Package.onUse(function(api) {\n  api.addFiles('my-package.css', 'client');\n});\n</pre> <p>The CSS file will be automatically loaded into any app that uses your package.</p> <h3 id=\"adding-style\">Adding Sass, Less, or Stylus mixins/variables</h3> <p>Just like packages can export JavaScript code, they can export reusable bits of CSS pre-processor code. You can also have a package that doesn’t actually include any CSS, but just exports different bits of reusable mixins and variables. To get more details see Meteor <a href=\"build-tool#css\">build tool CSS pre-processors</a>:</p> <pre class=\"highlight js\" data-language=\"js\">Package.onUse(function(api) {\n  api.addFiles('my-package.scss', 'client');\n});\n</pre> <p>This Sass file will be eagerly evaluated and its compiled form will be added to the CSS of the app immediately.</p> <pre class=\"highlight js\" data-language=\"js\">Package.onUse(function(api) {\n  api.addFiles([\n    'stylesheets/_util.scss',\n    'stylesheets/_variables.scss'\n  ], 'client', {isImport: true});\n});\n</pre> <p>These two Sass files will be lazily evaluated and only included in the CSS of the app if imported from some other file.</p> <h3 id=\"adding-assets\">Adding other assets</h3> <p>You can include other assets, such as fonts, icons or images, to your package using <a href=\"http://docs.meteor.com/#/full/PackageAPI-addAssets\" target=\"_blank\" rel=\"external\"><code>api.addAssets</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">Package.onUse(function(api) {\n  api.addAssets([\n    'font/OpenSans-Regular-webfont.eot',\n    'font/OpenSans-Regular-webfont.svg',\n    'font/OpenSans-Regular-webfont.ttf',\n    'font/OpenSans-Regular-webfont.woff',\n  ], 'client');\n});\n</pre> <p>You can then access these files from the client from a URL <code>/packages/username_my-package/font/OpenSans-Regular-webfont.eot</code> or from the server using the <a href=\"http://docs.meteor.com/#/full/assets_getText\" target=\"_blank\" rel=\"external\">Assets API</a>.</p> <h2 id=\"exporting\">Exporting</h2> <p>While some packages exist just to provide side effects to the app, most packages provide a reusable bit of code that can be used by the consumer with <code>import</code>. To export a symbol from your package, simply use the ES2015 <code>export</code> syntax in your <code>mainModule</code>:</p> <pre class=\"highlight js\" data-language=\"js\">// in my-package.js:\nexport const myName = 'my-package';\n</pre> <p>Now users of your package can import the symbol with:</p> <pre class=\"highlight js\" data-language=\"js\">import { myName } from 'meteor/username:my-package';\n</pre> <h2 id=\"dependencies\">Dependencies</h2> <p>Chances are your package will want to make use of other packages. To ensure they are available, you can declare dependencies. Atmosphere packages can depend both on other Atmosphere packages, as well as packages from npm.</p> <h3 id=\"atmosphere-dependencies\">Atmosphere dependencies</h3> <p>To depend on another Atmosphere package, use <a href=\"http://docs.meteor.com/#/full/pack_use\" target=\"_blank\" rel=\"external\"><code>api.use</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">Package.onUse(function(api) {\n  // This package depends on 1.3.3 or above of simple-schema\n  api.use('aldeed:simple-schema@1.3.3');\n});\n</pre> <p>One important feature of the Atmosphere package system is that it is single-loading: no two packages in the same app can have dependencies on conflicting versions of a single package. Read more about that in the section about version constraints below.</p> <h4 id=\"meteor-version-dependencies\">Depending on Meteor version</h4> <p>Note that the Meteor release version number is mostly a marketing artifact - the core Meteor packages themselves typically don’t share this version number. This means packages can only depend on specific versions of the packages inside a Meteor release, but can’t depend on a specific release itself. We have a helpful shorthand api called <a href=\"http://docs.meteor.com/#/full/pack_versions\" target=\"_blank\" rel=\"external\"><code>api.versionsFrom</code></a> that handles this for you by automatically filling in package version numbers from a particular release:</p> <pre class=\"highlight js\" data-language=\"js\">// Use versions of core packages from Meteor 1.2.1\napi.versionsFrom('1.2.1');\n\napi.use([\n  // Don't need to specify version because of versionsFrom above\n  'ecmascript',\n  'check',\n\n  // Still need to specify versions of non-core packages\n  'aldeed:simple-schema@1.3.3',\n  'mdg:validation-error@0.1.0'\n]);\n</pre> <p>The above code snippet is equivalent to the code below, which specifies all of the version numbers individually:</p> <pre class=\"highlight js\" data-language=\"js\">api.use([\n  'ecmascript@0.1.6',\n  'check@1.1.0',\n  'aldeed:simple-schema@1.3.3',\n  'mdg:validation-error@0.1.0'\n]);\n</pre> <h4 id=\"version-constraints\">Semantic versioning and version constraints</h4> <p>Meteor’s package system relies heavily on <a href=\"http://semver.org/\" target=\"_blank\" rel=\"external\">Semantic Versioning</a>, or SemVer. When one package declares a dependency on another, it always comes with a version constraint. These version constraints are then solved by Meteor’s industrial-grade Version Solver to arrive at a set of package versions that meet all of the requirements, or display a helpful error if there is no solution.</p> <p>The mental model here is:</p> <ol> <li>\n<strong>The major version must always match exactly.</strong> If package <code>a</code> depends on <code>b@2.0.0</code>, the constraint will only be satisfied if the version of package <code>b</code> starts with a <code>2</code>. This means that you can never have two different major versions of a package in the same app.</li> <li>\n<strong>The minor and patch version numbers must be greater or equal to the requested version.</strong> If the dependency requests version <code>2.1.3</code>, then <code>2.1.4</code> and <code>2.2.0</code> will work, but <code>2.0.4</code> and <code>2.1.2</code> will not.</li> </ol> <p>The constraint solver is necessary because Meteor’s package system is <strong>single-loading</strong> - that is, you can never have two different versions of the same package loaded side-by-side in the same app. This is particularly useful for packages that include a lot of client-side code, or packages that expect to be singletons.</p> <p>Note that the version solver also has a concept of “gravity” - when many solutions are possible for a certain set of dependencies, it always selects the oldest possible version. This is helpful if you are trying to develop a package to ship to lots of users, since it ensures your package will be compatible with the lowest common denominator of a dependency. If your package needs a newer version than is currently being selected for a certain dependency, you need to update your <code>package.js</code> to have a newer version constraint.</p> <h3 id=\"npm-dependencies\">npm dependencies</h3> <p>Meteor packages can include <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">npm packages</a> to use JavaScript code from outside the Meteor package ecosystem or to include JavaScript code with native dependencies. Use <a href=\"http://docs.meteor.com/#/full/Npm-depends\" target=\"_blank\" rel=\"external\">Npm.depends</a> at the top level of your <code>package.js</code> file. For example, here’s how you would include the <code>github</code> npm package:</p> <pre class=\"highlight js\" data-language=\"js\">Npm.depends({\n  github: '0.2.4'\n});\n</pre> <p>You can import the dependency from within you package code in the same way that you would inside an <a href=\"using-npm-packages#using-npm\">application</a>:</p> <pre class=\"highlight js\" data-language=\"js\">import github from 'github';\n</pre> <h3 id=\"peer-npm-dependencies\">Peer npm dependencies</h3> <p><code>Npm.depends()</code> is fairly rigid (you can only depend on an exact version), and will typically result in multiple versions of a package being installed if many different Atmosphere packages depend on the same npm package. This makes it less than ideal to use on the client, where it’s impractical to ship multiple copies of the same package code to the browser. Client-side packages are also often written with the assumption that only a single copy will be loaded. For example, React will complain if it is included more than once in an application bundle.</p> <p>To avoid this problem as a package author, you can request that users of your package have installed the npm package you want to use at the application level. This is similar to a <a href=\"https://nodejs.org/en/blog/npm/peer-dependencies/\" target=\"_blank\" rel=\"external\">peer dependency</a> of an npm package (although with less support in the tool). You can use the <a href=\"https://atmospherejs.com/tmeasday/check-npm-versions\" target=\"_blank\" rel=\"external\"><code>tmeasday:check-npm-versions</code></a> package to ensure that they’ve done this, and to warn them if not.</p> <p>For instance, if you are writing a React package, you should not directly depend on <a href=\"https://www.npmjs.com/package/react\" target=\"_blank\" rel=\"external\"><code>react</code></a>, but instead use <code>check-npm-versions</code> to check the user has installed it:</p> <pre class=\"highlight js\" data-language=\"js\">import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n\ncheckNpmVersions({\n  'react': '0.14.x'\n}, 'my:awesome-package');\n\n// If you are using the dependency in the same file, you'll need to use require, otherwise\n// you can continue to `import` in another file.\nconst React = require('react');\n</pre> <blockquote> <p>Note that <code>checkNpmVersions</code> will only output a warning if the user has installed a incompatible version of the npm package. So your <code>require</code> call may not give you what you expect. This is consistent with npm’s handling of <a href=\"http://blog.npmjs.org/post/110924823920/npm-weekly-5\" target=\"_blank\" rel=\"external\">peer dependencies</a>.</p> </blockquote> <h2 id=\"cordova-plugins\">Cordova plugins</h2> <p>Atmosphere packages can include <a href=\"http://cordova.apache.org/plugins/\" target=\"_blank\" rel=\"external\">Cordova plugins</a> to ship native code for the Meteor mobile app container. This way, you can interact with the native camera interface, use the gyroscope, save files locally, and more.</p> <p>Include Cordova plugins in your Meteor package by using <a href=\"http://docs.meteor.com/#/full/Cordova-depends\" target=\"_blank\" rel=\"external\">Cordova.depends</a>.</p> <p>Read more about using Cordova in the <a href=\"mobile\">mobile guide</a>.</p> <h2 id=\"testing\">Testing packages</h2> <p>Meteor has a test mode for packages called <code>meteor test-packages</code>. If you are in a package’s directory, you can run</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor test-packages ./ --driver-package practicalmeteor:mocha\n</pre> <p>This will run a special app containing only a “test” version of your package and start a Mocha <a href=\"testing#driver-packages\">test driver package</a>.</p> <p>When your package starts in test mode, rather than loading the <code>onUse</code> block, Meteor loads the <code>onTest</code> block:</p> <pre class=\"highlight js\" data-language=\"js\">Package.onTest(function(api) {\n  // You almost definitely want to depend on the package itself,\n  // this is what you are testing!\n  api.use('my-package');\n\n  // You should also include any packages you need to use in the test code\n  api.use(['ecmascript', 'random', 'practicalmeteor:mocha']);\n\n  // Finally add an entry point for tests\n  api.mainModule('my-package-tests.js');\n});\n</pre> <p>From within your test entry point, you can import other files as you would in the package proper.</p> <p>You can read more about testing in Meteor in the <a href=\"testing\">Testing article</a>.</p> <h3 id=\"testing-with-peer-dependencies\">Testing with peer npm dependencies</h3> <p>If your package makes use of <a href=\"#peer-npm-dependencies\">peer npm dependencies</a>, you cannot currently use <code>test-packages</code> to write package tests (as the dependencies will not be included in the special test app).</p> <p>To work around this, you can create a “scaffolding” test application, which is a simple app which simply includes the package and uses standard <a href=\"testing\">tests</a> to run tests against the package. You can see examples of these kind of scaffold test apps in the <a href=\"https://github.com/meteor/react-packages/tree/devel/tests\" target=\"_blank\" rel=\"external\">React packages repository</a>.</p> <h2 id=\"publishing-atmosphere\">Publishing your package</h2> <p>To publish your package to Atmosphere, run <a href=\"http://docs.meteor.com/#/full/meteorpublish\" target=\"_blank\" rel=\"external\"><code>meteor publish</code></a> from the package directory. To publish a package the package name must follow the format of <code>username:my-package</code> and the package must contain a <a href=\"#version-constraints\">SemVer version number</a>.</p> <h3 id=\"local-vs-published\">Local vs. published packages</h3> <p>If you’ve ever looked inside Meteor’s package cache at <code>~/.meteor/packages</code>, you know that the on-disk format of a built Meteor package is completely different from the way the source code looks when you’re developing the package. The idea is that the target format of a package can remain consistent even if the API for development changes.</p> <h2 id=\"overriding-atmosphere-packages\">Overriding packages with a local version</h2> <p>If you need to modify a package to do something that the published version doesn’t do, you can edit a local version of the package on your computer.</p> <p>A Meteor app can load Atmosphere packages in one of three ways, and it looks for a matching package name in the following order:</p> <ol> <li>Package source code in the <code>packages/</code> directory inside your app.</li> <li>Package source code in directories indicated by setting a <code>PACKAGE_DIRS</code> environment variable before running any <code>meteor</code> command. You can add multiple directories by separating the paths with a <code>:</code> on OSX or Linux, or a <code>;</code> on Windows. For example: <code>PACKAGE_DIRS=../first/directory:../second/directory</code>, or on Windows: <code>set PACKAGE_DIRS=..\\first\\directory;..\\second\\directory</code>.</li> <li>Pre-built package from Atmosphere. The package is cached in <code>~/.meteor/packages</code> on Mac/Linux or <code>%LOCALAPPDATA%\\.meteor\\packages</code> on Windows, and only loaded into your app as it is built.</li> </ol> <p>You can use (1) or (2) to override the version from Atmosphere. You can even do this to load patched versions of Meteor core packages - just copy the code of the package from <a href=\"https://github.com/meteor/meteor/tree/devel/packages\" target=\"_blank\" rel=\"external\">Meteor’s GitHub repository</a>, and edit away.</p> <p>One difference between pre-published packages and local app packages is that the published packages have any binary dependencies pre-built. This should only affect a small subset of packages. If you clone the source code into your app, you need to make sure you have any compilers required by that package.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/writing-atmosphere-packages.html\" class=\"_attribution-link\">https://guide.meteor.com/writing-atmosphere-packages.html</a>\n  </p>\n</div>\n","deployment":"<h1 class=\"title-page\">Deployment and Monitoring</h1> <div class=\"subtitle-page\">How to deploy, run, and monitor your Meteor app in production.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>What to consider before you deploy a Meteor application.</li> <li>How to deploy to some common Meteor hosting environments.</li> <li>How to design a deployment process to make sure your application’s quality is maintained.</li> <li>How to monitor user behavior with analytics tools.</li> <li>How to monitor your application with Kadira.</li> <li>How to make sure your site is discoverable by search engines.</li> </ol> <h2 id=\"deploying\">Deploying Meteor Applications</h2> <p>Once you’ve built and tested your Meteor application, you need to put it online to show it to the world. Deploying a Meteor application is similar to deploying any other websocket-based Node.js app, but is different in some of the specifics.</p> <p>Deploying a web application is fundamentally different to releasing most other kinds of software, in that you can deploy as often as you’d like to. You don’t need to wait for users to do something to get the new version of your software because the server will push it right at them.</p> <p>However, it’s still important to test your changes throughly with a good process of Quality Assurance (QA). Although it’s easy to push out fixes to bugs, those bugs can still cause major problems to users and even potentially data corruption!</p> <blockquote> <h3 id=\"never-use-production-flag\">Never use <code>--production</code> flag to deploy!</h3> <p><code>--production</code> flag is purely meant to simulate production minification, but does almost nothing else. This still watches source code files, exchanges data with package server and does a lot more than just running the app, leading to unnecessary computing resource wasting and security issues. Please don’t use <code>--production</code> flag to deploy!</p> </blockquote> <h3 id=\"environments\">Deployment environments</h3> <p>In web application deployment it’s common to refer to three runtime environments:</p> <ol> <li>\n<strong>Development.</strong> This refers to your machine where you develop new features and run local tests.</li> <li>\n<strong>Staging.</strong> An intermediate environment that is similar to production, but not visible to users of the application. Can be used for testing and QA.</li> <li>\n<strong>Production.</strong> The real deployment of your app that your customers are currently using.</li> </ol> <p>The idea of the staging environment is to provide a non-user-visible test environment that is as close as possible to production in terms of infrastructure. It’s common for issues to appear with new code on the production infrastructure that just don’t happen in a development environment. A very simple example is issues that involve latency between the client and server—connecting to a local development server with tiny latencies, you just may never see such an issue.</p> <p>For this reason, developers tend to try and get staging as close as possible to production. This means that all the steps we outline below about production deployment, should, if possible, also be followed for your staging server.</p> <h3 id=\"environment\">Environment variables and settings</h3> <p>There are two main ways to configure your application outside of the code of the app itself:</p> <ol> <li>\n<strong>Environment variables.</strong> This is the set of <code>ENV_VARS</code> that are set on the running process.</li> <li>\n<strong>Settings.</strong> These are in a JSON object set via either the <code>--settings</code> Meteor command-line flag or stringified into the <code>METEOR_SETTINGS</code> environment variable.</li> </ol> <p>Settings should be used to set environment (i.e. staging vs production) specific things, like the access token and secret used to connect to Google. These settings will not change between any given process running your application in the given environment.</p> <p>Environment variables are used to set process specific things, which could conceivably change for different instances of your application’s processes. For instance, you can set a different <code>KADIRA_OPTIONS_HOSTNAME</code> for each process to ensure that <a href=\"#kadira\">kadira</a> logs timings with useful hostnames.</p> <p>A final note on storing these settings: It’s not a good idea to store settings the same repository where you keep your app code. Read about good places to put your settings in the <a href=\"security#api-keys\">Security article</a>.</p> <h2 id=\"other-considerations\">Other considerations</h2> <p>There are some other considerations that you should make before you deploy your application to a production host. Remember that you should if possible do these steps for both your production <em>and</em> staging environments.</p> <h3 id=\"domain-name\">Domain name</h3> <p>What URL will users use to access your site? You’ll probably need to register a domain name with a domain registrar, and setup DNS entries to point to the site (this will depend on how you deploy, see below). If you deploy to Galaxy, you can use a <code>x.meteorapp.com</code> or <code>x.eu.meteorapp.com</code> domain while you are testing the app. <a href=\"http://galaxy-guide.meteor.com/custom-domains.html#meteorapp-subdomain\" target=\"_blank\" rel=\"external\">Learn more about Galaxy domains »</a></p> <h3 id=\"ssl\">SSL Certificate</h3> <p>It’s always a good idea to use SSL for Meteor applications (see the <a href=\"security#ssl\">Security Article</a> to find out why). Once you have a registered domain name, you’ll need to generate an SSL certificate with a certificate authority for your domain. If you deploy to Galaxy, you can <a href=\"http://galaxy-guide.meteor.com/encryption.html#lets-encrypt\" target=\"_blank\" rel=\"external\">generate a free SSL certificate with a single click</a>(courtesy of Let’s Encrypt!).</p> <h3 id=\"cdn\">CDN</h3> <p>It’s not strictly required, but often a good idea to set up a Content Delivery Network (CDN) for your site. A CDN is a network of servers that hosts the static assets of your site (such as JavaScript, CSS, and images) in numerous locations around the world and uses the server closest to your user to provide those files in order to speed up their delivery. For example, if the actual web server for your application is on the east coast of the USA and your user is in Australia, a CDN could host a copy of the JavaScript of the site within Australia or even in the city the user is in. This has huge benefits for the initial loading time of your site.</p> <p>The basic way to use a CDN is to upload your files to the CDN and change your URLs to point at the CDN (for instance if your Meteor app is at <code>http://myapp.com</code>, changing your image URL from <code>&lt;img src=\"http://myapp.com/cats.gif\"&gt;</code> to <code>&lt;img src=\"http://mycdn.com/cats.gif\"&gt;</code>). However, this would be hard to do with Meteor, since the largest file – your Javascript bundle – changes every time you edit your app.</p> <p>For Meteor, we recommend using a CDN with “origin” support (like <a href=\"http://joshowens.me/using-a-cdn-with-your-production-meteor-app/\" target=\"_blank\" rel=\"external\">CloudFront</a>), which means that instead of uploading your files in advance, the CDN automatically fetches them from your server. You put your files in <code>public/</code> (in this case <code>public/cats.gif</code>), and when your Australian user asks the CDN for <code>http://mycdn.com/cats.gif</code>, the CDN, behind the scenes, fetches <code>http://myapp.com/cats.gif</code> and then delivers it to the user. While this is slightly slower than getting <code>http://myapp.com/cats.gif</code> directly, it only happens one time, because the CDN saves the file, and all subsequent Australians who ask for the file get it quickly.</p> <p>To get Meteor to use the CDN for your Javascript and CSS bundles, call <code>WebAppInternals.setBundledJsCssPrefix(\"http://mycdn.com\")</code> on the server. This will also take care of relative image URLs inside your CSS files. If you need to use a dynamic prefix, you can return the prefix from a function passed to <code>WebAppInternals.setBundledJsCssUrlRewriteHook()</code>.</p> <p>For all your files in <code>public/</code>, change their URLs to point at the CDN. You can use a helper like <code>assetUrl</code>.</p> <p>Before:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;img src=\"http://myapp.com/cats.gif\"&gt;\n</pre> <p>After:</p> <pre class=\"highlight js\" data-language=\"js\">Template.registerHelper(\"assetUrl\", (asset) =&gt; {\n  return \"http://mycdn.com/\" + asset\n});\n</pre> <pre class=\"highlight html\" data-language=\"html\">&lt;img src=\"{{assetUrl 'cats.gif'}}\"&gt;\n</pre> <h4 id=\"cdn-webfonts\">CDNs and webfonts</h4> <p>If you are hosting a webfont as part of your application and serving it via a CDN, you may need to configure the served headers for the font to allow cross-origin resource sharing (as the webfont is now served from a different origin to your site itself). You can do this easily enough in Meteor by adding a handler (you’ll need to ensure your CDN is passing the header through):</p> <pre class=\"highlight js\" data-language=\"js\">import { WebApp } from 'meteor/webapp';\n\nWebApp.rawConnectHandlers.use(function(req, res, next) {\n  if (req._parsedUrl.pathname.match(/\\.(ttf|ttc|otf|eot|woff|woff2|font\\.css|css)$/)) {\n    res.setHeader('Access-Control-Allow-Origin', /* your hostname, or just '*' */);\n  }\n  next();\n});\n</pre> <p>And then for example with Cloudfront, you would:</p> <ul> <li>Select your distribution</li> <li>Behavior tab</li> <li>Select your app origin</li> <li>Edit button</li> <li>Under “Whitelist Headers”, scroll down to select “Origin”</li> <li>Add button</li> <li>“Yes, Edit” button</li> </ul> <h2 id=\"deployment-options\">Deployment options</h2> <p>Meteor is an open source platform, and you can run the apps that you make with Meteor anywhere just like regular Node.js applications. But operating Meteor apps <em>correctly</em>, so that your apps work for everyone, can be tricky if you are managing your infrastructure manually. This is why we recommend running production Meteor apps on Galaxy.</p> <h3 id=\"galaxy\">Galaxy (recommended)</h3> <p>The easiest way to operate your app with confidence is to use Galaxy, the service built by Meteor Development Group specifically to run Meteor apps.</p> <p>Galaxy is a distributed system that runs on Amazon AWS. If you understand what it takes to run Meteor apps correctly and just how Galaxy works, you’ll come to appreciate Galaxy’s value, and that it will save you a lot of time and trouble. Most large Meteor apps run on Galaxy today, and many of them have switched from custom solutions they used prior to Galaxy’s launch.</p> <p>In order to deploy to Galaxy, you’ll need to <a href=\"https://www.meteor.com/galaxy/signup\" target=\"_blank\" rel=\"external\">sign up for an account</a>, and separately provision a MongoDB database (see below).</p> <p>Once you’ve done that, it’s easy to <a href=\"http://galaxy-guide.meteor.com/deploy-guide.html\" target=\"_blank\" rel=\"external\">deploy to Galaxy</a>. You just need to <a href=\"http://galaxy-guide.meteor.com/environment-variables.html\" target=\"_blank\" rel=\"external\">add some environment variables to your settings file</a> to point it at your MongoDB, and you can deploy with:</p> <pre class=\"highlight bash\" data-language=\"bash\">DEPLOY_HOSTNAME=us-east-1.galaxy-deploy.meteor.com meteor deploy your-app.com --settings production-settings.json\n</pre> <p>In order for Galaxy to work with your custom domain (<code>your-app.com</code> in this case), you need to <a href=\"http://galaxy-guide.meteor.com/dns.html\" target=\"_blank\" rel=\"external\">set up your DNS to point at Galaxy</a>. Once you’ve done this, you should be able to reach your site from a browser.</p> <p>You can also log into the Galaxy UI at <a href=\"https://galaxy.meteor.com\" target=\"_blank\" rel=\"external\">https://galaxy.meteor.com</a>. Once there you can manage your applications, monitor the number of connections and resource usage, view logs, and change settings.</p> <p><img src=\"https://guide.meteor.com/images/galaxy-org-dashboard.png\"></p> <p>If you are following <a href=\"security#ssl\">our advice</a>, you’ll probably want to <a href=\"http://galaxy-guide.meteor.com/encryption.html\" target=\"_blank\" rel=\"external\">set up SSL</a> on your Galaxy application with the certificate and key for your domain. The key things here are to add the <code>force-ssl</code> package and to use the Galaxy UI to add your SSL certificate.</p> <p>Once you are setup with Galaxy, deployment is simple (just re-run the <code>meteor deploy</code> command above), and scaling is even easier—simply log into galaxy.meteor.com, and scale instantly from there.</p> <p><img src=\"https://guide.meteor.com/images/galaxy-scaling.png\"></p> <h4 id=\"galaxy-mongo\">MongoDB hosting services to use with Galaxy</h4> <p>If you are using Galaxy (or need a production quality, managed MongoDB for one of the other options listed here), it’s usually a good idea to use a <a href=\"http://galaxy-guide.meteor.com/mongodb.html\" target=\"_blank\" rel=\"external\">MongoDB hosting provider</a>. There are a variety of options out there, but a good choice is <a href=\"https://mlab.com/\" target=\"_blank\" rel=\"external\">mLab</a>. The main things to look for are support for oplog tailing, and a presence in the us-east-1 or eu-west-1 AWS region.</p> <h3 id=\"mup\">Meteor Up</h3> <p>Meteor Up, often referred to as “mupx” or “mup”, is a third-party open-source tool that can be used to deploy Meteor application to any online server over SSH. It handles some of the essential deployment requirements, but you will still need to do a lot of work to get your load balancing and version updates working smoothly. It’s essentially a way to automate the manual steps of using <code>meteor build</code> and putting that bundle on your server.</p> <p>You can obtain a server running Ubuntu or Debian from many generic hosting providers and Meteor Up can SSH into your server with the keys you provide in the config. You can also <a href=\"https://www.youtube.com/watch?v=WLGdXtZMmiI\" target=\"_blank\" rel=\"external\">watch this video</a> for a more complete walkthrough on how to do it.</p> <p>Meteor Up has multiple projects so select what is best for your project:</p> <ul> <li>Original <a href=\"https://github.com/arunoda/meteor-up\" target=\"_blank\" rel=\"external\">Meteor Up</a> (not generally recommended any longer)</li> <li>The <a href=\"https://github.com/arunoda/meteor-up/tree/mupx\" target=\"_blank\" rel=\"external\"><code>mupx</code></a> branch (best for pre-Meteor 1.4)</li> <li>The <a href=\"https://github.com/kadirahq/meteor-up\" target=\"_blank\" rel=\"external\"><code>kadirahq/mup</code></a> fork <em>(best for Meteor 1.4 or higher)</em>\n</li> </ul> <blockquote> <p>Currently, using Meteor Up with Meteor 1.4 requires <code>kadirahq/mup</code> (still in development) and a special docker image with the correct Node version.</p> </blockquote> <p>For further assistance, consult the documentation for the option you select.</p> <h3 id=\"custom-deployment\">Custom deployment</h3> <p>If you want to figure out your hosting solution completely from scratch, the Meteor tool has a command <code>meteor build</code> that creates a deployment bundle that contains a plain Node.js application. Any npm dependencies must be installed before issuing the <code>meteor build</code> command to be included in the bundle. You can host this application wherever you like and there are many options in terms of how you set it up and configure it.</p> <p><strong>NOTE</strong> it’s important that you build your bundle for the correct architecture. If you are building on your development machine, there’s a good chance you are deploying to a different server architecture. You’ll want to specify the correct architecture with <code>--architecture</code>:</p> <pre class=\"highlight bash\" data-language=\"bash\"># for example if deploying to a Ubuntu linux server:\nnpm install --production\nmeteor build /path/to/build --architecture os.linux.x86_64\n</pre> <p>This will provide you with a bundled application <code>.tar.gz</code> which you can extract and run without the <code>meteor</code> tool. The environment you choose will need the correct version of Node.js and connectivity to a MongoDB server.</p> <p>Depending on the version of Meteor you are using, you should install the proper version of <code>node</code> using the appropriate installation process for your platform.</p> <ul> <li>Node 4.4.7 for <em>Meteor 1.4.x</em>\n</li> <li>Node 0.10.43 for <em>Meteor 1.3.x and earlier</em>\n</li> </ul> <blockquote> <p>If you use a mis-matched version of Node when deploying your application, you will encounter errors!</p> </blockquote> <p>You can then run the application by invoking <code>node</code> with a <code>ROOT_URL</code>, and <code>MONGO_URL</code>. These instructions are also available in the <code>README</code> file found in the root of the bundle you built above.</p> <pre class=\"highlight bash\" data-language=\"bash\">cd my_build_bundle_directory\n(cd programs/server &amp;&amp; npm install)\nMONGO_URL=mongodb://localhost:27017/myapp ROOT_URL=http://my-app.com node main.js\n</pre> <ul> <li>\n<code>ROOT_URL</code> is the base URL for your Meteor project</li> <li>\n<code>MONGO_URL</code> is a <a href=\"https://docs.mongodb.com/manual/reference/connection-string/\" target=\"_blank\" rel=\"external\">Mongo connection string URI</a> supplied by the MongoDB provider.</li> </ul> <p>Unless you have a specific need to roll your own hosting environment, the other options here are definitely easier, and probably make for a better setup than doing everything from scratch. Operating a Meteor app in a way that it works correctly for everyone can be complex, and <a href=\"#galaxy\">Galaxy</a> handles a lot of the specifics like routing clients to the right containers and handling coordinated version updates for you.</p> <h2 id=\"process\">Deployment process</h2> <p>Although it’s much easier to deploy a web application than release most other types of software, that doesn’t mean you should be cavalier with your deployment. It’s important to properly QA and test your releases before you push them live, to ensure that users don’t have a bad experience, or even worse, data get corrupted.</p> <p>It’s a good idea to have a release process that you follow in releasing your application. Typically that process looks something like:</p> <ol> <li>Deploy the new version of the application to your staging server.</li> <li>QA the application on the staging server.</li> <li>Fix any bugs found in step 2. and repeat.</li> <li>Once you are satisfied with the staging release, release the <em>exact same</em> version to production.</li> <li>Run final QA on production.</li> </ol> <p>Steps 2. and 5. can be quite time-consuming, especially if you are aiming to maintain a high level of quality in your application. That’s why it’s a great idea to develop a suite of acceptance tests (see our <a href=\"testing\">Testing Article</a> for more on this). To take things even further, you could run a load/stress test against your staging server on every release.</p> <h3 id=\"continuous-deployment\">Continuous deployment</h3> <p>Continuous deployment refers to the process of deploying an application via a continuous integration tool, usually when some condition is reached (such as a git push to the <code>master</code> branch). You can use CD to deploy to Galaxy, as Nate Strauser explains in a <a href=\"https://medium.com/@natestrauser/migrating-meteor-apps-from-modulus-to-galaxy-with-continuous-deployment-from-codeship-aed2044cabd9#.lvio4sh4a\" target=\"_blank\" rel=\"external\">blog post on the subject</a>.</p> <h3 id=\"rolling-updates-and-data\">Rolling deployments and data versions</h3> <p>It’s important to understand what happens during a deployment, especially if your deployment involves changes in data format (and potentially data migrations, see the <a href=\"collections#migrations\">Collections Article</a>).</p> <p>When you are running your app on multiple servers or containers, it’s not a good idea to shut down all of the servers at once and then start them all back up again. This will result in more downtime than necessary, and will cause a huge spike in CPU usage when all of your clients reconnect again at the same time. To alleviate this, Galaxy stops and re-starts containers one by one during deployment. There will be a time period during which some containers are running the old version and some the new version, as users are migrated incrementally to the new version of your app.</p> <p><img src=\"https://guide.meteor.com/images/galaxy-deploying.png\"></p> <p>If the new version involves different data formats in the database, then you need to be a little more careful about how you step through versions to ensure that all the versions that are running simultaneously can work together. You can read more about how to do this in the <a href=\"collections#migrations\">collections article</a>.</p> <h2 id=\"analytics\">Monitoring users via analytics</h2> <p>It’s common to want to know which pages of your app are most commonly visited, and where users are coming from. Here’s a simple setup that will get you URL tracking using Google Analytics. We’ll be using the <a href=\"https://atmospherejs.com/okgrow/analytics\" target=\"_blank\" rel=\"external\"><code>okgrow:analytics</code></a> package.</p> <pre class=\"highlight vim\" data-language=\"vim\">meteor add okgrow:analytics\n</pre> <p>Now, we need to configure the package with our Google Analytics key (the package also supports a large variety of other providers, check out the <a href=\"https://atmospherejs.com/okgrow/analytics\" target=\"_blank\" rel=\"external\">documentation on Atmosphere</a>). Pass it in as part of <a href=\"#environment\"><em>Meteor settings</em></a>:</p> <pre class=\"highlight js\" data-language=\"js\">{\n  \"public\": {\n    \"analyticsSettings\": {\n      // Add your analytics tracking id's here\n      \"Google Analytics\" : {\"trackingId\": \"Your tracking ID\"}\n    }\n  }\n}\n</pre> <p>The analytics package hooks into Flow Router (see the <a href=\"routing\">routing article</a> for more) and records all of the page events for you.</p> <p>You may want to track non-page change related events (for instance publication subscription, or method calls) also. To do so you can use the custom event tracking functionality:</p> <pre class=\"highlight js\" data-language=\"js\">export const updateText = new ValidatedMethod({\n  ...\n  run({ todoId, newText }) {\n    // We use `isClient` here because we only want to track\n    // attempted method calls from the client, not server to\n    // server method calls\n    if (Meteor.isClient) {\n      analytics.track('todos.updateText', { todoId, newText });\n    }\n\n    // ...\n  }\n});\n</pre> <p>To achieve a similar abstraction for subscriptions/publications, you may want to write a simple wrapper for <code>Meteor.subscribe()</code>.</p> <h2 id=\"apm\">Monitoring your application</h2> <p>When you are running an app in production, it’s vitally important that you keep tabs on the performance of your application and ensure it is running smoothly.</p> <h3 id=\"meteor-performance\">Understanding Meteor performance</h3> <p>Although a host of tools exist to monitor the performance of HTTP, request-response based applications, the insights they give aren’t necessarily useful for a connected client system like a Meteor application. Although it’s true that slow HTTP response times would be a problem for your app, and so using a tool like <a href=\"https://www.pingdom.com\" target=\"_blank\" rel=\"external\">Pingdom</a> can serve a purpose, there are many kinds of issues with your app that won’t be surfaced by such tools.</p> <h3 id=\"galaxy-apm\">Monitoring with Galaxy</h3> <p><a href=\"#galaxy\">Galaxy</a> offers turnkey Meteor hosting and provides tools that are useful to debug the current and past state of your application. CPU and Memory load graphs in combination with connected user counts can be vital to determining if your setup is handling the current load (or if you need more containers), or if there’s some specific user action that’s causing disproportionate load (if they don’t seem to be correlated):</p> <p><img src=\"https://guide.meteor.com/images/galaxy-metrics.png\"></p> <p>Galaxy’s UI provides a detailed logging system, which can be invaluable to determine which action it is causing that extra load, or to generally debug other application issues:</p> <p><img src=\"https://guide.meteor.com/images/galaxy-logs.png\"></p> <h3 id=\"kadira\">Kadira</h3> <p>If you really want to understand the ins and outs of running your Meteor application, you should give <a href=\"https://kadira.io\" target=\"_blank\" rel=\"external\">Kadira</a> a try. Kadira is a full featured Application Performance Monitoring (APM) solution that’s built from the ground up for Meteor. Kadira operates by taking regular client and server side observations of your application’s performance as it conducts various activities and reporting them back to a master server.</p> <p>When you visit the Kadira application, you can view current and past behavior of your application over various useful metrics. Kadira’s <a href=\"https://kadira.io/platform/kadira-apm/overview\" target=\"_blank\" rel=\"external\">documentation</a> is extensive and invaluable, but we’ll discuss a few key areas here.</p> <h4 id=\"kadira-method-pub\">Method and Publication Latency</h4> <p>Rather than monitoring HTTP response times, in a Meteor app it makes far more sense to consider DDP response times. The two actions your client will wait for in terms of DDP are <em>method calls</em> and <em>publication subscriptions</em>. Kadira includes tools to help you discover which of your methods and publications are slow and resource intensive.</p> <p><img src=\"https://guide.meteor.com/images/kadira-method-latency.png\"></p> <p>In the above screenshot you can see the response time breakdown of the various methods commonly called by the Atmosphere application. The median time of 56ms and 99th percentile time of 200ms seems pretty reasonable, and doesn’t seem like too much of a concern</p> <p>You can also use the “traces” section to discover particular cases of the method call that are particular slow:</p> <p><img src=\"https://guide.meteor.com/images/kadira-method-trace.png\"></p> <p>In the above screenshot we’re looking at a slower example of a method call (which takes 214ms), which, when we drill in further we see is mostly taken up waiting on other actions on the user’s connection (principally waiting on the <code>searches/top</code> and <code>counts</code> publications). So we could consider looking to speed up the initial time of those subscriptions as they are slowing down searches a little in some cases.</p> <h4 id=\"kadira-livequery\">Livequery Monitoring</h4> <p>A key performance characteristic of Meteor is driven by the behavior of livequery, the key technology that allows your publications to push changing data automatically in realtime. In order to achieve this, livequery needs to monitor your MongoDB instance for changes (by tailing the oplog) and decide if a given change is relevant for the given publication.</p> <p>If the publication is used by a lot of users, or there are a lot of changes to be compared, then these livequery observers can do a lot of work. So it’s immensely useful that Kadira can tell you some statistics about your livequery usage:</p> <p><img src=\"https://guide.meteor.com/images/kadira-observer-usage.png\"></p> <p>In this screenshot we can see that observers are fairly steadily created and destroyed, with a pretty low amount of reuse over time, although in general they don’t survive for all that long. This would be consistent with the fact that we are looking at the <code>package</code> publication of Atmosphere which is started everytime a user visits a particular package’s page. The behavior is more or less what we would expect so we probably wouldn’t be too concerned by this information.</p> <h2 id=\"seo\">Enabling SEO</h2> <p>If your application contains a lot of publicly accessible content, then you probably want it to rank well in Google and other search engines’ indexes. As most webcrawlers do not support client-side rendering (or if they do, have spotty support for websockets), it’s better to render the site on the server and deliver it as HTML in this special case.</p> <p>To do so, we can use the <a href=\"https://prerender.io\" target=\"_blank\" rel=\"external\">Prerender.io</a> service, thanks to the <a href=\"https://atmospherejs.com/dfischer/prerenderio\" target=\"_blank\" rel=\"external\"><code>dfischer:prerenderio</code></a> package. It’s a simple as <code>meteor add</code>-ing it, and optionally setting your prerender token if you have a premium prerender account and would like to enable more frequent cache changes.</p> <p>If you’re using <a href=\"https://www.meteor.com/galaxy/signup\" target=\"_blank\" rel=\"external\">Galaxy to host your meteor apps</a>, you can also take advantage of built-in automatic <a href=\"https://prerender.io\" target=\"_blank\" rel=\"external\">Prerender.io</a> integration. Simply add <a href=\"https://atmospherejs.com/mdg/seo\" target=\"_blank\" rel=\"external\"><code>mdg:seo</code></a> to your app and Galaxy will take care of the rest.</p> <p>Chances are you also want to set <code>&lt;title&gt;</code> tags and other <code>&lt;head&gt;</code> content to make your site appear nicer in search results. The best way to do so is to use the <a href=\"https://atmospherejs.com/kadira/dochead\" target=\"_blank\" rel=\"external\"><code>kadira:dochead</code></a> package. The sensible place to call out to <code>DocHead</code> is from the <code>onCreated</code> callbacks of your page-level components.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/deployment.html\" class=\"_attribution-link\">https://guide.meteor.com/deployment.html</a>\n  </p>\n</div>\n","ui-ux":"<h1 class=\"title-page\">User Interfaces</h1> <div class=\"subtitle-page\">General tips for structuring your UI code, independent of your view rendering technology.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>How to build reusable client side components in any user interface framework.</li> <li>How to build a style guide to allow you to visually test such reusable components.</li> <li>Patterns for building front end components in a performant way in Meteor.</li> <li>How to build user interfaces in a maintainable and extensible way.</li> <li>How to build components that can cope with a variety of different data sources.</li> <li>How to use animation to keep users informed of changes.</li> </ol> <h2 id=\"view-layers\">View layers</h2> <p>Meteor officially supports three user interface (UI) rendering libraries, <a href=\"blaze\">Blaze</a>, <a href=\"react\">React</a> and <a href=\"http://www.angular-meteor.com\" target=\"_blank\" rel=\"external\">Angular</a>. Blaze was created as part of Meteor when it launched in 2011, React was created by Facebook in 2013, and Angular was created by Google in 2010. All three have been used successfully by large production apps. Blaze is the easiest to learn and has the most full-stack Meteor packages, but React and Angular are more developed and have larger communities.</p> <h3 id=\"syntax\">Syntax</h3> <ul> <li>Blaze uses an easy-to-learn <a href=\"http://handlebarsjs.com\" target=\"_blank\" rel=\"external\">Handlebars</a>-like template syntax, with logic like <code>{{#if}}</code> and <code>{{#each}}</code> interspersed in your HTML files. Template functions and CSS-selector events maps are written in JavaScript files.</li> <li>React uses <a href=\"https://facebook.github.io/react/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">JSX</a>, with which you write your HTML in JavaScript. While it doesn’t have the logic-view separation most libraries have, it also has the most flexibility. Template functions and event handlers are defined in the same file as the HTML part of the component, which usually makes it easier to understand how they are tied together.</li> <li>Angular uses HTML with <a href=\"https://angular.io/docs/ts/latest/guide/cheatsheet.html\" target=\"_blank\" rel=\"external\">special attribute syntax</a> for logic and events. Template helpers are written in the accompanying JavaScript file along with events, which are called by name from inside HTML attributes. </li> <li>React and Angular enforce a better component structure, which makes developing larger apps easier. (Although you can add component structure to Blaze by <a href=\"blaze#reusable-components\">following conventions</a> or using the <a href=\"http://components.meteorapp.com/\" target=\"_blank\" rel=\"external\">Blaze Components</a> or <a href=\"https://viewmodel.org/\" target=\"_blank\" rel=\"external\">ViewModel</a> packages.)</li> </ul> <h3 id=\"community\">Community</h3> <ul> <li>Blaze has many full-stack Meteor packages on Atmosphere, such as <a href=\"https://atmospherejs.com/useraccounts/core\" target=\"_blank\" rel=\"external\"><code>useraccounts:core</code></a> and <a href=\"https://atmospherejs.com/aldeed/autoform\" target=\"_blank\" rel=\"external\"><code>aldeed:autoform</code></a>.</li> <li>React has 42k stars on Github and 13k npm libraries.</li> <li>Angular has 12k stars on Github and 4k npm libraries.</li> </ul> <h3 id=\"performance\">Performance</h3> <ul> <li>Render performance varies a lot depending on the situation. All three libraries are very quick at rendering simple apps, but can take a noticeable amount of time with more complex apps.</li> <li>Angular and React have had more performance optimization work put into them than Blaze and in general will perform better. However, there are some cases when Blaze does better (for instance an <code>{{#each}}</code> over a changing cursor).</li> <li>\n<a href=\"http://info.meteor.com/blog/comparing-performance-of-blaze-react-angular-meteor-and-angular-2-with-meteor\" target=\"_blank\" rel=\"external\">One test</a> benchmarks Angular 2 as the best, followed by React and Angular 1, followed by Blaze. </li> </ul> <h3 id=\"mobile\">Mobile</h3> <ul> <li>\n<strong>Cordova</strong><ul> <li>All three libraries work fine in a Cordova web view, and you can use mobile CSS libraries like Ionic’s CSS with any view library.</li> <li>The most advanced mobile web framework is <a href=\"http://ionicframework.com/docs/v2/\" target=\"_blank\" rel=\"external\">Ionic 2</a>, which uses Angular 2.</li> <li>Ionic 1 uses Angular 1, but there are also <a href=\"http://meteoric-doc.com/\" target=\"_blank\" rel=\"external\">Blaze</a> and <a href=\"http://reactionic.github.io/\" target=\"_blank\" rel=\"external\">React</a> ports.</li> <li>Another good option is <a href=\"https://onsen.io/v2/\" target=\"_blank\" rel=\"external\">Onsen UI</a>, which includes a <a href=\"https://onsen.io/v2/docs/guide/react/\" target=\"_blank\" rel=\"external\">React version</a>.</li> </ul> </li> <li>\n<strong>Native</strong><ul> <li>You can connect any native iOS or Android app to a Meteor server via <a href=\"https://www.meteor.com/ddp\" target=\"_blank\" rel=\"external\">DDP</a>. For iOS, use the <a href=\"https://github.com/martijnwalraven/meteor-ios\" target=\"_blank\" rel=\"external\"><code>meteor-ios</code></a> framework.</li> <li>You can write apps with native UI elements in JavaScript using <a href=\"https://facebook.github.io/react-native/\" target=\"_blank\" rel=\"external\">React Native</a>. For the most recent information on how to use React Native with Meteor, see <a href=\"https://github.com/spencercarli/react-native-meteor-index\" target=\"_blank\" rel=\"external\">this reference</a>.</li> </ul> </li> </ul> <h2 id=\"components\">UI components</h2> <p>Regardless of the view layer that you are using, there are some patterns in how you build your User Interface (UI) that will help make your app’s code easier to understand, test, and maintain. These patterns, much like general patterns of modularity, revolve around making the interfaces to your UI elements very clear and avoiding using techniques that bypass these known interfaces.</p> <p>In this article, we’ll refer to the elements in your user interface as “components”. Although in some systems, you may refer to them as “templates”, it can be a good idea to think of them as something more like a component, which has an API and internal logic, rather than a template, which is just a bit of HTML.</p> <p>To begin with, let’s consider two categories of UI components that are useful to think about, “reusable” and “smart”:</p> <h3 id=\"reusable-components\">Reusable components</h3> <p>A “reusable” component is a component which doesn’t rely on anything from the environment it renders in. It renders purely based on its direct inputs (its <em>template arguments</em> in Blaze, or <em>props</em> in React) and internal state.</p> <p>In Meteor specifically, this means a component which does not access data from any global sources—Collections, Stores, routers, user data, or similar. For instance, in the Todos example app, the <code>Lists_show</code> template takes in the list it is rendering and the set of todos for that list, and it never looks directly in the <code>Todos</code> or <code>Lists</code> collections.</p> <p>Reusable components have many advantages:</p> <ol> <li>\n<p>They are easy to reason about—you don’t need to understand how the data in the global store changes, simply how the arguments to the component change.</p> </li> <li>\n<p>They are easy to test—you don’t need to be careful about the environment you render them in, all you need to do is provide the right arguments.</p> </li> <li>\n<p>They are easy to add to component style guides—as we’ll see in the section about <a href=\"#styleguides\">component style guides</a>, when creating a style guide, a clean environment makes things much easier to work with.</p> </li> <li>\n<p>You know exactly what dependencies you need to provide for them to work in different environments.</p> <p>There’s also an even more restricted type of reusable component, a “pure” component, which does not have any internal state. For instance in the Todos app, the <code>Todos_item</code> template decides what to render solely based on its arguments. Pure components are even easier to reason about and test than reusable ones and so should be preferred wherever possible.</p> </li> </ol> <h3 id=\"global-stores\">Global data stores</h3> <p>So which are the global data stores that you should be avoiding in reusable components? There are a few. Meteor is built to optimize speed of development, which means you can access a lot of things globally. Although this is convenient when building “smart” components (see below), you’ll need to avoid these data sources in reusable components:</p> <ul> <li>Your collections, as well as the <code>Meteor.users</code> collection,</li> <li>Accounts information, like <code>Meteor.user()</code> and <code>Meteor.loggingIn()</code>\n</li> <li>Current route information</li> <li>Any other client-side data stores (read more in the <a href=\"data-loading#stores\">Data Loading article</a>)</li> </ul> <h3 id=\"smart-components\">Smart components</h3> <p>While most of the components in your app should be reusable, they need to get their data passed in from somewhere. This is where “smart” components come in. Such components typically do the following things:</p> <ol> <li>Subscribe to data</li> <li>Fetch data from those subscriptions</li> <li>Fetch global client-side state from stores such as the Router, Accounts, and your own stores</li> </ol> <p>Ideally, once a smart component has assembled such a set of data, it passes it off to a reusable component child to render with. Smart components usually don’t render anything apart from one or more reusable children. This makes it easy to separate rendering and data loading in your tests.</p> <p>A typical use case for a smart component is the “page” component that the router points you to when you access a URL. Such a component typically needs to do the three things above and then can pass the resulting arguments into child components. In the Todos example app, the <code>listShowPage</code> does exactly this, resulting in a template with very simple HTML:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Lists_show_page\"&gt;\n  {{#each listId in listIdArray}}\n    {{&gt; Lists_show (listArgs listId)}}\n  {{else}}\n    {{&gt; App_notFound}}\n  {{/each}}\n&lt;/template&gt;\n</pre> <p>The JavaScript of this component is responsible for subscribing and fetching the data that’s used by the <code>Lists_show</code> template itself:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.onCreated(function() {\n  this.getListId = () =&gt; FlowRouter.getParam('_id');\n\n  this.autorun(() =&gt; {\n    this.subscribe('todos.inList', this.getListId());\n  });\n});\n\nTemplate.Lists_show_page.helpers({\n  // We use #each on an array of one item so that the \"list\" template is\n  // removed and a new copy is added when changing lists, which is\n  // important for animation purposes.\n  listIdArray() {\n    const instance = Template.instance();\n    const listId = instance.getListId();\n    return Lists.findOne(listId) ? [listId] : [];\n  },\n  listArgs(listId) {\n    const instance = Template.instance();\n    return {\n      todosReady: instance.subscriptionsReady(),\n      // We pass `list` (which contains the full list, with all fields, as a function\n      // because we want to control reactivity. When you check a todo item, the\n      // `list.incompleteCount` changes. If we didn't do this the entire list would\n      // re-render whenever you checked an item. By isolating the reactiviy on the list\n      // to the area that cares about it, we stop it from happening.\n      list() {\n        return Lists.findOne(listId);\n      },\n      // By finding the list with only the `_id` field set, we don't create a dependency on the\n      // `list.incompleteCount`, and avoid re-rendering the todos when it changes\n      todos: Lists.findOne(listId, {fields: {_id: true}}).todos()\n    };\n  }\n});\n</pre> <h2 id=\"styleguides\">Visually testing reusable components</h2> <p>A useful property of reusable components is that you can render them anywhere because they don’t rely on complicated environments. This is very useful when paired with component explorers, debug-only apps that allow you to explore, visualize, and test your UI components.</p> <p><img src=\"https://guide.meteor.com/images/chromatic-how-it-works.png\"></p> <p>A component explorer does two things:</p> <ol> <li>\n<b>Indexes</b> your apps components so they are easy to find</li> <li>\n<b>Renders</b> components using developer-defined states and stubbed data</li> </ol> <p>For instance, in Galaxy, we use a component explorer called Chromatic to render each component one specification at a time or with all specifications at once.</p> <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SRXvg-_Suo0\" frameborder=\"0\" allowfullscreen></iframe> <p>Using Chromatic enables rapid development of complex components. Typically in a large application, it can be quite difficult to achieve certain states of components purely by “using” the application. For example, a component in Galaxy can enter a complex state if two deploys of the same app happen simultaneously. With Chromatic we’re able to define this state at the component level and test it independently of the application logic.</p> <p>You can use <a href=\"https://github.com/meteor/chromatic\" target=\"_blank\" rel=\"external\">Chromatic component explorer</a> in your Meteor + React app with <code>meteor add mdg:chromatic</code>. Similar projects built in React are <a href=\"http://www.uiharness.com/\" target=\"_blank\" rel=\"external\">UI Harness</a> by Phil Cockfield and <a href=\"https://github.com/kadirahq/react-storybook\" target=\"_blank\" rel=\"external\">React Storybook</a> by Arunoda Susiripala.</p> <h2 id=\"ui-patterns\">User interface patterns</h2> <p>Here are some patterns that are useful to keep in mind when building the user interface of your Meteor application.</p> <h3 id=\"i18n\">Internationalization</h3> <p>Internationalization (i18n) is the process of generalizing the UI of your app in such a way that it’s easy to render all text in a different language. Meteor’s package ecosystem includes internationalization options tailored to your frontend framework of choice.</p> <h4 id=\"places-to-i18n\">Places to translate</h4> <p>It’s useful to consider the various places in the system that user-readable strings exist and make sure that you are properly using the i18n system to generate those strings in each case. We’ll go over the implementation for each case in the sections about <a href=\"#tap-i18n-js\"><code>tap:i18n</code></a> and <a href=\"#universe-i18n\"><code>universe:i18n</code></a> below.</p> <ol> <li>\n<strong>HTML templates and components.</strong> This is the most obvious place—in the content of UI components that the user sees.</li> <li>\n<strong>Client JavaScript messages.</strong> Alerts or other messages that are generated on the client side are shown to the user, and should also be translated.</li> <li>\n<strong>Server JavaScript messages and emails.</strong> Messages or errors generated by the server can often be user visible. An obvious place is emails and any other server generated messages, such as mobile push notifications, but more subtle places are return values and error messages on method calls. Errors should be sent over the wire in a generic form and translated on the client.</li> <li>\n<strong>Data in the database.</strong> A final place where you may want to translate is actual user-generated data in your database. For example, if you are running a wiki, you might want to have a mechanism for the wiki pages to be translated to different languages. How you go about this will likely be unique to your application.</li> </ol> <h4 id=\"tap-i18n-js\">Using <code>tap:i18n</code> in JavaScript</h4> <p>In Meteor, <a href=\"https://atmospherejs.com/tap/i18n\" target=\"_blank\" rel=\"external\">the excellent <code>tap:i18n</code> package</a> provides an API for building translations and using them in your components and frontend code.</p> <p>To use <code>tap:i18n</code>, first <code>meteor add tap:i18n</code> to add it to your app. Then we need to add a translation JSON file for our default language (<code>en</code> for English) – we can put it at <code>i18n/en.i18n.json</code>. Once we’ve done that we can import and use the <code>TAPi18n.__()</code> function to get translations for strings or keys within our JavaScript code.</p> <p>For instance for errors in the Todos example app, we create an <code>errors</code> module that allows us to easily alert a translated error for all of the errors that we can potentially throw from methods:</p> <pre class=\"highlight js\" data-language=\"js\">import { TAPi18n } from 'meteor/tap:i18n';\n\nexport const displayError = (error) =&gt;  {\n  if (error) {\n    // It would be better to not alert the error here but inform the user in some\n    // more subtle way\n    alert(TAPi18n.__(error.error));\n  }\n};\n</pre> <p>The <code>error.error</code> field is the first argument to the <code>Meteor.Error</code> constructor, and we use it to uniquely name and namespace all the errors we use in the application. We then define the English text of those errors in <code>i18n/en.i18n.json</code>:</p> <pre class=\"highlight\" data-language=\"highlight\">{\n    \"lists\": {\n    \"makePrivate\": {\n      \"notLoggedIn\": \"Must be logged in to make private lists.\",\n      \"lastPublicList\": \"Cannot make the last public list private.\"\n    },\n    \"makePublic\": {\n    ...\n    }\n    ...\n}\n</pre> <h4 id=\"tap-i18n-blaze\">Using <code>tap:i18n</code> in Blaze</h4> <p>We can also easily use translations in Blaze templates. To do so, we can use the <code>{{_ }}</code> helper. In the Todos app we use the actual string that we want to output in English as the i18n key, which means we don’t need to provide an English translation, although perhaps in a real app you might want to provide keys from the beginning.</p> <p>For example in <code>app-not-found.html</code>:</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"App_notFound\"&gt;\n  &lt;div class=\"page not-found\"&gt;\n    &lt;nav&gt;\n      &lt;div class=\"nav-group\"&gt;\n        &lt;a href=\"#\" class=\"js-menu nav-item\"&gt;&lt;span class=\"icon-list-unordered\"&gt;&lt;/span&gt;&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/nav&gt;\n\n    &lt;div class=\"content-scrollable\"&gt;\n      &lt;div class=\"wrapper-message\"&gt;\n        &lt;div class=\"title-message\"&gt;{{_ 'Page not found'}}&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</pre> <h4 id=\"tap-i18n-changing-language\">Changing language</h4> <p>To set and change the language that a user is seeing, you should call <code>TAPi18n.setLanguage(fn)</code>, where <code>fn</code> is a (possibly reactive) function that returns the current language. For instance you could write</p> <pre class=\"highlight js\" data-language=\"js\">// A store to use for the current language\nexport const CurrentLanguage = new ReactiveVar('en');\n\n\nimport CurrentLanguage from '../stores/current-language.js';\nTAPi18n.setLanguage(() =&gt; {\n  CurrentLanguage.get();\n});\n</pre> <p>Then somewhere in your UI you can <code>CurrentLanguage.set('es')</code> when a user chooses a new language.</p> <h4 id=\"universe-i18n\">Using <code>universe:i18n</code> in React</h4> <p>For React-based apps, the <a href=\"https://atmospherejs.com/universe/i18n\" target=\"_blank\" rel=\"external\"><code>universe:18n</code> package</a> presents an alternative solution to <code>tap:i18n</code>. <code>universe:i18n</code> adopts similar conventions to <code>tap:i18n</code>, but also includes a convenient drop-in React component and omits <code>tap:i18n's</code> dependencies on Meteor’s <code>templating</code> and <code>jquery</code> packages. <code>universe:i18n</code> was intended for Meteor React applications using <code>ES2015</code> modules, but it can be used without React or modules.</p> <h4 id=\"universe-i18n-js\">Using <code>universe:i18n</code> in JS</h4> <p>To get started, run <code>meteor add universe:i18n</code> to add it to your app. Add an English (<code>en-US</code>) translation file in <code>JSON</code> format to your app with the name <code>en-us.i18n.json</code>. Translation files can be identified by file name or with the <code>{\"_locale\": \"en-US\"}</code> JSON property. The <code>YAML</code> file format is also supported.</p> <p>If your app uses <code>ES2015</code> modules included from <code>client/main.js</code> and <code>server/main.js</code> entry points, import your JSON file(s) there. The <code>i18n.__()</code> function will now locate keys you pass.</p> <p>Borrowing from the <code>tap:i18n</code> example <a href=\"#tap-i18n-js\">above</a>, in <code>universe:i18n</code> our <code>displayError</code> function now looks like this:</p> <pre class=\"highlight js\" data-language=\"js\">import i18n from 'meteor/universe:i18n';\n\nexport const displayError = (error) =&gt;  {\n  if (error) {\n    alert(i18n.__(error.error));\n  }\n};\n</pre> <p>To change the user’s language, use <code>i18n.setLocale('en-US')</code>. <code>universe:i18n</code> allows retrieval of additional translations by method as well as including JSON files with a client bundle.</p> <h4 id=\"universe-i18n-react\">Using <code>universe:i18n</code> in React components</h4> <p>To add reactive i18n inline in your React components, simply use the <code>i18n.createComponent()</code> function and pass it keys from your translation file. Here’s an example of a simple component wrapping i18n’s translation component:</p> <pre class=\"highlight js\" data-language=\"js\">import React from 'react';\nimport i18n from 'meteor/universe:i18n';\n\nconst T = i18n.createComponent();\n\n// displays 'hello world!' where our en-us.i18n.json \n// has the key/value { \"hello\": \"hello world!\" }\n\nconst Welcome = (props) =&gt; &lt;div&gt;\n  &lt;T&gt;hello&lt;/T&gt;\n&lt;/div&gt;;\n\nexport default Welcome;\n</pre> <p>See the documentation for <a href=\"https://atmospherejs.com/universe/i18n\" target=\"_blank\" rel=\"external\"><code>universe:i18n</code></a> for additional options and configuration.</p> <h3 id=\"event-handling\">Event handling</h3> <p>A large part of your UI involves responding to events initated by the user, and there are some steps that you should take to make sure your application performs well in the face of rapid input. An application lagging in response to user actions is one of the most noticeable performance problems.</p> <h4 id=\"throttling-method-calls\">Throttling method calls on user action</h4> <p>It’s typical to make some kind of change to the database when a user takes an action. However it’s important to make sure you don’t do this too rapidly. For instance, if you wish to save the user’s text as they type in a text box, you should take steps to make sure that you don’t send method calls to your server more than every few hundred milliseconds.</p> <p>If you do not, you’ll see performance problems across the board: you’ll be flooding the user’s network connection with a lot of small changes, the UI will update on every keystroke, potentially causing poor performance, and your database will suffer with a lot of writes.</p> <p>To throttle writes, a typical approach is to use underscore’s <a href=\"http://underscorejs.org/#throttle\" target=\"_blank\" rel=\"external\"><code>.throttle()</code></a> or <a href=\"http://underscorejs.org/#debounce\" target=\"_blank\" rel=\"external\"><code>.debounce()</code></a> functions. For instance, in the Todos example app, we throttle writes on user input to 300ms:</p> <pre class=\"highlight js\" data-language=\"js\">import {\n  updateText,\n} from '../../api/todos/methods.js';\n\n\nTemplate.Todos_item.events({\n  // update the text of the item on keypress but throttle the event to ensure\n  // we don't flood the server with updates (handles the event at most once\n  // every 300ms)\n  'keyup input[type=text]': _.throttle(function(event) {\n    updateText.call({\n      todoId: this.todo._id,\n      newText: event.target.value\n    }, (err) =&gt; {\n      err &amp;&amp; alert(err.error);\n    });\n  }, 300)\n});\n</pre> <p>Typically, you use <code>.throttle()</code> if you are OK with the event happening during the user series of actions (i.e. you don’t mind the multiple, throttled events happening over time, as in this case), whereas you use <code>.debounce()</code> if you want the events to happen whenever (in this example) the user stops typing for 300ms or longer.</p> <p><img src=\"https://guide.meteor.com/images/throttle-vs-debounce.png\"></p> <h4 id=\"limiting-re-rendering\">Limiting re-rendering</h4> <p>Even if you aren’t saving data over the wire to the database on every user input, sometimes you still may wish to update in-memory data stores on every user change. If updating that data store triggers a lot of UI changes, you can see poor performance and missed keystrokes when you update it too often. In such cases you can limit re-rendering by throttling in a similar way how we throttled the method call above. You could also use <code>.debounce()</code> to ensure the changes happen only after the user has stopped typing.</p> <h2 id=\"ux-patterns\">User experience patterns</h2> <p>User experience, or UX, describes the experience of a user as they interact with your application. There are several UX patterns that are typical to most Meteor apps which are worth exploring here. Many of these patterns are tied to the way data is loaded as the user interacts with your app, so there are similar sections in the <a href=\"data-loading#patterns\">data loading article</a> talking about how to implement these patterns using Meteor’s publications and subscriptions.</p> <h3 id=\"subscription-readiness\">Subscription readiness</h3> <p>When you subscribe to data in Meteor, it does not become instantly available on the client. Typically the user will need to wait for a few hundred milliseconds, or as long as a few seconds (depending on the connection speed), for the data to arrive. This is especially noticeable when the app is first starting up or you move between screens that are displaying completely new data.</p> <p>There are a few UX techniques for dealing with this waiting period. The simplest is simply to switch out the page you are rendering with a generic “loading” page while you wait for all the data (typically a page may open several subscriptions) to load. As an example, in the Todos example app, we wait until all the public lists and the user’s private lists have loaded before we try to render the actual page:</p> <pre class=\"highlight html\" data-language=\"html\">{{#if Template.subscriptionsReady}}\n  {{&gt; Template.dynamic template=main}}\n{{else}}\n  {{&gt; App_loading}}\n{{/if}}\n</pre> <p>We do this with Blaze’s <code>Template.subscriptionsReady</code> which is perfect for this purpose, as it waits for all the subscriptions that the current component has asked for to become ready.</p> <h4 id=\"per-component-loading\">Per-component loading state</h4> <p>Usually it makes for a better UX to show as much of the screen as possible as quickly as possible and to only show loading state for the parts of the screen that are still waiting on data. So a nice pattern to follow is “per-component loading”. We do this in the Todos app when you visit the list page—we instantly render the list metadata, such as its title and privacy settings, and render a loading state for the list of todos while we wait for them to appear.</p> <p><img src=\"https://guide.meteor.com/images/todos-loading.png\"></p> <p>We achieve this by passing the readiness of the todos list down from the smart component which is subscribing (the <code>listShowPage</code>) into the reusable component which renders the data:</p> <pre class=\"highlight html\" data-language=\"html\">{{&gt; Lists_show todosReady=Template.subscriptionsReady list=list}}\n</pre> <p>And then we use that state to determine what to render in the reusable component (<code>listShow</code>):</p> <pre class=\"highlight html\" data-language=\"html\">{{#if todosReady}}\n  {{#with list._id}}\n    {{#each todo in (todos this)}}\n      {{&gt; Todos_item (todoArgs todo)}}\n    {{else}}\n      &lt;div class=\"wrapper-message\"&gt;\n        &lt;div class=\"title-message\"&gt;No tasks here&lt;/div&gt;\n        &lt;div class=\"subtitle-message\"&gt;Add new tasks using the field above&lt;/div&gt;\n      &lt;/div&gt;\n    {{/each}}\n  {{/with}}\n{{else}}\n    &lt;div class=\"wrapper-message\"&gt;\n      &lt;div class=\"title-message\"&gt;Loading tasks...&lt;/div&gt;\n    &lt;/div&gt;\n{{/if}}\n</pre> <h4 id=\"loading-placeholders\">Showing placeholders</h4> <p>You can take the above UI a step further by showing placeholders whilst you wait for the data to load. This is a UX pattern that has been pioneered by Facebook which gives the user a more solid impression of what data is coming down the wire. It also prevents parts of the UI from moving around when data loads, if you can make the placeholder have the same dimensions as the final element.</p> <p>For example, in Galaxy, while you wait for your app’s log to load, you see a loading state indicating what you might see:</p> <p><img src=\"https://guide.meteor.com/images/galaxy-placeholders.png\"></p> <h4 id=\"styleguide-and-loading\">Using the style guide to prototype loading state</h4> <p>Loading states are notoriously difficult to work on visually as they are by definition transient and often are barely noticeable in a development environment where subscriptions load almost instantly.</p> <p>This is one reason why being able to achieve any state at will in the <a href=\"#styleguides\">component style guide</a> is so useful. As our reusable component <code>Lists_show</code> simply chooses to render based on its <code>todosReady</code> argument and does not concern itself with a subscription, it is trivial to render its loading state in a style guide.</p> <h3 id=\"pagination\">Pagination</h3> <p>In the <a href=\"data-loading#pagination\">Data Loading article</a> we discuss a pattern of paging through an “infinite scroll” type subscription which loads one page of data at a time as a user scrolls down the page. It’s interesting to consider UX patterns to consume that data and indicate what’s happening to the user.</p> <h4 id=\"list-component\">A list component</h4> <p>Let’s consider any generic item-listing component. To focus on a concrete example, we could consider the todo list in the Todos example app. Although it does not in our current example app, in a future version it could paginate through the todos for a given list.</p> <p>There are a variety of states that such a list can be in:</p> <ol> <li>Initially loading, no data available yet.</li> <li>Showing a subset of the items with more available.</li> <li>Showing a subset of the items with more loading.</li> <li>Showing <em>all</em> the items - no more available.</li> <li>Showing <em>no</em> items because none exist.</li> </ol> <p>It’s instructive to think about what arguments such a component would need to differentiate between those five states. Let’s consider a generic pattern that would work in all cases where we provide the following information:</p> <ul> <li>A <code>count</code> of the total number of items.</li> <li>A <code>countReady</code> boolean that indicates if we know that count yet (remember we need to load even that information).</li> <li>A number of items that we have <code>requested</code>.</li> <li>A list of <code>items</code> that we currently know about.</li> </ul> <p>We can now distinguish between the 5 states above based on these conditions:</p> <ol> <li>\n<code>countReady</code> is false, or <code>count &gt; 0</code> and <code>items</code> is still empty. (These are actually two different states, but it doesn’t seem important to visually separate them).</li> <li><code>items.length === requested &amp;&amp; requested &lt; count</code></li> <li><code>0 &lt; items.length &lt; requested</code></li> <li><code>items.length === requested &amp;&amp; count &gt; 0</code></li> <li><code>count === 0</code></li> </ol> <p>You can see that although the situation is a little complex, it’s also completely determined by the arguments and thus very much testable. A component style guide helps immeasurably in seeing all these states easily! In Galaxy we have each state in our style guide for each of the lists of our app and we can ensure all work as expected and appear correctly:</p> <image src=\"images/galaxy-styleguide-list.png\"> <h4 id=\"pagination-controller\">A pagination “controller” pattern</h4> <p>A list is also a good opportunity to understand the benefits of the smart vs reusable component split. We’ve seen above that correctly rendering and visualizing all the possible states of a list is non-trivial and is made much easier by having a reusable list component that takes all the required information in as arguments.</p> <p>However, we still need to subscribe to the list of items and the count, and collect that data somewhere. To do this, it’s sensible to use a smart wrapper component (analogous to an MVC “controller”) whose job it is to subscribe and fetch the relevant data.</p> <p>In the Todos example app, we already have a wrapping component for the list that talks to the router and sets up subscriptions. This component could easily be extended to understand pagination:</p> <pre class=\"highlight js\" data-language=\"js\">const PAGE_SIZE = 10;\n\nTemplate.Lists_show_page.onCreated(function() {\n  // We use internal state to store the number of items we've requested\n  this.state = new ReactiveDict();\n\n  this.getListId = () =&gt; FlowRouter.getParam('_id');\n\n  this.autorun(() =&gt; {\n    // As the `requested` state increases, we re-subscribe to a greater number of todos\n    this.subscribe('List.todos', this.getListId(), this.state.get('requested'));\n    this.countSub = this.subscribe('Lists.todoCount', this.getListId());\n  });\n\n  // The `onNextPage` function is used to increment the `requested` state variable. It's passed\n  // into the listShow subcomponent to be triggered when the user reaches the end of the visible todos\n  this.onNextPage = () =&gt; {\n    this.state.set('requested', this.state.get('requested') + PAGE_SIZE);\n  };\n});\n\nTemplate.Lists_show_page.helpers({\n  listArgs(listId) {\n    const instance = Template.instance();\n    const list = Lists.findOne(listId);\n    const requested = instance.state.get('requested');\n    return {\n      list,\n      todos: list.todos({}, {limit: requested}),\n      requested,\n      countReady: instance.countSub.ready(),\n      count: Counts.get(`list/todoCount${listId}`),\n      onNextPage: instance.onNextPage\n    };\n  }\n});\n</pre> <h4 id=\"patterns-for-new-data\">UX patterns for displaying new data</h4> <p>An interesting UX challenge in a realtime system like Meteor involves how to bring new information (like changing data in a list) to the user’s attention. As <a href=\"http://blog.percolatestudio.com/design/design-for-realtime/\" target=\"_blank\" rel=\"external\">Dominic</a> points out, it’s not always a good idea to simply update the contents of a list as quickly as possible, as it’s easy to miss changes or get confused about what’s happened.</p> <p>One solution to this problem is to <em>animate</em> list changes (which we’ll look at in the <a href=\"#animation\">animation section</a>), but this isn’t always the best approach. For instance, if a user is reading a list of comments, they may not want to see any changes until they are done with the current comment thread.</p> <p>An option in this case is to call out that there are changes to the data the user is looking at without actually making UI updates. In a system like Meteor which is reactive by default, it isn’t necessarily easy to stop such changes from happening!</p> <p>However, it is possible to do this thanks to our split between smart and reusable components. The reusable component simply renders what it’s given, so we use our smart component to control that information. We can use a <a href=\"collections#local-collections\"><em>local collection</em></a> to store the rendered data, and then push data into it when the user requests an update:</p> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.onCreated(function() {\n  // ...\n\n  // The visible todos are the todos that the user can\n  // actually see on the screen (whereas Todos are the\n  // todos that actually exist)\n  this.visibleTodos = new Mongo.Collection(null);\n\n  this.getTodos = () =&gt; {\n    const list = Lists.findOne(this.getListId());\n    return list.todos({}, {limit: instance.state.get('requested')});\n  };\n  // When the user requests it, we should sync the visible todos to\n  // reflect the true state of the world\n  this.syncTodos = (todos) =&gt; {\n    todos.forEach(todo =&gt; this.visibleTodos.insert(todo));\n    this.state.set('hasChanges', false);\n  };\n  this.onShowChanges = () =&gt; {\n    this.syncTodos(this.getTodos());\n  };\n\n  this.autorun((computation) =&gt; {\n    const todos = this.getTodos();\n\n    // If this autorun re-runs, the list id or set of todos must have \n    // changed, so we should flag it to the user so they know there\n    // are changes to be seen.\n    if (!computation.firstRun) {\n      this.state.set('hasChanges', true);\n    } else {\n      this.syncTodos(todos);\n    }\n  });\n});\n\nTemplate.Lists_show_page.helpers({\n  listArgs(listId) {\n    const instance = Template.instance();\n    const list = Lists.findOne(listId);\n    const requested = instance.state.get('requested');\n    return {\n      list,\n      // we pass the *visible* todos through here\n      todos: instance.visibleTodos.find({}, {limit: requested}),\n      requested,\n      countReady: instance.countSub.ready(),\n      count: Counts.get(`list/todoCount${listId}`),\n      onNextPage: instance.onNextPage,\n      // These two properties allow the user to know that there\n      // are changes to be viewed and allow them to view them\n      hasChanges: instance.state.get('hasChanges'),\n      onShowChanges:instance.onShowChanges\n    };\n  }\n});\n</pre> <p>The reusable sub-component can then use the <code>hasChanges</code> argument to determine if it should show some kind of callout to the user to indicate changes are available, and then use the <code>onShowChanges</code> callback to trigger them to be shown.</p> <h3 id=\"optimistic-ui\">Optimistic UI</h3> <p>One nice UX pattern which Meteor makes much easier than other frameworks is Optimistic UI. Optimistic UI is the process of showing user-generated changes in the UI without waiting for the server to acknowledge that the change has succeeded, resulting in a user experience that seems faster than is physically possible, since you don’t need to wait for any server roundtrips. Since most user actions in a well-designed app will be successful, it makes sense for almost all parts of an app to be optimistic in this way.</p> <p>However, it’s not <em>always</em> necessarily a good idea to be optimistic. Sometimes we may actually want to wait for the server’s response. For instance, when a user is logging in, you <em>have</em> to wait for the server to check the password is correct before you can start allowing them into the site.</p> <p>So when should you wait for the server and when not? It basically comes down to how optimistic you are; how likely it is that something will go wrong. In the case of a password, you really can’t tell on the client, so you need to be conservative. In other cases, you can be pretty confident that the Method call will succeed, and so you can move on.</p> <p>For instance, in the Todos example app, when creating a new list, the list creation will basically always succeed, so we write:</p> <pre class=\"highlight js\" data-language=\"js\">import { insert } from '../../api/lists/methods.js';\n\nTemplate.App_body.events({\n  'click .js-new-list'() {\n    const listId = insert.call((err) =&gt; {\n      if (err) {\n        // At this point, we have already redirected to the new list page, but\n        // for some reason the list didn't get created. This should almost never\n        // happen, but it's good to handle it anyway.\n        FlowRouter.go('App.home');\n        alert('Could not create list.');\n      }\n    });\n\n    FlowRouter.go('Lists.show', { _id: listId });\n  }\n});\n</pre> <p>We place the <code>FlowRouter.go('Lists.show')</code> outside of the callback of the Method call, so that it runs right away. First we <em>simulate</em> the method (which creates a list locally in Minimongo), then route to it. Eventually the server returns, usually creating the exact same list (which the user will not even notice). In the unlikely event that the server call fails, we show an error and redirect back to the homepage.</p> <p>Note that the <code>listId</code> returned by the list method (which is the one generated by the client stub) is guaranteed to be the same as the one generated on the server, due to <a href=\"methods#consistent-id-generation\">the way that Meteor generates IDs</a> and ensures they are the same between client and server.</p> <h3 id=\"writes-in-progress\">Indicating when a write is in progress</h3> <p>Sometimes the user may be interested in knowing when the update has hit the server. For instance, in a chat application, it’s a typical pattern to optimistically display the message in the chat log, but indicate that it is “pending” until the server has acknowledged the write. We can do this easily in Meteor by simply modifying the Method to act differently on the client:</p> <pre class=\"highlight js\" data-language=\"js\">Messages.methods.insert = new ValidatedMethod({\n  name: 'Messages.methods.insert',\n  validate: new SimpleSchema({\n    text: {type: String}\n  }).validator(),\n  run(message) {\n    // In the simulation (on the client), we add an extra pending field.\n    // It will be removed when the server comes back with the \"true\" data.\n    if (this.isSimulation) {\n      message.pending = true;\n    }\n\n    Messages.insert(message);\n  }\n})\n</pre> <p>Of course in this scenario, you also need to be prepared for the server to fail, and again, indicate it to the user somehow.</p> <h3 id=\"unexpected-failures\">Unexpected failures</h3> <p>We’ve seen examples above of failures which you don’t really anticipate will happen. It’s difficult and inefficient to defend against every possible error, however unlikely. However, there are some catch-all patterns that you can use for unexpected failures.</p> <p>Thanks to Meteor’s automatic handling of optimistic UI, if a method unexpectedly fails the optimistic changes will roll back and the Minimongo database will end up in a consistent state. If you are rendering directly from Minimongo, the user will see something that is consistent, even if it’s not what they anticipated of course. In some cases when you have state you are keeping outside of Minimongo, you may need to make changes to it manually to reflect this. You can see this in the example above where we had to update the router manually after an operation failed.</p> <p>However, it’s terrible UX to simply jump the user to an unexpected state without explaining what’s happened. We used a <code>alert()</code> above, which is a pretty poor option, but gets the job done. One better approach is to indicate changes via a “flash notification”, which is a UI element that’s displayed “out-of-band”, typically in the top right of the screen, given the user <em>some</em> indication of what’s happened. Here’s an example of a flash notification in Galaxy, at the top right of the page:</p> <p><img src=\"https://guide.meteor.com/images/galaxy-flash-notification.png\"></p> <h2 id=\"animation\">Animation</h2> <p>Animation is the process of indicating changes in the UI smoothly <em>over time</em> rather than <em>instantly</em>. Although animation is often seen as “window dressing” or purely aesthetic, in fact it serves a very important purpose, highlighted by the example of the changing list above. In a connected-client world where changes in the UI aren’t always initiated by user action (i.e. sometimes they happen as a result of the server pushing changes made by other users), instant changes can result in a user experience where it’s difficult to understand what is happening.</p> <h3 id=\"animating-visiblity\">Animating changes in visiblity</h3> <p>Probably the most fundamental type of UI change that requires animation is when items appear or disappear. In Blaze, we can use the <a href=\"https://atmospherejs.com/percolate/momentum\" target=\"_blank\" rel=\"external\"><code>percolate:momentum</code> package</a> to plug a standard set of animations from the <a href=\"http://julian.com/research/velocity/\" target=\"_blank\" rel=\"external\"><code>velocity animation library</code></a> into such state changes.</p> <p>A good example of this is the editing state of the list from the Todos example app:</p> <pre class=\"highlight html\" data-language=\"html\">{{#momentum plugin=\"fade\"}}\n  {{#if instance.state.get 'editing'}}\n    &lt;form class=\"js-edit-form list-edit-form\"&gt;...&lt;/form&gt;\n  {{else}}\n    &lt;div class=\"nav-group\"&gt;...&lt;/div&gt;\n  {{/if}}\n{{/momentum}}\n</pre> <p>Momentum works by overriding the way that child HTML elements appear and disappear. In this case, when the list component goes into the <code>editing</code> state, the <code>.nav-group</code> disappears, and the <code>form</code> appears. Momentum takes care of the job of making sure that both items fade, making the change a lot clearer.</p> <h3 id=\"animating-attributes\">Animating changes to attributes</h3> <p>Another common type of animation is when an attribute of an element changes. For instance, a button may change color when you click on it. These type of animations are most easily achieved with <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\" target=\"_blank\" rel=\"external\">CSS transitions</a>. For example, we use a CSS transition for the hover state of links in the Todos example app:</p> <pre class=\"highlight less\" data-language=\"less\">a {\n  transition: all 200ms ease-in;\n  color: @color-secondary;\n  cursor: pointer;\n  text-decoration: none;\n\n  &amp;:hover { color: darken(@color-primary, 10%); }\n  &amp;:active { color: @color-well; }\n  &amp;:focus { outline:none; } //removes FF dotted outline\n}\n</pre> <h3 id=\"animating-page-changes\">Animating page changes</h3> <p>Finally, it’s common to animate when the user switches between routes of the application. Especially on mobile, this adds a sense of navigation to the app via positioning pages relative to each other. This can be done in a similar way to animating things appearing and disappearing (after all one page is appearing and other is disappearing), but there are some tricks that are worth being aware of.</p> <p>Let’s consider the case of the Todos example app. Here we do a similar thing to achieve animation between pages, by using Momentum in the main layout template:</p> <pre class=\"highlight html\" data-language=\"html\">{{#momentum plugin=\"fade\"}}\n  {{#if Template.subscriptionsReady}}\n    {{&gt; Template.dynamic template=main}}\n  {{else}}\n    {{&gt; App_loading}}\n  {{/if}}\n{{/momentum}}\n</pre> <p>This looks like it should just work, but there’s one problem: Sometimes the rendering system will prefer to simply change an existing component rather than switching it out and triggering the animation system. For example in the Todos example app, when you navigate between lists, by default Blaze will try to simply re-render the <code>Lists_show</code> component with a new <code>listId</code> (a changed argument) rather than pull the old list out and put in a new one. This is an optimization that is nice in principle, but that we want to avoid here for animation purposes. More specifically, we want to make sure the animation <em>only</em> happens when the <code>listId</code> changes and not on other reactive changes.</p> <p>To do so in this case, we can use a little trick (that is specific to Blaze, although similar techniques apply to other view layers) of using the fact that the <code>{{#each}}</code> helper diffs arrays of strings, and completely re-renders elements when they change.</p> <pre class=\"highlight html\" data-language=\"html\">&lt;template name=\"Lists_show_page\"&gt;\n  {{#each listId in listIdArray}}\n    {{&gt; Lists_show (listArgs listId)}}\n  {{else}}\n    {{&gt; App_notFound}}\n  {{/each}}\n&lt;/template&gt;\n</pre> <pre class=\"highlight js\" data-language=\"js\">Template.Lists_show_page.helpers({\n  // We use #each on an array of one item so that the \"list\" template is\n  // removed and a new copy is added when changing lists, which is\n  // important for animation purposes.\n  listIdArray() {\n    const instance = Template.instance();\n    const listId = instance.getListId();\n    return Lists.findOne(listId) ? [listId] : [];\n  }\n});\n</pre> </image><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/ui-ux.html\" class=\"_attribution-link\">https://guide.meteor.com/ui-ux.html</a>\n  </p>\n</div>\n","build-tool":"<h1 class=\"title-page\">Build System</h1> <div class=\"subtitle-page\">How to use Meteor's build system to compile your app.</div>    <p>The Meteor build system is the actual command line tool that you get when you install Meteor. You run it by typing the <code>meteor</code> command in your terminal, possibly followed by a set of arguments. Read the <a href=\"http://docs.meteor.com/#/full/commandline\" target=\"_blank\" rel=\"external\">docs about the command line tool</a> or type <code>meteor help</code> in your terminal to learn about all of the commands.</p> <h2 id=\"what-it-does\">What does it do?</h2> <p>The Meteor build tool is what compiles, runs, deploys, and publishes all of your Meteor apps and packages. It’s Meteor’s built-in solution to the problems also solved by tools like Grunt, Gulp, Webpack, Browserify, Nodemon, and many others, and uses many popular Node.js tools like Babel and UglifyJS internally to enable a seamless experience.</p> <h3 id=\"reload-on-file-change\">Reloads app on file change</h3> <p>When you run <code>meteor</code>, the tool starts up, and you should leave it running continuously while developing your app. The tool automatically detects any relevant file changes and recompiles the necessary changes, restarting your client or server environment if needed.</p> <h3 id=\"compiles-with-build-plugins\">Compiles files with build plugins</h3> <p>The main function of the Meteor build tool is to run “build plugins”. These plugins define different parts of your app build process. Meteor puts heavy emphasis on reducing or removing build configuration files, so you won’t see any large build process config files like you would in Gulp or Webpack. The Meteor build process, and <a href=\"structure#load-order\">file load order</a>, is configured almost entirely through adding and removing packages to your app and putting files in specially named directories. For example, to get all of the newest stable ES2015 JavaScript features in your app, you just add the <a href=\"http://docs.meteor.com/#/full/ecmascript\" target=\"_blank\" rel=\"external\"><code>ecmascript</code> package</a>. This package provides support for ES2015 modules, which gives you even more fine grained control over file load order using ES2015 <code>import</code> and <code>export</code>. As new Meteor releases add new features to this package you just get them for free.</p> <h3 id=\"concatenate-and-minify\">Combines and minifies code</h3> <p>Another important feature of the Meteor build tool is that it automatically concatenates and minifies all of your files in production mode. This is enabled by the <a href=\"https://atmospherejs.com/meteor/standard-minifiers-js\" target=\"_blank\" rel=\"external\"><code>standard-minifier-js</code></a> and <a href=\"https://atmospherejs.com/meteor/standard-minifiers-css\" target=\"_blank\" rel=\"external\"><code>standard-minifier-css</code></a> packages, which are in all Meteor apps by default. If you need different minification behavior, you can replace these packages. Below, we’ll talk about how to <a href=\"#postcss\">switch out a minifier to add PostCSS to your build process</a>.</p> <h3 id=\"dev-vs-prod\">Development vs. production</h3> <p>Running an app in development is all about fast iteration time. All kinds of different parts of your app are handled differently and instrumented to enable better reloads and debugging. In production, the app is reduced to just the necessary code, and functions like a regular Node.js app. Therefore, you shouldn’t run your app in production by running the <code>meteor</code> command. Instead, follow the directions in the <a href=\"deployment#custom-deployment\">production deployment article</a>.</p> <h2 id=\"javascript-transpilation\">JavaScript transpilation</h2> <p>These days, the landscape of JavaScript tools and frameworks is constantly shifting, and the language itself is evolving just as rapidly. It’s no longer reasonable to wait for web browsers to implement the language features you want to use. Most JavaScript development workflows rely on compiling code to work on the lowest common denominator of environments, while letting you use the newest features in development. Meteor has support for some of the most popular tools out of the box.</p> <h3 id=\"es2015\">ES2015+ (recommended)</h3> <p>The <code>ecmascript</code> package (which is installed into all new apps and packages by default, but can be removed), allows support for many ES2015 features. We recommend using it. You can read more about it in the <a href=\"code-style#ecmascript\">Code Style</a> article.</p> <h3 id=\"coffeescript\">CoffeeScript</h3> <p>While we recommend using ES2015 with the <code>ecmascript</code> package as the best development experience for Meteor, everything in the platform is 100% compatible with <a href=\"http://coffeescript.org/\" target=\"_blank\" rel=\"external\">CoffeeScript</a> and many people in the Meteor community prefer it.</p> <p>All you need to do to use CoffeeScript is add the right Meteor package:</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor add coffeescript\n</pre> <p>All code written in CoffeeScript compiles to JavaScript under the hood, and is completely compatible with any code in other packages that is written in JS or ES2015.</p> <h2 id=\"blaze-templates\">Templates and HTML</h2> <p>Since Meteor uses client-side rendering for your app’s UI, all of your HTML code, UI components, and templates need to be compiled to JavaScript. There are a few options at your disposal to write your UI code.</p> <h3 id=\"blaze-spacebars\">Blaze HTML templates</h3> <p>The aptly named <code>blaze-html-templates</code> package that comes with every new Meteor app by default compiles your <code>.html</code> files written using <a href=\"blaze#spacebars\">Spacebars</a> into Blaze-compatible JavaScript code. You can also add <code>blaze-html-templates</code> to any of your packages to compile template files located in the package.</p> <p><a href=\"blaze\">Read about how to use Blaze and Spacebars in the Blaze article.</a></p> <h3 id=\"blaze-jade\">Blaze Jade templates</h3> <p>If you don’t like the Spacebars syntax Meteor uses by default and want something more concise, you can give Jade a try by using <a href=\"https://atmospherejs.com/dalgard/jade\" target=\"_blank\" rel=\"external\"><code>dalgard:jade</code></a>. This package will compile all files in your app with the <code>.jade</code> extension into Blaze-compatible code, and can be used side-by-side with <code>blaze-html-templates</code> if you want to have some of your code in Spacebars and some in Jade.</p> <h3 id=\"react-jsx\">JSX for React</h3> <p>If you’re building your app’s UI with React, currently the most popular way to write your UI components involves JSX, an extension to JavaScript that allows you to type HTML tags that are converted to React DOM elements. JSX code is handled automatically by the <code>ecmascript</code> package.</p> <h4 id=\"react-other\">Other options for React</h4> <p>If you want to use React but don’t want to deal with JSX and prefer a more HTML-like syntax, there are a few community options available. One that stands out in particular is <a href=\"https://github.com/timbrandin/blaze-react\" target=\"_blank\" rel=\"external\">Blaze-React</a>, which simulates the entire Blaze API using React as a rendering engine.</p> <h3 id=\"angular-templates\">Angular templates</h3> <p>If you would like to write your UI in Angular, you will need to switch out Meteor’s Blaze template compiler which comes by default with the Angular one. Read about how to do this in the <a href=\"https://www.meteor.com/tutorials/angular/templates\" target=\"_blank\" rel=\"external\">Angular-Meteor tutorial</a>.</p> <h2 id=\"css\">CSS and CSS pre-processors</h2> <p>All your CSS style files will processed using Meteor’s default file load order rules along with any import statements and concatenated, and in a production build also minified. However, it’s no secret that writing plain CSS can often be a hassle as there’s no way to share common CSS code between different selectors or have a consistent color scheme between different elements. CSS compilers, or pre-processors, solve these issues by adding extra features on top of the CSS language like variables, mixins, math, and more, and in some cases also significantly change the syntax of CSS to be easier to read and write.</p> <h3 id=\"css-which-preprocessor\">Sass, Less, or Stylus?</h3> <p>There are three CSS pre-processors that are particularly popular right now:</p> <ol> <li><a href=\"http://sass-lang.com/\" target=\"_blank\" rel=\"external\">Sass</a></li> <li><a href=\"http://lesscss.org/\" target=\"_blank\" rel=\"external\">Less.js</a></li> <li><a href=\"https://learnboost.github.io/stylus/\" target=\"_blank\" rel=\"external\">Stylus</a></li> </ol> <p>They all have their pros and cons, and different people have different preferences, just like with JavaScript transpiled languages. The most popular one at the time of writing seems to be Sass with the SCSS syntax. Popular CSS frameworks like Bootstrap 4 and more are switching to Sass, and the C++ LibSass implementation appears to be faster than some of the other compilers available.</p> <p>CSS framework compatibility should be a primary concern when picking a pre-processor, because a framework written with Less won’t be compatible with one written in Sass.</p> <h3 id=\"css-source-vs-import\">Source vs. import files</h3> <p>An important feature shared by all of the available CSS pre-processors is the ability to import files. This lets you split your CSS into smaller pieces, and provides a lot of the same benefits that you get from JavaScript modules:</p> <ol> <li>You can control the load order of files by encoding dependencies through imports, since the load order of CSS matters.</li> <li>You can create reusable CSS “modules” that just have variables and mixins and don’t actually generate any CSS.</li> </ol> <p>In Meteor, each of your <code>.scss</code>, <code>.less</code>, or <code>.styl</code> source files will be one of two types: “source” or “import”.</p> <p>A “source” file is evaluated eagerly and adds its compiled form to the CSS of the app immediately.</p> <p>An “import” file is evaluated only if imported from some other file and can be used to share common mixins and variables between different CSS files in your app.</p> <p>Read the documentation for each package listed below to see how to indicate which files are source files vs. imports.</p> <h3 id=\"css-importing\">Importing styles</h3> <p>In all three Meteor supported CSS pre-processors you can import other style files from both relative and absolute paths in your app and from both npm and Meteor Atmosphere packages. </p> <pre class=\"highlight less\" data-language=\"less\">@import '../stylesheets/colors.less';   // a relative path\n@import '{}/imports/ui/stylesheets/button.less';   // absolute path with `{}` syntax\n</pre> <p>You can also import CSS from a JavaScript file if you have the <code>ecmascript</code> package installed:</p> <pre class=\"highlight js\" data-language=\"js\">import '../stylesheets/styles.css';\n</pre> <blockquote> <p>When importing CSS from a JavaScript file, that CSS is not bundled with the rest of the CSS processed with the Meteor Build tool, but instead is put in your app’s <code>&lt;head&gt;</code> tag inside <code>&lt;style&gt;...&lt;/style&gt;</code> after the main concatenated CSS file.</p> </blockquote> <p>Importing styles from an Atmosphere package using the <code>{}</code> package name syntax:</p> <pre class=\"highlight less\" data-language=\"less\">@import '{my-package:pretty-buttons}/buttons/styles.import.less';\n</pre> <blockquote> <p>CSS files in an Atmosphere package are declared with <a href=\"http://docs.meteor.com/#/full/pack_addFiles\" target=\"_blank\" rel=\"external\"><code>api.addFiles</code></a>, and therefore will be eagerly evaluated, and automatically bundled with all the other CSS in your app.</p> </blockquote> <p>Importing styles from an npm package using the <code>{}</code> syntax:</p> <pre class=\"highlight less\" data-language=\"less\">@import '{}/node_modules/npm-package-name/button.less';\n</pre> <pre class=\"highlight js\" data-language=\"js\">import 'npm-package-name/stylesheets/styles.css';\n</pre> <p>For more examples and details on importing styles and using <code>@imports</code> with packages see the <a href=\"https://guide.meteor.com/using-packages.html#npm-styles\">Using Packages</a> article.</p> <h3 id=\"sass\">Sass</h3> <p>The best Sass build plugin for Meteor is <a href=\"https://atmospherejs.com/fourseven/scss\" target=\"_blank\" rel=\"external\"><code>fourseven:scss</code></a>.</p> <h3 id=\"less\">Less</h3> <p>Less is maintained as a <a href=\"https://atmospherejs.com/meteor/less\" target=\"_blank\" rel=\"external\">Meteor core package called <code>less</code></a>.</p> <h3 id=\"stylus\">Stylus</h3> <p>Stylus is maintained as a <a href=\"https://atmospherejs.com/meteor/stylus\" target=\"_blank\" rel=\"external\">Meteor core package called <code>stylus</code></a>.</p> <h2 id=\"postcss\">PostCSS and Autoprefixer</h2> <p>In addition to CSS pre-processors like Sass, Less, and Stylus, there is now an ecosystem of CSS post-processors. Regardless of which CSS pre-processor you use, a post-processor can give you additional benefits like cross-browser compatibility.</p> <p>The most popular CSS post-processor right now is <a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"external\">PostCSS</a>, which supports a variety of plugins. <a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"external\">Autoprefixer</a> is perhaps the most useful plugin, since it enables you to stop worrying about browser prefixes and compatibility and write standards-compliant CSS. No more copying 5 different statements every time you want a CSS gradient - you can just write a standard gradient without any prefixes and Autoprefixer handles it for you.</p> <p>Currently, Meteor doesn’t have a separate build step for post-processing CSS, so the only way to integrate it is to build it into the minifier. Thankfully, there is a community package that has integrated PostCSS with plugin support into a replacement for Meteor’s standard minification package.</p> <h3 id=\"juliancwirko-postcss\">juliancwirko:postcss</h3> <p>Use the package <a href=\"https://atmospherejs.com/juliancwirko/postcss\" target=\"_blank\" rel=\"external\">juliancwirko:postcss</a> to your app to enable PostCSS for your Meteor app. To do so, we remove the standard CSS minifier and replace it with the postcss package:</p> <pre class=\"highlight oxygene\" data-language=\"oxygene\">meteor remove standard-minifier-css\nmeteor add juliancwirko:postcss\n</pre> <p>Then we can install any npm CSS processing packages that we’d like to use and reference them from a <code>postcss</code> section of our <code>package.json</code>. In the Todos example app, we use <code>autoprefixer</code> package to increase browser support:</p> <pre class=\"highlight json\" data-language=\"json\">{\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.3.1\"\n  },\n  \"postcss\": {\n    \"plugins\": {\n      \"autoprefixer\": {\"browsers\": [\"last 2 versions\"]}\n    }\n  }\n}\n</pre> <p>After doing the above, you’ll need to ensure you <code>npm install</code> and restart the <code>meteor</code> process running your app to make sure the PostCSS system has had a chance to set itself up.</p> <h2 id=\"minification\">Minification</h2> <p>The current best practice for deploying web production applications is to concatenate and minify all of your app assets. This lets you add all of the comments and whitespace you want to your source code, and split it into as many files as is necessary without worrying about app performance.</p> <p>Every Meteor app comes with production minification by default with the <code>standard-minifier-js</code> and <code>standard-minifier-css</code> packages. These minifiers go to some extra effort to do a good job - for example, Meteor automatically splits up your files if they get too big to maintain support for older versions of Internet Explorer which had a limit on the number of CSS rules per file.</p> <p>Minification usually happens when you <code>meteor deploy</code> or <code>meteor build</code> your app. If you have an error in production that you suspect is related to minification, you can run the minified version of your app locally with <code>meteor --production</code>.</p> <h2 id=\"build-plugins\">Build plugins</h2> <p>The most powerful feature of Meteor’s build system is the ability to define custom build plugins. If you find yourself writing scripts that mangle one type of file into another, merge multiple files, or something else, it’s likely that these scripts would be better implemented as a build plugin. The <code>ecmascript</code>, <code>templating</code>, and <code>coffeescript</code> packages are all implemented as build plugins, so you can replace them with your own versions if you want to!</p> <p><a href=\"https://docs.meteor.com/api/packagejs.html#build-plugin-api\" target=\"_blank\" rel=\"external\">Read the documentation about build plugins.</a></p> <h3 id=\"types-of-build-plugins\">Types of build plugins</h3> <p>There are three types of build plugins supported by Meteor today:</p> <ol> <li>Compiler plugin - compiles source files (LESS, CoffeeScript) into built output (JS, CSS, asset files, and HTML). Only one compiler plugin can handle a single file extension.</li> <li>Minifier plugin - compiles lots of built CSS or JS files into one or more minified files, for example <code>standard-minifiers</code>. Only one minifier can handle each of <code>js</code> and <code>css</code>.</li> <li>Linter plugin - processes any number of files, and can print lint errors. Multiple linters can process the same files.</li> </ol> <h3 id=\"writing-build-plugins\">Writing your own build plugin</h3> <p>Writing a build plugin is a very advanced task that only the most advanced Meteor users should get into. The best place to start is to copy a different plugin that is the most similar to what you are trying to do. For example, if you wanted to make a new CSS compiler plugin, you could fork the <code>less</code> package; if you wanted to make your own JS transpiler, you could fork <code>ecmascript</code>. A good example of a linter is the <code>jshint</code> package, and for a minifier you can look at <code>standard-minifiers-js</code> and <code>standard-minifiers-css</code>.</p> <h3 id=\"caching-build-plugins\">Caching</h3> <p>The best way to make your build plugin fast is to use caching anywhere you can - the best way to save time is to do less work! Check out the <a href=\"https://docs.meteor.com/api/packagejs.html#build-plugin-caching\" target=\"_blank\" rel=\"external\">documentation about CachingCompiler</a> to learn more. It’s used in all of the above examples, so you can see how to use it by looking at them.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/build-tool.html\" class=\"_attribution-link\">https://guide.meteor.com/build-tool.html</a>\n  </p>\n</div>\n","testing":"<h1 class=\"title-page\">Testing</h1> <div class=\"subtitle-page\">How to test your Meteor application</div>    <h2 id=\"introduction\">Introduction</h2> <p>Testing allows you to ensure your application works the way you think it does, especially as your codebase changes over time. If you have good tests, you can refactor and rewrite code with confidence. Tests are also the most concrete form of documentation of expected behavior, since other developers can figure out how to use your code by reading the tests.</p> <p>Automated testing is critical because it allows you to run a far greater set of tests much more often than you could manually, allowing you to catch regression errors immediately.</p> <h3 id=\"testing-types\">Types of tests</h3> <p>Entire books have been written on the subject of testing, so we will simply touch on some basics of testing here. The important thing to consider when writing a test is what part of the application you are trying to test, and how you are verifying the behavior works.</p> <ul> <li>\n<p><strong>Unit test</strong>: If you are testing one small module of your application, you are writing a unit test. You’ll need to <em>stub</em> and <em>mock</em> other modules that your module usually leverages in order to <em>isolate</em> each test. You’ll typically also need to <em>spy</em> on actions that the module takes to verify that they occur.</p> </li> <li>\n<p><strong>Integration test</strong>: If you are testing that multiple modules behave properly in concert, you are writing an integration test. Such tests are much more complex and may require running code both on the client and on the server to verify that communication across that divide is working as expected. Typically an integration test will still isolate a part of the entire application and directly verify results in code.</p> </li> <li>\n<p><strong>Acceptance test</strong>: If you want to write a test that can be run against any running version of your app and verifies at the browser level that the right things happen when you push the right buttons, then you are writing an acceptance test (sometimes called “end to end test”). Such tests typically try to hook into the application as little as possible, beyond perhaps setting up the right data to run a test against.</p> </li> <li>\n<p><strong>Load test</strong>: Finally you may wish to test that your application works under typical load or see how much load it can handle before it falls over. This is called a load test or stress test. Such tests can be challenging to set up and typically aren’t run often but are very important for confidence before a big production launch.</p> </li> </ul> <h3 id=\"challenges-with-meteor\">Challenges of testing in Meteor</h3> <p>In most ways, testing a Meteor app is no different from testing any other full stack JavaScript application. However, compared to more traditional backend or front-end focused frameworks, two factors can make testing a little more challenging:</p> <ul> <li>\n<p><strong>Client/server data</strong>: Meteor’s data system makes it simple to bridge the client-server gap and often allows you to build your application without thinking about how data moves around. It becomes critical to test that your code does actually work correctly across that gap. In traditional frameworks where you spend a lot of time thinking about interfaces between client and server you can often get away with testing both sides of the interface in isolation, but Meteor’s <a href=\"#test-modes\">full app test mode</a> makes it easy to write <a href=\"#full-app-integration-test\">integration tests</a> that cover the full stack. Another challenge here is creating test data in the client context; we’ll discuss ways to do this in the <a href=\"#generating-test-data\">section on generating test data</a> below.</p> </li> <li>\n<p><strong>Reactivity</strong>: Meteor’s reactivity system is “eventually consistent” in the sense that when you change a reactive input to the system, you’ll see the user interface change to reflect this some time later. This can be a challenge when testing, but there are some ways to wait until those changes happen to verify the results, for example <code>Tracker.afterFlush()</code>.</p> </li> </ul> <h2 id=\"test-modes\">The ‘meteor test’ command</h2> <p>The primary way to test your application in Meteor is the <code>meteor test</code> command.</p> <p>This loads your application in a special “test mode”. What this does is:</p> <ol> <li>\n<em>Doesn’t</em> eagerly load <em>any</em> of our application code as Meteor normally would.</li> <li>\n<em>Does</em> eagerly load any file in our application (including in <code>imports/</code> folders) that look like <code>*.test[s].*</code>, or <code>*.spec[s].*</code>\n</li> <li>Sets the <code>Meteor.isTest</code> flag to be true.</li> <li>Starts up the test driver package (<a href=\"#driver-packages\">see below</a>).</li> </ol> <blockquote> <p>The <a href=\"build-tool#what-it-does\">Meteor build tool</a> and the <code>meteor test</code> command ignore any files located in any <code>tests/</code> directory. This allows you to put tests in this directory that you can run using a test runner outside of Meteor’s built-in test tools and still not have those files loaded in your application. See Meteor’s <a href=\"structure#load-order\">default file load order</a> rules.</p> </blockquote> <p>What this means is that you can write tests in files with a certain filename pattern and know they’ll not be included in normal builds of your app. When your app runs in test mode, those files will be loaded (and nothing else will), and they can import the modules you want to test. As we’ll see this is ideal for <a href=\"#unit-testing\">unit tests</a> and <a href=\"#simple-integration-test\">simple integration tests</a>.</p> <p>Additionally, Meteor offers a “full application” test mode. You can run this with <code>meteor test --full-app</code>.</p> <p>This is similar to test mode, with key differences:</p> <ol> <li>It loads test files matching <code>*.app-test[s].*</code> and <code>*.app-spec[s].*</code>.</li> <li>It <strong>does</strong> eagerly load our application code as Meteor normally would.</li> <li>Sets the <code>Meteor.isAppTest</code> flag to be true (instead of the <code>Meteor.isTest</code> flag).</li> </ol> <p>This means that the entirety of your application (including for instance the web server and client side router) is loaded and will run as normal. This enables you to write much more <a href=\"#full-app-integration-test\">complex integration tests</a> and also load additional files for <a href=\"#acceptance-testing\">acceptance tests</a>.</p> <p>Note that there is another test command in the Meteor tool; <code>meteor test-packages</code> is a way of testing Atmosphere packages, which is discussed in the <a href=\"https://guide.meteor.com/writing-packages.html#testing\">Writing Packages article</a>.</p> <h3 id=\"driver-packages\">Driver packages</h3> <p>When you run a <code>meteor test</code> command, you must provide a <code>--driver-package</code> argument. A test driver is a mini-application that runs in place of your app and runs each of your defined tests, whilst reporting the results in some kind of user interface.</p> <p>There are two main kinds of test driver packages:</p> <ul> <li>\n<strong>Web reporters</strong>: Meteor applications that display a special test reporting web UI that you can view the test results in.</li> </ul> <p><img src=\"https://guide.meteor.com/images/mocha-test-results.png\"></p> <ul> <li>\n<strong>Console reporters</strong>: These run completely on the command-line and are primary used for automated testing like <a href=\"#ci\">continuous integration</a> (as we’ll see, typically PhantomJS is used to drive such tests).</li> </ul> <h3 id=\"mocha\">Recommended: Mocha</h3> <p>In this article, we’ll use the popular <a href=\"https://mochajs.org\" target=\"_blank\" rel=\"external\">Mocha</a> test runner alongside the <a href=\"http://chaijs.com\" target=\"_blank\" rel=\"external\">Chai</a> assertion library to test our application. In order to write and run tests in Mocha, we need to add an appropriate test driver package.</p> <p>There are several options. Choose the ones that makes sense for your app. You may depend on more than one and set up different test commands for different situations.</p> <ul> <li>\n<a href=\"https://atmospherejs.com/practicalmeteor/mocha\" target=\"_blank\" rel=\"external\">practicalmeteor:mocha</a> Runs client and server package or app tests and displays all results in a browser. Use <a href=\"https://www.npmjs.com/package/spacejam\" target=\"_blank\" rel=\"external\">spacejam</a> for command line / CI support.</li> <li>\n<a href=\"https://atmospherejs.com/dispatch/mocha-phantomjs\" target=\"_blank\" rel=\"external\">dispatch:mocha-phantomjs</a> Runs client and server package or app tests using PhantomJS and reports all results in the server console. Can be used for running tests on a CI server. Has a watch mode.</li> <li>\n<a href=\"https://atmospherejs.com/dispatch/mocha-browser\" target=\"_blank\" rel=\"external\">dispatch:mocha-browser</a> Runs client and server package or app tests with Mocha reporting client results in a web browser and server results in the server console. Has a watch mode.</li> <li>\n<a href=\"https://atmospherejs.com/dispatch/mocha\" target=\"_blank\" rel=\"external\">dispatch:mocha</a> Runs server-only package or app tests with Mocha and reports all results in the server console. Can be used for running tests on a CI server. Has a watch mode.</li> </ul> <p>These packages don’t do anything in development or production mode. They declare themselves <code>testOnly</code> so they are not even loaded outside of testing. But when our app is run in <a href=\"#test-modes\">test mode</a>, the test driver package takes over, executing test code on both the client and server, and rendering results to the browser.</p> <p>Here’s how we can add the <a href=\"https://atmospherejs.com/practicalmeteor/mocha\" target=\"_blank\" rel=\"external\"><code>practicalmeteor:mocha</code></a> package to our app:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add practicalmeteor:mocha\n</pre> <h2 id=\"test-files\">Test Files</h2> <p>Test files themselves (for example a file named <code>todos-item.test.js</code> or <code>routing.app-specs.coffee</code>) can register themselves to be run by the test driver in the usual way for that testing library. For Mocha, that’s by using <code>describe</code> and <code>it</code>:</p> <pre class=\"highlight js\" data-language=\"js\">describe('my module', function () {\n  it('does something that should be tested', function () {\n    // This code will be executed by the test driver when the app is started\n    // in the correct mode\n  })\n})\n</pre> <p>Note that arrow function use with Mocha <a href=\"http://mochajs.org/#arrow-functions\" target=\"_blank\" rel=\"external\">is discouraged</a>.</p> <h2 id=\"test-data\">Test data</h2> <p>When your app is run in test mode, it is initialized with a clean test database.</p> <p>If you are running a test that relies on using the database, and specifically the content of the database, you’ll need to perform some <em>setup</em> steps in your test to ensure the database is in the state you expect. There are some tools you can use to do this.</p> <p>To ensure the database is clean, the <a href=\"https://atmospherejs.com/xolvio/cleaner\" target=\"_blank\" rel=\"external\"><code>xolvio:cleaner</code></a> package is useful. You can use it to reset the database in a <code>beforeEach</code> block:</p> <pre class=\"highlight js\" data-language=\"js\">import { resetDatabase } from 'meteor/xolvio:cleaner';\n\ndescribe('my module', function () {\n  beforeEach(function () {\n    resetDatabase();\n  });\n});\n</pre> <p>This technique will only work on the server. If you need to reset the database from a client test, you can use a method to do so:</p> <pre class=\"highlight js\" data-language=\"js\">import { resetDatabase } from 'meteor/xolvio:cleaner';\n\n// NOTE: Before writing a method like this you'll want to double check\n// that this file is only going to be loaded in test mode!!\nMeteor.methods({\n  'test.resetDatabase': () =&gt; resetDatabase(),\n});\n\ndescribe('my module', function (done) {\n  beforeEach(function (done) {\n    // We need to wait until the method call is done before moving on, so we\n    // use Mocha's async mechanism (calling a done callback)\n    Meteor.call('test.resetDatabase', done);\n  });\n});\n</pre> <p>As we’ve placed the code above in a test file, it <em>will not</em> load in normal development or production mode (which would be an incredibly bad thing!). If you create a Atmosphere package with a similar feature, you should mark it as <code>testOnly</code> and it will similarly only load in test mode.</p> <h3 id=\"generating-test-data\">Generating test data</h3> <p>Often it’s sensible to create a set of data to run your test against. You can use standard <code>insert()</code> calls against your collections to do this, but often it’s easier to create <em>factories</em> which help encode random test data. A great package to use to do this is <a href=\"https://atmospherejs.com/dburles/factory\" target=\"_blank\" rel=\"external\"><code>dburles:factory</code></a>.</p> <p>In the <a href=\"https://github.com/meteor/todos\" target=\"_blank\" rel=\"external\">Todos</a> example app, we define a factory to describe how to create a test todo item, using the <a href=\"https://www.npmjs.com/package/faker\" target=\"_blank\" rel=\"external\"><code>faker</code></a> npm package:</p> <pre class=\"highlight js\" data-language=\"js\">import faker from 'faker';\n\nFactory.define('todo', Todos, {\n  listId: () =&gt; Factory.get('list'),\n  text: () =&gt; faker.lorem.sentence(),\n  createdAt: () =&gt; new Date(),\n});\n</pre> <p>To use the factory in a test, we simply call <code>Factory.create</code>:</p> <pre class=\"highlight js\" data-language=\"js\">// This creates a todo and a list in the database and returns the todo.\nconst todo = Factory.create('todo');\n\n// If we have a list already, we can pass in the id and avoid creating another:\nconst list = Factory.create('list');\nconst todoInList = Factory.create('todo', { listId: list._id });\n</pre> <h3 id=\"mocking-the-database\">Mocking the database</h3> <p>As <code>Factory.create</code> directly inserts documents into the collection that’s passed into the <code>Factory.define</code> function, it can be a problem to use it on the client. However there’s a neat isolation trick that you can do to replace the server-backed <code>Todos</code> <a href=\"collections#client-collections\">client collection</a> with a mocked out <a href=\"#collections.html#local-collections\">local collection</a>, that’s encoded in the <a href=\"https://atmospherejs.com/hwillson/stub-collections\" target=\"_blank\" rel=\"external\"><code>hwillson:stub-collections</code></a> package.</p> <pre class=\"highlight js\" data-language=\"js\">import StubCollections from 'meteor/hwillson:stub-collections';\nimport { Todos } from 'path/to/todos.js';\n\nStubCollections.stub(Todos);\n\n// Now Todos is stubbed to a simple local collection mock,\n//   so for instance on the client we can do:\nTodos.insert({ a: 'document' });\n\n// Restore the `Todos` collection\nStubCollections.restore();\n</pre> <p>In a Mocha test, it makes sense to use <code>stub-collections</code> in a <code>beforeEach</code>/<code>afterEach</code> block.</p> <h2 id=\"unit-testing\">Unit testing</h2> <p>Unit testing is the process of isolating a section of code and then testing that the internals of that section work as you expect. As <a href=\"structure\">we’ve split our code base up into ES2015 modules</a> it’s natural to test those modules one at a time.</p> <p>By isolating a module and simply testing its internal functionality, we can write tests that are <em>fast</em> and <em>accurate</em>—they can quickly tell you where a problem in your application lies. Note however that incomplete unit tests can often hide bugs because of the way they stub out dependencies. For that reason it’s useful to combine unit tests with slower (and perhaps less commonly run) integration and acceptance tests.</p> <h3 id=\"simple-blaze-unit-test\">A simple Blaze unit test</h3> <p>In the <a href=\"https://github.com/meteor/todos\" target=\"_blank\" rel=\"external\">Todos</a> example app, thanks to the fact that we’ve split our User Interface into <a href=\"ui-ux#components\">smart and reusable components</a>, it’s natural to want to unit test some of our reusable components (we’ll see below how to <a href=\"#simple-integration-test\">integration test</a> our smart components).</p> <p>To do so, we’ll use a very simple test helper that renders a Blaze component off-screen with a given data context. As we place it in <code>imports</code>, it won’t load in our app by in normal mode (as it’s not required anywhere).</p> <p><a href=\"https://github.com/meteor/todos/blob/master/imports/ui/test-helpers.js\" target=\"_blank\" rel=\"external\"><code>imports/ui/test-helpers.js</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">import { _ } from 'meteor/underscore';\nimport { Template } from 'meteor/templating';\nimport { Blaze } from 'meteor/blaze';\nimport { Tracker } from 'meteor/tracker';\n\nconst withDiv = function withDiv(callback) {\n  const el = document.createElement('div');\n  document.body.appendChild(el);\n  try {\n    callback(el);\n  } finally {\n    document.body.removeChild(el);\n  }\n};\n\nexport const withRenderedTemplate = function withRenderedTemplate(template, data, callback) {\n  withDiv((el) =&gt; {\n    const ourTemplate = _.isString(template) ? Template[template] : template;\n    Blaze.renderWithData(ourTemplate, data, el);\n    Tracker.flush();\n    callback(el);\n  });\n};\n</pre> <p>A simple example of a reusable component to test is the <a href=\"https://github.com/meteor/todos/blob/master/imports/ui/components/todos-item.html\" target=\"_blank\" rel=\"external\"><code>Todos_item</code></a> template. Here’s what a unit test looks like (you can see some <a href=\"https://github.com/meteor/todos/blob/master/imports/ui/components/client\" target=\"_blank\" rel=\"external\">others in the app repository</a>).</p> <p><a href=\"https://github.com/meteor/todos/blob/master/imports/ui/components/client/todos-item.tests.js\" target=\"_blank\" rel=\"external\"><code>imports/ui/components/client/todos-item.tests.js</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">/* eslint-env mocha */\n/* eslint-disable func-names, prefer-arrow-callback */\n\nimport { Factory } from 'meteor/factory';\nimport { chai } from 'meteor/practicalmeteor:chai';\nimport { Template } from 'meteor/templating';\nimport { $ } from 'meteor/jquery';\n\n\nimport { withRenderedTemplate } from '../../test-helpers.js';\nimport '../todos-item.js';\n\ndescribe('Todos_item', function () {\n  beforeEach(function () {\n    Template.registerHelper('_', key =&gt; key);\n  });\n\n  afterEach(function () {\n    Template.deregisterHelper('_');\n  });\n\n  it('renders correctly with simple data', function () {\n    const todo = Factory.build('todo', { checked: false });\n    const data = {\n      todo,\n      onEditingChange: () =&gt; 0,\n    };\n\n    withRenderedTemplate('Todos_item', data, el =&gt; {\n      chai.assert.equal($(el).find('input[type=text]').val(), todo.text);\n      chai.assert.equal($(el).find('.list-item.checked').length, 0);\n      chai.assert.equal($(el).find('.list-item.editing').length, 0);\n    });\n  });\n});\n</pre> <p>Of particular interest in this test is the following:</p> <h4 id=\"unit-test-importing\">Importing</h4> <p>When we run our app in test mode, only our test files will be eagerly loaded. In particular, this means that in order to use our templates, we need to import them! In this test, we import <code>todos-item.js</code>, which itself imports <code>todos.html</code> (yes, you do need to import the HTML files of your Blaze templates!)</p> <h4 id=\"unit-test-stubbing\">Stubbing</h4> <p>To be a unit test, we must stub out the dependencies of the module. In this case, thanks to the way we’ve isolated our code into a reusable component, there’s not much to do; principally we need to stub out the <code>{{_}}</code> helper that’s created by the <a href=\"ui-ux#i18n\"><code>tap:i18n</code></a> system. Note that we stub it out in a <code>beforeEach</code> and restore it the <code>afterEach</code>.</p> <p>If you’re testing code that makes use of globals, you’ll need to import those globals. For instance if you have a global <code>Todos</code> collection and are testing this file:</p> <pre class=\"highlight js\" data-language=\"js\">// logging.js\nexport function logTodos() {\n  console.log(Todos.findOne());\n}\n</pre> <p>then you’ll need to import <code>Todos</code> both in that file and in the test:</p> <pre class=\"highlight js\" data-language=\"js\">// logging.js\nimport { Todos } from './todos.js'\nexport function logTodos() {\n  console.log(Todos.findOne());\n}\n</pre> <pre class=\"highlight js\" data-language=\"js\">// logging.test.js\nimport { Todos } from './todos.js'\nTodos.findOne = () =&gt; {\n  return {text: \"write a guide\"}\n}\n\nimport { logTodos } from './logging.js'\n// then test logTodos\n...\n</pre> <h4 id=\"unit-test-data\">Creating data</h4> <p>We can use the <a href=\"#test-data\">Factory package’s</a> <code>.build()</code> API to create a test document without inserting it into any collection. As we’ve been careful not to call out to any collections directly in the reusable component, we can pass the built <code>todo</code> document directly into the template.</p> <h3 id=\"simple-react-unit-test\">A simple React unit test</h3> <p>We can also apply the same structure to testing React components and recommend the <a href=\"https://github.com/airbnb/enzyme\" target=\"_blank\" rel=\"external\">Enzyme</a> package, which simulates a React component’s environment and allows you to query it using CSS selectors. A larger suite of tests is available in the <a href=\"https://github.com/meteor/todos/tree/react\" target=\"_blank\" rel=\"external\">react branch of the Todos app</a>, but let’s look at a simple example for now:</p> <pre class=\"highlight js\" data-language=\"js\">import { Factory } from 'meteor/factory';\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport { chai } from 'meteor/practicalmeteor:chai';\nimport TodoItem from './TodoItem.jsx';\n\ndescribe('TodoItem', () =&gt; {\n  it('should render', () =&gt; {\n    const todo = Factory.build('todo', { text: 'testing', checked: false });\n    const item = shallow(&lt;TodoItem todo={todo} /&gt;);\n    chai.assert(item.hasClass('list-item'));\n    chai.assert(!item.hasClass('checked'));\n    chai.assert.equal(item.find('.editing').length, 0);\n    chai.assert.equal(item.find('input[type=\"text\"]').prop('defaultValue'), 'testing');\n  });\n});\n</pre> <p>The test is slightly simpler than the Blaze version above because the React sample app is not internationalized. Otherwise, it’s conceptually identical. We use Enzyme’s <code>shallow</code> function to render the <code>TodoItem</code> component, and the resulting object to query the document, and also to simulate user interactions. And here’s an example of simulating a user checking the todo item:</p> <pre class=\"highlight js\" data-language=\"js\">import { Factory } from 'meteor/factory';\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport { sinon } from 'meteor/practicalmeteor:sinon';\nimport TodoItem from './TodoItem.jsx';\nimport { setCheckedStatus } from '../../api/todos/methods.js';\n\ndescribe('TodoItem', () =&gt; {\n  it('should update status when checked', () =&gt; {\n    sinon.stub(setCheckedStatus, 'call');\n    const todo = Factory.create('todo', { checked: false });\n    const item = shallow(&lt;TodoItem todo={todo} /&gt;);\n\n    item.find('input[type=\"checkbox\"]').simulate('change', {\n      target: { checked: true },\n    });\n\n    sinon.assert.calledWith(setCheckedStatus.call, {\n      todoId: todo._id,\n      newCheckedStatus: true,\n    });\n\n    setCheckedStatus.call.restore();\n  });\n});\n</pre> <p>In this case, the <code>TodoItem</code> component calls a <a href=\"methods\">Meteor Method</a> <code>setCheckedStatus</code> when the user clicks, but this is a unit test so there’s no server running. So we stub it out using <a href=\"http://sinonjs.org\" target=\"_blank\" rel=\"external\">Sinon</a>. After we simulate the click, we verify that the stub was called with the correct arguments. Finally, we clean up the stub and restore the original method behavior.</p> <h3 id=\"running-unit-tests\">Running unit tests</h3> <p>To run the tests that our app defines, we run our app in <a href=\"#test-modes\">test mode</a>:</p> <pre class=\"highlight\" data-language=\"highlight\">meteor test --driver-package practicalmeteor:mocha\n</pre> <p>As we’ve defined a test file (<code>imports/todos/todos.tests.js</code>), what this means is that the file above will be eagerly loaded, adding the <code>'builds correctly from factory'</code> test to the Mocha registry.</p> <p>To run the tests, visit <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> in your browser. This kicks off <code>practicalmeteor:mocha</code>, which runs your tests both in the browser and on the server. It displays the test results in the browser in a Mocha test reporter:</p> <p><img src=\"https://guide.meteor.com/images/mocha-test-results.png\"></p> <p>Usually, while developing an application, it makes sense to run <code>meteor test</code> on a second port (say <code>3100</code>), while also running your main application in a separate process:</p> <pre class=\"highlight bash\" data-language=\"bash\"># in one terminal window\nmeteor\n\n# in another\nmeteor test --driver-package practicalmeteor:mocha --port 3100\n</pre> <p>Then you can open two browser windows to see the app in action while also ensuring that you don’t break any tests as you make changes.</p> <h3 id=\"isolation-techniques\">Isolation techniques</h3> <p>In the <a href=\"#simple-blaze-unit-test\">unit tests above</a> we saw a very limited example of how to isolate a module from the larger app. This is critical for proper unit testing. Some other utilities and techniques include:</p> <ul> <li>\n<p>The <a href=\"https://atmospherejs.com/velocity/meteor-stubs\" target=\"_blank\" rel=\"external\"><code>velocity:meteor-stubs</code></a> package, which creates simple stubs for most Meteor core objects.</p> </li> <li>\n<p>Alternatively, you can also use tools like <a href=\"http://sinonjs.org\" target=\"_blank\" rel=\"external\">Sinon</a> to stub things directly, as we’ll see for example in our <a href=\"#simple-integration-test\">simple integration test</a>.</p> </li> <li>\n<p>The <a href=\"https://atmospherejs.com/hwillson/stub-collections\" target=\"_blank\" rel=\"external\"><code>hwillson:stub-collections</code></a> package we mentioned <a href=\"#mocking-the-database\">above</a>.</p> </li> </ul> <p>There’s a lot of scope for better isolation and testing utilities.</p> <h4 id=\"testing-publications\">Testing publications</h4> <p>Using the <a href=\"https://atmospherejs.com/johanbrook/publication-collector\" target=\"_blank\" rel=\"external\"><code>johanbrook:publication-collector</code></a> package, you’re able to test individual publication’s output without needing to create a traditional subscription:</p> <pre class=\"highlight js\" data-language=\"js\">describe('lists.public', function () {\n  it('sends all public lists', function (done) {\n    // Set a user id that will be provided to the publish function as `this.userId`,\n    // in case you want to test authentication.\n    const collector = new PublicationCollector({userId: 'some-id'});\n\n    // Collect the data published from the `lists.public` publication.\n    collector.collect('lists.public', (collections) =&gt; {\n      // `collections` is a dictionary with collection names as keys,\n      // and their published documents as values in an array.\n      // Here, documents from the collection 'Lists' are published.\n      chai.assert.typeOf(collections.Lists, 'array');\n      chai.assert.equal(collections.Lists.length, 3);\n      done();\n    });\n  });\n});\n</pre> <p>Note that user documents – ones that you would normally query with <code>Meteor.users.find()</code> – will be available as the key <code>users</code> on the dictionary passed from a <code>PublicationCollector.collect()</code> call. See the <a href=\"https://github.com/johanbrook/meteor-publication-collector/blob/master/tests/publication-collector.test.js\" target=\"_blank\" rel=\"external\">tests</a> in the package for more details.</p> <h2 id=\"integration-testing\">Integration testing</h2> <p>An integration test is a test that crosses module boundaries. In the simplest case, this simply means something very similar to a unit test, where you perform your isolation around multiple modules, creating a non-singular “system under test”.</p> <p>Although conceptually different to unit tests, such tests typically do not need to be run any differently to unit tests and can use the same <a href=\"#running-unit-tests\"><code>meteor test</code> mode</a> and <a href=\"#isolation-techniques\">isolation techniques</a> as we use for unit tests.</p> <p>However, an integration test that crosses the client-server boundary of a Meteor application (where the modules under test cross that boundary) requires a different testing infrastructure, namely Meteor’s “full app” testing mode.</p> <p>Let’s take a look at example of both kinds of tests.</p> <h3 id=\"simple-integration-test\">Simple integration test</h3> <p>Our reusable components were a natural fit for a unit test; similarly our smart components tend to require an integration test to really be exercised properly, as the job of a smart component is to bring data together and supply it to a reusable component.</p> <p>In the <a href=\"https://github.com/meteor/todos\" target=\"_blank\" rel=\"external\">Todos</a> example app, we have an integration test for the <code>Lists_show_page</code> smart component. This test simply ensures that when the correct data is present in the database, the template renders correctly – that it is gathering the correct data as we expect. It isolates the rendering tree from the more complex data subscription part of the Meteor stack. If we wanted to test that the subscription side of things was working in concert with the smart component, we’d need to write a <a href=\"#full-app-integration-test\">full app integration test</a>.</p> <p><a href=\"https://github.com/meteor/todos/blob/master/imports/ui/components/client/todos-item.tests.js\" target=\"_blank\" rel=\"external\"><code>imports/ui/components/client/todos-item.tests.js</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">/* eslint-env mocha */\n/* eslint-disable func-names, prefer-arrow-callback */\n\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/factory';\nimport { Random } from 'meteor/random';\nimport { chai } from 'meteor/practicalmeteor:chai';\nimport StubCollections from 'meteor/hwillson:stub-collections';\nimport { Template } from 'meteor/templating';\nimport { _ } from 'meteor/underscore';\nimport { $ } from 'meteor/jquery';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport { sinon } from 'meteor/practicalmeteor:sinon';\n\n\nimport { withRenderedTemplate } from '../../test-helpers.js';\nimport '../lists-show-page.js';\n\nimport { Todos } from '../../../api/todos/todos.js';\nimport { Lists } from '../../../api/lists/lists.js';\n\ndescribe('Lists_show_page', function () {\n  const listId = Random.id();\n\n  beforeEach(function () {\n    StubCollections.stub([Todos, Lists]);\n    Template.registerHelper('_', key =&gt; key);\n    sinon.stub(FlowRouter, 'getParam', () =&gt; listId);\n    sinon.stub(Meteor, 'subscribe', () =&gt; ({\n      subscriptionId: 0,\n      ready: () =&gt; true,\n    }));\n  });\n\n  afterEach(function () {\n    StubCollections.restore();\n    Template.deregisterHelper('_');\n    FlowRouter.getParam.restore();\n    Meteor.subscribe.restore();\n  });\n\n  it('renders correctly with simple data', function () {\n    Factory.create('list', { _id: listId });\n    const timestamp = new Date();\n    const todos = _.times(3, i =&gt; Factory.create('todo', {\n      listId,\n      createdAt: new Date(timestamp - (3 - i)),\n    }));\n\n    withRenderedTemplate('Lists_show_page', {}, el =&gt; {\n      const todosText = todos.map(t =&gt; t.text).reverse();\n      const renderedText = $(el).find('.list-items input[type=text]')\n        .map((i, e) =&gt; $(e).val())\n        .toArray();\n      chai.assert.deepEqual(renderedText, todosText);\n    });\n  });\n});\n</pre> <p>Of particular interest in this test is the following:</p> <h4 id=\"simple-integration-test-importing\">Importing</h4> <p>As we’ll run this test in the same way that we did our unit test, we need to <code>import</code> the relevant modules under test in the same way that we <a href=\"#simple-integration-test-importing\">did in the unit test</a>.</p> <h4 id=\"simple-integration-test-stubbing\">Stubbing</h4> <p>As the system under test in our integration test has a larger surface area, we need to stub out a few more points of integration with the rest of the stack. Of particular interest here is our use of the <a href=\"#mocking-the-database\"><code>hwillson:stub-collections</code></a> package and of <a href=\"http://sinonjs.org\" target=\"_blank\" rel=\"external\">Sinon</a> to stub out Flow Router and our Subscription.</p> <h4 id=\"simple-integration-test-data\">Creating data</h4> <p>In this test, we used <a href=\"#test-data\">Factory package’s</a> <code>.create()</code> API, which inserts data into the real collection. However, as we’ve proxied all of the <code>Todos</code> and <code>Lists</code> collection methods onto a local collection (this is what <code>hwillson:stub-collections</code> is doing), we won’t run into any problems with trying to perform inserts from the client.</p> <p>This integration test can be run the exact same way as we ran <a href=\"#running-unit-tests\">unit tests above</a>.</p> <h3 id=\"full-app-integration-test\">Full-app integration test</h3> <p>In the <a href=\"https://github.com/meteor/todos\" target=\"_blank\" rel=\"external\">Todos</a> example application, we have a integration test which ensures that we see the full contents of a list when we route to it, which demonstrates a few techniques of integration tests.</p> <p><a href=\"https://github.com/meteor/todos/blob/master/imports/startup/client/routes.app-test.js\" target=\"_blank\" rel=\"external\"><code>imports/startup/client/routes.app-test.js</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">/* eslint-env mocha */\n/* eslint-disable func-names, prefer-arrow-callback */\n\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\nimport { DDP } from 'meteor/ddp-client';\nimport { FlowRouter } from 'meteor/kadira:flow-router';\nimport { assert } from 'meteor/practicalmeteor:chai';\nimport { Promise } from 'meteor/promise';\nimport { $ } from 'meteor/jquery';\n\nimport { denodeify } from '../../utils/denodeify';\nimport { generateData } from './../../api/generate-data.app-tests.js';\nimport { Lists } from '../../api/lists/lists.js';\nimport { Todos } from '../../api/todos/todos.js';\n\n\n// Utility -- returns a promise which resolves when all subscriptions are done\nconst waitForSubscriptions = () =&gt; new Promise(resolve =&gt; {\n  const poll = Meteor.setInterval(() =&gt; {\n    if (DDP._allSubscriptionsReady()) {\n      Meteor.clearInterval(poll);\n      resolve();\n    }\n  }, 200);\n});\n\n// Tracker.afterFlush runs code when all consequent of a tracker based change\n//   (such as a route change) have occured. This makes it a promise.\nconst afterFlushPromise = denodeify(Tracker.afterFlush);\n\nif (Meteor.isClient) {\n  describe('data available when routed', () =&gt; {\n    // First, ensure the data that we expect is loaded on the server\n    //   Then, route the app to the homepage\n    beforeEach(() =&gt; generateData()\n      .then(() =&gt; FlowRouter.go('/'))\n      .then(waitForSubscriptions)\n    );\n\n    describe('when logged out', () =&gt; {\n      it('has all public lists at homepage', () =&gt; {\n        assert.equal(Lists.find().count(), 3);\n      });\n\n      it('renders the correct list when routed to', () =&gt; {\n        const list = Lists.findOne();\n        FlowRouter.go('Lists.show', { _id: list._id });\n\n        return afterFlushPromise()\n          .then(waitForSubscriptions)\n          .then(() =&gt; {\n            assert.equal($('.title-wrapper').html(), list.name);\n            assert.equal(Todos.find({ listId: list._id }).count(), 3);\n          });\n      });\n    });\n  });\n}\n</pre> <p>Of note here:</p> <ul> <li>\n<p>Before running, each test sets up the data it needs using the <code>generateData</code> helper (see <a href=\"#creating-integration-test-data\">the section on creating integration test data</a> for more detail) then goes to the homepage.</p> </li> <li>\n<p>Although Flow Router doesn’t take a done callback, we can use <code>Tracker.afterFlush</code> to wait for all its reactive consequences to occur.</p> </li> <li>\n<p>Here we wrote a little utility (which could be abstracted into a general package) to wait for all the subscriptions which are created by the route change (the <code>todos.inList</code> subscription in this case) to become ready before checking their data.</p> </li> </ul> <h3 id=\"running-full-app-tests\">Running full-app tests</h3> <p>To run the <a href=\"#test-modes\">full-app tests</a> in our application, we run:</p> <pre class=\"highlight\" data-language=\"highlight\">meteor test --full-app --driver-package practicalmeteor:mocha\n</pre> <p>When we connect to the test instance in a browser, we want to render a testing UI rather than our app UI, so the <code>mocha-web-reporter</code> package will hide any UI of our application and overlay it with its own. However the app continues to behave as normal, so we are able to route around and check the correct data is loaded.</p> <h3 id=\"creating-integration-test-data\">Creating data</h3> <p>To create test data in full-app test mode, it usually makes sense to create some special test methods which we can call from the client side. Usually when testing a full app, we want to make sure the publications are sending through the correct data (as we do in this test), and so it’s not sufficient to stub out the collections and place synthetic data in them. Instead we’ll want to actually create data on the server and let it be published.</p> <p>Similar to the way we cleared the database using a method in the <code>beforeEach</code> in the <a href=\"#test-data\">test data</a> section above, we can call a method to do that before running our tests. In the case of our routing tests, we’ve used a file called <a href=\"https://github.com/meteor/todos/blob/master/imports/api/generate-data.app-tests.js\" target=\"_blank\" rel=\"external\"><code>imports/api/generate-data.app-tests.js</code></a> which defines this method (and will only be loaded in full app test mode, so is not available in general!):</p> <pre class=\"highlight js\" data-language=\"js\">// This file will be auto-imported in the app-test context,\n// ensuring the method is always available\n\nimport { Meteor } from 'meteor/meteor';\nimport { Factory } from 'meteor/factory';\nimport { resetDatabase } from 'meteor/xolvio:cleaner';\nimport { Random } from 'meteor/random';\nimport { _ } from 'meteor/underscore';\n\nimport { denodeify } from '../utils/denodeify';\n\nconst createList = (userId) =&gt; {\n  const list = Factory.create('list', { userId });\n  _.times(3, () =&gt; Factory.create('todo', { listId: list._id }));\n  return list;\n};\n\n// Remember to double check this is a test-only file before\n// adding a method like this!\nMeteor.methods({\n  generateFixtures() {\n    resetDatabase();\n\n    // create 3 public lists\n    _.times(3, () =&gt; createList());\n\n    // create 3 private lists\n    _.times(3, () =&gt; createList(Random.id()));\n  },\n});\n\nlet generateData;\nif (Meteor.isClient) {\n  // Create a second connection to the server to use to call\n  // test data methods. We do this so there's no contention\n  // with the currently tested user's connection.\n  const testConnection = Meteor.connect(Meteor.absoluteUrl());\n\n  generateData = denodeify((cb) =&gt; {\n    testConnection.call('generateFixtures', cb);\n  });\n}\n\nexport { generateData };\n</pre> <p>Note that we’ve exported a client-side symbol <code>generateData</code> which is a promisified version of the method call, which makes it simpler to use this sequentially in tests.</p> <p>Also of note is the way we use a second DDP connection to the server in order to send these test “control” method calls.</p> <h2 id=\"acceptance-testing\">Acceptance testing</h2> <p>Acceptance testing is the process of taking an unmodified version of our application and testing it from the “outside” to make sure it behaves in a way we expect. Typically if an app passes acceptance tests, we have done our job properly from a product perspective.</p> <p>As acceptance tests test the behavior of the application in a full browser context in a generic way, there are a range of tools that you can use to specify and run such tests. In this guide we’ll demonstrate using <a href=\"https://chimp.readme.io\" target=\"_blank\" rel=\"external\">Chimp</a>, an acceptance testing tool with a few neat Meteor-specific features that makes it easy to use.</p> <p>Chimp requires node version 4 or 5. You can check your node version by running:</p> <pre class=\"highlight sh\" data-language=\"sh\">node -v\n</pre> <p>You can install version 4 from <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">nodejs.org</a> or version 5 with <code>brew install node</code>. Then we can install the Chimp tool globally using:</p> <pre class=\"highlight sh\" data-language=\"sh\">npm install --global chimp\n</pre> <blockquote> <p>Note that you can also install Chimp as a <code>devDependency</code> in your <code>package.json</code> but you may run into problems deploying your application as it includes binary dependencies. You can avoid such problems by running <code>meteor npm prune</code> to remove non-production dependencies before deploying.</p> </blockquote> <p>Chimp has a variety of options for setting it up, but we can add some npm scripts which will run the currently tests we define in Chimp’s two main modes. We can add them to our <code>package.json</code>:</p> <pre class=\"highlight json\" data-language=\"json\">{\n  \"scripts\": {\n    \"chimp-watch\": \"chimp --ddp=http://localhost:3000 --watch --mocha --path=tests\",\n    \"chimp-test\": \"chimp --mocha --path=tests\"\n  }\n}\n</pre> <p>Chimp will now look in the <code>tests/</code> directory (otherwise ignored by the Meteor tool) for files in which you define acceptance tests. In the <a href=\"https://github.com/meteor/todos\" target=\"_blank\" rel=\"external\">Todos</a> example app, we define a simple test that ensures we can click the “create list” button.</p> <p><a href=\"https://github.com/meteor/todos/blob/master/tests/lists.js\" target=\"_blank\" rel=\"external\"><code>tests/lists.js</code></a>:</p> <pre class=\"highlight js\" data-language=\"js\">/* eslint-env mocha */\n/* eslint-disable func-names, prefer-arrow-callback */\n\n// These are Chimp globals\n/* globals browser assert server */\n\nfunction countLists() {\n  browser.waitForExist('.list-todo');\n  const elements = browser.elements('.list-todo');\n  return elements.value.length;\n};\n\ndescribe('list ui', function () {\n  beforeEach(function () {\n    browser.url('http://localhost:3000');\n    server.call('generateFixtures');\n  });\n\n  it('can create a list @watch', function () {\n    const initialCount = countLists();\n\n    browser.click('.js-new-list');\n\n    assert.equal(countLists(), initialCount + 1);\n  });\n});\n</pre> <h3 id=\"running-acceptance-tests\">Running acceptance tests</h3> <p>To run acceptance tests, we simply need to start our Meteor app as usual, and point Chimp at it.</p> <p>In one terminal, we can do:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor\n</pre> <p>In another:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor npm run chimp-watch\n</pre> <p>The <code>chimp-watch</code> command will then run the test in a browser, and continue to re-run it as we change the test or the application. (Note that the test assumes we are running the app on port <code>3000</code>).</p> <p>Thus it’s a good way to develop the test—this is why chimp has a feature where we mark tests with a <code>@watch</code> in the name to call out the tests we want to work on (running our entire acceptance test suite can be time consuming in a large application).</p> <p>The <code>chimp-test</code> command will run all of the tests <em>once only</em> and is good for testing that our suite passes, either as a manual step, or as part of a <a href=\"#ci\">continuous integration</a> process.</p> <h3 id=\"creating-acceptance-test-data\">Creating data</h3> <p>Although we can run the acceptance test against our “pure” Meteor app, as we’ve done above, it often makes sense to start our meteor server with a special test driver, <code>tmeasday:acceptance-test-driver</code>. (You’ll need to <code>meteor add</code> it to your app):</p> <pre class=\"highlight\" data-language=\"highlight\">meteor test --full-app --driver-package tmeasday:acceptance-test-driver\n</pre> <p>The advantage of running our acceptance test suite pointed at an app that runs in full app test mode is that all of the <a href=\"#creating-integration-test-data\">data generating methods</a> that we’ve created remain available. Otherwise the <code>acceptance-test-driver</code> does nothing.</p> <p>In Chimp tests, you have a DDP connection to the server available on the <code>server</code> variable. You can thus use <code>server.call()</code> (which is wrapped to be synchronous in Chimp tests) to call these methods. This is a convenient way to share data preparation code between acceptance and integration tests.</p> <h2 id=\"ci\">Continuous Integration</h2> <p>Continuous integration testing is the process of running tests on every commit of your project.</p> <p>There are two principal ways to do it: on the developer’s machine before allowing them to push code to the central repository, and on a dedicated CI server after each push. Both techniques are useful, and both require running tests in a commandline-only fashion.</p> <h3 id=\"command-line\">Command line</h3> <p>We’ve seen one example of running tests on the command line, using our <code>meteor npm run chimp-test</code> mode.</p> <p>We can also use a command-line driver for Mocha <a href=\"http://atmospherejs.com/dispatch/mocha-phantomjs\" target=\"_blank\" rel=\"external\"><code>dispatch:mocha-phantomjs</code></a> to run our standard tests on the command line.</p> <p>Adding and using the package is straightforward:</p> <pre class=\"highlight bash\" data-language=\"bash\">meteor add dispatch:mocha-phantomjs\nmeteor test --once --driver-package dispatch:mocha-phantomjs\n</pre> <p>(The <code>--once</code> argument ensures the Meteor process stops once the test is done).</p> <p>We can also add that command to our <code>package.json</code> as a <code>test</code> script:</p> <pre class=\"highlight json\" data-language=\"json\">{\n  \"scripts\": {\n    \"test\": \"meteor test --once --driver-package dispatch:mocha-phantomjs\"\n  }\n}\n</pre> <p>Now we can run the tests with <code>meteor npm test</code>.</p> <h3 id=\"using-circle-ci\">CircleCI</h3> <p><a href=\"https://circleci.com\" target=\"_blank\" rel=\"external\">CircleCI</a> is a great continuous integration service that allows us to run (possibly time consuming) tests on every push to a repository like GitHub. To use it with the commandline test we’ve defined above, we can follow their standard <a href=\"https://circleci.com/docs/getting-started\" target=\"_blank\" rel=\"external\">getting started tutorial</a> and use a <code>circle.yml</code> file similar to this:</p> <pre class=\"highlight less\" data-language=\"less\">machine:\n  node:\n    version: 0.10.43\ndependencies:\n  override:\n    - curl https://install.meteor.com | /bin/sh\n    - npm install\ncheckout:\n  post:\n    - git submodule update --init\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/testing.html\" class=\"_attribution-link\">https://guide.meteor.com/testing.html</a>\n  </p>\n</div>\n","mobile":"<h1 class=\"title-page\">Mobile</h1> <div class=\"subtitle-page\">How to build mobile apps using Meteor's Cordova integration.</div>    <p>After reading this guide, you’ll know:</p> <ol> <li>What Cordova is, and how Meteor integrates with it to build mobile apps from a single codebase</li> <li>How to set up your local machine for mobile development</li> <li>How to run and debug your app on a mobile device or simulator/emulator</li> <li>How hot code push allows you to update your mobile app’s code without reinstalling the app on your device or submitting a new version to the store</li> <li>How to use Cordova plugins to take advantage of native device features</li> <li>How to access local files and remote resources from your app</li> <li>What you can do to create a good mobile user experience for your app</li> <li>How to configure your app to use your own app icon, launch screen, and set other preferences</li> <li>How to build your project and submit your mobile app to the store</li> </ol> <h2 id=\"introduction\">Meteor Cordova integration</h2> <p>Meteor integrates with <a href=\"https://cordova.apache.org\" target=\"_blank\" rel=\"external\">Cordova</a>, a well-known Apache open source project, to build mobile apps from the same codebase you use to create regular web apps. With the Cordova integration in Meteor, you can take your existing app and run it on an iOS or Android device with a few simple commands.</p> <p>A Cordova app is a web app written using HTML, CSS, and JavaScript as usual, but it runs in a <a href=\"#what-environment\">web view</a> embedded in a native app instead of in a stand-alone mobile browser. An important benefit of packaging up your web app as a Cordova app is that all your assets are bundled with the app. This ensures your app will load faster than a web app running on a remote server could, which can make a huge difference for users on slow mobile connections. Another feature of the Cordova integration in Meteor is support for <a href=\"#hot-code-push\">hot code push</a>, which allows you to update your app on users’ devices without going through the usual app store review process.</p> <p>Cordova also opens up access to certain native device features through a <a href=\"#cordova-plugins\">plugin architecture</a>. Plugins allow you to use features not usually available to web apps, such as accessing the device camera or the local file system, interact with barcode or NFC readers, etc.</p> <p>Because a Cordova app is a web app, this means you use standard web elements to create your user interface instead of relying on platform-specific native UI components. Creating a good mobile user experience is an art in itself, but is fortunately helped by the availability of various frameworks and libraries.</p> <blockquote> <h4 id=\"what-about-phonegap\">What about PhoneGap?</h4> <p>You may have heard of PhoneGap, and wonder how it relates to Cordova. PhoneGap is a product name used by Adobe since 2011, when they acquired a company called Nitobi, the original creators of what is now the Cordova project. When Adobe donated the code to Apache in 2012 to ensure a more open governance model, the open source project was rebranded as Cordova. PhoneGap is now one of the distributions of Cordova, on a par with other distributions like Ionic, Telerik, Monaca, or Intel XDK. These distributions mainly differ in tooling and integration with cloud services, but they share the underlying platform and plugins. Meteor could also be considered a Cordova distribution.</p> </blockquote> <h3 id=\"cordova-integration-in-meteor\">How does it work?</h3> <p>With Meteor, there is no need to install Cordova yourself, or use the <code>cordova</code> command directly. Cordova project creation happens as part of the Meteor run and build commands, and the project itself is considered a build artifact (stored in <code>.meteor/local/cordova-build</code> in your app directory) that can be deleted and recreated at any time. Instead of having you modify Cordova’s <code>config.xml</code> file, Meteor reads a <a href=\"http://docs.meteor.com/api/mobile-config.html\" target=\"_blank\" rel=\"external\"><code>mobile-config.js</code></a> file in the root of your app directory and uses the settings specified there to configure the generated project.</p> <p>Cordova apps don’t load web content over the network, but rely on locally stored HTML, CSS, JavaScript code and other assets. While Cordova by default uses <code>file://</code> URLs to load the app, Meteor includes an integrated file serving mechanism on the device to support both bundling the initial assets and incrementally updating your app through <a href=\"#hot-code-push\">hot code push</a>. This means your app will be served from <code>http://localhost:&lt;port&gt;</code>, which also has the benefit that web views consider it a <a href=\"https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\" target=\"_blank\" rel=\"external\">secure origin</a> and won’t block any sensitive features (which they increasingly do for <code>file://</code> URLs).</p> <blockquote> <h4 id=\"what-port\">What port will your app be served from?</h4> <p>While Meteor uses a built-in request interception mechanism on Android, supporting <code>WKWebView</code> on iOS requires running a real embedded web server instead. That means the local web server needs a port to bind to, and we can’t simply use a fixed port because that might lead to conflicts when running multiple Meteor Cordova apps on the same device. The easiest solution may seem to use a randomized port, but this has a serious drawback: if the port changes each time you run the app, web features that depend on the origin (like caching, localStorage, IndexedDB) won’t persist between runs, and you also wouldn’t be able to specify a stable OAuth redirect URL. So instead we now pick a port from a predetermined range (12000-13000), calculated based on the <code>appId</code>, a unique identifier that is part of every Meteor project. That ensures the same app will always use the same port, but it hopefully avoids collisions betweens apps as much as possible. (There is still a theoretical possibility of the selected port being in use. Currently, starting the local server will fail in that case.)</p> </blockquote> <h3 id=\"what-environment\">The runtime environment</h3> <p>Cordova apps run in a web view. A web view is basically a browser without the browser UI. Browser engines differ in their underlying implementation and in what web standards they support. As a result, what web view your app runs on can have a huge impact on your app’s performance and on the features you get to use. (If you want to know what features are supported on what browsers and versions, <a href=\"http://caniuse.com\" target=\"_blank\" rel=\"external\">caniuse.com</a> is a great resource.)</p> <h4 id=\"what-environment-ios\">iOS</h4> <p>The browser on iOS is Safari, which is based on the open source WebKit project, but tends to be somewhat slow in enabling new features. Because they use the same underlying framework, the features available to a web view match the features supported by Safari on the iOS release you’re running on.</p> <p>Meteor uses WKWebView by default, on both iOS 8 and iOS 9. WKWebView is part of the modern WebKit API introduced in iOS 8, and replaces UIWebView, which has been in iOS from the beginning. Its main benefit is that it runs in a separate process, allowing for much higher JavaScript performance (3–4x in some benchmarks!) because it can take advantage of Just-In-Time compilation (which UIWebView, running in the same process as your app, cannot do for security reasons).</p> <blockquote> <p>You may be aware that WKWebView on iOS 8 doesn’t allow files to be loaded from the local filesystem. This is problematic for standard Cordova apps, because these use <code>file://</code> URLs to load the app. But because the Meteor integration serves assets from <code>localhost</code>, WKWebView works fine on both iOS 8 and iOS 9.</p> </blockquote> <h4 id=\"what-environment-android\">Android</h4> <p>The web view situation on Android is a little more complicated. On older Android versions, the included web view is known to be rather slow and buggy. That improved somewhat with Android 4.4, which includes a web view based on Chromium, the open source project behind the Chrome browser.</p> <p>Android 5.0 also comes with a web view based on Chromium known as the <a href=\"https://play.google.com/store/apps/details?id=com.google.android.webview&amp;hl=en\" target=\"_blank\" rel=\"external\">Android System Web View</a>, but a big improvement is that it can be automatically updated through the Play Store. This means updates to the web view happen more regularly and are independent of OS updates.</p> <p>This threatens to leave many older Android devices behind however, because they would be stuck on the web view included with the OS and are often unable to update to newer OS versions. Fortunately, the <a href=\"https://crosswalk-project.org/documentation/cordova.html\" target=\"_blank\" rel=\"external\">Crosswalk plugin</a> allows you to embed Chromium in your app and use it instead of the web view that comes with the OS on any of the Android versions supported by Cordova (currently Android 4.0 or higher). Embedding Chromium means the size of your APK will grow by about 20MB, but the benefit is that you can rely on a consistent web view with considerably better performance and enhanced standards support.</p> <p>You can add the Crosswalk plugin to your app with <code>meteor add crosswalk</code>.</p> <blockquote> <p>If you receive an error message trying to run the app on your device after adding or removing the Crosswalk plugin, you may have to remove the existing app from your device first.</p> </blockquote> <h3 id=\"adding-platforms\">Adding Cordova platforms</h3> <p>Every Meteor project targets a set of platforms. Platforms can be added to a Meteor project with <code>meteor add-platform</code>.</p> <ul> <li>\n<code>meteor add-platform ios</code> adds the iOS platform to a project.</li> <li>\n<code>meteor add-platform android</code> adds the Android platform to a project.</li> <li>\n<code>meteor remove-platform ios android</code> will remove the iOS and Android platforms from a project.</li> <li>\n<code>meteor list-platforms</code> lists the platforms targeted by your project.</li> </ul> <p>If your local machine does not (yet) fulfill the <a href=\"#installing-prerequisites\">prerequisites</a> for building apps for a mobile platform, an error message with a list of missing requirements is printed (but the platform is still added). You will have to make sure these requirements are fulfilled before you’re able to build and run mobile apps from your machine.</p> <h2 id=\"installing-prerequisites\">Installing prerequisites</h2> <p>In order to build and run mobile apps, you will need to install some prerequisites on your local machine.</p> <h3 id=\"installing-prerequisites-ios\">iOS</h3> <p>In order to build and run iOS apps, you will need a Mac with Xcode 7.2 or higher installed.</p> <h4>Installing Xcode from the App Store</h4> <p><code>meteor add-platform ios</code> will open a dialog asking you whether you want to install the ‘command line developer tools’. Do not select ‘Install’ here, because a full Xcode installation is required to build and run iOS apps. Instead, selecting ‘Get Xcode’ will open the Mac App Store page for Xcode and you can click install there. (Alternatively, you can open the Mac App Store and search for ‘Xcode’ to get to that same page.)</p> <h4>Accepting the license agreement</h4> <p>After the download and installation completes, you will need to accept the license agreement. If you start Xcode for the first time, a dialog will pop up where you can read the license agreement and accept it. You can close Xcode directly afterwards.</p> <p>A shortcut is to run <code>sudo xcodebuild -license accept</code> from the command line. (You will still be expected to have read and understood the <a href=\"https://www.apple.com/legal/sla/docs/xcode.pdf\" target=\"_blank\" rel=\"external\">Xcode and Apple SDKs Agreement</a>).</p> <h3 id=\"installing-prerequisites-android\">Android</h3> <p>In order to build and run Android apps, you will need to:</p> <ul> <li>Install a Java Development Kit (JDK)</li> <li>Install the Android SDK and download the required tools, platforms, and other components (which is done most easily by installing Android Studio)</li> <li>Set <code>ANDROID_HOME</code> and add the tools directories to your <code>PATH</code>\n</li> <li>Optionally: Create an Android Virtual Device to run apps on an emulator</li> </ul> <h4>Installing the Java Development Kit (JDK)</h4> <blockquote> <p>On Linux, you may want to use your distribution’s package manager to install a JDK; on Ubuntu, you can even use <a href=\"#ubuntu-make\">Ubuntu Make</a> to install Android Studio and all dependencies at the same time.</p> </blockquote> <ol> <li>Open the <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">Oracle Java website</a>, and select the Java Platform (JDK)</li> <li>Check the box to accept the license agreement, and select the correct download for your platform</li> <li>After it has downloaded, launch the installer, and complete the installation steps</li> </ol> <h4>Installing Android Studio</h4> <p>The easiest way to get a working Android development environment is by installing <a href=\"http://developer.android.com/sdk/index.html\" target=\"_blank\" rel=\"external\">Android Studio</a>, which offers a setup wizard on first launch that installs the Android SDK for you, and downloads a default set of tools, platforms, and other components that you will need to start developing.</p> <p>Please refer to <a href=\"http://developer.android.com/sdk/installing/index.html?pkg=studio\" target=\"_blank\" rel=\"external\">the Android Studio installation instructions</a> for more details on the exact steps to follow.</p> <blockquote> <p>There is no need to use Android Studio if you prefer a stand-alone install. Just make sure you install the most recent versions of the <a href=\"http://developer.android.com/sdk/index.html#Other\" target=\"_blank\" rel=\"external\">Android SDK Tools</a> and download the required <a href=\"http://developer.android.com/sdk/installing/adding-packages.html\" target=\"_blank\" rel=\"external\">additional packages</a> yourself using the <a href=\"http://developer.android.com/tools/help/sdk-manager.html\" target=\"_blank\" rel=\"external\">Android SDK Manager</a>. Make sure to select SDK Platform API 23, because that is what the version of Cordova we bundle requires.</p> </blockquote> <h4 id=\"ubuntu-make\">Using Ubuntu Make</h4> <p>If you’re running Ubuntu, the easiest way to install both a Java Development Kit and Android Studio is by using <a href=\"https://wiki.ubuntu.com/ubuntu-make\" target=\"_blank\" rel=\"external\">Ubuntu Make</a>, a command line tool that sets up development environments and dependencies for you.</p> <p>If you’re on Ubuntu 14.04 LTS, you’ll have to add the Ubuntu Make ppa first:</p> <ul> <li><code>sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make</code></li> <li><code>sudo apt-get update</code></li> </ul> <p>Then, you can install Ubuntu Make itself:</p> <ul> <li><code>sudo apt-get install ubuntu-make</code></li> </ul> <p>And finally you use Ubuntu Make to install Android Studio and all dependencies:</p> <ul> <li><code>umake android</code></li> </ul> <h4>Setting <code>ANDROID_HOME</code> and adding the tools directories to your <code>PATH</code>\n</h4> <p>Cordova will detect an Android SDK installed in various standard locations automatically, but in order to use tools like <code>android</code> or <code>adb</code> from the terminal, you will have to make some changes to your environment.</p> <h5>Mac</h5> <ul> <li>Set the <code>ANDROID_HOME</code> environment variable to the location of the Android SDK. If you’ve used the Android Studio setup wizard, it should be installed in <code>~/Library/Android/sdk</code> by default.</li> <li>Add <code>$ANDROID_HOME/tools</code>, and <code>$ANDROID_HOME/platform-tools</code> to your <code>PATH</code>\n</li> </ul> <p>You can do this by adding these lines to your <code>~/.bash_profile</code> file (or the equivalent file for your shell environment, like <code>~/.zshrc</code>):<br><pre class=\"highlight bash\" data-language=\"bash\"># Android\nexport ANDROID_HOME=\"/Users/&lt;username&gt;/Library/Android/sdk\"\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n</pre></p> <p>You will then have to reload <code>.bash_profile</code> (by executing <code>source ~/.bash_profile</code>) or open a new terminal session to apply the new environment.</p> <h4>Optionally: Creating an Android Virtual Device (AVD) to run apps on an emulator</h4> <p>The current Android emulator tends to be rather slow and can be unstable, so our recommendation is to run your app on a physical device instead.</p> <p>If you do want to run on an emulator however, you will have to create an Android Virtual Device (AVD) using the <a href=\"http://developer.android.com/tools/devices/managing-avds.html\" target=\"_blank\" rel=\"external\">AVD Manager</a>. Make sure to configure one with API level 23, because that is what the version of Cordova we bundle requires.</p> <h2 id=\"running-your-app\">Developing on a device</h2> <p>During development, the Meteor <a href=\"build-tool\">build tool</a> integrates with Cordova to run your app on a physical device or the iOS Simulator/Android emulator. In addition to starting a development server and MongoDB instance as usual, <code>meteor run</code> accepts arguments to run the app on one or more mobile targets:</p> <ul> <li>\n<code>ios</code>: Runs the app on the iOS Simulator<blockquote> <p>Currently, this will always run your app on a simulated iPhone 6s Plus. Use <code>ios-device</code> to open Xcode and select another simulator instead.</p> </blockquote> </li> <li>\n<code>ios-device</code>: Opens Xcode, where you can run the app on a connected iOS device or simulator</li> <li>\n<code>android</code>: Runs the app on the Android emulator<blockquote> <p>The current Android emulator tends to be rather slow and can be unstable. Our recommendation is to run on a physical device or to use an alternative emulator like <a href=\"https://www.genymotion.com\" target=\"_blank\" rel=\"external\">Genymotion</a>.</p> </blockquote> </li> <li>\n<code>android-device</code>: Runs the app on a connected Android device</li> </ul> <p>You can specify multiple targets, so <code>meteor run ios android-device</code> will run the app on both the iOS Simulator and an Android device for example.</p> <h4 id=\"connecting-to-the-server\">Connecting to the server</h4> <p>A Meteor app should be able to connect to a server in order to load data and to enable <a href=\"#hot-code-push\">hot code push</a>, which automatically updates a running app when you make changes to its files. During development, this means the device and the computer you run <code>meteor</code> on will have to be part of the same WiFi network, and the network configuration shouldn’t prevent the device from reaching the server. You may have to change your firewall or router settings to allow for this (no client isolation).</p> <p><code>meteor run</code> will try to detect the local IP address of the computer running the command automatically. If this fails, or if you would like your mobile app to connect to a different server, you can specify an address using the <code>--mobile-server</code> option.</p> <h3 id=\"running-on-ios\">On iOS</h3> <blockquote> <p>Note: If you haven’t previously developed iOS apps, or haven’t used the connected device for development, a series of dialogs and warnings may appear as Xcode resolves code signing issues. It may also prompt you for permission to access the key in your keychain. See <a href=\"https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/AppDistributionGuide/LaunchingYourApponDevices/LaunchingYourApponDevices.html#//apple_ref/doc/uid/TP40012582-CH27-SW4\" target=\"_blank\" rel=\"external\">Apple’s instructions</a> for more information.</p> </blockquote> <ol> <li>Make sure the device is connected to your computer via a USB cable.</li> <li>Connect the device to a WiFi network that allows for communication with the server.</li> <li>Run <code>meteor run ios-device</code> to open your project in Xcode.</li> <li>In the project navigator, choose your device from the Scheme toolbar menu:<br><img src=\"https://guide.meteor.com/images/mobile/xcode-select-device.png\" style=\"width: 30%; height: 30%\">\n</li> <li>Click the Run button:<br><img src=\"https://guide.meteor.com/images/mobile/xcode-run-scheme.png\" style=\"width: 50%; height: 50%\">\n</li> <li>Xcode builds the app, installs it on the device, and launches it.</li> </ol> <h3 id=\"running-on-android\">On Android</h3> <ol> <li>Make sure the device is connected to your computer via a USB cable.</li> <li>Connect the device to a WiFi network that allows for communication with the server.</li> <li>Make sure your device is set up for development <a href=\"http://developer.android.com/tools/device.html#setting-up\" target=\"_blank\" rel=\"external\">as explained here</a>.</li> <li>You may also need to click ‘Allow’ on the <code>Allow USB debugging?</code> prompt on the device.</li> <li>Run <code>meteor run android-device</code> to build the app, install it on the device, and launch it.</li> </ol> <blockquote> <p>To check if your device has been connected and set up correctly, you can run <code>adb devices</code> to get a list of devices.</p> </blockquote> <h2 id=\"logging-and-remote-debugging\">Logging and debugging</h2> <p>A full-stack mobile app consists of many moving parts, and this can make it difficult to diagnose issues. Logging is indispensable in keeping track of what’s going on in your app, and may show warnings and errors that you would otherwise miss. Even more powerful is remote debugging, which is the ability to interact with a mobile app running on a remote device from a debugging interface in Safari (for iOS) or Chrome (for Android).</p> <h3 id=\"understanding=logs\">Different types of logs</h3> <p>You will encounter three types of logs in a Meteor Cordova app:</p> <ul> <li>\n<strong>Server-side logs</strong> - Messages printed by the Meteor build system, and the result of <code>console</code> logging calls from server-side code.</li> <li>\n<strong>Client-side web logs</strong> - Warnings and errors from the web view, and the result of <code>console</code> logging calls from client-side code.</li> <li>\n<strong>Client-side native logs</strong> - Messages from system components and Cordova plugins. This also includes more detailed logging from the Meteor plugin used for <a href=\"#hot-code-push\">hot code push</a>.</li> </ul> <p>When using <code>meteor run</code>, server-side logs will be printed in the terminal as usual. In addition, running on an Android device or emulator will print a subset of the logs to that same terminal (these logs also include <code>console</code> logging calls made from client-side code).</p> <p>Running on iOS will not show client-side logs in the terminal, but Xcode will show native logs as usual in the <a href=\"https://developer.apple.com/library/tvos/documentation/DeveloperTools/Conceptual/debugging_with_xcode/chapters/debugging_tools.html\" target=\"_blank\" rel=\"external\">debug console</a>. You can add <a href=\"https://github.com/apache/cordova-plugin-console\" target=\"_blank\" rel=\"external\">cordova-plugin-console</a> to your project to output <code>console</code> logging calls to the native logs (which Android does by default), but this isn’t recommended because it has a substantial performance impact, and remote debugging gives you much nicer and more complete console output.</p> <p>Although having client-side logs in the terminal can be useful, in most cases remote debugging is a much better option. This allows you to use the debugging tools built into Safari (for iOS apps) or Chrome (for Android apps) to investigate an app running on a remote device or a simulator/emulator. Here, you can not only view the logs, but also interact with running JavaScript code and the DOM, monitor network access, etc.</p> <h3 id=\"remote-debugging-ios\">Debugging on iOS with Safari</h3> <ol> <li>\n<p>To use remote debugging in Safari, you’ll first need to enable the Developer menu. Go to <em>Safari &gt; Preferences</em> and make sure ‘Show Develop menu in menu bar’ is checked:<br><img src=\"https://guide.meteor.com/images/mobile/mac-safari-preferences-show-develop-menu.png\"></p> </li> <li>\n<p>You’ll also need to enable the Web Inspector on your iOS device. Go to <em>Settings &gt; Safari &gt; Advanced</em> and enable ‘Web Inspector’:<br><img src=\"https://guide.meteor.com/images/mobile/ios-safari-settings-web-inspector.png\" style=\"width: 75%; height: 75%\"></p> </li> <li>\n<p>Launch the app on your device and open remote debugger by choosing <em>Develop &gt; &lt;Your device&gt; &gt; &lt;Your app&gt;/localhost</em>.</p> </li> <li>\n<p>Because you can only connect to your app after it has started up, you sometimes miss startup warnings and errors. You can invoke <code>location.reload()</code> in the Web Inspector console to reload a running app, this time with the remote debugger connected.</p> </li> </ol> <p>You can find more information about remote debugging in the <a href=\"https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/\" target=\"_blank\" rel=\"external\">Safari Developer Guide</a>.</p> <h3 id=\"remote-debugging-android\">Debugging on Android with Chrome</h3> <p>See <a href=\"https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging#remote-debugging-on-android-with-chrome-devtools\" target=\"_blank\" rel=\"external\">this article</a> for instructions on how to remote debug your Android app with the Chrome DevTools.</p> <ul> <li>Because you can only connect to your app after it has started up, you sometimes miss startup warnings and errors. You can invoke <code>location.reload()</code> in the DevTools console to reload a running app, this time with the remote debugger connected.</li> </ul> <h2 id=\"hot-code-push\">Hot code push on mobile</h2> <p>During development, the Meteor <a href=\"build-tool\">build tool</a> detects any relevant file changes, recompiles the necessary files, and notifies all connected clients a new version is available. Clients can then automatically reload the app, switching over to the new version of the code. This is referred to as <em>hot code push</em>.</p> <p>Meteor supports hot code push on both browser and mobile clients, but the process on mobile is a bit different. In a browser, reloading the app will re-request assets from the server, and the server will respond with the most recent versions. Because Cordova apps rely on locally stored assets however, hot code push on mobile is a two step process:</p> <ol> <li>Updated assets are downloaded from the server using native downloading mechanisms, and stored on the device</li> <li>The page is reloaded and the web view re-requests the assets from the local web server</li> </ol> <p>An important benefit of this is that while downloading may be slow over mobile connections, this is done in the background, and we won’t attempt to reload the app until all assets have been downloaded to the device.</p> <p>Downloading updates is done incrementally, so we only download assets that have actually changed (based on a content hash). In addition, if we haven’t been able to download all changed assets in one go, because of a network failure or because the app was closed before we finished, we will reuse the ones that have already completed downloading the next time the app starts up or the network connection is restored.</p> <h3 id=\"updating-production-apps\">In production</h3> <p>Hot code push greatly improves the development experience, but on mobile, it is also a really useful feature for production apps, because it allows you to quickly push updates to devices without having users update the app through the store and without going through a possibly lengthy review process to get your update accepted.</p> <p>However, it is important to realize that hot code push can only be used to update the HTML, CSS, JavaScript code and other assets making up your web app. Changes to native code will still require you <a href=\"#building-and-submitting\">to submit a new version of your app to the store</a>.</p> <p>In order to avoid a situation where JavaScript code that relies on changed native code is pushed to a client, we calculate a compatibility version from the Cordova platform and plugin versions, and only download a new version to a device when there is an exact match. This means any change to the list of plugins, or updating to a Meteor release which contains a new platform version, will block hot code push to existing mobile clients until the app has been updated from the store.</p> <p>Something else to keep in mind is that your server-side code should be prepared to handle requests from older client versions, which may not yet have been updated. As you make changes to your data schema or publication functions for example, you may want to reflect on how this will impact backwards compatibility.</p> <h3 id=\"configuring-server-for-hot-code-push\">Configuring your server</h3> <p>As mentioned before, mobile apps need to be able to <a href=\"#connecting-to-the-server\">connect to a server</a> to support hot code push. In production, you will need to specify which server to connect to <a href=\"#building-for-production\">when building the app</a> using the <code>--server</code> option. The specified server address is used to set <code>ROOT_URL</code> in <code>__meteor_runtime_config__</code>, which is defined as part of the generated <code>index.html</code> in the app bundle.</p> <p>In addition, you will need to configure the server with the right connection address. This happens automatically if you’re using <code>meteor deploy</code> to deploy to Galaxy, but when deploying to your own server you’ll have to make sure to define the <code>ROOT_URL</code> environment variable there. (For Meteor Up, you can configure this in <code>mup.json</code>.)</p> <p>The reason this is needed is because updates delivered through hot code push replace the initially bundled <code>index.html</code> with a freshly generated one. If the <code>ROOT_URL</code> on your server hasn’t been set, it defaults to <code>localhost:3000</code>, and this would leave the app unable to connect to the server, both for data loading and for receiving further hot code pushes. In Meteor 1.3, we protect against this by blocking updates that would change the <code>ROOT_URL</code> to <code>localhost</code>, but the consequence of this is that hot code push is disabled until you configure <code>ROOT_URL</code> correctly.</p> <h3 id=\"recovering-from-faulty-versions\">Recovering from faulty versions</h3> <p>Hot code pushing updated JavaScript code to a device could accidentally push code containing errors, which might leave users with a broken app (a ‘white screen of death’, in the worst case), and could even disable hot code push (because the code that makes a connection to the server may no longer run).</p> <p>To avoid this, we try to detect faulty versions and revert to the last known good version when this happens. The way detection works is that we expect all <code>Meteor.startup()</code> callbacks to complete within a set period of time. If this doesn’t happen we consider the version faulty and will rollback the update. Unless the version on the server has been updated in the meantime, the server will try to hot code push the faulty version again. Therefore, we blacklist faulty versions on the device so we know not to retry.</p> <p>By default, the startup timeout is set to 20 seconds. If your app needs more time to startup (or considerably less), you can use <a href=\"http://docs.meteor.com/api/mobile-config.html#App-setPreference\" target=\"_blank\" rel=\"external\"><code>App.setPreference</code></a> to set <code>WebAppStartupTimeout</code> to another value.</p> <h2 id=\"cordova-plugins\">Native features with Cordova plugins</h2> <p>Cordova comes with a plugin architecture that opens up access to features not usually available to web apps. Plugins are installable add-ons that contain both JavaScript and native code, which allows them to translate calls from your web app to platform-specific APIs.</p> <p>The Apache Cordova project maintains a set of <a href=\"https://cordova.apache.org/docs/en/dev/guide/support/index.html#core-plugin-apis\" target=\"_blank\" rel=\"external\">core plugins</a> that provide access to various native device features such as the camera, contacts, or access to the file system. But anyone can write a Cordova plugin to do basically anything that can be done from native code, and many third-party plugins are available. You can <a href=\"https://cordova.apache.org/plugins/\" target=\"_blank\" rel=\"external\">search for plugins on the Cordova website</a> or directly on <a href=\"https://www.npmjs.com/search?q=ecosystem%3Acordova\" target=\"_blank\" rel=\"external\">npm</a>.</p> <p>Be warned however, that although the core plugins are generally well maintained and up to date with the rest of Cordova, the quality of third-party plugins can be a bit of a gamble. You also have to make sure the plugin you want to use is <a href=\"#plugin-compatibility\">compatible with the Cordova platform versions Meteor bundles</a>.</p> <h3 id=\"installing-plugins\">Installing plugins</h3> <p>Plugins are identified by a name, which is generally the same as their npm package name. The current convention is for plugin names to start with <code>cordova-plugin-</code>, but not all third-party plugins adhere to this.</p> <p>You can add Cordova plugins to your project either directly, or as a dependency of a Meteor package.</p> <p>If you want to add a plugin to your project directly, you use the same <code>meteor add</code> command you use for Meteor packages, but with a <code>cordova:</code> prefix:</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor add cordova:cordova-plugin-camera@1.2.0\n</pre> <p>In contrast to Meteor packages, you’ll have to specify the exact version of the plugin. This can be a bit of a pain because you first need to look up what the most recent <a href=\"#plugin-compatibility\">(compatible)</a> version of a plugin is before you can add it.</p> <p>A Meteor package can register a dependency on a Cordova plugin with the <code>Cordova.depends()</code> syntax. For example, a Meteor package that depends on the Cordova camera plugin would add the following to its <code>package.js</code>:</p> <pre class=\"highlight js\" data-language=\"js\">Cordova.depends({\n    'cordova-plugin-camera': '1.2.0'\n});\n</pre> <p>This means adding the Meteor package to your project would also install the specified Cordova plugin.</p> <blockquote> <p>Note: If multiple Meteor packages add the same Cordova plugin but at different versions, there is no clear way of telling which version will end up being installed. Plugins added to your project directly however, will always override versions of the same plugin added as a dependency of packages.</p> </blockquote> <p>Because installing plugins into a Cordova project already containing plugins can lead to indeterminate results, Meteor will remove and add back all plugins whenever a change to any of the plugins in your project is made.</p> <p>Cordova downloads plugins from npm, and caches them (in <code>~/.cordova/lib/npm_cache</code>) so they don’t have to be downloaded repeatedly if you rebuild or use them again in another project.</p> <blockquote> <h4 id=\"plugin-compatibility\">Making sure a plugin is compatible with the bundled Cordova platform versions</h4> <p>Because there is a tight coupling between plugin versions and Cordova platform versions, you may encounter build time or runtime errors as a result of incompatible plugins. If this happens, you will have to install a different plugin version, or it may turn out a plugin is not (yet) compatible with the Cordova platform versions we bundle.</p> <p>In order to help with this, we pin core plugins to a minimum version known to work with the Cordova versions we bundle. This mechanism doesn’t apply to third-party plugins however, so you’ll have to assess compatibility for these yourself.</p> <p>There is ongoing work in the Cordova project that will improve this situation and make it easier for plugins to specify their platform dependencies, so Cordova can determine compatible versions.</p> </blockquote> <h4>Setting plugin parameters</h4> <p>Some Cordova plugins require certain parameters to be set as part of the build process. For example, <code>com-phonegap-plugins-facebookconnect</code> requires you to specify an <code>APP_ID</code> and <code>APP_NAME</code>. You can set these using <code>App.configurePlugin</code> in your <a href=\"http://docs.meteor.com/api/mobile-config.html\" target=\"_blank\" rel=\"external\">mobile-config.js</a>.</p> <h4>Installing a plugin from Git</h4> <p>Alternatively, if unreleased changes have been made to a plugin you’d like to use, you can also have Cordova download plugin code from a Git repository. Note that this will clone the plugin repository on every rebuild however, so this can be rather slow and should be avoided where possible. In contrast to default Cordova, Meteor requires you to specify the exact SHA hash for a commit, rather than allow you to refer to a branch or tag. This is done to guarantee repeatable builds and also avoids unnecessary reinstallation of all plugins because as long as the SHA is the same we know nothing has changed.</p> <p>The syntax to add a plugin from Git is kind of awkward. The name (the part before the <code>@</code>) is the plugin ID and will have to match what is specified in the plugin’s <code>plugin.xml</code>. Instead of a version, you specify a URL to a Git repository with the SHA hash as an anchor (the part after the <code>#</code>):</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor add cordova:com.phonegap.plugins.facebookconnect@https://github.com/Wizcorp/phonegap-facebook-plugin.git#5dbb1583168558b4447a13235283803151cb04ec\n</pre> <p>Meteor packages can also depend on plugins downloaded from Git:</p> <pre class=\"highlight js\" data-language=\"js\">Cordova.depends({\n    'com.phonegap.plugins.facebookconnect': 'https://github.com/Wizcorp/phonegap-facebook-plugin.git#5dbb1583168558b4447a13235283803151cb04ec'\n});\n</pre> <h4>Installing a plugin from the local file system</h4> <p>Finally, especially if you’re developing your own plugin, installing it from the local filesystem can be a convenient way to keep up with changes you make to plugin code. The downside of this is that Meteor will reinstall all plugins on every build however, so this could really slow things down. We do add local plugins with the <code>--link</code> option however, so Cordova will try to install the plugin’s files using symlinks instead of copying them, which means changes to files will be reflected in the generated native project (e.g. an Xcode project) and may not require a rebuild.</p> <p>You install plugins from the local file system by specifying a <code>file://</code> URL, which gets interpreted relative to the project directory:</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor add cordova:cordova-plugin-underdevelopment@file://../plugins/cordova-plugin-underdevelopment\n</pre> <p>Meteor packages can also depend on plugins installed from the local file system, although this probably only makes sense for local packages:</p> <pre class=\"highlight js\" data-language=\"js\">Cordova.depends({\n    'cordova-plugin-underdevelopment': 'file://../plugins/cordova-plugin-underdevelopment'\n});\n</pre> <h4>Removing directly installed plugins</h4> <p>You can remove a previously added plugin using <code>meteor remove</code>:</p> <pre class=\"highlight sh\" data-language=\"sh\">meteor remove cordova:cordova-plugin-camera\nmeteor remove cordova:com.phonegap.plugins.facebookconnect\nmeteor remove cordova:cordova-plugin-underdevelopment\n</pre> <h3 id=\"using-plugins\">Using plugins</h3> <p>You should wrap any functionality which relies on a Cordova plugin in a <code>Meteor.startup()</code> block to make sure the plugin has been fully initialized (by listening to the <code>deviceready</code> event). For example, when using the Cordova geolocation plugin:</p> <pre class=\"highlight js\" data-language=\"js\">// The plugin may not have been initialized here\nnavigator.geolocation.getCurrentPosition(success);\n\nMeteor.startup(function() {\n    // Here we can be sure the plugin has been initialized\n    navigator.geolocation.getCurrentPosition(success);\n});\n</pre> <h3 id=\"cordova-specific-javascript\">Detecting Cordova in your JavaScript code</h3> <p>Just as you can use <code>Meteor.isServer</code> and <code>Meteor.isClient</code> to separate your client-side and server-side code, you can use <code>Meteor.isCordova</code> to separate your Cordova-specific code from the rest of your code.</p> <pre class=\"highlight js\" data-language=\"js\">if (Meteor.isServer) {\n  console.log(\"Printed on the server\");\n}\n\nif (Meteor.isClient) {\n  console.log(\"Printed in browsers and mobile apps\");\n}\n\nif (Meteor.isCordova) {\n  console.log(\"Printed only in mobile Cordova apps\");\n}\n</pre> <p>In addition, packages can include a different set of files for Cordova builds and browser builds with <code>addFiles</code>:</p> <ul> <li>\n<code>api.addFiles('foo.js', 'web.cordova')</code>: includes <code>foo.js</code> in only Cordova builds.</li> <li>\n<code>api.addFiles('bar.js', 'web.browser')</code>: includes <code>bar.js</code> in only browser builds.</li> <li>\n<code>api.addFiles('baz.js', 'web')</code>: includes <code>baz.js</code> in all client builds.</li> </ul> <p>The same syntax can be used for <code>api.use</code>, <code>api.imply</code>, and <code>api.export</code>.</p> <h2 id=\"accessing-local-files-and-remote-resources\">Accessing local files and remote resources</h2> <p>As a web app, Cordova apps are subject to various security mechanisms designed to protect the integrity of your code and to avoid certain types of attacks. Which security mechanisms are in use may depend on the type and version of the web view your app runs in. In addition, Cordova itself, and in some cases the OS, adds different levels of access control that may also affect what content can and cannot be loaded. All this can make it fairly confusing to understand why something is not working, and even harder to understand the security implications of the various ways of configuring these mechanisms.</p> <h3 id=\"accessing-local-files\">Local files</h3> <p>Because the Cordova integration in Meteor does not serve your app from <code>file://</code> URLs, access to local files through <code>file://</code> URLs is not allowed either due to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"external\">same-origin policy</a>.</p> <p>The file serving mechanism used in Meteor allows for local file access through URLs of the form <code>http://localhost:&lt;port&gt;/local-filesystem/&lt;path&gt;</code>) however. You can construct these file system URLs manually, or use <code>WebAppLocalServer.localFileSystemUrl()</code> to convert <code>file://</code> URLs. You can use this to convert URLs received from plugins like <code>cordova-plugin-file</code> and <code>cordova-plugin-camera</code> for example.</p> <h3 id=\"domain-whitelisting\">Domain whitelisting</h3> <p>Cordova controls access to external domains through a whitelisting mechanism, which is implemented as <a href=\"https://github.com/apache/cordova-plugin-whitelist\" target=\"_blank\" rel=\"external\"><code>cordova-plugin-whitelist</code></a> in the version of Cordova we bundle.</p> <p>In Meteor, you use <a href=\"http://docs.meteor.com/api/mobile-config.html#App-accessRule\" target=\"_blank\" rel=\"external\"><code>App.accessRule</code></a> in <a href=\"http://docs.meteor.com/api/mobile-config.html\" target=\"_blank\" rel=\"external\"><code>mobile-config.js</code></a> to set additional rules. (These correspond to <code>&lt;access&gt;</code>, <code>&lt;allow-navigation&gt;</code> and <code>&lt;allow-intent&gt;</code> tags in the generated <code>config.xml</code>.)</p> <blockquote> <p>On iOS, these settings also control <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33\" target=\"_blank\" rel=\"external\">Application Transport Security (ATS)</a>, which is an OS level mechanism to enforce security best practices new to iOS 9. If the server you’re connecting to does not (yet) fulfill these requirements, you can use additional options to override them for specific domains:<br><pre class=\"highlight js\" data-language=\"js\">App.accessRule('https://domain.com', {\n  'minimum-tls-version': 'TLSv1.0',\n  'requires-forward-secrecy': false,\n});\n</pre></p> </blockquote> <p>By default, Cordova apps in Meteor are only allowed access to <code>localhost</code> (the device itself, to serve the app from) and the server your app connects to for data loading and hot code push (either an automatically detected IP address an explicitly configured mobile server domain). These restrictions also apply to loading files in iframes and to opening files in other apps (including the mobile browser).</p> <blockquote> <p>Note that these restrictions mean you will have to explicitly allow loading <code>data:</code> URLs. For example, to allow loading <code>data:</code> URLs in iframes you would add:<br><pre class=\"highlight js\" data-language=\"js\">App.accessRule('data:*', { type: 'navigation' });\n</pre></p> </blockquote> <h3 id=\"csp\">Content Security Policy (CSP)</h3> <p>In addition to the domain whitelisting mechanism Cordova implements, the web view itself may also enforce access rules through <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/CSP\" target=\"_blank\" rel=\"external\">Content Security Policy (CSP)</a>. For now, Meteor adds a permissive <code>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"...\"</code> header to the generated index page. We may want to allow more fine grained control in the future (through integrating with the <code>browser-policy</code> package for instance.)</p> <h3 id=\"cors\">Cross-Origin Resource Sharing (CORS)</h3> <p>What is often confusing to people is that setting <code>App.accessRule</code> is not enough to allow access to remote resources. While domain whitelisting allows the client to control which domains it can connect to, additional restrictions based on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"external\">same-origin policy</a> also apply. By default, web views will not allow cross-origin HTTP requests initiated from JavaScript for instance, so you will likely run into this when using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\"><code>XMLHttpRequest</code></a>.</p> <p>To get around these restrictions, you’ll have to use what is known as <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"external\">Cross-Origin Resource Sharing (CORS)</a>. In contrast to the whitelisting mechanism configured on the client, CORS relies on headers set by the server. In other words, in order to allow access to a remote resource, you may have to make configuration changes on the server, such as setting a <code>Access-Control-Allow-Origin</code> header.</p> <h2 id=\"configuring-your-app\">Configuring your app</h2> <p>Meteor reads a <a href=\"http://docs.meteor.com/api/mobile-config.html\" target=\"_blank\" rel=\"external\"><code>mobile-config.js</code></a> file in the root of your app directory during build, and uses the settings specified there to generate Cordova’s <a href=\"https://cordova.apache.org/docs/en/dev/config_ref/index.html\" target=\"_blank\" rel=\"external\"><code>config.xml</code></a>.</p> <h3 id=\"configuring-metadata\">Metadata</h3> <pre class=\"highlight js\" data-language=\"js\">App.info({\n  id: 'com.meteor.examples.todos',\n  name: 'Todos',\n  version: \"0.0.1\"\n});\n</pre> <h3 id=\"configuring-preferences\">Preferences</h3> <pre class=\"highlight actionscript\" data-language=\"actionscript\">App.setPreference('BackgroundColor', '0xff0000ff');\nApp.setPreference('Orientation', 'default');\nApp.setPreference('Orientation', 'all', 'ios');\n</pre> <p>Refer to the <a href=\"https://cordova.apache.org/docs/en/dev/config_ref/index.html#preference\" target=\"_blank\" rel=\"external\">preferences section</a> of the Cordova documentation for more information about supported options.</p> <h3 id=\"configuring-app-icons-and-launch-screens\">App icons and launch screens</h3> <p>Although Meteor includes a standard set of app icons and launch screens, you’ll most likely want to configure your own images.</p> <p>You configure these images with <a href=\"http://docs.meteor.com/api/mobile-config.html#App-icons\" target=\"_blank\" rel=\"external\"><code>App.icons</code></a> and <a href=\"http://docs.meteor.com/api/mobile-config.html#App-launchScreens\" target=\"_blank\" rel=\"external\"><code>App.launchScreens</code></a>, which both use names to refer to the various supported image sizes (see API documentation).</p> <p>For iOS, you can also refer to the <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html\" target=\"_blank\" rel=\"external\">Icon and image sizes</a> in the iOS Human Interface Guidelines for more information about the way these different sizes are used.</p> <h3 id=\"advanced-build\">Advanced build customization</h3> <p>There is a special top-level directory named <code>cordova-build-override/</code> that allows you to override, in an ad-hoc way, parts of your Cordova project that Meteor generates for you in the <code>.meteor/local/cordova-build</code> directory. The entire file tree of this directory will be <code>cp -R</code> (copied overwriting existing files) to the Cordova project right before the build and compilation step.</p> <p>The problem with this mechanism is that it overrides complete files, so it is not a good solution for customizing <code>config.xml</code>. Replacing the generated version with your own file means you lose all configuration information set by the build process and by installed plugins, which will likely break your app.</p> <p>If you need to customize configuration files, a workaround is to create a dummy Cordova plugin. In its <code>plugin.xml</code>, you can specify a <a href=\"https://cordova.apache.org/docs/en/dev/plugin_ref/spec.html#config-file\" target=\"_blank\" rel=\"external\"><code>config-file</code> element</a> to selectively change parts of configuration files, including <code>config.xml</code>.</p> <blockquote> <p>We recommend using these approaches only if absolutely required and if your customizations can not be handled by standard configuration options.</p> </blockquote> <h2 id=\"building-and-submitting\">Deploying to production</h2> <h3 id=\"building-for-production\">Building for production</h3> <p>Use <code>meteor build &lt;build-output-directory&gt; --server &lt;host&gt;:&lt;port&gt;</code> to build your app for production.</p> <p>The <code>&lt;host&gt;</code> and <code>&lt;port&gt;</code> should be the address of the server you want your app to connect to.</p> <p>This will generate a directory at <code>&lt;build-output-directory&gt;</code>, which includes a server bundle tarball and the project source for each targeted mobile platform in the <code>/ios</code> and <code>/android</code> directories.</p> <p>You can pass <code>--server-only</code> to only build the server bundle. This allows you to build your app without installing the mobile SDKs on the build machine. This is useful if you use an automated deployment setup for instance. (If you remove the mobile platforms before building instead, hot code push will be disabled because the assets for Cordova included in the server bundle will not be generated.)</p> <h3 id=\"submitting-ios\">iOS App Store</h3> <p>In order to build your app for iOS, you will need to <a href=\"#configuring-your-app\">configure your app</a> with at least a version number, and the required set of app icons and launch screens.</p> <p>After running <code>meteor build</code> you can open the generated Xcode project in Xcode:<br><pre class=\"highlight sh\" data-language=\"sh\">cd &lt;build-output-directory&gt;/ios/project\nopen MyApp.xcodeproj\n</pre></p> <p>From this point on, the process for building the app archive and submitting it to the App Store is the same as it would be for any other iOS app. Please refer to <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html\" target=\"_blank\" rel=\"external\">Apple’s documentation</a> for further details.</p> <h3 id=\"submitting-android\">Android Play Store</h3> <p>In order to build your app for Android, you will need to <a href=\"#configuring-your-app\">configure your app</a> with at least a version number, and the required set of app icons and launch screens.</p> <p>After running <code>meteor build</code> the generated APK will be copied from the <code>&lt;build-output-directory&gt;/android/project/build/outputs/apk</code> directory to <code>&lt;build-output-directory&gt;/android/release-unsigned.apk</code>.</p> <p>Before submitting the APK(s) to the Play Store, you will need to sign the APK and run <a href=\"http://developer.android.com/tools/help/zipalign.html\" target=\"_blank\" rel=\"external\"><code>zipalign</code></a> on it to optimize the archive.</p> <p>(See the <a href=\"http://developer.android.com/tools/publishing/app-signing.html\" target=\"_blank\" rel=\"external\">Android developer documentation</a> for more details about the app signing procedure.)</p> <p>To sign your app, you’ll need a private key. This key lets you publish and update your app. If you haven’t made a key for this app yet, run:<br><pre class=\"highlight sh\" data-language=\"sh\">keytool -genkey -alias your-app-name -keyalg RSA -keysize 2048 -validity 10000\n</pre></p> <p>Optionally, you can specify <code>--keystore</code> to use a different keystore. Don’t forget to specify the same keystore when signing the APK.</p> <blockquote> <p>Note: Ensure that you have secure backups of your keystore (<code>~/.keystore</code> is the default). If you publish an app to the Play Store and then lose the key with which you signed your app, you will not be able to publish any updates to your app, since you must always sign all versions of your app with the same key.</p> </blockquote> <p>Now, you can sign the APK:<br><pre class=\"highlight sh\" data-language=\"sh\">cd ~/build-output-directory/android/\njarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 release-unsigned.apk your-app-name\n</pre></p> <p>Next, you can run zipalign on it to optimize the APK:<br><pre class=\"highlight sh\" data-language=\"sh\">$ANDROID_HOME/build-tools/&lt;build-tools-version&gt;/zipalign 4 release-unsigned.apk &lt;your-app-name&gt;.apk\n</pre></p> <p>From this point on, the process for submitting the app to the Play Store is the same as it would be for any other Android app. <code>&lt;your-app-name&gt;.apk</code> is the APK to upload to the store. Learn more by visiting <a href=\"https://play.google.com/apps/publish\" target=\"_blank\" rel=\"external\">https://play.google.com/apps/publish</a>.</p> <h4>Submitting an app using Crosswalk to to Play Store</h4> <p>Because Crosswalk bundles native code for Chromium, you will end up with APKs for both ARM and x86. You can find the generated APKs in the <code>&lt;build-output-directory&gt;/android/project/build/outputs/apk</code> directory.</p> <p>You will have to sign and <code>zipalign</code> both APKs. You will also have to submit both to the Play Store, see <a href=\"http://developer.android.com/google/play/publishing/multiple-apks.html\" target=\"_blank\" rel=\"external\">submitting multiple APKs</a> for more information.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2011&ndash;2016 Meteor Development Group<br>Licensed under the MIT License.<br>\n    <a href=\"https://guide.meteor.com/mobile.html\" class=\"_attribution-link\">https://guide.meteor.com/mobile.html</a>\n  </p>\n</div>\n"}